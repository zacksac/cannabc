/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@fancyapps/ui/src/Carousel/Carousel.js":
/*!*************************************************************!*\
  !*** ./node_modules/@fancyapps/ui/src/Carousel/Carousel.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Carousel: () => (/* binding */ Carousel)
/* harmony export */ });
/* harmony import */ var _shared_Base_Base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/Base/Base.js */ "./node_modules/@fancyapps/ui/src/shared/Base/Base.js");
/* harmony import */ var _Panzoom_Panzoom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Panzoom/Panzoom.js */ "./node_modules/@fancyapps/ui/src/Panzoom/Panzoom.js");
/* harmony import */ var _shared_utils_extend_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/utils/extend.js */ "./node_modules/@fancyapps/ui/src/shared/utils/extend.js");
/* harmony import */ var _shared_utils_round_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/utils/round.js */ "./node_modules/@fancyapps/ui/src/shared/utils/round.js");
/* harmony import */ var _shared_utils_throttle_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../shared/utils/throttle.js */ "./node_modules/@fancyapps/ui/src/shared/utils/throttle.js");
/* harmony import */ var _plugins_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./plugins/index.js */ "./node_modules/@fancyapps/ui/src/Carousel/plugins/index.js");
/* harmony import */ var _l10n_en_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./l10n/en.js */ "./node_modules/@fancyapps/ui/src/Carousel/l10n/en.js");









// Default language


const defaults = {
  // Virtual slides. Each object should have at least `html` property that will be used to set content,
  // example: `slides: [{html: 'First slide'}, {html: 'Second slide'}]`
  slides: [],

  // Number of slides to preload before/after visible slides
  preload: 0,

  // Number of slides to group into the page,
  // if `auto` - group all slides that fit into the viewport
  slidesPerPage: "auto",

  // Index of initial page
  initialPage: null,

  // Index of initial slide
  initialSlide: null,

  // Panzoom friction while changing page
  friction: 0.92,

  // Should center active page
  center: true,

  // Should carousel scroll infinitely
  infinite: true,

  // Should the gap be filled before first and after last slide if `infinite: false`
  fill: true,

  // Should Carousel settle at any position after a swipe.
  dragFree: false,

  // Prefix for CSS classes, must be the same as the  SCSS `$carousel-prefix` variable
  prefix: "",

  // Class names for DOM elements (without prefix)
  classNames: {
    viewport: "carousel__viewport",
    track: "carousel__track",
    slide: "carousel__slide",

    // Classname toggled for slides inside current page
    slideSelected: "is-selected",
  },

  // Localization of strings
  l10n: _l10n_en_js__WEBPACK_IMPORTED_MODULE_6__["default"],
};

class Carousel extends _shared_Base_Base_js__WEBPACK_IMPORTED_MODULE_0__.Base {
  /**
   * Carousel constructor
   * @constructs Carousel
   * @param {HTMLElement} $container - Carousel container
   * @param {Object} [options] - Options for Carousel
   */
  constructor($container, options = {}) {
    options = (0,_shared_utils_extend_js__WEBPACK_IMPORTED_MODULE_2__.extend)(true, {}, defaults, options);

    super(options);

    this.state = "init";

    this.$container = $container;

    if (!(this.$container instanceof HTMLElement)) {
      throw new Error("No root element provided");
    }

    this.slideNext = (0,_shared_utils_throttle_js__WEBPACK_IMPORTED_MODULE_4__.throttle)(this.slideNext.bind(this), 250, true);
    this.slidePrev = (0,_shared_utils_throttle_js__WEBPACK_IMPORTED_MODULE_4__.throttle)(this.slidePrev.bind(this), 250, true);

    this.init();

    $container.__Carousel = this;
  }

  /**
   * Perform initialization
   */
  init() {
    this.pages = [];
    this.page = this.pageIndex = null;
    this.prevPage = this.prevPageIndex = null;

    this.attachPlugins(Carousel.Plugins);

    this.trigger("init");

    this.initLayout();

    this.initSlides();

    this.updateMetrics();

    if (this.$track && this.pages.length) {
      this.$track.style.transform = `translate3d(${this.pages[this.page].left * -1}px, 0px, 0) scale(1)`;
    }

    this.manageSlideVisiblity();

    this.initPanzoom();

    this.state = "ready";

    this.trigger("ready");
  }

  /**
   * Initialize layout; create necessary elements
   */
  initLayout() {
    const prefix = this.option("prefix");
    const classNames = this.option("classNames");

    this.$viewport = this.option("viewport") || this.$container.querySelector(`.${prefix}${classNames.viewport}`);

    if (!this.$viewport) {
      this.$viewport = document.createElement("div");
      this.$viewport.classList.add(...(prefix + classNames.viewport).split(" "));

      this.$viewport.append(...this.$container.childNodes);

      this.$container.appendChild(this.$viewport);
    }

    this.$track = this.option("track") || this.$container.querySelector(`.${prefix}${classNames.track}`);

    if (!this.$track) {
      this.$track = document.createElement("div");
      this.$track.classList.add(...(prefix + classNames.track).split(" "));

      this.$track.append(...this.$viewport.childNodes);

      this.$viewport.appendChild(this.$track);
    }
  }

  /**
   * Fill `slides` array with objects from existing nodes and/or `slides` option
   */
  initSlides() {
    this.slides = [];

    // Get existing slides from the DOM
    const elems = this.$viewport.querySelectorAll(`.${this.option("prefix")}${this.option("classNames.slide")}`);

    elems.forEach((el) => {
      const slide = {
        $el: el,
        isDom: true,
      };

      this.slides.push(slide);

      this.trigger("createSlide", slide, this.slides.length);
    });

    // Add virtual slides, but do not create DOM elements yet,
    // because they will be created dynamically based on current carousel position
    if (Array.isArray(this.options.slides)) {
      this.slides = (0,_shared_utils_extend_js__WEBPACK_IMPORTED_MODULE_2__.extend)(true, [...this.slides], this.options.slides);
    }
  }

  /**
   * Do all calculations related to slide size and paging
   */
  updateMetrics() {
    // Calculate content width, viewport width
    // ===
    let contentWidth = 0;
    let indexes = [];
    let lastSlideWidth;

    this.slides.forEach((slide, index) => {
      const $el = slide.$el;
      const slideWidth = slide.isDom || !lastSlideWidth ? this.getSlideMetrics($el) : lastSlideWidth;

      slide.index = index;
      slide.width = slideWidth;
      slide.left = contentWidth;

      lastSlideWidth = slideWidth;
      contentWidth += slideWidth;

      indexes.push(index);
    });

    let viewportWidth = Math.max(this.$track.offsetWidth, (0,_shared_utils_round_js__WEBPACK_IMPORTED_MODULE_3__.round)(this.$track.getBoundingClientRect().width));

    let viewportStyles = getComputedStyle(this.$track);
    viewportWidth = viewportWidth - (parseFloat(viewportStyles.paddingLeft) + parseFloat(viewportStyles.paddingRight));

    this.contentWidth = contentWidth;
    this.viewportWidth = viewportWidth;

    // Split slides into pages
    // ===
    const pages = [];
    const slidesPerPage = this.option("slidesPerPage");

    if (Number.isInteger(slidesPerPage) && contentWidth > viewportWidth) {
      // Fixed number of slides in the page
      for (let i = 0; i < this.slides.length; i += slidesPerPage) {
        pages.push({
          indexes: indexes.slice(i, i + slidesPerPage),
          slides: this.slides.slice(i, i + slidesPerPage),
        });
      }
    } else {
      // Slides that fit inside viewport
      let currentPage = 0;
      let currentWidth = 0;

      for (let i = 0; i < this.slides.length; i += 1) {
        let slide = this.slides[i];

        // Add next page
        if (!pages.length || currentWidth + slide.width > viewportWidth) {
          pages.push({
            indexes: [],
            slides: [],
          });

          currentPage = pages.length - 1;
          currentWidth = 0;
        }

        currentWidth += slide.width;

        pages[currentPage].indexes.push(i);
        pages[currentPage].slides.push(slide);
      }
    }

    const shouldCenter = this.option("center");
    const shouldFill = this.option("fill");

    // Calculate width and start position for each page
    // ===
    pages.forEach((page, index) => {
      page.index = index;
      page.width = page.slides.reduce((sum, slide) => sum + slide.width, 0);

      page.left = page.slides[0].left;

      if (shouldCenter) {
        page.left += (viewportWidth - page.width) * 0.5 * -1;
      }

      if (shouldFill && !this.option("infiniteX", this.option("infinite")) && contentWidth > viewportWidth) {
        page.left = Math.max(page.left, 0);
        page.left = Math.min(page.left, contentWidth - viewportWidth);
      }
    });

    // Merge pages
    // ===
    const rez = [];
    let prevPage;

    pages.forEach((page2) => {
      const page = { ...page2 };

      if (prevPage && page.left === prevPage.left) {
        prevPage.width += page.width;

        prevPage.slides = [...prevPage.slides, ...page.slides];
        prevPage.indexes = [...prevPage.indexes, ...page.indexes];
      } else {
        page.index = rez.length;

        prevPage = page;

        rez.push(page);
      }
    });

    this.pages = rez;

    let page = this.page;

    if (page === null) {
      const initialSlide = this.option("initialSlide");

      if (initialSlide !== null) {
        page = this.findPageForSlide(initialSlide);
      } else {
        page = parseInt(this.option("initialPage", 0), 10) || 0;
      }

      if (!rez[page]) {
        page = rez.length && page > rez.length ? rez[rez.length - 1].index : 0;
      }

      this.page = page;
      this.pageIndex = page;
    }

    this.updatePanzoom();

    this.trigger("refresh");
  }

  /**
   * Calculate slide element width (including left, right margins)
   * @param {Object} node
   * @returns {Number} Width in px
   */
  getSlideMetrics(node) {
    if (!node) {
      const firstSlide = this.slides[0];

      node = document.createElement("div");

      node.dataset.isTestEl = 1;
      node.style.visibility = "hidden";
      node.classList.add(...(this.option("prefix") + this.option("classNames.slide")).split(" "));

      // Assume all slides have the same custom class, if any
      if (firstSlide.customClass) {
        node.classList.add(...firstSlide.customClass.split(" "));
      }

      this.$track.prepend(node);
    }

    let width = Math.max(node.offsetWidth, (0,_shared_utils_round_js__WEBPACK_IMPORTED_MODULE_3__.round)(node.getBoundingClientRect().width));

    // Add left/right margin
    const style = node.currentStyle || window.getComputedStyle(node);
    width = width + (parseFloat(style.marginLeft) || 0) + (parseFloat(style.marginRight) || 0);

    if (node.dataset.isTestEl) {
      node.remove();
    }

    return width;
  }

  /**
   *
   * @param {Integer} index Index of the slide
   * @returns {Integer|null} Index of the page if found, or null
   */
  findPageForSlide(index) {
    index = parseInt(index, 10) || 0;

    const page = this.pages.find((page) => {
      return page.indexes.indexOf(index) > -1;
    });

    return page ? page.index : null;
  }

  /**
   * Slide to next page, if possible
   */
  slideNext() {
    this.slideTo(this.pageIndex + 1);
  }

  /**
   * Slide to previous page, if possible
   */
  slidePrev() {
    this.slideTo(this.pageIndex - 1);
  }

  /**
   * Slides carousel to given page
   * @param {Number} page - New index of active page
   * @param {Object} [params] - Additional options
   */
  slideTo(page, params = {}) {
    const { x = this.setPage(page, true) * -1, y = 0, friction = this.option("friction") } = params;

    if (this.Panzoom.content.x === x && !this.Panzoom.velocity.x && friction) {
      return;
    }

    this.Panzoom.panTo({
      x,
      y,
      friction,
      ignoreBounds: true,
    });

    if (this.state === "ready" && this.Panzoom.state === "ready") {
      this.trigger("settle");
    }
  }

  /**
   * Initialise main Panzoom instance
   */
  initPanzoom() {
    if (this.Panzoom) {
      this.Panzoom.destroy();
    }

    // Create fresh object containing options for Pazoom instance
    const options = (0,_shared_utils_extend_js__WEBPACK_IMPORTED_MODULE_2__.extend)(
      true,
      {},
      {
        // Track element will be set as Panzoom $content
        content: this.$track,
        wrapInner: false,
        resizeParent: false,

        // Disable any user interaction
        zoom: false,
        click: false,

        // Right now, only horizontal navigation is supported
        lockAxis: "x",

        x: this.pages.length ? this.pages[this.page].left * -1 : 0,
        centerOnStart: false,

        // Make `textSelection` option more easy to customize
        textSelection: () => this.option("textSelection", false),

        // Disable dragging if content (e.g. all slides) fits inside viewport
        panOnlyZoomed: function () {
          return this.content.width <= this.viewport.width;
        },
      },
      this.option("Panzoom")
    );

    // Create new Panzoom instance
    this.Panzoom = new _Panzoom_Panzoom_js__WEBPACK_IMPORTED_MODULE_1__.Panzoom(this.$container, options);

    this.Panzoom.on({
      // Bubble events
      "*": (name, ...details) => this.trigger(`Panzoom.${name}`, ...details),
      // The rest of events to be processed
      afterUpdate: () => {
        this.updatePage();
      },
      beforeTransform: this.onBeforeTransform.bind(this),
      touchEnd: this.onTouchEnd.bind(this),
      endAnimation: () => {
        this.trigger("settle");
      },
    });

    // The contents of the slides may cause the page scroll bar to appear, so the carousel width may change
    // and slides have to be repositioned
    this.updateMetrics();
    this.manageSlideVisiblity();
  }

  updatePanzoom() {
    if (!this.Panzoom) {
      return;
    }

    this.Panzoom.content = {
      ...this.Panzoom.content,
      fitWidth: this.contentWidth,
      origWidth: this.contentWidth,
      width: this.contentWidth,
    };

    if (this.pages.length > 1 && this.option("infiniteX", this.option("infinite"))) {
      this.Panzoom.boundX = null;
    } else if (this.pages.length) {
      this.Panzoom.boundX = {
        from: this.pages[this.pages.length - 1].left * -1,
        to: this.pages[0].left * -1,
      };
    }

    if (this.option("infiniteY", this.option("infinite"))) {
      this.Panzoom.boundY = null;
    } else {
      this.Panzoom.boundY = {
        from: 0,
        to: 0,
      };
    }

    this.Panzoom.handleCursor();
  }

  manageSlideVisiblity() {
    const contentWidth = this.contentWidth;
    const viewportWidth = this.viewportWidth;

    let currentX = this.Panzoom ? this.Panzoom.content.x * -1 : this.pages.length ? this.pages[this.page].left : 0;

    const preload = this.option("preload");
    const infinite = this.option("infiniteX", this.option("infinite"));

    const paddingLeft = parseFloat(getComputedStyle(this.$viewport, null).getPropertyValue("padding-left"));
    const paddingRight = parseFloat(getComputedStyle(this.$viewport, null).getPropertyValue("padding-right"));

    // Check visibility of each slide
    this.slides.forEach((slide) => {
      let leftBoundary, rightBoundary;

      let hasDiff = 0;

      // #1 - slides in current viewport; this does not include infinite items
      leftBoundary = currentX - paddingLeft;
      rightBoundary = currentX + viewportWidth + paddingRight;

      leftBoundary -= preload * (viewportWidth + paddingLeft + paddingRight);
      rightBoundary += preload * (viewportWidth + paddingLeft + paddingRight);

      const insideCurrentInterval = slide.left + slide.width > leftBoundary && slide.left < rightBoundary;

      // #2 - infinite items inside current viewport; from previous interval
      leftBoundary = currentX + contentWidth - paddingLeft;
      rightBoundary = currentX + contentWidth + viewportWidth + paddingRight;

      // Include slides that have to be preloaded
      leftBoundary -= preload * (viewportWidth + paddingLeft + paddingRight);

      const insidePrevInterval = infinite && slide.left + slide.width > leftBoundary && slide.left < rightBoundary;

      // #2 - infinite items inside current viewport; from next interval
      leftBoundary = currentX - contentWidth - paddingLeft;
      rightBoundary = currentX - contentWidth + viewportWidth + paddingRight;

      // Include slides that have to be preloaded
      leftBoundary -= preload * (viewportWidth + paddingLeft + paddingRight);

      const insideNextInterval = infinite && slide.left + slide.width > leftBoundary && slide.left < rightBoundary;

      // Create virtual slides that should be visible or preloaded, remove others
      if (insidePrevInterval || insideCurrentInterval || insideNextInterval) {
        this.createSlideEl(slide);

        if (insideCurrentInterval) {
          hasDiff = 0;
        }

        if (insidePrevInterval) {
          hasDiff = -1;
        }

        if (insideNextInterval) {
          hasDiff = 1;
        }

        // Bring preloaded slides back to viewport, if needed
        if (slide.left + slide.width > currentX && slide.left <= currentX + viewportWidth + paddingRight) {
          hasDiff = 0;
        }
      } else {
        this.removeSlideEl(slide);
      }

      slide.hasDiff = hasDiff;
    });

    // Reposition slides for continuity
    let nextIndex = 0;
    let nextPos = 0;

    this.slides.forEach((slide, index) => {
      let updatedX = 0;

      if (slide.$el) {
        if (index !== nextIndex || slide.hasDiff) {
          updatedX = nextPos + slide.hasDiff * contentWidth;
        } else {
          nextPos = 0;
        }

        slide.$el.style.left = Math.abs(updatedX) > 0.1 ? `${nextPos + slide.hasDiff * contentWidth}px` : "";

        nextIndex++;
      } else {
        nextPos += slide.width;
      }
    });

    this.markSelectedSlides();
  }

  /**
   * Creates main DOM element for virtual slides,
   * lazy loads images inside regular slides
   * @param {Object} slide
   */
  createSlideEl(slide) {
    if (!slide) {
      return;
    }

    if (slide.$el) {
      let curentIndex = slide.$el.dataset.index;

      if (!curentIndex || parseInt(curentIndex, 10) !== slide.index) {
        slide.$el.dataset.index = slide.index;

        // Lazy load images
        // ===
        slide.$el.querySelectorAll("[data-lazy-srcset]").forEach((node) => {
          node.srcset = node.dataset.lazySrcset;
        });

        slide.$el.querySelectorAll("[data-lazy-src]").forEach((node) => {
          let lazySrc = node.dataset.lazySrc;

          if (node instanceof HTMLImageElement) {
            node.src = lazySrc;
          } else {
            node.style.backgroundImage = `url('${lazySrc}')`;
          }
        });

        // Lazy load slide background image
        // ===
        let lazySrc;

        if ((lazySrc = slide.$el.dataset.lazySrc)) {
          slide.$el.style.backgroundImage = `url('${lazySrc}')`;
        }

        slide.state = "ready";
      }

      return;
    }

    const div = document.createElement("div");

    div.dataset.index = slide.index;
    div.classList.add(...(this.option("prefix") + this.option("classNames.slide")).split(" "));

    if (slide.customClass) {
      div.classList.add(...slide.customClass.split(" "));
    }

    if (slide.html) {
      div.innerHTML = slide.html;
    }

    const allElelements = [];

    this.slides.forEach((slide, index) => {
      if (slide.$el) {
        allElelements.push(index);
      }
    });

    // Find a place in DOM to insert an element
    const goal = slide.index;
    let refSlide = null;

    if (allElelements.length) {
      let refIndex = allElelements.reduce((prev, curr) =>
        Math.abs(curr - goal) < Math.abs(prev - goal) ? curr : prev
      );
      refSlide = this.slides[refIndex];
    }

    this.$track.insertBefore(
      div,
      refSlide && refSlide.$el ? (refSlide.index < slide.index ? refSlide.$el.nextSibling : refSlide.$el) : null
    );

    slide.$el = div;

    this.trigger("createSlide", slide, goal);

    return slide;
  }

  /**
   * Removes main DOM element of given slide
   * @param {Object} slide
   */
  removeSlideEl(slide) {
    if (slide.$el && !slide.isDom) {
      this.trigger("removeSlide", slide);

      slide.$el.remove();
      slide.$el = null;
    }
  }

  /**
   * Toggles selected class name and aria-hidden attribute for slides based on visibility
   */
  markSelectedSlides() {
    const selectedClass = this.option("classNames.slideSelected");
    const attr = "aria-hidden";

    this.slides.forEach((slide, index) => {
      const $el = slide.$el;

      if (!$el) {
        return;
      }

      const page = this.pages[this.page];

      if (page && page.indexes && page.indexes.indexOf(index) > -1) {
        if (selectedClass && !$el.classList.contains(selectedClass)) {
          $el.classList.add(selectedClass);
          this.trigger("selectSlide", slide);
        }

        $el.removeAttribute(attr);
      } else {
        if (selectedClass && $el.classList.contains(selectedClass)) {
          $el.classList.remove(selectedClass);
          this.trigger("unselectSlide", slide);
        }

        $el.setAttribute(attr, true);
      }
    });
  }

  /**
   * Perform all calculations and center current page
   */
  updatePage() {
    this.updateMetrics();

    this.slideTo(this.page, { friction: 0 });
  }

  /**
   * Process `Panzoom.beforeTransform` event to remove slides moved out of viewport and
   * to create necessary ones
   */
  onBeforeTransform() {
    if (this.option("infiniteX", this.option("infinite"))) {
      this.manageInfiniteTrack();
    }

    this.manageSlideVisiblity();
  }

  /**
   * Seamlessly flip position of infinite carousel, if needed; this way x position stays low
   */
  manageInfiniteTrack() {
    const contentWidth = this.contentWidth;
    const viewportWidth = this.viewportWidth;

    if (!this.option("infiniteX", this.option("infinite")) || this.pages.length < 2 || contentWidth < viewportWidth) {
      return;
    }

    const panzoom = this.Panzoom;

    let isFlipped = false;

    if (panzoom.content.x < (contentWidth - viewportWidth) * -1) {
      panzoom.content.x += contentWidth;

      this.pageIndex = this.pageIndex - this.pages.length;

      isFlipped = true;
    }

    if (panzoom.content.x > viewportWidth) {
      panzoom.content.x -= contentWidth;

      this.pageIndex = this.pageIndex + this.pages.length;

      isFlipped = true;
    }

    if (isFlipped && panzoom.state === "pointerdown") {
      panzoom.resetDragPosition();
    }

    return isFlipped;
  }

  /**
   * Process `Panzoom.touchEnd` event; slide to next/prev page if needed
   * @param {object} panzoom
   */
  onTouchEnd(panzoom, event) {
    const dragFree = this.option("dragFree");

    // If this is a quick horizontal flick, slide to next/prev slide
    if (
      !dragFree &&
      this.pages.length > 1 &&
      panzoom.dragOffset.time < 350 &&
      Math.abs(panzoom.dragOffset.y) < 1 &&
      Math.abs(panzoom.dragOffset.x) > 5
    ) {
      this[panzoom.dragOffset.x < 0 ? "slideNext" : "slidePrev"]();
      return;
    }

    // Set the slide at the end of the animation as the current one,
    // or slide to closest page
    if (dragFree) {
      const [, nextPageIndex] = this.getPageFromPosition(panzoom.transform.x * -1);
      this.setPage(nextPageIndex);
    } else {
      this.slideToClosest();
    }
  }

  /**
   * Slides to the closest page (useful, if carousel is changed manually)
   * @param {Object} [params] - Object containing additional options
   */
  slideToClosest(params = {}) {
    let [, nextPageIndex] = this.getPageFromPosition(this.Panzoom.content.x * -1);

    this.slideTo(nextPageIndex, params);
  }

  /**
   * Returns index of closest page to given x position
   * @param {Number} xPos
   */
  getPageFromPosition(xPos) {
    const pageCount = this.pages.length;
    const center = this.option("center");

    if (center) {
      xPos += this.viewportWidth * 0.5;
    }

    const interval = Math.floor(xPos / this.contentWidth);

    xPos -= interval * this.contentWidth;

    let slide = this.slides.find((slide) => slide.left <= xPos && slide.left + slide.width > xPos);

    if (slide) {
      let pageIndex = this.findPageForSlide(slide.index);

      return [pageIndex, pageIndex + interval * pageCount];
    }

    return [0, 0];
  }

  /**
   * Changes active page
   * @param {Number} page - New index of active page
   * @param {Boolean} toClosest - to closest page based on scroll distance (for infinite navigation)
   */
  setPage(page, toClosest) {
    let nextPosition = 0;
    let pageIndex = parseInt(page, 10) || 0;

    const prevPage = this.page,
      prevPageIndex = this.pageIndex,
      pageCount = this.pages.length;

    const contentWidth = this.contentWidth;
    const viewportWidth = this.viewportWidth;

    page = ((pageIndex % pageCount) + pageCount) % pageCount;

    if (this.option("infiniteX", this.option("infinite")) && contentWidth > viewportWidth) {
      const nextInterval = Math.floor(pageIndex / pageCount) || 0,
        elemDimWidth = contentWidth;

      nextPosition = this.pages[page].left + nextInterval * elemDimWidth;

      if (toClosest === true && pageCount > 2) {
        let currPosition = this.Panzoom.content.x * -1;

        // * Find closest interval
        const decreasedPosition = nextPosition - elemDimWidth,
          increasedPosition = nextPosition + elemDimWidth,
          diff1 = Math.abs(currPosition - nextPosition),
          diff2 = Math.abs(currPosition - decreasedPosition),
          diff3 = Math.abs(currPosition - increasedPosition);

        if (diff3 < diff1 && diff3 <= diff2) {
          nextPosition = increasedPosition;
          pageIndex += pageCount;
        } else if (diff2 < diff1 && diff2 < diff3) {
          nextPosition = decreasedPosition;
          pageIndex -= pageCount;
        }
      }
    } else {
      page = pageIndex = Math.max(0, Math.min(pageIndex, pageCount - 1));

      nextPosition = this.pages.length ? this.pages[page].left : 0;
    }

    this.page = page;
    this.pageIndex = pageIndex;

    if (prevPage !== null && page !== prevPage) {
      this.prevPage = prevPage;
      this.prevPageIndex = prevPageIndex;

      this.trigger("change", page, prevPage);
    }

    return nextPosition;
  }

  /**
   * Clean up
   */
  destroy() {
    this.state = "destroy";

    this.slides.forEach((slide) => {
      this.removeSlideEl(slide);
    });

    this.slides = [];

    this.Panzoom.destroy();

    this.detachPlugins();
  }
}

// Expose version
Carousel.version = "__VERSION__";

// Static properties are a recent addition that dont work in all browsers yet
Carousel.Plugins = _plugins_index_js__WEBPACK_IMPORTED_MODULE_5__.Plugins;


/***/ }),

/***/ "./node_modules/@fancyapps/ui/src/Carousel/l10n/en.js":
/*!************************************************************!*\
  !*** ./node_modules/@fancyapps/ui/src/Carousel/l10n/en.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  NEXT: "Next slide",
  PREV: "Previous slide",
  GOTO: "Go to slide #%d",
});


/***/ }),

/***/ "./node_modules/@fancyapps/ui/src/Carousel/plugins/Dots/Dots.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@fancyapps/ui/src/Carousel/plugins/Dots/Dots.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Dots: () => (/* binding */ Dots)
/* harmony export */ });
const defaults = {
  // The minimum number of slides to display dots
  minSlideCount: 2,
};

class Dots {
  constructor(carousel) {
    this.carousel = carousel;

    this.$list = null;

    this.events = {
      change: this.onChange.bind(this),
      refresh: this.onRefresh.bind(this),
    };
  }

  /**
   * Build wrapping DOM element containing all dots
   */
  buildList() {
    if (this.carousel.pages.length < this.carousel.option("Dots.minSlideCount")) {
      return;
    }

    const $list = document.createElement("ol");

    $list.classList.add("carousel__dots");

    $list.addEventListener("click", (e) => {
      if (!("page" in e.target.dataset)) {
        return;
      }

      e.preventDefault();
      e.stopPropagation();

      const page = parseInt(e.target.dataset.page, 10);
      const carousel = this.carousel;

      if (page === carousel.page) {
        return;
      }

      if (carousel.pages.length < 3 && carousel.option("infinite")) {
        carousel[page == 0 ? "slidePrev" : "slideNext"]();
      } else {
        carousel.slideTo(page);
      }
    });

    this.$list = $list;

    this.carousel.$container.appendChild($list);
    this.carousel.$container.classList.add("has-dots");

    return $list;
  }

  /**
   * Remove wrapping DOM element
   */
  removeList() {
    if (this.$list) {
      this.$list.parentNode.removeChild(this.$list);
      this.$list = null;
    }

    this.carousel.$container.classList.remove("has-dots");
  }

  /**
   * Remove existing dots and create fresh ones
   */
  rebuildDots() {
    let $list = this.$list;

    const listExists = !!$list;
    const pagesCount = this.carousel.pages.length;

    if (pagesCount < 2) {
      if (listExists) {
        this.removeList();
      }

      return;
    }

    if (!listExists) {
      $list = this.buildList();
    }

    // Remove existing dots
    const dotCount = this.$list.children.length;

    if (dotCount > pagesCount) {
      for (let i = pagesCount; i < dotCount; i++) {
        this.$list.removeChild(this.$list.lastChild);
      }

      return;
    }

    // Create fresh DOM elements (dots) for each page
    for (let index = dotCount; index < pagesCount; index++) {
      const $dot = document.createElement("li");

      $dot.classList.add("carousel__dot");
      $dot.dataset.page = index;

      $dot.setAttribute("role", "button");
      $dot.setAttribute("tabindex", "0");
      $dot.setAttribute("title", this.carousel.localize("{{GOTO}}", [["%d", index + 1]]));

      $dot.addEventListener("keydown", (event) => {
        const code = event.code;

        let $el;

        if (code === "Enter" || code === "NumpadEnter") {
          $el = $dot;
        } else if (code === "ArrowRight") {
          $el = $dot.nextSibling;
        } else if (code === "ArrowLeft") {
          $el = $dot.previousSibling;
        }

        $el && $el.click();
      });

      this.$list.appendChild($dot);
    }

    this.setActiveDot();
  }

  /**
   * Mark active dot by toggling class name
   */
  setActiveDot() {
    if (!this.$list) {
      return;
    }

    this.$list.childNodes.forEach(($dot) => {
      $dot.classList.remove("is-selected");
    });

    const $activeDot = this.$list.childNodes[this.carousel.page];

    if ($activeDot) {
      $activeDot.classList.add("is-selected");
    }
  }

  /**
   * Process carousel `change` event
   */
  onChange() {
    this.setActiveDot();
  }

  /**
   * Process carousel `refresh` event
   */
  onRefresh() {
    this.rebuildDots();
  }

  attach() {
    this.carousel.on(this.events);
  }

  detach() {
    this.removeList();

    this.carousel.off(this.events);
    this.carousel = null;
  }
}


/***/ }),

/***/ "./node_modules/@fancyapps/ui/src/Carousel/plugins/Navigation/Navigation.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@fancyapps/ui/src/Carousel/plugins/Navigation/Navigation.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Navigation: () => (/* binding */ Navigation)
/* harmony export */ });
const defaults = {
  prevTpl: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" tabindex="-1"><path d="M15 3l-9 9 9 9"/></svg>',
  nextTpl: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" tabindex="-1"><path d="M9 3l9 9-9 9"/></svg>',

  classNames: {
    main: "carousel__nav",
    button: "carousel__button",

    next: "is-next",
    prev: "is-prev",
  },
};

class Navigation {
  constructor(carousel) {
    this.$container = null;

    this.$prev = null;
    this.$next = null;

    this.carousel = carousel;

    this.onRefresh = this.onRefresh.bind(this);
  }

  /**
   * Shortcut to get option for this plugin
   * @param {String} name option name
   * @returns option value
   */
  option(name) {
    return this.carousel.option(`Navigation.${name}`);
  }

  /**
   * Creates and returns new button element with default class names and click event
   * @param {String} type
   */
  createButton(type) {
    const $btn = document.createElement("button");

    $btn.setAttribute("title", this.carousel.localize(`{{${type.toUpperCase()}}}`));

    const classNames = this.option("classNames.button") + " " + this.option(`classNames.${type}`);

    $btn.classList.add(...classNames.split(" "));
    $btn.setAttribute("tabindex", "0");
    $btn.innerHTML = this.carousel.localize(this.option(`${type}Tpl`));

    $btn.addEventListener("click", (event) => {
      event.preventDefault();
      event.stopPropagation();

      this.carousel[`slide${type === "next" ? "Next" : "Prev"}`]();
    });

    return $btn;
  }

  /**
   * Build necessary DOM elements
   */
  build() {
    if (!this.$container) {
      this.$container = document.createElement("div");
      this.$container.classList.add(...this.option("classNames.main").split(" "));

      this.carousel.$container.appendChild(this.$container);
    }

    if (!this.$next) {
      this.$next = this.createButton("next");

      this.$container.appendChild(this.$next);
    }

    if (!this.$prev) {
      this.$prev = this.createButton("prev");

      this.$container.appendChild(this.$prev);
    }
  }

  /**
   *  Process carousel `refresh` and `change` events to enable/disable buttons if needed
   */
  onRefresh() {
    const pageCount = this.carousel.pages.length;

    if (
      pageCount <= 1 ||
      (pageCount > 1 &&
        this.carousel.elemDimWidth < this.carousel.wrapDimWidth &&
        !Number.isInteger(this.carousel.option("slidesPerPage")))
    ) {
      this.cleanup();

      return;
    }

    this.build();

    this.$prev.removeAttribute("disabled");
    this.$next.removeAttribute("disabled");

    if (this.carousel.option("infiniteX", this.carousel.option("infinite"))) {
      return;
    }

    if (this.carousel.page <= 0) {
      this.$prev.setAttribute("disabled", "");
    }

    if (this.carousel.page >= pageCount - 1) {
      this.$next.setAttribute("disabled", "");
    }
  }

  cleanup() {
    if (this.$prev) {
      this.$prev.remove();
    }

    this.$prev = null;

    if (this.$next) {
      this.$next.remove();
    }

    this.$next = null;

    if (this.$container) {
      this.$container.remove();
    }

    this.$container = null;
  }

  attach() {
    this.carousel.on("refresh change", this.onRefresh);
  }

  detach() {
    this.carousel.off("refresh change", this.onRefresh);

    this.cleanup();
  }
}

// Expose defaults
Navigation.defaults = defaults;


/***/ }),

/***/ "./node_modules/@fancyapps/ui/src/Carousel/plugins/Sync/Sync.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@fancyapps/ui/src/Carousel/plugins/Sync/Sync.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Sync: () => (/* binding */ Sync)
/* harmony export */ });
const defaults = {
  friction: 0.92,
};

class Sync {
  constructor(carousel) {
    this.carousel = carousel;

    this.selectedIndex = null;
    this.friction = 0;

    this.onNavReady = this.onNavReady.bind(this);
    this.onNavClick = this.onNavClick.bind(this);
    this.onNavCreateSlide = this.onNavCreateSlide.bind(this);

    this.onTargetChange = this.onTargetChange.bind(this);
  }

  /**
   * Make this one as main carousel and selected carousel as navigation
   * @param {Object} nav Carousel
   */
  addAsTargetFor(nav) {
    this.target = this.carousel;
    this.nav = nav;

    this.attachEvents();
  }

  /**
   * Make this one as navigation carousel for selected carousel
   * @param {Object} target
   */
  addAsNavFor(target) {
    this.target = target;
    this.nav = this.carousel;

    this.attachEvents();
  }

  /**
   * Attach event listeners on both carousels
   */
  attachEvents() {
    this.nav.options.initialSlide = this.target.options.initialPage;

    this.nav.on("ready", this.onNavReady);
    this.nav.on("createSlide", this.onNavCreateSlide);
    this.nav.on("Panzoom.click", this.onNavClick);

    this.target.on("change", this.onTargetChange);
    this.target.on("Panzoom.afterUpdate", this.onTargetChange);
  }

  /**
   * Process main carousel `ready` event; bind events and set initial page
   */
  onNavReady() {
    this.onTargetChange(true);
  }

  /**
   * Process main carousel `click` event
   * @param {Object} panzoom
   * @param {Object} event
   */
  onNavClick(carousel, panzoom, event) {
    const clickedNavSlide = event.target.closest(".carousel__slide");

    if (!clickedNavSlide) {
      return;
    }

    event.stopPropagation();

    const selectedNavIndex = parseInt(clickedNavSlide.dataset.index, 10);
    const selectedSyncPage = this.target.findPageForSlide(selectedNavIndex);

    if (this.target.page !== selectedSyncPage) {
      this.target.slideTo(selectedSyncPage, { friction: this.friction });
    }

    this.markSelectedSlide(selectedNavIndex);
  }

  /**
   * Process main carousel `createSlide` event
   * @param {Object} carousel
   * @param {Object} slide
   */
  onNavCreateSlide(carousel, slide) {
    if (slide.index === this.selectedIndex) {
      this.markSelectedSlide(slide.index);
    }
  }

  /**
   * Process target carousel `change` event
   * @param {Object} target
   */
  onTargetChange() {
    const targetIndex = this.target.pages[this.target.page].indexes[0];
    const selectedNavPage = this.nav.findPageForSlide(targetIndex);

    this.nav.slideTo(selectedNavPage);

    this.markSelectedSlide(targetIndex);
  }

  /**
   * Toggle classname for slides that marks currently selected slides
   * @param {Number} selectedIndex
   */
  markSelectedSlide(selectedIndex) {
    this.selectedIndex = selectedIndex;

    [...this.nav.slides].filter((slide) => slide.$el && slide.$el.classList.remove("is-nav-selected"));

    const slide = this.nav.slides[selectedIndex];

    if (slide && slide.$el) slide.$el.classList.add("is-nav-selected");
  }

  attach(carousel) {
    const sync = carousel.options.Sync;

    if (!sync.target && !sync.nav) {
      return;
    }

    if (sync.target) {
      this.addAsNavFor(sync.target);
    } else if (sync.nav) {
      this.addAsTargetFor(sync.nav);
    }

    this.friction = sync.friction;
  }

  detach() {
    if (this.nav) {
      this.nav.off("ready", this.onNavReady);
      this.nav.off("Panzoom.click", this.onNavClick);
      this.nav.off("createSlide", this.onNavCreateSlide);
    }

    if (this.target) {
      this.target.off("Panzoom.afterUpdate", this.onTargetChange);
      this.target.off("change", this.onTargetChange);
    }
  }
}

// Expose defaults
Sync.defaults = defaults;


/***/ }),

/***/ "./node_modules/@fancyapps/ui/src/Carousel/plugins/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@fancyapps/ui/src/Carousel/plugins/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Plugins: () => (/* binding */ Plugins)
/* harmony export */ });
/* harmony import */ var _Navigation_Navigation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Navigation/Navigation.js */ "./node_modules/@fancyapps/ui/src/Carousel/plugins/Navigation/Navigation.js");
/* harmony import */ var _Dots_Dots_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Dots/Dots.js */ "./node_modules/@fancyapps/ui/src/Carousel/plugins/Dots/Dots.js");
/* harmony import */ var _Sync_Sync_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Sync/Sync.js */ "./node_modules/@fancyapps/ui/src/Carousel/plugins/Sync/Sync.js");




const Plugins = { Navigation: _Navigation_Navigation_js__WEBPACK_IMPORTED_MODULE_0__.Navigation, Dots: _Dots_Dots_js__WEBPACK_IMPORTED_MODULE_1__.Dots, Sync: _Sync_Sync_js__WEBPACK_IMPORTED_MODULE_2__.Sync };


/***/ }),

/***/ "./node_modules/@fancyapps/ui/src/Fancybox/Fancybox.js":
/*!*************************************************************!*\
  !*** ./node_modules/@fancyapps/ui/src/Fancybox/Fancybox.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Fancybox: () => (/* binding */ Fancybox)
/* harmony export */ });
/* harmony import */ var _shared_utils_extend_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/utils/extend.js */ "./node_modules/@fancyapps/ui/src/shared/utils/extend.js");
/* harmony import */ var _shared_utils_canUseDOM_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/utils/canUseDOM.js */ "./node_modules/@fancyapps/ui/src/shared/utils/canUseDOM.js");
/* harmony import */ var _shared_utils_setFocusOn_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/utils/setFocusOn.js */ "./node_modules/@fancyapps/ui/src/shared/utils/setFocusOn.js");
/* harmony import */ var _shared_Base_Base_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/Base/Base.js */ "./node_modules/@fancyapps/ui/src/shared/Base/Base.js");
/* harmony import */ var _Carousel_Carousel_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Carousel/Carousel.js */ "./node_modules/@fancyapps/ui/src/Carousel/Carousel.js");
/* harmony import */ var _plugins_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./plugins/index.js */ "./node_modules/@fancyapps/ui/src/Fancybox/plugins/index.js");
/* harmony import */ var _l10n_en_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./l10n/en.js */ "./node_modules/@fancyapps/ui/src/Fancybox/l10n/en.js");










// Default language


// Default settings
const defaults = {
  // Index of active slide on the start
  startIndex: 0,

  // Number of slides to preload before and after active slide
  preload: 1,

  // Should navigation be infinite
  infinite: true,

  // Class name to be applied to the content to reveal it
  showClass: "fancybox-zoomInUp", // "fancybox-fadeIn" | "fancybox-zoomInUp" | false

  // Class name to be applied to the content to hide it
  hideClass: "fancybox-fadeOut", // "fancybox-fadeOut" | "fancybox-zoomOutDown" | false

  // Should backdrop and UI elements fade in/out on start/close
  animated: true,

  // If browser scrollbar should be hidden
  hideScrollbar: true,

  // Element containing main structure
  parentEl: null,

  // Custom class name or multiple space-separated class names for the container
  mainClass: null,

  // Set focus on first focusable element after displaying content
  autoFocus: true,

  // Trap focus inside Fancybox
  trapFocus: true,

  // Set focus back to trigger element after closing Fancybox
  placeFocusBack: true,

  // Action to take when the user clicks on the backdrop
  click: "close", // "close" | "next" | null

  // Position of the close button - over the content or at top right corner of viewport
  closeButton: "inside", // "inside" | "outside"

  // Allow user to drag content up/down to close instance
  dragToClose: true,

  // Enable keyboard navigation
  keyboard: {
    Escape: "close",
    Delete: "close",
    Backspace: "close",
    PageUp: "next",
    PageDown: "prev",
    ArrowUp: "next",
    ArrowDown: "prev",
    ArrowRight: "next",
    ArrowLeft: "prev",
  },

  // HTML templates for various elements
  template: {
    // Close button icon
    closeButton:
      '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" tabindex="-1"><path d="M20 20L4 4m16 0L4 20"/></svg>',
    // Loading indicator icon
    spinner:
      '<svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" viewBox="25 25 50 50" tabindex="-1"><circle cx="50" cy="50" r="20"/></svg>',

    // Main container element
    main: null,
  },

  /* Note: If the `template.main` option is not provided, the structure is generated as follows by default:
  <div class="fancybox__container" role="dialog" aria-modal="true" aria-hidden="true" aria-label="{{MODAL}}" tabindex="-1">
    <div class="fancybox__backdrop"></div>
    <div class="fancybox__carousel"></div>
  </div>
  */

  // Localization of strings
  l10n: _l10n_en_js__WEBPACK_IMPORTED_MODULE_6__["default"],
};

// Object that contains all active instances of Fancybox
const instances = new Map();

// Number of Fancybox instances created, it is used to generate new instance "id"
let called = 0;

class Fancybox extends _shared_Base_Base_js__WEBPACK_IMPORTED_MODULE_3__.Base {
  /**
   * Fancybox constructor
   * @constructs Fancybox
   * @param {Object} [options] - Options for Fancybox
   */
  constructor(items, options = {}) {
    // Quick hack to fix variable naming collision
    items = items.map((item) => {
      if (item.width) item._width = item.width;
      if (item.height) item._height = item.height;

      return item;
    });

    super((0,_shared_utils_extend_js__WEBPACK_IMPORTED_MODULE_0__.extend)(true, {}, defaults, options));

    this.bindHandlers();

    this.state = "init";

    this.setItems(items);

    this.attachPlugins(Fancybox.Plugins);

    // "init" event marks the start of initialization and is available to plugins
    this.trigger("init");

    if (this.option("hideScrollbar") === true) {
      this.hideScrollbar();
    }

    this.initLayout();

    this.initCarousel();

    this.attachEvents();

    instances.set(this.id, this);

    // "prepare" event will trigger the creation of additional layout elements, such as thumbnails and toolbar
    this.trigger("prepare");

    this.state = "ready";

    // "ready" event will trigger the content to load
    this.trigger("ready");

    // Reveal container
    this.$container.setAttribute("aria-hidden", "false");

    // Set focus on the first focusable element inside this instance
    if (this.option("trapFocus")) {
      this.focus();
    }
  }

  /**
   * Override `option` method to get value from the current slide
   * @param {String} name option name
   * @param  {...any} rest optional extra parameters
   * @returns {any}
   */
  option(name, ...rest) {
    const slide = this.getSlide();

    let value = slide ? slide[name] : undefined;

    if (value !== undefined) {
      if (typeof value === "function") {
        value = value.call(this, this, ...rest);
      }

      return value;
    }

    return super.option(name, ...rest);
  }

  /**
   * Bind event handlers for referencability
   */
  bindHandlers() {
    for (const methodName of [
      "onMousedown",
      "onKeydown",
      "onClick",

      "onFocus",

      "onCreateSlide",
      "onSettle",

      "onTouchMove",
      "onTouchEnd",

      "onTransform",
    ]) {
      this[methodName] = this[methodName].bind(this);
    }
  }

  /**
   * Set up a functions that will be called whenever the specified event is delivered
   */
  attachEvents() {
    document.addEventListener("mousedown", this.onMousedown);
    document.addEventListener("keydown", this.onKeydown, true);

    // Trap keyboard focus inside of the modal
    if (this.option("trapFocus")) {
      document.addEventListener("focus", this.onFocus, true);
    }

    this.$container.addEventListener("click", this.onClick);
  }

  /**
   * Removes previously registered event listeners
   */
  detachEvents() {
    document.removeEventListener("mousedown", this.onMousedown);
    document.removeEventListener("keydown", this.onKeydown, true);

    document.removeEventListener("focus", this.onFocus, true);

    this.$container.removeEventListener("click", this.onClick);
  }

  /**
   * Initialize layout; create main container, backdrop nd layout for main carousel
   */
  initLayout() {
    this.$root = this.option("parentEl") || document.body;

    // Container
    let mainTemplate = this.option("template.main");

    if (mainTemplate) {
      this.$root.insertAdjacentHTML("beforeend", this.localize(mainTemplate));

      this.$container = this.$root.querySelector(".fancybox__container");
    }

    if (!this.$container) {
      this.$container = document.createElement("div");
      this.$root.appendChild(this.$container);
    }

    // Normally we would not need this, but Safari does not support `preventScroll:false` option for `focus` method
    // and that causes layout issues
    this.$container.onscroll = () => {
      this.$container.scrollLeft = 0;
      return false;
    };

    Object.entries({
      class: "fancybox__container",
      role: "dialog",
      tabIndex: "-1",
      "aria-modal": "true",
      "aria-hidden": "true",
      "aria-label": this.localize("{{MODAL}}"),
    }).forEach((args) => this.$container.setAttribute(...args));

    if (this.option("animated")) {
      this.$container.classList.add("is-animated");
    }

    // Backdrop
    this.$backdrop = this.$container.querySelector(".fancybox__backdrop");

    if (!this.$backdrop) {
      this.$backdrop = document.createElement("div");
      this.$backdrop.classList.add("fancybox__backdrop");

      this.$container.appendChild(this.$backdrop);
    }

    // Carousel
    this.$carousel = this.$container.querySelector(".fancybox__carousel");

    if (!this.$carousel) {
      this.$carousel = document.createElement("div");
      this.$carousel.classList.add("fancybox__carousel");

      this.$container.appendChild(this.$carousel);
    }

    // Make instance reference accessible
    this.$container.Fancybox = this;

    // Make sure the container has an ID
    this.id = this.$container.getAttribute("id");

    if (!this.id) {
      this.id = this.options.id || ++called;
      this.$container.setAttribute("id", "fancybox-" + this.id);
    }

    // Add custom class name to main element
    const mainClass = this.option("mainClass");

    if (mainClass) {
      this.$container.classList.add(...mainClass.split(" "));
    }

    // Add class name for <html> element
    document.documentElement.classList.add("with-fancybox");

    this.trigger("initLayout");

    return this;
  }

  /**
   * Prepares slides for the corousel
   * @returns {Array} Slides
   */
  setItems(items) {
    const slides = [];

    for (const slide of items) {
      const $trigger = slide.$trigger;

      if ($trigger) {
        const dataset = $trigger.dataset || {};

        slide.src = dataset.src || $trigger.getAttribute("href") || slide.src;
        slide.type = dataset.type || slide.type;

        // Support items without `src`, e.g., when `data-fancybox` attribute added directly to `<img>` element
        if (!slide.src && $trigger instanceof HTMLImageElement) {
          slide.src = $trigger.currentSrc || slide.$trigger.src;
        }
      }

      // Check for thumbnail element
      let $thumb = slide.$thumb;

      if (!$thumb) {
        let origTarget = slide.$trigger && slide.$trigger.origTarget;

        if (origTarget) {
          if (origTarget instanceof HTMLImageElement) {
            $thumb = origTarget;
          } else {
            $thumb = origTarget.querySelector("img:not([aria-hidden])");
          }
        }

        if (!$thumb && slide.$trigger) {
          $thumb =
            slide.$trigger instanceof HTMLImageElement
              ? slide.$trigger
              : slide.$trigger.querySelector("img:not([aria-hidden])");
        }
      }

      slide.$thumb = $thumb || null;

      // Get thumbnail image source
      let thumb = slide.thumb;

      if (!thumb && $thumb) {
        thumb = $thumb.currentSrc || $thumb.src;

        if (!thumb && $thumb.dataset) {
          thumb = $thumb.dataset.lazySrc || $thumb.dataset.src;
        }
      }

      // Assume we have image, then use it as thumbnail
      if (!thumb && slide.type === "image") {
        thumb = slide.src;
      }

      slide.thumb = thumb || null;

      // Add empty caption to make things simpler
      slide.caption = slide.caption || "";

      slides.push(slide);
    }

    this.items = slides;
  }

  /**
   * Initialize main Carousel that will be used to display the content
   * @param {Array} slides
   */
  initCarousel() {
    this.Carousel = new _Carousel_Carousel_js__WEBPACK_IMPORTED_MODULE_4__.Carousel(
      this.$carousel,
      (0,_shared_utils_extend_js__WEBPACK_IMPORTED_MODULE_0__.extend)(
        true,
        {},
        {
          prefix: "",

          classNames: {
            viewport: "fancybox__viewport",
            track: "fancybox__track",
            slide: "fancybox__slide",
          },

          textSelection: true,
          preload: this.option("preload"),

          friction: 0.88,

          slides: this.items,
          initialPage: this.options.startIndex,
          slidesPerPage: 1,

          infiniteX: this.option("infinite"),
          infiniteY: true,

          l10n: this.option("l10n"),

          Dots: false,
          Navigation: {
            classNames: {
              main: "fancybox__nav",
              button: "carousel__button",

              next: "is-next",
              prev: "is-prev",
            },
          },

          Panzoom: {
            textSelection: true,

            panOnlyZoomed: () => {
              return (
                this.Carousel && this.Carousel.pages && this.Carousel.pages.length < 2 && !this.option("dragToClose")
              );
            },

            lockAxis: () => {
              if (this.Carousel) {
                let rez = "x";

                if (this.option("dragToClose")) {
                  rez += "y";
                }

                return rez;
              }
            },
          },

          on: {
            "*": (name, ...details) => this.trigger(`Carousel.${name}`, ...details),
            init: (carousel) => (this.Carousel = carousel),
            createSlide: this.onCreateSlide,
            settle: this.onSettle,
          },
        },

        this.option("Carousel")
      )
    );

    if (this.option("dragToClose")) {
      this.Carousel.Panzoom.on({
        // Stop further touch event handling if content is scaled
        touchMove: this.onTouchMove,

        // Update backdrop opacity depending on vertical distance
        afterTransform: this.onTransform,

        // Close instance if drag distance exceeds limit
        touchEnd: this.onTouchEnd,
      });
    }

    this.trigger("initCarousel");

    return this;
  }

  /**
   * Process `createSlide` event to create caption element inside new slide
   */
  onCreateSlide(carousel, slide) {
    let caption = slide.caption || "";

    if (typeof this.options.caption === "function") {
      caption = this.options.caption.call(this, this, this.Carousel, slide);
    }

    if (typeof caption === "string" && caption.length) {
      const $caption = document.createElement("div");
      const id = `fancybox__caption_${this.id}_${slide.index}`;

      $caption.className = "fancybox__caption";
      $caption.innerHTML = caption;
      $caption.setAttribute("id", id);

      slide.$caption = slide.$el.appendChild($caption);

      slide.$el.classList.add("has-caption");
      slide.$el.setAttribute("aria-labelledby", id);
    }
  }

  /**
   * Handle Carousel `settle` event
   */
  onSettle() {
    if (this.option("autoFocus")) {
      this.focus();
    }
  }

  /**
   * Handle focus event
   * @param {Event} event - Focus event
   */
  onFocus(event) {
    if (!this.isTopmost()) {
      return;
    }

    this.focus(event);
  }

  /**
   * Handle click event on the container
   * @param {Event} event - Click event
   */
  onClick(event) {
    if (event.defaultPrevented) {
      return;
    }

    let eventTarget = event.composedPath()[0];

    if (eventTarget.matches("[data-fancybox-close]")) {
      event.preventDefault();
      Fancybox.close(false, event);

      return;
    }

    if (eventTarget.matches("[data-fancybox-next]")) {
      event.preventDefault();
      Fancybox.next();

      return;
    }

    if (eventTarget.matches("[data-fancybox-prev]")) {
      event.preventDefault();
      Fancybox.prev();

      return;
    }

    const activeElement = document.activeElement;

    if (activeElement) {
      if (activeElement.closest("[contenteditable]")) {
        return;
      }

      if (!eventTarget.matches(_shared_utils_setFocusOn_js__WEBPACK_IMPORTED_MODULE_2__.FOCUSABLE_ELEMENTS)) {
        activeElement.blur();
      }
    }

    // Skip if clicked inside content area
    if (eventTarget.closest(".fancybox__content")) {
      return;
    }

    // Skip if text is selected
    if (getSelection().toString().length) {
      return;
    }

    if (this.trigger("click", event) === false) {
      return;
    }

    const action = this.option("click");

    switch (action) {
      case "close":
        this.close();
        break;
      case "next":
        this.next();
        break;
    }
  }

  /**
   * Handle panzoom `touchMove` event; Disable dragging if content of current slide is scaled
   */
  onTouchMove() {
    const panzoom = this.getSlide().Panzoom;

    return panzoom && panzoom.content.scale !== 1 ? false : true;
  }

  /**
   * Handle panzoom `touchEnd` event; close when quick flick up/down is detected
   * @param {Object} panzoom - Panzoom instance
   */
  onTouchEnd(panzoom) {
    const distanceY = panzoom.dragOffset.y;

    if (Math.abs(distanceY) >= 150 || (Math.abs(distanceY) >= 35 && panzoom.dragOffset.time < 350)) {
      if (this.option("hideClass")) {
        this.getSlide().hideClass = `fancybox-throwOut${panzoom.content.y < 0 ? "Up" : "Down"}`;
      }

      this.close();
    } else if (panzoom.lockAxis === "y") {
      panzoom.panTo({ y: 0 });
    }
  }

  /**
   * Handle `afterTransform` event; change backdrop opacity based on current y position of panzoom
   * @param {Object} panzoom - Panzoom instance
   */
  onTransform(panzoom) {
    const $backdrop = this.$backdrop;

    if ($backdrop) {
      const yPos = Math.abs(panzoom.content.y);
      const opacity = yPos < 1 ? "" : Math.max(0.33, Math.min(1, 1 - (yPos / panzoom.content.fitHeight) * 1.5));

      this.$container.style.setProperty("--fancybox-ts", opacity ? "0s" : "");
      this.$container.style.setProperty("--fancybox-opacity", opacity);
    }
  }

  /**
   * Handle `mousedown` event to mark that the mouse is in use
   */
  onMousedown() {
    if (this.state === "ready") {
      document.body.classList.add("is-using-mouse");
    }
  }

  /**
   * Handle `keydown` event; trap focus
   * @param {Event} event Keydown event
   */
  onKeydown(event) {
    if (!this.isTopmost()) {
      return;
    }

    document.body.classList.remove("is-using-mouse");

    const key = event.key;
    const keyboard = this.option("keyboard");

    if (!keyboard || event.ctrlKey || event.altKey || event.shiftKey) {
      return;
    }

    const target = event.composedPath()[0];

    const classList = document.activeElement && document.activeElement.classList;
    const isUIElement = classList && classList.contains("carousel__button");

    // Allow to close using Escape button
    if (key !== "Escape" && !isUIElement) {
      let ignoreElements =
        event.target.isContentEditable ||
        ["BUTTON", "TEXTAREA", "OPTION", "INPUT", "SELECT", "VIDEO"].indexOf(target.nodeName) !== -1;

      if (ignoreElements) {
        return;
      }
    }

    if (this.trigger("keydown", key, event) === false) {
      return;
    }

    const action = keyboard[key];

    if (typeof this[action] === "function") {
      this[action]();
    }
  }

  /**
   * Get the active slide. This will be the first slide from the current page of the main carousel.
   */
  getSlide() {
    const carousel = this.Carousel;

    if (!carousel) return null;

    const page = carousel.page === null ? carousel.option("initialPage") : carousel.page;
    const pages = carousel.pages || [];

    if (pages.length && pages[page]) {
      return pages[page].slides[0];
    }

    return null;
  }

  /**
   * Place focus on the first focusable element inside current slide
   * @param {Event} [event] - Focus event
   */
  focus(event) {
    if (Fancybox.ignoreFocusChange) {
      return;
    }

    if (["init", "closing", "customClosing", "destroy"].indexOf(this.state) > -1) {
      return;
    }

    const $container = this.$container;
    const currentSlide = this.getSlide();
    const $currentSlide = currentSlide.state === "done" ? currentSlide.$el : null;

    // Skip if the DOM element that is currently in focus is already inside the current slide
    if ($currentSlide && $currentSlide.contains(document.activeElement)) {
      return;
    }

    if (event) {
      event.preventDefault();
    }

    Fancybox.ignoreFocusChange = true;

    const allFocusableElems = Array.from($container.querySelectorAll(_shared_utils_setFocusOn_js__WEBPACK_IMPORTED_MODULE_2__.FOCUSABLE_ELEMENTS));

    let enabledElems = [];
    let $firstEl;

    for (let node of allFocusableElems) {
      // Enable element if it's visible and
      // is inside the current slide or is outside main carousel (for example, inside the toolbar)
      const isNodeVisible = node.offsetParent;
      const isNodeInsideCurrentSlide = $currentSlide && $currentSlide.contains(node);
      const isNodeOutsideCarousel = !this.Carousel.$viewport.contains(node);

      if (isNodeVisible && (isNodeInsideCurrentSlide || isNodeOutsideCarousel)) {
        enabledElems.push(node);

        if (node.dataset.origTabindex !== undefined) {
          node.tabIndex = node.dataset.origTabindex;
          node.removeAttribute("data-orig-tabindex");
        }

        if (
          node.hasAttribute("autoFocus") ||
          (!$firstEl && isNodeInsideCurrentSlide && !node.classList.contains("carousel__button"))
        ) {
          $firstEl = node;
        }
      } else {
        // Element is either hidden or is inside preloaded slide (e.g., not inside current slide, but next/prev)
        node.dataset.origTabindex =
          node.dataset.origTabindex === undefined ? node.getAttribute("tabindex") : node.dataset.origTabindex;

        node.tabIndex = -1;
      }
    }

    if (!event) {
      if (this.option("autoFocus") && $firstEl) {
        (0,_shared_utils_setFocusOn_js__WEBPACK_IMPORTED_MODULE_2__.setFocusOn)($firstEl);
      } else if (enabledElems.indexOf(document.activeElement) < 0) {
        (0,_shared_utils_setFocusOn_js__WEBPACK_IMPORTED_MODULE_2__.setFocusOn)($container);
      }
    } else {
      if (enabledElems.indexOf(event.target) > -1) {
        this.lastFocus = event.target;
      } else {
        if (this.lastFocus === $container) {
          (0,_shared_utils_setFocusOn_js__WEBPACK_IMPORTED_MODULE_2__.setFocusOn)(enabledElems[enabledElems.length - 1]);
        } else {
          (0,_shared_utils_setFocusOn_js__WEBPACK_IMPORTED_MODULE_2__.setFocusOn)($container);
        }
      }
    }

    this.lastFocus = document.activeElement;

    Fancybox.ignoreFocusChange = false;
  }

  /**
   * Hide vertical page scrollbar and adjust right padding value of `body` element to prevent content from shifting
   * (otherwise the `body` element may become wider and the content may expand horizontally).
   */
  hideScrollbar() {
    if (!_shared_utils_canUseDOM_js__WEBPACK_IMPORTED_MODULE_1__.canUseDOM) {
      return;
    }

    const scrollbarWidth = window.innerWidth - document.documentElement.getBoundingClientRect().width;
    const id = "fancybox-style-noscroll";

    let $style = document.getElementById(id);

    if ($style) {
      return;
    }

    if (scrollbarWidth > 0) {
      $style = document.createElement("style");

      $style.id = id;
      $style.type = "text/css";
      $style.innerHTML = `.compensate-for-scrollbar {padding-right: ${scrollbarWidth}px;}`;

      document.getElementsByTagName("head")[0].appendChild($style);

      document.body.classList.add("compensate-for-scrollbar");
    }
  }

  /**
   * Stop hiding vertical page scrollbar
   */
  revealScrollbar() {
    document.body.classList.remove("compensate-for-scrollbar");

    const el = document.getElementById("fancybox-style-noscroll");

    if (el) {
      el.remove();
    }
  }

  /**
   * Remove content for given slide
   * @param {Object} slide - Carousel slide
   */
  clearContent(slide) {
    // * Clear previously added content and class name
    this.Carousel.trigger("removeSlide", slide);

    if (slide.$content) {
      slide.$content.remove();
      slide.$content = null;
    }

    if (slide.$closeButton) {
      slide.$closeButton.remove();
      slide.$closeButton = null;
    }

    if (slide._className) {
      slide.$el.classList.remove(slide._className);
    }
  }

  /**
   * Set new content for given slide
   * @param {Object} slide - Carousel slide
   * @param {HTMLElement|String} html - HTML element or string containing HTML code
   * @param {Object} [opts] - Options
   */
  setContent(slide, html, opts = {}) {
    let $content;

    const $el = slide.$el;

    if (html instanceof HTMLElement) {
      if (["img", "iframe", "video", "audio"].indexOf(html.nodeName.toLowerCase()) > -1) {
        $content = document.createElement("div");
        $content.appendChild(html);
      } else {
        $content = html;
      }
    } else {
      const $fragment = document.createRange().createContextualFragment(html);

      $content = document.createElement("div");
      $content.appendChild($fragment);
    }

    if (slide.filter && !slide.error) {
      $content = $content.querySelector(slide.filter);
    }

    if (!($content instanceof Element)) {
      this.setError(slide, "{{ELEMENT_NOT_FOUND}}");

      return;
    }

    // * Add class name indicating content type, for example `has-image`
    slide._className = `has-${opts.suffix || slide.type || "unknown"}`;

    $el.classList.add(slide._className);

    // * Set content
    $content.classList.add("fancybox__content");

    // Make sure that content is not hidden and will be visible
    if ($content.style.display === "none" || getComputedStyle($content).getPropertyValue("display") === "none") {
      $content.style.display = slide.display || this.option("defaultDisplay") || "flex";
    }

    if (slide.id) {
      $content.setAttribute("id", slide.id);
    }

    slide.$content = $content;

    $el.prepend($content);

    this.manageCloseButton(slide);

    if (slide.state !== "loading") {
      this.revealContent(slide);
    }

    return $content;
  }

  /**
   * Create close button if needed
   * @param {Object} slide
   */
  manageCloseButton(slide) {
    const position = slide.closeButton === undefined ? this.option("closeButton") : slide.closeButton;

    if (!position || (position === "top" && this.$closeButton)) {
      return;
    }

    const $btn = document.createElement("button");

    $btn.classList.add("carousel__button", "is-close");
    $btn.setAttribute("title", this.options.l10n.CLOSE);
    $btn.innerHTML = this.option("template.closeButton");

    $btn.addEventListener("click", (e) => this.close(e));

    if (position === "inside") {
      // Remove existing one to avoid scope issues
      if (slide.$closeButton) {
        slide.$closeButton.remove();
      }

      slide.$closeButton = slide.$content.appendChild($btn);
    } else {
      this.$closeButton = this.$container.insertBefore($btn, this.$container.firstChild);
    }
  }

  /**
   * Make content visible for given slide and optionally start CSS animation
   * @param {Object} slide - Carousel slide
   */
  revealContent(slide) {
    this.trigger("reveal", slide);

    slide.$content.style.visibility = "";

    // Add CSS class name that reveals content (default animation is "fadeIn")
    let showClass = false;

    if (
      !(
        slide.error ||
        slide.state === "loading" ||
        this.Carousel.prevPage !== null ||
        slide.index !== this.options.startIndex
      )
    ) {
      showClass = slide.showClass === undefined ? this.option("showClass") : slide.showClass;
    }

    if (!showClass) {
      this.done(slide);

      return;
    }

    slide.state = "animating";

    this.animateCSS(slide.$content, showClass, () => {
      this.done(slide);
    });
  }

  /**
   * Add class name to given HTML element and wait for `animationend` event to execute callback
   * @param {HTMLElement} $el
   * @param {String} className
   * @param {Function} callback - A callback to run
   */
  animateCSS($element, className, callback) {
    if ($element) {
      $element.dispatchEvent(new CustomEvent("animationend", { bubbles: true, cancelable: true }));
    }

    if (!$element || !className) {
      if (typeof callback === "function") {
        callback();
      }

      return;
    }

    const handleAnimationEnd = function (event) {
      if (event.currentTarget === this) {
        $element.removeEventListener("animationend", handleAnimationEnd);

        if (callback) {
          callback();
        }

        $element.classList.remove(className);
      }
    };

    $element.addEventListener("animationend", handleAnimationEnd);
    $element.classList.add(className);
  }

  /**
   * Mark given slide as `done`, e.g., content is loaded and displayed completely
   * @param {Object} slide - Carousel slide
   */
  done(slide) {
    slide.state = "done";

    this.trigger("done", slide);

    // Trigger focus for current slide (and ignore preloaded slides)
    const currentSlide = this.getSlide();

    if (currentSlide && slide.index === currentSlide.index && this.option("autoFocus")) {
      this.focus();
    }
  }

  /**
   * Set error message as slide content
   * @param {Object} slide - Carousel slide
   * @param {String} message - Error message, can contain HTML code and template variables
   */
  setError(slide, message) {
    slide.error = message;

    this.hideLoading(slide);
    this.clearContent(slide);

    // Create new content
    const div = document.createElement("div");
    div.classList.add("fancybox-error");
    div.innerHTML = this.localize(message || "<p>{{ERROR}}</p>");

    this.setContent(slide, div, { suffix: "error" });
  }

  /**
   * Create loading indicator inside given slide
   * @param {Object} slide - Carousel slide
   */
  showLoading(slide) {
    slide.state = "loading";

    slide.$el.classList.add("is-loading");

    let $spinner = slide.$el.querySelector(".fancybox__spinner");

    if ($spinner) {
      return;
    }

    $spinner = document.createElement("div");

    $spinner.classList.add("fancybox__spinner");
    $spinner.innerHTML = this.option("template.spinner");

    $spinner.addEventListener("click", () => {
      if (!this.Carousel.Panzoom.velocity) this.close();
    });

    slide.$el.prepend($spinner);
  }

  /**
   * Remove loading indicator from given slide
   * @param {Object} slide - Carousel slide
   */
  hideLoading(slide) {
    const $spinner = slide.$el && slide.$el.querySelector(".fancybox__spinner");

    if ($spinner) {
      $spinner.remove();

      slide.$el.classList.remove("is-loading");
    }

    if (slide.state === "loading") {
      this.trigger("load", slide);

      slide.state = "ready";
    }
  }

  /**
   * Slide carousel to next page
   */
  next() {
    const carousel = this.Carousel;

    if (carousel && carousel.pages.length > 1) {
      carousel.slideNext();
    }
  }

  /**
   * Slide carousel to previous page
   */
  prev() {
    const carousel = this.Carousel;

    if (carousel && carousel.pages.length > 1) {
      carousel.slidePrev();
    }
  }

  /**
   * Slide carousel to selected page with optional parameters
   * Examples:
   *    Fancybox.getInstance().jumpTo(2);
   *    Fancybox.getInstance().jumpTo(3, {friction: 0})
   * @param  {...any} args - Arguments for Carousel `slideTo` method
   */
  jumpTo(...args) {
    if (this.Carousel) this.Carousel.slideTo(...args);
  }

  /**
   * Check if current instance is trying to close or is already closed
   * @returns {Boolean}
   */
  isClosing() {
    return ["closing", "customClosing", "destroy"].includes(this.state);
  }

  /**
   * Check if the current instance is not blocked by another instance
   * @returns {Boolean}
   */
  isTopmost() {
    return Fancybox.getInstance().id == this.id;
  }

  /**
   * Start closing the current instance
   * @param {Event} [event] - Optional click event
   */
  close(event) {
    if (event) event.preventDefault();

    // First, stop further execution if this instance is already closing
    // (this can happen if, for example, user clicks close button multiple times really fast)
    if (this.isClosing()) {
      return;
    }

    // Allow callbacks and/or plugins to prevent closing
    if (this.trigger("shouldClose", event) === false) {
      return;
    }

    this.state = "closing";

    this.Carousel.Panzoom.destroy();

    this.detachEvents();

    this.trigger("closing", event);

    if (this.state === "destroy") {
      return;
    }

    // Trigger default CSS closing animation for backdrop and interface elements
    this.$container.setAttribute("aria-hidden", "true");

    this.$container.classList.add("is-closing");

    // Clear inactive slides
    const currentSlide = this.getSlide();

    this.Carousel.slides.forEach((slide) => {
      if (slide.$content && slide.index !== currentSlide.index) {
        this.Carousel.trigger("removeSlide", slide);
      }
    });

    // Start default closing animation
    if (this.state === "closing") {
      const hideClass = currentSlide.hideClass === undefined ? this.option("hideClass") : currentSlide.hideClass;

      this.animateCSS(
        currentSlide.$content,
        hideClass,
        () => {
          this.destroy();
        },
        true
      );
    }
  }

  /**
   * Clean up after closing fancybox
   */
  destroy() {
    if (this.state === "destroy") {
      return;
    }

    this.state = "destroy";

    this.trigger("destroy");

    const $trigger = this.option("placeFocusBack") ? this.option("triggerTarget", this.getSlide().$trigger) : null;

    // Destroy Carousel and then detach plugins;
    // * Note: this order allows plugins to receive `removeSlide` event
    this.Carousel.destroy();

    this.detachPlugins();

    this.Carousel = null;

    this.options = {};
    this.events = {};

    this.$container.remove();

    this.$container = this.$backdrop = this.$carousel = null;

    if ($trigger) {
      (0,_shared_utils_setFocusOn_js__WEBPACK_IMPORTED_MODULE_2__.setFocusOn)($trigger);
    }

    instances.delete(this.id);

    const nextInstance = Fancybox.getInstance();

    if (nextInstance) {
      nextInstance.focus();
      return;
    }

    document.documentElement.classList.remove("with-fancybox");
    document.body.classList.remove("is-using-mouse");

    this.revealScrollbar();
  }

  /**
   * Create new Fancybox instance with provided options
   * Example:
   *   Fancybox.show([{ src : 'https://lipsum.app/id/1/300x225' }]);
   * @param {Array} items - Gallery items
   * @param {Object} [options] - Optional custom options
   * @returns {Object} Fancybox instance
   */
  static show(items, options = {}) {
    return new Fancybox(items, options);
  }

  /**
   * Starts Fancybox if event target matches any opener or target is `trigger element`
   * @param {Event} event - Click event
   * @param {Object} [options] - Optional custom options
   */
  static fromEvent(event, options = {}) {
    //  Allow other scripts to prevent starting fancybox on click
    if (event.defaultPrevented) {
      return;
    }

    // Don't run if right-click
    if (event.button && event.button !== 0) {
      return;
    }

    // Ignore command/control + click
    if (event.ctrlKey || event.metaKey || event.shiftKey) {
      return;
    }

    const origTarget = event.composedPath()[0];
    let eventTarget = origTarget;

    // Support `trigger` element, e.g., start fancybox from different DOM element, for example,
    // to have one preview image for hidden image gallery
    let triggerGroupName;

    if (
      eventTarget.matches("[data-fancybox-trigger]") ||
      (eventTarget = eventTarget.closest("[data-fancybox-trigger]"))
    ) {
      options.triggerTarget = eventTarget;
      triggerGroupName = eventTarget && eventTarget.dataset && eventTarget.dataset.fancyboxTrigger;
    }

    if (triggerGroupName) {
      const triggerItems = document.querySelectorAll(`[data-fancybox="${triggerGroupName}"]`);
      const triggerIndex = parseInt(eventTarget.dataset.fancyboxIndex, 10) || 0;

      eventTarget = triggerItems.length ? triggerItems[triggerIndex] : eventTarget;
    }

    // * Try to find matching openener
    let matchingOpener;
    let target;

    Array.from(Fancybox.openers.keys())
      .reverse()
      .some((opener) => {
        target = eventTarget || origTarget;

        let found = false;

        try {
          if (target instanceof Element && (typeof opener === "string" || opener instanceof String)) {
            // Chain closest() to event.target to find and return the parent element,
            // regardless if clicking on the child elements (icon, label, etc)
            found = target.matches(opener) || (target = target.closest(opener));
          }
        } catch (error) {}

        if (found) {
          event.preventDefault();
          matchingOpener = opener;
          return true;
        }

        return false;
      });

    let rez = false;

    if (matchingOpener) {
      options.event = event;
      options.target = target;

      target.origTarget = origTarget;

      rez = Fancybox.fromOpener(matchingOpener, options);

      // Check if the mouse is being used
      // Waiting for better browser support for `:focus-visible` -
      // https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo
      const nextInstance = Fancybox.getInstance();

      if (nextInstance && nextInstance.state === "ready" && event.detail) {
        document.body.classList.add("is-using-mouse");
      }
    }

    return rez;
  }

  /**
   * Starts Fancybox using selector
   * @param {String} opener - Valid CSS selector string
   * @param {Object} [options] - Optional custom options
   */
  static fromOpener(opener, options = {}) {
    // Callback function called once for each group element that
    // 1) converts data attributes to boolean or JSON
    // 2) removes values that could cause issues
    const mapCallback = function (el) {
      const falseValues = ["false", "0", "no", "null", "undefined"];
      const trueValues = ["true", "1", "yes"];

      const dataset = Object.assign({}, el.dataset);
      const options = {};

      for (let [key, value] of Object.entries(dataset)) {
        if (key === "fancybox") {
          continue;
        }

        if (key === "width" || key === "height") {
          options[`_${key}`] = value;
        } else if (typeof value === "string" || value instanceof String) {
          if (falseValues.indexOf(value) > -1) {
            options[key] = false;
          } else if (trueValues.indexOf(options[key]) > -1) {
            options[key] = true;
          } else {
            try {
              options[key] = JSON.parse(value);
            } catch (e) {
              options[key] = value;
            }
          }
        } else {
          options[key] = value;
        }
      }

      if (el instanceof Element) {
        options.$trigger = el;
      }

      return options;
    };

    let items = [],
      index = options.startIndex || 0,
      target = options.target || null;

    // Get options
    // ===
    options = (0,_shared_utils_extend_js__WEBPACK_IMPORTED_MODULE_0__.extend)({}, options, Fancybox.openers.get(opener));

    // Get matching nodes
    // ===
    const groupAll = options.groupAll === undefined ? false : options.groupAll;

    const groupAttr = options.groupAttr === undefined ? "data-fancybox" : options.groupAttr;
    const groupValue = groupAttr && target ? target.getAttribute(`${groupAttr}`) : "";

    if (!target || groupValue || groupAll) {
      const $root = options.root || (target ? target.getRootNode() : document.body);

      items = [].slice.call($root.querySelectorAll(opener));
    }

    if (target && !groupAll) {
      if (groupValue) {
        items = items.filter((el) => el.getAttribute(`${groupAttr}`) === groupValue);
      } else {
        items = [target];
      }
    }

    if (!items.length) {
      return false;
    }

    // Exit if current instance is triggered from the same element
    // ===
    const currentInstance = Fancybox.getInstance();

    if (currentInstance && items.indexOf(currentInstance.options.$trigger) > -1) {
      return false;
    }

    // Start Fancybox
    // ===

    // Get index of current item in the gallery
    index = target ? items.indexOf(target) : index;

    // Convert items in a format supported by fancybox
    items = items.map(mapCallback);

    // * Create new fancybox instance
    return new Fancybox(
      items,
      (0,_shared_utils_extend_js__WEBPACK_IMPORTED_MODULE_0__.extend)({}, options, {
        startIndex: index,
        $trigger: target,
      })
    );
  }

  /**
   * Attach a click handler function that starts Fancybox to the selected items, as well as to all future matching elements.
   * @param {String} selector - Selector that should match trigger elements
   * @param {Object} [options] - Custom options
   */
  static bind(selector, options = {}) {
    function attachClickEvent() {
      document.body.addEventListener("click", Fancybox.fromEvent, false);
    }

    if (!_shared_utils_canUseDOM_js__WEBPACK_IMPORTED_MODULE_1__.canUseDOM) {
      return;
    }

    if (!Fancybox.openers.size) {
      if (/complete|interactive|loaded/.test(document.readyState)) {
        attachClickEvent();
      } else {
        document.addEventListener("DOMContentLoaded", attachClickEvent);
      }
    }

    Fancybox.openers.set(selector, options);
  }

  /**
   * Remove the click handler that was attached with `bind()`
   * @param {String} selector - A selector which should match the one originally passed to .bind()
   */
  static unbind(selector) {
    Fancybox.openers.delete(selector);

    if (!Fancybox.openers.size) {
      Fancybox.destroy();
    }
  }

  /**
   * Immediately destroy all instances (without closing animation) and clean up all bindings..
   */
  static destroy() {
    let fb;

    while ((fb = Fancybox.getInstance())) {
      fb.destroy();
    }

    Fancybox.openers = new Map();

    document.body.removeEventListener("click", Fancybox.fromEvent, false);
  }

  /**
   * Retrieve instance by identifier or the top most instance, if identifier is not provided
   * @param {String|Numeric} [id] - Optional instance identifier
   */
  static getInstance(id) {
    if (id) {
      return instances.get(id);
    }

    const instance = Array.from(instances.values())
      .reverse()
      .find((instance) => {
        if (!instance.isClosing()) {
          return instance;
        }

        return false;
      });

    return instance || null;
  }

  /**
   * Close all or topmost currently active instance.
   * @param {boolean} [all] - All or only topmost active instance
   * @param {any} [arguments] - Optional data
   */
  static close(all = true, args) {
    if (all) {
      for (const instance of instances.values()) {
        instance.close(args);
      }
    } else {
      const instance = Fancybox.getInstance();

      if (instance) {
        instance.close(args);
      }
    }
  }

  /**
   * Slide topmost currently active instance to next page
   */
  static next() {
    const instance = Fancybox.getInstance();

    if (instance) {
      instance.next();
    }
  }

  /**
   * Slide topmost currently active instance to previous page
   */
  static prev() {
    const instance = Fancybox.getInstance();

    if (instance) {
      instance.prev();
    }
  }
}

// Expose version
Fancybox.version = "__VERSION__";

// Expose defaults
Fancybox.defaults = defaults;

// Expose openers
Fancybox.openers = new Map();

// Add default plugins
Fancybox.Plugins = _plugins_index_js__WEBPACK_IMPORTED_MODULE_5__.Plugins;

// Auto init with default options
Fancybox.bind("[data-fancybox]");

// Prepare plugins
for (const [key, Plugin] of Object.entries(Fancybox.Plugins || {})) {
  if (typeof Plugin.create === "function") {
    Plugin.create(Fancybox);
  }
}




/***/ }),

/***/ "./node_modules/@fancyapps/ui/src/Fancybox/l10n/en.js":
/*!************************************************************!*\
  !*** ./node_modules/@fancyapps/ui/src/Fancybox/l10n/en.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  CLOSE: "Close",
  NEXT: "Next",
  PREV: "Previous",
  MODAL: "You can close this modal content with the ESC key",
  ERROR: "Something Went Wrong, Please Try Again Later",
  IMAGE_ERROR: "Image Not Found",
  ELEMENT_NOT_FOUND: "HTML Element Not Found",
  AJAX_NOT_FOUND: "Error Loading AJAX : Not Found",
  AJAX_FORBIDDEN: "Error Loading AJAX : Forbidden",
  IFRAME_ERROR: "Error Loading Page",
  TOGGLE_ZOOM: "Toggle zoom level",
  TOGGLE_THUMBS: "Toggle thumbnails",
  TOGGLE_SLIDESHOW: "Toggle slideshow",
  TOGGLE_FULLSCREEN: "Toggle full-screen mode",
  DOWNLOAD: "Download",
});


/***/ }),

/***/ "./node_modules/@fancyapps/ui/src/Fancybox/plugins/Hash/Hash.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@fancyapps/ui/src/Fancybox/plugins/Hash/Hash.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Hash: () => (/* binding */ Hash)
/* harmony export */ });
/* harmony import */ var _shared_utils_canUseDOM_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../shared/utils/canUseDOM.js */ "./node_modules/@fancyapps/ui/src/shared/utils/canUseDOM.js");


class Hash {
  constructor(fancybox) {
    this.fancybox = fancybox;

    for (const methodName of ["onChange", "onClosing"]) {
      this[methodName] = this[methodName].bind(this);
    }

    this.events = {
      initCarousel: this.onChange,
      "Carousel.change": this.onChange,
      closing: this.onClosing,
    };

    this.hasCreatedHistory = false;
    this.origHash = "";
    this.timer = null;
  }

  /**
   * Process `Carousel.ready` and `Carousel.change` events to update URL hash
   * @param {Object} fancybox
   * @param {Object} carousel
   */
  onChange(fancybox) {
    const carousel = fancybox.Carousel;

    if (this.timer) {
      clearTimeout(this.timer);
    }

    const firstRun = carousel.prevPage === null;
    const currentSlide = fancybox.getSlide();

    const currentHash = new URL(document.URL).hash;

    let newHash = false;

    if (currentSlide.slug) {
      newHash = "#" + currentSlide.slug;
    } else {
      const dataset = currentSlide.$trigger && currentSlide.$trigger.dataset;
      const slug = fancybox.option("slug") || (dataset && dataset.fancybox);

      if (slug && slug.length && slug !== "true") {
        newHash = "#" + slug + (carousel.slides.length > 1 ? "-" + (currentSlide.index + 1) : "");
      }
    }

    if (firstRun) {
      this.origHash = currentHash !== newHash ? currentHash : "";
    }

    if (newHash && currentHash !== newHash) {
      this.timer = setTimeout(() => {
        try {
          window.history[firstRun ? "pushState" : "replaceState"](
            {},
            document.title,
            window.location.pathname + window.location.search + newHash
          );

          if (firstRun) {
            this.hasCreatedHistory = true;
          }
        } catch (e) {}
      }, 300);
    }
  }

  /**
   * Process `closing` event to clean up
   */
  onClosing() {
    if (this.timer) {
      clearTimeout(this.timer);
    }

    // Skip if closing is triggered by pressing  browser back button or by changing hash manually
    if (this.hasSilentClose === true) {
      return;
    }

    // Restore original url
    try {
      window.history.replaceState(
        {},
        document.title,
        window.location.pathname + window.location.search + (this.origHash || "")
      );

      return;
    } catch (e) {}
  }

  attach(fancybox) {
    fancybox.on(this.events);
  }

  detach(fancybox) {
    fancybox.off(this.events);
  }

  /**
   * Start fancybox from current URL hash,
   * this will be called on page load OR/AND after changing URL hash
   * @param {Class} Fancybox
   */
  static startFromUrl() {
    const Fancybox = Hash.Fancybox;

    if (!Fancybox || Fancybox.getInstance() || Fancybox.defaults.Hash === false) {
      return;
    }

    const { hash, slug, index } = Hash.getParsedURL();

    if (!slug) {
      return;
    }

    // Support custom slug
    // ===
    let selectedElem = document.querySelector(`[data-slug="${hash}"]`);

    if (selectedElem) {
      selectedElem.dispatchEvent(new CustomEvent("click", { bubbles: true, cancelable: true }));
    }

    if (Fancybox.getInstance()) {
      return;
    }

    // If elements are not found by custom slug, use URL hash value as group name
    // ===
    const groupElems = document.querySelectorAll(`[data-fancybox="${slug}"]`);

    if (!groupElems.length) {
      return;
    }

    if (index === null && groupElems.length === 1) {
      selectedElem = groupElems[0];
    } else if (index) {
      selectedElem = groupElems[index - 1];
    }

    if (selectedElem) {
      selectedElem.dispatchEvent(new CustomEvent("click", { bubbles: true, cancelable: true }));
    }
  }

  /**
   * Handle `hash` change, change gallery item to current index or start/close current instance
   */
  static onHashChange() {
    const { slug, index } = Hash.getParsedURL();

    const Fancybox = Hash.Fancybox;
    const instance = Fancybox && Fancybox.getInstance();

    if (instance && instance.plugins.Hash) {
      // Check if hash matches currently active gallery
      if (slug) {
        const carousel = instance.Carousel;

        /**
         * Support manually opened gallery
         */
        if (slug === instance.option("slug")) {
          return carousel.slideTo(index - 1);
        }

        /**
         * Check if URL hash matches `data-slug` value of active element
         */
        for (let slide of carousel.slides) {
          if (slide.slug && slide.slug === slug) {
            return carousel.slideTo(slide.index);
          }
        }

        /**
         * Check if URL hash matches `data-fancybox` value of active element
         */
        const slide = instance.getSlide();
        const dataset = slide.$trigger && slide.$trigger.dataset;

        if (dataset && dataset.fancybox === slug) {
          return carousel.slideTo(index - 1);
        }
      }

      /**
       * Close if no matching element found
       */
      instance.plugins.Hash.hasSilentClose = true;

      instance.close();
    }

    /**
     * Attempt to start
     */
    Hash.startFromUrl();
  }

  /**
   * Add event bindings that will start new Fancybox instance based in the current URL
   */
  static create(Fancybox) {
    Hash.Fancybox = Fancybox;

    function proceed() {
      window.addEventListener("hashchange", Hash.onHashChange, false);

      Hash.startFromUrl();
    }

    if (_shared_utils_canUseDOM_js__WEBPACK_IMPORTED_MODULE_0__.canUseDOM) {
      window.requestAnimationFrame(() => {
        if (/complete|interactive|loaded/.test(document.readyState)) {
          proceed();
        } else {
          document.addEventListener("DOMContentLoaded", proceed);
        }
      });
    }
  }

  static destroy() {
    window.removeEventListener("hashchange", Hash.onHashChange, false);
  }

  /**
   * Helper method to split URL hash into useful pieces
   */
  static getParsedURL() {
    const hash = window.location.hash.substr(1),
      tmp = hash.split("-"),
      index = tmp.length > 1 && /^\+?\d+$/.test(tmp[tmp.length - 1]) ? parseInt(tmp.pop(-1), 10) || null : null,
      slug = tmp.join("-");

    return {
      hash,
      slug,
      index,
    };
  }
}


/***/ }),

/***/ "./node_modules/@fancyapps/ui/src/Fancybox/plugins/Html/Html.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@fancyapps/ui/src/Fancybox/plugins/Html/Html.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Html: () => (/* binding */ Html)
/* harmony export */ });
/* harmony import */ var _shared_utils_extend_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../shared/utils/extend.js */ "./node_modules/@fancyapps/ui/src/shared/utils/extend.js");


const buildURLQuery = (src, obj) => {
  const url = new URL(src);
  const params = new URLSearchParams(url.search);

  let rez = new URLSearchParams();

  for (const [key, value] of [...params, ...Object.entries(obj)]) {
    // Youtube
    if (key === "t") {
      rez.set("start", parseInt(value));
    } else {
      rez.set(key, value);
    }
  }

  // Convert to 'foo=1&bar=2&baz=3'
  rez = rez.toString();

  // Vimeo
  // https://vimeo.zendesk.com/hc/en-us/articles/360000121668-Starting-playback-at-a-specific-timecode
  let matches = src.match(/#t=((.*)?\d+s)/);

  if (matches) {
    rez += `#t=${matches[1]}`;
  }

  return rez;
};

const defaults = {
  // General options for any video content (Youtube, Vimeo, HTML5 video)
  video: {
    autoplay: true,
    ratio: 16 / 9,
  },
  // Youtube embed parameters
  youtube: {
    autohide: 1,
    fs: 1,
    rel: 0,
    hd: 1,
    wmode: "transparent",
    enablejsapi: 1,
    html5: 1,
  },
  // Vimeo embed parameters
  vimeo: {
    hd: 1,
    show_title: 1,
    show_byline: 1,
    show_portrait: 0,
    fullscreen: 1,
  },
  // HTML5 video parameters
  html5video: {
    tpl: `<video class="fancybox__html5video" playsinline controls controlsList="nodownload" poster="{{poster}}">
  <source src="{{src}}" type="{{format}}" />Sorry, your browser doesn't support embedded videos.</video>`,
    format: "",
  },
};

class Html {
  constructor(fancybox) {
    this.fancybox = fancybox;

    for (const methodName of [
      "onInit",
      "onReady",

      "onCreateSlide",
      "onRemoveSlide",

      "onSelectSlide",
      "onUnselectSlide",

      "onRefresh",

      // For communication with iframed video (youtube/vimeo)
      "onMessage",
    ]) {
      this[methodName] = this[methodName].bind(this);
    }

    this.events = {
      init: this.onInit,
      ready: this.onReady,

      "Carousel.createSlide": this.onCreateSlide,
      "Carousel.removeSlide": this.onRemoveSlide,

      "Carousel.selectSlide": this.onSelectSlide,
      "Carousel.unselectSlide": this.onUnselectSlide,

      "Carousel.refresh": this.onRefresh,
    };
  }

  /**
   * Check if each gallery item has type when fancybox starts
   */
  onInit() {
    for (const slide of this.fancybox.items) {
      this.processType(slide);
    }
  }

  /**
   * Set content type for the slide
   * @param {Object} slide
   */
  processType(slide) {
    // Add support for `new Fancybox({items : [{html : 'smth'}]});`
    if (slide.html) {
      slide.src = slide.html;
      slide.type = "html";

      delete slide.html;

      return;
    }

    const src = slide.src || "";

    let type = slide.type || this.fancybox.options.type,
      rez = null;

    if (src && typeof src !== "string") {
      return;
    }

    if (
      (rez = src.match(
        /(?:youtube\.com|youtu\.be|youtube\-nocookie\.com)\/(?:watch\?(?:.*&)?v=|v\/|u\/|embed\/?)?(videoseries\?list=(?:.*)|[\w-]{11}|\?listType=(?:.*)&list=(?:.*))(?:.*)/i
      ))
    ) {
      const params = buildURLQuery(src, this.fancybox.option("Html.youtube"));
      const videoId = encodeURIComponent(rez[1]);

      slide.videoId = videoId;
      slide.src = `https://www.youtube-nocookie.com/embed/${videoId}?${params}`;
      slide.thumb = slide.thumb || `https://i.ytimg.com/vi/${videoId}/mqdefault.jpg`;
      slide.vendor = "youtube";

      type = "video";
    } else if ((rez = src.match(/^.+vimeo.com\/(?:\/)?([\d]+)(.*)?/))) {
      const params = buildURLQuery(src, this.fancybox.option("Html.vimeo"));
      const videoId = encodeURIComponent(rez[1]);

      slide.videoId = videoId;
      slide.src = `https://player.vimeo.com/video/${videoId}?${params}`;
      slide.vendor = "vimeo";

      type = "video";
    } else if (
      (rez = src.match(
        /(?:maps\.)?google\.([a-z]{2,3}(?:\.[a-z]{2})?)\/(?:(?:(?:maps\/(?:place\/(?:.*)\/)?\@(.*),(\d+.?\d+?)z))|(?:\?ll=))(.*)?/i
      ))
    ) {
      slide.src = `//maps.google.${rez[1]}/?ll=${(rez[2]
        ? rez[2] + "&z=" + Math.floor(rez[3]) + (rez[4] ? rez[4].replace(/^\//, "&") : "")
        : rez[4] + ""
      ).replace(/\?/, "&")}&output=${rez[4] && rez[4].indexOf("layer=c") > 0 ? "svembed" : "embed"}`;

      type = "map";
    } else if ((rez = src.match(/(?:maps\.)?google\.([a-z]{2,3}(?:\.[a-z]{2})?)\/(?:maps\/search\/)(.*)/i))) {
      slide.src = `//maps.google.${rez[1]}/maps?q=${rez[2].replace("query=", "q=").replace("api=1", "")}&output=embed`;

      type = "map";
    }

    // Guess content type
    if (!type) {
      if (src.charAt(0) === "#") {
        type = "inline";
      } else if ((rez = src.match(/\.(mp4|mov|ogv|webm)((\?|#).*)?$/i))) {
        type = "html5video";

        slide.format = slide.format || "video/" + (rez[1] === "ogv" ? "ogg" : rez[1]);
      } else if (src.match(/(^data:image\/[a-z0-9+\/=]*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg|ico)((\?|#).*)?$)/i)) {
        type = "image";
      } else if (src.match(/\.(pdf)((\?|#).*)?$/i)) {
        type = "pdf";
      }
    }

    slide.type = type || this.fancybox.option("defaultType", "image");

    if (type === "html5video" || type === "video") {
      slide.video = (0,_shared_utils_extend_js__WEBPACK_IMPORTED_MODULE_0__.extend)({}, this.fancybox.option("Html.video"), slide.video);

      if (slide._width && slide._height) {
        slide.ratio = parseFloat(slide._width) / parseFloat(slide._height);
      } else {
        slide.ratio = slide.ratio || slide.video.ratio || defaults.video.ratio;
      }
    }
  }

  /**
   * Start loading content when Fancybox is ready
   */
  onReady() {
    this.fancybox.Carousel.slides.forEach((slide) => {
      if (slide.$el) {
        this.setContent(slide);

        if (slide.index === this.fancybox.getSlide().index) {
          this.playVideo(slide);
        }
      }
    });
  }

  /**
   * Process `Carousel.createSlide` event to create image content
   * @param {Object} fancybox
   * @param {Object} carousel
   * @param {Object} slide
   */
  onCreateSlide(fancybox, carousel, slide) {
    if (this.fancybox.state !== "ready") {
      return;
    }

    this.setContent(slide);
  }

  /**
   * Retrieve and set slide content
   * @param {Object} slide
   */
  loadInlineContent(slide) {
    let $content;

    if (slide.src instanceof HTMLElement) {
      $content = slide.src;
    } else if (typeof slide.src === "string") {
      const tmp = slide.src.split("#", 2);
      const id = tmp.length === 2 && tmp[0] === "" ? tmp[1] : tmp[0];

      $content = document.getElementById(id);
    }

    if ($content) {
      if (slide.type === "clone" || $content.$placeHolder) {
        $content = $content.cloneNode(true);
        let attrId = $content.getAttribute("id");

        attrId = attrId ? `${attrId}--clone` : `clone-${this.fancybox.id}-${slide.index}`;

        $content.setAttribute("id", attrId);
      } else {
        const $placeHolder = document.createElement("div");
        $placeHolder.classList.add("fancybox-placeholder");
        $content.parentNode.insertBefore($placeHolder, $content);
        $content.$placeHolder = $placeHolder;
      }

      this.fancybox.setContent(slide, $content);
    } else {
      this.fancybox.setError(slide, "{{ELEMENT_NOT_FOUND}}");
    }
  }

  /**
   * Makes AJAX request and sets response as slide content
   * @param {Object} slide
   */
  loadAjaxContent(slide) {
    const fancybox = this.fancybox;
    const xhr = new XMLHttpRequest();

    fancybox.showLoading(slide);

    xhr.onreadystatechange = function () {
      if (xhr.readyState === XMLHttpRequest.DONE) {
        if (fancybox.state === "ready") {
          fancybox.hideLoading(slide);

          if (xhr.status === 200) {
            fancybox.setContent(slide, xhr.responseText);
          } else {
            fancybox.setError(slide, xhr.status === 404 ? "{{AJAX_NOT_FOUND}}" : "{{AJAX_FORBIDDEN}}");
          }
        }
      }
    };

    const data = slide.ajax || null;

    xhr.open(data ? "POST" : "GET", slide.src);
    xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
    xhr.send(data);

    slide.xhr = xhr;
  }

  /**
   * Creates iframe as slide content, preloads if needed before displaying
   * @param {Object} slide
   */
  loadIframeContent(slide) {
    const fancybox = this.fancybox;
    const $iframe = document.createElement("iframe");

    $iframe.className = "fancybox__iframe";

    $iframe.setAttribute("id", `fancybox__iframe_${fancybox.id}_${slide.index}`);

    $iframe.setAttribute("allow", "autoplay; fullscreen");
    $iframe.setAttribute("scrolling", "auto");

    slide.$iframe = $iframe;

    if (slide.type !== "iframe" || slide.preload === false) {
      $iframe.setAttribute("src", slide.src);

      this.fancybox.setContent(slide, $iframe);

      this.resizeIframe(slide);

      return;
    }

    fancybox.showLoading(slide);

    const $content = document.createElement("div");
    $content.style.visibility = "hidden";

    this.fancybox.setContent(slide, $content);

    $content.appendChild($iframe);

    $iframe.onerror = () => {
      fancybox.setError(slide, "{{IFRAME_ERROR}}");
    };

    $iframe.onload = () => {
      fancybox.hideLoading(slide);

      let isFirstLoad = false;

      if (!$iframe.isReady) {
        $iframe.isReady = true;
        isFirstLoad = true;
      }

      if (!$iframe.src.length) {
        return;
      }

      $iframe.parentNode.style.visibility = "";

      this.resizeIframe(slide);

      if (isFirstLoad) {
        fancybox.revealContent(slide);
      }
    };

    $iframe.setAttribute("src", slide.src);
  }

  /**
   * Set CSS max/min width/height properties of the content to have the correct aspect ratio
   * @param {Object} slide
   */
  setAspectRatio(slide) {
    const $content = slide.$content;
    const ratio = slide.ratio;

    if (!$content) {
      return;
    }

    let width = slide._width;
    let height = slide._height;

    if (ratio || (width && height)) {
      Object.assign($content.style, {
        width: width && height ? "100%" : "",
        height: width && height ? "100%" : "",
        maxWidth: "",
        maxHeight: "",
      });

      let maxWidth = $content.offsetWidth;
      let maxHeight = $content.offsetHeight;

      width = width || maxWidth;
      height = height || maxHeight;

      // Resize to fit
      if (width > maxWidth || height > maxHeight) {
        let maxRatio = Math.min(maxWidth / width, maxHeight / height);

        width = width * maxRatio;
        height = height * maxRatio;
      }

      // Recheck ratio
      if (Math.abs(width / height - ratio) > 0.01) {
        if (ratio < width / height) {
          width = height * ratio;
        } else {
          height = width / ratio;
        }
      }

      Object.assign($content.style, {
        width: `${width}px`,
        height: `${height}px`,
      });
    }
  }

  /**
   * Adjust the width and height of the iframe according to the content dimensions, or defined sizes
   * @param {Object} slide
   */
  resizeIframe(slide) {
    const $iframe = slide.$iframe;

    if (!$iframe) {
      return;
    }

    let width_ = slide._width || 0;
    let height_ = slide._height || 0;

    if (width_ && height_) {
      slide.autoSize = false;
    }

    const $parent = $iframe.parentNode;
    const parentStyle = $parent && $parent.style;

    if (slide.preload !== false && slide.autoSize !== false && parentStyle) {
      try {
        const compStyles = window.getComputedStyle($parent),
          paddingX = parseFloat(compStyles.paddingLeft) + parseFloat(compStyles.paddingRight),
          paddingY = parseFloat(compStyles.paddingTop) + parseFloat(compStyles.paddingBottom);

        const document = $iframe.contentWindow.document,
          $html = document.getElementsByTagName("html")[0],
          $body = document.body;

        // Allow content to expand horizontally
        parentStyle.width = "";

        // Get rid of vertical scrollbar
        $body.style.overflow = "hidden";

        width_ = width_ || $html.scrollWidth + paddingX;

        parentStyle.width = `${width_}px`;

        $body.style.overflow = "";

        parentStyle.flex = "0 0 auto";
        parentStyle.height = `${$body.scrollHeight}px`;

        height_ = $html.scrollHeight + paddingY;
      } catch (error) {
        //
      }
    }

    if (width_ || height_) {
      const newStyle = {
        flex: "0 1 auto",
      };

      if (width_) {
        newStyle.width = `${width_}px`;
      }

      if (height_) {
        newStyle.height = `${height_}px`;
      }

      Object.assign(parentStyle, newStyle);
    }
  }

  /**
   * Process `Carousel.onRefresh` event,
   * trigger iframe autosizing and set content aspect ratio for each slide
   * @param {Object} fancybox
   * @param {Object} carousel
   */
  onRefresh(fancybox, carousel) {
    carousel.slides.forEach((slide) => {
      if (!slide.$el) {
        return;
      }

      if (slide.$iframe) {
        this.resizeIframe(slide);
      }

      if (slide.ratio) {
        this.setAspectRatio(slide);
      }
    });
  }

  /**
   * Process `Carousel.onCreateSlide` event to set content
   * @param {Object} fancybox
   * @param {Object} carousel
   * @param {Object} slide
   */
  setContent(slide) {
    if (!slide || slide.isDom) {
      return;
    }

    switch (slide.type) {
      case "html":
        this.fancybox.setContent(slide, slide.src);
        break;

      case "html5video":
        this.fancybox.setContent(
          slide,
          this.fancybox
            .option("Html.html5video.tpl")
            .replace(/\{\{src\}\}/gi, slide.src)
            .replace("{{format}}", slide.format || (slide.html5video && slide.html5video.format) || "")
            .replace("{{poster}}", slide.poster || slide.thumb || "")
        );

        break;

      case "inline":
      case "clone":
        this.loadInlineContent(slide);
        break;

      case "ajax":
        this.loadAjaxContent(slide);
        break;

      case "pdf":
      case "video":
      case "map":
        slide.preload = false;

      case "iframe":
        this.loadIframeContent(slide);

        break;
    }

    if (slide.ratio) {
      this.setAspectRatio(slide);
    }
  }

  /**
   * Process `Carousel.onSelectSlide` event to start video
   * @param {Object} fancybox
   * @param {Object} carousel
   * @param {Object} slide
   */
  onSelectSlide(fancybox, carousel, slide) {
    if (fancybox.state === "ready") {
      this.playVideo(slide);
    }
  }

  /**
   * Attempts to begin playback of the media
   * @param {Object} slide
   */
  playVideo(slide) {
    if (slide.type === "html5video" && slide.video.autoplay) {
      try {
        const $video = slide.$el.querySelector("video");

        if ($video) {
          const promise = $video.play();

          if (promise !== undefined) {
            promise
              .then(() => {
                // Autoplay started
              })
              .catch((error) => {
                // Autoplay was prevented.
                $video.muted = true;
                $video.play();
              });
          }
        }
      } catch (err) {}
    }

    if (slide.type !== "video" || !(slide.$iframe && slide.$iframe.contentWindow)) {
      return;
    }

    // This function will be repeatedly called to check
    // if video iframe has been loaded to send message to start the video
    const poller = () => {
      if (slide.state === "done" && slide.$iframe && slide.$iframe.contentWindow) {
        let command;

        if (slide.$iframe.isReady) {
          if (slide.video && slide.video.autoplay) {
            if (slide.vendor == "youtube") {
              command = {
                event: "command",
                func: "playVideo",
              };
            } else {
              command = {
                method: "play",
                value: "true",
              };
            }
          }

          if (command) {
            slide.$iframe.contentWindow.postMessage(JSON.stringify(command), "*");
          }

          return;
        }

        if (slide.vendor === "youtube") {
          command = {
            event: "listening",
            id: slide.$iframe.getAttribute("id"),
          };

          slide.$iframe.contentWindow.postMessage(JSON.stringify(command), "*");
        }
      }

      slide.poller = setTimeout(poller, 250);
    };

    poller();
  }

  /**
   * Process `Carousel.onUnselectSlide` event to pause video
   * @param {Object} fancybox
   * @param {Object} carousel
   * @param {Object} slide
   */
  onUnselectSlide(fancybox, carousel, slide) {
    if (slide.type === "html5video") {
      try {
        slide.$el.querySelector("video").pause();
      } catch (error) {}

      return;
    }

    let command = false;

    if (slide.vendor == "vimeo") {
      command = {
        method: "pause",
        value: "true",
      };
    } else if (slide.vendor === "youtube") {
      command = {
        event: "command",
        func: "pauseVideo",
      };
    }

    if (command && slide.$iframe && slide.$iframe.contentWindow) {
      slide.$iframe.contentWindow.postMessage(JSON.stringify(command), "*");
    }

    clearTimeout(slide.poller);
  }

  /**
   * Process `Carousel.onRemoveSlide` event to do clean up
   * @param {Object} fancybox
   * @param {Object} carousel
   * @param {Object} slide
   */
  onRemoveSlide(fancybox, carousel, slide) {
    // Abort ajax request if exists
    if (slide.xhr) {
      slide.xhr.abort();
      slide.xhr = null;
    }

    // Unload iframe content if exists
    if (slide.$iframe) {
      slide.$iframe.onload = slide.$iframe.onerror = null;

      slide.$iframe.src = "//about:blank";
      slide.$iframe = null;
    }

    // Clear inline content
    const $content = slide.$content;

    if (slide.type === "inline" && $content) {
      $content.classList.remove("fancybox__content");

      if ($content.style.display !== "none") {
        $content.style.display = "none";
      }
    }

    if (slide.$closeButton) {
      slide.$closeButton.remove();
      slide.$closeButton = null;
    }

    const $placeHolder = $content && $content.$placeHolder;

    if ($placeHolder) {
      $placeHolder.parentNode.insertBefore($content, $placeHolder);
      $placeHolder.remove();
      $content.$placeHolder = null;
    }
  }

  /**
   * Process `window.message` event to mark video iframe element as `ready`
   * @param {Object} e - Event
   */
  onMessage(e) {
    try {
      let data = JSON.parse(e.data);

      if (e.origin === "https://player.vimeo.com") {
        if (data.event === "ready") {
          for (let $iframe of document.getElementsByClassName("fancybox__iframe")) {
            if ($iframe.contentWindow === e.source) {
              $iframe.isReady = 1;
            }
          }
        }
      } else if (e.origin === "https://www.youtube-nocookie.com") {
        if (data.event === "onReady") {
          document.getElementById(data.id).isReady = 1;
        }
      }
    } catch (ex) {}
  }

  attach() {
    this.fancybox.on(this.events);

    window.addEventListener("message", this.onMessage, false);
  }

  detach() {
    this.fancybox.off(this.events);

    window.removeEventListener("message", this.onMessage, false);
  }
}

// Expose defaults
Html.defaults = defaults;


/***/ }),

/***/ "./node_modules/@fancyapps/ui/src/Fancybox/plugins/Image/Image.js":
/*!************************************************************************!*\
  !*** ./node_modules/@fancyapps/ui/src/Fancybox/plugins/Image/Image.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Image: () => (/* binding */ Image)
/* harmony export */ });
/* harmony import */ var _shared_utils_extend_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../shared/utils/extend.js */ "./node_modules/@fancyapps/ui/src/shared/utils/extend.js");
/* harmony import */ var _Panzoom_Panzoom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../Panzoom/Panzoom.js */ "./node_modules/@fancyapps/ui/src/Panzoom/Panzoom.js");




const defaults = {
  // Class name for slide element indicating that content can be zoomed in
  canZoomInClass: "can-zoom_in",

  // Class name for slide element indicating that content can be zoomed out
  canZoomOutClass: "can-zoom_out",

  // Do zoom animation from thumbnail image when starting or closing fancybox
  zoom: true,

  // Animate opacity while zooming
  zoomOpacity: "auto", // "auto" | true | false,

  // Zoom animation friction
  zoomFriction: 0.82,

  // Disable zoom animation if thumbnail is visible only partly
  ignoreCoveredThumbnail: false,

  // Enable guestures
  touch: true,

  // Action to be performed when user clicks on the image
  click: "toggleZoom", // "toggleZoom" | "next" | "close" | null

  // Action to be performed when double-click event is detected on the image
  doubleClick: null, // "toggleZoom" | null

  // Action to be performed when user rotates a wheel button on a pointing device
  wheel: "zoom", // "zoom" | "slide" | "close" | null

  // How image should be resized to fit its container
  fit: "contain", // "contain" | "contain-w" | "cover"

  // Should create wrapping element around the image
  wrap: false,

  // Custom Panzoom options
  Panzoom: {
    ratio: 1,
  },
};

class Image {
  constructor(fancybox) {
    this.fancybox = fancybox;

    for (const methodName of [
      // Fancybox
      "onReady",
      "onClosing",
      "onDone",

      // Fancybox.Carousel
      "onPageChange",
      "onCreateSlide",
      "onRemoveSlide",

      // Image load/error
      "onImageStatusChange",
    ]) {
      this[methodName] = this[methodName].bind(this);
    }

    this.events = {
      ready: this.onReady,
      closing: this.onClosing,
      done: this.onDone,

      "Carousel.change": this.onPageChange,
      "Carousel.createSlide": this.onCreateSlide,
      "Carousel.removeSlide": this.onRemoveSlide,
    };
  }

  /**
   * Handle `ready` event to start loading content
   */
  onReady() {
    this.fancybox.Carousel.slides.forEach((slide) => {
      if (slide.$el) {
        this.setContent(slide);
      }
    });
  }

  /**
   * Handle `done` event to update cursor
   * @param {Object} fancybox
   * @param {Object} slide
   */
  onDone(fancybox, slide) {
    this.handleCursor(slide);
  }

  /**
   * Handle `closing` event to clean up all slides and to start zoom-out animation
   * @param {Object} fancybox
   */
  onClosing(fancybox) {
    clearTimeout(this.clickTimer);
    this.clickTimer = null;

    // Remove events
    fancybox.Carousel.slides.forEach((slide) => {
      if (slide.$image) {
        slide.state = "destroy";
      }

      if (slide.Panzoom) {
        slide.Panzoom.detachEvents();
      }
    });

    // If possible, start the zoom animation, it will interrupt the default closing process
    if (this.fancybox.state === "closing" && this.canZoom(fancybox.getSlide())) {
      this.zoomOut();
    }
  }

  /**
   * Process `Carousel.createSlide` event to create image content
   * @param {Object} fancybox
   * @param {Object} carousel
   * @param {Object} slide
   */
  onCreateSlide(fancybox, carousel, slide) {
    if (this.fancybox.state !== "ready") {
      return;
    }

    this.setContent(slide);
  }

  /**
   * Handle `Carousel.removeSlide` event to do clean up the slide
   * @param {Object} fancybox
   * @param {Object} carousel
   * @param {Object} slide
   */
  onRemoveSlide(fancybox, carousel, slide) {
    if (slide.$image) {
      slide.$el.classList.remove(fancybox.option("Image.canZoomInClass"));

      slide.$image.remove();
      slide.$image = null;
    }

    if (slide.Panzoom) {
      slide.Panzoom.destroy();
      slide.Panzoom = null;
    }

    if (slide.$el && slide.$el.dataset) {
      delete slide.$el.dataset.imageFit;
    }
  }

  /**
   * Build DOM elements and add event listeners
   * @param {Object} slide
   */
  setContent(slide) {
    // Check if this slide should contain an image
    if (slide.isDom || slide.html || (slide.type && slide.type !== "image")) {
      return;
    }

    if (slide.$image) {
      return;
    }

    slide.type = "image";
    slide.state = "loading";

    // * Build layout
    // Container
    const $content = document.createElement("div");
    $content.style.visibility = "hidden";

    // Image element
    const $image = document.createElement("img");

    $image.addEventListener("load", (event) => {
      event.stopImmediatePropagation();

      this.onImageStatusChange(slide);
    });

    $image.addEventListener("error", () => {
      this.onImageStatusChange(slide);
    });

    $image.src = slide.src;
    $image.alt = "";
    $image.draggable = false;

    $image.classList.add("fancybox__image");

    if (slide.srcset) {
      $image.setAttribute("srcset", slide.srcset);
    }

    if (slide.sizes) {
      $image.setAttribute("sizes", slide.sizes);
    }

    slide.$image = $image;

    const shouldWrap = this.fancybox.option("Image.wrap");

    if (shouldWrap) {
      const $wrap = document.createElement("div");
      $wrap.classList.add(typeof shouldWrap === "string" ? shouldWrap : "fancybox__image-wrap");

      $wrap.appendChild($image);

      $content.appendChild($wrap);

      slide.$wrap = $wrap;
    } else {
      $content.appendChild($image);
    }

    // Set data attribute if other that default
    // for example, set `[data-image-fit="contain-w"]`
    slide.$el.dataset.imageFit = this.fancybox.option("Image.fit");

    // Append content
    this.fancybox.setContent(slide, $content);

    // Display loading icon
    if ($image.complete || $image.error) {
      this.onImageStatusChange(slide);
    } else {
      this.fancybox.showLoading(slide);
    }
  }

  /**
   * Handle image state change, display error or start revealing image
   * @param {Object} slide
   */
  onImageStatusChange(slide) {
    const $image = slide.$image;

    if (!$image || slide.state !== "loading") {
      return;
    }

    if (!($image.complete && $image.naturalWidth && $image.naturalHeight)) {
      this.fancybox.setError(slide, "{{IMAGE_ERROR}}");

      return;
    }

    this.fancybox.hideLoading(slide);

    if (this.fancybox.option("Image.fit") === "contain") {
      this.initSlidePanzoom(slide);
    }

    // Add `wheel` and `click` event handler
    slide.$el.addEventListener("wheel", (event) => this.onWheel(slide, event), { passive: false });
    slide.$content.addEventListener("click", (event) => this.onClick(slide, event), { passive: false });

    this.revealContent(slide);
  }

  /**
   * Make image zoomable and draggable using Panzoom
   * @param {Object} slide
   */
  initSlidePanzoom(slide) {
    if (slide.Panzoom) {
      return;
    }

    //* Initialize Panzoom
    slide.Panzoom = new _Panzoom_Panzoom_js__WEBPACK_IMPORTED_MODULE_1__.Panzoom(
      slide.$el,
      (0,_shared_utils_extend_js__WEBPACK_IMPORTED_MODULE_0__.extend)(true, this.fancybox.option("Image.Panzoom", {}), {
        viewport: slide.$wrap,
        content: slide.$image,

        width: slide._width,
        height: slide._height,

        wrapInner: false,

        // Allow to select caption text
        textSelection: true,

        // Toggle gestures
        touch: this.fancybox.option("Image.touch"),

        // This will prevent click conflict with fancybox main carousel
        panOnlyZoomed: true,

        // Disable default click / wheel events as custom event listeners will replace them,
        // because click and wheel events should work without Panzoom
        click: false,
        wheel: false,
      })
    );

    slide.Panzoom.on("startAnimation", () => {
      this.fancybox.trigger("Image.startAnimation", slide);
    });

    slide.Panzoom.on("endAnimation", () => {
      if (slide.state === "zoomIn") {
        this.fancybox.done(slide);
      }

      this.handleCursor(slide);

      this.fancybox.trigger("Image.endAnimation", slide);
    });

    slide.Panzoom.on("afterUpdate", () => {
      this.handleCursor(slide);

      this.fancybox.trigger("Image.afterUpdate", slide);
    });
  }

  /**
   * Start zoom-in animation if possible, or simply reveal content
   * @param {Object} slide
   */
  revealContent(slide) {
    // Animate only on first run
    if (
      this.fancybox.Carousel.prevPage === null &&
      slide.index === this.fancybox.options.startIndex &&
      this.canZoom(slide)
    ) {
      this.zoomIn();
    } else {
      this.fancybox.revealContent(slide);
    }
  }

  /**
   * Get zoom info for selected slide
   * @param {Object} slide
   */
  getZoomInfo(slide) {
    const $thumb = slide.$thumb,
      thumbRect = $thumb.getBoundingClientRect(),
      thumbWidth = thumbRect.width,
      thumbHeight = thumbRect.height,
      //
      contentRect = slide.$content.getBoundingClientRect(),
      contentWidth = contentRect.width,
      contentHeight = contentRect.height,
      //
      shiftedTop = contentRect.top - thumbRect.top,
      shiftedLeft = contentRect.left - thumbRect.left;

    // Check if need to update opacity
    let opacity = this.fancybox.option("Image.zoomOpacity");

    if (opacity === "auto") {
      opacity = Math.abs(thumbWidth / thumbHeight - contentWidth / contentHeight) > 0.1;
    }

    return {
      top: shiftedTop,
      left: shiftedLeft,
      scale: contentWidth && thumbWidth ? thumbWidth / contentWidth : 1,
      opacity: opacity,
    };
  }

  /**
   * Determine if it is possible to do zoom-in animation
   */
  canZoom(slide) {
    const fancybox = this.fancybox,
      $container = fancybox.$container;

    if (window.visualViewport && window.visualViewport.scale !== 1) {
      return false;
    }

    if (slide.Panzoom && !slide.Panzoom.content.width) {
      return false;
    }

    if (!fancybox.option("Image.zoom") || fancybox.option("Image.fit") !== "contain") {
      return false;
    }

    const $thumb = slide.$thumb;

    if (!$thumb || slide.state === "loading") {
      return false;
    }

    // * Check if thumbnail image is really visible
    $container.classList.add("fancybox__no-click");

    const rect = $thumb.getBoundingClientRect();

    let rez;

    // Check if thumbnail image is actually visible on the screen
    if (this.fancybox.option("Image.ignoreCoveredThumbnail")) {
      const visibleTopLeft = document.elementFromPoint(rect.left + 1, rect.top + 1) === $thumb;
      const visibleBottomRight = document.elementFromPoint(rect.right - 1, rect.bottom - 1) === $thumb;

      rez = visibleTopLeft && visibleBottomRight;
    } else {
      rez = document.elementFromPoint(rect.left + rect.width * 0.5, rect.top + rect.height * 0.5) === $thumb;
    }

    $container.classList.remove("fancybox__no-click");

    return rez;
  }

  /**
   * Perform zoom-in animation
   */
  zoomIn() {
    const fancybox = this.fancybox,
      slide = fancybox.getSlide(),
      Panzoom = slide.Panzoom;

    const { top, left, scale, opacity } = this.getZoomInfo(slide);

    fancybox.trigger("reveal", slide);

    // Scale and move to start position
    Panzoom.panTo({
      x: left * -1,
      y: top * -1,
      scale: scale,
      friction: 0,
      ignoreBounds: true,
    });

    slide.$content.style.visibility = "";

    slide.state = "zoomIn";

    if (opacity === true) {
      Panzoom.on("afterTransform", (panzoom) => {
        if (slide.state === "zoomIn" || slide.state === "zoomOut") {
          panzoom.$content.style.opacity = Math.min(1, 1 - (1 - panzoom.content.scale) / (1 - scale));
        }
      });
    }

    // Animate back to original position
    Panzoom.panTo({
      x: 0,
      y: 0,
      scale: 1,
      friction: this.fancybox.option("Image.zoomFriction"),
    });
  }

  /**
   * Perform zoom-out animation
   */
  zoomOut() {
    const fancybox = this.fancybox,
      slide = fancybox.getSlide(),
      Panzoom = slide.Panzoom;

    if (!Panzoom) {
      return;
    }

    slide.state = "zoomOut";
    fancybox.state = "customClosing";

    if (slide.$caption) {
      slide.$caption.style.visibility = "hidden";
    }

    let friction = this.fancybox.option("Image.zoomFriction");

    const animatePosition = (event) => {
      const { top, left, scale, opacity } = this.getZoomInfo(slide);

      // Increase speed on the first run if opacity is not animated
      if (!event && !opacity) {
        friction *= 0.82;
      }

      Panzoom.panTo({
        x: left * -1,
        y: top * -1,
        scale,
        friction,
        ignoreBounds: true,
      });

      // Gradually increase speed
      friction *= 0.98;
    };

    // Page scrolling will cause thumbnail to change position on the display,
    // therefore animation end position has to be recalculated after each page scroll
    window.addEventListener("scroll", animatePosition);

    Panzoom.once("endAnimation", () => {
      window.removeEventListener("scroll", animatePosition);
      fancybox.destroy();
    });

    animatePosition();
  }

  /**
   * Set the type of mouse cursor to indicate if content is zoomable
   * @param {Object} slide
   */
  handleCursor(slide) {
    if (slide.type !== "image" || !slide.$el) {
      return;
    }

    const panzoom = slide.Panzoom;
    const clickAction = this.fancybox.option("Image.click", false, slide);
    const touchIsEnabled = this.fancybox.option("Image.touch");

    const classList = slide.$el.classList;

    const zoomInClass = this.fancybox.option("Image.canZoomInClass");
    const zoomOutClass = this.fancybox.option("Image.canZoomOutClass");

    classList.remove(zoomOutClass);
    classList.remove(zoomInClass);

    if (panzoom && clickAction === "toggleZoom") {
      const canZoomIn =
        panzoom && panzoom.content.scale === 1 && panzoom.option("maxScale") - panzoom.content.scale > 0.01;

      if (canZoomIn) {
        classList.add(zoomInClass);
      } else if (panzoom.content.scale > 1 && !touchIsEnabled) {
        classList.add(zoomOutClass);
      }
    } else if (clickAction === "close") {
      classList.add(zoomOutClass);
    }
  }

  /**
   * Handle `wheel` event
   * @param {Object} slide
   * @param {Object} event
   */
  onWheel(slide, event) {
    if (this.fancybox.state !== "ready") {
      return;
    }

    if (this.fancybox.trigger("Image.wheel", event) === false) {
      return;
    }

    switch (this.fancybox.option("Image.wheel")) {
      case "zoom":
        if (slide.state === "done") {
          slide.Panzoom && slide.Panzoom.zoomWithWheel(event);
        }

        break;

      case "close":
        this.fancybox.close();

        break;

      case "slide":
        this.fancybox[event.deltaY < 0 ? "prev" : "next"]();

        break;
    }
  }

  /**
   * Handle `click` and `dblclick` events
   * @param {Object} slide
   * @param {Object} event
   */
  onClick(slide, event) {
    // Check that clicks should be allowed
    if (this.fancybox.state !== "ready") {
      return;
    }

    const panzoom = slide.Panzoom;

    if (
      panzoom &&
      (panzoom.dragPosition.midPoint ||
        panzoom.dragOffset.x !== 0 ||
        panzoom.dragOffset.y !== 0 ||
        panzoom.dragOffset.scale !== 1)
    ) {
      return;
    }

    if (this.fancybox.Carousel.Panzoom.lockAxis) {
      return false;
    }

    const process = (action) => {
      switch (action) {
        case "toggleZoom":
          event.stopPropagation();

          slide.Panzoom && slide.Panzoom.zoomWithClick(event);

          break;

        case "close":
          this.fancybox.close();

          break;

        case "next":
          event.stopPropagation();

          this.fancybox.next();

          break;
      }
    };

    const clickAction = this.fancybox.option("Image.click");
    const dblclickAction = this.fancybox.option("Image.doubleClick");

    if (dblclickAction) {
      if (this.clickTimer) {
        clearTimeout(this.clickTimer);
        this.clickTimer = null;

        process(dblclickAction);
      } else {
        this.clickTimer = setTimeout(() => {
          this.clickTimer = null;
          process(clickAction);
        }, 300);
      }
    } else {
      process(clickAction);
    }
  }

  /**
   * Handle `Carousel.change` event to reset zoom level for any zoomed in/out content
   * and to revel content of the current page
   * @param {Object} fancybox
   * @param {Object} carousel
   */
  onPageChange(fancybox, carousel) {
    const currSlide = fancybox.getSlide();

    carousel.slides.forEach((slide) => {
      if (!slide.Panzoom || slide.state !== "done") {
        return;
      }

      if (slide.index !== currSlide.index) {
        slide.Panzoom.panTo({
          x: 0,
          y: 0,
          scale: 1,
          friction: 0.8,
        });
      }
    });
  }

  attach() {
    this.fancybox.on(this.events);
  }

  detach() {
    this.fancybox.off(this.events);
  }
}

// Expose defaults
Image.defaults = defaults;


/***/ }),

/***/ "./node_modules/@fancyapps/ui/src/Fancybox/plugins/ScrollLock/ScrollLock.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@fancyapps/ui/src/Fancybox/plugins/ScrollLock/ScrollLock.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ScrollLock: () => (/* binding */ ScrollLock)
/* harmony export */ });
/* harmony import */ var _src_shared_utils_isScrollable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../src/shared/utils/isScrollable.js */ "./node_modules/@fancyapps/ui/src/shared/utils/isScrollable.js");


class ScrollLock {
  constructor(fancybox) {
    this.fancybox = fancybox;
    this.viewport = null;

    this.pendingUpdate = null;

    for (const methodName of ["onReady", "onResize", "onTouchstart", "onTouchmove"]) {
      this[methodName] = this[methodName].bind(this);
    }
  }

  /**
   * Process `initLayout` event to attach event listeners and resize viewport if needed
   */
  onReady() {
    //* Support Visual Viewport API
    // https://developer.mozilla.org/en-US/docs/Web/API/Visual_Viewport_API
    const viewport = window.visualViewport;

    if (viewport) {
      this.viewport = viewport;
      this.startY = 0;

      viewport.addEventListener("resize", this.onResize);

      this.updateViewport();
    }

    //* Prevent bouncing while scrolling on mobile devices
    window.addEventListener("touchstart", this.onTouchstart, { passive: false });
    window.addEventListener("touchmove", this.onTouchmove, { passive: false });

    //* Prevent window scrolling with mouse wheel
    window.addEventListener("wheel", this.onWheel, { passive: false });
  }

  /**
   * Handle `resize` event to call `updateViewport`
   */
  onResize() {
    this.updateViewport();
  }

  /**
   * Scale $container proportionally to actually fit inside browser,
   * e.g., disable viewport zooming
   */
  updateViewport() {
    const fancybox = this.fancybox,
      viewport = this.viewport,
      scale = viewport.scale || 1,
      $container = fancybox.$container;

    if (!$container) {
      return;
    }

    let width = "",
      height = "",
      transform = "";

    if (scale - 1 > 0.1) {
      width = `${viewport.width * scale}px`;
      height = `${viewport.height * scale}px`;
      transform = `translate3d(${viewport.offsetLeft}px, ${viewport.offsetTop}px, 0) scale(${1 / scale})`;
    }

    $container.style.width = width;
    $container.style.height = height;
    $container.style.transform = transform;
  }

  /**
   * Handle `touchstart` event to mark drag start position
   * @param {Object} event
   */
  onTouchstart(event) {
    this.startY = event.touches ? event.touches[0].screenY : event.screenY;
  }

  /**
   * Handle `touchmove` event to fix scrolling on mobile devices (iOS)
   * @param {Object} event
   */
  onTouchmove(event) {
    const startY = this.startY;
    const zoom = window.innerWidth / window.document.documentElement.clientWidth;

    if (!event.cancelable) {
      return;
    }

    if (event.touches.length > 1 || zoom !== 1) {
      return;
    }

    const el = (0,_src_shared_utils_isScrollable_js__WEBPACK_IMPORTED_MODULE_0__.isScrollable)(event.composedPath()[0]);

    if (!el) {
      event.preventDefault();
      return;
    }

    const style = window.getComputedStyle(el);
    const height = parseInt(style.getPropertyValue("height"), 10);

    const curY = event.touches ? event.touches[0].screenY : event.screenY;

    const isAtTop = startY <= curY && el.scrollTop === 0;
    const isAtBottom = startY >= curY && el.scrollHeight - el.scrollTop === height;

    if (isAtTop || isAtBottom) {
      event.preventDefault();
    }
  }

  /**
   * Handle `wheel` event
   */
  onWheel(event) {
    if (!(0,_src_shared_utils_isScrollable_js__WEBPACK_IMPORTED_MODULE_0__.isScrollable)(event.composedPath()[0])) {
      event.preventDefault();
    }
  }

  /**
   * Clean everything up
   */
  cleanup() {
    if (this.pendingUpdate) {
      cancelAnimationFrame(this.pendingUpdate);
      this.pendingUpdate = null;
    }

    const viewport = this.viewport;

    if (viewport) {
      viewport.removeEventListener("resize", this.onResize);
      this.viewport = null;
    }

    window.removeEventListener("touchstart", this.onTouchstart, false);
    window.removeEventListener("touchmove", this.onTouchmove, false);

    window.removeEventListener("wheel", this.onWheel, { passive: false });
  }

  attach() {
    this.fancybox.on("initLayout", this.onReady);
  }

  detach() {
    this.fancybox.off("initLayout", this.onReady);

    this.cleanup();
  }
}


/***/ }),

/***/ "./node_modules/@fancyapps/ui/src/Fancybox/plugins/Thumbs/Thumbs.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@fancyapps/ui/src/Fancybox/plugins/Thumbs/Thumbs.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Thumbs: () => (/* binding */ Thumbs)
/* harmony export */ });
/* harmony import */ var _shared_utils_extend_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../shared/utils/extend.js */ "./node_modules/@fancyapps/ui/src/shared/utils/extend.js");
/* harmony import */ var _Carousel_Carousel_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../Carousel/Carousel.js */ "./node_modules/@fancyapps/ui/src/Carousel/Carousel.js");



const defaults = {
  // The minimum number of images in the gallery to display thumbnails
  minSlideCount: 2,

  // Minimum screen height to display thumbnails
  minScreenHeight: 500,

  // Automatically show thumbnails when opened
  autoStart: true,

  // Keyboard shortcut to toggle thumbnail container
  key: "t",

  // Customize Carousel instance
  Carousel: {},

  tpl: `<div class="fancybox__thumb" style="background-image:url('{{src}}')"></div>`,
};

class Thumbs {
  constructor(fancybox) {
    this.fancybox = fancybox;

    this.$container = null;
    this.state = "init";

    for (const methodName of ["onPrepare", "onClosing", "onKeydown"]) {
      this[methodName] = this[methodName].bind(this);
    }

    this.events = {
      prepare: this.onPrepare,
      closing: this.onClosing,
      keydown: this.onKeydown,
    };
  }

  /**
   * Process `prepare` event to build the layout
   */
  onPrepare() {
    // Get slides, skip if the total number is less than the minimum
    const slides = this.getSlides();

    if (slides.length < this.fancybox.option("Thumbs.minSlideCount")) {
      this.state = "disabled";
      return;
    }

    if (
      this.fancybox.option("Thumbs.autoStart") === true &&
      this.fancybox.Carousel.Panzoom.content.height >= this.fancybox.option("Thumbs.minScreenHeight")
    ) {
      this.build();
    }
  }

  /**
   * Process `closing` event to disable all events
   */
  onClosing() {
    if (this.Carousel) {
      this.Carousel.Panzoom.detachEvents();
    }
  }

  /**
   * Process `keydown` event to enable thumbnail list toggling using keyboard key
   * @param {Object} fancybox
   * @param {String} key
   */
  onKeydown(fancybox, key) {
    if (key === fancybox.option("Thumbs.key")) {
      this.toggle();
    }
  }

  /**
   * Build layout and init thumbnail Carousel
   */
  build() {
    if (this.$container) {
      return;
    }

    // Create wrapping element and append to layout
    const $container = document.createElement("div");

    $container.classList.add("fancybox__thumbs");

    this.fancybox.$carousel.parentNode.insertBefore($container, this.fancybox.$carousel.nextSibling);

    // Initialise thumbnail carousel with all slides
    this.Carousel = new _Carousel_Carousel_js__WEBPACK_IMPORTED_MODULE_1__.Carousel(
      $container,
      (0,_shared_utils_extend_js__WEBPACK_IMPORTED_MODULE_0__.extend)(
        true,
        {
          Dots: false,
          Navigation: false,
          Sync: {
            friction: 0,
          },
          infinite: false,
          center: true,
          fill: true,
          dragFree: true,
          slidesPerPage: 1,
          preload: 1,
        },
        this.fancybox.option("Thumbs.Carousel"),
        {
          Sync: {
            target: this.fancybox.Carousel,
          },
          slides: this.getSlides(),
        }
      )
    );

    // Slide carousel on wheel event
    this.Carousel.Panzoom.on("wheel", (panzoom, event) => {
      event.preventDefault();

      this.fancybox[event.deltaY < 0 ? "prev" : "next"]();
    });

    this.$container = $container;

    this.state = "visible";
  }

  /**
   * Process all fancybox slides to get all thumbnail images
   */
  getSlides() {
    const slides = [];

    for (const slide of this.fancybox.items) {
      const thumb = slide.thumb;

      if (thumb) {
        slides.push({
          html: this.fancybox.option("Thumbs.tpl").replace(/\{\{src\}\}/gi, thumb),
          customClass: `has-thumb has-${slide.type || "image"}`,
        });
      }
    }

    return slides;
  }

  /**
   * Toggle visibility of thumbnail list
   * Tip: you can use `Fancybox.getInstance().plugins.Thumbs.toggle()` from anywhere in your code
   */
  toggle() {
    if (this.state === "visible") {
      this.hide();
    } else if (this.state === "hidden") {
      this.show();
    } else {
      this.build();
    }
  }

  /**
   * Show thumbnail list
   */
  show() {
    if (this.state === "hidden") {
      this.$container.style.display = "";

      this.Carousel.Panzoom.attachEvents();

      this.state = "visible";
    }
  }

  /**
   * Hide thumbnail list
   */
  hide() {
    if (this.state === "visible") {
      this.Carousel.Panzoom.detachEvents();

      this.$container.style.display = "none";

      this.state = "hidden";
    }
  }

  /**
   * Reset the state
   */
  cleanup() {
    if (this.Carousel) {
      this.Carousel.destroy();
      this.Carousel = null;
    }

    if (this.$container) {
      this.$container.remove();
      this.$container = null;
    }

    this.state = "init";
  }

  attach() {
    this.fancybox.on(this.events);
  }

  detach() {
    this.fancybox.off(this.events);

    this.cleanup();
  }
}

// Expose defaults
Thumbs.defaults = defaults;


/***/ }),

/***/ "./node_modules/@fancyapps/ui/src/Fancybox/plugins/Toolbar/Toolbar.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@fancyapps/ui/src/Fancybox/plugins/Toolbar/Toolbar.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Toolbar: () => (/* binding */ Toolbar)
/* harmony export */ });
/* harmony import */ var _shared_utils_isPlainObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../shared/utils/isPlainObject.js */ "./node_modules/@fancyapps/ui/src/shared/utils/isPlainObject.js");
/* harmony import */ var _shared_utils_extend_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../shared/utils/extend.js */ "./node_modules/@fancyapps/ui/src/shared/utils/extend.js");
/* harmony import */ var _shared_utils_Fullscreen_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../shared/utils/Fullscreen.js */ "./node_modules/@fancyapps/ui/src/shared/utils/Fullscreen.js");
/* harmony import */ var _shared_utils_Slideshow_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../shared/utils/Slideshow.js */ "./node_modules/@fancyapps/ui/src/shared/utils/Slideshow.js");






const defaults = {
  // What toolbar items to display
  display: [
    "counter",
    //"prev",
    //"next",
    //"download",
    "zoom",
    "slideshow",
    "fullscreen",
    "thumbs",
    "close",
  ],

  // Only create a toolbar item if there is at least one image in the group
  autoEnable: true,

  // Toolbar items; can be links, buttons or `div` elements
  items: {
    counter: {
      position: "left",
      type: "div",
      class: "fancybox__counter",
      html: '<span data-fancybox-index=""></span>&nbsp;/&nbsp;<span data-fancybox-count=""></span>',
      attr: { tabindex: -1 },
    },
    prev: {
      type: "button",
      class: "fancybox__button--prev",
      label: "PREV",
      html: '<svg viewBox="0 0 24 24"><path d="M15 4l-8 8 8 8"/></svg>',
      attr: { "data-fancybox-prev": "" },
    },
    next: {
      type: "button",
      class: "fancybox__button--next",
      label: "NEXT",
      html: '<svg viewBox="0 0 24 24"><path d="M8 4l8 8-8 8"/></svg>',
      attr: { "data-fancybox-next": "" },
    },
    fullscreen: {
      type: "button",
      class: "fancybox__button--fullscreen",
      label: "TOGGLE_FULLSCREEN",
      html: `<svg viewBox="0 0 24 24">
                <g><path d="M3 8 V3h5"></path><path d="M21 8V3h-5"></path><path d="M8 21H3v-5"></path><path d="M16 21h5v-5"></path></g>
                <g><path d="M7 2v5H2M17 2v5h5M2 17h5v5M22 17h-5v5"/></g>
            </svg>`,
      click: function (event) {
        event.preventDefault();

        if (_shared_utils_Fullscreen_js__WEBPACK_IMPORTED_MODULE_2__.Fullscreen.element()) {
          _shared_utils_Fullscreen_js__WEBPACK_IMPORTED_MODULE_2__.Fullscreen.deactivate();
        } else {
          _shared_utils_Fullscreen_js__WEBPACK_IMPORTED_MODULE_2__.Fullscreen.activate(this.fancybox.$container);
        }
      },
    },
    slideshow: {
      type: "button",
      class: "fancybox__button--slideshow",
      label: "TOGGLE_SLIDESHOW",
      html: `<svg viewBox="0 0 24 24">
                <g><path d="M6 4v16"/><path d="M20 12L6 20"/><path d="M20 12L6 4"/></g>
                <g><path d="M7 4v15M17 4v15"/></g>
            </svg>`,
      click: function (event) {
        event.preventDefault();

        this.Slideshow.toggle();
      },
    },
    zoom: {
      type: "button",
      class: "fancybox__button--zoom",
      label: "TOGGLE_ZOOM",
      html: '<svg viewBox="0 0 24 24"><circle cx="10" cy="10" r="7"></circle><path d="M16 16 L21 21"></svg>',
      click: function (event) {
        event.preventDefault();

        const panzoom = this.fancybox.getSlide().Panzoom;

        if (panzoom) {
          panzoom.toggleZoom();
        }
      },
    },
    download: {
      type: "link",
      label: "DOWNLOAD",
      class: "fancybox__button--download",
      html: '<svg viewBox="0 0 24 24"><path d="M12 15V3m0 12l-4-4m4 4l4-4M2 17l.62 2.48A2 2 0 004.56 21h14.88a2 2 0 001.94-1.51L22 17"/></svg>',
      click: function (event) {
        event.stopPropagation();
      },
    },
    thumbs: {
      type: "button",
      label: "TOGGLE_THUMBS",
      class: "fancybox__button--thumbs",
      html: '<svg viewBox="0 0 24 24"><circle cx="4" cy="4" r="1" /><circle cx="12" cy="4" r="1" transform="rotate(90 12 4)"/><circle cx="20" cy="4" r="1" transform="rotate(90 20 4)"/><circle cx="4" cy="12" r="1" transform="rotate(90 4 12)"/><circle cx="12" cy="12" r="1" transform="rotate(90 12 12)"/><circle cx="20" cy="12" r="1" transform="rotate(90 20 12)"/><circle cx="4" cy="20" r="1" transform="rotate(90 4 20)"/><circle cx="12" cy="20" r="1" transform="rotate(90 12 20)"/><circle cx="20" cy="20" r="1" transform="rotate(90 20 20)"/></svg>',
      click: function (event) {
        event.stopPropagation();

        const thumbs = this.fancybox.plugins.Thumbs;

        if (thumbs) {
          thumbs.toggle();
        }
      },
    },
    close: {
      type: "button",
      label: "CLOSE",
      class: "fancybox__button--close",
      html: '<svg viewBox="0 0 24 24"><path d="M20 20L4 4m16 0L4 20"></path></svg>',
      attr: { "data-fancybox-close": "", tabindex: 0 },
    },
  },
};

class Toolbar {
  constructor(fancybox) {
    this.fancybox = fancybox;

    this.$container = null;
    this.state = "init";

    for (const methodName of [
      "onInit",
      "onPrepare",
      "onDone",
      "onKeydown",
      "onClosing",
      "onChange",
      "onSettle",
      "onRefresh",
    ]) {
      this[methodName] = this[methodName].bind(this);
    }

    this.events = {
      init: this.onInit,
      prepare: this.onPrepare,
      done: this.onDone,
      keydown: this.onKeydown,
      closing: this.onClosing,

      // Clear Slideshow when user strts to change current slide
      "Carousel.change": this.onChange,

      // Set timer after carousel changes current slide; deactive if last slide is reached
      "Carousel.settle": this.onSettle,

      // Deactivate Slideshow on user interaction
      "Carousel.Panzoom.touchStart": () => this.onRefresh(),

      "Image.startAnimation": (fancybox, slide) => this.onRefresh(slide),
      "Image.afterUpdate": (fancybox, slide) => this.onRefresh(slide),
    };
  }

  onInit() {
    // Disable self if current group does not contain at least one image
    if (this.fancybox.option("Toolbar.autoEnable")) {
      let hasImage = false;

      for (const item of this.fancybox.items) {
        if (item.type === "image") {
          hasImage = true;
          break;
        }
      }

      if (!hasImage) {
        this.state = "disabled";
        return;
      }
    }

    // Disable the creation of a close button, if one exists in the toolbar
    for (const key of this.fancybox.option("Toolbar.display")) {
      const id = (0,_shared_utils_isPlainObject_js__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(key) ? key.id : key;

      if (id === "close") {
        this.fancybox.options.closeButton = false;

        break;
      }
    }
  }

  onPrepare() {
    const fancybox = this.fancybox;
    // Skip if disabled
    if (this.state !== "init") {
      return;
    }

    this.build();

    this.update();

    this.Slideshow = new _shared_utils_Slideshow_js__WEBPACK_IMPORTED_MODULE_3__.Slideshow(fancybox);

    if (!fancybox.Carousel.prevPage) {
      if (fancybox.option("slideshow.autoStart")) {
        this.Slideshow.activate();
      }

      if (fancybox.option("fullscreen.autoStart") && !_shared_utils_Fullscreen_js__WEBPACK_IMPORTED_MODULE_2__.Fullscreen.element()) {
        try {
          _shared_utils_Fullscreen_js__WEBPACK_IMPORTED_MODULE_2__.Fullscreen.activate(fancybox.$container);
        } catch (error) {}
      }
    }
  }

  onFsChange() {
    window.scrollTo(_shared_utils_Fullscreen_js__WEBPACK_IMPORTED_MODULE_2__.Fullscreen.pageXOffset, _shared_utils_Fullscreen_js__WEBPACK_IMPORTED_MODULE_2__.Fullscreen.pageYOffset);
  }

  onSettle() {
    const fancybox = this.fancybox;
    const slideshow = this.Slideshow;

    if (slideshow && slideshow.isActive()) {
      if (fancybox.getSlide().index === fancybox.Carousel.slides.length - 1 && !fancybox.option("infinite")) {
        slideshow.deactivate();
      } else if (fancybox.getSlide().state === "done") {
        slideshow.setTimer();
      }
    }
  }

  onChange() {
    this.update();

    if (this.Slideshow && this.Slideshow.isActive()) {
      this.Slideshow.clearTimer();
    }
  }

  onDone(fancybox, slide) {
    const slideshow = this.Slideshow;

    if (slide.index === fancybox.getSlide().index) {
      this.update();

      if (slideshow && slideshow.isActive()) {
        if (!fancybox.option("infinite") && slide.index === fancybox.Carousel.slides.length - 1) {
          slideshow.deactivate();
        } else {
          slideshow.setTimer();
        }
      }
    }
  }

  onRefresh(slide) {
    if (!slide || slide.index === this.fancybox.getSlide().index) {
      this.update();

      if (this.Slideshow && this.Slideshow.isActive() && (!slide || slide.state === "done")) {
        this.Slideshow.deactivate();
      }
    }
  }

  onKeydown(fancybox, key, event) {
    if (key === " " && this.Slideshow) {
      this.Slideshow.toggle();

      event.preventDefault();
    }
  }

  onClosing() {
    if (this.Slideshow) {
      this.Slideshow.deactivate();
    }

    document.removeEventListener("fullscreenchange", this.onFsChange);
  }

  /**
   * Create link, button or `div` element for the toolbar
   * @param {Object} obj
   * @returns HTMLElement
   */
  createElement(obj) {
    let $el;

    if (obj.type === "div") {
      $el = document.createElement("div");
    } else {
      $el = document.createElement(obj.type === "link" ? "a" : "button");
      $el.classList.add("carousel__button");
    }

    $el.innerHTML = obj.html;

    $el.setAttribute("tabindex", obj.tabindex || 0);

    if (obj.class) {
      $el.classList.add(...obj.class.split(" "));
    }

    for (const prop in obj.attr) {
      $el.setAttribute(prop, obj.attr[prop]);
    }

    if (obj.label) {
      $el.setAttribute("title", this.fancybox.localize(`{{${obj.label}}}`));
    }

    if (obj.click) {
      $el.addEventListener("click", obj.click.bind(this));
    }

    if (obj.id === "prev") {
      $el.setAttribute("data-fancybox-prev", "");
    }

    if (obj.id === "next") {
      $el.setAttribute("data-fancybox-next", "");
    }

    const $svg = $el.querySelector("svg");

    if ($svg) {
      $svg.setAttribute("role", "img");
      $svg.setAttribute("tabindex", "-1");
      $svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
    }

    return $el;
  }

  /**
   * Create all DOM elements
   */
  build() {
    this.cleanup();

    const all_items = this.fancybox.option("Toolbar.items");
    const all_groups = [
      {
        position: "left",
        items: [],
      },
      {
        position: "center",
        items: [],
      },
      {
        position: "right",
        items: [],
      },
    ];

    const thumbs = this.fancybox.plugins.Thumbs;

    // 1st step - group toolbar elements by position
    for (const key of this.fancybox.option("Toolbar.display")) {
      let id, item;

      if ((0,_shared_utils_isPlainObject_js__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(key)) {
        id = key.id;
        item = (0,_shared_utils_extend_js__WEBPACK_IMPORTED_MODULE_1__.extend)({}, all_items[id], key);
      } else {
        id = key;
        item = all_items[id];
      }

      if (["counter", "next", "prev", "slideshow"].includes(id) && this.fancybox.items.length < 2) {
        continue;
      }

      if (id === "fullscreen") {
        if (!document.fullscreenEnabled || window.fullScreen) {
          continue;
        }

        document.addEventListener("fullscreenchange", this.onFsChange);
      }

      if (id === "thumbs" && (!thumbs || thumbs.state === "disabled")) {
        continue;
      }

      if (!item) {
        continue;
      }

      let position = item.position || "right";

      let group = all_groups.find((obj) => obj.position === position);

      if (group) {
        group.items.push(item);
      }
    }

    // 2st step - create DOM elements
    const $container = document.createElement("div");
    $container.classList.add("fancybox__toolbar");

    for (const group of all_groups) {
      if (group.items.length) {
        const $wrap = document.createElement("div");
        $wrap.classList.add("fancybox__toolbar__items");
        $wrap.classList.add(`fancybox__toolbar__items--${group.position}`);

        for (const obj of group.items) {
          $wrap.appendChild(this.createElement(obj));
        }

        $container.appendChild($wrap);
      }
    }

    // Add toolbar container to DOM
    this.fancybox.$carousel.parentNode.insertBefore($container, this.fancybox.$carousel);

    this.$container = $container;
  }

  /**
   * Update element state depending on index of current slide
   */
  update() {
    const slide = this.fancybox.getSlide();
    const idx = slide.index;
    const cnt = this.fancybox.items.length;

    // Download links
    // ====
    const src = slide.downloadSrc || (slide.type === "image" && !slide.error ? slide.src : null);

    for (const $el of this.fancybox.$container.querySelectorAll("a.fancybox__button--download")) {
      if (src) {
        $el.removeAttribute("disabled");
        $el.removeAttribute("tabindex");

        $el.setAttribute("href", src);
        $el.setAttribute("download", src);
        $el.setAttribute("target", "_blank");
      } else {
        $el.setAttribute("disabled", "");
        $el.setAttribute("tabindex", -1);

        $el.removeAttribute("href");
        $el.removeAttribute("download");
      }
    }

    // Zoom button
    // ===
    const panzoom = slide.Panzoom;
    const canZoom = panzoom && panzoom.option("maxScale") > panzoom.option("baseScale");

    for (const $el of this.fancybox.$container.querySelectorAll(".fancybox__button--zoom")) {
      if (canZoom) {
        $el.removeAttribute("disabled");
      } else {
        $el.setAttribute("disabled", "");
      }
    }

    // Counter
    // ====
    for (const $el of this.fancybox.$container.querySelectorAll("[data-fancybox-index]")) {
      $el.innerHTML = slide.index + 1;
    }

    for (const $el of this.fancybox.$container.querySelectorAll("[data-fancybox-count]")) {
      $el.innerHTML = cnt;
    }

    // Disable previous/next links if gallery is not infinite and has reached start/end
    // ===
    if (!this.fancybox.option("infinite")) {
      for (const $el of this.fancybox.$container.querySelectorAll("[data-fancybox-prev]")) {
        if (idx === 0) {
          $el.setAttribute("disabled", "");
        } else {
          $el.removeAttribute("disabled");
        }
      }

      for (const $el of this.fancybox.$container.querySelectorAll("[data-fancybox-next]")) {
        if (idx === cnt - 1) {
          $el.setAttribute("disabled", "");
        } else {
          $el.removeAttribute("disabled");
        }
      }
    }
  }

  cleanup() {
    if (this.Slideshow && this.Slideshow.isActive()) {
      this.Slideshow.clearTimer();
    }

    if (this.$container) {
      this.$container.remove();
    }

    this.$container = null;
  }

  attach() {
    this.fancybox.on(this.events);
  }

  detach() {
    this.fancybox.off(this.events);

    this.cleanup();
  }
}

// Expose defaults
Toolbar.defaults = defaults;


/***/ }),

/***/ "./node_modules/@fancyapps/ui/src/Fancybox/plugins/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@fancyapps/ui/src/Fancybox/plugins/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Plugins: () => (/* binding */ Plugins)
/* harmony export */ });
/* harmony import */ var _ScrollLock_ScrollLock_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ScrollLock/ScrollLock.js */ "./node_modules/@fancyapps/ui/src/Fancybox/plugins/ScrollLock/ScrollLock.js");
/* harmony import */ var _Thumbs_Thumbs_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Thumbs/Thumbs.js */ "./node_modules/@fancyapps/ui/src/Fancybox/plugins/Thumbs/Thumbs.js");
/* harmony import */ var _Html_Html_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Html/Html.js */ "./node_modules/@fancyapps/ui/src/Fancybox/plugins/Html/Html.js");
/* harmony import */ var _Image_Image_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Image/Image.js */ "./node_modules/@fancyapps/ui/src/Fancybox/plugins/Image/Image.js");
/* harmony import */ var _Hash_Hash_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Hash/Hash.js */ "./node_modules/@fancyapps/ui/src/Fancybox/plugins/Hash/Hash.js");
/* harmony import */ var _Toolbar_Toolbar_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Toolbar/Toolbar.js */ "./node_modules/@fancyapps/ui/src/Fancybox/plugins/Toolbar/Toolbar.js");







const Plugins = {
  ScrollLock: _ScrollLock_ScrollLock_js__WEBPACK_IMPORTED_MODULE_0__.ScrollLock,
  Thumbs: _Thumbs_Thumbs_js__WEBPACK_IMPORTED_MODULE_1__.Thumbs,
  Html: _Html_Html_js__WEBPACK_IMPORTED_MODULE_2__.Html,
  Toolbar: _Toolbar_Toolbar_js__WEBPACK_IMPORTED_MODULE_5__.Toolbar,
  Image: _Image_Image_js__WEBPACK_IMPORTED_MODULE_3__.Image,
  Hash: _Hash_Hash_js__WEBPACK_IMPORTED_MODULE_4__.Hash,
};


/***/ }),

/***/ "./node_modules/@fancyapps/ui/src/Panzoom/Panzoom.js":
/*!***********************************************************!*\
  !*** ./node_modules/@fancyapps/ui/src/Panzoom/Panzoom.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Panzoom: () => (/* binding */ Panzoom)
/* harmony export */ });
/* harmony import */ var _shared_utils_extend_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/utils/extend.js */ "./node_modules/@fancyapps/ui/src/shared/utils/extend.js");
/* harmony import */ var _shared_utils_round_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/utils/round.js */ "./node_modules/@fancyapps/ui/src/shared/utils/round.js");
/* harmony import */ var _shared_utils_isScrollable_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/utils/isScrollable.js */ "./node_modules/@fancyapps/ui/src/shared/utils/isScrollable.js");
/* harmony import */ var _shared_utils_ResizeObserver_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/utils/ResizeObserver.js */ "./node_modules/@fancyapps/ui/src/shared/utils/ResizeObserver.js");
/* harmony import */ var _shared_utils_PointerTracker_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../shared/utils/PointerTracker.js */ "./node_modules/@fancyapps/ui/src/shared/utils/PointerTracker.js");
/* harmony import */ var _shared_utils_getTextNodeFromPoint_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../shared/utils/getTextNodeFromPoint.js */ "./node_modules/@fancyapps/ui/src/shared/utils/getTextNodeFromPoint.js");
/* harmony import */ var _shared_utils_getDimensions_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../shared/utils/getDimensions.js */ "./node_modules/@fancyapps/ui/src/shared/utils/getDimensions.js");
/* harmony import */ var _shared_Base_Base_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../shared/Base/Base.js */ "./node_modules/@fancyapps/ui/src/shared/Base/Base.js");
/* harmony import */ var _plugins_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./plugins/index.js */ "./node_modules/@fancyapps/ui/src/Panzoom/plugins/index.js");















const defaults = {
  // Enable touch guestures
  touch: true,

  // Enable zooming
  zoom: true,

  // Enable pinch gesture to zoom in/out using two fingers
  pinchToZoom: true,

  // Disable dragging if scale level is equal to value of `baseScale` option
  panOnlyZoomed: false,

  // Lock axis while dragging,
  // possible values: false | "x" | "y" | "xy"
  lockAxis: false,

  // * All friction values are inside [0, 1) interval,
  // * where 0 would change instantly, but 0.99 would update extremely slowly

  // Friction while panning/dragging
  friction: 0.64,

  // Friction while decelerating after drag end
  decelFriction: 0.88,

  // Friction while scaling
  zoomFriction: 0.74,

  // Bounciness after hitting the edge
  bounceForce: 0.2,

  // Initial scale level
  baseScale: 1,

  // Minimum scale level
  minScale: 1,

  // Maximum scale level
  maxScale: 2,

  // Default scale step while zooming
  step: 0.5,

  // Allow to select text,
  // if enabled, dragging will be disabled when text selection is detected
  textSelection: false,

  // Add `click` event listener,
  // possible values: true | false | function | "toggleZoom"
  click: "toggleZoom",

  // Add `wheel` event listener,
  // possible values: true | false | function |  "zoom"
  wheel: "zoom",

  // Value for zoom on mouse wheel
  wheelFactor: 42,

  // Number of wheel events after which it should stop preventing default behaviour of mouse wheel
  wheelLimit: 5,

  // Class name added to `$viewport` element to indicate if content is draggable
  draggableClass: "is-draggable",

  // Class name added to `$viewport` element to indicate that user is currently dragging
  draggingClass: "is-dragging",

  // Content will be scaled by this number,
  // this can also be a function which should return a number, for example:
  // ratio: function() { return 1 / (window.devicePixelRatio || 1) }
  ratio: 1,
};

class Panzoom extends _shared_Base_Base_js__WEBPACK_IMPORTED_MODULE_7__.Base {
  /**
   * Panzoom constructor
   * @constructs Panzoom
   * @param {HTMLElement} $viewport Panzoom container
   * @param {Object} [options] Options for Panzoom
   */
  constructor($container, options = {}) {
    super((0,_shared_utils_extend_js__WEBPACK_IMPORTED_MODULE_0__.extend)(true, {}, defaults, options));

    this.state = "init";

    this.$container = $container;

    // Bind event handlers for referencability
    for (const methodName of ["onLoad", "onWheel", "onClick"]) {
      this[methodName] = this[methodName].bind(this);
    }

    this.initLayout();

    this.resetValues();

    this.attachPlugins(Panzoom.Plugins);

    this.trigger("init");

    this.updateMetrics();

    this.attachEvents();

    this.trigger("ready");

    if (this.option("centerOnStart") === false) {
      this.state = "ready";
    } else {
      this.panTo({
        friction: 0,
      });
    }

    $container.__Panzoom = this;
  }

  /**
   * Create references to container, viewport and content elements
   */
  initLayout() {
    const $container = this.$container;

    // Make sure content element exists
    if (!($container instanceof HTMLElement)) {
      throw new Error("Panzoom: Container not found");
    }

    const $content = this.option("content") || $container.querySelector(".panzoom__content");

    // Make sure content element exists
    if (!$content) {
      throw new Error("Panzoom: Content not found");
    }

    this.$content = $content;

    let $viewport = this.option("viewport") || $container.querySelector(".panzoom__viewport");

    if (!$viewport && this.option("wrapInner") !== false) {
      $viewport = document.createElement("div");
      $viewport.classList.add("panzoom__viewport");

      $viewport.append(...$container.childNodes);

      $container.appendChild($viewport);
    }

    this.$viewport = $viewport || $content.parentNode;
  }

  /**
   * Restore instance variables to default values
   */
  resetValues() {
    this.updateRate = this.option("updateRate", /iPhone|iPad|iPod|Android/i.test(navigator.userAgent) ? 250 : 24);

    this.container = {
      width: 0,
      height: 0,
    };

    this.viewport = {
      width: 0,
      height: 0,
    };

    this.content = {
      // Full content dimensions (naturalWidth/naturalHeight for images)
      origWidth: 0,
      origHeight: 0,

      // Current dimensions of the content
      width: 0,
      height: 0,

      // Current position; these values reflect CSS `transform` value
      x: this.option("x", 0),
      y: this.option("y", 0),

      // Current scale; does not reflect CSS `transform` value
      scale: this.option("baseScale"),
    };

    // End values of current pan / zoom animation
    this.transform = {
      x: 0,
      y: 0,
      scale: 1,
    };

    this.resetDragPosition();
  }

  /**
   * Handle `load` event
   * @param {Event} event
   */
  onLoad(event) {
    this.updateMetrics();

    this.panTo({ scale: this.option("baseScale"), friction: 0 });

    this.trigger("load", event);
  }

  /**
   * Handle `click` event
   * @param {Event} event
   */
  onClick(event) {
    if (event.defaultPrevented) {
      return;
    }

    if (document.activeElement && document.activeElement.closest("[contenteditable]")) {
      return;
    }

    // Skip if text is selected
    if (
      this.option("textSelection") &&
      window.getSelection().toString().length &&
      !(event.target && event.target.hasAttribute("data-fancybox-close"))
    ) {
      event.stopPropagation();
      return;
    }

    const rect = this.$content.getClientRects()[0];

    // Check if container has changed position (for example, when current instance is inside another one)
    if (this.state !== "ready") {
      if (
        this.dragPosition.midPoint ||
        Math.abs(rect.top - this.dragStart.rect.top) > 1 ||
        Math.abs(rect.left - this.dragStart.rect.left) > 1
      ) {
        event.preventDefault();
        event.stopPropagation();

        return;
      }
    }

    if (this.trigger("click", event) === false) {
      return;
    }

    if (this.option("zoom") && this.option("click") === "toggleZoom") {
      event.preventDefault();
      event.stopPropagation();

      this.zoomWithClick(event);
    }
  }

  /**
   * Handle `wheel` event
   * @param {Event} event
   */
  onWheel(event) {
    if (this.trigger("wheel", event) === false) {
      return;
    }

    if (this.option("zoom") && this.option("wheel")) {
      this.zoomWithWheel(event);
    }
  }

  /**
   * Change zoom level depending on scroll direction
   * @param {Event} event `wheel` event
   */
  zoomWithWheel(event) {
    if (this.changedDelta === undefined) {
      this.changedDelta = 0;
    }

    const delta = Math.max(-1, Math.min(1, -event.deltaY || -event.deltaX || event.wheelDelta || -event.detail));
    const scale = this.content.scale;

    let newScale = (scale * (100 + delta * this.option("wheelFactor"))) / 100;

    if (
      (delta < 0 && Math.abs(scale - this.option("minScale")) < 0.01) ||
      (delta > 0 && Math.abs(scale - this.option("maxScale")) < 0.01)
    ) {
      this.changedDelta += Math.abs(delta);
      newScale = scale;
    } else {
      this.changedDelta = 0;
      newScale = Math.max(Math.min(newScale, this.option("maxScale")), this.option("minScale"));
    }

    if (this.changedDelta > this.option("wheelLimit")) {
      return;
    }

    event.preventDefault();

    if (newScale === scale) {
      return;
    }

    const rect = this.$content.getBoundingClientRect();

    const x = event.clientX - rect.left;
    const y = event.clientY - rect.top;

    this.zoomTo(newScale, { x, y });
  }

  /**
   * Change zoom level depending on click coordinates
   * @param {Event} event `click` event
   */
  zoomWithClick(event) {
    const rect = this.$content.getClientRects()[0];

    const x = event.clientX - rect.left;
    const y = event.clientY - rect.top;

    this.toggleZoom({ x, y });
  }

  /**
   * Attach load, wheel and click event listeners, initialize `resizeObserver` and `PointerTracker`
   */
  attachEvents() {
    this.$content.addEventListener("load", this.onLoad);

    this.$container.addEventListener("wheel", this.onWheel, { passive: false });
    this.$container.addEventListener("click", this.onClick, { passive: false });

    this.initObserver();

    const pointerTracker = new _shared_utils_PointerTracker_js__WEBPACK_IMPORTED_MODULE_4__.PointerTracker(this.$container, {
      start: (pointer, event) => {
        if (!this.option("touch")) {
          return false;
        }

        if (this.velocity.scale < 0) {
          return false;
        }

        const target = event.composedPath()[0];

        if (!pointerTracker.currentPointers.length) {
          const ignoreClickedElement =
            ["BUTTON", "TEXTAREA", "OPTION", "INPUT", "SELECT", "VIDEO"].indexOf(target.nodeName) !== -1;

          if (ignoreClickedElement) {
            return false;
          }

          // Allow text selection
          if (this.option("textSelection") && (0,_shared_utils_getTextNodeFromPoint_js__WEBPACK_IMPORTED_MODULE_5__.getTextNodeFromPoint)(target, pointer.clientX, pointer.clientY)) {
            return false;
          }
        }

        if ((0,_shared_utils_isScrollable_js__WEBPACK_IMPORTED_MODULE_2__.isScrollable)(target)) {
          return false;
        }

        if (this.trigger("touchStart", event) === false) {
          return false;
        }

        if (event.type === "mousedown") {
          event.preventDefault();
        }

        this.state = "pointerdown";

        this.resetDragPosition();

        this.dragPosition.midPoint = null;
        this.dragPosition.time = Date.now();

        return true;
      },
      move: (previousPointers, currentPointers, event) => {
        if (this.state !== "pointerdown") {
          return;
        }

        if (this.trigger("touchMove", event) === false) {
          event.preventDefault();
          return;
        }

        // Disable touch action if current zoom level is below base level
        if (
          currentPointers.length < 2 &&
          this.option("panOnlyZoomed") === true &&
          this.content.width <= this.viewport.width &&
          this.content.height <= this.viewport.height &&
          this.transform.scale <= this.option("baseScale")
        ) {
          return;
        }

        if (currentPointers.length > 1 && (!this.option("zoom") || this.option("pinchToZoom") === false)) {
          return;
        }

        const prevMidpoint = (0,_shared_utils_PointerTracker_js__WEBPACK_IMPORTED_MODULE_4__.getMidpoint)(previousPointers[0], previousPointers[1]);
        const newMidpoint = (0,_shared_utils_PointerTracker_js__WEBPACK_IMPORTED_MODULE_4__.getMidpoint)(currentPointers[0], currentPointers[1]);

        const panX = newMidpoint.clientX - prevMidpoint.clientX;
        const panY = newMidpoint.clientY - prevMidpoint.clientY;

        const prevDistance = (0,_shared_utils_PointerTracker_js__WEBPACK_IMPORTED_MODULE_4__.getDistance)(previousPointers[0], previousPointers[1]);
        const newDistance = (0,_shared_utils_PointerTracker_js__WEBPACK_IMPORTED_MODULE_4__.getDistance)(currentPointers[0], currentPointers[1]);

        const scaleDiff = prevDistance && newDistance ? newDistance / prevDistance : 1;

        this.dragOffset.x += panX;
        this.dragOffset.y += panY;

        this.dragOffset.scale *= scaleDiff;

        this.dragOffset.time = Date.now() - this.dragPosition.time;

        const axisToLock = this.dragStart.scale === 1 && this.option("lockAxis");

        if (axisToLock && !this.lockAxis) {
          if (Math.abs(this.dragOffset.x) < 6 && Math.abs(this.dragOffset.y) < 6) {
            event.preventDefault();
            return;
          }

          const angle = Math.abs((Math.atan2(this.dragOffset.y, this.dragOffset.x) * 180) / Math.PI);

          this.lockAxis = angle > 45 && angle < 135 ? "y" : "x";
        }

        if (axisToLock !== "xy" && this.lockAxis === "y") {
          return;
        }

        event.preventDefault();
        event.stopPropagation();

        event.stopImmediatePropagation();

        if (this.lockAxis) {
          this.dragOffset[this.lockAxis === "x" ? "y" : "x"] = 0;
        }

        this.$container.classList.add(this.option("draggingClass"));

        if (!(this.transform.scale === this.option("baseScale") && this.lockAxis === "y")) {
          this.dragPosition.x = this.dragStart.x + this.dragOffset.x;
        }

        if (!(this.transform.scale === this.option("baseScale") && this.lockAxis === "x")) {
          this.dragPosition.y = this.dragStart.y + this.dragOffset.y;
        }

        this.dragPosition.scale = this.dragStart.scale * this.dragOffset.scale;

        if (currentPointers.length > 1) {
          const startPoint = (0,_shared_utils_PointerTracker_js__WEBPACK_IMPORTED_MODULE_4__.getMidpoint)(pointerTracker.startPointers[0], pointerTracker.startPointers[1]);

          const xPos = startPoint.clientX - this.dragStart.rect.x;
          const yPos = startPoint.clientY - this.dragStart.rect.y;

          const { deltaX, deltaY } = this.getZoomDelta(this.content.scale * this.dragOffset.scale, xPos, yPos);

          this.dragPosition.x -= deltaX;
          this.dragPosition.y -= deltaY;

          this.dragPosition.midPoint = newMidpoint;
        } else {
          this.setDragResistance();
        }

        // Update final position
        this.transform = {
          x: this.dragPosition.x,
          y: this.dragPosition.y,
          scale: this.dragPosition.scale,
        };

        this.startAnimation();
      },
      end: (pointer, event) => {
        if (this.state !== "pointerdown") {
          return;
        }

        this._dragOffset = { ...this.dragOffset };

        if (pointerTracker.currentPointers.length) {
          this.resetDragPosition();

          return;
        }

        this.state = "decel";
        this.friction = this.option("decelFriction");

        this.recalculateTransform();

        this.$container.classList.remove(this.option("draggingClass"));

        if (this.trigger("touchEnd", event) === false) {
          return;
        }

        if (this.state !== "decel") {
          return;
        }

        // * Check if scaled content past limits

        // Below minimum
        const minScale = this.option("minScale");

        if (this.transform.scale < minScale) {
          this.zoomTo(minScale, { friction: 0.64 });

          return;
        }

        // Exceed maximum
        const maxScale = this.option("maxScale");

        if (this.transform.scale - maxScale > 0.01) {
          const last = this.dragPosition.midPoint || pointer;
          const rect = this.$content.getClientRects()[0];

          this.zoomTo(maxScale, {
            friction: 0.64,
            x: last.clientX - rect.left,
            y: last.clientY - rect.top,
          });

          return;
        }
      },
    });

    this.pointerTracker = pointerTracker;
  }

  initObserver() {
    if (this.resizeObserver) {
      return;
    }

    this.resizeObserver = new _shared_utils_ResizeObserver_js__WEBPACK_IMPORTED_MODULE_3__.ResizeObserver(() => {
      if (this.updateTimer) {
        return;
      }

      this.updateTimer = setTimeout(() => {
        const rect = this.$container.getBoundingClientRect();

        if (!(rect.width && rect.height)) {
          this.updateTimer = null;
          return;
        }

        // Check to see if there are any changes
        if (Math.abs(rect.width - this.container.width) > 1 || Math.abs(rect.height - this.container.height) > 1) {
          if (this.isAnimating()) {
            this.endAnimation(true);
          }

          this.updateMetrics();

          this.panTo({
            x: this.content.x,
            y: this.content.y,
            scale: this.option("baseScale"),
            friction: 0,
          });
        }

        this.updateTimer = null;
      }, this.updateRate);
    });

    this.resizeObserver.observe(this.$container);
  }

  /**
   * Restore drag related variables to default values
   */
  resetDragPosition() {
    this.lockAxis = null;
    this.friction = this.option("friction");

    this.velocity = {
      x: 0,
      y: 0,
      scale: 0,
    };

    const { x, y, scale } = this.content;

    this.dragStart = {
      rect: this.$content.getBoundingClientRect(),
      x,
      y,
      scale,
    };

    this.dragPosition = {
      ...this.dragPosition,
      x,
      y,
      scale,
    };

    this.dragOffset = {
      x: 0,
      y: 0,
      scale: 1,
      time: 0,
    };
  }

  /**
   * Trigger update events before/after resizing content and viewport
   * @param {Boolean} silently Should trigger `afterUpdate` event at the end
   */
  updateMetrics(silently) {
    if (silently !== true) {
      this.trigger("beforeUpdate");
    }

    const $container = this.$container;
    const $content = this.$content;
    const $viewport = this.$viewport;

    const contentIsImage = $content instanceof HTMLImageElement;
    const contentIsZoomable = this.option("zoom");
    const shouldResizeParent = this.option("resizeParent", contentIsZoomable);

    let width = this.option("width");
    let height = this.option("height");

    let origWidth = width || (0,_shared_utils_getDimensions_js__WEBPACK_IMPORTED_MODULE_6__.getFullWidth)($content);
    let origHeight = height || (0,_shared_utils_getDimensions_js__WEBPACK_IMPORTED_MODULE_6__.getFullHeight)($content);

    Object.assign($content.style, {
      width: width ? `${width}px` : "",
      height: height ? `${height}px` : "",
      maxWidth: "",
      maxHeight: "",
    });

    if (shouldResizeParent) {
      Object.assign($viewport.style, { width: "", height: "" });
    }

    const ratio = this.option("ratio");

    origWidth = (0,_shared_utils_round_js__WEBPACK_IMPORTED_MODULE_1__.round)(origWidth * ratio);
    origHeight = (0,_shared_utils_round_js__WEBPACK_IMPORTED_MODULE_1__.round)(origHeight * ratio);

    width = origWidth;
    height = origHeight;

    const contentRect = $content.getBoundingClientRect();
    const viewportRect = $viewport.getBoundingClientRect();

    const containerRect = $viewport == $container ? viewportRect : $container.getBoundingClientRect();

    let viewportWidth = Math.max($viewport.offsetWidth, (0,_shared_utils_round_js__WEBPACK_IMPORTED_MODULE_1__.round)(viewportRect.width));
    let viewportHeight = Math.max($viewport.offsetHeight, (0,_shared_utils_round_js__WEBPACK_IMPORTED_MODULE_1__.round)(viewportRect.height));

    let viewportStyles = window.getComputedStyle($viewport);
    viewportWidth -= parseFloat(viewportStyles.paddingLeft) + parseFloat(viewportStyles.paddingRight);
    viewportHeight -= parseFloat(viewportStyles.paddingTop) + parseFloat(viewportStyles.paddingBottom);

    this.viewport.width = viewportWidth;
    this.viewport.height = viewportHeight;

    if (contentIsZoomable) {
      if (Math.abs(origWidth - contentRect.width) > 0.1 || Math.abs(origHeight - contentRect.height) > 0.1) {
        const rez = (0,_shared_utils_getDimensions_js__WEBPACK_IMPORTED_MODULE_6__.calculateAspectRatioFit)(
          origWidth,
          origHeight,
          Math.min(origWidth, contentRect.width),
          Math.min(origHeight, contentRect.height)
        );

        width = (0,_shared_utils_round_js__WEBPACK_IMPORTED_MODULE_1__.round)(rez.width);
        height = (0,_shared_utils_round_js__WEBPACK_IMPORTED_MODULE_1__.round)(rez.height);
      }

      Object.assign($content.style, {
        width: `${width}px`,
        height: `${height}px`,
        transform: "",
      });
    }

    if (shouldResizeParent) {
      Object.assign($viewport.style, { width: `${width}px`, height: `${height}px` });

      this.viewport = { ...this.viewport, width, height };
    }

    if (contentIsImage && contentIsZoomable && typeof this.options.maxScale !== "function") {
      const maxScale = this.option("maxScale");

      this.options.maxScale = function () {
        return this.content.origWidth > 0 && this.content.fitWidth > 0
          ? this.content.origWidth / this.content.fitWidth
          : maxScale;
      };
    }

    this.content = {
      ...this.content,
      origWidth,
      origHeight,
      fitWidth: width,
      fitHeight: height,
      width,
      height,
      scale: 1,
      isZoomable: contentIsZoomable,
    };

    this.container = { width: containerRect.width, height: containerRect.height };

    if (silently !== true) {
      this.trigger("afterUpdate");
    }
  }

  /**
   * Increase zoom level
   * @param {Number} [step] Zoom ratio; `0.5` would increase scale from 1 to 1.5
   */
  zoomIn(step) {
    this.zoomTo(this.content.scale + (step || this.option("step")));
  }

  /**
   * Decrease zoom level
   * @param {Number} [step] Zoom ratio; `0.5` would decrease scale from 1.5 to 1
   */
  zoomOut(step) {
    this.zoomTo(this.content.scale - (step || this.option("step")));
  }

  /**
   * Toggles zoom level between max and base levels
   * @param {Object} [options] Additional options
   */
  toggleZoom(props = {}) {
    const maxScale = this.option("maxScale");
    const baseScale = this.option("baseScale");

    const scale = this.content.scale > baseScale + (maxScale - baseScale) * 0.5 ? baseScale : maxScale;

    this.zoomTo(scale, props);
  }

  /**
   * Animate to given zoom level
   * @param {Number} scale New zoom level
   * @param {Object} [options] Additional options
   */
  zoomTo(scale = this.option("baseScale"), { x = null, y = null } = {}) {
    scale = Math.max(Math.min(scale, this.option("maxScale")), this.option("minScale"));

    // Adjust zoom position
    const currentScale = (0,_shared_utils_round_js__WEBPACK_IMPORTED_MODULE_1__.round)(this.content.scale / (this.content.width / this.content.fitWidth), 10000000);

    if (x === null) {
      x = this.content.width * currentScale * 0.5;
    }

    if (y === null) {
      y = this.content.height * currentScale * 0.5;
    }

    const { deltaX, deltaY } = this.getZoomDelta(scale, x, y);

    x = this.content.x - deltaX;
    y = this.content.y - deltaY;

    this.panTo({ x, y, scale, friction: this.option("zoomFriction") });
  }

  /**
   * Calculate difference for top/left values if content would scale at given coordinates
   * @param {Number} scale
   * @param {Number} x
   * @param {Number} y
   * @returns {Object}
   */
  getZoomDelta(scale, x = 0, y = 0) {
    const currentWidth = this.content.fitWidth * this.content.scale;
    const currentHeight = this.content.fitHeight * this.content.scale;

    const percentXInCurrentBox = x > 0 && currentWidth ? x / currentWidth : 0;
    const percentYInCurrentBox = y > 0 && currentHeight ? y / currentHeight : 0;

    const nextWidth = this.content.fitWidth * scale;
    const nextHeight = this.content.fitHeight * scale;

    const deltaX = (nextWidth - currentWidth) * percentXInCurrentBox;
    const deltaY = (nextHeight - currentHeight) * percentYInCurrentBox;

    return { deltaX, deltaY };
  }

  /**
   * Animate to given positon and/or zoom level
   * @param {Object} [options] Additional options
   */
  panTo({
    x = this.content.x,
    y = this.content.y,
    scale,
    friction = this.option("friction"),
    ignoreBounds = false,
  } = {}) {
    scale = scale || this.content.scale || 1;

    if (!ignoreBounds) {
      const { boundX, boundY } = this.getBounds(scale);

      if (boundX) {
        x = Math.max(Math.min(x, boundX.to), boundX.from);
      }

      if (boundY) {
        y = Math.max(Math.min(y, boundY.to), boundY.from);
      }
    }

    this.friction = friction;

    this.transform = {
      ...this.transform,
      x,
      y,
      scale,
    };

    if (friction) {
      this.state = "panning";

      this.velocity = {
        x: (1 / this.friction - 1) * (x - this.content.x),
        y: (1 / this.friction - 1) * (y - this.content.y),
        scale: (1 / this.friction - 1) * (scale - this.content.scale),
      };

      this.startAnimation();
    } else {
      this.endAnimation();
    }
  }

  /**
   * Start animation loop
   */
  startAnimation() {
    if (!this.rAF) {
      this.trigger("startAnimation");
    } else {
      cancelAnimationFrame(this.rAF);
    }

    this.rAF = requestAnimationFrame(() => this.animate());
  }

  /**
   * Process animation frame
   */
  animate() {
    this.setEdgeForce();
    this.setDragForce();

    this.velocity.x *= this.friction;
    this.velocity.y *= this.friction;

    this.velocity.scale *= this.friction;

    this.content.x += this.velocity.x;
    this.content.y += this.velocity.y;

    this.content.scale += this.velocity.scale;

    if (this.isAnimating()) {
      this.setTransform();
    } else if (this.state !== "pointerdown") {
      this.endAnimation();

      return;
    }

    this.rAF = requestAnimationFrame(() => this.animate());
  }

  /**
   * Calculate boundaries
   */
  getBounds(scale) {
    let boundX = this.boundX;
    let boundY = this.boundY;

    if (boundX !== undefined && boundY !== undefined) {
      return { boundX, boundY };
    }

    boundX = { from: 0, to: 0 };
    boundY = { from: 0, to: 0 };

    scale = scale || this.transform.scale;

    const width = this.content.fitWidth * scale;
    const height = this.content.fitHeight * scale;

    const viewportWidth = this.viewport.width;
    const viewportHeight = this.viewport.height;

    if (width < viewportWidth) {
      const deltaX = (0,_shared_utils_round_js__WEBPACK_IMPORTED_MODULE_1__.round)((viewportWidth - width) * 0.5);

      boundX.from = deltaX;
      boundX.to = deltaX;
    } else {
      boundX.from = (0,_shared_utils_round_js__WEBPACK_IMPORTED_MODULE_1__.round)(viewportWidth - width);
    }

    if (height < viewportHeight) {
      const deltaY = (viewportHeight - height) * 0.5;

      boundY.from = deltaY;
      boundY.to = deltaY;
    } else {
      boundY.from = (0,_shared_utils_round_js__WEBPACK_IMPORTED_MODULE_1__.round)(viewportHeight - height);
    }

    return { boundX, boundY };
  }

  /**
   * Change animation velocity if boundary is reached
   */
  setEdgeForce() {
    if (this.state !== "decel") {
      return;
    }

    const bounceForce = this.option("bounceForce");

    const { boundX, boundY } = this.getBounds(Math.max(this.transform.scale, this.content.scale));

    let pastLeft, pastRight, pastTop, pastBottom;

    if (boundX) {
      pastLeft = this.content.x < boundX.from;
      pastRight = this.content.x > boundX.to;
    }

    if (boundY) {
      pastTop = this.content.y < boundY.from;
      pastBottom = this.content.y > boundY.to;
    }

    if (pastLeft || pastRight) {
      const bound = pastLeft ? boundX.from : boundX.to;
      const distance = bound - this.content.x;

      let force = distance * bounceForce;

      const restX = this.content.x + (this.velocity.x + force) / this.friction;

      if (restX >= boundX.from && restX <= boundX.to) {
        force += this.velocity.x;
      }

      this.velocity.x = force;

      this.recalculateTransform();
    }

    if (pastTop || pastBottom) {
      const bound = pastTop ? boundY.from : boundY.to;
      const distance = bound - this.content.y;

      let force = distance * bounceForce;

      const restY = this.content.y + (force + this.velocity.y) / this.friction;

      if (restY >= boundY.from && restY <= boundY.to) {
        force += this.velocity.y;
      }

      this.velocity.y = force;

      this.recalculateTransform();
    }
  }

  /**
   * Change dragging position if boundary is reached
   */
  setDragResistance() {
    if (this.state !== "pointerdown") {
      return;
    }

    const { boundX, boundY } = this.getBounds(this.dragPosition.scale);

    let pastLeft, pastRight, pastTop, pastBottom;

    if (boundX) {
      pastLeft = this.dragPosition.x < boundX.from;
      pastRight = this.dragPosition.x > boundX.to;
    }

    if (boundY) {
      pastTop = this.dragPosition.y < boundY.from;
      pastBottom = this.dragPosition.y > boundY.to;
    }

    if ((pastLeft || pastRight) && !(pastLeft && pastRight)) {
      const bound = pastLeft ? boundX.from : boundX.to;
      const distance = bound - this.dragPosition.x;

      this.dragPosition.x = bound - distance * 0.3;
    }

    if ((pastTop || pastBottom) && !(pastTop && pastBottom)) {
      const bound = pastTop ? boundY.from : boundY.to;
      const distance = bound - this.dragPosition.y;

      this.dragPosition.y = bound - distance * 0.3;
    }
  }

  /**
   * Set velocity to move content to drag position
   */
  setDragForce() {
    if (this.state === "pointerdown") {
      this.velocity.x = this.dragPosition.x - this.content.x;
      this.velocity.y = this.dragPosition.y - this.content.y;
      this.velocity.scale = this.dragPosition.scale - this.content.scale;
    }
  }

  /**
   * Update end values based on current velocity and friction;
   */
  recalculateTransform() {
    this.transform.x = this.content.x + this.velocity.x / (1 / this.friction - 1);
    this.transform.y = this.content.y + this.velocity.y / (1 / this.friction - 1);
    this.transform.scale = this.content.scale + this.velocity.scale / (1 / this.friction - 1);
  }

  /**
   * Check if content is currently animating
   * @returns {Boolean}
   */
  isAnimating() {
    return !!(
      this.friction &&
      (Math.abs(this.velocity.x) > 0.05 || Math.abs(this.velocity.y) > 0.05 || Math.abs(this.velocity.scale) > 0.05)
    );
  }

  /**
   * Set content `style.transform` value based on current animation frame
   */
  setTransform(final) {
    let x, y, scale;

    if (final) {
      x = (0,_shared_utils_round_js__WEBPACK_IMPORTED_MODULE_1__.round)(this.transform.x);
      y = (0,_shared_utils_round_js__WEBPACK_IMPORTED_MODULE_1__.round)(this.transform.y);

      scale = this.transform.scale;

      this.content = { ...this.content, x, y, scale };
    } else {
      x = (0,_shared_utils_round_js__WEBPACK_IMPORTED_MODULE_1__.round)(this.content.x);
      y = (0,_shared_utils_round_js__WEBPACK_IMPORTED_MODULE_1__.round)(this.content.y);

      scale = this.content.scale / (this.content.width / this.content.fitWidth);

      this.content = { ...this.content, x, y };
    }

    this.trigger("beforeTransform");

    x = (0,_shared_utils_round_js__WEBPACK_IMPORTED_MODULE_1__.round)(this.content.x);
    y = (0,_shared_utils_round_js__WEBPACK_IMPORTED_MODULE_1__.round)(this.content.y);

    if (final && this.option("zoom")) {
      let width;
      let height;

      width = (0,_shared_utils_round_js__WEBPACK_IMPORTED_MODULE_1__.round)(this.content.fitWidth * scale);
      height = (0,_shared_utils_round_js__WEBPACK_IMPORTED_MODULE_1__.round)(this.content.fitHeight * scale);

      this.content.width = width;
      this.content.height = height;

      this.transform = { ...this.transform, width, height, scale };

      Object.assign(this.$content.style, {
        width: `${width}px`,
        height: `${height}px`,
        maxWidth: "none",
        maxHeight: "none",
        transform: `translate3d(${x}px, ${y}px, 0) scale(1)`,
      });
    } else {
      this.$content.style.transform = `translate3d(${x}px, ${y}px, 0) scale(${scale})`;
    }

    this.trigger("afterTransform");
  }

  /**
   * Stop animation loop
   */
  endAnimation(silently) {
    cancelAnimationFrame(this.rAF);
    this.rAF = null;

    this.velocity = {
      x: 0,
      y: 0,
      scale: 0,
    };

    this.setTransform(true);

    this.state = "ready";

    this.handleCursor();

    if (silently !== true) {
      this.trigger("endAnimation");
    }
  }

  /**
   * Update the class name depending on whether the content is scaled
   */
  handleCursor() {
    const draggableClass = this.option("draggableClass");

    if (!draggableClass || !this.option("touch")) {
      return;
    }

    if (
      this.option("panOnlyZoomed") == true &&
      this.content.width <= this.viewport.width &&
      this.content.height <= this.viewport.height &&
      this.transform.scale <= this.option("baseScale")
    ) {
      this.$container.classList.remove(draggableClass);
    } else {
      this.$container.classList.add(draggableClass);
    }
  }

  /**
   * Remove observation and detach event listeners
   */
  detachEvents() {
    this.$content.removeEventListener("load", this.onLoad);

    this.$container.removeEventListener("wheel", this.onWheel, { passive: false });
    this.$container.removeEventListener("click", this.onClick, { passive: false });

    if (this.pointerTracker) {
      this.pointerTracker.stop();
      this.pointerTracker = null;
    }

    if (this.resizeObserver) {
      this.resizeObserver.disconnect();
      this.resizeObserver = null;
    }
  }

  /**
   * Clean up
   */
  destroy() {
    if (this.state === "destroy") {
      return;
    }

    this.state = "destroy";

    clearTimeout(this.updateTimer);
    this.updateTimer = null;

    cancelAnimationFrame(this.rAF);
    this.rAF = null;

    this.detachEvents();

    this.detachPlugins();

    this.resetDragPosition();
  }
}

// Expose version
Panzoom.version = "__VERSION__";

// Static properties are a recent addition that dont work in all browsers yet
Panzoom.Plugins = _plugins_index_js__WEBPACK_IMPORTED_MODULE_8__.Plugins;


/***/ }),

/***/ "./node_modules/@fancyapps/ui/src/Panzoom/plugins/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@fancyapps/ui/src/Panzoom/plugins/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Plugins: () => (/* binding */ Plugins)
/* harmony export */ });
const Plugins = {};


/***/ }),

/***/ "./node_modules/@fancyapps/ui/src/shared/Base/Base.js":
/*!************************************************************!*\
  !*** ./node_modules/@fancyapps/ui/src/shared/Base/Base.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Base: () => (/* binding */ Base)
/* harmony export */ });
/* harmony import */ var _utils_extend_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/extend.js */ "./node_modules/@fancyapps/ui/src/shared/utils/extend.js");
/* harmony import */ var _utils_resolve_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/resolve.js */ "./node_modules/@fancyapps/ui/src/shared/utils/resolve.js");
/* harmony import */ var _utils_isPlainObject_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/isPlainObject.js */ "./node_modules/@fancyapps/ui/src/shared/utils/isPlainObject.js");




/**
 * Base class, all components inherit from this class
 */
class Base {
  /**
   * Base constructor
   * @param {Object} [options] - Options as `key: value` pairs
   */
  constructor(options = {}) {
    this.options = (0,_utils_extend_js__WEBPACK_IMPORTED_MODULE_0__.extend)(true, {}, options);

    this.plugins = [];
    this.events = {};

    // * Prefill with initial events
    for (const type of ["on", "once"]) {
      for (const args of Object.entries(this.options[type] || {})) {
        this[type](...args);
      }
    }
  }

  /**
   * Retrieve option value by key, supports subkeys
   * @param {String} key Option name
   * @param {*} [fallback] Fallback value for non-existing key
   * @returns {*}
   */
  option(key, fallback, ...rest) {
    // Make sure it is string
    key = String(key);

    let value = (0,_utils_resolve_js__WEBPACK_IMPORTED_MODULE_1__.resolve)(key, this.options);

    // Allow to have functions as options
    if (typeof value === "function") {
      value = value.call(this, this, ...rest);
    }

    return value === undefined ? fallback : value;
  }

  /**
   * Simple l10n support - replaces object keys
   * found in template with corresponding values
   * @param {String} str String containing values to localize
   * @param {Array} params Substitute parameters
   * @returns {String}
   */
  localize(str, params = []) {
    str = String(str).replace(/\{\{(\w+).?(\w+)?\}\}/g, (match, key, subkey) => {
      let rez = "";

      // Plugins have `Plugin.l10n.KEY`
      if (subkey) {
        rez = this.option(`${key[0] + key.toLowerCase().substring(1)}.l10n.${subkey}`);
      } else if (key) {
        rez = this.option(`l10n.${key}`);
      }

      if (!rez) {
        rez = match;
      }

      for (let index = 0; index < params.length; index++) {
        rez = rez.split(params[index][0]).join(params[index][1]);
      }

      return rez;
    });

    str = str.replace(/\{\{(.*)\}\}/, (match, key) => {
      return key;
    });

    return str;
  }

  /**
   * Subscribe to an event
   * @param {String} name
   * @param {Function} callback
   * @returns {Object}
   */
  on(name, callback) {
    if ((0,_utils_isPlainObject_js__WEBPACK_IMPORTED_MODULE_2__.isPlainObject)(name)) {
      for (const args of Object.entries(name)) {
        this.on(...args);
      }

      return this;
    }

    String(name)
      .split(" ")
      .forEach((item) => {
        const listeners = (this.events[item] = this.events[item] || []);

        if (listeners.indexOf(callback) == -1) {
          listeners.push(callback);
        }
      });

    return this;
  }

  /**
   * Subscribe to an event only once
   * @param {String} name
   * @param {Function} callback
   * @returns {Object}
   */
  once(name, callback) {
    if ((0,_utils_isPlainObject_js__WEBPACK_IMPORTED_MODULE_2__.isPlainObject)(name)) {
      for (const args of Object.entries(name)) {
        this.once(...args);
      }

      return this;
    }

    String(name)
      .split(" ")
      .forEach((item) => {
        const listener = (...details) => {
          this.off(item, listener);
          callback.call(this, this, ...details);
        };

        listener._ = callback;

        this.on(item, listener);
      });

    return this;
  }

  /**
   * Unsubscribe event with name and callback
   * @param {String} name
   * @param {Function} callback
   * @returns {Object}
   */
  off(name, callback) {
    if ((0,_utils_isPlainObject_js__WEBPACK_IMPORTED_MODULE_2__.isPlainObject)(name)) {
      for (const args of Object.entries(name)) {
        this.off(...args);
      }

      return;
    }

    name.split(" ").forEach((item) => {
      const listeners = this.events[item];

      if (!listeners || !listeners.length) {
        return this;
      }

      let index = -1;

      for (let i = 0, len = listeners.length; i < len; i++) {
        const listener = listeners[i];

        if (listener && (listener === callback || listener._ === callback)) {
          index = i;
          break;
        }
      }

      if (index != -1) {
        listeners.splice(index, 1);
      }
    });

    return this;
  }

  /**
   * Emit an event.
   * If present, `"*"` handlers are invoked after name-matched handlers.
   * @param {String} name
   * @param  {...any} details
   * @returns {Boolean}
   */
  trigger(name, ...details) {
    for (const listener of [...(this.events[name] || [])].slice()) {
      if (listener && listener.call(this, this, ...details) === false) {
        return false;
      }
    }

    // A wildcard "*" event type
    for (const listener of [...(this.events["*"] || [])].slice()) {
      if (listener && listener.call(this, name, this, ...details) === false) {
        return false;
      }
    }

    return true;
  }

  /**
   * Add given plugins to this instance,
   * this will end up calling `attach` method of each plugin
   * @param {Object} Plugins
   * @returns {Object}
   */
  attachPlugins(plugins) {
    const newPlugins = {};

    for (const [key, Plugin] of Object.entries(plugins || {})) {
      // Check if this plugin is not disabled by option
      if (this.options[key] !== false && !this.plugins[key]) {
        // Populate options with defaults from the plugin
        this.options[key] = (0,_utils_extend_js__WEBPACK_IMPORTED_MODULE_0__.extend)({}, Plugin.defaults || {}, this.options[key]);

        // Initialise plugin
        newPlugins[key] = new Plugin(this);
      }
    }

    for (const [key, plugin] of Object.entries(newPlugins)) {
      plugin.attach(this);
    }

    this.plugins = Object.assign({}, this.plugins, newPlugins);

    return this;
  }

  /**
   * Remove all plugin instances from this instance,
   * this will end up calling `detach` method of each plugin
   * @returns {Object}
   */
  detachPlugins() {
    for (const key in this.plugins) {
      let plugin;

      if ((plugin = this.plugins[key]) && typeof plugin.detach === "function") {
        plugin.detach(this);
      }
    }

    this.plugins = {};

    return this;
  }
}


/***/ }),

/***/ "./node_modules/@fancyapps/ui/src/shared/utils/Fullscreen.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@fancyapps/ui/src/shared/utils/Fullscreen.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Fullscreen: () => (/* binding */ Fullscreen)
/* harmony export */ });
const Fullscreen = {
  pageXOffset: 0,
  pageYOffset: 0,

  element() {
    return document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement;
  },

  activate(element) {
    Fullscreen.pageXOffset = window.pageXOffset;
    Fullscreen.pageYOffset = window.pageYOffset;

    if (element.requestFullscreen) {
      element.requestFullscreen(); // W3C spec
    } else if (element.mozRequestFullScreen) {
      element.mozRequestFullScreen(); // Firefox
    } else if (element.webkitRequestFullscreen) {
      element.webkitRequestFullscreen(); // Safari
    } else if (element.msRequestFullscreen) {
      element.msRequestFullscreen(); // IE/Edge
    }
  },

  deactivate() {
    if (document.exitFullscreen) {
      document.exitFullscreen();
    } else if (document.mozCancelFullScreen) {
      document.mozCancelFullScreen();
    } else if (document.webkitExitFullscreen) {
      document.webkitExitFullscreen();
    }
  },
};


/***/ }),

/***/ "./node_modules/@fancyapps/ui/src/shared/utils/PointerTracker.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@fancyapps/ui/src/shared/utils/PointerTracker.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PointerTracker: () => (/* binding */ PointerTracker),
/* harmony export */   getDistance: () => (/* binding */ getDistance),
/* harmony export */   getMidpoint: () => (/* binding */ getMidpoint)
/* harmony export */ });
class Pointer {
  constructor(nativePointer) {
    this.id = self.Touch && nativePointer instanceof Touch ? nativePointer.identifier : -1;

    this.pageX = nativePointer.pageX;
    this.pageY = nativePointer.pageY;

    this.clientX = nativePointer.clientX;
    this.clientY = nativePointer.clientY;
  }
}

const getDistance = (a, b) => {
  if (!b) {
    return 0;
  }

  return Math.sqrt((b.clientX - a.clientX) ** 2 + (b.clientY - a.clientY) ** 2);
};

const getMidpoint = (a, b) => {
  if (!b) {
    return a;
  }

  return {
    clientX: (a.clientX + b.clientX) / 2,
    clientY: (a.clientY + b.clientY) / 2,
  };
};

const isTouchEvent = (event) => "changedTouches" in event;

class PointerTracker {
  constructor(_element, { start = () => true, move = () => {}, end = () => {} } = {}) {
    this._element = _element;

    this.startPointers = [];
    this.currentPointers = [];

    this._pointerStart = (event) => {
      if (event.buttons > 0 && event.button !== 0) {
        return;
      }

      const pointer = new Pointer(event);

      if (this.currentPointers.some((p) => p.id === pointer.id)) {
        return;
      }

      if (!this._triggerPointerStart(pointer, event)) {
        return;
      }

      window.addEventListener("mousemove", this._move);
      window.addEventListener("mouseup", this._pointerEnd);
    };

    this._touchStart = (event) => {
      for (const touch of Array.from(event.changedTouches || [])) {
        this._triggerPointerStart(new Pointer(touch), event);
      }
    };

    this._move = (event) => {
      const previousPointers = this.currentPointers.slice();
      const changedPointers = isTouchEvent(event)
        ? Array.from(event.changedTouches).map((t) => new Pointer(t))
        : [new Pointer(event)];

      const trackedChangedPointers = [];

      for (const pointer of changedPointers) {
        const index = this.currentPointers.findIndex((p) => p.id === pointer.id);

        if (index < 0) {
          continue;
        }

        trackedChangedPointers.push(pointer);

        this.currentPointers[index] = pointer;
      }

      this._moveCallback(previousPointers, this.currentPointers.slice(), event);
    };

    this._triggerPointerEnd = (pointer, event) => {
      const index = this.currentPointers.findIndex((p) => p.id === pointer.id);

      if (index < 0) {
        return false;
      }

      this.currentPointers.splice(index, 1);
      this.startPointers.splice(index, 1);

      this._endCallback(pointer, event);

      return true;
    };

    this._pointerEnd = (event) => {
      if (event.buttons > 0 && event.button !== 0) {
        return;
      }

      if (!this._triggerPointerEnd(new Pointer(event), event)) {
        return;
      }

      window.removeEventListener("mousemove", this._move, { passive: false });
      window.removeEventListener("mouseup", this._pointerEnd, { passive: false });
    };

    this._touchEnd = (event) => {
      for (const touch of Array.from(event.changedTouches || [])) {
        this._triggerPointerEnd(new Pointer(touch), event);
      }
    };

    this._startCallback = start;
    this._moveCallback = move;
    this._endCallback = end;

    this._element.addEventListener("mousedown", this._pointerStart, { passive: false });
    this._element.addEventListener("touchstart", this._touchStart, { passive: false });
    this._element.addEventListener("touchmove", this._move, { passive: false });
    this._element.addEventListener("touchend", this._touchEnd);
    this._element.addEventListener("touchcancel", this._touchEnd);
  }

  stop() {
    this._element.removeEventListener("mousedown", this._pointerStart, { passive: false });
    this._element.removeEventListener("touchstart", this._touchStart, { passive: false });
    this._element.removeEventListener("touchmove", this._move, { passive: false });
    this._element.removeEventListener("touchend", this._touchEnd);
    this._element.removeEventListener("touchcancel", this._touchEnd);

    window.removeEventListener("mousemove", this._move);
    window.removeEventListener("mouseup", this._pointerEnd);
  }

  _triggerPointerStart(pointer, event) {
    if (!this._startCallback(pointer, event)) {
      return false;
    }

    this.currentPointers.push(pointer);
    this.startPointers.push(pointer);

    return true;
  }
}




/***/ }),

/***/ "./node_modules/@fancyapps/ui/src/shared/utils/ResizeObserver.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@fancyapps/ui/src/shared/utils/ResizeObserver.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ResizeObserver: () => (/* binding */ ResizeObserver)
/* harmony export */ });
/**
 * ResizeObserver Polyfill
 */
const ResizeObserver =
  (typeof window !== "undefined" && window.ResizeObserver) ||
  class {
    constructor(callback) {
      this.observables = [];
      // Array of observed elements that looks like this:
      // [{
      //   el: domNode,
      //   size: {height: x, width: y}
      // }]
      this.boundCheck = this.check.bind(this);
      this.boundCheck();
      this.callback = callback;
    }

    observe(el) {
      if (this.observables.some((observable) => observable.el === el)) {
        return;
      }

      const newObservable = {
        el: el,
        size: {
          height: el.clientHeight,
          width: el.clientWidth,
        },
      };

      this.observables.push(newObservable);
    }

    unobserve(el) {
      this.observables = this.observables.filter((obj) => obj.el !== el);
    }

    disconnect() {
      this.observables = [];
    }

    check() {
      const changedEntries = this.observables
        .filter((obj) => {
          const currentHeight = obj.el.clientHeight;
          const currentWidth = obj.el.clientWidth;
          if (obj.size.height !== currentHeight || obj.size.width !== currentWidth) {
            obj.size.height = currentHeight;
            obj.size.width = currentWidth;
            return true;
          }
        })
        .map((obj) => obj.el);

      if (changedEntries.length > 0) {
        this.callback(changedEntries);
      }

      window.requestAnimationFrame(this.boundCheck);
    }
  };


/***/ }),

/***/ "./node_modules/@fancyapps/ui/src/shared/utils/Slideshow.js":
/*!******************************************************************!*\
  !*** ./node_modules/@fancyapps/ui/src/shared/utils/Slideshow.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Slideshow: () => (/* binding */ Slideshow)
/* harmony export */ });
class Slideshow {
  constructor(fancybox) {
    this.fancybox = fancybox;
    this.active = false;

    this.handleVisibilityChange = this.handleVisibilityChange.bind(this);
  }

  isActive() {
    return this.active;
  }

  setTimer() {
    if (!this.active || this.timer) {
      return;
    }

    const delay = this.fancybox.option("slideshow.delay", 3000);

    this.timer = setTimeout(() => {
      this.timer = null;

      if (
        !this.fancybox.option("infinite") &&
        this.fancybox.getSlide().index === this.fancybox.Carousel.slides.length - 1
      ) {
        this.fancybox.jumpTo(0, { friction: 0 });
      } else {
        this.fancybox.next();
      }
    }, delay);

    let $progress = this.$progress;

    if (!$progress) {
      $progress = document.createElement("div");
      $progress.classList.add("fancybox__progress");

      this.fancybox.$carousel.parentNode.insertBefore($progress, this.fancybox.$carousel);

      this.$progress = $progress;

      $progress.offsetHeight; /* trigger reflow */
    }

    $progress.style.transitionDuration = `${delay}ms`;
    $progress.style.transform = "scaleX(1)";
  }

  clearTimer() {
    clearTimeout(this.timer);
    this.timer = null;

    if (this.$progress) {
      this.$progress.style.transitionDuration = "";
      this.$progress.style.transform = "";

      this.$progress.offsetHeight; /* trigger reflow */
    }
  }

  activate() {
    if (this.active) {
      return;
    }

    this.active = true;
    this.fancybox.$container.classList.add("has-slideshow");

    if (this.fancybox.getSlide().state === "done") {
      this.setTimer();
    }

    document.addEventListener("visibilitychange", this.handleVisibilityChange, false);
  }

  handleVisibilityChange() {
    this.deactivate();
  }

  deactivate() {
    this.active = false;

    this.clearTimer();

    this.fancybox.$container.classList.remove("has-slideshow");

    document.removeEventListener("visibilitychange", this.handleVisibilityChange, false);
  }

  toggle() {
    if (this.active) {
      this.deactivate();
    } else if (this.fancybox.Carousel.slides.length > 1) {
      this.activate();
    }
  }
}


/***/ }),

/***/ "./node_modules/@fancyapps/ui/src/shared/utils/canUseDOM.js":
/*!******************************************************************!*\
  !*** ./node_modules/@fancyapps/ui/src/shared/utils/canUseDOM.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   canUseDOM: () => (/* binding */ canUseDOM)
/* harmony export */ });
/**
 * Detect if rendering from the client or the server
 */
const canUseDOM = !!(typeof window !== "undefined" && window.document && window.document.createElement);


/***/ }),

/***/ "./node_modules/@fancyapps/ui/src/shared/utils/extend.js":
/*!***************************************************************!*\
  !*** ./node_modules/@fancyapps/ui/src/shared/utils/extend.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   extend: () => (/* binding */ extend)
/* harmony export */ });
/* harmony import */ var _isPlainObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isPlainObject.js */ "./node_modules/@fancyapps/ui/src/shared/utils/isPlainObject.js");


/**
 * Merge the contents of two or more objects together into the first object.
 * If passing "true" for first argument, the merge becomes recursive (aka. deep copy).
 * @param  {...any} args
 * @returns {Object}
 */
const extend = (...args) => {
  let deep = false;

  if (typeof args[0] == "boolean") {
    deep = args.shift();
  }

  let result = args[0];

  if (!result || typeof result !== "object") {
    throw new Error("extendee must be an object");
  }

  const extenders = args.slice(1);
  const len = extenders.length;

  for (let i = 0; i < len; i++) {
    const extender = extenders[i];

    for (let key in extender) {
      if (extender.hasOwnProperty(key)) {
        const value = extender[key];

        if (deep && (Array.isArray(value) || (0,_isPlainObject_js__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(value))) {
          const base = Array.isArray(value) ? [] : {};

          result[key] = extend(true, result.hasOwnProperty(key) ? result[key] : base, value);
        } else {
          result[key] = value;
        }
      }
    }
  }

  return result;
};


/***/ }),

/***/ "./node_modules/@fancyapps/ui/src/shared/utils/getDimensions.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@fancyapps/ui/src/shared/utils/getDimensions.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   calculateAspectRatioFit: () => (/* binding */ calculateAspectRatioFit),
/* harmony export */   getFullHeight: () => (/* binding */ getFullHeight),
/* harmony export */   getFullWidth: () => (/* binding */ getFullWidth)
/* harmony export */ });
/**
 * Get actual width of the element, regardless of how much of content is currently visible
 * @param {Element} elem
 * @returns {Integer}
 */
const getFullWidth = (elem) => {
  return Math.max(
    parseFloat(elem.naturalWidth || 0),
    parseFloat((elem.width && elem.width.baseVal && elem.width.baseVal.value) || 0),
    parseFloat(elem.offsetWidth || 0),
    parseFloat(elem.scrollWidth || 0)
  );
};

/**
 * Get actual height of the element, regardless of how much of content is currently visible
 * @param {Element} elem
 * @returns {Integer}
 */
const getFullHeight = (elem) => {
  return Math.max(
    parseFloat(elem.naturalHeight || 0),
    parseFloat((elem.height && elem.height.baseVal && elem.height.baseVal.value) || 0),
    parseFloat(elem.offsetHeight || 0),
    parseFloat(elem.scrollHeight || 0)
  );
};

/**
 * Calculate bounding size to fit dimensions while preserving aspect ratio
 * @param {Number} srcWidth
 * @param {Number} srcHeight
 * @param {Number} maxWidth
 * @param {Number} maxHeight
 * @returns {Object}
 */
const calculateAspectRatioFit = (srcWidth, srcHeight, maxWidth, maxHeight) => {
  const ratio = Math.min(maxWidth / srcWidth || 0, maxHeight / srcHeight);

  return { width: srcWidth * ratio || 0, height: srcHeight * ratio || 0 };
};


/***/ }),

/***/ "./node_modules/@fancyapps/ui/src/shared/utils/getTextNodeFromPoint.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@fancyapps/ui/src/shared/utils/getTextNodeFromPoint.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getTextNodeFromPoint: () => (/* binding */ getTextNodeFromPoint)
/* harmony export */ });
/**
 * Get element child node at the given coordinates
 * @param {Element} HTML element
 * @param {Float|Integer} x
 * @param {Float|Integer} y
 * @returns {Node|Boolean}}
 */
const getTextNodeFromPoint = (element, x, y) => {
  const nodes = element.childNodes;
  const range = document.createRange();

  for (let i = 0; i < nodes.length; i++) {
    const node = nodes[i];

    if (node.nodeType !== Node.TEXT_NODE) {
      continue;
    }

    range.selectNodeContents(node);

    const rect = range.getBoundingClientRect();

    if (x >= rect.left && y >= rect.top && x <= rect.right && y <= rect.bottom) {
      return node;
    }
  }

  return false;
};


/***/ }),

/***/ "./node_modules/@fancyapps/ui/src/shared/utils/isPlainObject.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@fancyapps/ui/src/shared/utils/isPlainObject.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isPlainObject: () => (/* binding */ isPlainObject)
/* harmony export */ });
/**
 * Check to see if an object is a plain object (created using "{}" or "new Object").
 * @param {*} obj Variable of any type
 * @returns {Boolean}
 */
const isPlainObject = (obj) => {
  return (
    // separate from primitives
    typeof obj === "object" &&
    // is obvious
    obj !== null &&
    // separate instances (Array, DOM, ...)
    obj.constructor === Object &&
    // separate build-in like Math
    Object.prototype.toString.call(obj) === "[object Object]"
  );
};


/***/ }),

/***/ "./node_modules/@fancyapps/ui/src/shared/utils/isScrollable.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@fancyapps/ui/src/shared/utils/isScrollable.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   hasScrollbars: () => (/* binding */ hasScrollbars),
/* harmony export */   isScrollable: () => (/* binding */ isScrollable)
/* harmony export */ });
/**
 * Check if  element has scrollable content
 * @param {Node} node
 * @returns {Boolean}
 */
const hasScrollbars = function (node) {
  const overflowY = getComputedStyle(node)["overflow-y"],
    overflowX = getComputedStyle(node)["overflow-x"],
    vertical = (overflowY === "scroll" || overflowY === "auto") && Math.abs(node.scrollHeight - node.clientHeight) > 1,
    horizontal = (overflowX === "scroll" || overflowX === "auto") && Math.abs(node.scrollWidth - node.clientWidth) > 1;

  return vertical || horizontal;
};

/**
 * Check if element or one of the parents is scrollable
 * @param {Node} node  DOM Node element
 * @returns {Boolean}
 */
const isScrollable = function (node) {
  if (!node || !(typeof node === "object" && node instanceof Element) || node === document.body) {
    return false;
  }

  if (node.__Panzoom) {
    return false;
  }

  if (hasScrollbars(node)) {
    return node;
  }

  return isScrollable(node.parentNode);
};


/***/ }),

/***/ "./node_modules/@fancyapps/ui/src/shared/utils/resolve.js":
/*!****************************************************************!*\
  !*** ./node_modules/@fancyapps/ui/src/shared/utils/resolve.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   resolve: () => (/* binding */ resolve)
/* harmony export */ });
/**
 * Access nested JavaScript objects by string path.
 * Example: `resolve("a.b.c", {a:{b:{c:"d"}})` would return `d`
 * @param {String} path
 * @param {Object} obj
 * @returns {*}
 */
const resolve = function (path, obj) {
  return path.split(".").reduce(function (prev, curr) {
    return prev && prev[curr];
  }, obj);
};


/***/ }),

/***/ "./node_modules/@fancyapps/ui/src/shared/utils/round.js":
/*!**************************************************************!*\
  !*** ./node_modules/@fancyapps/ui/src/shared/utils/round.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   round: () => (/* binding */ round)
/* harmony export */ });
/**
 * Round half up; to be more specific and to ensure things like 1.005 round correctly
 * @param {Float} value
 * @param {Integer} precision
 * @returns {Float}
 */
const round = (value, precision = 10000) => {
  value = parseFloat(value) || 0;

  return Math.round((value + Number.EPSILON) * precision) / precision;
};


/***/ }),

/***/ "./node_modules/@fancyapps/ui/src/shared/utils/setFocusOn.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@fancyapps/ui/src/shared/utils/setFocusOn.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FOCUSABLE_ELEMENTS: () => (/* binding */ FOCUSABLE_ELEMENTS),
/* harmony export */   setFocusOn: () => (/* binding */ setFocusOn)
/* harmony export */ });
/* harmony import */ var _canUseDOM_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./canUseDOM.js */ "./node_modules/@fancyapps/ui/src/shared/utils/canUseDOM.js");


let preventScrollSupported = null;

const FOCUSABLE_ELEMENTS = [
  "a[href]",
  "area[href]",
  'input:not([disabled]):not([type="hidden"]):not([aria-hidden])',
  "select:not([disabled]):not([aria-hidden])",
  "textarea:not([disabled]):not([aria-hidden])",
  "button:not([disabled]):not([aria-hidden])",
  "iframe",
  "object",
  "embed",
  "video",
  "audio",
  "[contenteditable]",
  '[tabindex]:not([tabindex^="-"]):not([disabled]):not([aria-hidden])',
];

const setFocusOn = (node) => {
  if (!node || !_canUseDOM_js__WEBPACK_IMPORTED_MODULE_0__.canUseDOM) {
    return;
  }

  if (preventScrollSupported === null) {
    document.createElement("div").focus({
      get preventScroll() {
        preventScrollSupported = true;

        return false;
      },
    });
  }

  try {
    if (node.setActive) {
      // IE/Edge
      node.setActive();
    } else if (preventScrollSupported) {
      // Modern browsers
      node.focus({ preventScroll: true });
    } else {
      // Safari does not support `preventScroll` option
      // https://bugs.webkit.org/show_bug.cgi?id=178583

      // Save position
      const scrollTop = window.pageXOffset || document.body.scrollTop;
      const scrollLeft = window.pageYOffset || document.body.scrollLeft;

      node.focus();

      document.body.scrollTo({
        top: scrollTop,
        left: scrollLeft,
        behavior: "auto",
      });
    }
  } catch (e) {}
};


/***/ }),

/***/ "./node_modules/@fancyapps/ui/src/shared/utils/throttle.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@fancyapps/ui/src/shared/utils/throttle.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   throttle: () => (/* binding */ throttle)
/* harmony export */ });
/**
 * Throttling enforces a maximum number of times a function can be called over time
 * @param {Function} func Callback function
 * @param {Integer} limit Milliseconds
 * @returns {Function}
 */
const throttle = (func, limit) => {
  let lastCall = 0;

  return function (...args) {
    const now = new Date().getTime();

    if (now - lastCall < limit) {
      return;
    }

    lastCall = now;

    return func(...args);
  };
};


/***/ }),

/***/ "./assets/js/custom.js":
/*!*****************************!*\
  !*** ./assets/js/custom.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");
/* provided dependency */ var jQuery = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");
$(document).on('click touchstart', '.getmec label', function (e) {
  console.log("labelclick..");
  $(this).closest(".getmec").find("label").removeClass("active");
  $(this).addClass("active");
  var gid = $(this).attr("id");
  console.log(gid);
  $(this).closest(".getcri").find(".getmecon .getcc").hide();
  $(this).closest(".getcri").find("." + gid).fadeIn(500);
});
if ($(window).width() <= 1024) {
  $(".explore .expaa").click(function () {
    //event.preventDefault();
    // $(".t4s-push-menu-btn").click();
  });
  $('.explore').click(function () {
    console.log("test");
    // $(".msmenu1").hide();
    $('.explore').not(this).find(".msmenu1").hide();
    $(this).find('.msmenu1').fadeToggle(500);
  });
  $(window).click(function () {
    $(".msmenu1").hide();
  });
  $('.explore').click(function (event) {
    event.stopPropagation();
  });
} else {
  $('.explore').mouseenter(function () {
    $(this).find('.msmenu1').fadeIn(500);
  });
  $('.explore').mouseleave(function () {
    $(this).find('.msmenu1').hide();
  }).mouseleave();
}
setTimeout(function () {
  var swiper = new Swiper('.swiper1', {
    // Default parameters
    slidesPerView: 6,
    spaceBetween: 10,
    autoplay: {
      delay: 2000
    },
    // Responsive breakpoints
    breakpoints: {
      // when window width is >= 320px
      320: {
        slidesPerView: 2,
        spaceBetween: 20
      },
      // when window width is >= 480px
      480: {
        slidesPerView: 2,
        spaceBetween: 30
      },
      // when window width is >= 640px
      640: {
        slidesPerView: 6,
        spaceBetween: 40
      }
    }
  });
}, 1000);
jQuery(".accordion_head").on("click", function () {
  jQuery(".accordion_body").is(":visible") && (jQuery(".accordion_body").slideUp(300), jQuery(".plusminus").text("+")), jQuery(this).next(".accordion_body").is(":visible") ? (jQuery(this).next(".accordion_body").slideUp(300), jQuery(this).children(".plusminus").text("+"), jQuery(this).removeClass("active")) : (jQuery(this).next(".accordion_body").slideDown(300), jQuery(this).children(".plusminus").text("-"), jQuery(this).addClass("active"));
});
function get_coll(id) {
  var xx = '{{product.id}}';
  var query = "query MyFirstQuery {\n        site {\n          product(entityId:" + id + "){ \n        \n      metafields(namespace: \"ct_metafields\", keys: [\"colpg\"]) {\n        edges {\n          node {\n            id\n            key\n            value\n          }\n        }\n      }\n      id\n    }\n  }\n      }";
  console.log(xx);
  fetch('/graphql', {
    method: 'POST',
    credentials: 'same-origin',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': 'Bearer {{ settings.storefront_api.token }}' // use auto-generated token
    },
    body: JSON.stringify({
      query: query
    })
  }).then(function (res) {
    return res.json();
  }).then(function (data) {
    (function (data) {
      return data.json();
    });
    console.log(data);
    console.log(data.data.site.product.metafields.edges[0].node.value);
    var edg = data.data.site.product.metafields.edges[0].node.value;
    tt = $.parseJSON(edg);
    var title = tt.bubt;
    var tcolor = tt.bubfc;
    var bcolor = tt.bubbg;
    console.log(this);
  }) // will log JSON result to browser console
  ["catch"](function (error) {
    return console.error(error);
  });
}

/***/ }),

/***/ "./assets/js/theme/cart/shipping-estimator.js":
/*!****************************************************!*\
  !*** ./assets/js/theme/cart/shipping-estimator.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ShippingEstimator)
/* harmony export */ });
/* harmony import */ var _common_state_country__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/state-country */ "./assets/js/theme/common/state-country.js");
/* harmony import */ var _common_nod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/nod */ "./assets/js/theme/common/nod.js");
/* harmony import */ var _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @bigcommerce/stencil-utils */ "./node_modules/@bigcommerce/stencil-utils/src/main.js");
/* harmony import */ var _common_utils_form_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/utils/form-utils */ "./assets/js/theme/common/utils/form-utils.js");
/* harmony import */ var _common_collapsible__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../common/collapsible */ "./assets/js/theme/common/collapsible.js");
/* harmony import */ var _global_modal__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../global/modal */ "./assets/js/theme/global/modal.js");
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");






var ShippingEstimator = /*#__PURE__*/function () {
  function ShippingEstimator($element, shippingErrorMessages) {
    this.$element = $element;
    this.$state = $('[data-field-type="State"]', this.$element);
    this.isEstimatorFormOpened = false;
    this.shippingErrorMessages = shippingErrorMessages;
    this.initFormValidation();
    this.bindStateCountryChange();
    this.bindEstimatorEvents();
  }
  var _proto = ShippingEstimator.prototype;
  _proto.initFormValidation = function initFormValidation() {
    var _this = this;
    var shippingEstimatorAlert = $('.shipping-quotes');
    this.shippingEstimator = 'form[data-shipping-estimator]';
    this.shippingValidator = (0,_common_nod__WEBPACK_IMPORTED_MODULE_1__["default"])({
      submit: this.shippingEstimator + " .shipping-estimate-submit",
      tap: _common_utils_form_utils__WEBPACK_IMPORTED_MODULE_3__.announceInputErrorMessage
    });
    $('.shipping-estimate-submit', this.$element).on('click', function (event) {
      // estimator error messages are being injected in html as a result
      // of user submit; clearing and adding role on submit provides
      // regular announcement of these error messages
      if (shippingEstimatorAlert.attr('role')) {
        shippingEstimatorAlert.removeAttr('role');
      }
      shippingEstimatorAlert.attr('role', 'alert');
      // When switching between countries, the state/region is dynamic
      // Only perform a check for all fields when country has a value
      // Otherwise areAll('valid') will check country for validity
      if ($(_this.shippingEstimator + " select[name=\"shipping-country\"]").val()) {
        _this.shippingValidator.performCheck();
      }
      if (_this.shippingValidator.areAll('valid')) {
        return;
      }
      event.preventDefault();
    });
    this.bindValidation();
    this.bindStateValidation();
    this.bindUPSRates();
  };
  _proto.bindValidation = function bindValidation() {
    this.shippingValidator.add([{
      selector: this.shippingEstimator + " select[name=\"shipping-country\"]",
      validate: function validate(cb, val) {
        var countryId = Number(val);
        var result = countryId !== 0 && !Number.isNaN(countryId);
        cb(result);
      },
      errorMessage: this.shippingErrorMessages.country
    }]);
  };
  _proto.bindStateValidation = function bindStateValidation() {
    var _this2 = this;
    this.shippingValidator.add([{
      selector: $(this.shippingEstimator + " select[name=\"shipping-state\"]"),
      validate: function validate(cb) {
        var result;
        var $ele = $(_this2.shippingEstimator + " select[name=\"shipping-state\"]");
        if ($ele.length) {
          var eleVal = $ele.val();
          result = eleVal && eleVal.length && eleVal !== 'State/province';
        }
        cb(result);
      },
      errorMessage: this.shippingErrorMessages.province
    }]);
  }

  /**
   * Toggle between default shipping and ups shipping rates
   */;
  _proto.bindUPSRates = function bindUPSRates() {
    var UPSRateToggle = '.estimator-form-toggleUPSRate';
    $('body').on('click', UPSRateToggle, function (event) {
      var $estimatorFormUps = $('.estimator-form--ups');
      var $estimatorFormDefault = $('.estimator-form--default');
      event.preventDefault();
      $estimatorFormUps.toggleClass('u-hiddenVisually');
      $estimatorFormDefault.toggleClass('u-hiddenVisually');
    });
  };
  _proto.bindStateCountryChange = function bindStateCountryChange() {
    var _this3 = this;
    var $last;

    // Requests the states for a country with AJAX
    (0,_common_state_country__WEBPACK_IMPORTED_MODULE_0__["default"])(this.$state, this.context, {
      useIdForStates: true
    }, function (err, field) {
      if (err) {
        (0,_global_modal__WEBPACK_IMPORTED_MODULE_5__.showAlertModal)(err);
        throw new Error(err);
      }
      var $field = $(field);
      if (_this3.shippingValidator.getStatus(_this3.$state) !== 'undefined') {
        _this3.shippingValidator.remove(_this3.$state);
      }
      if ($last) {
        _this3.shippingValidator.remove($last);
      }
      if ($field.is('select')) {
        $last = field;
        _this3.bindStateValidation();
      } else {
        $field.attr('placeholder', 'State/province');
        _common_utils_form_utils__WEBPACK_IMPORTED_MODULE_3__.Validators.cleanUpStateValidation(field);
      }

      // When you change a country, you swap the state/province between an input and a select dropdown
      // Not all countries require the province to be filled
      // We have to remove this class when we swap since nod validation doesn't cleanup for us
      $(_this3.shippingEstimator).find('.form-field--success').removeClass('form-field--success');
    });
  };
  _proto.toggleEstimatorFormState = function toggleEstimatorFormState(toggleButton, buttonSelector, $toggleContainer) {
    var changeAttributesOnToggle = function changeAttributesOnToggle(selectorToActivate) {
      $(toggleButton).attr('aria-labelledby', selectorToActivate);
      $(buttonSelector).text($("#" + selectorToActivate).text());
    };
    if (!this.isEstimatorFormOpened) {
      changeAttributesOnToggle('estimator-close');
      $toggleContainer.removeClass('u-hidden');
    } else {
      changeAttributesOnToggle('estimator-add');
      $toggleContainer.addClass('u-hidden');
    }
    this.isEstimatorFormOpened = !this.isEstimatorFormOpened;
  };
  _proto.bindEstimatorEvents = function bindEstimatorEvents() {
    var _this4 = this;
    var $estimatorContainer = $('.shipping-estimator');
    var $estimatorForm = $('.estimator-form');
    (0,_common_collapsible__WEBPACK_IMPORTED_MODULE_4__["default"])();
    $estimatorForm.on('submit', function (event) {
      var params = {
        country_id: $('[name="shipping-country"]', $estimatorForm).val(),
        state_id: $('[name="shipping-state"]', $estimatorForm).val(),
        city: $('[name="shipping-city"]', $estimatorForm).val(),
        zip_code: $('[name="shipping-zip"]', $estimatorForm).val()
      };
      event.preventDefault();
      _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_2__["default"].api.cart.getShippingQuotes(params, 'cart/shipping-quotes', function (err, response) {
        $('.shipping-quotes').html(response.content);

        // bind the select button
        $('.select-shipping-quote').on('click', function (clickEvent) {
          var quoteId = $('.shipping-quote:checked').val();
          clickEvent.preventDefault();
          _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_2__["default"].api.cart.submitShippingQuote(quoteId, function () {
            window.location.reload();
          });
        });
      });
    });
    $('.shipping-estimate-show').on('click', function (event) {
      event.preventDefault();
      _this4.toggleEstimatorFormState(event.currentTarget, '.shipping-estimate-show__btn-name', $estimatorContainer);
    });
  };
  return ShippingEstimator;
}();


/***/ }),

/***/ "./assets/js/theme/common/aria/constants.js":
/*!**************************************************!*\
  !*** ./assets/js/theme/common/aria/constants.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ariaKeyCodes: () => (/* binding */ ariaKeyCodes)
/* harmony export */ });
var ariaKeyCodes = {
  RETURN: 13,
  SPACE: 32,
  LEFT: 37,
  UP: 38,
  RIGHT: 39,
  DOWN: 40
};

/***/ }),

/***/ "./assets/js/theme/common/aria/index.js":
/*!**********************************************!*\
  !*** ./assets/js/theme/common/aria/index.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   initRadioOptions: () => (/* reexport safe */ _radioOptions__WEBPACK_IMPORTED_MODULE_0__["default"])
/* harmony export */ });
/* harmony import */ var _radioOptions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./radioOptions */ "./assets/js/theme/common/aria/radioOptions.js");


/***/ }),

/***/ "./assets/js/theme/common/aria/radioOptions.js":
/*!*****************************************************!*\
  !*** ./assets/js/theme/common/aria/radioOptions.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ "./assets/js/theme/common/aria/constants.js");
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");

var setCheckedRadioItem = function setCheckedRadioItem(itemCollection, itemIdx) {
  itemCollection.each(function (idx, item) {
    var $item = $(item);
    if (idx !== itemIdx) {
      $item.attr('aria-checked', false).prop('checked', false);
      return;
    }
    $item.attr('aria-checked', true).prop('checked', true).focus();
    $item.trigger('change');
  });
};
var calculateTargetItemPosition = function calculateTargetItemPosition(lastItemIdx, currentIdx) {
  switch (true) {
    case currentIdx > lastItemIdx:
      return 0;
    case currentIdx < 0:
      return lastItemIdx;
    default:
      return currentIdx;
  }
};
var handleItemKeyDown = function handleItemKeyDown(itemCollection) {
  return function (e) {
    var keyCode = e.keyCode;
    var itemIdx = itemCollection.index(e.currentTarget);
    var lastCollectionItemIdx = itemCollection.length - 1;
    if (Object.values(_constants__WEBPACK_IMPORTED_MODULE_0__.ariaKeyCodes).includes(keyCode)) {
      e.preventDefault();
      e.stopPropagation();
    }
    switch (keyCode) {
      case _constants__WEBPACK_IMPORTED_MODULE_0__.ariaKeyCodes.LEFT:
      case _constants__WEBPACK_IMPORTED_MODULE_0__.ariaKeyCodes.UP:
        {
          var prevItemIdx = calculateTargetItemPosition(lastCollectionItemIdx, itemIdx - 1);
          itemCollection.get(prevItemIdx).focus();
          setCheckedRadioItem(itemCollection, itemIdx - 1);
          break;
        }
      case _constants__WEBPACK_IMPORTED_MODULE_0__.ariaKeyCodes.RIGHT:
      case _constants__WEBPACK_IMPORTED_MODULE_0__.ariaKeyCodes.DOWN:
        {
          var nextItemIdx = calculateTargetItemPosition(lastCollectionItemIdx, itemIdx + 1);
          itemCollection.get(nextItemIdx).focus();
          setCheckedRadioItem(itemCollection, itemIdx + 1);
          break;
        }
      default:
        break;
    }
  };
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function ($container, itemSelector) {
  var $itemCollection = $container.find(itemSelector);
  $container.on('keydown', itemSelector, handleItemKeyDown($itemCollection));
});

/***/ }),

/***/ "./assets/js/theme/common/carousel/constants.js":
/*!******************************************************!*\
  !*** ./assets/js/theme/common/carousel/constants.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FOCUSABLE_ELEMENTS_SELECTOR: () => (/* binding */ FOCUSABLE_ELEMENTS_SELECTOR)
/* harmony export */ });
var FOCUSABLE_ELEMENTS_SELECTOR = '[href], button, input, textarea, select, details, [contenteditable="true"], [tabindex]';

/***/ }),

/***/ "./assets/js/theme/common/carousel/index.js":
/*!**************************************************!*\
  !*** ./assets/js/theme/common/carousel/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   onSlickCarouselChange: () => (/* binding */ onSlickCarouselChange),
/* harmony export */   onUserCarouselChange: () => (/* binding */ onUserCarouselChange),
/* harmony export */   setCarouselState: () => (/* binding */ setCarouselState)
/* harmony export */ });
/* harmony import */ var slick_carousel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! slick-carousel */ "./node_modules/slick-carousel/slick/slick.min.js");
/* harmony import */ var slick_carousel__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(slick_carousel__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./assets/js/theme/common/carousel/utils/index.js");
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");


var setCarouselState = function setCarouselState(_ref, carouselObj) {
  var delegateTarget = _ref.delegateTarget;
  var carouselObjCurrent = carouselObj || delegateTarget.slick;
  var $slider = carouselObjCurrent.$slider;
  $slider.data('state', (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getActiveSlideIdxAndSlidesQuantity)(carouselObjCurrent));
};
var onUserCarouselChange = function onUserCarouselChange(_ref2, context, $slider) {
  var data = _ref2.data;
  var $activeSlider = $slider || data;
  var $parentContainer = $activeSlider.hasClass('productView-thumbnails') ? $activeSlider.parent('.productView-images') : $activeSlider;
  var _$activeSlider$data = $activeSlider.data('state'),
    activeSlideIdx = _$activeSlider$data.activeSlideIdx,
    slidesQuantity = _$activeSlider$data.slidesQuantity;
  var $carouselContentElement = $('[data-carousel-content-change-message]', $parentContainer);
  var carouselContentAnnounceMessage = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.updateTextWithLiveData)(context.carouselContentAnnounceMessage, activeSlideIdx + 1, slidesQuantity);
  $carouselContentElement.text(carouselContentAnnounceMessage);
};
var onSlickCarouselChange = function onSlickCarouselChange(e, carouselObj, context) {
  var $dots = carouselObj.$dots,
    $slider = carouselObj.$slider,
    $prevArrow = carouselObj.$prevArrow,
    $nextArrow = carouselObj.$nextArrow,
    infinite = carouselObj.options.infinite;
  var _ref3 = $slider.data('state') || (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getActiveSlideIdxAndSlidesQuantity)(carouselObj),
    activeSlideIdx = _ref3.activeSlideIdx,
    slidesQuantity = _ref3.slidesQuantity;
  (0,_utils__WEBPACK_IMPORTED_MODULE_1__.dotsSetup)($dots, activeSlideIdx, slidesQuantity, context);
  (0,_utils__WEBPACK_IMPORTED_MODULE_1__.arrowAriaLabling)($prevArrow, $nextArrow, activeSlideIdx, slidesQuantity, infinite, context.carouselArrowAndDotAriaLabel);
  (0,_utils__WEBPACK_IMPORTED_MODULE_1__.analizeSlides)($slider.find('.slick-slide'));
  (0,_utils__WEBPACK_IMPORTED_MODULE_1__.refreshFocus)($prevArrow, $nextArrow, $dots, $slider, activeSlideIdx, slidesQuantity, infinite);
  $slider.data('state', null);
};
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(context) {
  $('[data-slick]').each(function (idx, carousel) {
    // getting element using find to pass jest test
    var $carousel = $(document).find(carousel);
    $carousel.on('init breakpoint swipe', setCarouselState);
    $carousel.on('click', '.slick-arrow, .slick-dots', setCarouselState);
    $carousel.on('init breakpoint', function (e, carouselObj) {
      return (0,_utils__WEBPACK_IMPORTED_MODULE_1__.activatePlayPauseButton)(e, carouselObj, context);
    });
    $carousel.on('init afterChange', function (e, carouselObj) {
      return onSlickCarouselChange(e, carouselObj, context);
    });
    $carousel.on('click', '.slick-arrow, .slick-dots', $carousel, function (e) {
      return onUserCarouselChange(e, context);
    });
    $carousel.on('swipe', function (e, carouselObj) {
      return onUserCarouselChange(e, context, carouselObj.$slider);
    });
    if ($carousel.hasClass('heroCarousel')) {
      $carousel.on('init afterChange', _utils__WEBPACK_IMPORTED_MODULE_1__.handleImageLoad);
      $carousel.on('swipe', _utils__WEBPACK_IMPORTED_MODULE_1__.handleImageAspectRatio);
      $carousel.on('click', '.slick-arrow, .slick-dots', _utils__WEBPACK_IMPORTED_MODULE_1__.handleImageAspectRatio);

      // Alternative image styling for IE, which doesn't support objectfit
      if (typeof document.documentElement.style.objectFit === 'undefined') {
        $carousel.find('.heroCarousel-slide').each(function (index, slide) {
          $(slide).addClass('compat-object-fit');
        });
      }
    }
    var isMultipleSlides = $carousel.children().length > 1;
    if ($carousel.hasClass('heroCarousel') || $carousel.hasClass('productView-nav-mobile')) {
      var customPaging = isMultipleSlides ? function (slick, index) {
        return '<button data-carousel-dot type="button"><span>' + (index + 1) + '</span><span data-dots-totals>|</span><span>' + slick.slideCount + '</span></button>';
      } : function () {};
      $carousel.slick({
        accessibility: false,
        arrows: isMultipleSlides,
        customPaging: customPaging,
        dots: isMultipleSlides
      });
    } else {
      var _customPaging = isMultipleSlides ? function () {
        return '<button data-carousel-dot type="button"></button>';
      } : function () {};
      $carousel.slick({
        accessibility: false,
        arrows: isMultipleSlides,
        customPaging: _customPaging,
        dots: isMultipleSlides
      });
    }
  });
}

/***/ }),

/***/ "./assets/js/theme/common/carousel/utils/activatePlayPauseButton.js":
/*!**************************************************************************!*\
  !*** ./assets/js/theme/common/carousel/utils/activatePlayPauseButton.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var lodash_throttle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/throttle */ "./node_modules/lodash/throttle.js");
/* harmony import */ var lodash_throttle__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_throttle__WEBPACK_IMPORTED_MODULE_0__);

var PLAY_ACTION = 'slickPlay';
var PAUSE_ACTION = 'slickPause';
var updateButtonLabels = function updateButtonLabels(context) {
  var carouselPlayPauseButtonPlay = context.carouselPlayPauseButtonPlay,
    carouselPlayPauseButtonPause = context.carouselPlayPauseButtonPause,
    carouselPlayPauseButtonAriaPlay = context.carouselPlayPauseButtonAriaPlay,
    carouselPlayPauseButtonAriaPause = context.carouselPlayPauseButtonAriaPause;
  return function ($button, action) {
    $button.text(action === PLAY_ACTION ? carouselPlayPauseButtonPause : carouselPlayPauseButtonPlay).attr('aria-label', action === PLAY_ACTION ? carouselPlayPauseButtonAriaPause : carouselPlayPauseButtonAriaPlay);
  };
};
var updateButtonLabelsWithContext;
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (e, carouselObj, context) {
  var $slider = carouselObj.$slider,
    $dots = carouselObj.$dots,
    speed = carouselObj.options.speed;
  var $playPauseButton = $slider.find('[data-play-pause-button]');
  if ($playPauseButton.length === 0) return;

  // for correct carousel controls focus order
  if ($dots) {
    $playPauseButton.insertBefore($dots);
  } else $slider.append($playPauseButton);
  var _$slider$data = $slider.data('state'),
    slidesQuantity = _$slider$data.slidesQuantity;
  $playPauseButton.css('display', slidesQuantity > 1 ? 'block' : 'none');
  if (e.type === 'init') updateButtonLabelsWithContext = updateButtonLabels(context);
  if (e.type === 'breakpoint') {
    updateButtonLabelsWithContext($playPauseButton, PLAY_ACTION);
    return;
  }
  var onPlayPauseClick = function onPlayPauseClick() {
    var action = carouselObj.paused ? PLAY_ACTION : PAUSE_ACTION;
    $slider.slick(action);
    updateButtonLabelsWithContext($playPauseButton, action);
  };
  $playPauseButton.on('click', lodash_throttle__WEBPACK_IMPORTED_MODULE_0___default()(onPlayPauseClick, speed, {
    trailing: false
  }));
});

/***/ }),

/***/ "./assets/js/theme/common/carousel/utils/analizeSlides.js":
/*!****************************************************************!*\
  !*** ./assets/js/theme/common/carousel/utils/analizeSlides.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ "./assets/js/theme/common/carousel/constants.js");
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function ($slides) {
  $slides.each(function (idx, slide) {
    var $slide = $(slide);
    var tabIndex = $slide.hasClass('slick-active') ? 0 : -1;
    if ($slide.is(_constants__WEBPACK_IMPORTED_MODULE_0__.FOCUSABLE_ELEMENTS_SELECTOR)) $slide.attr('tabindex', tabIndex);
    $slide.find(_constants__WEBPACK_IMPORTED_MODULE_0__.FOCUSABLE_ELEMENTS_SELECTOR).each(function (index, child) {
      $(child).attr('tabindex', tabIndex);
    });
  });
});

/***/ }),

/***/ "./assets/js/theme/common/carousel/utils/arrowAriaLabling.js":
/*!*******************************************************************!*\
  !*** ./assets/js/theme/common/carousel/utils/arrowAriaLabling.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _updateTextWithLiveData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./updateTextWithLiveData */ "./assets/js/theme/common/carousel/utils/updateTextWithLiveData.js");
/* harmony import */ var _tooltipSetup__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tooltipSetup */ "./assets/js/theme/common/carousel/utils/tooltipSetup.js");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function ($prevArrow, $nextArrow, activeSlideIdx, slidesQuantity, isInfinite, ariaLabel) {
  if (slidesQuantity < 2 || !$prevArrow || !$nextArrow) return;
  var activeSlideNumber = activeSlideIdx + 1;
  var prevSlideNumber = activeSlideIdx === 0 ? slidesQuantity : activeSlideNumber - 1;
  var arrowLeftText = (0,_updateTextWithLiveData__WEBPACK_IMPORTED_MODULE_0__["default"])(ariaLabel, prevSlideNumber, slidesQuantity);
  $prevArrow.attr({
    'aria-label': arrowLeftText,
    tabindex: !isInfinite && activeSlideIdx === 0 ? -1 : 0
  });
  (0,_tooltipSetup__WEBPACK_IMPORTED_MODULE_1__["default"])($prevArrow);
  var nextSlideNumber = activeSlideIdx === slidesQuantity - 1 ? 1 : activeSlideNumber + 1;
  var arrowRightText = (0,_updateTextWithLiveData__WEBPACK_IMPORTED_MODULE_0__["default"])(ariaLabel, nextSlideNumber, slidesQuantity);
  $nextArrow.attr({
    'aria-label': arrowRightText,
    tabindex: !isInfinite && activeSlideIdx === slidesQuantity - 1 ? -1 : 0
  });
  (0,_tooltipSetup__WEBPACK_IMPORTED_MODULE_1__["default"])($nextArrow);
});

/***/ }),

/***/ "./assets/js/theme/common/carousel/utils/dotsSetup.js":
/*!************************************************************!*\
  !*** ./assets/js/theme/common/carousel/utils/dotsSetup.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _updateTextWithLiveData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./updateTextWithLiveData */ "./assets/js/theme/common/carousel/utils/updateTextWithLiveData.js");
/* harmony import */ var _tooltipSetup__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tooltipSetup */ "./assets/js/theme/common/carousel/utils/tooltipSetup.js");
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function ($dots, activeSlideIdx, slidesQuantity, _ref) {
  var carouselArrowAndDotAriaLabel = _ref.carouselArrowAndDotAriaLabel,
    carouselActiveDotAriaLabel = _ref.carouselActiveDotAriaLabel;
  if (!$dots) return;
  if (slidesQuantity < 2) {
    $dots.css('display', 'none');
    return;
  }
  $dots.css('display', 'block');
  $dots.children().each(function (idx, dot) {
    var dotLabelText = (0,_updateTextWithLiveData__WEBPACK_IMPORTED_MODULE_0__["default"])(carouselArrowAndDotAriaLabel, idx + 1, slidesQuantity);
    var dotSlideStatusText = idx === activeSlideIdx ? ", " + carouselActiveDotAriaLabel : '';
    var dotAriaLabel = "" + dotLabelText + dotSlideStatusText;
    var $dotButton = $(dot).find('[data-carousel-dot]');
    $(dot).attr('data-index', idx + 1);
    (0,_tooltipSetup__WEBPACK_IMPORTED_MODULE_1__["default"])($dotButton.attr('aria-label', dotAriaLabel));
  });
});

/***/ }),

/***/ "./assets/js/theme/common/carousel/utils/getActiveSlideIdxAndSlidesQuantity.js":
/*!*************************************************************************************!*\
  !*** ./assets/js/theme/common/carousel/utils/getActiveSlideIdxAndSlidesQuantity.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (_ref) {
  var slideCount = _ref.slideCount,
    $slides = _ref.$slides,
    _ref$options = _ref.options,
    slidesToShow = _ref$options.slidesToShow,
    slidesToScroll = _ref$options.slidesToScroll;
  var lastVisibleIdx = $slides.get().reduce(function (acc, curr, idx) {
    if ($(curr).hasClass('slick-active')) return idx;
    return acc;
  }, -1);
  var activeSlideIdx = lastVisibleIdx < slidesToShow ? 0 : Math.ceil((lastVisibleIdx + 1 - slidesToShow) / slidesToScroll);
  var slidesQuantity;
  if (slideCount === 0) {
    slidesQuantity = 0;
  } else if (slideCount <= slidesToShow) {
    slidesQuantity = 1;
  } else slidesQuantity = Math.ceil((slideCount - slidesToShow) / slidesToScroll) + 1;

  // FYI - one slide can contain several card items for product carousel
  return {
    activeSlideIdx: activeSlideIdx,
    slidesQuantity: slidesQuantity
  };
});

/***/ }),

/***/ "./assets/js/theme/common/carousel/utils/getActiveSlideInfo.js":
/*!*********************************************************************!*\
  !*** ./assets/js/theme/common/carousel/utils/getActiveSlideInfo.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (_ref, isAnalyzedDataAttr) {
  var $slider = _ref.$slider;
  var $activeSlide = $slider.find('.slick-current');
  var isAnalyzedSlide = $activeSlide.data(isAnalyzedDataAttr);
  if (isAnalyzedSlide) return {
    isAnalyzedSlide: isAnalyzedSlide
  };
  var $activeSlideImg = $activeSlide.find('.heroCarousel-image');
  var activeSlideImgNode = $activeSlideImg[0];
  return {
    $slider: $slider,
    $activeSlide: $activeSlide,
    $activeSlideImg: $activeSlideImg,
    activeSlideImgNode: activeSlideImgNode
  };
});

/***/ }),

/***/ "./assets/js/theme/common/carousel/utils/handleImageAspectRatio.js":
/*!*************************************************************************!*\
  !*** ./assets/js/theme/common/carousel/utils/handleImageAspectRatio.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _getActiveSlideInfo__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getActiveSlideInfo */ "./assets/js/theme/common/carousel/utils/getActiveSlideInfo.js");
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");

var IMAGE_CLASSES = {
  vertical: 'is-vertical-image-type',
  square: 'is-square-image-type'
};
var IS_ANALYZED_DATA_ATTR = 'image-ratio-analyzed';
var defineAspectRatioClass = function defineAspectRatioClass(imageAspectRatio) {
  switch (true) {
    case imageAspectRatio > 0.8 && imageAspectRatio <= 1.2:
      return IMAGE_CLASSES.square;
    case imageAspectRatio > 1.2:
      return IMAGE_CLASSES.vertical;
    default:
      return '';
  }
};
var setAspectRatioClass = function setAspectRatioClass(imageNode, $slides) {
  if (imageNode.naturalHeight <= 1) return;
  var imageAspectRatio = imageNode.naturalHeight / imageNode.naturalWidth;
  $slides.each(function (idx, slide) {
    return $(slide).addClass(defineAspectRatioClass(imageAspectRatio));
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (_ref, carouselObj) {
  var delegateTarget = _ref.delegateTarget;
  var _getActiveSlideInfo = (0,_getActiveSlideInfo__WEBPACK_IMPORTED_MODULE_0__["default"])(carouselObj || delegateTarget.slick, IS_ANALYZED_DATA_ATTR),
    isAnalyzedSlide = _getActiveSlideInfo.isAnalyzedSlide,
    $slider = _getActiveSlideInfo.$slider,
    $activeSlide = _getActiveSlideInfo.$activeSlide,
    $activeSlideImg = _getActiveSlideInfo.$activeSlideImg,
    activeSlideImgNode = _getActiveSlideInfo.activeSlideImgNode;
  if (isAnalyzedSlide) return;
  var $activeSlideAndClones = $slider.find("[data-hero-slide=" + $activeSlide.data('hero-slide') + "]");
  $activeSlideAndClones.each(function (idx, slide) {
    return $(slide).data(IS_ANALYZED_DATA_ATTR, true);
  });
  if ($activeSlide.find('.heroCarousel-content').length) return;
  if (activeSlideImgNode.complete) {
    if (activeSlideImgNode.naturalHeight === 1) {
      // only base64 image from srcset was loaded
      $activeSlideImg.on('load', function () {
        return setAspectRatioClass(activeSlideImgNode, $activeSlideAndClones);
      });
    } else if (activeSlideImgNode.naturalHeight > 1) {
      setAspectRatioClass(activeSlideImgNode, $activeSlideAndClones);
    }
  } else $activeSlideImg.on('load', function () {
    return setAspectRatioClass(activeSlideImgNode, $activeSlideAndClones);
  });
});

/***/ }),

/***/ "./assets/js/theme/common/carousel/utils/handleImageLoad.js":
/*!******************************************************************!*\
  !*** ./assets/js/theme/common/carousel/utils/handleImageLoad.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_ie_helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/ie-helpers */ "./assets/js/theme/common/utils/ie-helpers.js");
/* harmony import */ var _getActiveSlideInfo__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getActiveSlideInfo */ "./assets/js/theme/common/carousel/utils/getActiveSlideInfo.js");
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");


var IMAGE_ERROR_CLASS = 'is-image-error';
var IS_ANALYZED_DATA_ATTR = 'image-load-analyzed';
var generateImage = function generateImage($slide, $image) {
  $('<img />').on('error', function () {
    return $slide.addClass(IMAGE_ERROR_CLASS);
  }).attr('src', $image.attr('src'));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (e, carouselObj) {
  var _getActiveSlideInfo = (0,_getActiveSlideInfo__WEBPACK_IMPORTED_MODULE_1__["default"])(carouselObj, IS_ANALYZED_DATA_ATTR),
    isAnalyzedSlide = _getActiveSlideInfo.isAnalyzedSlide,
    $activeSlide = _getActiveSlideInfo.$activeSlide,
    $activeSlideImg = _getActiveSlideInfo.$activeSlideImg,
    activeSlideImgNode = _getActiveSlideInfo.activeSlideImgNode;
  if (isAnalyzedSlide) return;
  $activeSlide.data(IS_ANALYZED_DATA_ATTR, true);
  if (activeSlideImgNode.complete) {
    if (activeSlideImgNode.naturalHeight === 0) {
      $activeSlide.addClass(IMAGE_ERROR_CLASS);
    } else if (activeSlideImgNode.naturalHeight === 1) {
      // only base64 image from srcset was loaded
      $activeSlideImg.on('error', function () {
        return $activeSlide.addClass(IMAGE_ERROR_CLASS);
      });
    }
    return;
  }
  if (!$activeSlideImg.attr('src')) {
    $activeSlide.addClass(IMAGE_ERROR_CLASS);
    return;
  }
  if (_utils_ie_helpers__WEBPACK_IMPORTED_MODULE_0__.isBrowserIE) {
    generateImage($activeSlide, $activeSlideImg);
    return;
  }
  $activeSlideImg.on('error', function () {
    return $activeSlide.addClass(IMAGE_ERROR_CLASS);
  });
});

/***/ }),

/***/ "./assets/js/theme/common/carousel/utils/index.js":
/*!********************************************************!*\
  !*** ./assets/js/theme/common/carousel/utils/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   activatePlayPauseButton: () => (/* reexport safe */ _activatePlayPauseButton__WEBPACK_IMPORTED_MODULE_0__["default"]),
/* harmony export */   analizeSlides: () => (/* reexport safe */ _analizeSlides__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   arrowAriaLabling: () => (/* reexport safe */ _arrowAriaLabling__WEBPACK_IMPORTED_MODULE_2__["default"]),
/* harmony export */   dotsSetup: () => (/* reexport safe */ _dotsSetup__WEBPACK_IMPORTED_MODULE_3__["default"]),
/* harmony export */   getActiveSlideIdxAndSlidesQuantity: () => (/* reexport safe */ _getActiveSlideIdxAndSlidesQuantity__WEBPACK_IMPORTED_MODULE_4__["default"]),
/* harmony export */   handleImageAspectRatio: () => (/* reexport safe */ _handleImageAspectRatio__WEBPACK_IMPORTED_MODULE_5__["default"]),
/* harmony export */   handleImageLoad: () => (/* reexport safe */ _handleImageLoad__WEBPACK_IMPORTED_MODULE_6__["default"]),
/* harmony export */   refreshFocus: () => (/* reexport safe */ _refreshFocus__WEBPACK_IMPORTED_MODULE_7__["default"]),
/* harmony export */   updateTextWithLiveData: () => (/* reexport safe */ _updateTextWithLiveData__WEBPACK_IMPORTED_MODULE_8__["default"])
/* harmony export */ });
/* harmony import */ var _activatePlayPauseButton__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./activatePlayPauseButton */ "./assets/js/theme/common/carousel/utils/activatePlayPauseButton.js");
/* harmony import */ var _analizeSlides__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./analizeSlides */ "./assets/js/theme/common/carousel/utils/analizeSlides.js");
/* harmony import */ var _arrowAriaLabling__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./arrowAriaLabling */ "./assets/js/theme/common/carousel/utils/arrowAriaLabling.js");
/* harmony import */ var _dotsSetup__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dotsSetup */ "./assets/js/theme/common/carousel/utils/dotsSetup.js");
/* harmony import */ var _getActiveSlideIdxAndSlidesQuantity__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./getActiveSlideIdxAndSlidesQuantity */ "./assets/js/theme/common/carousel/utils/getActiveSlideIdxAndSlidesQuantity.js");
/* harmony import */ var _handleImageAspectRatio__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./handleImageAspectRatio */ "./assets/js/theme/common/carousel/utils/handleImageAspectRatio.js");
/* harmony import */ var _handleImageLoad__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./handleImageLoad */ "./assets/js/theme/common/carousel/utils/handleImageLoad.js");
/* harmony import */ var _refreshFocus__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./refreshFocus */ "./assets/js/theme/common/carousel/utils/refreshFocus.js");
/* harmony import */ var _updateTextWithLiveData__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./updateTextWithLiveData */ "./assets/js/theme/common/carousel/utils/updateTextWithLiveData.js");










/***/ }),

/***/ "./assets/js/theme/common/carousel/utils/refreshFocus.js":
/*!***************************************************************!*\
  !*** ./assets/js/theme/common/carousel/utils/refreshFocus.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ "./assets/js/theme/common/carousel/constants.js");

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function ($prevArrow, $nextArrow, $dots, $slider, activeSlideIdx, slidesQuantity, isInfinite) {
  if (isInfinite || !$prevArrow || !$nextArrow) return;
  if (activeSlideIdx === 0 && $prevArrow.is(':focus')) {
    $nextArrow.focus();
  } else if (activeSlideIdx === slidesQuantity - 1 && $nextArrow.is(':focus')) {
    if ($dots) {
      $dots.children().first().find('[data-carousel-dot]').focus();
      return;
    }
    var $firstActiveSlide = $slider.find('.slick-active').first();
    if ($firstActiveSlide.is(_constants__WEBPACK_IMPORTED_MODULE_0__.FOCUSABLE_ELEMENTS_SELECTOR)) {
      $firstActiveSlide.focus();
    } else $firstActiveSlide.find(_constants__WEBPACK_IMPORTED_MODULE_0__.FOCUSABLE_ELEMENTS_SELECTOR).first().focus();
  }
});

/***/ }),

/***/ "./assets/js/theme/common/carousel/utils/tooltipSetup.js":
/*!***************************************************************!*\
  !*** ./assets/js/theme/common/carousel/utils/tooltipSetup.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");
var TOOLTIP_DATA_SELECTOR = 'data-carousel-tooltip';
var TOOLTIP_CLASS = 'carousel-tooltip';
var TOOLTIP_NODE = "<span " + TOOLTIP_DATA_SELECTOR + " class=\"" + TOOLTIP_CLASS + "\"></span>";
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function ($node) {
  var $existedTooltip = $node.find("[" + TOOLTIP_DATA_SELECTOR + "]");
  if ($existedTooltip.length) {
    $existedTooltip.attr('aria-label');
  } else {
    var $tooltip = $(TOOLTIP_NODE).attr('aria-label');
    $node.append($tooltip);
  }
});

/***/ }),

/***/ "./assets/js/theme/common/carousel/utils/updateTextWithLiveData.js":
/*!*************************************************************************!*\
  !*** ./assets/js/theme/common/carousel/utils/updateTextWithLiveData.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var SLIDE_NUMBER = '[SLIDE_NUMBER]';
var SLIDES_QUANTITY = '[SLIDES_QUANTITY]';
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (textForChange, slideNumber, slidesQuantity) {
  return textForChange.replace(SLIDE_NUMBER, slideNumber).replace(SLIDES_QUANTITY, slidesQuantity);
});

/***/ }),

/***/ "./assets/js/theme/common/collapsible-group.js":
/*!*****************************************************!*\
  !*** ./assets/js/theme/common/collapsible-group.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CollapsibleGroup: () => (/* binding */ CollapsibleGroup),
/* harmony export */   "default": () => (/* binding */ collapsibleGroupFactory)
/* harmony export */ });
/* harmony import */ var _common_collapsible__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/collapsible */ "./assets/js/theme/common/collapsible.js");
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");

var PLUGIN_KEY = 'collapsible-group';

/*
 * Manage multiple instances of collapsibles. For example, if a collapsible is
 * about to open and there's one already open, close the latter first.
 * @param {jQuery} $component
 */
var CollapsibleGroup = /*#__PURE__*/function () {
  function CollapsibleGroup($component) {
    this.$component = $component;
    this.openCollapsible = null;

    // Auto bind
    this.onCollapsibleOpen = this.onCollapsibleOpen.bind(this);
    this.onCollapsibleClose = this.onCollapsibleClose.bind(this);

    // Listen
    this.bindEvents();
  }
  var _proto = CollapsibleGroup.prototype;
  _proto.close = function close() {
    if (this.openCollapsible && !this.openCollapsible.disabled) {
      this.openCollapsible.close();
    }
  };
  _proto.bindEvents = function bindEvents() {
    this.$component.on(_common_collapsible__WEBPACK_IMPORTED_MODULE_0__.CollapsibleEvents.open, this.onCollapsibleOpen);
    this.$component.on(_common_collapsible__WEBPACK_IMPORTED_MODULE_0__.CollapsibleEvents.close, this.onCollapsibleClose);
  };
  _proto.unbindEvents = function unbindEvents() {
    this.$component.off(_common_collapsible__WEBPACK_IMPORTED_MODULE_0__.CollapsibleEvents.open, this.onCollapsibleOpen);
    this.$component.off(_common_collapsible__WEBPACK_IMPORTED_MODULE_0__.CollapsibleEvents.close, this.onCollapsibleClose);
  };
  _proto.onCollapsibleOpen = function onCollapsibleOpen(event, collapsibleInstance) {
    if (this.openCollapsible && this.openCollapsible.hasCollapsible(collapsibleInstance)) {
      return;
    }
    this.close();
    this.openCollapsible = collapsibleInstance;
  };
  _proto.onCollapsibleClose = function onCollapsibleClose(event, collapsibleInstance) {
    if (this.openCollapsible && this.openCollapsible.hasCollapsible(collapsibleInstance)) {
      return;
    }
    this.openCollapsible = null;
  };
  return CollapsibleGroup;
}();

/**
 * Create new CollapsibleGroup instances
 * @param {string} [selector]
 * @param {Object} [options]
 * @param {Object} [options.$context]
 * @return {Array} array of CollapsibleGroup instances
 */
function collapsibleGroupFactory(selector, options) {
  if (selector === void 0) {
    selector = "[data-" + PLUGIN_KEY + "]";
  }
  if (options === void 0) {
    options = {};
  }
  var $groups = $(selector, options.$context);
  var instanceKey = PLUGIN_KEY + "Instance";
  return $groups.map(function (index, element) {
    var $group = $(element);
    var cachedGroup = $group.data(instanceKey);
    if (cachedGroup instanceof CollapsibleGroup) {
      return cachedGroup;
    }
    var group = new CollapsibleGroup($group);
    $group.data(instanceKey, group);
    return group;
  }).toArray();
}

/***/ }),

/***/ "./assets/js/theme/common/collapsible.js":
/*!***********************************************!*\
  !*** ./assets/js/theme/common/collapsible.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Collapsible: () => (/* binding */ Collapsible),
/* harmony export */   CollapsibleEvents: () => (/* binding */ CollapsibleEvents),
/* harmony export */   "default": () => (/* binding */ collapsibleFactory)
/* harmony export */ });
/* harmony import */ var lodash_extend__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/extend */ "./node_modules/lodash/extend.js");
/* harmony import */ var lodash_extend__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_extend__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _media_query_list__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./media-query-list */ "./assets/js/theme/common/media-query-list.js");
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");

function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }

var PLUGIN_KEY = 'collapsible';
var CollapsibleEvents = {
  open: 'open.collapsible',
  close: 'close.collapsible',
  toggle: 'toggle.collapsible',
  click: 'click.collapsible'
};
var CollapsibleState = {
  closed: 'closed',
  open: 'open'
};
function prependHash(id) {
  if (id && id.indexOf('#') === 0) {
    return id;
  }
  return "#" + id;
}
function optionsFromData($element) {
  return {
    disabledBreakpoint: $element.data(PLUGIN_KEY + "DisabledBreakpoint"),
    disabledState: $element.data(PLUGIN_KEY + "DisabledState"),
    enabledState: $element.data(PLUGIN_KEY + "EnabledState"),
    openClassName: $element.data(PLUGIN_KEY + "OpenClassName")
  };
}

/**
 * Collapse/Expand toggle
 */
var Collapsible = /*#__PURE__*/function () {
  /**
   * @param {jQuery} $toggle - Trigger button
   * @param {jQuery} $target - Content to collapse / expand
   * @param {Object} [options] - Configurable options
   * @param {Object} [options.$context]
   * @param {String} [options.disabledBreakpoint]
   * @param {Object} [options.disabledState]
   * @param {Object} [options.enabledState]
   * @param {String} [options.openClassName]
   * @example
   *
   * <button id="#more">Collapse</button>
   * <div id="content">...</div>
   *
   * new Collapsible($('#more'), $('#content'));
   */
  function Collapsible($toggle, $target, _temp) {
    var _ref = _temp === void 0 ? {} : _temp,
      disabledBreakpoint = _ref.disabledBreakpoint,
      disabledState = _ref.disabledState,
      enabledState = _ref.enabledState,
      _ref$openClassName = _ref.openClassName,
      openClassName = _ref$openClassName === void 0 ? 'is-open' : _ref$openClassName;
    this.$toggle = $toggle;
    this.$target = $target;
    this.targetId = $target.attr('id');
    this.openClassName = openClassName;
    this.disabledState = disabledState;
    this.enabledState = enabledState;
    if (disabledBreakpoint) {
      this.disabledMediaQueryList = (0,_media_query_list__WEBPACK_IMPORTED_MODULE_1__["default"])(disabledBreakpoint);
    }
    if (this.disabledMediaQueryList) {
      this.disabled = this.disabledMediaQueryList.matches;
    } else {
      this.disabled = false;
    }

    // Auto-bind
    this.onClicked = this.onClicked.bind(this);
    this.onDisabledMediaQueryListMatch = this.onDisabledMediaQueryListMatch.bind(this);

    // Assign DOM attributes
    this.$target.attr('aria-hidden', this.isCollapsed);
    this.$toggle.attr('aria-label', this._getToggleAriaLabelText($toggle)).attr('aria-controls', $target.attr('id')).attr('aria-expanded', this.isOpen);

    // Listen
    this.bindEvents();
  }
  var _proto = Collapsible.prototype;
  _proto._getToggleAriaLabelText = function _getToggleAriaLabelText($toggle) {
    var $textToggleChildren = $toggle.children().filter(function (__, child) {
      return $(child).text().trim();
    });
    var $ariaLabelTarget = $textToggleChildren.length ? $textToggleChildren.first() : $toggle;
    return $($ariaLabelTarget).text().trim();
  };
  _proto.open = function open(_temp2) {
    var _ref2 = _temp2 === void 0 ? {} : _temp2,
      _ref2$notify = _ref2.notify,
      notify = _ref2$notify === void 0 ? true : _ref2$notify;
    this.$toggle.addClass(this.openClassName).attr('aria-expanded', true);
    this.$target.addClass(this.openClassName).attr('aria-hidden', false);
    if (notify) {
      this.$toggle.trigger(CollapsibleEvents.open, [this]);
      this.$toggle.trigger(CollapsibleEvents.toggle, [this]);
    }
  };
  _proto.close = function close(_temp3) {
    var _ref3 = _temp3 === void 0 ? {} : _temp3,
      _ref3$notify = _ref3.notify,
      notify = _ref3$notify === void 0 ? true : _ref3$notify;
    this.$toggle.removeClass(this.openClassName).attr('aria-expanded', false);
    this.$target.removeClass(this.openClassName).attr('aria-hidden', true);
    if (notify) {
      this.$toggle.trigger(CollapsibleEvents.close, [this]);
      this.$toggle.trigger(CollapsibleEvents.toggle, [this]);
    }
  };
  _proto.toggle = function toggle() {
    if (this.isCollapsed) {
      this.open();
    } else {
      this.close();
    }
  };
  _proto.toggleByState = function toggleByState(state) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    switch (state) {
      case CollapsibleState.open:
        return this.open.apply(this, args);
      case CollapsibleState.closed:
        return this.close.apply(this, args);
      default:
        return undefined;
    }
  };
  _proto.hasCollapsible = function hasCollapsible(collapsibleInstance) {
    return $.contains(this.$target.get(0), collapsibleInstance.$target.get(0));
  };
  _proto.bindEvents = function bindEvents() {
    this.$toggle.on(CollapsibleEvents.click, this.onClicked);
    if (this.disabledMediaQueryList && this.disabledMediaQueryList.addListener) {
      this.disabledMediaQueryList.addListener(this.onDisabledMediaQueryListMatch);
    }
  };
  _proto.unbindEvents = function unbindEvents() {
    this.$toggle.off(CollapsibleEvents.click, this.onClicked);
    if (this.disabledMediaQueryList && this.disabledMediaQueryList.removeListener) {
      this.disabledMediaQueryList.removeListener(this.onDisabledMediaQueryListMatch);
    }
  };
  _proto.onClicked = function onClicked(event) {
    if (this.disabled) {
      return;
    }
    event.preventDefault();
    this.toggle();
  };
  _proto.onDisabledMediaQueryListMatch = function onDisabledMediaQueryListMatch(media) {
    this.disabled = media.matches;
  };
  return _createClass(Collapsible, [{
    key: "isCollapsed",
    get: function get() {
      return this.$target.is(':hidden') && !this.$target.hasClass(this.openClassName);
    }
  }, {
    key: "isOpen",
    get: function get() {
      return !this.isCollapsed;
    }
  }, {
    key: "disabled",
    get: function get() {
      return this._disabled;
    },
    set: function set(disabled) {
      this._disabled = disabled;
      if (disabled) {
        this.toggleByState(this.disabledState);
      } else {
        this.toggleByState(this.enabledState);
      }
    }
  }]);
}();

/**
 * Convenience method for constructing Collapsible instance
 *
 * @param {string} [selector]
 * @param {Object} [overrideOptions]
 * @param {Object} [overrideOptions.$context]
 * @param {String} [overrideOptions.disabledBreakpoint]
 * @param {Object} [overrideOptions.disabledState]
 * @param {Object} [overrideOptions.enabledState]
 * @param {String} [overrideOptions.openClassName]
 * @return {Array} array of Collapsible instances
 *
 * @example
 * <a href="#content" data-collapsible>Collapse</a>
 * <div id="content">...</div>
 *
 * collapsibleFactory();
 */
function collapsibleFactory(selector, overrideOptions) {
  if (selector === void 0) {
    selector = "[data-" + PLUGIN_KEY + "]";
  }
  if (overrideOptions === void 0) {
    overrideOptions = {};
  }
  var $collapsibles = $(selector, overrideOptions.$context);
  return $collapsibles.map(function (index, element) {
    var $toggle = $(element);
    var instanceKey = PLUGIN_KEY + "Instance";
    var cachedCollapsible = $toggle.data(instanceKey);
    if (cachedCollapsible instanceof Collapsible) {
      return cachedCollapsible;
    }
    var targetId = prependHash($toggle.data(PLUGIN_KEY) || $toggle.data(PLUGIN_KEY + "Target") || $toggle.attr('href'));
    var options = lodash_extend__WEBPACK_IMPORTED_MODULE_0___default()(optionsFromData($toggle), overrideOptions);
    var collapsible = new Collapsible($toggle, $(targetId, overrideOptions.$context), options);
    $toggle.data(instanceKey, collapsible);
    return collapsible;
  }).toArray();
}

/***/ }),

/***/ "./assets/js/theme/common/gift-certificate-validator.js":
/*!**************************************************************!*\
  !*** ./assets/js/theme/common/gift-certificate-validator.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(cert) {
  if (typeof cert !== 'string' || cert.length === 0) {
    return false;
  }

  // Add any custom gift certificate validation logic here
  return true;
}

/***/ }),

/***/ "./assets/js/theme/common/media-query-list.js":
/*!****************************************************!*\
  !*** ./assets/js/theme/common/media-query-list.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ mediaQueryListFactory)
/* harmony export */ });
/*
 * Remember to update /assets/scss/settings/global/screensizes/screensizes.scss
 * if you decide to change breakpoint values
 */
var breakpointSizes = {
  large: 1261,
  medium: 801,
  small: 551
};

/**
 * Create MediaQueryList using breakpoint name
 * @param {string} breakpointName
 * @return {MediaQueryList|null}
 */
function mediaQueryListFactory(breakpointName) {
  if (!breakpointName || !window.matchMedia) {
    return null;
  }
  var breakpoint = breakpointSizes[breakpointName];
  var mediaQuery = "(min-width: " + breakpoint + "px)";
  var mediaQueryList = window.matchMedia(mediaQuery);
  return mediaQueryList;
}

/***/ }),

/***/ "./assets/js/theme/common/models/forms.js":
/*!************************************************!*\
  !*** ./assets/js/theme/common/models/forms.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var forms = {
  email: function email(value) {
    var re = /^\S+@\S+\.\S+/;
    return re.test(value);
  },
  /**
   * Validates a password field
   * @param value
   * @returns {boolean}
   */
  password: function password(value) {
    return this.notEmpty(value);
  },
  /**
   * validates if a field is empty
   * @param value
   * @returns {boolean}
   *
   */
  notEmpty: function notEmpty(value) {
    return value.length > 0;
  },
  /**
   * validates a field like product quantity
   * @param value
   * @returns {boolean}
   *
   */
  numbersOnly: function numbersOnly(value) {
    var re = /^\d+$/;
    return re.test(value);
  },
  /**
   * validates increase in value does not exceed max
   * @param {number} value
   * @param {number} max
   * @returns {number}
   *
   */
  validateIncreaseAgainstMaxBoundary: function validateIncreaseAgainstMaxBoundary(value, max) {
    var raise = value + 1;
    if (!max || raise <= max) return raise;
    return value;
  },
  /**
   * validates decrease in value does not fall below min
   * @param {number} value
   * @param {number} min
   * @returns {number}
   *
   */
  validateDecreaseAgainstMinBoundary: function validateDecreaseAgainstMinBoundary(value, min) {
    var decline = value - 1;
    if (!min || decline >= min) return decline;
    return value;
  }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (forms);

/***/ }),

/***/ "./assets/js/theme/common/nod-functions/min-max-validate.js":
/*!******************************************************************!*\
  !*** ./assets/js/theme/common/nod-functions/min-max-validate.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var lodash_isNaN__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/isNaN */ "./node_modules/lodash/isNaN.js");
/* harmony import */ var lodash_isNaN__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_isNaN__WEBPACK_IMPORTED_MODULE_0__);
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");

function minMaxValidate(minInputSelector, maxInputSelector) {
  function validate(cb) {
    var minValue = parseFloat($(minInputSelector).val());
    var maxValue = parseFloat($(maxInputSelector).val());
    if (maxValue > minValue || lodash_isNaN__WEBPACK_IMPORTED_MODULE_0___default()(maxValue) || lodash_isNaN__WEBPACK_IMPORTED_MODULE_0___default()(minValue)) {
      return cb(true);
    }
    return cb(false);
  }
  return validate;
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (minMaxValidate);

/***/ }),

/***/ "./assets/js/theme/common/nod.js":
/*!***************************************!*\
  !*** ./assets/js/theme/common/nod.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var nod_validate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! nod-validate */ "./node_modules/nod-validate/nod.js");
/* harmony import */ var nod_validate__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(nod_validate__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _nod_functions_min_max_validate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./nod-functions/min-max-validate */ "./assets/js/theme/common/nod-functions/min-max-validate.js");



// Hook our SCSS framework form field status classes into the nod validation system before use
(nod_validate__WEBPACK_IMPORTED_MODULE_0___default().classes).errorClass = 'form-field--error';
(nod_validate__WEBPACK_IMPORTED_MODULE_0___default().classes).successClass = 'form-field--success';
(nod_validate__WEBPACK_IMPORTED_MODULE_0___default().classes).errorMessageClass = 'form-inlineMessage';

// Register validate functions
(nod_validate__WEBPACK_IMPORTED_MODULE_0___default().checkFunctions)['min-max'] = _nod_functions_min_max_validate__WEBPACK_IMPORTED_MODULE_1__["default"];
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((nod_validate__WEBPACK_IMPORTED_MODULE_0___default()));

/***/ }),

/***/ "./assets/js/theme/common/product-details-base.js":
/*!********************************************************!*\
  !*** ./assets/js/theme/common/product-details-base.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ProductDetailsBase),
/* harmony export */   optionChangeDecorator: () => (/* binding */ optionChangeDecorator)
/* harmony export */ });
/* harmony import */ var lodash_isNumber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/isNumber */ "./node_modules/lodash/isNumber.js");
/* harmony import */ var lodash_isNumber__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_isNumber__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var lodash_isObject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/isObject */ "./node_modules/lodash/isObject.js");
/* harmony import */ var lodash_isObject__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_isObject__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _wishlist__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../wishlist */ "./assets/js/theme/wishlist.js");
/* harmony import */ var _aria__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./aria */ "./assets/js/theme/common/aria/index.js");
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");




var optionsTypesMap = {
  INPUT_FILE: 'input-file',
  INPUT_TEXT: 'input-text',
  INPUT_NUMBER: 'input-number',
  INPUT_CHECKBOX: 'input-checkbox',
  TEXTAREA: 'textarea',
  DATE: 'date',
  SET_SELECT: 'set-select',
  SET_RECTANGLE: 'set-rectangle',
  SET_RADIO: 'set-radio',
  SWATCH: 'swatch',
  PRODUCT_LIST: 'product-list'
};
function optionChangeDecorator(areDefaultOtionsSet) {
  var _this = this;
  return function (err, response) {
    var attributesData = response.data || {};
    var attributesContent = response.content || {};
    _this.updateProductAttributes(attributesData);
    if (areDefaultOtionsSet) {
      _this.updateView(attributesData, attributesContent);
    } else {
      _this.updateDefaultAttributesForOOS(attributesData);
    }
  };
}
var ProductDetailsBase = /*#__PURE__*/function () {
  function ProductDetailsBase($scope, context) {
    var _this2 = this;
    this.$scope = $scope;
    this.context = context;
    this.initRadioAttributes();
    _wishlist__WEBPACK_IMPORTED_MODULE_2__["default"].load(this.context);
    this.getTabRequests();
    $('[data-product-attribute]').each(function (__, value) {
      var type = value.getAttribute('data-product-attribute');
      _this2._makeProductVariantAccessible(value, type);
    });
  }
  var _proto = ProductDetailsBase.prototype;
  _proto._makeProductVariantAccessible = function _makeProductVariantAccessible(variantDomNode, variantType) {
    switch (variantType) {
      case optionsTypesMap.SET_RADIO:
      case optionsTypesMap.SWATCH:
        {
          (0,_aria__WEBPACK_IMPORTED_MODULE_3__.initRadioOptions)($(variantDomNode), '[type=radio]');
          break;
        }
      default:
        break;
    }
  }

  /**
   * Allow radio buttons to get deselected
   */;
  _proto.initRadioAttributes = function initRadioAttributes() {
    var _this3 = this;
    $('[data-product-attribute] input[type="radio"]', this.$scope).each(function (i, radio) {
      var $radio = $(radio);

      // Only bind to click once
      if ($radio.attr('data-state') !== undefined) {
        $radio.on('click', function () {
          if ($radio.data('state') === true) {
            $radio.prop('checked', false);
            $radio.data('state', false);
            $radio.trigger('change');
          } else {
            $radio.data('state', true);
          }
          _this3.initRadioAttributes();
        });
      }
      $radio.attr('data-state', $radio.prop('checked'));
    });
  }

  /**
   * Hide or mark as unavailable out of stock attributes if enabled
   * @param  {Object} data Product attribute data
   */;
  _proto.updateProductAttributes = function updateProductAttributes(data) {
    var _this4 = this;
    var behavior = data.out_of_stock_behavior;
    var inStockIds = data.in_stock_attributes;
    var outOfStockMessage = " (" + data.out_of_stock_message + ")";
    if (behavior !== 'hide_option' && behavior !== 'label_option') {
      return;
    }
    $('[data-product-attribute-value]', this.$scope).each(function (i, attribute) {
      var $attribute = $(attribute);
      var attrId = parseInt($attribute.data('productAttributeValue'), 10);
      if (inStockIds.indexOf(attrId) !== -1) {
        _this4.enableAttribute($attribute, behavior, outOfStockMessage);
      } else {
        _this4.disableAttribute($attribute, behavior, outOfStockMessage);
      }
    });
  }

  /**
   * Check for fragment identifier in URL requesting a specific tab
   */;
  _proto.getTabRequests = function getTabRequests() {
    if (window.location.hash && window.location.hash.indexOf('#tab-') === 0) {
      var $activeTab = $('.tabs').has("[href='" + window.location.hash + "']");
      var $tabContent = $("" + window.location.hash);
      if ($activeTab.length > 0) {
        $activeTab.find('.tab').removeClass('is-active').has("[href='" + window.location.hash + "']").addClass('is-active');
        $tabContent.addClass('is-active').siblings().removeClass('is-active');
      }
    }
  }

  /**
   * Since $productView can be dynamically inserted using render_with,
   * We have to retrieve the respective elements
   *
   * @param $scope
   */;
  _proto.getViewModel = function getViewModel($scope) {
    return {
      $priceWithTax: $('[data-product-price-with-tax]', $scope),
      $priceWithoutTax: $('[data-product-price-without-tax]', $scope),
      rrpWithTax: {
        $div: $('.rrp-price--withTax', $scope),
        $span: $('[data-product-rrp-with-tax]', $scope)
      },
      rrpWithoutTax: {
        $div: $('.rrp-price--withoutTax', $scope),
        $span: $('[data-product-rrp-price-without-tax]', $scope)
      },
      nonSaleWithTax: {
        $div: $('.non-sale-price--withTax', $scope),
        $span: $('[data-product-non-sale-price-with-tax]', $scope)
      },
      nonSaleWithoutTax: {
        $div: $('.non-sale-price--withoutTax', $scope),
        $span: $('[data-product-non-sale-price-without-tax]', $scope)
      },
      priceSaved: {
        $div: $('.price-section--saving', $scope),
        $span: $('[data-product-price-saved]', $scope)
      },
      priceNowLabel: {
        $span: $('.price-now-label', $scope)
      },
      priceLabel: {
        $span: $('.price-label', $scope)
      },
      $weight: $('.productView-info [data-product-weight]', $scope),
      $increments: $('.form-field--increments :input', $scope),
      $addToCart: $('#form-action-addToCart', $scope),
      $addToCart2: $('#halo_sticky_addToCart #form-action-addToCart2', $scope),
      $buyItNow: $('#form-action-buyItNow', $scope),
      $stockLeft: $('[data-stock-left]', $scope),
      $stockLeftWrapper: $('.productView-optionsStock', $scope),
      $wishlistVariation: $('[data-wishlist-add] [name="variation_id"]', $scope),
      stock: {
        $container: $('.form-field--stock', $scope),
        $input: $('[data-product-stock]', $scope)
      },
      sku: {
        $label: $('dt.sku-label', $scope),
        $value: $('[data-product-sku]', $scope)
      },
      upc: {
        $label: $('dt.upc-label', $scope),
        $value: $('[data-product-upc]', $scope)
      },
      quantity: {
        $text: $('.incrementTotal', $scope),
        $input: $('[name=qty\\[\\]]', $scope)
      },
      $bulkPricing: $('.productView-info-bulkPricing', $scope),
      $walletButtons: $('[data-add-to-cart-wallet-buttons]', $scope)
    };
  }

  /**
   * Hide the pricing elements that will show up only when the price exists in API
   * @param viewModel
   */;
  _proto.clearPricingNotFound = function clearPricingNotFound(viewModel) {
    viewModel.rrpWithTax.$div.hide();
    viewModel.rrpWithoutTax.$div.hide();
    viewModel.nonSaleWithTax.$div.hide();
    viewModel.nonSaleWithoutTax.$div.hide();
    viewModel.priceSaved.$div.hide();
    viewModel.priceNowLabel.$span.hide();
    viewModel.priceLabel.$span.hide();
  }

  /**
   * Update the view of price, messages, SKU and stock options when a product option changes
   * @param  {Object} data Product attribute data
   */;
  _proto.updateView = function updateView(data, content) {
    if (content === void 0) {
      content = null;
    }
    var viewModel = this.getViewModel(this.$scope);
    if (lodash_isNumber__WEBPACK_IMPORTED_MODULE_0___default()(data.stock)) {
      if (data.stock <= parseInt(this.context.themeSettings.halo_stock_level_limit) && data.stock > 0) {
        viewModel.$stockLeftWrapper.removeClass('u-hiddenVisually');
        viewModel.$stockLeft.text(data.stock);
      } else {
        viewModel.$stockLeftWrapper.addClass('u-hiddenVisually');
      }
    }
    this.showMessageBox(data.stock_message || data.purchasing_message);
    if (lodash_isObject__WEBPACK_IMPORTED_MODULE_1___default()(data.price)) {
      this.updatePriceView(viewModel, data.price);
    }
    if (lodash_isObject__WEBPACK_IMPORTED_MODULE_1___default()(data.weight)) {
      viewModel.$weight.html(data.weight.formatted);
    }

    // Set variation_id if it exists for adding to wishlist
    if (data.variantId) {
      viewModel.$wishlistVariation.val(data.variantId);
    }

    // If SKU is available
    if (data.sku) {
      viewModel.sku.$value.text(data.sku);
      viewModel.sku.$label.show();
    } else {
      viewModel.sku.$label.hide();
      viewModel.sku.$value.text('');
    }

    // If UPC is available
    if (data.upc) {
      viewModel.upc.$value.text(data.upc);
      viewModel.upc.$label.show();
    } else {
      viewModel.upc.$label.hide();
      viewModel.upc.$value.text('');
    }

    // if stock view is on (CP settings)
    if (viewModel.stock.$container.length && lodash_isNumber__WEBPACK_IMPORTED_MODULE_0___default()(data.stock)) {
      // if the stock container is hidden, show
      viewModel.stock.$container.removeClass('u-hiddenVisually');
      viewModel.stock.$input.text(data.stock);
    } else {
      viewModel.stock.$container.addClass('u-hiddenVisually');
      viewModel.stock.$input.text(data.stock);
    }
    this.updateDefaultAttributesForOOS(data);
    this.updateWalletButtonsView(data);

    // If Bulk Pricing rendered HTML is available
    if (data.bulk_discount_rates && content) {
      viewModel.$bulkPricing.html(content);
    } else if (typeof data.bulk_discount_rates !== 'undefined') {
      viewModel.$bulkPricing.html('');
    }
    var addToCartWrapper = $('#add-to-cart-wrapper');
    if (addToCartWrapper.is(':hidden') && data.purchasable) {
      addToCartWrapper.show();
    }
    var formWishlist = $('.form-wishlist');
    if (formWishlist.is(':hidden') && data.purchasable) {
      formWishlist.show();
    }
  }

  /**
   * Update the view of price, messages, SKU and stock options when a product option changes
   * @param  {Object} data Product attribute data
   */;
  _proto.updatePriceView = function updatePriceView(viewModel, price) {
    this.clearPricingNotFound(viewModel);
    if (price.with_tax) {
      var updatedPrice = price.price_range ? price.price_range.min.with_tax.formatted + " - " + price.price_range.max.with_tax.formatted : price.with_tax.formatted;
      viewModel.priceLabel.$span.show();
      viewModel.$priceWithTax.html(updatedPrice);
    }
    if (price.without_tax) {
      var _updatedPrice = price.price_range ? price.price_range.min.without_tax.formatted + " - " + price.price_range.max.without_tax.formatted : price.without_tax.formatted;
      viewModel.priceLabel.$span.show();
      viewModel.$priceWithoutTax.html(_updatedPrice);
    }
    if (price.rrp_with_tax) {
      viewModel.rrpWithTax.$div.show();
      viewModel.rrpWithTax.$span.html(price.rrp_with_tax.formatted);
    }
    if (price.rrp_without_tax) {
      viewModel.rrpWithoutTax.$div.show();
      viewModel.rrpWithoutTax.$span.html(price.rrp_without_tax.formatted);
    }
    if (price.saved) {
      viewModel.priceSaved.$div.show();
      viewModel.priceSaved.$span.html(price.saved.formatted);
    }
    if (price.non_sale_price_with_tax) {
      viewModel.priceLabel.$span.hide();
      viewModel.nonSaleWithTax.$div.show();
      viewModel.priceNowLabel.$span.show();
      viewModel.nonSaleWithTax.$span.html(price.non_sale_price_with_tax.formatted);
    }
    if (price.non_sale_price_without_tax) {
      viewModel.priceLabel.$span.hide();
      viewModel.nonSaleWithoutTax.$div.show();
      viewModel.priceNowLabel.$span.show();
      viewModel.nonSaleWithoutTax.$span.html(price.non_sale_price_without_tax.formatted);
    }
  }

  /**
   * Show an message box if a message is passed
   * Hide the box if the message is empty
   * @param  {String} message
   */;
  _proto.showMessageBox = function showMessageBox(message, $scope) {
    var $messageBox = $('.productAttributes-message');
    if (message) {
      $('.alertBox-message', $messageBox).text(message);
      $messageBox.show();
      $('.productView-notifyMe', $scope).show();
    } else {
      $messageBox.hide();
      $('.productView-notifyMe', $scope).hide();
    }
  };
  _proto.updateDefaultAttributesForOOS = function updateDefaultAttributesForOOS(data) {
    var viewModel = this.getViewModel(this.$scope);
    if (!data.purchasable || !data.instock) {
      viewModel.$addToCart.prop('disabled', true);
      viewModel.$addToCart2.prop('disabled', true);
      viewModel.$buyItNow.prop('disabled', true);
      viewModel.$increments.prop('disabled', true);
    } else {
      viewModel.$addToCart.prop('disabled', false);
      viewModel.$addToCart2.prop('disabled', false);
      viewModel.$buyItNow.prop('disabled', false);
      viewModel.$increments.prop('disabled', false);
    }
  };
  _proto.updateWalletButtonsView = function updateWalletButtonsView(data) {
    this.toggleWalletButtonsVisibility(data.purchasable && data.instock);
  };
  _proto.toggleWalletButtonsVisibility = function toggleWalletButtonsVisibility(shouldShow) {
    var viewModel = this.getViewModel(this.$scope);
    if (shouldShow) {
      viewModel.$walletButtons.show();
    } else {
      viewModel.$walletButtons.hide();
    }
  };
  _proto.enableAttribute = function enableAttribute($attribute, behavior, outOfStockMessage) {
    if (this.getAttributeType($attribute) === 'set-select') {
      return this.enableSelectOptionAttribute($attribute, behavior, outOfStockMessage);
    }
    if (behavior === 'hide_option') {
      $attribute.show();
    } else {
      $attribute.removeClass('unavailable');
    }
  };
  _proto.disableAttribute = function disableAttribute($attribute, behavior, outOfStockMessage) {
    if (this.getAttributeType($attribute) === 'set-select') {
      return this.disableSelectOptionAttribute($attribute, behavior, outOfStockMessage);
    }
    if (behavior === 'hide_option') {
      $attribute.hide(0);
    } else {
      $attribute.addClass('unavailable');
    }
  };
  _proto.getAttributeType = function getAttributeType($attribute) {
    var $parent = $attribute.closest('[data-product-attribute]');
    return $parent ? $parent.data('productAttribute') : null;
  };
  _proto.disableSelectOptionAttribute = function disableSelectOptionAttribute($attribute, behavior, outOfStockMessage) {
    var $select = $attribute.parent();
    if (behavior === 'hide_option') {
      $attribute.toggleOption(false);
      // If the attribute is the selected option in a select dropdown, select the first option (MERC-639)
      if ($select.val() === $attribute.attr('value')) {
        $select[0].selectedIndex = 0;
      }
    } else {
      $attribute.attr('disabled', 'disabled');
      $attribute.html($attribute.html().replace(outOfStockMessage, '') + outOfStockMessage);
    }
  };
  _proto.enableSelectOptionAttribute = function enableSelectOptionAttribute($attribute, behavior, outOfStockMessage) {
    if (behavior === 'hide_option') {
      $attribute.toggleOption(true);
    } else {
      $attribute.prop('disabled', false);
      $attribute.html($attribute.html().replace(outOfStockMessage, ''));
    }
  };
  return ProductDetailsBase;
}();


/***/ }),

/***/ "./assets/js/theme/common/product-details.js":
/*!***************************************************!*\
  !*** ./assets/js/theme/common/product-details.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ProductDetails)
/* harmony export */ });
/* harmony import */ var lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/isPlainObject */ "./node_modules/lodash/isPlainObject.js");
/* harmony import */ var lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var lodash_isEmpty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/isEmpty */ "./node_modules/lodash/isEmpty.js");
/* harmony import */ var lodash_isEmpty__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_isEmpty__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @bigcommerce/stencil-utils */ "./node_modules/@bigcommerce/stencil-utils/src/main.js");
/* harmony import */ var _product_details_base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./product-details-base */ "./assets/js/theme/common/product-details-base.js");
/* harmony import */ var foundation_sites_js_foundation_foundation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! foundation-sites/js/foundation/foundation */ "./node_modules/foundation-sites/js/foundation/foundation.js");
/* harmony import */ var foundation_sites_js_foundation_foundation__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(foundation_sites_js_foundation_foundation__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var foundation_sites_js_foundation_foundation_reveal__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! foundation-sites/js/foundation/foundation.reveal */ "./node_modules/foundation-sites/js/foundation/foundation.reveal.js");
/* harmony import */ var foundation_sites_js_foundation_foundation_reveal__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(foundation_sites_js_foundation_foundation_reveal__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _product_image_gallery__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../product/image-gallery */ "./assets/js/theme/product/image-gallery.js");
/* harmony import */ var _global_modal__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../global/modal */ "./assets/js/theme/global/modal.js");
/* harmony import */ var _common_nod__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../common/nod */ "./assets/js/theme/common/nod.js");
/* harmony import */ var _common_utils_form_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../common/utils/form-utils */ "./assets/js/theme/common/utils/form-utils.js");
/* harmony import */ var _common_models_forms__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../common/models/forms */ "./assets/js/theme/common/models/forms.js");
/* harmony import */ var _utils_api__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./utils/api */ "./assets/js/theme/common/utils/api.js");
/* harmony import */ var _utils_ie_helpers__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./utils/ie-helpers */ "./assets/js/theme/common/utils/ie-helpers.js");
/* harmony import */ var _utils_banner_utils__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./utils/banner-utils */ "./assets/js/theme/common/utils/banner-utils.js");
/* harmony import */ var _halothemes_haloCalculateFreeShipping__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../halothemes/haloCalculateFreeShipping */ "./assets/js/theme/halothemes/haloCalculateFreeShipping.js");
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");


function _inheritsLoose(t, o) { t.prototype = Object.create(o.prototype), t.prototype.constructor = t, _setPrototypeOf(t, o); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }













var ProductDetails = /*#__PURE__*/function (_ProductDetailsBase) {
  function ProductDetails($scope, context, productAttributesData) {
    var _this;
    if (productAttributesData === void 0) {
      productAttributesData = {};
    }
    _this = _ProductDetailsBase.call(this, $scope, context) || this;
    _this.$overlay = $('[data-cart-item-add] .loadingOverlay');
    _this.imageGallery = new _product_image_gallery__WEBPACK_IMPORTED_MODULE_6__["default"]($('[data-image-gallery]', _this.$scope));
    _this.imageGallery.init();
    _this.listenQuantityChange();
    _this.listenQuantityChangeStickyATC($('#halo_sticky_addToCart'));
    _this.$swatchOptionMessage = $('.swatch-option-message');
    _this.swatchInitMessageStorage = {};
    _this.swatchGroupIdList = $('[id^="swatchGroup"]').map(function (_, group) {
      return $(group).attr('id');
    });
    _this.storeInitMessagesForSwatches();
    var $form = $('form[data-cart-item-add]', $scope);
    _this.addToCartValidator = (0,_common_nod__WEBPACK_IMPORTED_MODULE_8__["default"])({
      submit: $form.find('input#form-action-addToCart'),
      tap: _common_utils_form_utils__WEBPACK_IMPORTED_MODULE_9__.announceInputErrorMessage
    });
    var $productOptionsElement = $('[data-product-option-change]', $form);
    var hasOptions = $productOptionsElement.html().trim().length;
    var hasDefaultOptions = $productOptionsElement.find('[data-default]').length;
    var $productSwatchGroup = $('[id*="attribute_swatch"]', $form);
    var $productSwatchLabels = $('.form-option-swatch', $form);
    var placeSwatchLabelImage = function placeSwatchLabelImage(_, label) {
      var $optionImage = $('.form-option-expanded', $(label));
      var optionImageWidth = $optionImage.outerWidth();
      var extendedOptionImageOffsetLeft = 55;
      var _label$getBoundingCli = label.getBoundingClientRect(),
        right = _label$getBoundingCli.right;
      var emptySpaceToScreenRightBorder = window.screen.width - right;
      var shiftValue = optionImageWidth - emptySpaceToScreenRightBorder;
      if (emptySpaceToScreenRightBorder < optionImageWidth + extendedOptionImageOffsetLeft) {
        $optionImage.css('left', (shiftValue > 0 ? -shiftValue : shiftValue) + "px");
      }
    };
    $(window).on('load', function () {
      _this.registerAddToCartValidation();
      $.each($productSwatchLabels, placeSwatchLabelImage);
    });
    if (context.showSwatchNames) {
      _this.$swatchOptionMessage.removeClass('u-hidden');
      $productSwatchGroup.on('change', function (_ref) {
        var target = _ref.target;
        var swatchGroupElement = target.parentNode.parentNode;
        _this.showSwatchNameOnOption($(target), $(swatchGroupElement));
      });
      $.each($productSwatchGroup, function (_, element) {
        var swatchGroupElement = element.parentNode.parentNode;
        if ($(element).is(':checked')) _this.showSwatchNameOnOption($(element), $(swatchGroupElement));
      });
    }
    $productOptionsElement.on('change', function (event) {
      _this.productOptionsChanged(event);
      _this.setProductVariant();
      _this.setProductVariant2();
    });
    $form.on('submit', function (event) {
      _this.addToCartValidator.performCheck();
      if (_this.addToCartValidator.areAll('valid')) {
        _this.addProductToCart(event, $form[0]);
      }
    });
    if (_this.context.themeSettings.halo_buy_it_now == true) {
      $('#form-action-buyItNow', $scope).on('click', function () {
        $form.find('input[name=action]').val('buy');
        _this.focusableElements($form);
      });
      $('#form-action-addToCart', $scope).on('click', function () {
        $form.find('input[name=action]').val('add');
      });
    }

    // add to cart 2
    var $form2 = $('form[data-cart-item-add-2]', $scope);
    var $productOptionsElement2 = $('[data-product-option-change-2]', $form2);
    $productOptionsElement2.on('change', function (event) {
      _this.productOptionsChanged2(event);
      _this.setProductVariant();
      _this.setProductVariant2();
    });
    $form2.on('submit', function (event) {
      _this.addToCartValidator.performCheck();
      if (_this.addToCartValidator.areAll('valid')) {
        _this.addProductToCart(event, $form2[0]);
      }
    });

    // Update product attributes. Also update the initial view in case items are oos
    // or have default variant properties that change the view
    if ((lodash_isEmpty__WEBPACK_IMPORTED_MODULE_1___default()(productAttributesData) || hasDefaultOptions) && hasOptions) {
      var $productId = $('[name="product_id"]', $form).val();
      var optionChangeCallback = _product_details_base__WEBPACK_IMPORTED_MODULE_3__.optionChangeDecorator.call(_this, hasDefaultOptions);
      _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_2__["default"].api.productAttributes.optionChange($productId, $form.serialize(), 'products/bulk-discount-rates', optionChangeCallback);
    } else {
      _this.updateProductAttributes(productAttributesData);
      _utils_banner_utils__WEBPACK_IMPORTED_MODULE_13__["default"].dispatchProductBannerEvent(productAttributesData);
    }
    $productOptionsElement.show();
    _this.previewModal = (0,_global_modal__WEBPACK_IMPORTED_MODULE_7__["default"])('#previewModal')[0];
    return _this;
  }
  _inheritsLoose(ProductDetails, _ProductDetailsBase);
  var _proto = ProductDetails.prototype;
  _proto.registerAddToCartValidation = function registerAddToCartValidation() {
    this.addToCartValidator.add([{
      selector: '[data-quantity-change] > .form-input--incrementTotal',
      validate: function validate(cb, val) {
        var result = _common_models_forms__WEBPACK_IMPORTED_MODULE_10__["default"].numbersOnly(val);
        cb(result);
      },
      errorMessage: this.context.productQuantityErrorMessage
    }]);
    return this.addToCartValidator;
  };
  _proto.storeInitMessagesForSwatches = function storeInitMessagesForSwatches() {
    var _this2 = this;
    if (this.swatchGroupIdList.length && lodash_isEmpty__WEBPACK_IMPORTED_MODULE_1___default()(this.swatchInitMessageStorage)) {
      this.swatchGroupIdList.each(function (_, swatchGroupId) {
        if (!_this2.swatchInitMessageStorage[swatchGroupId]) {
          _this2.swatchInitMessageStorage[swatchGroupId] = $("#" + swatchGroupId + " ~ .swatch-option-message").text().trim();
        }
      });
    }
  };
  _proto.focusableElements = function focusableElements(form) {
    var list = [];
    form.find('input[type="radio"], input[type="text"], input[type="checkbox"], textarea, select').on('invalid', function (event) {
      event.preventDefault();
    });
    form.find('input[type="radio"], input[type="text"], input[type="checkbox"], textarea, select').each(function (index, element) {
      if ($(element).is(':invalid')) {
        list.push({
          index: index,
          data: element
        });
      }
    });
    if (list.length > 0) {
      var height = $(window).scrollTop(),
        formHeight = form.offset().top + form.height() / 2;
      if (height > formHeight) {
        $('body,html').animate({
          scrollTop: form.offset().top - 50
        }, 700);
      }
    }
  };
  _proto.setProductVariant = function setProductVariant() {
    var unsatisfiedRequiredFields = [];
    var options = [];
    $.each($('[data-product-option-change] [data-product-attribute]'), function (index, value) {
      var optionLabel = value.children[0].innerText;
      var optionTitle = optionLabel.split(':')[0].trim();
      var required = optionLabel.toLowerCase().includes('required');
      var type = value.getAttribute('data-product-attribute');
      if ((type === 'input-file' || type === 'input-text' || type === 'input-number') && value.querySelector('input').value === '' && required) {
        unsatisfiedRequiredFields.push(value);
      }
      if (type === 'textarea' && value.querySelector('textarea').value === '' && required) {
        unsatisfiedRequiredFields.push(value);
      }
      if (type === 'date') {
        var isSatisfied = Array.from(value.querySelectorAll('select')).every(function (select) {
          return select.selectedIndex !== 0;
        });
        if (isSatisfied) {
          var dateString = Array.from(value.querySelectorAll('select')).map(function (x) {
            return x.value;
          }).join('-');
          options.push(optionTitle + ":" + dateString);
          return;
        }
        if (required) {
          unsatisfiedRequiredFields.push(value);
        }
      }
      if (type === 'set-select') {
        var select = value.querySelector('select');
        var selectedIndex = select.selectedIndex;
        if (selectedIndex !== 0) {
          options.push(optionTitle + ":" + select.options[selectedIndex].innerText);
          $(value.children[0]).find('[data-option-value]').text(select.options[selectedIndex].innerText);
          return;
        }
        if (required) {
          unsatisfiedRequiredFields.push(value);
        }
      }
      if (type === 'set-rectangle' || type === 'set-radio' || type === 'swatch' || type === 'input-checkbox' || type === 'product-list') {
        var checked = value.querySelector(':checked');
        if (checked) {
          var getSelectedOptionLabel = function getSelectedOptionLabel() {
            var productVariantslist = (0,_utils_ie_helpers__WEBPACK_IMPORTED_MODULE_12__.convertIntoArray)(value.children);
            var matchLabelForCheckedInput = function matchLabelForCheckedInput(inpt) {
              return inpt.dataset.productAttributeValue === checked.value;
            };
            return productVariantslist.filter(matchLabelForCheckedInput)[0];
          };
          if (type === 'set-rectangle' || type === 'set-radio' || type === 'product-list') {
            var label = _utils_ie_helpers__WEBPACK_IMPORTED_MODULE_12__.isBrowserIE ? getSelectedOptionLabel().innerText.trim() : checked.labels[0].innerText;
            if (label) {
              options.push(optionTitle + ":" + label);
              $(value.children[0]).find('[data-option-value]').text(label);
            }
          }
          if (type === 'swatch') {
            var _label = _utils_ie_helpers__WEBPACK_IMPORTED_MODULE_12__.isBrowserIE ? getSelectedOptionLabel().children[0] : checked.labels[0].children[0];
            if (_label) {
              options.push(optionTitle + ":" + _label.title);
              $(value.children[0]).find('[data-option-value]').text(_label.title);
            }
          }
          if (type === 'input-checkbox') {
            options.push(optionTitle + ":Yes");
          }
          return;
        }
        if (type === 'input-checkbox') {
          options.push(optionTitle + ":No");
        }
        if (required) {
          unsatisfiedRequiredFields.push(value);
        }
      }
    });
    var productVariant = unsatisfiedRequiredFields.length === 0 ? options.sort().join(', ') : 'unsatisfied';
    var view = $('.productView');
    if (productVariant) {
      productVariant = productVariant === 'unsatisfied' ? '' : productVariant;
      if (view.attr('data-event-type')) {
        view.attr('data-product-variant', productVariant);
      } else {
        var productName = view.find('.productView-title')[0] ? view.find('.productView-title')[0].innerText.replace(/"/g, '\\$&') : this.$scope.find('.productView-title').text().replace(/"/g, '\\$&');
        var card = $("[data-name=\"" + productName + "\"]");
        card.attr('data-product-variant', productVariant);
      }
    }
    var productVariant2 = unsatisfiedRequiredFields.length === 0 ? options.sort() : 'unsatisfied';
    if (productVariant2) {
      var listVariant = '';
      $.each(productVariant2, function (index, value) {
        if (index > 0) {
          listVariant += ' / ' + productVariant2[index].toString().split(':').pop();
        } else if (index == 0) {
          listVariant += productVariant2[index].toString().split(':').pop();
        }
      });
      this.$scope.find('.productView-notifyMe').attr('data-product-variant', listVariant);
    }
  };
  _proto.setProductVariant2 = function setProductVariant2() {
    var unsatisfiedRequiredFields = [];
    var options = [];
    $.each($('[data-product-option-change-2] [data-product-attribute]'), function (index, value) {
      var optionLabel = value.children[0].innerText;
      var optionTitle = optionLabel.split(':')[0].trim();
      var required = optionLabel.toLowerCase().includes('required');
      var type = value.getAttribute('data-product-attribute');
      if ((type === 'input-file' || type === 'input-text' || type === 'input-number') && value.querySelector('input').value === '' && required) {
        unsatisfiedRequiredFields.push(value);
      }
      if (type === 'textarea' && value.querySelector('textarea').value === '' && required) {
        unsatisfiedRequiredFields.push(value);
      }
      if (type === 'date') {
        var isSatisfied = Array.from(value.querySelectorAll('select')).every(function (select) {
          return select.selectedIndex !== 0;
        });
        if (isSatisfied) {
          var dateString = Array.from(value.querySelectorAll('select')).map(function (x) {
            return x.value;
          }).join('-');
          options.push(optionTitle + ":" + dateString);
          return;
        }
        if (required) {
          unsatisfiedRequiredFields.push(value);
        }
      }
      if (type === 'set-select') {
        var select = value.querySelector('select');
        var selectedIndex = select.selectedIndex;
        if (selectedIndex !== 0) {
          options.push(optionTitle + ":" + select.options[selectedIndex].innerText);
          $(value.children[0]).find('[data-option-value]').text(select.options[selectedIndex].innerText);
          return;
        }
        if (required) {
          unsatisfiedRequiredFields.push(value);
        }
      }
      if (type === 'set-rectangle' || type === 'set-radio' || type === 'swatch' || type === 'input-checkbox' || type === 'product-list') {
        var checked = value.querySelector(':checked');
        if (checked) {
          var getSelectedOptionLabel = function getSelectedOptionLabel() {
            var productVariantslist = (0,_utils_ie_helpers__WEBPACK_IMPORTED_MODULE_12__.convertIntoArray)(value.children);
            var matchLabelForCheckedInput = function matchLabelForCheckedInput(inpt) {
              return inpt.dataset.productAttributeValue === checked.value;
            };
            return productVariantslist.filter(matchLabelForCheckedInput)[0];
          };
          if (type === 'set-rectangle' || type === 'set-radio' || type === 'product-list') {
            var label = _utils_ie_helpers__WEBPACK_IMPORTED_MODULE_12__.isBrowserIE ? getSelectedOptionLabel().innerText.trim() : checked.labels[0].innerText;
            if (label) {
              options.push(optionTitle + ":" + label);
              $(value.children[0]).find('[data-option-value]').text(label);
            }
          }
          if (type === 'swatch') {
            var _label2 = _utils_ie_helpers__WEBPACK_IMPORTED_MODULE_12__.isBrowserIE ? getSelectedOptionLabel().children[0] : checked.labels[0].children[0];
            if (_label2) {
              options.push(optionTitle + ":" + _label2.title);
              $(value.children[0]).find('[data-option-value]').text(_label2.title);
            }
          }
          if (type === 'input-checkbox') {
            options.push(optionTitle + ":Yes");
          }
          return;
        }
        if (type === 'input-checkbox') {
          options.push(optionTitle + ":No");
        }
        if (required) {
          unsatisfiedRequiredFields.push(value);
        }
      }
    });
    var productVariant = unsatisfiedRequiredFields.length === 0 ? options.sort().join(', ') : 'unsatisfied';
    var view = $('.productView');
    if (productVariant) {
      productVariant = productVariant === 'unsatisfied' ? '' : productVariant;
      if (view.attr('data-event-type')) {
        view.attr('data-product-variant', productVariant);
      } else {
        var productName = view.find('.productView-title')[0] ? view.find('.productView-title')[0].innerText.replace(/"/g, '\\$&') : this.$scope.find('.productView-title').text().replace(/"/g, '\\$&');
        var card = $("[data-name=\"" + productName + "\"]");
        card.attr('data-product-variant', productVariant);
      }
    }
    var productVariant2 = unsatisfiedRequiredFields.length === 0 ? options.sort() : 'unsatisfied';
    if (productVariant2) {
      var listVariant = '';
      $.each(productVariant2, function (index, value) {
        if (index > 0) {
          listVariant += ' / ' + productVariant2[index].toString().split(':').pop();
        } else if (index == 0) {
          listVariant += productVariant2[index].toString().split(':').pop();
        }
      });
      this.$scope.find('.productView-notifyMe').attr('data-product-variant', listVariant);
    }
  }

  /**
   * Checks if the current window is being run inside an iframe
   * @returns {boolean}
   */;
  _proto.isRunningInIframe = function isRunningInIframe() {
    try {
      return window.self !== window.top;
    } catch (e) {
      return true;
    }
  }

  /**
   *
   * Handle product options changes
   *
   */;
  _proto.productOptionsChanged = function productOptionsChanged(event) {
    var _this3 = this;
    var $changedOption = $(event.target);
    var $form = $changedOption.parents('form');
    var productId = $('[name="product_id"]', $form).val();

    // Do not trigger an ajax request if it's a file or if the browser doesn't support FormData
    if ($changedOption.attr('type') === 'file' || window.FormData === undefined) {
      return;
    }
    _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_2__["default"].api.productAttributes.optionChange(productId, $form.serialize(), 'products/bulk-discount-rates', function (err, response) {
      var productAttributesData = response.data || {};
      var productAttributesContent = response.content || {};
      _this3.updateProductAttributes(productAttributesData);
      _this3.updateView(productAttributesData, productAttributesContent);
      _utils_banner_utils__WEBPACK_IMPORTED_MODULE_13__["default"].dispatchProductBannerEvent(productAttributesData);
      if (!_this3.checkIsQuickViewChild($form)) {
        var $context = $form.parents('.productView').find('.productView-info');
        (0,_global_modal__WEBPACK_IMPORTED_MODULE_7__["default"])('[data-reveal]', {
          $context: $context
        });
      }
      document.dispatchEvent(new CustomEvent('onProductOptionsChanged', {
        bubbles: true,
        detail: {
          content: productAttributesData,
          data: productAttributesContent
        }
      }));

      // Change Sticky Add to cart
      $.each(productAttributesData.selected_attributes, function (i, el) {
        $.each($('[data-product-option-change-2] [data-product-attribute] input'), function (i) {
          var op = $(this).attr('value');
          if (el == op) {
            $(this).prop('checked', true);
            if ($(this).next().hasClass('form-option-swatch')) {
              var opTitle = $(this).next().children('.form-option-variant').attr('title');
              $(this).parents('.item-wrap').find('.color-name').text(" - " + opTitle);
            }
          }
        });
      });
    });
  };
  _proto.productOptionsChanged2 = function productOptionsChanged2(event) {
    var _this4 = this;
    var $changedOption = $(event.target);
    var $form = $changedOption.parents('form');
    var productId = $('[name="product_id"]', $form).val();

    // Do not trigger an ajax request if it's a file or if the browser doesn't support FormData
    if ($changedOption.attr('type') === 'file' || window.FormData === undefined) {
      return;
    }
    _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_2__["default"].api.productAttributes.optionChange(productId, $form.serialize(), 'products/bulk-discount-rates', function (err, response) {
      var productAttributesData = response.data || {};
      var productAttributesContent = response.content || {};
      _this4.updateProductAttributes(productAttributesData);
      _this4.updateView(productAttributesData, productAttributesContent);
      _utils_banner_utils__WEBPACK_IMPORTED_MODULE_13__["default"].dispatchProductBannerEvent(productAttributesData);
      if (!_this4.checkIsQuickViewChild($form)) {
        var $context = $form.parents('.productView').find('.productView-info');
        (0,_global_modal__WEBPACK_IMPORTED_MODULE_7__["default"])('[data-reveal]', {
          $context: $context
        });
      }
      document.dispatchEvent(new CustomEvent('onProductOptionsChanged', {
        bubbles: true,
        detail: {
          content: productAttributesData,
          data: productAttributesContent
        }
      }));
      $.each(productAttributesData.selected_attributes, function (i, el) {
        $.each($('[data-product-option-change-2] [data-product-attribute] input'), function (i) {
          var op = $(this).attr('value');
          if (el == op) {
            $(this).prop('checked', true);
            if ($(this).next().hasClass('form-option-swatch')) {
              var opTitle = $(this).next().children('.form-option-variant').attr('title');
              $(this).parents('.item-wrap').find('.color-name').text(" - " + opTitle);
            }
          }
        });
      });
      $.each($('[data-product-option-change-2] [data-product-attribute]'), function (i) {
        var el = $(this).find('.form-radio:checked').attr('value');
        $.each($('.productView-options [data-product-option-change] [data-product-attribute] input'), function (i) {
          var op = $(this).attr('value');
          if ($(this).next().hasClass('form-option-swatch')) {
            var opTitle = $(this).next().children('.form-option-variant').attr('title');
          } else if ($(this).next().children('.form-option-variant').length) {
            var opTitle = $(this).next().children('.form-option-variant').text();
          } else {
            var opTitle = $(this).next('.form-label').text();
          }
          if (el == op) {
            $(this).prop('checked', true);
            $(this).parents('[data-product-attribute]').find('[data-option-value]').text(opTitle);
          }
        });
      });
      var color = $('[data-product-option-change-2] [data-product-attribute="swatch"]').find('.form-radio:checked').next().find('> span').attr('title');
      $('#halo_sticky_addToCart .option-value .color-name').text(" - " + color);
    });
  }

  /**
   * if this setting is enabled in Page Builder
   * show name for swatch option
   */;
  _proto.showSwatchNameOnOption = function showSwatchNameOnOption($swatch, $swatchGroup) {
    var swatchName = $swatch.attr('aria-label');
    var activeSwatchGroupId = $swatchGroup.attr('aria-labelledby');
    var $swatchOptionMessage = $("#" + activeSwatchGroupId + " ~ .swatch-option-message");
    $('[data-option-value]', $swatchGroup).text(swatchName);
    $swatchOptionMessage.text(this.swatchInitMessageStorage[activeSwatchGroupId] + " " + swatchName);
    this.setLiveRegionAttributes($swatchOptionMessage, 'status', 'assertive');
  };
  _proto.setLiveRegionAttributes = function setLiveRegionAttributes($element, roleType, ariaLiveStatus) {
    $element.attr({
      role: roleType,
      'aria-live': ariaLiveStatus
    });
  };
  _proto.checkIsQuickViewChild = function checkIsQuickViewChild($element) {
    return !!$element.parents('.quickView').length;
  };
  _proto.showProductImage = function showProductImage(image) {
    if (lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_0___default()(image)) {
      var zoomImageUrl = _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_2__["default"].tools.imageSrcset.getSrcset(image.data, {
        '1x': this.context.zoomSize
      }
      /*
          Should match zoom size used for data-zoom-image in
          components/products/product-view.html
           Note that this will only be used as a fallback image for browsers that do not support srcset
           Also note that getSrcset returns a simple src string when exactly one size is provided
      */);
      var mainImageUrl = _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_2__["default"].tools.imageSrcset.getSrcset(image.data, {
        '1x': this.context.productSize
      }
      /*
          Should match fallback image size used for the main product image in
          components/products/product-view.html
           Note that this will only be used as a fallback image for browsers that do not support srcset
           Also note that getSrcset returns a simple src string when exactly one size is provided
      */);
      var mainImageSrcset = _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_2__["default"].tools.imageSrcset.getSrcset(image.data);
      this.imageGallery.setAlternateImage({
        mainImageUrl: mainImageUrl,
        zoomImageUrl: zoomImageUrl,
        mainImageSrcset: mainImageSrcset
      });
    } else {
      this.imageGallery.restoreImage();
    }
  }

  /**
   *
   * Handle action when the shopper clicks on + / - for quantity
   *
   */;
  _proto.listenQuantityChange = function listenQuantityChange() {
    var _this5 = this;
    this.$scope.on('click', '[data-quantity-change] button', function (event) {
      event.preventDefault();
      var $target = $(event.currentTarget);
      var viewModel = _this5.getViewModel(_this5.$scope);
      var $input = viewModel.quantity.$input;
      var quantityMin = parseInt($input.data('quantityMin'), 10);
      var quantityMax = parseInt($input.data('quantityMax'), 10);
      var qty = _common_models_forms__WEBPACK_IMPORTED_MODULE_10__["default"].numbersOnly($input.val()) ? parseInt($input.val(), 10) : quantityMin;
      // If action is incrementing
      if ($target.data('action') === 'inc') {
        qty = _common_models_forms__WEBPACK_IMPORTED_MODULE_10__["default"].validateIncreaseAgainstMaxBoundary(qty, quantityMax);
      } else if (qty > 1) {
        qty = _common_models_forms__WEBPACK_IMPORTED_MODULE_10__["default"].validateDecreaseAgainstMinBoundary(qty, quantityMin);
      }

      // update hidden input
      viewModel.quantity.$input.val(qty);
      // update text
      viewModel.quantity.$text.text(qty);
      // perform validation after updating product quantity
      _this5.addToCartValidator.performCheck();
    });

    // Prevent triggering quantity change when pressing enter
    this.$scope.on('keypress', '.form-input--incrementTotal', function (event) {
      // If the browser supports event.which, then use event.which, otherwise use event.keyCode
      var x = event.which || event.keyCode;
      if (x === 13) {
        // Prevent default
        event.preventDefault();
      }
    });
  };
  _proto.listenQuantityChangeStickyATC = function listenQuantityChangeStickyATC($scope) {
    var _this6 = this;
    $scope.on('click', '[data-quantity-change-2] button', function (event) {
      event.preventDefault();
      var $target = $(event.currentTarget);
      var viewModel = _this6.getViewModel($scope);
      var $input = viewModel.quantity.$input;
      var quantityMin = parseInt($input.data('quantityMin'), 10);
      var quantityMax = parseInt($input.data('quantityMax'), 10);
      var qty = _common_models_forms__WEBPACK_IMPORTED_MODULE_10__["default"].numbersOnly($input.val()) ? parseInt($input.val(), 10) : quantityMin;
      // If action is incrementing
      if ($target.data('action') === 'inc') {
        qty = _common_models_forms__WEBPACK_IMPORTED_MODULE_10__["default"].validateIncreaseAgainstMaxBoundary(qty, quantityMax);
      } else if (qty > 1) {
        qty = _common_models_forms__WEBPACK_IMPORTED_MODULE_10__["default"].validateDecreaseAgainstMinBoundary(qty, quantityMin);
      }

      // update hidden input
      viewModel.quantity.$input.val(qty);
      // update text
      viewModel.quantity.$text.text(qty);
      // perform validation after updating product quantity
      _this6.addToCartValidator.performCheck();
    });

    // Prevent triggering quantity change when pressing enter
    $scope.on('keypress', '#halo_sticky_addToCart .form-input--incrementTotal', function (event) {
      // If the browser supports event.which, then use event.which, otherwise use event.keyCode
      var x = event.which || event.keyCode;
      if (x === 13) {
        // Prevent default
        event.preventDefault();
      }
    });
  }

  /**
   *
   * Add a product to cart
   *
   */;
  _proto.addProductToCart = function addProductToCart(event, form, context) {
    var _this7 = this;
    var $addToCartBtn = $('#form-action-addToCart', $(event.target));
    var originalBtnVal = $addToCartBtn.val();
    var waitMessage = $addToCartBtn.data('waitMessage');

    // Do not do AJAX if browser doesn't support FormData
    if (window.FormData === undefined) {
      return;
    }

    // Prevent default
    event.preventDefault();
    $addToCartBtn.val(waitMessage).prop('disabled', true);
    this.$overlay.show();

    // Add item to cart
    _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_2__["default"].api.cart.itemAdd((0,_utils_api__WEBPACK_IMPORTED_MODULE_11__.normalizeFormData)(new FormData(form)), function (err, response) {
      var errorMessage = err || response.data.error;
      $addToCartBtn.val(originalBtnVal).prop('disabled', false);
      _this7.$overlay.hide();

      // Guard statement
      if (errorMessage) {
        // Strip the HTML from the error message
        var tmp = document.createElement('DIV');
        tmp.innerHTML = errorMessage;
        return (0,_global_modal__WEBPACK_IMPORTED_MODULE_7__.showAlertModal)(tmp.textContent || tmp.innerText);
      }
      if ($('body[data-page-type="cart"]').length) {
        location.reload();
        return;
      }
      if (form.action.value === 'buy') {
        _this7.redirectTo(_this7.context.urls.checkout.single_address);
        return;
      }

      // Open preview modal and update content
      if (_this7.context.themeSettings.haloAddToCartAction === 'sidebar') {
        $('.modal-background').trigger('click');
        var options = {
          template: 'common/cart-preview'
        };
        var loadingClass = 'is-loading';
        var $body = $('body');
        var $cartDropdown = $('#halo-cart-sidebar .halo-sidebar-wrapper');
        var $cartLoading = $('<div class="loadingOverlay"></div>');
        $body.toggleClass('openCartSidebar');
        $cartDropdown.addClass(loadingClass).html($cartLoading);
        $cartLoading.show();
        _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_2__["default"].api.cart.getContent(options, function (err, response) {
          $cartDropdown.removeClass(loadingClass).html(response);
          $cartLoading.hide();
          var quantity = $(response).find('[data-cart-quantity]').data('cartQuantity') || 0;
          $body.trigger('cart-quantity-update', quantity);
          (0,_halothemes_haloCalculateFreeShipping__WEBPACK_IMPORTED_MODULE_14__["default"])(_this7.context);
        });
      } else {
        _this7.$overlay.show();
        _this7.redirectTo(response.data.cart_item.cart_url || _this7.context.urls.cart);
      }
    });
  }

  /**
   * Get cart contents
   *
   * @param {String} cartItemId
   * @param {Function} onComplete
   */;
  _proto.getCartContent = function getCartContent(cartItemId, onComplete) {
    var options = {
      template: 'cart/preview',
      params: {
        suggest: cartItemId
      },
      config: {
        cart: {
          suggestions: {
            limit: 4
          }
        }
      }
    };
    _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_2__["default"].api.cart.getContent(options, onComplete);
  }

  /**
   * Redirect to url
   *
   * @param {String} url
   */;
  _proto.redirectTo = function redirectTo(url) {
    if (this.isRunningInIframe() && !window.iframeSdk) {
      window.top.location = url;
    } else {
      window.location = url;
    }
  }

  /**
   * Update cart content
   *
   * @param {Modal} modal
   * @param {String} cartItemId
   * @param {Function} onComplete
   */;
  _proto.updateCartContent = function updateCartContent(modal, cartItemId, onComplete) {
    this.getCartContent(cartItemId, function (err, response) {
      if (err) {
        return;
      }
      modal.updateContent(response);

      // Update cart counter
      var $body = $('body');
      var $cartQuantity = $('[data-cart-quantity]', modal.$content);
      var $cartCounter = $('.navUser-action .cart-count');
      var quantity = $cartQuantity.data('cartQuantity') || 0;
      var $promotionBanner = $('[data-promotion-banner]');
      var $backToShopppingBtn = $('.previewCartCheckout > [data-reveal-close]');
      var $modalCloseBtn = $('#previewModal > .modal-close');
      var bannerUpdateHandler = function bannerUpdateHandler() {
        var $productContainer = $('#main-content > .container');
        $productContainer.append('<div class="loadingOverlay pdp-update"></div>');
        $('.loadingOverlay.pdp-update', $productContainer).show();
        window.location.reload();
      };
      $cartCounter.addClass('cart-count--positive');
      $body.trigger('cart-quantity-update', quantity);
      if (onComplete) {
        onComplete(response);
      }
      if ($promotionBanner.length && $backToShopppingBtn.length) {
        $backToShopppingBtn.on('click', bannerUpdateHandler);
        $modalCloseBtn.on('click', bannerUpdateHandler);
      }
    });
  }

  /**
   * Hide or mark as unavailable out of stock attributes if enabled
   * @param  {Object} data Product attribute data
   */;
  _proto.updateProductAttributes = function updateProductAttributes(data) {
    _ProductDetailsBase.prototype.updateProductAttributes.call(this, data);
    this.showProductImage(data.image);
  };
  return ProductDetails;
}(_product_details_base__WEBPACK_IMPORTED_MODULE_3__["default"]);


/***/ }),

/***/ "./assets/js/theme/common/select-option-plugin.js":
/*!********************************************************!*\
  !*** ./assets/js/theme/common/select-option-plugin.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");
/**
 * Visually hides the option from user by moving option to an invisible
 * and disabled select placeholder element.
 *
 * This approach is required rather than simply hiding the option because
 * hidden option can still be included when serializeArray() is called and
 * cause wrong value to be submitted.
 * (eg. if you have option 1, 2, 3 and 2 is hidden, when you select 3,
 * serializeArray() will use the value of 2 instead of 3)
 */
function toggleOption(show) {
  var currentSelectElement = $(this).closest('select'); // the select containing this
  var disabledSelectElement; // the disabled select element
  var selectElement; // the real select element

  if (currentSelectElement.is(':disabled')) {
    disabledSelectElement = currentSelectElement;
    selectElement = disabledSelectElement.data('linkedSelectElement');
  } else {
    selectElement = currentSelectElement;
    disabledSelectElement = currentSelectElement.data('linkedSelectElement');
    if (!disabledSelectElement) {
      // create the disabled placeholder select element
      disabledSelectElement = $('<select>').prop('disabled', true).hide().attr('name', currentSelectElement.attr('name')).addClass(currentSelectElement.attr('class')).data('linkedSelectElement', selectElement).insertAfter(selectElement);
      selectElement.data('linkedSelectElement', disabledSelectElement);
    }
  }

  // save the selected option
  var selectedOption = selectElement.find('option:selected');

  // move the option to the correct select element if required
  if (currentSelectElement.is(':disabled') && show) {
    var previousIndex = this.data('index');
    var $elementNowAtPreviousIndex = selectElement.find('option').eq(previousIndex);
    if ($elementNowAtPreviousIndex.length) {
      this.insertBefore($elementNowAtPreviousIndex);
    } else {
      $(this).appendTo(selectElement);
    }
  } else if (!currentSelectElement.is(':disabled') && !show) {
    this.data('index', currentSelectElement.find('option').index(this));
    $(this).prependTo(disabledSelectElement);
  }

  // make sure the option is still selected
  selectedOption.prop('selected', true);
}
$.fn.toggleOption = toggleOption;

/***/ }),

/***/ "./assets/js/theme/common/state-country.js":
/*!*************************************************!*\
  !*** ./assets/js/theme/common/state-country.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var lodash_each__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/each */ "./node_modules/lodash/each.js");
/* harmony import */ var lodash_each__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_each__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var lodash_isEmpty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/isEmpty */ "./node_modules/lodash/isEmpty.js");
/* harmony import */ var lodash_isEmpty__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_isEmpty__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var lodash_transform__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/transform */ "./node_modules/lodash/transform.js");
/* harmony import */ var lodash_transform__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash_transform__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @bigcommerce/stencil-utils */ "./node_modules/@bigcommerce/stencil-utils/src/main.js");
/* harmony import */ var _utils_form_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/form-utils */ "./assets/js/theme/common/utils/form-utils.js");
/* harmony import */ var _global_modal__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../global/modal */ "./assets/js/theme/global/modal.js");
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");







/**
 * If there are no options from bcapp, a text field will be sent. This will create a select element to hold options after the remote request.
 * @returns {jQuery|HTMLElement}
 */
function makeStateRequired(stateElement, context) {
  var attrs = lodash_transform__WEBPACK_IMPORTED_MODULE_2___default()(stateElement.prop('attributes'), function (result, item) {
    var ret = result;
    ret[item.name] = item.value;
    return ret;
  });
  var replacementAttributes = {
    id: attrs.id,
    'data-label': attrs['data-label'],
    "class": 'form-select',
    name: attrs.name,
    'data-field-type': attrs['data-field-type']
  };
  stateElement.replaceWith($('<select></select>', replacementAttributes));
  var $newElement = $('[data-field-type="State"]');
  var $hiddenInput = $('[name*="FormFieldIsText"]');
  if ($hiddenInput.length !== 0) {
    $hiddenInput.remove();
  }
  if ($newElement.prev().find('small').length === 0) {
    // String is injected from localizer
    $newElement.prev().append("<small>" + context.required + "</small>");
  } else {
    $newElement.prev().find('small').show();
  }
  return $newElement;
}

/**
 * If a country with states is the default, a select will be sent,
 * In this case we need to be able to switch to an input field and hide the required field
 */
function makeStateOptional(stateElement) {
  var attrs = lodash_transform__WEBPACK_IMPORTED_MODULE_2___default()(stateElement.prop('attributes'), function (result, item) {
    var ret = result;
    ret[item.name] = item.value;
    return ret;
  });
  var replacementAttributes = {
    type: 'text',
    id: attrs.id,
    'data-label': attrs['data-label'],
    "class": 'form-input',
    name: attrs.name,
    'data-field-type': attrs['data-field-type']
  };
  stateElement.replaceWith($('<input />', replacementAttributes));
  var $newElement = $('[data-field-type="State"]');
  if ($newElement.length !== 0) {
    (0,_utils_form_utils__WEBPACK_IMPORTED_MODULE_4__.insertStateHiddenField)($newElement);
    $newElement.prev().find('small').hide();
  }
  return $newElement;
}

/**
 * Adds the array of options from the remote request to the newly created select box.
 * @param {Object} statesArray
 * @param {jQuery} $selectElement
 * @param {Object} options
 */
function addOptions(statesArray, $selectElement, options) {
  var container = [];
  container.push("<option value=\"\">" + statesArray.prefix + "</option>");
  if (!lodash_isEmpty__WEBPACK_IMPORTED_MODULE_1___default()($selectElement)) {
    lodash_each__WEBPACK_IMPORTED_MODULE_0___default()(statesArray.states, function (stateObj) {
      if (options.useIdForStates) {
        container.push("<option value=\"" + stateObj.id + "\">" + stateObj.name + "</option>");
      } else {
        container.push("<option value=\"" + stateObj.name + "\">" + stateObj.name + "</option>");
      }
    });
    $selectElement.html(container.join(' '));
  }
}

/**
 *
 * @param {jQuery} stateElement
 * @param {Object} context
 * @param {Object} options
 * @param {Function} callback
 */
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(stateElement, context, options, callback) {
  if (context === void 0) {
    context = {};
  }
  /**
   * Backwards compatible for three parameters instead of four
   *
   * Available options:
   *
   * useIdForStates {Bool} - Generates states dropdown using id for values instead of strings
   */
  if (typeof options === 'function') {
    /* eslint-disable no-param-reassign */
    callback = options;
    options = {};
    /* eslint-enable no-param-reassign */
  }
  $('select[data-field-type="Country"]').on('change', function (event) {
    var countryName = $(event.currentTarget).val();
    if (countryName === '') {
      return;
    }
    _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_3__["default"].api.country.getByName(countryName, function (err, response) {
      if (err) {
        (0,_global_modal__WEBPACK_IMPORTED_MODULE_5__.showAlertModal)(context.state_error);
        return callback(err);
      }
      var $currentInput = $('[data-field-type="State"]');
      if (!lodash_isEmpty__WEBPACK_IMPORTED_MODULE_1___default()(response.data.states)) {
        // The element may have been replaced with a select, reselect it
        var $selectElement = makeStateRequired($currentInput, context);
        addOptions(response.data, $selectElement, options);
        callback(null, $selectElement);
      } else {
        var newElement = makeStateOptional($currentInput, context);
        callback(null, newElement);
      }
    });
  });
}

/***/ }),

/***/ "./assets/js/theme/common/utils/api.js":
/*!*********************************************!*\
  !*** ./assets/js/theme/common/utils/api.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   filterEmptyFilesFromForm: () => (/* binding */ filterEmptyFilesFromForm),
/* harmony export */   filterEmptyValuesFromForm: () => (/* binding */ filterEmptyValuesFromForm),
/* harmony export */   normalizeFormData: () => (/* binding */ normalizeFormData)
/* harmony export */ });
function _createForOfIteratorHelperLoose(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (t) return (t = t.call(r)).next.bind(t); if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var o = 0; return function () { return o >= r.length ? { done: !0 } : { done: !1, value: r[o++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
/**
 * This function removes any empty string values from the formData
 * @param formData: FormData object
 * @returns FormData object
*/
var filterEmptyValuesFromForm = function filterEmptyValuesFromForm(formData) {
  var res = new FormData();
  try {
    for (var _iterator = _createForOfIteratorHelperLoose(formData), _step; !(_step = _iterator()).done;) {
      var _step$value = _step.value,
        key = _step$value[0],
        val = _step$value[1];
      if (val !== '') {
        res.append(key, val);
      }
    }
  } catch (e) {
    console.log(e); // eslint-disable-line no-console
  }
  return res;
};

/**
 * https://stackoverflow.com/questions/49672992/ajax-request-fails-when-sending-formdata-including-empty-file-input-in-safari
 * Safari browser with jquery 3.3.1 has an issue uploading empty file parameters. This function removes any empty files from the form params
 * @param formData: FormData object
 * @returns FormData object
 */
var filterEmptyFilesFromForm = function filterEmptyFilesFromForm(formData) {
  var res = new FormData();
  try {
    for (var _iterator2 = _createForOfIteratorHelperLoose(formData), _step2; !(_step2 = _iterator2()).done;) {
      var _step2$value = _step2.value,
        key = _step2$value[0],
        val = _step2$value[1];
      if (!(val instanceof File) || val.name || val.size) {
        res.append(key, val);
      }
    }
  } catch (e) {
    console.error(e); // eslint-disable-line no-console
  }
  return res;
};

/**
 * This function removes empty string values and empty files from the formData
 * @param formData: FormData object
 * @returns FormData object
 */
var normalizeFormData = function normalizeFormData(formData) {
  return filterEmptyValuesFromForm(filterEmptyFilesFromForm(formData));
};

/***/ }),

/***/ "./assets/js/theme/common/utils/banner-utils.js":
/*!******************************************************!*\
  !*** ./assets/js/theme/common/utils/banner-utils.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _ie_helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ie-helpers */ "./assets/js/theme/common/utils/ie-helpers.js");

var bannerUtils = {
  dispatchProductBannerEvent: function dispatchProductBannerEvent(productAttributes) {
    if (!productAttributes.price || _ie_helpers__WEBPACK_IMPORTED_MODULE_0__.isBrowserIE) return;
    var price = 0;
    if (!productAttributes.price.price_range) {
      if (productAttributes.price.without_tax) {
        price = productAttributes.price.without_tax.value;
      }
      if (productAttributes.price.with_tax) {
        price = productAttributes.price.with_tax.value;
      }
    }
    var evt = new CustomEvent('bigcommerce.productpricechange', {
      detail: {
        amount: price
      }
    });
    window.dispatchEvent(evt);
  }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (bannerUtils);

/***/ }),

/***/ "./assets/js/theme/common/utils/form-utils.js":
/*!****************************************************!*\
  !*** ./assets/js/theme/common/utils/form-utils.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Validators: () => (/* binding */ Validators),
/* harmony export */   announceInputErrorMessage: () => (/* binding */ announceInputErrorMessage),
/* harmony export */   classifyForm: () => (/* binding */ classifyForm),
/* harmony export */   createPasswordValidationErrorTextObject: () => (/* binding */ createPasswordValidationErrorTextObject),
/* harmony export */   insertStateHiddenField: () => (/* binding */ insertStateHiddenField)
/* harmony export */ });
/* harmony import */ var lodash_capitalize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/capitalize */ "./node_modules/lodash/capitalize.js");
/* harmony import */ var lodash_capitalize__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_capitalize__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var lodash_camelCase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/camelCase */ "./node_modules/lodash/camelCase.js");
/* harmony import */ var lodash_camelCase__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_camelCase__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var lodash_includes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/includes */ "./node_modules/lodash/includes.js");
/* harmony import */ var lodash_includes__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash_includes__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _nod__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../nod */ "./assets/js/theme/common/nod.js");
/* harmony import */ var _models_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/forms */ "./assets/js/theme/common/models/forms.js");
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");





var inputTagNames = ['input', 'select', 'textarea'];
/**
 * Set up Object with Error Messages on Password Validation. Please use messages in mentioned order
 * @param {string} empty defines error text for empty field
 * @param {string} confirm defines error text for empty confirmation field
 * @param {string} mismatch defines error text if confirm passford mismatches passford field
 * @param {string} invalid defines error text for invalid password charaters sequence
 * @return {object} messages or default texts if nothing is providing
 */
var createPasswordValidationErrorTextObject = function createPasswordValidationErrorTextObject(empty, confirm, mismatch, invalid) {
  return {
    onEmptyPasswordErrorText: empty,
    onConfirmPasswordErrorText: confirm,
    onMismatchPasswordErrorText: mismatch,
    onNotValidPasswordErrorText: invalid
  };
};

/**
 * Apply class name to an input element on its type
 * @param {object} input
 * @param {string} formFieldClass
 * @return {object} Element itself
 */
function classifyInput(input, formFieldClass) {
  var $input = $(input);
  var $formField = $input.parent("." + formFieldClass);
  var tagName = $input.prop('tagName').toLowerCase();
  var className = formFieldClass + "--" + tagName;
  var specificClassName;

  // Input can be text/checkbox/radio etc...
  if (tagName === 'input') {
    var inputType = $input.prop('type');
    if (lodash_includes__WEBPACK_IMPORTED_MODULE_2___default()(['radio', 'checkbox', 'submit'], inputType)) {
      // ie: .form-field--checkbox, .form-field--radio
      className = formFieldClass + "--" + lodash_camelCase__WEBPACK_IMPORTED_MODULE_1___default()(inputType);
    } else {
      // ie: .form-field--input .form-field--inputText
      specificClassName = "" + className + lodash_capitalize__WEBPACK_IMPORTED_MODULE_0___default()(inputType);
    }
  }

  // Apply class modifier
  return $formField.addClass(className).addClass(specificClassName);
}

/**
 * Apply class name to each input element in a form based on its type
 * @example
 * // Before
 * <form id="form">
 *     <div class="form-field">
 *         <input type="text">
 *     </div>
 *     <div class="form-field">
 *         <select>...</select>
 *     </div>
 * </form>
 *
 * classifyForm('#form', { formFieldClass: 'form-field' });
 *
 * // After
 * <div class="form-field form-field--input form-field--inputText">...</div>
 * <div class="form-field form-field--select">...</div>
 *
 * @param {string|object} formSelector - selector or element
 * @param {object} options
 * @return {jQuery} Element itself
 */
function classifyForm(formSelector, options) {
  if (options === void 0) {
    options = {};
  }
  var $form = $(formSelector);
  var $inputs = $form.find(inputTagNames.join(', '));

  // Obtain options
  var _options = options,
    _options$formFieldCla = _options.formFieldClass,
    formFieldClass = _options$formFieldCla === void 0 ? 'form-field' : _options$formFieldCla;

  // Classify each input in a form
  $inputs.each(function (__, input) {
    classifyInput(input, formFieldClass);
  });
  return $form;
}

/**
 * Get id from given field
 * @param {object} $field JQuery field object
 * @return {string}
 */
function getFieldId($field) {
  var fieldId = $field.prop('name').match(/(\[.*\])/);
  if (fieldId && fieldId.length !== 0) {
    return fieldId[0];
  }
  return '';
}

/**
 * Insert hidden field after State/Province field
 * @param {object} $stateField JQuery field object
 */
function insertStateHiddenField($stateField) {
  var fieldId = getFieldId($stateField);
  var stateFieldAttrs = {
    type: 'hidden',
    name: "FormFieldIsText" + fieldId,
    value: '1'
  };
  $stateField.after($('<input />', stateFieldAttrs));
}

/**
 * Announce form input error message by screen reader
 * @param {params.element} dom input element where checking is happened
 * @param {params.result} result of validation check
 */
function announceInputErrorMessage(_ref) {
  var element = _ref.element,
    result = _ref.result;
  if (result) {
    return;
  }
  var activeInputContainer = $(element).parent();
  // the reason for using span tag is nod-validate lib
  // which does not add error message class while initialising form
  var errorMessage = $(activeInputContainer).find('span');
  if (errorMessage.length) {
    var $errMessage = $(errorMessage[0]);
    if (!$errMessage.attr('role')) {
      $errMessage.attr('role', 'alert');
    }
  }
}
var Validators = {
  /**
   * Sets up a new validation when the form is dirty
   * @param validator
   * @param field
   * @param {string} errorText describes errorMassage on email validation
   */
  setEmailValidation: function setEmailValidation(validator, field, errorText) {
    if (field) {
      validator.add({
        selector: field,
        validate: function validate(cb, val) {
          var result = _models_forms__WEBPACK_IMPORTED_MODULE_4__["default"].email(val);
          cb(result);
        },
        errorMessage: errorText
      });
    }
  },
  /**
   * Validate password fields
   * @param validator
   * @param passwordSelector
   * @param password2Selector
   * @param requirements
   * @param {object} errorTextsObject
   * @param isOptional
   */
  setPasswordValidation: function setPasswordValidation(validator, passwordSelector, password2Selector, requirements, _ref2, isOptional) {
    var onEmptyPasswordErrorText = _ref2.onEmptyPasswordErrorText,
      onConfirmPasswordErrorText = _ref2.onConfirmPasswordErrorText,
      onMismatchPasswordErrorText = _ref2.onMismatchPasswordErrorText,
      onNotValidPasswordErrorText = _ref2.onNotValidPasswordErrorText;
    var $password = $(passwordSelector);
    var passwordValidations = [{
      selector: passwordSelector,
      validate: function validate(cb, val) {
        var result = val.length;
        if (isOptional) {
          return cb(true);
        }
        cb(result);
      },
      errorMessage: onEmptyPasswordErrorText
    }, {
      selector: passwordSelector,
      validate: function validate(cb, val) {
        var result = val.match(new RegExp(requirements.alpha)) && val.match(new RegExp(requirements.numeric)) && val.length >= requirements.minlength;

        // If optional and nothing entered, it is valid
        if (isOptional && val.length === 0) {
          return cb(true);
        }
        cb(result);
      },
      errorMessage: onNotValidPasswordErrorText
    }, {
      selector: password2Selector,
      validate: function validate(cb, val) {
        var result = val.length;
        if (isOptional) {
          return cb(true);
        }
        cb(result);
      },
      errorMessage: onConfirmPasswordErrorText
    }, {
      selector: password2Selector,
      validate: function validate(cb, val) {
        var result = val === $password.val();
        cb(result);
      },
      errorMessage: onMismatchPasswordErrorText
    }];
    validator.add(passwordValidations);
  },
  /**
   * Validate password fields
   * @param {Nod} validator
   * @param {Object} selectors
   * @param {string} selectors.errorSelector
   * @param {string} selectors.fieldsetSelector
   * @param {string} selectors.formSelector
   * @param {string} selectors.maxPriceSelector
   * @param {string} selectors.minPriceSelector
   */
  setMinMaxPriceValidation: function setMinMaxPriceValidation(validator, selectors, priceValidationErrorTexts) {
    if (priceValidationErrorTexts === void 0) {
      priceValidationErrorTexts = {};
    }
    var errorSelector = selectors.errorSelector,
      fieldsetSelector = selectors.fieldsetSelector,
      formSelector = selectors.formSelector,
      maxPriceSelector = selectors.maxPriceSelector,
      minPriceSelector = selectors.minPriceSelector;

    // eslint-disable-next-line object-curly-newline
    var _priceValidationError = priceValidationErrorTexts,
      onMinPriceError = _priceValidationError.onMinPriceError,
      onMaxPriceError = _priceValidationError.onMaxPriceError,
      minPriceNotEntered = _priceValidationError.minPriceNotEntered,
      maxPriceNotEntered = _priceValidationError.maxPriceNotEntered,
      onInvalidPrice = _priceValidationError.onInvalidPrice;
    validator.configure({
      form: formSelector,
      preventSubmit: true,
      successClass: '_' // KLUDGE: Don't apply success class
    });
    validator.add({
      errorMessage: onMinPriceError,
      selector: minPriceSelector,
      validate: "min-max:" + minPriceSelector + ":" + maxPriceSelector
    });
    validator.add({
      errorMessage: onMaxPriceError,
      selector: maxPriceSelector,
      validate: "min-max:" + minPriceSelector + ":" + maxPriceSelector
    });
    validator.add({
      errorMessage: maxPriceNotEntered,
      selector: maxPriceSelector,
      validate: 'presence'
    });
    validator.add({
      errorMessage: minPriceNotEntered,
      selector: minPriceSelector,
      validate: 'presence'
    });
    validator.add({
      errorMessage: onInvalidPrice,
      selector: [minPriceSelector, maxPriceSelector],
      validate: 'min-number:0'
    });
    validator.setMessageOptions({
      selector: [minPriceSelector, maxPriceSelector],
      parent: fieldsetSelector,
      errorSpan: errorSelector
    });
  },
  /**
   * Sets up a new validation when the form is dirty
   * @param validator
   * @param field
   */
  setStateCountryValidation: function setStateCountryValidation(validator, field, errorText) {
    if (field) {
      validator.add({
        selector: field,
        validate: 'presence',
        errorMessage: errorText
      });
    }
  },
  /**
   * Removes classes from dirty form if previously checked
   * @param field
   */
  cleanUpStateValidation: function cleanUpStateValidation(field) {
    var $fieldClassElement = $("[data-type=\"" + field.data('fieldType') + "\"]");
    Object.keys(_nod__WEBPACK_IMPORTED_MODULE_3__["default"].classes).forEach(function (value) {
      if ($fieldClassElement.hasClass(_nod__WEBPACK_IMPORTED_MODULE_3__["default"].classes[value])) {
        $fieldClassElement.removeClass(_nod__WEBPACK_IMPORTED_MODULE_3__["default"].classes[value]);
      }
    });
  }
};


/***/ }),

/***/ "./assets/js/theme/common/utils/ie-helpers.js":
/*!****************************************************!*\
  !*** ./assets/js/theme/common/utils/ie-helpers.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   convertIntoArray: () => (/* binding */ convertIntoArray),
/* harmony export */   isBrowserIE: () => (/* binding */ isBrowserIE)
/* harmony export */ });
var isBrowserIE = !!document.documentMode;
var convertIntoArray = function convertIntoArray(collection) {
  return Array.prototype.slice.call(collection);
};

/***/ }),

/***/ "./assets/js/theme/common/utils/pagination-utils.js":
/*!**********************************************************!*\
  !*** ./assets/js/theme/common/utils/pagination-utils.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   wishlistPaginatorHelper: () => (/* binding */ wishlistPaginatorHelper)
/* harmony export */ });
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");
var changeWishlistPaginationLinks = function changeWishlistPaginationLinks(wishlistUrl) {
  for (var _len = arguments.length, paginationItems = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    paginationItems[_key - 1] = arguments[_key];
  }
  return $.each(paginationItems, function (_, $item) {
    var paginationLink = $item.children('.pagination-link');
    if ($item.length && !paginationLink.attr('href').includes('page=')) {
      var pageNumber = paginationLink.attr('href');
      paginationLink.attr('href', wishlistUrl + "page=" + pageNumber);
    }
  });
};

/**
 * helps to withdraw differences in structures around the stencil resource pagination
 */
var wishlistPaginatorHelper = function wishlistPaginatorHelper() {
  var $paginationList = $('.pagination-list');
  if (!$paginationList.length) return;
  var $nextItem = $('.pagination-item--next', $paginationList);
  var $prevItem = $('.pagination-item--previous', $paginationList);
  var currentHref = $('[data-pagination-current-page-link]').attr('href');
  var partialPaginationUrl = currentHref.split('page=').shift();
  changeWishlistPaginationLinks(partialPaginationUrl, $prevItem, $nextItem);
};

/***/ }),

/***/ "./assets/js/theme/common/utils/translations-utils.js":
/*!************************************************************!*\
  !*** ./assets/js/theme/common/utils/translations-utils.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createTranslationDictionary: () => (/* binding */ createTranslationDictionary),
/* harmony export */   translatePageBuilderValues: () => (/* binding */ translatePageBuilderValues)
/* harmony export */ });
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");
var TRANSLATIONS = 'translations';
var isTranslationDictionaryNotEmpty = function isTranslationDictionaryNotEmpty(dictionary) {
  return !!Object.keys(dictionary[TRANSLATIONS]).length;
};
var chooseActiveDictionary = function chooseActiveDictionary() {
  for (var i = 0; i < arguments.length; i++) {
    var dictionary = JSON.parse(i < 0 || arguments.length <= i ? undefined : arguments[i]);
    if (isTranslationDictionaryNotEmpty(dictionary)) {
      return dictionary;
    }
  }
};

/**
 * defines Translation Dictionary to use
 * @param context provides access to 3 validation JSONs from en.json:
 * validation_messages, validation_fallback_messages and default_messages
 * @returns {Object}
 */
var createTranslationDictionary = function createTranslationDictionary(context) {
  var validationDictionaryJSON = context.validationDictionaryJSON,
    validationFallbackDictionaryJSON = context.validationFallbackDictionaryJSON,
    validationDefaultDictionaryJSON = context.validationDefaultDictionaryJSON;
  var activeDictionary = chooseActiveDictionary(validationDictionaryJSON, validationFallbackDictionaryJSON, validationDefaultDictionaryJSON);
  var localizations = Object.values(activeDictionary[TRANSLATIONS]);
  var translationKeys = Object.keys(activeDictionary[TRANSLATIONS]).map(function (key) {
    return key.split('.').pop();
  });
  return translationKeys.reduce(function (acc, key, i) {
    acc[key] = localizations[i];
    return acc;
  }, {});
};
var defaultPageBuilderValues = {
  pdp_sale_badge_label: 'On Sale!',
  pdp_sold_out_label: 'Sold Out',
  'pdp-sale-price-label': 'Now:',
  'pdp-non-sale-price-label': 'Was:',
  'pdp-retail-price-label': 'MSRP:',
  'pdp-custom-fields-tab-label': 'Additional Information'
};

/**
 * defines Translation for values from page builder (locally could be found in config.json)
 */
var translatePageBuilderValues = function translatePageBuilderValues() {
  $('[data-page-builder-key]').each(function (_, selector) {
    var $item = $(selector);
    var itemText = $item.text().trim();
    var itemDefaultTranslation = $item.data('default-translation');
    if (itemText === defaultPageBuilderValues[$item.data('page-builder-key')] && itemText !== itemDefaultTranslation) {
      $item.text(itemDefaultTranslation);
    }
  });
};

/***/ }),

/***/ "./assets/js/theme/common/utils/url-utils.js":
/*!***************************************************!*\
  !*** ./assets/js/theme/common/utils/url-utils.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! url */ "./node_modules/url/url.js");
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");

var urlUtils = {
  getUrl: function getUrl() {
    return "" + window.location.pathname + window.location.search;
  },
  goToUrl: function goToUrl(url) {
    window.history.pushState({}, document.title, url);
    $(window).trigger('statechange');
  },
  replaceParams: function replaceParams(url, params) {
    var parsed = url__WEBPACK_IMPORTED_MODULE_0__.parse(url, true);
    var param;

    // Let the formatter use the query object to build the new url
    parsed.search = null;
    for (param in params) {
      if (params.hasOwnProperty(param)) {
        parsed.query[param] = params[param];
      }
    }
    return url__WEBPACK_IMPORTED_MODULE_0__.format(parsed);
  },
  buildQueryString: function buildQueryString(queryData) {
    var out = '';
    var key;
    for (key in queryData) {
      if (queryData.hasOwnProperty(key)) {
        if (Array.isArray(queryData[key])) {
          var ndx = void 0;
          for (ndx in queryData[key]) {
            if (queryData[key].hasOwnProperty(ndx)) {
              out += "&" + key + "=" + queryData[key][ndx];
            }
          }
        } else {
          out += "&" + key + "=" + queryData[key];
        }
      }
    }
    return out.substring(1);
  },
  parseQueryParams: function parseQueryParams(queryData) {
    var params = {};
    for (var i = 0; i < queryData.length; i++) {
      var temp = queryData[i].split('=');
      if (temp[0] in params) {
        if (Array.isArray(params[temp[0]])) {
          params[temp[0]].push(temp[1]);
        } else {
          params[temp[0]] = [params[temp[0]], temp[1]];
        }
      } else {
        params[temp[0]] = temp[1];
      }
    }
    return params;
  }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (urlUtils);

/***/ }),

/***/ "./assets/js/theme/global.js":
/*!***********************************!*\
  !*** ./assets/js/theme/global.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Global)
/* harmony export */ });
/* harmony import */ var focus_within_polyfill__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! focus-within-polyfill */ "./node_modules/focus-within-polyfill/dist/focus-within-polyfill.js");
/* harmony import */ var focus_within_polyfill__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(focus_within_polyfill__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _global_jquery_migrate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./global/jquery-migrate */ "./assets/js/theme/global/jquery-migrate.js");
/* harmony import */ var _common_select_option_plugin__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./common/select-option-plugin */ "./assets/js/theme/common/select-option-plugin.js");
/* harmony import */ var _common_select_option_plugin__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_common_select_option_plugin__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _page_manager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./page-manager */ "./assets/js/theme/page-manager.js");
/* harmony import */ var _global_currency_selector__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./global/currency-selector */ "./assets/js/theme/global/currency-selector.js");
/* harmony import */ var _global_foundation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./global/foundation */ "./assets/js/theme/global/foundation.js");
/* harmony import */ var _global_cart_preview__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./global/cart-preview */ "./assets/js/theme/global/cart-preview.js");
/* harmony import */ var _global_adminBar__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./global/adminBar */ "./assets/js/theme/global/adminBar.js");
/* harmony import */ var _common_utils_translations_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./common/utils/translations-utils */ "./assets/js/theme/common/utils/translations-utils.js");
/* harmony import */ var _global_svg_injector__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./global/svg-injector */ "./assets/js/theme/global/svg-injector.js");
/* harmony import */ var _common_carousel__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./common/carousel */ "./assets/js/theme/common/carousel/index.js");
/* harmony import */ var _halothemes_haloGlobal__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./halothemes/haloGlobal */ "./assets/js/theme/halothemes/haloGlobal.js");
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");
function _inheritsLoose(t, o) { t.prototype = Object.create(o.prototype), t.prototype.constructor = t, _setPrototypeOf(t, o); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }












var Global = /*#__PURE__*/function (_PageManager) {
  function Global() {
    return _PageManager.apply(this, arguments) || this;
  }
  _inheritsLoose(Global, _PageManager);
  var _proto = Global.prototype;
  _proto.onReady = function onReady() {
    var _this$context = this.context,
      channelId = _this$context.channelId,
      cartId = _this$context.cartId,
      productId = _this$context.productId,
      categoryId = _this$context.categoryId,
      secureBaseUrl = _this$context.secureBaseUrl,
      maintenanceModeSettings = _this$context.maintenanceModeSettings,
      adminBarLanguage = _this$context.adminBarLanguage,
      showAdminBar = _this$context.showAdminBar,
      isProductCardPresented = _this$context.isProductCardPresented,
      isProductListPresented = _this$context.isProductListPresented;
    if (!$('body').hasClass('page-type-cart')) {
      (0,_global_cart_preview__WEBPACK_IMPORTED_MODULE_6__["default"])(secureBaseUrl, cartId, this.context);
    }
    (0,_global_currency_selector__WEBPACK_IMPORTED_MODULE_4__["default"])(cartId);
    (0,_global_foundation__WEBPACK_IMPORTED_MODULE_5__["default"])($(document));
    if (showAdminBar) {
      (0,_global_adminBar__WEBPACK_IMPORTED_MODULE_7__["default"])(secureBaseUrl, channelId, maintenanceModeSettings, JSON.parse(adminBarLanguage), productId, categoryId);
    }
    if (isProductListPresented || isProductCardPresented) {
      (0,_common_utils_translations_utils__WEBPACK_IMPORTED_MODULE_8__.translatePageBuilderValues)();
    }
    (0,_global_svg_injector__WEBPACK_IMPORTED_MODULE_9__["default"])();
    (0,_common_carousel__WEBPACK_IMPORTED_MODULE_10__["default"])(this.context);
    (0,_halothemes_haloGlobal__WEBPACK_IMPORTED_MODULE_11__["default"])(this.context);
  };
  return Global;
}(_page_manager__WEBPACK_IMPORTED_MODULE_3__["default"]);


/***/ }),

/***/ "./assets/js/theme/global/adminBar.js":
/*!********************************************!*\
  !*** ./assets/js/theme/global/adminBar.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");
/**
 * Persistent admin bar for store administrators viewing the storefront
 * @param maintenanceMode
 * @param secureBaseUrl
 * @param channelId
 * @param adminBarLanguage
 * @param productId
 * @param categoryId
 */
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(secureBaseUrl, channelId, maintenanceMode, adminBarLanguage, productId, categoryId) {
  if (channelId === void 0) {
    channelId = 1;
  }
  if (maintenanceMode === void 0) {
    maintenanceMode = {};
  }
  var lang = adminBarLanguage.translations;
  var password = maintenanceMode.password || false;
  var isMaintenanceMode = maintenanceMode.header && !password || false;
  function isInIframe() {
    try {
      return window.location !== window.parent.location;
    } catch (e) {
      return true;
    }
  }

  // eslint-disable-next-line no-shadow
  function getContextualMatch(productId, categoryId) {
    if (productId && parseInt(productId, 10)) {
      return {
        type: 'product',
        url: "/manage/products/" + productId + "/edit"
      };
    } else if (categoryId && parseInt(categoryId, 10)) {
      return {
        type: 'category',
        url: "/manage/products/categories/" + categoryId + "/edit"
      };
    }
  }
  function doesNotHaveAdminCookie() {
    return document.cookie.indexOf('ADMIN_BAR=1') === -1;
  }

  // Set admin cookie if appropriate
  if (window.URLSearchParams && window.URL && new URL(document.location).searchParams.get('ctk')) {
    document.cookie = 'ADMIN_BAR=1; path=/';
  }

  // Return if isInIframe is true (inside page builder) or if there is no admin cookie
  if (doesNotHaveAdminCookie() || isInIframe()) {
    return;
  }
  var url = encodeURIComponent((new URL(window.location.href).pathname + window.location.search).replace(/^\/|\/$/g, ''));
  var contextualMatch = getContextualMatch(productId, categoryId);
  var $element = $('<div>', {
    "class": 'adminBar'
  });
  $element.html("<div class=\"adminBar-logo\">\n        <a href=\"" + secureBaseUrl + "/manage/dashboard\"><svg><use xlink:href=\"#icon-logo-small\"></use></svg></a></div>\n        <div class=\"adminBar-content\">\n        " + (password ? "<div class=\"adminBar-private\">\n                    <span class=\"preview\">" + lang['admin.prelaunch_header'] + " <strong>" + password + "</strong></span>\n                </div>" : '') + "\n        " + (isMaintenanceMode ? "<div class=\"adminBar-private\">\n                <span>" + lang['admin.maintenance_header'] + "</span>\n                <span class=\"svg-icon svg-baseline adminBar-large tooltip\">\n                    <svg><use xlink:href=\"#icon-admin-tooltip\"></use></svg>\n                    <span class=\"tooltiptext tooltip-bottom\">" + lang['admin.maintenance_tooltip'] + "</span>\n                </span>\n                <a href=\"?showStore=no\" class=\"adminBar-large\">" + lang['admin.maintenance_showstore_link'] + " <span class=\"svg-icon svg-baseline\">\n                    <svg style=\"height: 0.8em;\"><use xlink:href=\"#icon-admin-link\"></use></svg>\n                </span></a>\n         </div>" : '') + "\n         <div class=\"adminBar-links\">\n            " + (contextualMatch ? "<a href='" + secureBaseUrl + contextualMatch.url + "' target=\"_blank\">\n                <span class=\"svg-icon svg-baseline\">\n                    <svg><use xlink:href=\"#icon-admin-edit\"></use></svg>\n                </span><span class=\"adminBar-large\"> Edit " + contextualMatch.type + " information</span></a>" : '') + "\n            <a href=\"" + secureBaseUrl + "/manage/page-builder?channelId=" + channelId + "&redirectIframeUrl=" + url + "\" target=\"_blank\">\n                <span class=\"svg-icon svg-baseline\">\n                    <svg><use xlink:href=\"#icon-admin-brush\"></use></svg>\n                </span><span class=\"adminBar-large\"> " + lang['admin.page_builder_link'] + "</span>\n            </a>\n         </div>\n         <div class=\"adminBar-close\" id=\"close-admin-bar\">\n            <span class=\"svg-icon svg-baseline\">\n                <svg><use xlink:href=\"#icon-admin-close\"></use></svg>\n            </span>\n         </div>\n        </div>");
  $('body').addClass('hasAdminBar');
  $('body').append($element);
  $('#close-admin-bar').click(function () {
    $('body').removeClass('hasAdminBar');
    $('.adminBar').remove();
    document.cookie = 'ADMIN_BAR=0; path=/';
  });
}

/***/ }),

/***/ "./assets/js/theme/global/cart-preview.js":
/*!************************************************!*\
  !*** ./assets/js/theme/global/cart-preview.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CartPreviewEvents: () => (/* binding */ CartPreviewEvents),
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var foundation_sites_js_foundation_foundation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! foundation-sites/js/foundation/foundation */ "./node_modules/foundation-sites/js/foundation/foundation.js");
/* harmony import */ var foundation_sites_js_foundation_foundation__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(foundation_sites_js_foundation_foundation__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var foundation_sites_js_foundation_foundation_dropdown__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! foundation-sites/js/foundation/foundation.dropdown */ "./node_modules/foundation-sites/js/foundation/foundation.dropdown.js");
/* harmony import */ var foundation_sites_js_foundation_foundation_dropdown__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(foundation_sites_js_foundation_foundation_dropdown__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @bigcommerce/stencil-utils */ "./node_modules/@bigcommerce/stencil-utils/src/main.js");
/* harmony import */ var _sweet_alert__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./sweet-alert */ "./assets/js/theme/global/sweet-alert.js");
/* harmony import */ var _halothemes_haloQuickEditCart__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../halothemes/haloQuickEditCart */ "./assets/js/theme/halothemes/haloQuickEditCart.js");
/* harmony import */ var _halothemes_haloCalculateFreeShipping__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../halothemes/haloCalculateFreeShipping */ "./assets/js/theme/halothemes/haloCalculateFreeShipping.js");
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");






var CartPreviewEvents = {
  close: 'closed.fndtn.dropdown',
  open: 'opened.fndtn.dropdown'
};
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(secureBaseUrl, cartId, context) {
  var loadingClass = 'is-loading';
  var $cart = $('[data-cart-preview]');
  var $cartDropdown = $('#halo-cart-sidebar .halo-sidebar-wrapper');
  var $cartLoading = $('<div class="loadingOverlay"></div>');
  var $body = $('body');
  if (window.ApplePaySession) {
    $cartDropdown.addClass('apple-pay-supported');
  }
  if (!$('body').hasClass('page-type-cart')) {
    (0,_halothemes_haloQuickEditCart__WEBPACK_IMPORTED_MODULE_4__["default"])(context);
  }
  $body.on('cart-quantity-update', function (event, quantity) {
    $('.cart-quantity').text(quantity).toggleClass('countPill--positive', quantity > 0);
    if (_bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_2__["default"].tools.storage.localStorageAvailable()) {
      localStorage.setItem('cart-quantity', quantity);
    }
  });
  $cart.on('click', function (event) {
    var options = {
      template: 'common/cart-preview'
    };
    event.preventDefault();
    if (!$('.page-type-cart').length) {
      $body.toggleClass('openCartSidebar');
    }
    $cartDropdown.addClass(loadingClass).html($cartLoading);
    $cartLoading.show();
    _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_2__["default"].api.cart.getContent(options, function (err, response) {
      $cartDropdown.removeClass(loadingClass).html(response);
      $cartLoading.hide();
      (0,_halothemes_haloCalculateFreeShipping__WEBPACK_IMPORTED_MODULE_5__["default"])(context);
    });
  });
  var quantity = 0;
  if (cartId) {
    // Get existing quantity from localStorage if found
    if (_bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_2__["default"].tools.storage.localStorageAvailable()) {
      if (localStorage.getItem('cart-quantity')) {
        quantity = Number(localStorage.getItem('cart-quantity'));
        $body.trigger('cart-quantity-update', quantity);
      }
    }

    // Get updated cart quantity from the Cart API
    var cartQtyPromise = new Promise(function (resolve, reject) {
      _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_2__["default"].api.cart.getCartQuantity({
        baseUrl: secureBaseUrl,
        cartId: cartId
      }, function (err, qty) {
        if (err) {
          // If this appears to be a 404 for the cart ID, set cart quantity to 0
          if (err === 'Not Found') {
            resolve(0);
          } else {
            reject(err);
          }
        }
        resolve(qty);
      });
    });

    // If the Cart API gives us a different quantity number, update it
    cartQtyPromise.then(function (qty) {
      quantity = qty;
      $body.trigger('cart-quantity-update', quantity);
    });
  } else {
    $body.trigger('cart-quantity-update', quantity);
  }
  $(document).on('click', function (event) {
    if ($(event.target).closest('[data-cart-preview]').length === 0 && $(event.target).closest('#halo-cart-sidebar').length === 0 && $(event.target).closest('#modal').length === 0 && $(event.target).closest('[data-cart-edit-item-remove]').length === 0 && $(event.target).closest('.quickShopPopup').length === 0) {
      $('body').removeClass('openCartSidebar');
    }
  });
  $(document).on('click', '.halo-cart-sidebar .halo-sidebar-header .close', function (event) {
    event.preventDefault();
    $('body').removeClass('openCartSidebar');
  });
  $(document).on('click', '.previewCart .previewCartItem-remove', function (event) {
    event.preventDefault();
    var itemId = $(event.currentTarget).data('cartItemid');
    cartRemoveItem(itemId);
  });
  $(document).on('focus', '.previewCart .form-input--incrementTotal', function (event) {
    var $target = $(event.currentTarget);
    $target.data('preVal', $target.val());
  });
  $(document).on('change', '.previewCart .form-input--incrementTotal', function (event) {
    var $target = $(event.currentTarget);
    var preVal = $target.data('preVal');
    event.preventDefault();
    cartUpdateQtyTextChange($target, preVal);
  });
  $(document).on('click', '.previewCartItem-qty [data-cart-update]', function (event) {
    var $target = $(event.currentTarget);
    event.preventDefault();

    // update cart quantity
    cartUpdate($target);
  });
  function cartUpdate($target) {
    var itemId = $target.data('cart-itemid');
    var $el = $("#qty-" + itemId);
    var oldQty = parseInt($el.val(), 10);
    var maxQty = parseInt($el.data('quantityMax'), 10);
    var minQty = parseInt($el.data('quantityMin'), 10);
    var minError = $el.data('quantityMinError');
    var maxError = $el.data('quantityMaxError');
    var newQty = $target.data('action') === 'inc' ? oldQty + 1 : oldQty - 1;
    var invalidEntry;

    // Does not quality for min/max quantity
    if (!newQty) {
      invalidEntry = newQty;
      $el.val(oldQty);
      return _sweet_alert__WEBPACK_IMPORTED_MODULE_3__["default"].fire({
        text: invalidEntry + " is not a valid entry",
        icon: 'error'
      });
    } else if (newQty < minQty) {
      return _sweet_alert__WEBPACK_IMPORTED_MODULE_3__["default"].fire({
        text: minError,
        icon: 'error'
      });
    } else if (maxQty > 0 && newQty > maxQty) {
      return _sweet_alert__WEBPACK_IMPORTED_MODULE_3__["default"].fire({
        text: maxError,
        icon: 'error'
      });
    } else {
      _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_2__["default"].api.cart.itemUpdate(itemId, newQty, function (err, response) {
        if (response.data.status === 'succeed') {
          // if the quantity is changed "1" from "0", we have to remove the row.
          var remove = newQty === 0;
          refreshContent(remove);
        } else {
          $el.val(oldQty);
          _sweet_alert__WEBPACK_IMPORTED_MODULE_3__["default"].fire({
            text: response.data.errors.join('\n'),
            icon: 'error'
          });
        }
      });
    }
  }
  function cartUpdateQtyTextChange($target, preVal) {
    if (preVal === void 0) {
      preVal = null;
    }
    var itemId = $target.data('cart-itemid');
    var $el = $("#qty-" + itemId);
    var maxQty = parseInt($el.data('quantityMax'), 10);
    var minQty = parseInt($el.data('quantityMin'), 10);
    var oldQty = preVal !== null ? preVal : minQty;
    var minError = $el.data('quantityMinError');
    var maxError = $el.data('quantityMaxError');
    var newQty = parseInt(Number($el.val()), 10);
    var invalidEntry;

    // Does not quality for min/max quantity
    if (!newQty) {
      invalidEntry = $el.val();
      $el.val(oldQty);
      return _sweet_alert__WEBPACK_IMPORTED_MODULE_3__["default"].fire({
        text: invalidEntry + " is not a valid entry",
        icon: 'error'
      });
    } else if (newQty < minQty) {
      $el.val(oldQty);
      return _sweet_alert__WEBPACK_IMPORTED_MODULE_3__["default"].fire({
        text: minError,
        icon: 'error'
      });
    } else if (maxQty > 0 && newQty > maxQty) {
      $el.val(oldQty);
      return _sweet_alert__WEBPACK_IMPORTED_MODULE_3__["default"].fire({
        text: maxError,
        icon: 'error'
      });
    }
    _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_2__["default"].api.cart.itemUpdate(itemId, newQty, function (err, response) {
      if (response.data.status === 'succeed') {
        // if the quantity is changed "1" from "0", we have to remove the row.
        var remove = newQty === 0;
        refreshContent(remove);
      } else {
        $el.val(oldQty);
        _sweet_alert__WEBPACK_IMPORTED_MODULE_3__["default"].fire({
          text: response.data.errors.join('\n'),
          icon: 'error'
        });
      }
    });
  }
  function cartRemoveItem(itemId) {
    _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_2__["default"].api.cart.itemRemove(itemId, function (err, response) {
      if (response.data.status === 'succeed') {
        refreshContent(true);
      } else {
        _sweet_alert__WEBPACK_IMPORTED_MODULE_3__["default"].fire({
          text: response.data.errors.join('\n'),
          icon: 'error'
        });
      }
    });
  }
  function updateCartContent() {
    var options = {
      template: 'common/cart-preview'
    };
    $cartDropdown.addClass(loadingClass).prepend($cartLoading);
    $cartLoading.show();
    _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_2__["default"].api.cart.getContent(options, function (err, response) {
      $cartDropdown.removeClass(loadingClass).html(response);
      $cartLoading.hide();
      var quantity = $(response).find('[data-cart-quantity]').data('cartQuantity') || $('[data-cart-quantity]').data('cartQuantity') || 0;
      $body.trigger('cart-quantity-update', quantity);
      (0,_halothemes_haloCalculateFreeShipping__WEBPACK_IMPORTED_MODULE_5__["default"])(context);
    });
  }
  function refreshContent(remove) {
    var options = {
      template: 'common/cart-preview'
    };
    $cartDropdown.addClass(loadingClass).prepend($cartLoading);
    $cartLoading.show();
    _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_2__["default"].api.cart.getContent(options, function (err, response) {
      $cartDropdown.removeClass(loadingClass).html(response);
      $cartLoading.hide();
      var quantity = $(response).find('[data-cart-quantity]').data('cartQuantity') || $('[data-cart-quantity]').data('cartQuantity') || 0;
      $body.trigger('cart-quantity-update', quantity);
      (0,_halothemes_haloCalculateFreeShipping__WEBPACK_IMPORTED_MODULE_5__["default"])(context);
    });
  }
}

/***/ }),

/***/ "./assets/js/theme/global/cookieNotification.js":
/*!******************************************************!*\
  !*** ./assets/js/theme/global/cookieNotification.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @bigcommerce/stencil-utils */ "./node_modules/@bigcommerce/stencil-utils/src/main.js");
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");


/**
 * European websites must notify users of cookies to comply with European Union law.
 * This will alert shoppers that this website uses cookies.
 */
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  /*
  // Here you can override the default browser alert box by hooking to the 'cookie-privacy-notification' hook.
  utils.hooks.on('cookie-privacy-notification', (event, privacyMessage) => {
      // You can make your own custom modal or alert box appear in your theme using the privacyMessage provided
      myCustomAlert(privacyMessage);
       // Call event.preventDefault() to prevent the default browser alert from occurring in stencil-utils
      event.preventDefault();
  });
  */

  var $privacyDialog = $('.cookieMessage');
  if (document.cookie.indexOf('ACCEPT_COOKIE_USAGE') === -1) {
    $privacyDialog.show();
  }
  $('body').on('click', '[data-privacy-accept]', function () {
    var date = new Date();
    date.setDate(date.getDate() + 365);
    document.cookie = "ACCEPT_COOKIE_USAGE=1;expires=" + date.toGMTString() + "; path=/";
    _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_0__["default"].hooks.emit('cookie-privacy-accepted');
    $privacyDialog.hide();
  });
}

/***/ }),

/***/ "./assets/js/theme/global/currency-selector.js":
/*!*****************************************************!*\
  !*** ./assets/js/theme/global/currency-selector.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _sweet_alert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sweet-alert */ "./assets/js/theme/global/sweet-alert.js");
/* harmony import */ var _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @bigcommerce/stencil-utils */ "./node_modules/@bigcommerce/stencil-utils/src/main.js");
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");


/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(cartId) {
  function changeCurrency(url, currencyCode) {
    $.ajax({
      url: url,
      contentType: 'application/json',
      method: 'POST',
      data: JSON.stringify({
        currencyCode: currencyCode
      })
    }).done(function () {
      window.location.reload();
    }).fail(function (e) {
      _sweet_alert__WEBPACK_IMPORTED_MODULE_0__["default"].fire({
        text: JSON.parse(e.responseText).error,
        icon: 'warning',
        showCancelButton: true
      });
    });
  }
  $('[data-cart-currency-switch-url]').on('click', function (event) {
    var currencySessionSwitcher = event.currentTarget.href;
    if (!cartId) {
      return;
    }
    event.preventDefault();
    _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_1__["default"].api.cart.getCart({
      cartId: cartId
    }, function (err, response) {
      if (err || response === undefined) {
        window.location.href = currencySessionSwitcher;
        return;
      }
      var showWarning = response.discounts.some(function (discount) {
        return discount.discountedAmount > 0;
      }) || response.coupons.length > 0 || response.lineItems.giftCertificates.length > 0;
      if (showWarning) {
        _sweet_alert__WEBPACK_IMPORTED_MODULE_0__["default"].fire({
          text: $(event.target).data('warning'),
          icon: 'warning',
          showCancelButton: true
        }).then(function (result) {
          if (result.value && result.value === true) {
            changeCurrency($(event.target).data('cart-currency-switch-url'), $(event.target).data('currency-code'));
          }
        });
      } else {
        changeCurrency($(event.target).data('cart-currency-switch-url'), $(event.target).data('currency-code'));
      }
    });
  });
}

/***/ }),

/***/ "./assets/js/theme/global/foundation.js":
/*!**********************************************!*\
  !*** ./assets/js/theme/global/foundation.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var foundation_sites_js_foundation_foundation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! foundation-sites/js/foundation/foundation */ "./node_modules/foundation-sites/js/foundation/foundation.js");
/* harmony import */ var foundation_sites_js_foundation_foundation__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(foundation_sites_js_foundation_foundation__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var foundation_sites_js_foundation_foundation_dropdown__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! foundation-sites/js/foundation/foundation.dropdown */ "./node_modules/foundation-sites/js/foundation/foundation.dropdown.js");
/* harmony import */ var foundation_sites_js_foundation_foundation_dropdown__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(foundation_sites_js_foundation_foundation_dropdown__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var foundation_sites_js_foundation_foundation_reveal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! foundation-sites/js/foundation/foundation.reveal */ "./node_modules/foundation-sites/js/foundation/foundation.reveal.js");
/* harmony import */ var foundation_sites_js_foundation_foundation_reveal__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(foundation_sites_js_foundation_foundation_reveal__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var foundation_sites_js_foundation_foundation_tab__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! foundation-sites/js/foundation/foundation.tab */ "./node_modules/foundation-sites/js/foundation/foundation.tab.js");
/* harmony import */ var foundation_sites_js_foundation_foundation_tab__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(foundation_sites_js_foundation_foundation_tab__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _modal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modal */ "./assets/js/theme/global/modal.js");
/* harmony import */ var _reveal_close__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./reveal-close */ "./assets/js/theme/global/reveal-close.js");






/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__($element) {
  $element.foundation({
    dropdown: {
      // specify the class used for active dropdowns
      active_class: 'is-open'
    },
    reveal: {
      bg_class: 'modal-background',
      dismiss_modal_class: 'modal-close',
      close_on_background_click: true
    },
    tab: {
      active_class: 'is-active'
    }
  });
  (0,_modal__WEBPACK_IMPORTED_MODULE_4__["default"])('[data-reveal]', {
    $context: $element
  });
  (0,_reveal_close__WEBPACK_IMPORTED_MODULE_5__["default"])('[data-reveal-close]', {
    $context: $element
  });
}

/***/ }),

/***/ "./assets/js/theme/global/jquery-migrate.js":
/*!**************************************************!*\
  !*** ./assets/js/theme/global/jquery-migrate.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _jquery_migrate_init__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./jquery-migrate/init */ "./assets/js/theme/global/jquery-migrate/init.js");
/* harmony import */ var _jquery_migrate_traversing__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./jquery-migrate/traversing */ "./assets/js/theme/global/jquery-migrate/traversing.js");
/* harmony import */ var _jquery_migrate_data__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./jquery-migrate/data */ "./assets/js/theme/global/jquery-migrate/data.js");
/* harmony import */ var _jquery_migrate_event__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./jquery-migrate/event */ "./assets/js/theme/global/jquery-migrate/event.js");
// Needed because we use Foundation 5.5, which expects jQuery 2.x. However,
// rather than bringing in all of jquery-migrate, we're cherry picking individual
// fixes needed for Foundation.




(0,_jquery_migrate_init__WEBPACK_IMPORTED_MODULE_0__["default"])();
(0,_jquery_migrate_traversing__WEBPACK_IMPORTED_MODULE_1__["default"])();
(0,_jquery_migrate_data__WEBPACK_IMPORTED_MODULE_2__["default"])();
(0,_jquery_migrate_event__WEBPACK_IMPORTED_MODULE_3__["default"])();

/***/ }),

/***/ "./assets/js/theme/global/jquery-migrate/data.js":
/*!*******************************************************!*\
  !*** ./assets/js/theme/global/jquery-migrate/data.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* provided dependency */ var jQuery = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");
// From https://github.com/jquery/jquery-migrate/blob/master/src/data.js
//
// https://jquery.com/upgrade-guide/3.0/#data

/* eslint-disable prefer-rest-params, func-names */
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  var oldData = jQuery.data;
  jQuery.data = function (elem, name, value) {
    var curData;

    // Name can be an object, and each entry in the object is meant to be set as data
    if (name && typeof name === 'object' && arguments.length === 2) {
      curData = jQuery.hasData(elem) && oldData.call(this, elem);
      var sameKeys = {};
      for (var key in name) {
        if (key !== jQuery.camelCase(key)) {
          curData[key] = name[key];
        } else {
          sameKeys[key] = name[key];
        }
      }
      oldData.call(this, elem, sameKeys);
      return name;
    }

    // If the name is transformed, look for the un-transformed name in the data object
    if (name && typeof name === 'string' && name !== jQuery.camelCase(name)) {
      curData = jQuery.hasData(elem) && oldData.call(this, elem);
      if (curData && name in curData) {
        if (arguments.length > 2) {
          curData[name] = value;
        }
        return curData[name];
      }
    }
    return oldData.apply(this, arguments);
  };
}
/* eslint-enable prefer-rest-params */

/***/ }),

/***/ "./assets/js/theme/global/jquery-migrate/event.js":
/*!********************************************************!*\
  !*** ./assets/js/theme/global/jquery-migrate/event.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* provided dependency */ var jQuery = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");
// From https://github.com/jquery/jquery-migrate/blob/master/src/event.js
//
// https://jquery.com/upgrade-guide/3.0/#breaking-change-load-unload-and-error-removed

/* eslint-disable prefer-rest-params */
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  jQuery.each(['load', 'unload', 'error'], function (_, name) {
    var oldLoad = jQuery.fn.load;
    jQuery.fn[name] = function handler() {
      var args = Array.prototype.slice.call(arguments, 0);

      // If this is an ajax load() the first arg should be the string URL;
      // technically this could also be the "Anything" arg of the event .load()
      // which just goes to show why this dumb signature has been deprecated!
      // jQuery custom builds that exclude the Ajax module justifiably die here.
      if (name === 'load' && typeof args[0] === 'string') {
        return oldLoad.apply(this, args);
      }
      args.splice(0, 0, name);
      if (arguments.length) {
        return this.on.apply(this, args);
      }

      // Use .triggerHandler here because:
      // - load and unload events don't need to bubble, only applied to window or image
      // - error event should not bubble to window, although it does pre-1.7
      // See http://bugs.jquery.com/ticket/11820
      this.triggerHandler.apply(this, args);
      return this;
    };
  });
}
/* eslint-enable prefer-rest-params */

/***/ }),

/***/ "./assets/js/theme/global/jquery-migrate/init.js":
/*!*******************************************************!*\
  !*** ./assets/js/theme/global/jquery-migrate/init.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* provided dependency */ var jQuery = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");
// From https://github.com/jquery/jquery-migrate/blob/1.x-stable/src/core.js
//
// https://jquery.com/upgrade-guide/3.0/#breaking-change-deprecated-context-and-selector-properties-removed

/* eslint-disable prefer-rest-params, func-names */
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  var oldInit = jQuery.fn.init;
  jQuery.fn.init = function (selector, context) {
    var ret = oldInit.apply(this, arguments);

    // Fill in selector and context properties so .live() works
    if (selector && selector.selector !== undefined) {
      // A jQuery object, copy its properties
      ret.selector = selector.selector;
      ret.context = selector.context;
    } else {
      ret.selector = typeof selector === 'string' ? selector : '';
      if (selector) {
        ret.context = selector.nodeType ? selector : context || document;
      }
    }
    return ret;
  };
  jQuery.fn.init.prototype = jQuery.fn;
}
/* eslint-enable prefer-rest-params */

/***/ }),

/***/ "./assets/js/theme/global/jquery-migrate/traversing.js":
/*!*************************************************************!*\
  !*** ./assets/js/theme/global/jquery-migrate/traversing.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* provided dependency */ var jQuery = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");
// From https://github.com/jquery/jquery-migrate/blob/1.x-stable/src/traversing.js
//
// https://jquery.com/upgrade-guide/3.0/#breaking-change-deprecated-context-and-selector-properties-removed

/* eslint-disable prefer-rest-params, func-names */
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  var oldFnFind = jQuery.fn.find;
  jQuery.fn.find = function (selector) {
    var ret = oldFnFind.apply(this, arguments);
    ret.context = this.context;
    ret.selector = this.selector ? this.selector + " " + selector : selector;
    return ret;
  };
}
/* eslint-enable prefer-rest-params */

/***/ }),

/***/ "./assets/js/theme/global/loading-progress-bar.js":
/*!********************************************************!*\
  !*** ./assets/js/theme/global/loading-progress-bar.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var nanobar__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! nanobar */ "./node_modules/nanobar/nanobar.min.js");
/* harmony import */ var nanobar__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(nanobar__WEBPACK_IMPORTED_MODULE_0__);
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  // Create the nanobar instance
  var nanobar = new (nanobar__WEBPACK_IMPORTED_MODULE_0___default())();

  // Timer for moving progress bar during ajax calls
  var timer = null;
  var current = 0;
  function clearTimer() {
    if (timer) {
      clearInterval(timer);
      timer = null;
    }
  }
  function setTimer() {
    clearTimer();
    current = 0;
    timer = setInterval(function () {
      current += 3;
      if (current <= 100) {
        nanobar.go(current);
      } else {
        clearTimer();
      }
    }, 50);
  }

  // Attach global jquery handlers to listen for ajax start
  $(document).ajaxSend(function () {
    setTimer();
  });
  $(document).ajaxComplete(function () {
    nanobar.go(100);
    clearTimer();
  });
}

/***/ }),

/***/ "./assets/js/theme/global/menu.js":
/*!****************************************!*\
  !*** ./assets/js/theme/global/menu.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ menuFactory)
/* harmony export */ });
/* harmony import */ var _common_collapsible__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/collapsible */ "./assets/js/theme/common/collapsible.js");
/* harmony import */ var _common_collapsible_group__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/collapsible-group */ "./assets/js/theme/common/collapsible-group.js");
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");


var PLUGIN_KEY = 'menu';

/*
 * Manage the behaviour of a menu
 * @param {jQuery} $menu
 */
var Menu = /*#__PURE__*/function () {
  function Menu($menu) {
    this.$menu = $menu;
    this.$body = $('body');
    this.hasMaxMenuDisplayDepth = this.$body.find('.navPages-list').hasClass('navPages-list-depth-max');

    // Init collapsible
    this.collapsibles = (0,_common_collapsible__WEBPACK_IMPORTED_MODULE_0__["default"])('[data-collapsible]', {
      $context: this.$menu
    });
    this.collapsibleGroups = (0,_common_collapsible_group__WEBPACK_IMPORTED_MODULE_1__["default"])($menu);

    // Auto-bind
    this.onMenuClick = this.onMenuClick.bind(this);
    this.onDocumentClick = this.onDocumentClick.bind(this);

    // Listen
    this.bindEvents();
  }
  var _proto = Menu.prototype;
  _proto.collapseAll = function collapseAll() {
    this.collapsibles.forEach(function (collapsible) {
      return collapsible.close();
    });
    this.collapsibleGroups.forEach(function (group) {
      return group.close();
    });
  };
  _proto.collapseNeighbors = function collapseNeighbors($neighbors) {
    var $collapsibles = (0,_common_collapsible__WEBPACK_IMPORTED_MODULE_0__["default"])('[data-collapsible]', {
      $context: $neighbors
    });
    $collapsibles.forEach(function ($collapsible) {
      return $collapsible.close();
    });
  };
  _proto.bindEvents = function bindEvents() {
    this.$menu.on('click', this.onMenuClick);
    this.$body.on('click', this.onDocumentClick);
  };
  _proto.unbindEvents = function unbindEvents() {
    this.$menu.off('click', this.onMenuClick);
    this.$body.off('click', this.onDocumentClick);
  };
  _proto.onMenuClick = function onMenuClick(event) {
    event.stopPropagation();
    if (this.hasMaxMenuDisplayDepth) {
      var $neighbors = $(event.target).parent().siblings();
      this.collapseNeighbors($neighbors);
    }
  };
  _proto.onDocumentClick = function onDocumentClick() {
    this.collapseAll();
  };
  return Menu;
}();
/*
 * Create a new Menu instance
 * @param {string} [selector]
 * @return {Menu}
 */
function menuFactory(selector) {
  if (selector === void 0) {
    selector = "[data-" + PLUGIN_KEY + "]";
  }
  var $menu = $(selector).eq(0);
  var instanceKey = PLUGIN_KEY + "Instance";
  var cachedMenu = $menu.data(instanceKey);
  if (cachedMenu instanceof Menu) {
    return cachedMenu;
  }
  var menu = new Menu($menu);
  $menu.data(instanceKey, menu);
  return menu;
}

/***/ }),

/***/ "./assets/js/theme/global/mobile-menu-toggle.js":
/*!******************************************************!*\
  !*** ./assets/js/theme/global/mobile-menu-toggle.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MobileMenuToggle: () => (/* binding */ MobileMenuToggle),
/* harmony export */   "default": () => (/* binding */ mobileMenuToggleFactory)
/* harmony export */ });
/* harmony import */ var lodash_extend__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/extend */ "./node_modules/lodash/extend.js");
/* harmony import */ var lodash_extend__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_extend__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _common_media_query_list__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/media-query-list */ "./assets/js/theme/common/media-query-list.js");
/* harmony import */ var _cart_preview__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cart-preview */ "./assets/js/theme/global/cart-preview.js");
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");

function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }


var PLUGIN_KEY = {
  CAMEL: 'mobileMenuToggle',
  SNAKE: 'mobile-menu-toggle'
};
function optionsFromData($element) {
  var mobileMenuId = $element.data(PLUGIN_KEY.CAMEL);
  return {
    menuSelector: mobileMenuId && "#" + mobileMenuId
  };
}

/*
 * Manage the behaviour of a mobile menu
 * @param {jQuery} $toggle
 * @param {Object} [options]
 * @param {Object} [options.headerSelector]
 * @param {Object} [options.menuSelector]
 * @param {Object} [options.scrollViewSelector]
 */
var MobileMenuToggle = /*#__PURE__*/function () {
  function MobileMenuToggle($toggle, _temp) {
    var _ref = _temp === void 0 ? {} : _temp,
      _ref$headerSelector = _ref.headerSelector,
      headerSelector = _ref$headerSelector === void 0 ? 'header' : _ref$headerSelector,
      _ref$menuSelector = _ref.menuSelector,
      menuSelector = _ref$menuSelector === void 0 ? '#menu' : _ref$menuSelector,
      _ref$scrollViewSelect = _ref.scrollViewSelector,
      scrollViewSelector = _ref$scrollViewSelect === void 0 ? '.navPages' : _ref$scrollViewSelect;
    this.$body = $('body');
    this.$menu = $(menuSelector);
    this.$headerMenu = $('.halo-sidebar-header');
    this.$navList = $('.navPages-list:not(.navPages-list--user)');
    this.$header = $(headerSelector);
    this.$scrollView = $(scrollViewSelector, this.$menu);
    this.$subMenus = this.$navList.find('.navPages-action:not(.no-subMenu)');
    this.$toggle = $toggle;
    this.mediumMediaQueryList = (0,_common_media_query_list__WEBPACK_IMPORTED_MODULE_1__["default"])('medium');

    // Auto-bind
    this.onToggleClick = this.onToggleClick.bind(this);
    this.onCartPreviewOpen = this.onCartPreviewOpen.bind(this);
    this.onMediumMediaQueryMatch = this.onMediumMediaQueryMatch.bind(this);
    this.onSubMenuClick = this.onSubMenuClick.bind(this);

    // Listen
    this.bindEvents();

    // Assign DOM attributes
    this.$toggle.attr('aria-controls', this.$menu.attr('id'));

    // Hide by default
    this.hide();
  }
  var _proto = MobileMenuToggle.prototype;
  _proto.bindEvents = function bindEvents() {
    this.$toggle.on('click', this.onToggleClick);
    this.$header.on(_cart_preview__WEBPACK_IMPORTED_MODULE_2__.CartPreviewEvents.open, this.onCartPreviewOpen);
    this.$subMenus.on('click', this.onSubMenuClick);
    if (this.mediumMediaQueryList && this.mediumMediaQueryList.addListener) {
      this.mediumMediaQueryList.addListener(this.onMediumMediaQueryMatch);
    }
    $('.navPages-list--user .currencies #currency_selector').on('click', function (ev) {
      var $closestActionParent = $(event.target).parent();
      var $parentSiblings = $closestActionParent.siblings();
      var $closestActionLevel = $closestActionParent.data('level');
      var $beforeMenuHeight = $('.navPages-list--user').height();
      var $currentmenuHeight = $parentSiblings.height();
      $closestActionParent.addClass('is-open');
      $parentSiblings.addClass('is-hidden');
      $('.navPages-list--user').attr('data-level-list', $closestActionLevel);
      $('.navPages-list--user').attr('data-before', $beforeMenuHeight);
      $('.navPages-list--user').css('min-height', $currentmenuHeight);
    });
    $('.navPages-list--user .currencies .navPage-subMenu-title').on('click', function (ev) {
      var $closestAction = $(event.target).closest('.currencies');
      var $parentSiblings = $closestAction.siblings();
      var $beforeMenuHeight = $('.navPages-list--user').data('before');
      $closestAction.removeClass('is-open');
      $parentSiblings.removeClass('is-hidden');
      $('.navPages-list--user').attr('data-level-list', 1);
      $('.navPages-list--user').css('min-height', $beforeMenuHeight);
    });
  };
  _proto.unbindEvents = function unbindEvents() {
    this.$toggle.off('click', this.onToggleClick);
    this.$header.off(_cart_preview__WEBPACK_IMPORTED_MODULE_2__.CartPreviewEvents.open, this.onCartPreviewOpen);
    if (this.mediumMediaQueryList && this.mediumMediaQueryList.addListener) {
      this.mediumMediaQueryList.removeListener(this.onMediumMediaQueryMatch);
    }
  };
  _proto.toggle = function toggle() {
    if (this.isOpen) {
      this.hide();
    } else {
      this.show();
    }
  };
  _proto.show = function show() {
    this.$body.addClass('has-activeNavPages');
    this.$toggle.addClass('is-open').attr('aria-expanded', true);
    this.$menu.addClass('is-open').attr('aria-hidden', false);
    this.$header.addClass('is-open');
    this.$scrollView.scrollTop(0);
    if ($(window).width() > 1024) {
      if ($('.page-type-category').length > 0 || $('.page-type-search').length > 0 || $('.page-type-brand').length > 0 || $('.page-type-product').length > 0) {
        if ($('header:not(.is-sticky)').length) {
          if ($('.halo-topHeader-visible').length > 0) {
            var height = this.$header.outerHeight() + 40;
            $('.halo-menu-sidebar').css({
              'top': height
            });
          } else {
            var height = this.$header.outerHeight();
            $('.halo-menu-sidebar').css({
              'top': height
            });
          }
        } else {
          var height = this.$header.outerHeight();
          $('.halo-menu-sidebar').css({
            'top': height
          });
        }
      } else {
        var height = this.$header.outerHeight();
        $('.halo-menu-sidebar').css({
          'top': height
        });
      }
    } else {
      $('.halo-menu-sidebar').css('top', 0);
    }
    this.resetSubMenus();
  };
  _proto.hide = function hide() {
    this.$body.removeClass('has-activeNavPages');
    this.$toggle.removeClass('is-open').attr('aria-expanded', false);
    this.$menu.removeClass('is-open').attr('aria-hidden', true);
    this.$header.removeClass('is-open');
    this.resetSubMenus();
  }

  // Private
  ;
  _proto.onToggleClick = function onToggleClick(event) {
    event.preventDefault();
    this.toggle();
  };
  _proto.onCartPreviewOpen = function onCartPreviewOpen() {
    if (this.isOpen) {
      this.hide();
    }
  };
  _proto.onMediumMediaQueryMatch = function onMediumMediaQueryMatch(media) {
    if (!media.matches) {
      return;
    }
    this.hide();
  };
  _proto.onSubMenuClick = function onSubMenuClick(event) {
    var $closestAction = $(event.target).parent();
    var $parentSiblings = $closestAction.siblings();
    if (!$closestAction.hasClass('navPage-subMenu-title')) {
      if (!$closestAction.hasClass('navPages-action-end')) {
        if ($closestAction.hasClass('has-dropdown')) {
          $closestAction.toggleClass('is-open');
        }
      }
      if (this.$subMenus.hasClass('is-open')) {
        this.$navList.addClass('subMenu-is-open');
      } else {
        this.$navList.removeClass('subMenu-is-open');
      }
      if ($closestAction.hasClass('is-open')) {
        $parentSiblings.addClass('is-hidden');
        $closestAction.parents('.halo-menu-sidebar').find('.halo-sidebar-header').addClass('is-hidden');
      }
    } else {
      var $closestAction2 = $(event.target).closest('.navPage-subMenu');
      var $closestAction3 = $closestAction2.find('.has-dropdown');
      var $parentSiblings2 = $closestAction2.parent();
      var $parentAction2 = $parentSiblings2.siblings();
      if (this.$subMenus.hasClass('is-open')) {
        this.$navList.addClass('subMenu-is-open');
      } else {
        this.$navList.removeClass('subMenu-is-open');
      }
      if (!$('.navPage-subMenu-item-child.is-open').length) {
        $closestAction.parents('.halo-menu-sidebar').find('.halo-sidebar-header').removeClass('is-hidden');
      }
      $parentSiblings2.removeClass('is-open');
      $parentAction2.removeClass('is-hidden');
    }
  };
  _proto.resetSubMenus = function resetSubMenus() {
    this.$navList.find('.is-hidden').removeClass('is-hidden');
    this.$headerMenu.removeClass('is-hidden');
    this.$navList.find('.is-open').removeClass('is-open');
    this.$navList.removeClass('subMenu-is-open');
    $('.navPages-list--user').attr('data-level-list', 1);
    this.$navList.css('min-height', 'unset');
  };
  return _createClass(MobileMenuToggle, [{
    key: "isOpen",
    get: function get() {
      return this.$menu.hasClass('is-open');
    }
  }]);
}();

/*
 * Create a new MobileMenuToggle instance
 * @param {string} [selector]
 * @param {Object} [options]
 * @param {Object} [options.headerSelector]
 * @param {Object} [options.menuSelector]
 * @param {Object} [options.scrollViewSelector]
 * @return {MobileMenuToggle}
 */
function mobileMenuToggleFactory(selector, overrideOptions) {
  if (selector === void 0) {
    selector = "[data-" + PLUGIN_KEY.SNAKE + "]";
  }
  if (overrideOptions === void 0) {
    overrideOptions = {};
  }
  var $toggle = $(selector).eq(0);
  var instanceKey = PLUGIN_KEY.CAMEL + "Instance";
  var cachedMobileMenu = $toggle.data(instanceKey);
  if (cachedMobileMenu instanceof MobileMenuToggle) {
    return cachedMobileMenu;
  }
  var options = lodash_extend__WEBPACK_IMPORTED_MODULE_0___default()(optionsFromData($toggle), overrideOptions);
  var mobileMenu = new MobileMenuToggle($toggle, options);
  $toggle.data(instanceKey, mobileMenu);
  return mobileMenu;
}

/***/ }),

/***/ "./assets/js/theme/global/modal.js":
/*!*****************************************!*\
  !*** ./assets/js/theme/global/modal.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Modal: () => (/* binding */ Modal),
/* harmony export */   ModalEvents: () => (/* binding */ ModalEvents),
/* harmony export */   alertModal: () => (/* binding */ alertModal),
/* harmony export */   "default": () => (/* binding */ modalFactory),
/* harmony export */   defaultModal: () => (/* binding */ defaultModal),
/* harmony export */   showAlertModal: () => (/* binding */ showAlertModal)
/* harmony export */ });
/* harmony import */ var _foundation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./foundation */ "./assets/js/theme/global/foundation.js");
/* harmony import */ var focus_trap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! focus-trap */ "./node_modules/focus-trap/dist/focus-trap.esm.js");
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }


var bodyActiveClass = 'has-activeModal';
var loadingOverlayClass = 'loadingOverlay';
var modalBodyClass = 'modal-body';
var modalContentClass = 'modal-content';
var SizeClasses = {
  small: 'modal--small',
  large: 'modal--large',
  normal: ''
};
var ModalEvents = {
  close: 'close.fndtn.reveal',
  closed: 'closed.fndtn.reveal',
  open: 'open.fndtn.reveal',
  opened: 'opened.fndtn.reveal',
  loaded: 'loaded.data.custom'
};
function getSizeFromModal($modal) {
  if ($modal.hasClass(SizeClasses.small)) {
    return 'small';
  }
  if ($modal.hasClass(SizeClasses.large)) {
    return 'large';
  }
  return 'normal';
}
function getViewportHeight(multipler) {
  if (multipler === void 0) {
    multipler = 1;
  }
  var viewportHeight = $(window).height();
  return viewportHeight * multipler;
}
function wrapModalBody(content) {
  var $modalBody = $('<div>');
  $modalBody.addClass(modalBodyClass).html(content);
  return $modalBody;
}
function restrainContentHeight($content) {
  if ($content.length === 0) return;
  var $body = $("." + modalBodyClass, $content);
  if ($body.length === 0) return;
  var bodyHeight = $body.outerHeight();
  var contentHeight = $content.outerHeight();
  var viewportHeight = getViewportHeight(0.9);
  var maxHeight = viewportHeight - (contentHeight - bodyHeight);
  $body.css('max-height', maxHeight);
}
function createModalContent($modal) {
  var $content = $("." + modalContentClass, $modal);
  if ($content.length === 0) {
    var existingContent = $modal.children();
    $content = $('<div>').addClass(modalContentClass).append(existingContent).appendTo($modal);
  }
  return $content;
}
function createLoadingOverlay($modal) {
  var $loadingOverlay = $("." + loadingOverlayClass, $modal);
  if ($loadingOverlay.length === 0) {
    $loadingOverlay = $('<div>').addClass(loadingOverlayClass).appendTo($modal);
  }
  return $loadingOverlay;
}

/**
 * Require foundation.reveal
 * Decorate foundation.reveal with additional methods
 * @param {jQuery} $modal
 * @param {Object} [options]
 * @param {string} [options.size]
 */
var Modal = /*#__PURE__*/function () {
  function Modal($modal, _temp) {
    var _ref = _temp === void 0 ? {} : _temp,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? null : _ref$size;
    this.$modal = $modal;
    this.$content = createModalContent(this.$modal);
    this.$overlay = createLoadingOverlay(this.$modal);
    this.defaultSize = size || getSizeFromModal($modal);
    this.size = this.defaultSize;
    this.pending = false;
    this.$preModalFocusedEl = null;
    this.focusTrap = null;
    this.onModalOpen = this.onModalOpen.bind(this);
    this.onModalOpened = this.onModalOpened.bind(this);
    this.onModalClose = this.onModalClose.bind(this);
    this.onModalClosed = this.onModalClosed.bind(this);
    this.bindEvents();

    /* STRF-2471 - Multiple Wish Lists - prevents double-firing
     * of foundation.dropdown click.fndtn.dropdown event */
    this.$modal.on('click', '.dropdown-menu-button', function (e) {
      e.stopPropagation();
    });
  }
  var _proto = Modal.prototype;
  _proto.bindEvents = function bindEvents() {
    this.$modal.on(ModalEvents.close, this.onModalClose);
    this.$modal.on(ModalEvents.closed, this.onModalClosed);
    this.$modal.on(ModalEvents.open, this.onModalOpen);
    this.$modal.on(ModalEvents.opened, this.onModalOpened);
  };
  _proto.open = function open(_temp2) {
    var _ref2 = _temp2 === void 0 ? {} : _temp2,
      size = _ref2.size,
      _ref2$pending = _ref2.pending,
      pending = _ref2$pending === void 0 ? true : _ref2$pending,
      _ref2$clearContent = _ref2.clearContent,
      clearContent = _ref2$clearContent === void 0 ? true : _ref2$clearContent;
    this.pending = pending;
    if (size) {
      this.size = size;
    }
    if (clearContent) {
      this.clearContent();
    }
    this.$modal.foundation('reveal', 'open');
  };
  _proto.close = function close() {
    this.$modal.foundation('reveal', 'close');
  };
  _proto.updateContent = function updateContent(content, _temp3) {
    var _ref3 = _temp3 === void 0 ? {} : _temp3,
      _ref3$wrap = _ref3.wrap,
      wrap = _ref3$wrap === void 0 ? false : _ref3$wrap;
    var $content = $(content);
    if (wrap) {
      $content = wrapModalBody(content);
    }
    this.pending = false;
    this.$content.html($content);
    this.$modal.trigger(ModalEvents.loaded);
    restrainContentHeight(this.$content);
    (0,_foundation__WEBPACK_IMPORTED_MODULE_0__["default"])(this.$content);
  };
  _proto.clearContent = function clearContent() {
    this.$content.html('');
  };
  _proto.setupFocusTrap = function setupFocusTrap() {
    var _this = this;
    if (!this.$preModalFocusedEl) this.$preModalFocusedEl = $(document.activeElement);
    if (!this.focusTrap) {
      this.focusTrap = focus_trap__WEBPACK_IMPORTED_MODULE_1__.createFocusTrap(this.$modal[0], {
        escapeDeactivates: false,
        returnFocusOnDeactivate: false,
        allowOutsideClick: true,
        fallbackFocus: function fallbackFocus() {
          var fallbackNode = _this.$preModalFocusedEl && _this.$preModalFocusedEl.length ? _this.$preModalFocusedEl[0] : $('[data-header-logo-link]')[0];
          return fallbackNode;
        }
      });
    }
    this.focusTrap.deactivate();
    this.focusTrap.activate();
  };
  _proto.onModalClose = function onModalClose() {
    $('body').removeClass(bodyActiveClass);
  };
  _proto.onModalClosed = function onModalClosed() {
    this.size = this.defaultSize;
    if (this.focusTrap) this.focusTrap.deactivate();
    if (this.$preModalFocusedEl) this.$preModalFocusedEl.focus();
    this.$preModalFocusedEl = null;
  };
  _proto.onModalOpen = function onModalOpen() {
    $('body').addClass(bodyActiveClass);
  };
  _proto.onModalOpened = function onModalOpened() {
    var _this2 = this;
    if (this.pending) {
      this.$modal.one(ModalEvents.loaded, function () {
        if (_this2.$modal.hasClass('open')) _this2.setupFocusTrap();
      });
    } else {
      this.setupFocusTrap();
    }
    restrainContentHeight(this.$content);
  };
  return _createClass(Modal, [{
    key: "pending",
    get: function get() {
      return this._pending;
    },
    set: function set(pending) {
      this._pending = pending;
      if (pending) {
        this.$overlay.show();
      } else {
        this.$overlay.hide();
      }
    }
  }, {
    key: "size",
    get: function get() {
      return this._size;
    },
    set: function set(size) {
      this._size = size;
      this.$modal.removeClass(SizeClasses.small).removeClass(SizeClasses.large).addClass(SizeClasses[size] || '');
    }
  }]);
}();

/**
 * Return an array of modals
 * @param {string} selector
 * @param {Object} [options]
 * @param {string} [options.size]
 * @returns {array}
 */
function modalFactory(selector, options) {
  if (selector === void 0) {
    selector = '[data-reveal]';
  }
  if (options === void 0) {
    options = {};
  }
  var $modals = $(selector, options.$context);
  return $modals.map(function (index, element) {
    var $modal = $(element);
    var instanceKey = 'modalInstance';
    var cachedModal = $modal.data(instanceKey);
    if (cachedModal instanceof Modal) {
      return cachedModal;
    }
    var modal = new Modal($modal, options);
    $modal.data(instanceKey, modal);
    return modal;
  }).toArray();
}

/*
 * Return the default page modal
 */
function defaultModal() {
  return modalFactory('#modal')[0];
}

/*
 * Return the default alert modal
 */
function alertModal() {
  return modalFactory('#alert-modal')[0];
}

/*
 * Display the given message in the default alert modal
 */
function showAlertModal(message, options) {
  if (options === void 0) {
    options = {};
  }
  var modal = alertModal();
  var $cancelBtn = modal.$modal.find('.cancel');
  var $confirmBtn = modal.$modal.find('.confirm');
  var _options = options,
    _options$icon = _options.icon,
    icon = _options$icon === void 0 ? 'error' : _options$icon,
    _options$$preModalFoc = _options.$preModalFocusedEl,
    $preModalFocusedEl = _options$$preModalFoc === void 0 ? null : _options$$preModalFoc,
    showCancelButton = _options.showCancelButton,
    onConfirm = _options.onConfirm;
  if ($preModalFocusedEl) {
    modal.$preModalFocusedEl = $preModalFocusedEl;
  }
  modal.open();
  modal.$modal.find('.alert-icon').hide();
  if (icon === 'error') {
    modal.$modal.find('.error-icon').show();
  } else if (icon === 'warning') {
    modal.$modal.find('.warning-icon').show();
  }
  modal.updateContent("<span>" + message + "</span>");
  if (onConfirm) {
    $confirmBtn.on('click', onConfirm);
    modal.$modal.one(ModalEvents.closed, function () {
      $confirmBtn.off('click', onConfirm);
    });
  }
  if (showCancelButton) {
    $cancelBtn.show();
  } else {
    $cancelBtn.hide();
  }
}

/***/ }),

/***/ "./assets/js/theme/global/quick-search.js":
/*!************************************************!*\
  !*** ./assets/js/theme/global/quick-search.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var lodash_debounce__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/debounce */ "./node_modules/lodash/debounce.js");
/* harmony import */ var lodash_debounce__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_debounce__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @bigcommerce/stencil-utils */ "./node_modules/@bigcommerce/stencil-utils/src/main.js");
/* harmony import */ var _common_utils_url_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/utils/url-utils */ "./assets/js/theme/common/utils/url-utils.js");
/* harmony import */ var _halothemes_haloAddOptionForProduct__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../halothemes/haloAddOptionForProduct */ "./assets/js/theme/halothemes/haloAddOptionForProduct.js");
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");




/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(context) {
  var TOP_STYLING = 'top: unset;';
  var $quickSearchResults = $('.quickSearchResults');
  var $quickSearchResultsCustom = $('.quickSearchResultsCustom');
  var $quickSearchForms = $('[data-quick-search-form]');
  var $searchQuery = $quickSearchForms.find('[data-search-quick]');
  var $searchBtnBYL = $('[data-search-leave]');
  var $searchQuery2 = $('#search_query2');
  var $searchBtnMobile = $('.item--searchMobile [data-search]');
  var $searchInputMobile = $('[data-quick-search-form] [data-search-quick]');
  var $searchContentMobile = $('#halo-search-sidebar .halo-sidebar-content');
  var $searchMobileClose = $('#halo-search-sidebar .halo-sidebar-header .close');
  $(document).on('click', '.item--searchMobile [data-search]', function (event) {
    event.preventDefault();
    $(event.currentTarget).toggleClass('is-open');
    $('body').addClass('openSearchMobile');
    if ($('body').hasClass('openSearchMobile')) {
      $('.halo-bottomHeader .quickSearchResults').appendTo($searchContentMobile);
      $('.halo-bottomHeader .quickSearchResultsCustom').appendTo($searchContentMobile);
    }
    $quickSearchResults.empty().removeClass('is-open');
    $quickSearchResultsCustom.addClass('is-open');
    $('body').addClass('openQuickSearch');
    var listIDs = context.themeSettings.quickSearchPopularId.split(','),
      listID = listIDs.slice(0, parseInt(context.themeSettings.quickSearchResultLimit));
    var $options = {
      template: 'halothemes/search/halo-quick-results-tmp'
    };
    if (!$quickSearchResultsCustom.find('.productGrid .product').length) {
      var num = 0;
      for (var i = 0; i <= listID.length; i++) {
        var $prodId = listID[i];
        if ($prodId != undefined) {
          _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_1__["default"].api.product.getById($prodId, $options, function (err, response) {
            if (err) {
              return false;
            }
            var hasProd = $(response).find('.card').data('product-id');
            if (hasProd != undefined && hasProd !== null && hasProd !== '') {
              if ($quickSearchResultsCustom.find('.productGrid .product').length < listID.length) {
                $quickSearchResultsCustom.find('.productGrid').append(response);
                $quickSearchResultsCustom.find('.productGrid .product-sample').remove();
              }
            }
            num++;
          });
        }
      }
    }
  });
  $searchMobileClose.on('click', function (event) {
    event.preventDefault();
    $searchBtnMobile.removeClass('is-open');
    $('body').removeClass('openSearchMobile').removeClass('openQuickSearch');
    if (!context.themeSettings.halo_header_layout == 'header_layout_3' && !context.themeSettings.halo_header_layout == 'header_layout_4') {
      $searchContentMobile.find('.quickSearchResults').appendTo('.halo-bottomHeader .container');
      $searchContentMobile.find('.quickSearchResultsCustom').appendTo('.halo-bottomHeader .container');
    }
  });
  $(document).on('click', function (event) {
    if ($('body').hasClass('openSearchMobile')) {
      if ($(event.target).closest('.item--searchMobile [data-search]').length === 0 && $(event.target).closest('#halo-search-sidebar').length === 0) {
        $('body').removeClass('openSearchMobile').removeClass('openQuickSearch');
        $searchContentMobile.find('.quickSearchResults').appendTo('.halo-bottomHeader .container');
        $searchContentMobile.find('.quickSearchResultsCustom').appendTo('.halo-bottomHeader .container');
      }
    }
  });
  $(document).on('click', '.quickResults-close', function (e) {
    e.preventDefault();
    if ($('body').hasClass('openQuickSearch')) {
      $quickSearchResults.removeClass('is-open');
      $quickSearchResultsCustom.removeClass('is-open');
      $('body').removeClass('openQuickSearch');
    }
    if ($('body').hasClass('openSearchMobile')) {
      $('body').removeClass('openSearchMobile');
    }
  });
  if (!context.themeSettings.halo_header_layout == 'header_layout_3' && !context.themeSettings.halo_header_layout == 'header_layout_4') {
    if ($(window).width() > 1024) {
      $(document).on('click', function (event) {
        if ($(event.target).closest('[data-prevent-quick-search-close]').length === 0 && $(event.target).closest('.before-you-leave-search').length === 0) {
          $quickSearchResults.removeClass('is-open');
          $quickSearchResultsCustom.removeClass('is-open');
          $('body').removeClass('openQuickSearch');
        }
      });
    }
  }

  // stagger searching for 200ms after last input
  var debounceWaitTime = 1200;
  var doSearch = lodash_debounce__WEBPACK_IMPORTED_MODULE_0___default()(function (searchQuery) {
    _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_1__["default"].api.search.search(searchQuery, {
      template: 'search/quick-results'
    }, function (err, response) {
      if (err) {
        return false;
      }
      $quickSearchResultsCustom.removeClass('is-open');
      $quickSearchResults.html(response).addClass('is-open');
      if ($(window).width() > 1024) {
        if ($quickSearchResults.find('.product').length > 5) {
          $quickSearchResults.find('.productGrid').slick({
            dots: false,
            arrows: true,
            infinite: false,
            mobileFirst: true,
            slidesToShow: 5,
            slidesToScroll: 5
          });
        }
      }
      var $blockId = 'quickResults-product2';
      (0,_halothemes_haloAddOptionForProduct__WEBPACK_IMPORTED_MODULE_3__["default"])(context, $blockId);
    });
  }, debounceWaitTime);
  _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_1__["default"].hooks.on('search-quick', function (event, currentTarget) {
    var searchQuery = $(currentTarget).val();

    // server will only perform search with at least 3 characters
    if (searchQuery.length < 3) {
      $quickSearchResults.removeClass('is-open');
      $quickSearchResultsCustom.addClass('is-open');
      return;
    }
    doSearch(searchQuery);
  });

  // Catch the submission of the quick-search forms
  $quickSearchForms.on('submit', function (event) {
    event.preventDefault();
    var $target = $(event.currentTarget);
    var searchQuery = $target.find('input').val();
    var searchUrl = $target.data('url');
    if (searchQuery.length === 0) {
      return;
    }
    _common_utils_url_utils__WEBPACK_IMPORTED_MODULE_2__["default"].goToUrl(searchUrl + "?search_query=" + searchQuery);
    window.location.reload();
  });
  $searchQuery.on('click', function (event) {
    $quickSearchResults.empty().removeClass('is-open');
    $quickSearchResultsCustom.addClass('is-open');
    $('body').addClass('openQuickSearch');
    var listIDs = context.themeSettings.quickSearchPopularId.split(','),
      listID = listIDs.slice(0, parseInt(context.themeSettings.quickSearchResultLimit));
    var $options = {
      template: 'halothemes/search/halo-quick-results-tmp'
    };
    if (!$quickSearchResultsCustom.find('.productGrid .product').length) {
      var num = 0;
      for (var i = 0; i <= listID.length; i++) {
        var $prodId = listID[i];
        if ($prodId != undefined) {
          _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_1__["default"].api.product.getById($prodId, $options, function (err, response) {
            if (err) {
              return false;
            }
            var hasProd = $(response).find('.card').data('product-id');
            if (hasProd != undefined && hasProd !== null && hasProd !== '') {
              if ($quickSearchResultsCustom.find('.productGrid .product').length < listID.length) {
                $quickSearchResultsCustom.find('.productGrid').append(response);
                $quickSearchResultsCustom.find('.productGrid .product-sample').remove();
              }
            }
            num++;
          });
        }
      }
    }
  });
  $searchBtnBYL.on('click', function (event) {
    $searchQuery2.trigger('click');
    $quickSearchResults.empty().removeClass('is-open');
    $quickSearchResultsCustom.addClass('is-open');
    var listIDs = context.themeSettings.quickSearchPopularId.split(','),
      listID = listIDs.slice(0, parseInt(context.themeSettings.quickSearchResultLimit));
    var $options = {
      template: 'halothemes/search/halo-quick-results-tmp'
    };
    if (!$quickSearchResultsCustom.find('.productGrid .product').length) {
      var num = 0;
      for (var i = 0; i <= listID.length; i++) {
        var $prodId = listID[i];
        if ($prodId != undefined) {
          _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_1__["default"].api.product.getById($prodId, $options, function (err, response) {
            if (err) {
              return false;
            }
            var hasProd = $(response).find('.card').data('product-id');
            if (hasProd != undefined && hasProd !== null && hasProd !== '') {
              if ($quickSearchResultsCustom.find('.productGrid .product').length < listID.length) {
                $quickSearchResultsCustom.find('.productGrid').append(response);
                $quickSearchResultsCustom.find('.productGrid .product-sample').remove();
              }
            }
            num++;
          });
        }
      }
    }
  });
}

/***/ }),

/***/ "./assets/js/theme/global/quick-view.js":
/*!**********************************************!*\
  !*** ./assets/js/theme/global/quick-view.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var foundation_sites_js_foundation_foundation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! foundation-sites/js/foundation/foundation */ "./node_modules/foundation-sites/js/foundation/foundation.js");
/* harmony import */ var foundation_sites_js_foundation_foundation__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(foundation_sites_js_foundation_foundation__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var foundation_sites_js_foundation_foundation_dropdown__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! foundation-sites/js/foundation/foundation.dropdown */ "./node_modules/foundation-sites/js/foundation/foundation.dropdown.js");
/* harmony import */ var foundation_sites_js_foundation_foundation_dropdown__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(foundation_sites_js_foundation_foundation_dropdown__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @bigcommerce/stencil-utils */ "./node_modules/@bigcommerce/stencil-utils/src/main.js");
/* harmony import */ var _common_product_details__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/product-details */ "./assets/js/theme/common/product-details.js");
/* harmony import */ var _modal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modal */ "./assets/js/theme/global/modal.js");
/* harmony import */ var slick_carousel__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! slick-carousel */ "./node_modules/slick-carousel/slick/slick.min.js");
/* harmony import */ var slick_carousel__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(slick_carousel__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _common_carousel__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../common/carousel */ "./assets/js/theme/common/carousel/index.js");
/* harmony import */ var _halothemes_haloNotifyMe__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../halothemes/haloNotifyMe */ "./assets/js/theme/halothemes/haloNotifyMe.js");
/* harmony import */ var _halothemes_haloYoutubeVideo__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../halothemes/haloYoutubeVideo */ "./assets/js/theme/halothemes/haloYoutubeVideo.js");
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");









/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(context) {
  var modal = (0,_modal__WEBPACK_IMPORTED_MODULE_4__.defaultModal)();
  $('body').on('click', '.quickview', function (event) {
    event.preventDefault();
    var productId = $(event.currentTarget).data('productId');
    modal.open({
      size: 'large'
    });
    _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_2__["default"].api.product.getById(productId, {
      template: 'products/quick-view'
    }, function (err, response) {
      if (err) return;
      modal.updateContent(response);
      modal.$content.find('.productView').addClass('productView--quickView');
      soldProduct(modal.$content.find('.productView-soldProduct'), context);
      viewingProduct(modal.$content.find('.productView-ViewingProduct'), context);
      countDownProduct(modal.$content.find('.productView-countDown'));
      productViewShareLink();
      var $carousel = modal.$content.find('[data-slick]');
      if ($carousel.length) {
        $carousel.on('init breakpoint swipe', _common_carousel__WEBPACK_IMPORTED_MODULE_6__.setCarouselState);
        $carousel.on('click', '.slick-arrow, .slick-dots', _common_carousel__WEBPACK_IMPORTED_MODULE_6__.setCarouselState);
        $carousel.on('init afterChange', function (e, carouselObj) {
          return (0,_common_carousel__WEBPACK_IMPORTED_MODULE_6__.onSlickCarouselChange)(e, carouselObj, context);
        });
        $carousel.on('click', '.slick-arrow, .slick-dots', $carousel, function (e) {
          return (0,_common_carousel__WEBPACK_IMPORTED_MODULE_6__.onUserCarouselChange)(e, context);
        });
        $carousel.on('swipe', function (e, carouselObj) {
          return (0,_common_carousel__WEBPACK_IMPORTED_MODULE_6__.onUserCarouselChange)(e, context, carouselObj.$slider);
        });
        if (modal.$modal.hasClass('open')) {
          $carousel.slick();
        } else {
          modal.$modal.one(_modal__WEBPACK_IMPORTED_MODULE_4__.ModalEvents.opened, function () {
            if ($.contains(document, $carousel[0])) $carousel.slick();
          });
        }
      }
      (0,_halothemes_haloNotifyMe__WEBPACK_IMPORTED_MODULE_7__["default"])($('.halo-quickView'), context);
      (0,_halothemes_haloYoutubeVideo__WEBPACK_IMPORTED_MODULE_8__["default"])(modal.$content.find('[data-slick]'));
      return new _common_product_details__WEBPACK_IMPORTED_MODULE_3__["default"](modal.$content.find('.quickView'), context);
    });
  });
}
function soldProduct($wrapper, context) {
  if ($wrapper.length > 0) {
    var numbersProduct_text = context.themeSettings.product_soldProduct_products,
      numbersHours_text = context.themeSettings.product_soldProduct_hours,
      soldProductText = context.themeSettings.product_soldProduct_text,
      soldProductText2 = context.themeSettings.product_soldProduct_hours_text;
    var numbersProductList = JSON.parse("[" + numbersProduct_text + "]"),
      numbersProductItem = Math.floor(Math.random() * numbersProductList.length),
      numbersHoursList = JSON.parse("[" + numbersHours_text + "]"),
      numbersHoursItem = Math.floor(Math.random() * numbersHoursList.length);
    $wrapper.html('<svg class="icon"><use xlink:href="#icon-fire"/></svg><span class="text">' + numbersProductList[numbersProductItem] + " " + soldProductText + " " + numbersHoursList[numbersHoursItem] + " " + soldProductText2 + '</span>');
    $wrapper.show();
  }
}
function countDownProduct($wrapper) {
  if ($wrapper.length > 0) {
    var countDown = $wrapper.data('countdown'),
      countDownDate = new Date(countDown).getTime(),
      seft = $wrapper;
    var countdownfunction = setInterval(function () {
      var now = new Date().getTime(),
        distance = countDownDate - now;
      if (distance < 0) {
        clearInterval(countdownfunction);
        seft.remove();
      } else {
        var days = Math.floor(distance / (1000 * 60 * 60 * 24)),
          hours = Math.floor(distance % (1000 * 60 * 60 * 24) / (1000 * 60 * 60)),
          minutes = Math.floor(distance % (1000 * 60 * 60) / (1000 * 60)),
          seconds = Math.floor(distance % (1000 * 60) / 1000),
          strCountDown = '<svg class="icon"><use xlink:href="#icon-bell"/></svg><span class="text"><span>Limited-time offers:</span></span> <span class="num">' + days + 'd :</span> <span class="num">' + hours + 'h :</span> <span class="num">' + minutes + 'm :</span> <span class="num">' + seconds + 's</span>';
        seft.html(strCountDown);
      }
    }, 1000);
  }
}
function viewingProduct($wrapper, context) {
  if ($wrapper.length > 0) {
    var viewerText = context.themeSettings.product_viewingProduct_text,
      numbersViewer_text = context.themeSettings.product_viewingProduct_viewer,
      numbersViewerList = JSON.parse("[" + numbersViewer_text + "]"),
      timeViewer = parseInt(context.themeSettings.product_viewingProduct_change) * 1000;
    setInterval(function () {
      var numbersViewerItem = Math.floor(Math.random() * numbersViewerList.length);
      $wrapper.html('<svg class="icon"><use xlink:href="#icon-eye"/></svg>' + numbersViewerList[numbersViewerItem] + " " + viewerText);
    }, timeViewer);
  }
}
function productViewShareLink() {
  var $shareLinkBtn = $('.halo-quickView .shareLinkSocial__button');
  var $shareLinkPopup = $('.halo-quickView .shareLinkSocial__popup');
  var $shareLinkClose = $('.halo-quickView .shareLinkSocial__close');
  var $shareLinkCopy = $('.halo-quickView #shareLinkSocial__copy');
  $shareLinkBtn.on('click', function (e) {
    e.preventDefault();
    if ($shareLinkPopup.hasClass('is-open')) {
      $shareLinkPopup.slideUp(400);
      $shareLinkPopup.removeClass('is-open');
    } else {
      $shareLinkPopup.slideDown(400);
      $shareLinkPopup.addClass('is-open');
    }
  });
  $shareLinkClose.on('click', function (e) {
    e.preventDefault();
    if ($shareLinkPopup.hasClass('is-open')) {
      $shareLinkPopup.slideUp(400);
      $shareLinkPopup.removeClass('is-open');
    }
  });
  $shareLinkCopy.on('click', function (e) {
    e.preventDefault();
    var $target = $(e.target);
    $target.select();
    document.execCommand("copy");
  });
}

/***/ }),

/***/ "./assets/js/theme/global/reveal-close.js":
/*!************************************************!*\
  !*** ./assets/js/theme/global/reveal-close.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ revealCloseFactory)
/* harmony export */ });
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var revealCloseAttr = 'revealClose';
var revealCloseSelector = "[data-" + revealCloseAttr + "]";
var revealSelector = '[data-reveal]';
var RevealClose = /*#__PURE__*/function () {
  function RevealClose($button) {
    this.$button = $button;
    this.modalId = $button.data(revealCloseAttr);
    this.onClick = this.onClick.bind(this);
    this.bindEvents();
  }
  var _proto = RevealClose.prototype;
  _proto.bindEvents = function bindEvents() {
    this.$button.on('click', this.onClick);
  };
  _proto.unbindEvents = function unbindEvents() {
    this.$button.off('click', this.onClick);
  };
  _proto.onClick = function onClick(event) {
    var modal = this.modal;
    if (modal) {
      event.preventDefault();
      modal.close();
    }
  };
  return _createClass(RevealClose, [{
    key: "modal",
    get: function get() {
      var $modal;
      if (this.modalId) {
        $modal = $("#" + this.modalId);
      } else {
        $modal = this.$button.parents(revealSelector).eq(0);
      }
      return $modal.data('modalInstance');
    }
  }]);
}();
/*
 * Extend foundation.reveal with the ability to close a modal by clicking on any of its child element
 * with data-reveal-close attribute.
 *
 * @example
 *
 * <div data-reveal id="helloModal">
 *   <button data-reveal-close>Continue</button>
 * </div>
 *
 * <div data-reveal id="helloModal"></div>
 * <button data-reveal-close="helloModal">Continue</button>
 */
function revealCloseFactory(selector, options) {
  if (selector === void 0) {
    selector = revealCloseSelector;
  }
  if (options === void 0) {
    options = {};
  }
  var $buttons = $(selector, options.$context);
  return $buttons.map(function (index, element) {
    var $button = $(element);
    var instanceKey = revealCloseAttr + "Instance";
    var cachedButton = $button.data(instanceKey);
    if (cachedButton instanceof RevealClose) {
      return cachedButton;
    }
    var button = new RevealClose($button);
    $button.data(instanceKey, button);
    return button;
  }).toArray();
}

/***/ }),

/***/ "./assets/js/theme/global/svg-injector.js":
/*!************************************************!*\
  !*** ./assets/js/theme/global/svg-injector.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var svg_injector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! svg-injector */ "./node_modules/svg-injector/dist/svg-injector.min.js");
/* harmony import */ var svg_injector__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(svg_injector__WEBPACK_IMPORTED_MODULE_0__);

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  svg_injector__WEBPACK_IMPORTED_MODULE_0___default()(document.querySelectorAll('svg[data-src]'));
}

/***/ }),

/***/ "./assets/js/theme/global/sweet-alert.js":
/*!***********************************************!*\
  !*** ./assets/js/theme/global/sweet-alert.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sweetalert2 */ "./node_modules/sweetalert2/dist/sweetalert2.min.js");
/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(sweetalert2__WEBPACK_IMPORTED_MODULE_0__);


// WeakMap will defined in the global scope if native WeakMap is not supported.
var weakMap = new WeakMap(); // eslint-disable-line no-unused-vars

// Set defaults for sweetalert2 popup boxes
var Swal = sweetalert2__WEBPACK_IMPORTED_MODULE_0___default().mixin({
  buttonsStyling: false,
  customClass: {
    confirmButton: 'button',
    cancelButton: 'button'
  }
});

// Re-export
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Swal);

/***/ }),

/***/ "./assets/js/theme/halothemes/haloAZbrands.js":
/*!****************************************************!*\
  !*** ./assets/js/theme/halothemes/haloAZbrands.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @bigcommerce/stencil-utils */ "./node_modules/@bigcommerce/stencil-utils/src/main.js");
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(context) {
  var azWrapper = $('#haloAZBrandsWrapper'),
    azNavigation = $('#haloAZBrandsTable');
  var requestOptions = {
    config: {
      brands: {
        limit: context.themeSettings.brandpage_brands_per_page
      }
    },
    template: 'halothemes/brand/halo-all-brands'
  };
  if (context.themeSettings.halo_brandAZlayout == true) {
    getAllBrand();
    brandNavigationEvent();
  }
  function getAllBrand() {
    azWrapper.addClass('is-loading');
    var url = context.urls.brands;
    _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_0__["default"].api.getPage(url, requestOptions, function (error, response) {
      if (error) {
        return '';
      }
      var list = $(response);
      parseListBrand(list);
      var nextUrl = list.data('brands-list-next');
      if (nextUrl) {
        loadMoreBrands(nextUrl);
      } else {
        azWrapper.removeClass('is-loading');
      }
    });
  }
  function isLetter(str) {
    return str.length === 1 && str.match(/[a-z]/i);
  }
  function brandNavigationEvent() {
    azNavigation.on('click', 'a', function (event) {
      event.preventDefault();
      var $target = $(event.currentTarget);
      azNavigation.children('li').removeClass('is-active');
      $target.parent().addClass('is-active');
      var letter = $target.data('href');
      if (letter !== undefined || letter) {
        azWrapper.removeClass('active-all');
        azWrapper.find('.azBrands-group').removeClass('is-active');
        azWrapper.find('[data-letter=' + letter + ']').addClass('is-active');
      } else {
        azWrapper.addClass('active-all');
      }
    });
  }
  function parseListBrand(list) {
    azWrapper.find('.azBrands-group').each(function (index, element) {
      var letter = $(element).data('letter');
      if (!isLetter(letter)) {
        for (var i = 0; i < 10; i++) {
          $('.azBrands-group-list', element).append(list.find('[data-brand-letter=' + i + ']'));
        }
      } else {
        $('.azBrands-group-list', element).append(list.find('[data-brand-letter=' + letter + ']'));
      }
      if ($('.azBrands-group-list', element).children().length > 0) {
        azNavigation.find('[data-letter=' + letter + ']').removeClass('disable').addClass('has-letter');
      }
    });
  }
  function loadMoreBrands(url) {
    _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_0__["default"].api.getPage(url, requestOptions, function (error, response) {
      if (error) {
        return '';
      }
      var list = $(response);
      parseListBrand(list);
      var nextUrl = list.data('brands-list-next');
      if (nextUrl) {
        loadMoreBrands(nextUrl);
      } else {
        azWrapper.removeClass('is-loading');
      }
    });
  }
}

/***/ }),

/***/ "./assets/js/theme/halothemes/haloAddOptionForProduct.js":
/*!***************************************************************!*\
  !*** ./assets/js/theme/halothemes/haloAddOptionForProduct.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @bigcommerce/stencil-utils */ "./node_modules/@bigcommerce/stencil-utils/src/main.js");
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");

var fetch = __webpack_require__(/*! node-fetch */ "./node_modules/node-fetch/browser.js");
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(context, wrapper) {
  if (context.themeSettings.haloAddOptionForProduct == true) {
    var callProductOption = function callProductOption() {
      product_class.each(function (index, element) {
        var productId = $(element).data("product-id");
        if (!$(element).find('[data-product-attribute="swatch"]').children().length) {
          list.push(productId.toString());
        }
      });
      list = uniqueArray(list);
      if (list.length > 0) {
        getProductOption(list).then(function (data) {
          renderOption(data);
          $.each(list, function (idx, item) {
            var arr = {},
              productId = list[idx];
            var thisProduct = product_wrapper.find('.card:not(.is-loaded) .card-option-' + productId + ':not(.is-loaded):eq(0)');
            thisProduct.find('.form-option-swatch').each(function (index, element) {
              var txt = $(element).data('product-swatch-value');
              if (arr[txt]) {
                $(element).remove();
              } else {
                arr[txt] = true;
              }
            });
            if (thisProduct.find('.form-option-swatch').length > 5) {
              var countMoreOption = thisProduct.find('.form-option-swatch').length - 5,
                productLink = product_wrapper.find('[data-product-id="' + productId + '"]').find('.card-title a').attr('href');
              thisProduct.find('.form-option-swatch').each(function (index, element) {
                if (index >= 5) {
                  $(element).remove();
                }
              });
              if (thisProduct.find('.form-field .showmore').length < 1) {
                if (context.themeSettings.halo_homepage_layout_1 == true) {
                  thisProduct.find('.form-field').append('<a href="' + productLink + '" class="showmore">+' + countMoreOption + '</a>');
                } else {
                  thisProduct.find('.form-field').append('<a href="' + productLink + '" class="showmore">+' + countMoreOption + ' more</a>');
                }
              }
            }
            thisProduct.addClass('is-loaded').closest('.card').addClass('is-loaded');
          });
        });
      }
    };
    var getProductOption = function getProductOption(list) {
      return fetch('/graphql', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer ' + token
        },
        body: JSON.stringify({
          query: "\n                        query SeveralProductsByID {\n                            site {\n                                products(entityIds: [" + list + "], first: 50) {\n                                    edges {\n                                        node {\n                                            entityId\n                                            name\n                                            defaultImage{\n                                                urlOriginal\n                                            }\n                                            variants(first: 50){\n                                                edges{\n                                                    node{\n                                                        entityId\n                                                        defaultImage{\n                                                            urlOriginal\n                                                        }\n                                                        productOptions(first: 50) {\n                                                            edges {\n                                                                node {\n                                                                    entityId\n                                                                    displayName\n                                                                    isRequired\n                                                                    ... on MultipleChoiceOption {\n                                                                        displayStyle\n                                                                        values {\n                                                                            edges {\n                                                                                node {\n                                                                                    entityId\n                                                                                    label\n                                                                                    isDefault\n                                                                                    ... on SwatchOptionValue {\n                                                                                        hexColors\n                                                                                        imageUrl(width: 150)\n                                                                                    }\n                                                                                }\n                                                                            }\n                                                                        }\n                                                                    }\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    "
        })
      }).then(function (res) {
        return res.json();
      }).then(function (res) {
        return res.data;
      });
    };
    var renderOption = function renderOption(data) {
      var aFilter = data.site.products.edges;
      $.each(aFilter, function (index, element) {
        var productId = aFilter[index].node.entityId,
          productImage,
          productFieldColor = product_wrapper.find('.card-option-' + productId + ':not(.is-loaded):eq(0) .form-field'),
          aFilter2 = aFilter[index].node.variants.edges;
        if (aFilter[index].node.defaultImage) {
          productImage = aFilter[index].node.defaultImage.urlOriginal;
        } else {
          productImage = 'https://cdn11.bigcommerce.com/s-ol6dayxf7q/stencil/d960f210-86dd-0138-e71d-0242ac110008/e/a2941d20-8b64-0138-e78d-0242ac110013/img/ProductDefault.gif';
        }
        $.each(aFilter2, function (idx, el) {
          var variantImage,
            aFilter3 = aFilter2[idx].node.productOptions.edges;
          if (aFilter2[idx].node.defaultImage) {
            variantImage = aFilter2[idx].node.defaultImage.urlOriginal;
          }
          if (variantImage === undefined || variantImage === null) {
            variantImage = productImage;
          }
          var aFilter4 = aFilter3.filter(function (item) {
            return item.node.displayStyle === 'Swatch';
          });
          if (aFilter4.length > 0) {
            var aFilter5 = aFilter4[0].node.values.edges;
            $.each(aFilter5, function (idx, element) {
              var titleVar = aFilter5[idx].node.label,
                idVar = aFilter5[idx].node.entityId,
                lengthColorVar = aFilter5[idx].node.hexColors.length,
                color1 = aFilter5[idx].node.hexColors[0],
                color2 = aFilter5[idx].node.hexColors[1],
                color3 = aFilter5[idx].node.hexColors[2],
                img = aFilter5[idx].node.imageUrl;
              if (lengthColorVar == 2) {
                productFieldColor.append('<label class="form-option form-option-swatch two-colors" data-image ="' + variantImage + '" data-product-swatch-value="' + idVar + '" data-title="' + titleVar + '"><span class="form-option-tooltip">' + titleVar + '</span><span class="form-option-variant form-option-variant--color form-option-variant--color2" title="' + titleVar + '"><span class="form-option-variant form-option-variant--color two-colors" style="background-color:' + color1 + ';border: none;left: -1px;"></span><span class="form-option-variant form-option-variant--color two-colors" style="background-color:' + color2 + ';border: none;"></span></span></label>');
              } else if (lengthColorVar === 3) {
                productFieldColor.append('<label class="form-option form-option-swatch three-colors two-colors" data-image ="' + variantImage + '" data-product-swatch-value="' + idVar + '" data-title="' + titleVar + '"><span class="form-option-tooltip">' + titleVar + '</span><span class="form-option-variant form-option-variant--color form-option-variant--color2" title="' + titleVar + '"><span class="form-option-variant form-option-variant--color three-colors" style="background-color:' + color1 + '"></span><span class="form-option-variant form-option-variant--color three-colors" style="background-color:' + color2 + '"></span><span style="background-color:' + color3 + '"></span></span></label>');
              } else if (Boolean(color1)) {
                productFieldColor.append('<label class="form-option form-option-swatch" data-image ="' + variantImage + '"  data-product-swatch-value="' + idVar + '" data-title="' + titleVar + '"><span class="form-option-tooltip">' + titleVar + '</span><span class="form-option-variant form-option-variant--color" title="' + titleVar + '" style="background-color: ' + color1 + '"></span></label>');
              } else if (Boolean(img)) {
                productFieldColor.append('<label class="form-option form-option-swatch " data-image ="' + variantImage + '" data-product-swatch-value="' + idVar + '" data-title="' + titleVar + '"><span class="form-option-tooltip">' + titleVar + '</span><span class="form-option-variant form-option-variant--pattern" title="' + titleVar + '" style="background-image: url(' + img + ')"></span></label>');
              }
            });
          } else {
            productFieldColor.remove();
          }
        });
      });
    };
    var uniqueArray = function uniqueArray(list) {
      var result = [];
      $.each(list, function (index, element) {
        if ($.inArray(element, result) == -1) {
          result.push(element);
        }
      });
      return result;
    };
    var token = context.token,
      product_wrapper = $('#' + wrapper),
      product_class = product_wrapper.find('.card:not(.is-loaded)');
    var list = [];
    callProductOption();
    product_wrapper.on('beforeChange', function () {
      callProductOption();
    });
  }
}

/***/ }),

/***/ "./assets/js/theme/halothemes/haloAjaxAddToCart.js":
/*!*********************************************************!*\
  !*** ./assets/js/theme/halothemes/haloAjaxAddToCart.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @bigcommerce/stencil-utils */ "./node_modules/@bigcommerce/stencil-utils/src/main.js");
/* harmony import */ var _global_modal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../global/modal */ "./assets/js/theme/global/modal.js");
/* harmony import */ var _haloCalculateFreeShipping__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./haloCalculateFreeShipping */ "./assets/js/theme/halothemes/haloCalculateFreeShipping.js");
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");



/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(context) {
  var modal = (0,_global_modal__WEBPACK_IMPORTED_MODULE_1__["default"])('#modal')[0];
  if (context.themeSettings.haloAjaxAddToCart) {
    if (context.themeSettings.haloAddToCartAction !== 'cart') {
      $(document).on('click', '.halo-add-to-cart', function (event) {
        if (window.FormData === undefined) {
          return;
        }
        var $addToCartBtn = $(event.currentTarget),
          waitMessage = $addToCartBtn.data('waitMessage'),
          originalBtnVal = $addToCartBtn.find('span').text(),
          productId = $addToCartBtn.data('product-id');
        event.preventDefault();
        $addToCartBtn.find('span').text(waitMessage);
        $addToCartBtn.prop('disabled', true);
        if (productId === 0) {
          return;
        }
        var formData = new FormData();
        formData.append('product_id', productId);
        _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_0__["default"].api.cart.itemAdd(formData, function (err, response) {
          var errorMessage = err || response.data.error;
          $addToCartBtn.find('span').text(originalBtnVal);
          $addToCartBtn.prop('disabled', false);
          if (errorMessage) {
            var tmp = document.createElement('DIV');
            tmp.innerHTML = errorMessage;
            alert(tmp.textContent || tmp.innerText);
            return;
          }
          if (context.themeSettings.haloAddToCartAction === 'sidebar') {
            var options = {
              template: 'common/cart-preview'
            };
            var loadingClass = 'is-loading';
            var $body = $('body');
            var $cartDropdown = $('#halo-cart-sidebar .halo-sidebar-wrapper');
            var $cartLoading = $('<div class="loadingOverlay"></div>');
            $body.toggleClass('openCartSidebar');
            $cartDropdown.addClass(loadingClass).html($cartLoading);
            $cartLoading.show();
            _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_0__["default"].api.cart.getContent(options, function (err, response) {
              $cartDropdown.removeClass(loadingClass).html(response);
              $cartLoading.hide();
              var quantity = $(response).find('[data-cart-quantity]').data('cartQuantity') || 0;
              $body.trigger('cart-quantity-update', quantity);
              (0,_haloCalculateFreeShipping__WEBPACK_IMPORTED_MODULE_2__["default"])(context);
            });
          }
        });
      });
    }
  }
  function updateCartContent(modal, cartItemHash) {
    getCartContent(cartItemHash, function (err, response) {
      if (err) {
        return;
      }
      modal.updateContent(response);
      var $body = $('body');
      var quantity = $(response).find('[data-cart-quantity]').data('cartQuantity') || 0;
      $body.trigger('cart-quantity-update', quantity);
    });
  }
  function getCartContent(cartItemHash, onComplete) {
    var options = {
      template: 'cart/preview',
      params: {
        suggest: cartItemHash
      },
      config: {
        cart: {
          suggestions: {
            limit: 4
          }
        }
      }
    };
    _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_0__["default"].api.cart.getContent(options, onComplete);
  }
}

/***/ }),

/***/ "./assets/js/theme/halothemes/haloAjaxLoginPopup.js":
/*!**********************************************************!*\
  !*** ./assets/js/theme/halothemes/haloAjaxLoginPopup.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _common_nod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/nod */ "./assets/js/theme/common/nod.js");
/* harmony import */ var _common_models_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/models/forms */ "./assets/js/theme/common/models/forms.js");
/* harmony import */ var _common_utils_form_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/utils/form-utils */ "./assets/js/theme/common/utils/form-utils.js");
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");



/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  var $loginForm = (0,_common_utils_form_utils__WEBPACK_IMPORTED_MODULE_2__.classifyForm)('.login-form-sidebar form');
  if ($loginForm.length > 0) {
    registerLoginValidation($loginForm);
  }
  function registerLoginValidation($loginForm) {
    var loginModel = _common_models_forms__WEBPACK_IMPORTED_MODULE_1__["default"];
    var loginValidator = (0,_common_nod__WEBPACK_IMPORTED_MODULE_0__["default"])({
      submit: $loginForm.find('button')
    });
    loginValidator.add([{
      selector: $loginForm.find('input[type="email"]'),
      validate: function validate(cb, val) {
        var result = loginModel.email(val);
        cb(result);
      },
      errorMessage: 'Please use a valid email address, such as user@example.com.'
    }, {
      selector: $loginForm.find('input[type="password"]'),
      validate: function validate(cb, val) {
        var result = loginModel.password(val);
        cb(result);
      },
      errorMessage: 'You must enter a password.'
    }]);
    $loginForm.on('click', 'button', function (event) {
      event.preventDefault();
      loginValidator.performCheck();
      if (loginValidator.areAll('valid')) {
        var formData = new FormData($loginForm[0]),
          _xhr = new XMLHttpRequest(),
          urlSuccess1 = 'account.php',
          urlSuccess2 = 'cart.php',
          urlError = 'login.php';
        $loginForm.parents('.halo-sidebar-wrapper').find('.note').remove();
        $loginForm.parents('.login-form-sidebar').addClass('is-loading');
        $.ajax({
          type: 'POST',
          url: '/login.php?action=check_login',
          data: formData,
          processData: false,
          contentType: false,
          xhr: function xhr() {
            return _xhr;
          },
          success: function success(data) {
            $loginForm.parents('.login-form-sidebar').removeClass('is-loading');
            var url = _xhr.responseURL;
            if (url.indexOf(urlSuccess1) != -1 || url.indexOf(urlSuccess2) != -1) {
              location.reload();
            } else if (url.indexOf(urlError) != -1) {
              $loginForm.parents('.halo-sidebar-wrapper').prepend('<div class="note">\
                                <div class="alertBox alertBox--error">\
                                    <div class="alertBox-column alertBox-icon">\
                                        <svg class="icon"><use xlink:href="#icon-error"></use></svg>\
                                    </div>\
                                    <p class="alertBox-column alertBox-message">\
                                        <span id="alertBox-message-text">Your email address or password is incorrect. Please try again.</span>\
                                    </p>\
                                </div>\
                            </div>');
            } else {
              location.reload();
            }
          },
          error: function error(jqXHR, exception) {}
        });
        return;
      }
    });
  }
  function redirectTo(url) {
    if (isRunningInIframe() && !window.iframeSdk) {
      window.top.location = url;
    } else {
      window.location = url;
    }
  }
  function isRunningInIframe() {
    try {
      return window.self !== window.top;
    } catch (e) {
      return true;
    }
  }
}

/***/ }),

/***/ "./assets/js/theme/halothemes/haloAskAnExpertPopup.js":
/*!************************************************************!*\
  !*** ./assets/js/theme/halothemes/haloAskAnExpertPopup.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @bigcommerce/stencil-utils */ "./node_modules/@bigcommerce/stencil-utils/src/main.js");
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(context) {
  var message;
  $(document).ready(function () {
    _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_0__["default"].api.getPage(context.themeSettings.halo_ask_an_expert_pagelink, {
      template: 'halothemes/ask-an-expert/halo-ask-an-expert-form'
    }, function (err, response) {
      if (err) return;
      $('.hl-form-field-wrapper').html(response);
    });
  });
  $(document).on('click', '.ask-an-expert-link', function (event) {
    event.preventDefault();
    $('body').addClass('has-askAnExpert');
  });
  $(document).on('click', '[data-close-ask-an-expert-popup]', function (event) {
    event.preventDefault();
    $('body').removeClass('has-askAnExpert');
  });
  $(document).on('click', function (event) {
    if ($(event.target).closest('.ask-an-expert-link').length === 0 && $(event.target).closest('.halo-ask-an-expert-container').length === 0) {
      $('body').removeClass('has-askAnExpert');
    }
  });
  $('.halo-ask-an-expert-form').on('submit', function (event) {
    event.preventDefault();
    var typeContact = $('.halo-ask-an-expert-form input[name=type_contact]:checked').val(),
      typePackage = $('.halo-ask-an-expert-form input[name=type_package]:checked').val(),
      customerMessage = $('.halo-ask-an-expert-form textarea[name=contact_comment_area]').val(),
      recaptcha = $('.halo-ask-an-expert-form #g-recaptcha-response').val(),
      title = $('.halo-ask-an-expert-form[data-product-title]').attr('data-product-title'),
      sku = $('.halo-ask-an-expert-form[data-product-sku]').attr('data-product-sku'),
      url = $('.halo-ask-an-expert-form[data-product-url]').attr('data-product-url');
    if (recaptcha == '') {
      var error = 'The captcha you entered is incorrect. Please try again.';
      $('#halo-ask-an-expert-results').html('<div class="alertBox alertBox--error">' + error + '</div>');
      return;
    }
    if ($("body").hasClass("page-type-product")) {
      message = "\n\rDo you need: " + typePackage + "\n\rWhat can i help you with today: " + customerMessage + "\n\rHow would you like me to contact you ?: " + typeContact + "\n\rProduct Name: " + title + "\n\rProduct SKU: " + sku + "\n\rProduct Link: " + url;
    } else {
      message = "\n\rDo you need: " + typePackage + "\n\rWhat can i help you with today: " + customerMessage + "\n\rHow would you like me to contact you ?: " + typeContact;
    }
    $('#contact_question').val(message);
    $.ajax({
      type: 'POST',
      url: '/pages.php?action=sendContactForm',
      data: $('.halo-ask-an-expert-form').serialize(),
      success: function success() {
        $('.halo-ask-an-expert-form').hide();
        $('#halo-ask-an-expert-results').html('<div class="alertBox alertBox--success">Thank you. We\'ve received your feedback and will respond shortly.</div>');
      }
    });
  });
  $(document).on('change', '#term-ask', function (event) {
    if ($("#term-ask:checked").length) {
      $('#halo-ask-an-expert-button').attr('disabled', false);
    } else {
      $('#halo-ask-an-expert-button').attr('disabled', true);
    }
  });
}

/***/ }),

/***/ "./assets/js/theme/halothemes/haloBeforeYouLeave.js":
/*!**********************************************************!*\
  !*** ./assets/js/theme/halothemes/haloBeforeYouLeave.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @bigcommerce/stencil-utils */ "./node_modules/@bigcommerce/stencil-utils/src/main.js");
/* harmony import */ var slick_carousel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! slick-carousel */ "./node_modules/slick-carousel/slick/slick.min.js");
/* harmony import */ var slick_carousel__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(slick_carousel__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _global_sweet_alert__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../global/sweet-alert */ "./assets/js/theme/global/sweet-alert.js");
/* harmony import */ var _haloAddOptionForProduct__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./haloAddOptionForProduct */ "./assets/js/theme/halothemes/haloAddOptionForProduct.js");
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");
/* provided dependency */ var jQuery = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");




/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(context) {
  var $beforeLeave = $('#before-you-leave'),
    token = context.token,
    curCode = $('.body').data('currency-code');
  function setCookie(cname, cvalue, exdays) {
    var d = new Date();
    d.setTime(d.getTime() + exdays * 24 * 60 * 60 * 1000);
    var expires = 'expires=' + d.toUTCString();
    document.cookie = cname + '=' + cvalue + ';' + expires + ';path=/';
  }
  function getCookie(cname) {
    var name = cname + '=';
    var ca = document.cookie.split(';');
    for (var i = 0; i < ca.length; i++) {
      var c = ca[i];
      while (c.charAt(0) === ' ') {
        c = c.substring(1);
      }
      if (c.indexOf(name) === 0) {
        return c.substring(name.length, c.length);
      }
    }
    return '';
  }
  var deleteCookie = function deleteCookie(name) {
    document.cookie = name + '=;expires=Thu, 01 Jan 1970 00:00:01 GMT;';
  };
  var BC_Products = function () {
    var e = {
      howManyToShow: 3,
      howManyToStoreInMemory: 10,
      onComplete: null
    };
    var t = [];
    var n = null;
    var r = null;
    var i = 0;
    var s = {
      configuration: {
        expires: context.themeSettings.halo_before_you_leave_history_expires_date,
        path: "/",
        domain: window.location.hostname
      },
      name: "bigcommerce_history",
      write: function write(e) {
        setCookie(this.name, e.join(" "), this.configuration.expires);
      },
      read: function read() {
        var e = [];
        var t = getCookie(this.name);
        if (t !== null && t != undefined) {
          e = t.split(" ");
        }
        return e;
      },
      destroy: function destroy() {
        setCookie(this.name, null, this.configuration.expires);
      },
      remove: function remove(e) {
        var t = this.read();
        var n = $.inArray(e, t);
        if (n !== -1) {
          t.splice(n, 1);
          this.write(t);
        }
      }
    };
    var o = function o() {
      if (e.onComplete) {
        try {
          e.onComplete();
        } catch (t) {}
      }
    };
    var u = function u() {
      var $option = {
        template: 'halothemes/product/halo-before-you-leave-temp'
      };
      var limit = context.themeSettings.halo_before_you_leave_history_count;
      var unique = function (t) {
        var m = {},
          unique = [];
        for (var i = 0; i <= limit; i++) {
          var v = t[i];
          if (!m[v]) {
            unique.push(v);
            m[v] = true;
          }
        }
        return unique;
      }(t);
      var count = unique.length - 1,
        $tab = $beforeLeave.find('#tab-history');
      if ($tab.length) {
        $tab.find('.productGrid').empty();
        for (var j = 0; j < e.howManyToShow; j++) {
          var $prodId = unique[j];
          _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_0__["default"].api.product.getById($prodId, $option, function (err, response) {
            if (err) {
              return false;
            }
            if ($tab.find('.product').length < limit) {
              $tab.find('.productGrid').append(response);
              (0,_haloAddOptionForProduct__WEBPACK_IMPORTED_MODULE_3__["default"])(context, 'tab-history');
            }
            i++;
            if (i >= e.howManyToShow) {
              $tab.find('.no-products').remove();
            }
          });
        }
      }
      $beforeLeave.find('.tab.history .count').text(count);
    };
    return {
      resizeImage: function resizeImage(e, t) {
        if (t == null) {
          return e;
        }
        if (t == "master") {
          return e.replace(/http(s)?:/, "");
        }
        var n = e.match(/\.(jpg|jpeg|gif|png|bmp|bitmap|tiff|tif)(\?v=\d+)?/i);
        if (n != null && n != undefined) {
          var r = e.split(n[0]);
          var i = n[0];
          return (r[0] + "_" + t + i).replace(/http(s)?:/, "");
        } else {
          return null;
        }
      },
      showHistory: function showHistory(i) {
        var i = i || {};
        jQuery.extend(e, i);
        t = s.read();
        e.howManyToShow = Math.min(t.length, e.howManyToShow);
        if (e.howManyToShow) {
          u();
        }
      },
      getConfig: function getConfig() {
        return e;
      },
      clearList: function clearList() {
        s.destroy();
      },
      recordHistory: function recordHistory(t) {
        var t = t || {};
        var product_id = $('.productView').find('form[data-cart-item-add] [name="product_id"]').val();
        jQuery.extend(e, t);
        var n = s.read();
        if (product_id) {
          var r = product_id;
          var i = jQuery.inArray(r, n);
          if (i === -1) {
            n.unshift(r);
            n = n.splice(0, e.howManyToStoreInMemory);
          } else {
            n.splice(i, 1);
            n.unshift(r);
          }
          s.write(n);
        }
      }
    };
  }();
  function getProduct(arr) {
    return fetch('/graphql', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer ' + token
      },
      body: JSON.stringify({
        query: "\n            query MyQuery {\n                site {\n                    products (entityIds: [" + arr + "]) {\n                      edges {\n                        \tproduct: node {\n                          \t\t...ProductFields\n                          \t}\n                        }\n                    }\n                    currency (currencyCode: " + curCode + ") {\n                        display {\n                            symbol\n                            symbolPlacement\n                            decimalToken\n                            thousandsToken\n                            decimalPlaces\n                        }\n                    }\n                }\n            }\n            fragment ProductFields on Product {\n                id\n                entityId\n                name\n                path\n                inventory {\n                \tisInStock\n                \thasVariantInventory\n                }\n                productOptions {\n\t\t            edges {\n\t\t              \tnode {\n\t\t\t                entityId\n\t\t\t                displayName\n\t\t\t                isRequired\n\t\t              \t}\n\t\t            }\n\t\t        }\n                defaultImage {\n                    img70px: url(width: 70)\n                    altText\n                }\n                prices {\n                    priceRange {\n                        min {\n                            ...MoneyFields\n                        }\n                        max {\n                            ...MoneyFields\n                        }\n                    }\n                    retailPrice {\n                        ...MoneyFields\n                    }\n                    basePrice {\n                        ...MoneyFields\n                    }\n                    price {\n                        ...MoneyFields\n                    }\n                }\n            }\n            fragment MoneyFields on Money {\n                value\n                currencyCode\n            }\n        "
      })
    }).then(function (res) {
      return res.json();
    }).then(function (res) {
      return res.data;
    });
  }
  function formatMoney(n, c, d, t) {
    var c = isNaN(c = Math.abs(c)) ? 2 : c,
      d = d == undefined ? "." : d,
      t = t == undefined ? "," : t,
      s = n < 0 ? "-" : "",
      i = String(parseInt(n = Math.abs(Number(n) || 0).toFixed(c))),
      j = (j = i.length) > 3 ? j % 3 : 0;
    return s + (j ? i.substr(0, j) + t : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + t) + (c ? d + Math.abs(n - i).toFixed(c).slice(2) : "");
  }

  // Before You Leave 
  function ProductsCarousel(tab) {
    if (!tab.hasClass('slick-slider')) {
      tab.slick({
        dots: true,
        arrows: true,
        slidesToShow: 1,
        slidesToScroll: 1,
        slidesPerRow: 1,
        rows: 1,
        mobileFirst: true,
        infinite: false,
        responsive: [{
          breakpoint: 1024,
          settings: {
            slidesPerRow: 1,
            rows: 3
          }
        }, {
          breakpoint: 767,
          settings: {
            slidesPerRow: 1,
            rows: 2
          }
        }]
      });
    }
  }
  function beforeYouLeave() {
    var beforeYouLeave_time = parseInt($('#before-you-leave').data("time")) * 60 * 1000;
    var beforeYouLeave = $("#before-you-leave");
    var productLoadTime = beforeYouLeave_time / 2 + 100;
    if (beforeYouLeave_time < 2) {
      beforeYouLeave_time = beforeYouLeave_time + 100;
    }
    if (!$(beforeYouLeave).length) {
      return;
    } else {
      var idleTime = 0;
      var tmp = jQuery('#tab-recommended .productGrid'),
        productIDS = context.themeSettings.halo_before_you_leave_recommended_id,
        listIDs = JSON.parse("[" + productIDS + "]");
      $(document).ready(function () {
        setTimeout(function () {
          if (listIDs.length > 0) {
            getProduct(listIDs).then(function (data) {
              renderProduct(data.site.products.edges, data.site.currency.display, tmp);
              historyProducts();
            });
          }
        }, productLoadTime);
        var slickInterval = setInterval(function () {
          timerIncrement();
        }, beforeYouLeave_time + 1000);
      });
      $(document).on('click', function (event) {
        if ($('body').hasClass('openBeforeYouLeave')) {
          if ($(event.target).closest('.before-you-leave').length === 0) {
            $('body').removeClass('openBeforeYouLeave');
          }
        }
      });
      $(document).on('click', '.before-you-leave-search [data-search-leave]', function (event) {
        event.preventDefault();
        var $beforeLeaveSearch = $('.before-you-leave-search');
        $beforeLeaveSearch.toggleClass('is-open');
        if ($beforeLeaveSearch.hasClass('is-open')) {
          $beforeLeaveSearch.siblings().addClass('is-hidden');
          $('#search_query2').trigger('focus');
          $beforeLeave.find('.tabs-contents').addClass('is-hidden');
          $('.halo-bottomHeader .quickSearchResults').appendTo($beforeLeaveSearch);
          $('.halo-bottomHeader .quickSearchResultsCustom').appendTo($beforeLeaveSearch);
          $beforeLeaveSearch.find('.quickSearchResultsCustom').addClass('is-open');
        } else {
          $beforeLeaveSearch.find('.quickSearchResults').appendTo('.halo-bottomHeader .container');
          $beforeLeaveSearch.find('.quickSearchResultsCustom').appendTo('.halo-bottomHeader .container');
          $('.halo-bottomHeader .quickSearchResultsCustom').removeClass('is-open');
          $beforeLeaveSearch.siblings().removeClass('is-hidden');
          $beforeLeave.find('.tabs-contents').removeClass('is-hidden');
        }
      });
      $(document).on('keydown mousemove touchstart scroll', function (e) {
        resetTimer();
      });
    }
    function timerIncrement() {
      idleTime = idleTime + 1;
      if (idleTime >= 1 && !$('body.openBeforeYouLeave').length) {
        if (!$('body.openBeforeYouLeave').length) {
          var tab = $('#tab-recommended .productGrid');
          setTimeout(function () {
            beforeYouLeave.show();
            $('body').addClass('openBeforeYouLeave');
            ProductsCarousel(tab);
          }, 100);
        }
      }
    }
    function resetTimer() {
      idleTime = -1;
    }
    function renderProduct(product, curDisplay, tmp) {
      if (product != undefined) {
        $.each(product, function (index, element) {
          var item = element.product,
            symbol = curDisplay.symbol,
            symbolPlacement = curDisplay.symbolPlacement.toLowerCase(),
            decimalToken = curDisplay.decimalToken,
            decimalPlaces = curDisplay.decimalPlaces,
            thousandsToken = curDisplay.thousandsToken;
          var title, price;
          if ($('.body').hasClass('is-login') || context.themeSettings.restrict_to_login !== true) {
            if (item.prices.priceRange.min.value < item.prices.priceRange.max.value && context.themeSettings.price_ranges) {
              var priceMin = (symbolPlacement == "left" ? symbol : "") + formatMoney(item.prices.priceRange.min.value, decimalPlaces, decimalToken, thousandsToken) + (symbolPlacement != "left" ? symbol : "");
              var priceMax = (symbolPlacement == "left" ? symbol : "") + formatMoney(item.prices.priceRange.max.value, decimalPlaces, decimalToken, thousandsToken) + (symbolPlacement != "left" ? symbol : "");
              price = '<div class="price-section price-section--withoutTax non-sale-price--withoutTax price-none" style="display: none;">\
                                        <span data-product-non-sale-price-without-tax="" class="price price--non-sale"></span>\
                                    </div>\
                                    <div class="price-section price-section--withoutTax">\
                                        <span data-product-price-without-tax="" class="price price--withoutTax">' + priceMin + ' - ' + priceMax + '</span>\
                                    </div>';
            } else {
              var priceDef = (symbolPlacement == "left" ? symbol : "") + formatMoney(item.prices.price.value, decimalPlaces, decimalToken, thousandsToken) + (symbolPlacement != "left" ? symbol : "");
              if (item.prices.retailPrice == null) {
                if (item.prices.basePrice.value > item.prices.price.value) {
                  var priceBas = (symbolPlacement == "left" ? symbol : "") + formatMoney(item.prices.basePrice.value, decimalPlaces, decimalToken, thousandsToken) + (symbolPlacement != "left" ? symbol : "");
                  price = '<div class="price-section price-section--withoutTax non-sale-price--withoutTax">\
                                                <span data-product-non-sale-price-without-tax="" class="price price--non-sale">' + priceBas + '</span>\
                                            </div>\
                                            <div class="price-section price-section--withoutTax">\
                                                <span data-product-price-without-tax="" class="price price--withoutTax">' + priceDef + '</span>\
                                            </div>';
                } else {
                  price = '<div class="price-section price-section--withoutTax non-sale-price--withoutTax price-none" style="display: none;">\
                                                <span data-product-non-sale-price-without-tax="" class="price price--non-sale"></span>\
                                            </div>\
                                            <div class="price-section price-section--withoutTax">\
                                                <span data-product-price-without-tax="" class="price price--withoutTax">' + priceDef + '</span>\
                                            </div>';
                }
              } else {
                if (item.prices.retailPrice.value > item.prices.price.value) {
                  var priceRet = (symbolPlacement == "left" ? symbol : "") + formatMoney(item.prices.retailPrice.value, decimalPlaces, decimalToken, thousandsToken) + (symbolPlacement != "left" ? symbol : "");
                  price = '<div class="price-section price-section--withoutTax non-sale-price--withoutTax">\
                                                <span data-product-non-sale-price-without-tax="" class="price price--non-sale">' + priceRet + '</span>\
                                            </div>\
                                            <div class="price-section price-section--withoutTax">\
                                                <span data-product-price-without-tax="" class="price price--withoutTax">' + priceDef + '</span>\
                                            </div>';
                } else {
                  price = '<div class="price-section price-section--withoutTax non-sale-price--withoutTax price-none" style="display: none;">\
                                                <span data-product-non-sale-price-without-tax="" class="price price--non-sale"></span>\
                                            </div>\
                                            <div class="price-section price-section--withoutTax">\
                                                <span data-product-price-without-tax="" class="price price--withoutTax">' + priceDef + '</span>\
                                            </div>';
                }
              }
            }
          } else {
            price = '<p translate>Log in for pricing</p>';
          }
          var productTitle,
            $tab = $beforeLeave.find('#tab-recommended');
          if (context.themeSettings.halo_card_title == 'ellipsis') {
            productTitle = '<a href="' + item.path + '" class="clamp" style="-webkit-box-orient: vertical; -webkit-line-clamp: 1;" aria-label="Link Go To This Product">' + item.name + '</a>';
          } else {
            productTitle = '<a href="' + item.path + '" class="clamp" aria-label="Link Go To This Product">' + item.name + '</a>';
          }
          $tab.find('.no-products').remove();
          var html_card = '<div class="productCarousel-slide">\
                    				<div class="product">\
                                        <article class="card" data-product-id="' + item.entityId + '">\
                                            <figure class="card-figure">\
                                                <div class="card-img-container">\
                                                    <a href="' + item.path + '"><img class="card-image" src="' + item.defaultImage.img70px + '" alt="' + item.defaultImage.altText + '" title="' + item.defaultImage.altText + '"></a>\
                                                </div>\
                                            </figure>\
                                            <div class="card-body">\
                                                <h4 class="card-title">' + productTitle + '</h4>\
                                                <div class="card-text card-price">' + price + '</div>\
                                                <div class="card-option card-option-' + item.entityId + '">\
									                <div class="form-field"></div>\
									            </div>\
							                    <a href="' + item.path + '" class="card-action">\
										            <span class="text">Details</span>\
										        </a>\
                                            </div>\
                                        </article>\
                                    </div>\
                                </div>';
          tmp.append(html_card);
          (0,_haloAddOptionForProduct__WEBPACK_IMPORTED_MODULE_3__["default"])(context, 'tab-recommended');
          var count = $('#tab-recommended .productGrid .productCarousel-slide').length;
          $('#before-you-leave .before-you-leave-tab .recommended .count').html(count);
        });
      }
    }
    $('.before-you-leave-continue').on('click', function (e) {
      if ($('body').hasClass('openBeforeYouLeave')) {
        $('body').removeClass('openBeforeYouLeave');
      }
    });
    $('.halo-background').on('click', function (e) {
      if ($('body').hasClass('openBeforeYouLeave')) {
        $('body').removeClass('openBeforeYouLeave');
      }
    });
    $("#before-you-leave .before-you-leave-tab .tab").on("click", function () {
      var tabId = $(this).data('id');
      var tab = $(".before-you-leave-tab .tabs-contents #tab-" + tabId + " .productGrid");
      setTimeout(function () {
        ProductsCarousel(tab);
      }, 20);
    });
  }
  function historyProducts() {
    BC_Products.recordHistory();
    var cookieValue = getCookie("bigcommerce_history");
    if (!(cookieValue !== null && cookieValue !== undefined && cookieValue !== "")) {
      $('#before-you-leave .tab.history .count').text("0");
    } else {
      BC_Products.showHistory({
        howManyToShow: context.themeSettings.halo_before_you_leave_history_count,
        howManyToStoreInMemory: context.themeSettings.halo_before_you_leave_history_count,
        onComplete: function onComplete() {}
      });
    }
  }
  beforeYouLeave();
}

/***/ }),

/***/ "./assets/js/theme/halothemes/haloCalculateFreeShipping.js":
/*!*****************************************************************!*\
  !*** ./assets/js/theme/halothemes/haloCalculateFreeShipping.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @bigcommerce/stencil-utils */ "./node_modules/@bigcommerce/stencil-utils/src/main.js");
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(context) {
  if (context.themeSettings.halo_shipping == true) {
    var loadFreeShippingMessage = function loadFreeShippingMessage() {
      var options = {
        template: 'halothemes/shipping/halo-calculate-free-shipping-tmp'
      };
      _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_0__["default"].api.cart.getContent(options, function (err, response) {
        showFreeShippingMessage(response);
      });
    };
    var showFreeShippingMessage = function showFreeShippingMessage(message) {
      if ($(message).length > 0) {
        $(message).find('.haloCalulateFreeShipping-text').each(function (index, element) {
          if ($('.condition_remaining', element).text() != "" || $('.congratulation', element).text()) {
            if (context.themeSettings.halo_shipping_type == 'all') {
              showProgress(message, element);
            } else if (context.themeSettings.halo_shipping_type == 'custom') {
              var countryCode, country, countryList;
              $.getScript('https://ssl.geoplugin.net/javascript.gp?k=9247556ec91c71e9', function (event) {
                countryCode = geoplugin_countryCode();
                country = $('.country', element).text();
                countryList = country.split(",");
                if ($.inArray(countryCode, countryList) != -1) {
                  showProgress(message, element);
                } else {
                  $('.halo-free-shipping-message').hide();
                }
              });
            }
          }
        });
        if ($(message).find('.haloCalulateFreeShipping-text').length == 0) {
          $('.halo-free-shipping-message').hide();
        }
      }
    };
    var showProgress = function showProgress(message, scope) {
      var max_percent = 0,
        classProgress;
      var condition_required = $('.condition_required', scope).text(),
        condition_matched = $('.condition_matched', scope).text(),
        condition_remaining = $('.condition_remaining', scope).text(),
        num_required = condition_required != "" ? Number(condition_required.replace(/[^0-9.-]+/g, "")) : 0,
        num_matched = condition_matched != "" ? Number(condition_matched.replace(/[^0-9.-]+/g, "")) : 0,
        num_remaining = condition_remaining != "" ? Number(condition_remaining.replace(/[^0-9.-]+/g, "")) : 0;
      var percent = parseInt(num_matched / num_required * 100);
      percent = percent > 100 ? 100 : percent;
      if (num_required == num_remaining) {
        percent = 100;
      }
      if ($('.congratulation', scope).text() != "") {
        percent = 100;
      }
      if (percent > max_percent) {
        max_percent = percent;
      } else {
        return;
      }
      if (percent <= 50) {
        classProgress = "progress-shipping-50";
        message = upsellMessage[1].replace('{remaining}', condition_remaining);
      } else if (percent <= 90) {
        classProgress = "progress-shipping-90";
        message = upsellMessage[1].replace('{remaining}', condition_remaining);
      } else if (percent < 100) {
        classProgress = "progress-shipping-100";
        message = upsellMessage[1].replace('{remaining}', condition_remaining);
      } else if (percent == 100) {
        classProgress = "progress-shipping-100";
        message = upsellMessage[2];
      }
      var progress = '<div class="progress-shipping ' + classProgress + '" role="progressbar">\
                            <div class="progress-meter" style="width: ' + percent + '%;">' + percent + '%</div>\
                        </div>';
      if (window.location.pathname == context.urls.cart) {
        var pageCart = $('.page-cart');
        progress += '<div class="shipping-message">' + message + '</div>';
        if (pageCart.find('.halo-free-shipping-message').length > 0) {
          pageCart.find('.halo-free-shipping-message').removeClass('animated-loading');
          setTimeout(function () {
            pageCart.find('.progress-shipping').addClass(classProgress);
            pageCart.find('.message').html(message);
            pageCart.find('.progress-meter').css('width', percent + '%').html('<span class="progress-percent">' + percent + '%</span>');
            animator.animate(percent);
          }, 200);
        } else {
          pageCart.find('.cart-notification').before('<div class="halo-free-shipping-message">' + progress + '</div>');
        }
      } else if ($('body').hasClass('openCartSidebar')) {
        var previewCart = $('.previewCart');
        progress += '<div class="shipping-message">' + message + '</div>';
        if (previewCart.find('.halo-free-shipping-message').length > 0) {
          previewCart.find('.halo-free-shipping-message').removeClass('animated-loading');
          setTimeout(function () {
            previewCart.find('.progress-shipping').addClass(classProgress);
            previewCart.find('.message').html(message);
            previewCart.find('.progress-meter').css('width', percent + '%');
            animator.animate(percent);
          }, 200);
        } else {
          previewCart.find('.previewCartHeader').after('<div class="halo-free-shipping-message">' + progress + '</div>');
        }
      } else if ($('body').hasClass('has-activeModal')) {
        var previewCart = $('#previewModal');
        progress += '<div class="shipping-message">' + message + '</div>';
        setTimeout(function () {
          if (previewCart.find('.halo-free-shipping-message').length > 0) {
            previewCart.find('.halo-free-shipping-message').removeClass('animated-loading');
            previewCart.find('.progress-shipping').addClass(classProgress);
            previewCart.find('.message').html(message);
            previewCart.find('.progress-meter').css('width', percent + '%');
            animator.animate(percent);
          } else {
            previewCart.prepend('<div class="halo-free-shipping-message">' + progress + '</div>');
          }
        }, 1000);
      }
    };
    var _showTimer = function showTimer() {
      if (animator.curPercentage < animator.targetPercentage) {
        animator.curPercentage += 1;
      } else if (animator.curPercentage > animator.targetPercentage) {
        animator.curPercentage -= 1;
      }
      $(animator.outputSelector).text(animator.curPercentage + "%");
      if (animator.curPercentage != animator.targetPercentage) {
        setTimeout(_showTimer, animator.animationSpeed);
      }
    };
    var percenAnimator = function percenAnimator() {
      this.animationSpeed = 10;
      this.curPercentage = 0;
      this.targetPercentage = 0;
      this.outputSelector = ".progress-percent";
      this.animate = function (percentage) {
        this.targetPercentage = percentage;
        setTimeout(_showTimer, this.animationSpeed);
      };
    };
    var animator = new percenAnimator();
    var upsellMessage = ['<span>' + context.themeSettings.halo_shipping_required + '</span>', '<span>' + context.themeSettings.halo_shipping_remaining + '</span>', '<span>' + context.themeSettings.halo_shipping_matched + '</span>'];
    loadFreeShippingMessage();
  }
}

/***/ }),

/***/ "./assets/js/theme/halothemes/haloGlobal.js":
/*!**************************************************!*\
  !*** ./assets/js/theme/halothemes/haloGlobal.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @bigcommerce/stencil-utils */ "./node_modules/@bigcommerce/stencil-utils/src/main.js");
/* harmony import */ var _global_modal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../global/modal */ "./assets/js/theme/global/modal.js");
/* harmony import */ var _haloNewsletterPopup__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./haloNewsletterPopup */ "./assets/js/theme/halothemes/haloNewsletterPopup.js");
/* harmony import */ var _haloRecentlyBoughtPopup__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./haloRecentlyBoughtPopup */ "./assets/js/theme/halothemes/haloRecentlyBoughtPopup.js");
/* harmony import */ var _haloRecentlyViewedProduct__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./haloRecentlyViewedProduct */ "./assets/js/theme/halothemes/haloRecentlyViewedProduct.js");
/* harmony import */ var _haloBeforeYouLeave__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./haloBeforeYouLeave */ "./assets/js/theme/halothemes/haloBeforeYouLeave.js");
/* harmony import */ var _haloMegaMenuEditor__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./haloMegaMenuEditor */ "./assets/js/theme/halothemes/haloMegaMenuEditor.js");
/* harmony import */ var _haloMegaMenuEditorCustom__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./haloMegaMenuEditorCustom */ "./assets/js/theme/halothemes/haloMegaMenuEditorCustom.js");
/* harmony import */ var _haloAjaxLoginPopup__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./haloAjaxLoginPopup */ "./assets/js/theme/halothemes/haloAjaxLoginPopup.js");
/* harmony import */ var _haloAddOptionForProduct__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./haloAddOptionForProduct */ "./assets/js/theme/halothemes/haloAddOptionForProduct.js");
/* harmony import */ var _haloAZbrands__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./haloAZbrands */ "./assets/js/theme/halothemes/haloAZbrands.js");
/* harmony import */ var _haloAjaxAddToCart__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./haloAjaxAddToCart */ "./assets/js/theme/halothemes/haloAjaxAddToCart.js");
/* harmony import */ var _haloHomeProductLookbook__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./haloHomeProductLookbook */ "./assets/js/theme/halothemes/haloHomeProductLookbook.js");
/* harmony import */ var _global_mobile_menu_toggle__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../global/mobile-menu-toggle */ "./assets/js/theme/global/mobile-menu-toggle.js");
/* harmony import */ var _global_quick_view__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../global/quick-view */ "./assets/js/theme/global/quick-view.js");
/* harmony import */ var _global_menu__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../global/menu */ "./assets/js/theme/global/menu.js");
/* harmony import */ var _global_cookieNotification__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../global/cookieNotification */ "./assets/js/theme/global/cookieNotification.js");
/* harmony import */ var _global_loading_progress_bar__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../global/loading-progress-bar */ "./assets/js/theme/global/loading-progress-bar.js");
/* harmony import */ var _global_quick_search__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../global/quick-search */ "./assets/js/theme/global/quick-search.js");
/* harmony import */ var _haloAskAnExpertPopup__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./haloAskAnExpertPopup */ "./assets/js/theme/halothemes/haloAskAnExpertPopup.js");
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");




















/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(context) {
  var $context = context,
    theme_settings = context.themeSettings;
  var $header = $('header.header'),
    height_promotion = $('.halo-topHeader').outerHeight(),
    height_header = $header.outerHeight();
  if ($('.header-layout-2').length) {
    height_header = $header.outerHeight() - $('.bottomHeader-container').outerHeight();
  }
  if ($('.header-layout-4').length) {
    height_header = 0;
  }
  var scroll_position = $(window).scrollTop();
  var checkJS_load = true,
    check_loadProductCarousel = true,
    check_loadProductGrid = true,
    check_homeProductTabByCategory = true,
    check_homeLPCarousel = true,
    check_homeImageCarousel = true,
    check_homeImageInstagramCarousel = true,
    check_homeImageInstagram2Carousel = true,
    check_homeImageGalleryCarousel = true,
    check_homePopularCategoryCarousel = true,
    check_homeLookBook1Carousel = true,
    check_homeLookBook2Carousel = true,
    check_homeCustomerCarousel = true,
    check_homeBlogPostsCarousel = true,
    check_homeImagePolicyCarousel = true,
    check_homeCategoryCarousel = true;
  if ($('#haloAZBrandsTable').length) {
    (0,_haloAZbrands__WEBPACK_IMPORTED_MODULE_10__["default"])(context);
  }
  function loadFunction() {
    if (checkJS_load) {
      checkJS_load = false;
      if (context.themeSettings.halo_ask_an_expert && context.themeSettings.halo_ask_an_expert_pagelink) (0,_haloAskAnExpertPopup__WEBPACK_IMPORTED_MODULE_19__["default"])(context);
      if (context.themeSettings.halo_menu_tab == false) {
        (0,_haloMegaMenuEditor__WEBPACK_IMPORTED_MODULE_6__["default"])($context);
        (0,_global_mobile_menu_toggle__WEBPACK_IMPORTED_MODULE_13__["default"])();
      }
      (0,_haloRecentlyBoughtPopup__WEBPACK_IMPORTED_MODULE_3__["default"])($context);
      (0,_haloBeforeYouLeave__WEBPACK_IMPORTED_MODULE_5__["default"])($context);
      (0,_haloAjaxAddToCart__WEBPACK_IMPORTED_MODULE_11__["default"])($context);
      (0,_haloHomeProductLookbook__WEBPACK_IMPORTED_MODULE_12__["default"])($context);
      (0,_global_quick_view__WEBPACK_IMPORTED_MODULE_14__["default"])($context);
      (0,_global_quick_search__WEBPACK_IMPORTED_MODULE_18__["default"])($context);
      (0,_global_menu__WEBPACK_IMPORTED_MODULE_15__["default"])();
      (0,_global_cookieNotification__WEBPACK_IMPORTED_MODULE_16__["default"])();
      (0,_global_loading_progress_bar__WEBPACK_IMPORTED_MODULE_17__["default"])();
      if (theme_settings.halo_recently_viewed_products) {
        (0,_haloRecentlyViewedProduct__WEBPACK_IMPORTED_MODULE_4__["default"])($context);
      }
      if (theme_settings.halo_newsletter_popup) {
        (0,_haloNewsletterPopup__WEBPACK_IMPORTED_MODULE_2__["default"])($context);
      }
      (0,_haloAjaxLoginPopup__WEBPACK_IMPORTED_MODULE_8__["default"])();
      activeMenuMobile();
      variantImageColor();
      footerMobileToggle();
      checkCookiesPopup();
      backToTop();
      blogTags();
    }
  }
  function eventLoad() {
    $(document).ready(function () {
      var wWidth = window.innerWidth,
        tScroll = $(this).scrollTop();
      var productCarousel = $('.productCarousel'),
        showDotbars = productCarousel.data('dots-bar');
      if (context.themeSettings.halo_menu_tab == false) {
        $('body').addClass('menu-is-load');
      }
      searchFormMobile();
      loadOptionForProductCarousel(tScroll);
      loadProductGrid(tScroll);
      loadProductTabByCategory(tScroll);
      hoverMenu();
      homeImageCarousel(tScroll);
      homeParallax(tScroll);
      halofadeInUp(tScroll);
      if (showDotbars) {
        productCarousel.each(function (index, element) {
          var $prodWrapId = $(element).attr('id'),
            wrap = $("#" + $prodWrapId);
          slickDots(wrap[0], wrap);
        });
      }
    });
    $(window).on('scroll', function (e) {
      var $target = $(e.currentTarget);
      var tScroll = $target.scrollTop();
      loadFunction();
      haloStickyHeader(tScroll);
      loadOptionForProductCarousel(tScroll);
      loadProductGrid(tScroll);
      loadProductTabByCategory(tScroll);
      homeImageCarousel(tScroll);
      homeParallax(tScroll);
      halofadeInUp(tScroll);
    });
    $(document).on('keydown mousemove touchstart', function (e) {
      loadFunction();
    });

    //
    // Resize
    // -----------------------------------------------------------------------------
    $(window).on('resize', function (e) {
      checkCookiesPopup();
      activeMenuMobile();
      searchFormMobile();
    });
  }
  eventLoad();
  function Event() {
    //
    // Change Option
    // // -----------------------------------------------------------------------------
    var btn_cardOption = '.card-option .form-option-swatch';
    $(document).on('click', btn_cardOption, function (e) {
      e.preventDefault();
      var $targer = $(e.currentTarget),
        thisTitle = $targer.find('.form-option-variant').attr('title');
      $(btn_cardOption).removeClass('is-active');
      $targer.addClass('is-active');
      $targer.parents('.card').find('.card-name').text(" - " + thisTitle);
    });

    //
    // Close
    // -----------------------------------------------------------------------------
    var $btn_close = $('.btn-close');
    var $btn_mobileMenu = $('.mobileMenu-toggle');
    var $beforeYouLeave = $('#before-you-leave');
    $btn_close.on('click', function (e) {
      e.preventDefault();
      var $target = $(e.currentTarget);
      $target.parents('.halo-side-block').removeClass('is-open');
      if ($('body').hasClass('openBeforeYouLeave')) {
        $('body').removeClass('openBeforeYouLeave');
        setTimeout(function () {
          $beforeYouLeave.hide();
        }, 200);
      } else {
        $('body').removeClass('is-side-block');
        setTimeout(function () {
          $sideLogin.hide();
          $sideCart.hide();
          $('#sideBlock_category').hide();
          $('#sideBlock_search').hide();
          $('#sideBlock_brand').hide();
          $('#sideBlock_blog').hide();
        }, 200);
      }
      if ($('body').hasClass('has-activeNavPages')) {
        $btn_mobileMenu.trigger('click');
      }
    });

    //
    // Login Form
    // -----------------------------------------------------------------------------
    if (!$('body').hasClass('page-type-login')) {
      $('[data-login-form]').on('click', function (event) {
        event.preventDefault();
        if ($('.halo-auth-sidebar').hasClass('is-open')) {
          $('.halo-auth-sidebar').removeClass('is-open');
          $('body').removeClass('openAuthSidebar');
        } else {
          $('.halo-auth-sidebar').addClass('is-open');
          $('body').addClass('openAuthSidebar');
        }
      });
    } else {
      $('[data-login-form]').on('click', function (event) {
        event.preventDefault();
        $('html, body').animate({
          scrollTop: $('.login').offset().top
        }, 700);
      });
    }

    //
    // Account Form
    // -----------------------------------------------------------------------------
    $('.halo-auth-sidebar .halo-sidebar-header .close').on('click', function (event) {
      event.preventDefault();
      $('.halo-auth-sidebar').removeClass('is-open');
      $('body').removeClass('openAuthSidebar');
    });
    $(document).on('click', function (event) {
      if ($('.halo-auth-sidebar').hasClass('is-open')) {
        if ($(event.target).closest('.halo-auth-sidebar').length === 0 && $(event.target).closest('[data-login-form]').length === 0) {
          $('.halo-auth-sidebar').removeClass('is-open');
          $('body').removeClass('openAuthSidebar');
        }
      }
    });

    //
    // Live Help Popup
    // -----------------------------------------------------------------------------
    $('[data-header-liveHelp]').on('click', function (event) {
      event.preventDefault();
      if ($(window).width() < 1025) {
        if ($('#halo-live-help').hasClass('is-open')) {
          $('#halo-live-help').removeClass('is-open');
          $('body').removeClass('openLiveHelp');
        } else {
          $('#halo-live-help').addClass('is-open');
          $('body').addClass('openLiveHelp');
        }
      } else {
        if ($('#dropdown-liveHelp').hasClass('is-open')) {
          $('#dropdown-liveHelp').removeClass('is-open');
          $('body').removeClass('openLiveHelp');
        } else {
          $('#dropdown-liveHelp').addClass('is-open');
          $('body').addClass('openLiveHelp');
        }
      }
    });
    $(document).on('click', '[data-close-live-help-popup]', function (event) {
      event.preventDefault();
      $('.halo-live-help').removeClass('is-open');
      $('body').removeClass('openLiveHelp');
    });
    $(document).on('click', function (event) {
      if ($('.halo-live-help').hasClass('is-open')) {
        if ($(event.target).closest('.navUser-item--liveHelp').length === 0) {
          $('.halo-live-help').removeClass('is-open');
          $('body').removeClass('openLiveHelp');
        }
      }
    });

    //
    // Add To Wish List
    // -----------------------------------------------------------------------------
    $(document).on('click', '.card .wishlist', function (e) {
      e.preventDefault();
      var $this_wl = $(e.currentTarget);
      var url_awl = $this_wl.attr('href');
      if ($('body').hasClass('is-login')) {
        $.post(url_awl).done(function () {
          window.location.href = url_awl;
        });
      } else {
        window.location.href = '/login.php';
      }
    });

    //
    // Footer Info Heading Toggle
    // -----------------------------------------------------------------------------
    var $footerHeadingToggle = $('.footer-info-heading--toggle');
    $footerHeadingToggle.on('click', function (e) {
      e.preventDefault();
      var wWidth = window.innerWidth;
      if (wWidth < 768) {
        var $target = $(e.currentTarget);
        var $thisFooterInfo = $target.parents('.footer-info-col');
        var $thisFooterInfo_list = $thisFooterInfo.find('.footer-info-list');
        $thisFooterInfo.toggleClass('open-dropdown');
        if ($thisFooterInfo.hasClass('open-dropdown')) {
          $thisFooterInfo_list.slideDown(400);
        } else {
          $thisFooterInfo_list.slideUp(400);
        }
      }
    });
  }
  Event();
  function hoverMenu() {
    if ($(window).width() > 1024) {
      if ($('.navPages-list:not(.navPages-list--user) > .navPages-item.has-dropdown').length) {
        $('.navPages-list:not(.navPages-list--user) > .navPages-item.has-dropdown').on('mouseover', function (event) {
          $('body').addClass('openMenuPC');
        }).on('mouseleave', function (event) {
          $('body').removeClass('openMenuPC');
        });
      }
    }
  }
  function searchFormMobile() {
    if (context.themeSettings.halo_header_layout == 'header_layout_3' || context.themeSettings.halo_header_layout == 'header_layout_4') {
      if ($('.bottomHeader-item #quickSearch').length) {
        $('.bottomHeader-item #quickSearch').appendTo('#halo-search-sidebar .halo-sidebar-search');
      }
    } else {
      if ($(window).width() < 1025) {
        if ($('.bottomHeader-item #quickSearch').length) {
          $('.bottomHeader-item #quickSearch').appendTo('#halo-search-sidebar .halo-sidebar-search');
        }
      } else {
        if (!$('.item--quicksearch #quickSearch').length) {
          $('#halo-search-sidebar #quickSearch').appendTo('.item--quicksearch');
        }
      }
    }
  }
  function activeMenuMobile() {
    $('.halo-menu-sidebar .halo-sidebar-close').on('click', function (event) {
      event.preventDefault();
      if ($('body').hasClass('has-activeNavPages')) {
        $('.mobileMenu-toggle').trigger('click');
      }
    });
    $(document).on('click', function (event) {
      if ($('body').hasClass('has-activeNavPages')) {
        if ($(event.target).closest('.halo-menu-sidebar').length === 0 && $(event.target).closest('.mobileMenu-toggle').length === 0) {
          $('.mobileMenu-toggle').trigger('click');
        }
      }
    });
    var $menuPc = $('.halo-bottomHeader .navPages-list:not(.navPages-list--user)'),
      $menuMobile = $('#halo-menu-sidebar .navPages-list:not(.navPages-list--user)');
    if ($(window).width() <= 1024) {
      $('.mobileMenu-toggle').on('click', function (event) {
        if ($menuPc.length) {
          if (!$menuMobile.children().length) {
            $menuPc.children().appendTo($menuMobile);
          }
        }
      });
    }
  }
  function variantImageColor() {
    $(document).on('click', '.card .card-option .form-option', function () {
      var self = $(this),
        newImageVariant = self.data('image'),
        productItemElm = self.closest('.card'),
        variantTitle = self.data('title');
      productItemElm.find('.variant_color_name').html(variantTitle);
      self.parents('.card-option').find('.form-option').removeClass('active');
      self.addClass('active');
      if (newImageVariant != "undefined") {
        productItemElm.find('.card-img-container img').attr({
          "src": newImageVariant,
          "srcset": newImageVariant
        });
        return false;
      }
    });
  }
  function footerMobileToggle() {
    $('.footer-info-col--mobile .footer-info-heading').on('click', function (event) {
      $('.footer-info-col--mobile .footer-info-heading').not($(event.currentTarget)).removeClass('is-clicked');
      if ($(event.currentTarget).hasClass('is-clicked')) {
        $(event.currentTarget).removeClass('is-clicked');
      } else {
        $(event.currentTarget).addClass('is-clicked');
      }
      $('.footer-info-col--mobile').each(function (index, element) {
        if ($('.footer-info-heading', element).hasClass('is-clicked')) {
          $(element).find('.footer-info-wrapper').slideDown("slow");
        } else {
          $(element).find('.footer-info-wrapper').slideUp("slow");
        }
      });
    });
  }
  function checkCookiesPopup() {
    if ($('#consent-manager').length) {
      var height = $('#consent-manager').height() + 15;
      $('#recently_bought_list').css('bottom', height);
    }
  }
  function backToTop() {
    var offset = $(window).height() / 2;
    var backToTop = $('#haloBackToTop');
    $(window).scroll(function (event) {
      $(event.currentTarget).scrollTop() > offset ? backToTop.addClass('is-visible') : backToTop.removeClass('is-visible');
    });
    backToTop.on('click', function (event) {
      event.preventDefault();
      $('body,html').animate({
        scrollTop: 0
      }, 1000);
    });
  }
  function haloStickyHeader(tScroll) {
    if (theme_settings.halo_headerSticky) {
      if (tScroll > height_promotion && tScroll < scroll_position) {
        if ($(window).width() > 1024) {
          if ($('.halo-search-sticky').length) {
            $('.halo-search-main #quickSearch').appendTo('.halo-search-sticky');
          }
        }
        if (!$('.header-height').length) {
          $header.before('<div class="header-height" style="height: ' + height_header + 'px"></div>');
        }
        $header.addClass('is-sticky');
        $header.css('animation-name', 'fadeInDown');
      } else {
        if ($('.halo-search-main').length) {
          $('.halo-search-sticky #quickSearch').appendTo('.halo-search-main');
        }
        $header.removeClass('is-sticky');
        $('.header-height').remove();
        $header.css('animation-name', '');
      }
      scroll_position = tScroll;
    }
  }
  function loadOptionForProductCarousel(tScroll) {
    var $loadProductCarousel = $('.productCarousel');
    if ($loadProductCarousel.length) {
      var $loadProductCarouselTop = $loadProductCarousel.offset().top - screen.height;
      if (tScroll > $loadProductCarouselTop && check_loadProductCarousel) {
        check_loadProductCarousel = false;
        if ($('.productCarousel').length > 0) {
          $('.productCarousel').each(function (index, element) {
            var $prodWrapId = $(element).attr('id');
            (0,_haloAddOptionForProduct__WEBPACK_IMPORTED_MODULE_9__["default"])($context, $prodWrapId);
          });
        }
      }
    }
  }
  function loadProductGrid(tScroll) {
    var $loadProductGrid = $('.productGrid:not(.productListing)');
    if ($loadProductGrid.length) {
      var $loadProductGridTop = $loadProductGrid.offset().top - screen.height;
      if (tScroll > $loadProductGridTop && check_loadProductGrid) {
        check_loadProductGrid = false;
        if ($('.productGrid:not(.productListing)').length > 0) {
          var col = context.themeSettings.home_product_block_col,
            limitProduct = 2 * parseInt(col);
          $('.productGrid:not(.productListing)').each(function (index, element) {
            var $prodWrapId = $(element).attr('id');
            $(element).find('.product:visible').css('display', 'none');
            $(element).find('.product:hidden').slice(0, limitProduct).css('display', 'inline-block');
            if ($(element).find('.product').length > limitProduct) {
              $(element).after('<div class="productGrid-showMore"><a class="button button--primary" href="#" data-href="' + $prodWrapId + '">Show More</a></div>');
            }
            (0,_haloAddOptionForProduct__WEBPACK_IMPORTED_MODULE_9__["default"])($context, $prodWrapId);
          });
          $('.productGrid-showMore .button').on('click', function (event) {
            event.preventDefault();
            var target = $(event.currentTarget),
              targetId = target.data('href');
            target.blur();
            $('[data-block=' + targetId + ']').find('.product:hidden').slice(0, limitProduct).css('display', 'inline-block');
            if ($('[data-block=' + targetId + ']').find('.product:hidden').length == 0) {
              target.addClass('disable').text('No more items');
            }
          });
        }
      }
    }
  }
  function loadProductTabByCategory(tScroll) {
    var $homeProductTabByCategory = $('.halo-block-product-tabs .productCarousel-tabs');
    if ($homeProductTabByCategory.length) {
      var $homeProductTabByCategoryTop = $homeProductTabByCategory.offset().top - screen.height;
      if (tScroll > $homeProductTabByCategoryTop && check_homeProductTabByCategory) {
        check_homeProductTabByCategory = false;
        var options = {
          template: 'products/carousel-3'
        };
        if ($('.productCarousel-tabs').length > 0) {
          if (!$('.productCarousel-tabs .tab-content.is-active .productCarousel .productCarousel-slide:not(.product-sample)').length) {
            var block = $('.productCarousel-tabs .tab-content.is-active'),
              wrap = block.find('.productCarousel'),
              catId = block.data('tab-category-id'),
              catUrl = block.data('tab-category-url'),
              blockId = block.attr('id');
            loadCategory(catId, catUrl, options, wrap, blockId);
          }
          $('.productCarousel-tabs [data-tab]').on('toggled', function (event, tab) {
            if (!$('.productCarousel-tabs .tab-content.is-active .productCarousel .productCarousel-slide:not(.product-sample)').length) {
              var block = $('.productCarousel-tabs .tab-content.is-active'),
                wrap = block.find('.productCarousel'),
                catId = block.data('tab-category-id'),
                catUrl = block.data('tab-category-url'),
                blockId = block.attr('id');
              if (!$(event.currentTarget).find('.productCarousel').hasClass('slick-initialized')) {
                loadCategory(catId, catUrl, options, wrap, blockId);
              }
            }
          });
        }
      }
    }
  }
  function loadCategory(id, url, option, wrap, blockId) {
    _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_0__["default"].api.getPage(url, option, function (err, response) {
      if (!wrap.find('.productCarousel-slide:not(.product-sample)').length) {
        wrap.html(response);
        slickCarousel(wrap);
        wrap.parents('.tab-content').find('.loadingOverlay').remove();
        wrap.find('.product-sample').remove();
        (0,_haloAddOptionForProduct__WEBPACK_IMPORTED_MODULE_9__["default"])($context, blockId);
      }
    });
  }
  function slickCarousel(wrap) {
    wrap.slick({
      dots: true,
      arrows: true,
      infinite: false,
      mobileFirst: true,
      slidesToShow: 2,
      slidesToScroll: 1,
      responsive: [{
        breakpoint: 1399,
        settings: {
          arrows: true,
          slidesToShow: parseInt($context.themeSettings.home_product_block_tab_col)
        }
      }, {
        breakpoint: 1024,
        settings: {
          slidesToShow: parseInt($context.themeSettings.home_product_block_tab_col) - 1
        }
      }, {
        breakpoint: 767,
        settings: {
          slidesToShow: parseInt($context.themeSettings.home_product_block_tab_col) - 2
        }
      }]
    });
  }
  function slickDots(wrap, productCarousel) {
    var slickDots = wrap.querySelectorAll('.slick-dots li');
    var totalSlideStepCount = slickDots.length;
    var dotbars = wrap.parentElement.querySelector('[data-bars]');
    var dots = wrap.querySelector('.slick-dots');
    var barThumb = dotbars.querySelector('.bar-thumb');
    var barThumbWidth = dotbars.clientWidth / totalSlideStepCount;
    barThumb.style.width = "calc(100%/" + totalSlideStepCount + ")";
    var dotsBarLeft = dotbars.getBoundingClientRect().x;
    if (slickDots.length === 0) {
      dotbars.remove();
      return;
    }
    productCarousel.on('beforeChange', function (event, slick, currentSlide, nextSlide) {
      var slickDots = wrap.querySelectorAll('.slick-dots li');
      var totalSlideStepCount = slickDots.length;
      var dotsActive = dots.querySelector('.slick-active').dataset.index;
      if (totalSlideStepCount == dotsActive) {
        barThumb.style.left = '0';
      } else {
        barThumb.style.left = "calc(100%/" + totalSlideStepCount + " * " + dotsActive + ")";
      }
    });
    dotbars.addEventListener('click', function (e) {
      var clickedIndex = Math.floor((e.pageX - dotsBarLeft) / barThumbWidth);
      slickDots[clickedIndex].click();
    });
  }
  function homeImageCarousel(tScroll) {
    var $homeLPCarousel = $('.home-landing-page .heroCarousel'),
      $homeImageCarousel = $('#homeBanner2 .homeBanner2__carousel'),
      $homeImageInstagramCarousel = $('#halo_instagram .halo-image-instagram'),
      $homeImageInstagram2Carousel = $('#halo_instagram_2 .halo-image-instagram'),
      $homeImageGalleryCarousel = $('#halo_image_gallery .halo-image-gallery'),
      $homePopularCategoryCarousel = $('#popularCategory .popularCategory__carousel'),
      $homeLookBook1Carousel = $('#lookBook1 .lookBook1__carousel'),
      $homeLookBook2Carousel = $('#lookBook2 .lookBook2__carousel'),
      $homeCustomerCarousel = $('.customerReviews__carousel'),
      $homeBlogPostsCarousel = $('.halo-block-post .halo-recent-post'),
      $homeImagePolicyCarousel = $('#policyBlock .policyBlock__container'),
      $homeCategoryCarousel = $('#halo_shop_category .halo-shop-category');
    if ($homeLPCarousel.length) {
      var $homeLPCarouselTop = $homeLPCarousel.offset().top - screen.height;
      if (tScroll > $homeLPCarouselTop && check_homeLPCarousel) {
        check_homeLPCarousel = false;
        $homeLPCarousel.slick({
          fade: true,
          dots: true,
          arrows: context.mainCarouselArrow,
          mobileFirst: true,
          slidesToShow: 1,
          slidesToScroll: 1,
          autoplay: true,
          autoplaySpeed: context.mainCarouselSpeed,
          slide: '[data-hero-slide]',
          customPaging: function customPaging(slider, i) {
            var index = i + 1;
            return '<button data-carousel-dot type="button"><span>' + String(index).padStart(2, '') + '</span><span data-dots-totals>|</span><span>' + slider.slideCount + '</span></button>';
          }
        });
      }
    }
    if ($homeImageCarousel.length) {
      var $homeImageCarouselTop = $homeImageCarousel.offset().top - screen.height;
      if (tScroll > $homeImageCarouselTop && check_homeImageCarousel) {
        check_homeImageCarousel = false;
        $homeImageCarousel.slick({
          fade: true,
          dots: false,
          arrows: true,
          infinite: false,
          mobileFirst: false,
          autoplay: true,
          slidesToShow: 1,
          slidesToScroll: 1
        });
      }
    }
    if ($homeImageInstagramCarousel.length) {
      var $homeImageInstagramCarouselTop = $homeImageInstagramCarousel.offset().top - screen.height;
      if (tScroll > $homeImageInstagramCarouselTop && check_homeImageInstagramCarousel) {
        check_homeImageInstagramCarousel = false;
        $homeImageInstagramCarousel.slick({
          dots: false,
          arrows: true,
          infinite: false,
          mobileFirst: true,
          autoplay: false,
          slidesToShow: 2,
          slidesToScroll: 2,
          responsive: [{
            breakpoint: 1399,
            settings: {
              arrows: true,
              slidesToShow: 5,
              slidesToScroll: 5
            }
          }, {
            breakpoint: 1024,
            settings: {
              slidesToShow: 4,
              slidesToScroll: 4
            }
          }, {
            breakpoint: 767,
            settings: {
              slidesToShow: 3,
              slidesToScroll: 3
            }
          }, {
            breakpoint: 550,
            settings: {
              slidesToShow: 2,
              slidesToScroll: 2
            }
          }]
        });
      }
    }
    if ($homeImageInstagram2Carousel.length) {
      var $homeImageInstagram2CarouselTop = $homeImageInstagram2Carousel.offset().top - screen.height;
      if (tScroll > $homeImageInstagram2CarouselTop && check_homeImageInstagram2Carousel) {
        check_homeImageInstagram2Carousel = false;
        $homeImageInstagram2Carousel.slick({
          dots: false,
          arrows: true,
          infinite: true,
          mobileFirst: true,
          autoplay: false,
          slidesToShow: 1,
          slidesToScroll: 1,
          responsive: [{
            breakpoint: 1399,
            settings: {
              slidesToShow: 3,
              slidesToScroll: 3
            }
          }, {
            breakpoint: 550,
            settings: {
              slidesToShow: 2,
              slidesToScroll: 2
            }
          }]
        });
      }
    }
    if ($homeImageGalleryCarousel.length) {
      var $homeImageGalleryCarouselTop = $homeImageGalleryCarousel.offset().top - screen.height;
      if (tScroll > $homeImageGalleryCarouselTop && check_homeImageGalleryCarousel) {
        check_homeImageGalleryCarousel = false;
        $homeImageGalleryCarousel.slick({
          dots: false,
          arrows: true,
          infinite: false,
          mobileFirst: true,
          autoplay: false,
          slidesToShow: 2,
          slidesToScroll: 2,
          responsive: [{
            breakpoint: 1024,
            settings: {
              slidesToShow: 4,
              slidesToScroll: 4
            }
          }, {
            breakpoint: 767,
            settings: {
              slidesToShow: 3,
              slidesToScroll: 3
            }
          }, {
            breakpoint: 550,
            settings: {
              slidesToShow: 2,
              slidesToScroll: 2
            }
          }]
        });
      }
    }
    if ($homePopularCategoryCarousel.length) {
      var $homePopularCategoryCarouselTop = $homePopularCategoryCarousel.offset().top - screen.height;
      if (tScroll > $homePopularCategoryCarouselTop && check_homePopularCategoryCarousel) {
        check_homePopularCategoryCarousel = false;
        $homePopularCategoryCarousel.slick({
          dots: false,
          arrows: true,
          infinite: true,
          mobileFirst: true,
          slidesToShow: 2,
          slidesToScroll: 2,
          responsive: [{
            breakpoint: 1599,
            settings: {
              slidesToShow: 5,
              slidesToScroll: 5
            }
          }, {
            breakpoint: 1399,
            settings: {
              slidesToShow: 4,
              slidesToScroll: 4
            }
          }, {
            breakpoint: 767,
            settings: {
              slidesToShow: 3,
              slidesToScroll: 3
            }
          }]
        });
      }
    }
    if ($homeLookBook1Carousel.length) {
      var $homeLookBook1CarouselTop = $homeLookBook1Carousel.offset().top - screen.height;
      if (tScroll > $homeLookBook1CarouselTop && check_homeLookBook1Carousel) {
        check_homeLookBook1Carousel = false;
        $homeLookBook1Carousel.slick({
          dots: false,
          arrows: true,
          infinite: true,
          mobileFirst: false,
          slidesToShow: 1,
          slidesToScroll: 1
        });
      }
    }
    if ($homeLookBook2Carousel.length) {
      var $homeLookBook2CarouselTop = $homeLookBook2Carousel.offset().top - screen.height;
      if (tScroll > $homeLookBook2CarouselTop && check_homeLookBook2Carousel) {
        check_homeLookBook2Carousel = false;
        $homeLookBook2Carousel.slick({
          dots: false,
          arrows: true,
          infinite: true,
          mobileFirst: true,
          slidesToShow: 1,
          slidesToScroll: 1,
          responsive: [{
            breakpoint: 551,
            settings: {
              slidesToShow: 2,
              slidesToScroll: 2,
              arrows: true
            }
          }, {
            breakpoint: 1200,
            settings: {
              slidesToShow: 3,
              slidesToScroll: 3,
              arrows: true
            }
          }, {
            breakpoint: 1600,
            settings: {
              slidesToShow: 4,
              slidesToScroll: 4,
              arrows: true
            }
          }]
        });
      }
    }
    if ($homeCustomerCarousel.length) {
      var $homeCustomerCarouselTop = $homeCustomerCarousel.offset().top - screen.height;
      if (tScroll > $homeCustomerCarouselTop && check_homeCustomerCarousel) {
        check_homeCustomerCarousel = false;
        var dots = true,
          arrows = true;
        if ($homeCustomerCarousel.length) {
          dots = true;
          arrows = false;
        } else {
          dots = false;
          arrows = true;
        }
        $homeCustomerCarousel.slick({
          dots: dots,
          arrows: arrows,
          infinite: true,
          mobileFirst: true,
          slidesToShow: 1,
          slidesToScroll: 1,
          responsive: [{
            breakpoint: 767,
            settings: {
              slidesToShow: 2,
              slidesToScroll: 2
            }
          }]
        });
      }
    }
    if ($homeBlogPostsCarousel.length) {
      var $homeBlogPostsCarouselTop = $homeBlogPostsCarousel.offset().top - screen.height;
      if (tScroll > $homeBlogPostsCarouselTop && check_homeBlogPostsCarousel) {
        check_homeBlogPostsCarousel = false;
        var _dots = true,
          _arrows = true,
          fade = false,
          column = 1;
        if (context.themeSettings.homeBlogPostsColumn = 1) {
          _dots = true;
          _arrows = false;
          fade = true;
        } else {
          _dots = false;
          _arrows = true;
          fade = false;
        }
        if (context.themeSettings.homeBlogPostsColumn > 1) {
          column = context.themeSettings.homeBlogPostsColumn - 1;
        } else {
          column = context.themeSettings.homeBlogPostsColumn;
        }
        $homeBlogPostsCarousel.slick({
          dots: _dots,
          arrows: _arrows,
          fade: fade,
          infinite: true,
          mobileFirst: false,
          slidesToShow: context.themeSettings.homeBlogPostsColumn,
          slidesToScroll: context.themeSettings.homeBlogPostsColumn,
          responsive: [{
            breakpoint: 1200,
            settings: {
              slidesToShow: column,
              slidesToScroll: column
            }
          }, {
            breakpoint: 768,
            settings: {
              slidesToShow: 1,
              slidesToScroll: 1
            }
          }]
        });
      }
    }
    if ($homeImagePolicyCarousel.length) {
      var $homeImagePolicyCarouselTop = $homeImagePolicyCarousel.offset().top - screen.height;
      if (tScroll > $homeImagePolicyCarouselTop && check_homeImagePolicyCarousel) {
        check_homeImagePolicyCarousel = false;
        $homeImagePolicyCarousel.slick({
          dots: false,
          arrows: true,
          infinite: true,
          mobileFirst: true,
          autoplay: false,
          slidesToShow: 1,
          slidesToScroll: 1,
          responsive: [{
            breakpoint: 1399,
            settings: {
              slidesToShow: 4,
              slidesToScroll: 1
            }
          }, {
            breakpoint: 1024,
            settings: {
              slidesToShow: 3,
              slidesToScroll: 1
            }
          }, {
            breakpoint: 550,
            settings: {
              slidesToShow: 2,
              slidesToScroll: 1
            }
          }]
        });
      }
    }
    if ($homeCategoryCarousel.length) {
      var $homeCategoryCarouselTop = $homeCategoryCarousel.offset().top - screen.height;
      if (tScroll > $homeCategoryCarouselTop && check_homeCategoryCarousel) {
        check_homeCategoryCarousel = false;
        $homeCategoryCarousel.slick({
          dots: false,
          arrows: true,
          infinite: true,
          mobileFirst: true,
          autoplay: false,
          slidesToShow: 1,
          slidesToScroll: 1,
          responsive: [{
            breakpoint: 1399,
            settings: {
              slidesToShow: 4,
              slidesToScroll: 4
            }
          }, {
            breakpoint: 767,
            settings: {
              slidesToShow: 3,
              slidesToScroll: 3
            }
          }, {
            breakpoint: 550,
            settings: {
              slidesToShow: 2,
              slidesToScroll: 2
            }
          }]
        });
      }
    }
  }
  function loadMenuTab() {
    var $options = {
      template: 'search/halo-menu-tab'
    };
    var canonical = $('[canonical-shop-url]').attr('canonical-shop-url'),
      pageUrl = $.cookie('page-url'),
      menuTabItem;
    if (document.URL != canonical) {
      if (pageUrl != null) {
        menuTabItem = $("[data-load-page=\"" + pageUrl + "\"]");
      } else {
        menuTabItem = $('[data-load-page].active');
      }
      var menuTab = menuTabItem.closest('[data-menu-tab]');
      menuTabItem.addClass('active');
      menuTab.find('[data-load-page]').not(menuTabItem).removeClass('active');
    }
    var keyword = $('[data-menu-tab] li.active').data('load-page'),
      url = $('[data-menu-tab] li.active a').attr('href');
    if (keyword != '/') {
      _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_0__["default"].api.getPage("/search.php?search_query=" + keyword, $options, function (error, content) {
        if ($(window).width() < 1025) {
          $('#halo-menu-sidebar .navPages-list:not(.navPages-list--user)').append($(content).find('.navPages-list').children());
        } else {
          $('.halo-bottomHeader [data-menu] .navPages').remove();
          $('.halo-bottomHeader [data-menu]').append(content);
        }
        $('body').addClass('menu-custom-is-load');
        $('.header-logo .header-logo__link').attr('href', url);
        (0,_haloMegaMenuEditorCustom__WEBPACK_IMPORTED_MODULE_7__["default"])($context);
        (0,_global_mobile_menu_toggle__WEBPACK_IMPORTED_MODULE_13__["default"])();
      });
    } else {
      (0,_haloMegaMenuEditor__WEBPACK_IMPORTED_MODULE_6__["default"])($context);
      (0,_global_mobile_menu_toggle__WEBPACK_IMPORTED_MODULE_13__["default"])();
    }
    $(document).on('click', '[data-menu-tab] li', function (event) {
      var active = $(event.currentTarget).data('load-page'),
        href = $(event.currentTarget).attr('href');
      $.cookie('page-url', active, {
        expires: 1,
        path: '/'
      });
    });
  }
  if (context.themeSettings.halo_menu_tab == true) {
    loadMenuTab();
  }
  function blogTags() {
    if ($('body[data-page-type="blog"]').length) {
      var arr = {};
      $('#blog-tags .recentPosts_tags [data-tag]').each(function (i) {
        var txt = $(this).data('tag');
        if (arr[txt]) {
          $(this).remove();
        } else {
          arr[txt] = true;
        }
      });
      $('#blog-tags .recentPosts_tags').show();
    } else if ($('body[data-page-type="blog_post"]').length) {
      var url_blogTags = '/blog';
      $.get(url_blogTags, function (data) {
        var arr = {};
        var response = $(data).find('#blog-tags .recentPosts_tags').html();
        $('#blog-tags .recentPosts_tags').html(response);
        $('#blog-tags .recentPosts_tags [data-tag]').each(function (i) {
          var txt = $(this).data('tag');
          if (arr[txt]) {
            $(this).remove();
          } else {
            arr[txt] = true;
          }
        });
        $('#blog-tags .recentPosts_tags').show();
      });
    }
  }
  function homeParallax(tScroll) {
    var $homeParallax = $('.haloBannerParallax');
    if ($homeParallax.length) {
      $homeParallax.each(function (i) {
        var $homeParallaxHaft = $homeParallax.eq(i).outerHeight() / 2;
        var $homeParallaxTop = $homeParallax.eq(i).offset().top - screen.height;
        var $homeParallaxBottom = $homeParallax.eq(i).offset().top + $homeParallax.outerHeight();
        var img = $homeParallax.eq(i).find('img');
        if (tScroll < $homeParallaxBottom && tScroll > $homeParallaxTop) {
          $homeParallax.eq(i).find('.haloBannerParallax__img').addClass('is-zoom');
        } else {
          $homeParallax.eq(i).find('.haloBannerParallax__img').removeClass('is-zoom');
        }
        if (tScroll > $homeParallaxBottom - $homeParallaxHaft && tScroll < $homeParallaxBottom) {
          img.css({
            top: '-20%',
            transform: 'translate(0, 20%) scale3d(1.1, 1.1, 1.1)',
            transition: 'all .8s ease'
          });
        } else if (tScroll < $homeParallaxBottom - $homeParallaxHaft - screen.height) {
          img.css({
            top: '20%',
            transform: 'translate(0, -20%) scale3d(1.1, 1.1, 1.1)',
            transition: 'all .8s ease'
          });
        } else {
          img.css({
            top: '',
            transform: '',
            transition: ''
          });
        }
      });
    }
  }
  function halofadeInUp(tScroll) {
    var $haloBlock = $('.halo-fadeInUp');
    if ($haloBlock.length) {
      $haloBlock.each(function (i) {
        var $haloBlockTop = $haloBlock.eq(i).offset().top - screen.height + 50;
        var $haloBlockBottom = $haloBlock.eq(i).offset().top + screen.height - 50;
        var img = $haloBlock.eq(i).find('img');
        if (tScroll < $haloBlockBottom && tScroll > $haloBlockTop) {
          $haloBlock.eq(i).addClass('animated');
        }
      });
    }
  }
}

/***/ }),

/***/ "./assets/js/theme/halothemes/haloHomeProductLookbook.js":
/*!***************************************************************!*\
  !*** ./assets/js/theme/halothemes/haloHomeProductLookbook.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @bigcommerce/stencil-utils */ "./node_modules/@bigcommerce/stencil-utils/src/main.js");
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(context) {
  var token = context.token,
    curCode = $('.body').data('currency-code');
  var list1 = [],
    list2 = [],
    productLookBook1 = $('#lookBook1 .lookBook1__point'),
    productLookBook2 = $('#lookBook2 .lookBook2__point'),
    lookbookPopup = $('#halo-lookbook-popup'),
    lookbookSlide;
  if (productLookBook1) {
    productLookBook1.each(function (index, element) {
      var productIDs = $(element).find('.lookBook1__icon').data('product-id');
      list1.push(productIDs.toString());
    });
  }
  if (productLookBook2) {
    productLookBook2.each(function (index, element) {
      var productIDs = $(element).find('.lookBook2__icon').data('product-id');
      list2.push(productIDs.toString());
    });
  }
  list1 = uniqueArray(list1);
  if (list1.length > 0) {
    getProduct(list1).then(function (data) {
      $.each(list1, function (idx, item) {
        var tmp = undefined;
        renderProduct(data.site.products.edges, data.site.currency.display, tmp);
      });
    });
  }
  list2 = uniqueArray(list2);
  if (list2.length > 0) {
    getProduct(list2).then(function (data) {
      $.each(list2, function (idx, item) {
        var tmp = $('.lookBook2__productWrapper').eq(idx);
        renderProduct(data.site.products.edges, data.site.currency.display, tmp);
      });
    });
  }
  if ($(window).width() > 1024) {
    $(document).on('mouseover', '#lookBook1 [data-product-lookbook]', function (event) {
      var $productID = $(event.target).data('product-id'),
        $popup = $(event.target).parent().find('.lookBook__popup');
      if ($productID != undefined) {
        $popup.addClass('is-open');
      }
    });
    $(document).on('click', '#lookBook1 .show_products', function (event) {
      event.preventDefault();
      getShopTheLook1(event.target);
    });
    $(document).on('click', '#lookBook1 .hide_products', function (event) {
      event.preventDefault();
      lookbookSlide = lookbookPopup.find('.productCarousel-slide');
      $(event.target).parent().removeClass('is-show');
      $('body').removeClass('openLookbookPopup');
      setTimeout(function () {
        lookbookSlide.addClass('is-hidden');
        $('#halo-lookbook-popup .no-products').hide();
      }, 300);
    });
    $('#lookBook2 [data-product-lookbook]').on('click', function (event) {
      var $thisSlide = $(event.currentTarget).parents('.lookBook2__item'),
        $thisProduct = $(event.currentTarget).data('product-id'),
        $productBlock = $thisSlide.find('.lookBook2__productWrapper');
      if ($thisSlide.hasClass('show-one-product')) {
        $productBlock.find('.productGrid').addClass('is-hidden');
        $(event.currentTarget).parents('.lookBook2__img').find('.lookBook2__productPopup').removeClass('is-open');
        setTimeout(function () {
          $productBlock.find("[data-product-id=" + $thisProduct + "]").eq(0).removeClass('is-hidden');
          $thisSlide.addClass('show-one-product');
          $(event.currentTarget).parents('.lookBook2__img').find('.lookBook2__productPopup').addClass('is-open');
        }, 300);
      } else {
        $productBlock.find("[data-product-id=" + $thisProduct + "]").eq(0).removeClass('is-hidden');
        $thisSlide.addClass('show-one-product');
        $(event.currentTarget).parents('.lookBook2__img').find('.lookBook2__productPopup').addClass('is-open');
      }
    });
    $(document).on('click', '#lookBook2 .show_products', function (event) {
      event.preventDefault();
      var $thisSlide = $(event.currentTarget).parents('.lookBook2__item'),
        $productBlock = $thisSlide.find('.lookBook2__productWrapper');
      if ($thisSlide.hasClass('show-one-product')) {
        $productBlock.find('.productGrid').addClass('is-hidden');
        $thisSlide.find('.lookBook2__productPopup').removeClass('is-open');
        setTimeout(function () {
          $thisSlide.removeClass('show-one-product');
        }, 300);
        setTimeout(function () {
          getProductGrid();
          $(event.target).parent().addClass('is-show');
          $(event.target).parents('.lookBook2__img').find('.lookBook2__productPopup').addClass('is-open');
        }, 300);
      } else {
        console.log(true);
        getProductGrid();
        $(event.currentTarget).parent().addClass('is-show');
        $(event.currentTarget).parents('.lookBook2__img').find('.lookBook2__productPopup').addClass('is-open');
      }
      function getProductGrid() {
        $thisSlide.find('.lookBook2__point').each(function (index, element) {
          var productID = $(element).find('.lookBook2__icon').data('product-id');
          $productBlock.find("[data-product-id=" + productID + "]").eq(0).removeClass('is-hidden');
        });
      }
    });
    $(document).on('click', '.lookBook2__productPopup .close', function (event) {
      event.preventDefault();
      var $thisSlide = $(event.currentTarget).parent();
      lookbookSlide = $thisSlide.find('.productGrid');
      $('#lookBook1 .lookBook1__btnShowProducts').removeClass('is-show');
      setTimeout(function () {
        $thisSlide.parents('.lookBook2__item').removeClass('show-one-product');
      }, 300);
      $(event.currentTarget).parents('.lookBook2__item').find('.lookBook2__btnShowProducts').removeClass('is-show');
      $(event.currentTarget).parents('.lookBook2__item').find('.lookBook2__productPopup').removeClass('is-open');
      lookbookSlide.addClass('is-hidden');
    });
    $(document).on('click', function (event) {
      if ($('body').hasClass('openLookbookPopup')) {
        lookbookSlide = lookbookPopup.find('.productCarousel-slide');
        if ($(event.target).closest('#halo-lookbook-popup').length === 0 && $(event.target).closest('.lookBook1__btnShowProducts').length === 0) {
          $('#lookBook1 .lookBook1__btnShowProducts').removeClass('is-show');
          $('body').removeClass('openLookbookPopup');
          setTimeout(function () {
            lookbookSlide.addClass('is-hidden');
            $('#halo-lookbook-popup .no-products').hide();
          }, 300);
        }
      }
      if ($('#lookBook1 .lookBook__popup').hasClass('is-open')) {
        $('#lookBook1 .lookBook__popup').removeClass('is-open');
      }
    });
  } else {
    $(document).on('click', '#lookBook1 [data-product-lookbook]', function (event) {
      getShopTheLook1(event.target);
      var index = $(event.currentTarget).parents('.lookBook1__point').data('index'),
        haloLookbookPopup = document.querySelector("#halo-lookbook-popup");
      haloLookbookPopup.querySelector('[data-index="' + index + '"]:not(.is-hidden)').classList.add('is-active');
      haloLookbookPopup.querySelector('[data-index="' + index + '"]:not(.is-hidden)').scrollIntoView({
        block: "nearest",
        behavior: "smooth"
      });
    });
    $(document).on('click', '#lookBook2 [data-product-lookbook]', function (event) {
      getShopTheLook2(event.target);
      var index = $(event.currentTarget).parents('.lookBook2__point').data('index'),
        haloLookbookPopup = document.querySelector("#halo-lookbook-popup");
      haloLookbookPopup.querySelector('[data-index="' + index + '"]:not(.is-hidden)').classList.add('is-active');
      haloLookbookPopup.querySelector('[data-index="' + index + '"]:not(.is-hidden)').scrollIntoView({
        block: "nearest",
        behavior: "smooth"
      });
    });
  }
  $('#halo-lookbook-popup .lookbook-popup-title .close').on('click', function (event) {
    event.preventDefault();
    lookbookSlide = lookbookPopup.find('.productCarousel-slide');
    $('#lookBook1 .lookBook1__btnShowProducts').removeClass('is-show');
    $('body').removeClass('openLookbookPopup');
    setTimeout(function () {
      lookbookSlide.addClass('is-hidden');
      lookbookSlide.removeClass('is-active');
      $('#halo-lookbook-popup .no-products').hide();
    }, 300);
  });
  $('.halo-background').on('click', function (event) {
    if ($('body').hasClass('openLookbookPopup')) {
      lookbookSlide = lookbookPopup.find('.productCarousel-slide');
      $('#lookBook1 .lookBook1__btnShowProducts').removeClass('is-show');
      $('body').removeClass('openLookbookPopup');
      setTimeout(function () {
        lookbookSlide.addClass('is-hidden');
        lookbookSlide.removeClass('is-active');
        $('#halo-lookbook-popup .no-products').hide();
      }, 300);
    }
  });
  function getShopTheLook1(event) {
    var $thisSlide = $(event).parents('.lookBook1__item');
    lookbookSlide = lookbookPopup.find('.productCarousel-slide');
    var title;
    if ($('#lookBook1 .lookBook1__header .title').length) {
      title = $('#lookBook1 .lookBook1__header .title').text();
    } else {
      title = 'Shop The Look';
    }
    lookbookPopup.find('.title').text(title);
    if ($('body').hasClass('openLookbookPopup')) {
      $('#lookBook1 .lookBook1__btnShowProducts').removeClass('is-show');
      $('body').removeClass('openLookbookPopup');
      lookbookSlide.addClass('is-hidden');
      $('#halo-lookbook-popup .no-products').hide();
      setTimeout(function () {
        getProductSlide();
        $(event).parent().addClass('is-show');
        $('body').addClass('openLookbookPopup');
      }, 300);
    } else {
      getProductSlide();
      $(event).parent().addClass('is-show');
      $('body').addClass('openLookbookPopup');
    }
    function getProductSlide() {
      $thisSlide.find('.lookBook1__point').each(function (index, element) {
        var productID = $(element).find('.lookBook1__icon').data('product-id');
        if (lookbookPopup.find("[data-product-id=" + productID + "]").eq(0).length) {
          lookbookPopup.find("[data-product-id=" + productID + "]").eq(0).removeClass('is-hidden');
          lookbookPopup.find("[data-product-id=" + productID + "]").eq(0).attr('data-index', index);
        } else {
          lookbookPopup.find('.no-products').show();
        }
      });
    }
  }
  function getShopTheLook2(event) {
    var $thisSlide = $(event).parents('.lookBook2__item');
    lookbookSlide = lookbookPopup.find('.productCarousel-slide');
    var title;
    if ($('#lookBook2 .lookBook2__header .title').length) {
      title = $('#lookBook2 .lookBook2__header .title').text();
    } else {
      title = 'Shop The Look';
    }
    lookbookPopup.find('.title').text(title);
    if ($('body').hasClass('openLookbookPopup')) {
      $('#lookBook2 .lookBook2__btnShowProducts').removeClass('is-show');
      $('body').removeClass('openLookbookPopup');
      lookbookSlide.addClass('is-hidden');
      $('#halo-lookbook-popup .no-products').hide();
      setTimeout(function () {
        getProductSlide();
        $(event).parent().addClass('is-show');
        $('body').addClass('openLookbookPopup');
      }, 300);
    } else {
      getProductSlide();
      $(event).parent().addClass('is-show');
      $('body').addClass('openLookbookPopup');
    }
    function getProductSlide() {
      $thisSlide.find('.lookBook2__point').each(function (index, element) {
        var productID = $(element).find('.lookBook2__icon').data('product-id');
        lookbookPopup.find("[data-product-id=" + productID + "]").eq(0).removeClass('is-hidden');
        lookbookPopup.find("[data-product-id=" + productID + "]").eq(0).attr('data-index', index);
      });
    }
  }
  function getProduct(arr) {
    return fetch('/graphql', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer ' + token
      },
      body: JSON.stringify({
        query: "\n            query MyQuery {\n                site {\n                    products (entityIds: [" + arr + "], first: 50) {\n                      edges {\n                        product: node {\n                          ...ProductFields\n                          }\n                        }\n                    }\n                    currency (currencyCode: " + curCode + ") {\n                        display {\n                            symbol\n                            symbolPlacement\n                            decimalToken\n                            thousandsToken\n                            decimalPlaces\n                        }\n                    }\n                }\n            }\n            fragment ProductFields on Product {\n                id\n                entityId\n                name\n                path\n                inventory {\n                    isInStock\n                    hasVariantInventory\n                }\n                productOptions {\n                    edges {\n                        node {\n                            entityId\n                            displayName\n                            isRequired\n                        }\n                    }\n                }\n                defaultImage {\n                    img250px: url(width: 250)\n                    altText\n                }\n                prices {\n                    priceRange {\n                        min {\n                            ...MoneyFields\n                        }\n                        max {\n                            ...MoneyFields\n                        }\n                    }\n                    retailPrice {\n                        ...MoneyFields\n                    }\n                    basePrice {\n                        ...MoneyFields\n                    }\n                    price {\n                        ...MoneyFields\n                    }\n                }\n            }\n            fragment MoneyFields on Money {\n                value\n                currencyCode\n            }\n        "
      })
    }).then(function (res) {
      return res.json();
    }).then(function (res) {
      return res.data;
    });
  }
  function formatMoney(n, c, d, t) {
    var c = isNaN(c = Math.abs(c)) ? 2 : c,
      d = d == undefined ? "." : d,
      t = t == undefined ? "," : t,
      s = n < 0 ? "-" : "",
      i = String(parseInt(n = Math.abs(Number(n) || 0).toFixed(c))),
      j = (j = i.length) > 3 ? j % 3 : 0;
    return s + (j ? i.substr(0, j) + t : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + t) + (c ? d + Math.abs(n - i).toFixed(c).slice(2) : "");
  }
  function renderProduct(product, curDisplay, tmp_3) {
    if (product != undefined) {
      $.each(product, function (index, element) {
        var item = element.product,
          symbol = curDisplay.symbol,
          symbolPlacement = curDisplay.symbolPlacement.toLowerCase(),
          decimalToken = curDisplay.decimalToken,
          decimalPlaces = curDisplay.decimalPlaces,
          thousandsToken = curDisplay.thousandsToken;
        var title, price;
        if ($('.body').hasClass('is-login') || context.themeSettings.restrict_to_login !== true) {
          if (item.prices.priceRange.min.value < item.prices.priceRange.max.value && context.themeSettings.price_ranges) {
            var priceMin = (symbolPlacement == "left" ? symbol : "") + formatMoney(item.prices.priceRange.min.value, decimalPlaces, decimalToken, thousandsToken) + (symbolPlacement != "left" ? symbol : "");
            var priceMax = (symbolPlacement == "left" ? symbol : "") + formatMoney(item.prices.priceRange.max.value, decimalPlaces, decimalToken, thousandsToken) + (symbolPlacement != "left" ? symbol : "");
            price = '<div class="price-section price-section--withoutTax non-sale-price--withoutTax price-none" style="display: none;">\
                                    <span data-product-non-sale-price-without-tax="" class="price price--non-sale"></span>\
                                </div>\
                                <div class="price-section price-section--withoutTax">\
                                    <span data-product-price-without-tax="" class="price price--withoutTax">' + priceMin + ' - ' + priceMax + '</span>\
                                </div>';
          } else {
            var priceDef = (symbolPlacement == "left" ? symbol : "") + formatMoney(item.prices.price.value, decimalPlaces, decimalToken, thousandsToken) + (symbolPlacement != "left" ? symbol : "");
            if (item.prices.retailPrice == null) {
              if (item.prices.basePrice.value > item.prices.price.value) {
                var priceBas = (symbolPlacement == "left" ? symbol : "") + formatMoney(item.prices.basePrice.value, decimalPlaces, decimalToken, thousandsToken) + (symbolPlacement != "left" ? symbol : "");
                price = '<div class="price-section price-section--withoutTax non-sale-price--withoutTax">\
                                            <span data-product-non-sale-price-without-tax="" class="price price--non-sale">' + priceBas + '</span>\
                                        </div>\
                                        <div class="price-section price-section--withoutTax">\
                                            <span data-product-price-without-tax="" class="price price--withoutTax">' + priceDef + '</span>\
                                        </div>';
              } else {
                price = '<div class="price-section price-section--withoutTax non-sale-price--withoutTax price-none" style="display: none;">\
                                            <span data-product-non-sale-price-without-tax="" class="price price--non-sale"></span>\
                                        </div>\
                                        <div class="price-section price-section--withoutTax">\
                                            <span data-product-price-without-tax="" class="price price--withoutTax">' + priceDef + '</span>\
                                        </div>';
              }
            } else {
              if (item.prices.retailPrice.value > item.prices.price.value) {
                var priceRet = (symbolPlacement == "left" ? symbol : "") + formatMoney(item.prices.retailPrice.value, decimalPlaces, decimalToken, thousandsToken) + (symbolPlacement != "left" ? symbol : "");
                price = '<div class="price-section price-section--withoutTax non-sale-price--withoutTax">\
                                            <span data-product-non-sale-price-without-tax="" class="price price--non-sale">' + priceRet + '</span>\
                                        </div>\
                                        <div class="price-section price-section--withoutTax">\
                                            <span data-product-price-without-tax="" class="price price--withoutTax">' + priceDef + '</span>\
                                        </div>';
              } else {
                price = '<div class="price-section price-section--withoutTax non-sale-price--withoutTax price-none" style="display: none;">\
                                            <span data-product-non-sale-price-without-tax="" class="price price--non-sale"></span>\
                                        </div>\
                                        <div class="price-section price-section--withoutTax">\
                                            <span data-product-price-without-tax="" class="price price--withoutTax">' + priceDef + '</span>\
                                        </div>';
              }
            }
          }
        } else {
          price = '<p translate>Log in for pricing</p>';
        }
        var productTitle;
        if (context.themeSettings.halo_card_title == 'ellipsis') {
          productTitle = '<a href="' + item.path + '" class="clamp" style="-webkit-box-orient: vertical; -webkit-line-clamp: 1;" aria-label="Link Go To This Product"><span>' + item.name + '</span></a>';
        } else {
          productTitle = '<a href="' + item.path + '" class="clamp" aria-label="Link Go To This Product"><span>' + item.name + '</span></a>';
        }
        var tmp = $('.lookbook-popup-content');
        var html_card = '<div class="productCarousel-slide is-hidden" data-product-id="' + item.entityId + '">\
                                <div class="product">\
                                    <article class="card">\
                                        <figure class="card-figure">\
                                            <div class="card-img-container">\
                                                <a href="' + item.path + '"><img class="card-image" src="' + item.defaultImage.img250px + '" alt="' + item.defaultImage.altText + '" title="' + item.defaultImage.altText + '"></a>\
                                            </div>\
                                        </figure>\
                                        <div class="card-body">\
                                            <h4 class="card-title">' + productTitle + '</h4>\
                                            <a class="card-price-wrapper" href="' + item.path + '">\
                                                <div class="card-price" data-test-info-type="price">' + price + '</div>\
                                                <svg class="icon"><use xlink:href="#icon-long-arrow-right" /></svg>\
                                            </a>\
                                        </div>\
                                    </article>\
                                </div>\
                            </div>';
        var tmp_2 = productLookBook1.find(".lookBook1__icon[data-product-id=" + item.entityId + "]+.lookBook__popup");
        var html_card_2 = '<article class="card card-lookbook" data-product-id="' + item.entityId + '">\
                                <div class="card-body">\
                                    <div class="card-body-content">\
                                        <h4 class="card-title">' + productTitle + '</h4>\
                                        <a class="card-price-wrapper" href="' + item.path + '">\
                                            <div class="card-price" data-test-info-type="price">' + price + '</div>\
                                            <svg class="icon"><use xlink:href="#icon-long-arrow-right" /></svg>\
                                        </a>\
                                    </div>\
                                </div>\
                            </div>';
        var html_card_3 = '<div class="productGrid is-hidden" data-product-id="' + item.entityId + '">\
                                <div class="product">\
                                    <article class="card">\
                                        <figure class="card-figure">\
                                            <div class="card-img-container">\
                                                <a href="' + item.path + '"><img class="card-image" src="' + item.defaultImage.img250px + '" alt="' + item.defaultImage.altText + '" title="' + item.defaultImage.altText + '"></a>\
                                            </div>\
                                        </figure>\
                                        <div class="card-body">\
                                            <h4 class="card-title">' + productTitle + '</h4>\
                                            <a class="card-price-wrapper" href="' + item.path + '">\
                                                <div class="card-price" data-test-info-type="price">' + price + '</div>\
                                                <svg class="icon"><use xlink:href="#icon-long-arrow-right" /></svg>\
                                            </a>\
                                        </div>\
                                    </article>\
                                </div>\
                            </div>';
        tmp.append(html_card);
        tmp_2.html(html_card_2);
        if (tmp_3 != undefined) {
          tmp_3.append(html_card_3);
        }
      });
    }
  }
  function uniqueArray(list) {
    var result = [];
    $.each(list, function (index, element) {
      if ($.inArray(element, result) == -1) {
        result.push(element);
      }
    });
    return result;
  }
}

/***/ }),

/***/ "./assets/js/theme/halothemes/haloMegaMenu.js":
/*!****************************************************!*\
  !*** ./assets/js/theme/halothemes/haloMegaMenu.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ haloMegaMenu)
/* harmony export */ });
/* harmony import */ var _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @bigcommerce/stencil-utils */ "./node_modules/@bigcommerce/stencil-utils/src/main.js");
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");

var haloMegaMenu = /*#__PURE__*/function () {
  function haloMegaMenu() {}
  var _proto = haloMegaMenu.prototype;
  _proto.menuItem = function menuItem(num) {
    return {
      setMegaMenu: function setMegaMenu(param) {
        param = $.extend({
          style: '',
          dropAlign: 'fullWidth',
          dropWidth: '493px',
          cateColumns: 1,
          disabled: false,
          bottomCates: '',
          products: '',
          productId: '',
          label: '',
          labelType: '',
          content: '',
          contentLeft: '',
          contentRight: '',
          images: '',
          imagesTop: '',
          imagesCustom: '',
          imagesLeft: '',
          imagesRight: ''
        }, param);
        var $scope = $('.navPages-list:not(.navPages-list--user) > li:nth-child(' + num + ')');
        if (!$scope.hasClass('navPages-item-toggle')) {
          if (param.disabled === false) {
            var subMegaMenu = $scope.find('> .navPage-subMenu'),
              subMenuList = subMegaMenu.find('> .navPage-subMenu-list:not(.navPage-subMenu-links)');
            if (param.style === 'style 1') {
              if (!$scope.hasClass('has-megamenu')) {
                $scope.addClass('has-megamenu style-1 fullWidth');
                if (!subMegaMenu.find('.cateArea').length) {
                  subMegaMenu.find('> .navPage-subMenu-list').wrap('<div class="cateArea columns-' + param.cateColumns + '"></div>');
                  subMenuList.find('> .navPage-subMenu-all').after(param.contentLeft);
                }
                if (!subMegaMenu.find('.imageArea').length) {
                  subMegaMenu.find('.cateArea').prepend('<div class="imageArea"><div class="megamenu-left-item">' + param.imagesLeft + '</div></div>');
                  subMegaMenu.append('<div class="imageArea"><div class="megamenu-right-item">' + param.imagesRight + '</div></div>');
                  subMegaMenu.find('.megamenu-right-item').after('<div class="megamenu-right-item">' + param.contentRight + '</div>');
                }
                subMegaMenu.find('.imageArea').css({
                  'width': '100%',
                  'max-width': param.imageAreaWidth
                });
                subMegaMenu.find('.cateArea').css({
                  'width': '100%',
                  'max-width': param.cateAreaWidth
                });
                subMegaMenu.addClass('haloCustomScrollbar');
              }
            }
            if (param.style === 'style 2') {
              if (!$scope.hasClass('has-megamenu')) {
                $scope.addClass('has-megamenu style-2 fullWidth');
                if (!subMegaMenu.find('.cateArea').length) {
                  subMegaMenu.find('> .navPage-subMenu-list').wrap('<div class="cateArea columns-' + param.cateColumns + '"></div>');
                  subMegaMenu.find('.cateArea').prepend(param.contentLeft);
                  subMenuList.after('<div class="megamenu-right-item">' + param.contentRight + '</div>');
                }
                if (!subMegaMenu.find('.imageArea').length) {
                  subMegaMenu.append('<div class="imageArea"><div class="megamenu-left-item">' + param.images + '</div></div>');
                  if (param.products.length && param.products !== '') {
                    subMegaMenu.find('.imageArea').append('<div class="megamenu-brand-list">' + param.products + '</div>');
                  }
                }
                subMegaMenu.find('.imageArea').css({
                  'width': '100%',
                  'max-width': param.imageAreaWidth
                });
                subMegaMenu.find('.cateArea').css({
                  'width': '100%',
                  'max-width': param.cateAreaWidth
                });
                subMegaMenu.addClass('haloCustomScrollbar');
              }
              var $megamenuBrands = $('.megamenu-brands');
              var $menubrandItem = $('.haloMegamenuBrand__list li');
              $menubrandItem.each(function (index, element) {
                var txt = $(element).data('brand-letter');
                if (!$megamenuBrands.find('[data-brand-letter="' + txt + '"]').hasClass('has-letter')) {
                  $megamenuBrands.find('[data-brand-letter="' + txt + '"]').addClass('has-letter');
                }
              });
            }
            if (param.style === 'style 3') {
              if (!$scope.hasClass('has-megamenu')) {
                $scope.addClass('has-megamenu style-3 fullWidth');
              }
              if (!subMegaMenu.find('.cateArea').length) {
                subMegaMenu.find('> .navPage-subMenu-list').wrap('<div class="cateArea columns-' + param.cateColumns + '"></div>');
                subMegaMenu.find('.cateArea').prepend(param.content);
                subMenuList.after('<div class="megamenu-right-item">' + param.images + '</div>');
              }
              if (!subMegaMenu.find('.imageArea').length) {
                subMegaMenu.append('<div class="imageArea">' + param.bottomCates + '</div>');
              }
              subMegaMenu.find('.imageArea').css({
                'width': '100%',
                'max-width': param.imageAreaWidth
              });
              subMegaMenu.find('.cateArea').css({
                'width': '100%',
                'max-width': param.cateAreaWidth
              });
              subMegaMenu.addClass('haloCustomScrollbar');
            }
            var navPagesAction = $scope.children('.navPages-action');
            if (param.labelType === 'new') {
              navPagesAction.find('.text').append('<span class="navPages-label new-label">' + param.label + '</span>');
            } else if (param.labelType === 'sale') {
              navPagesAction.find('.text').append('<span class="navPages-label sale-label">' + param.label + '</span>');
            } else if (param.labelType === 'hot') {
              navPagesAction.find('.text').append('<span class="navPages-label hot-label">' + param.label + '</span>');
            }
          } else {
            var _navPagesAction = $scope.children('.navPages-action');
            if (param.labelType === 'new') {
              _navPagesAction.find('.text').append('<span class="navPages-label new-label">' + param.label + '</span>');
            } else if (param.labelType === 'sale') {
              _navPagesAction.find('.text').append('<span class="navPages-label sale-label">' + param.label + '</span>');
            } else if (param.labelType === 'hot') {
              _navPagesAction.find('.text').append('<span class="navPages-label hot-label">' + param.label + '</span>');
            }
          }
        }
        return this;
      }
    };
  };
  return haloMegaMenu;
}();


/***/ }),

/***/ "./assets/js/theme/halothemes/haloMegaMenuEditor.js":
/*!**********************************************************!*\
  !*** ./assets/js/theme/halothemes/haloMegaMenuEditor.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _haloMegaMenu__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./haloMegaMenu */ "./assets/js/theme/halothemes/haloMegaMenu.js");
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");

window.haloMegaMenu = _haloMegaMenu__WEBPACK_IMPORTED_MODULE_0__["default"];
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(context) {
  if (context.themeSettings.haloMegamenuType == 'Editor') {
    var SetItemMegaMenu = function SetItemMegaMenu() {
      $('.navPages-list-megamenu > li:not(.navPages-item-toggle)').on('mouseover', function (event) {
        var numberItem = $(event.currentTarget).index() + 1;
        if (!$(event.currentTarget).hasClass('has-megamenu')) {
          LoadMegaMenu(numberItem);
        }
      });
      $('.navPages-list-megamenu > li:not(.navPages-item-toggle)').on('focusin', function (event) {
        var numberItem = $(event.currentTarget).index() + 1;
        if (!$(event.currentTarget).hasClass('has-megamenu')) {
          LoadMegaMenu(numberItem);
        }
      });
      $(document).on('click', '#halo-menu-sidebar .navPages-list:not(.navPages-list--user) > li > .navPages-action', function (event) {
        var numberItem = $(event.currentTarget).parent().index() + 1;
        if (!$(event.currentTarget).parent().hasClass('has-megamenu')) {
          LoadMegaMenu(numberItem);
        }
      });
      if (context.themeSettings.halo_menu_tab == true) {
        $(document).ready(function () {
          $('body').addClass('menu-is-load');
        });
      }
    };
    var LoadMegaMenu = function LoadMegaMenu(numberItem) {
      if (mstyle1_item == numberItem) {
        haloMegaMenu.menuItem(mstyle1_item).setMegaMenu({
          style: 'style 1',
          imageAreaWidth: context.themeSettings.mstyle1_item_img_width,
          cateAreaWidth: context.themeSettings.mstyle1_item_col_width,
          cateColumns: context.themeSettings.mstyle1_item_col,
          imagesLeft: '<a class="image" href="' + context.themeSettings.mstyle1_item1_link + '">\
		                            <img class="lazyload" src="' + urlImgLoad + '" data-src="' + urlStoreHash + context.themeSettings.mstyle1_item1_img + '" alt="' + context.themeSettings.mstyle1_item1_img + '" title="' + context.themeSettings.mstyle1_item1_img + '"/>\
		                        </a>',
          imagesRight: '<a class="image" href="' + context.themeSettings.mstyle1_item2_link + '">\
			                            <img class="lazyload" src="' + urlImgLoad + '" data-src="' + urlStoreHash + context.themeSettings.mstyle1_item2_img + '" alt="' + context.themeSettings.mstyle1_item2_img + '" title="' + context.themeSettings.mstyle1_item2_img + '"/>\
			                        </a>\
			                        <a class="image" href="' + context.themeSettings.mstyle1_item3_link + '">\
			                            <img class="lazyload" src="' + urlImgLoad + '" data-src="' + urlStoreHash + context.themeSettings.mstyle1_item3_img + '" alt="' + context.themeSettings.mstyle1_item3_img + '" title="' + context.themeSettings.mstyle1_item3_img + '"/>\
			                        </a>',
          contentLeft: '<li class="navPage-subMenu-item-child navPage-subMenu-item-custom">\
	                                	<a class="navPage-subMenu-action navPages-action navPages-action-custom" href="' + context.themeSettings.mstyle1_item_custom_link1 + '"><span class="text"><span>' + context.themeSettings.mstyle1_item_custom_linktext1 + '</span></span></a>\
		                            </li>\
		                            <li class="navPage-subMenu-item-child navPage-subMenu-item-custom">\
		                                <a class="navPage-subMenu-action navPages-action navPages-action-custom" href="' + context.themeSettings.mstyle1_item_custom_link2 + '"><span class="text"><span>' + context.themeSettings.mstyle1_item_custom_linktext2 + '</span></span></a>\
		                            </li>\
		                            <li class="navPage-subMenu-item-child navPage-subMenu-item-custom">\
		                                <a class="navPage-subMenu-action navPages-action navPages-action-custom" href="' + context.themeSettings.mstyle1_item_custom_link3 + '"><span class="text"><span>' + context.themeSettings.mstyle1_item_custom_linktext3 + '</span></span></a>\
		                            </li>\
		                            <li class="navPage-subMenu-item-child navPage-subMenu-item-custom">\
		                                <a class="navPage-subMenu-action navPages-action navPages-action-custom" href="' + context.themeSettings.mstyle1_item_custom_link4 + '"><span class="text"><span>' + context.themeSettings.mstyle1_item_custom_linktext4 + '</span></span></a>\
		                            </li>\
		                            <li class="navPage-subMenu-item-child navPage-subMenu-item-custom">\
		                                <a class="navPage-subMenu-action navPages-action navPages-action-custom" href="' + context.themeSettings.mstyle1_item_custom_link5 + '"><span class="text"><span>' + context.themeSettings.mstyle1_item_custom_linktext5 + '</span></span></a>\
		                            </li>\
		                            <li class="navPage-subMenu-item-child navPage-subMenu-item-custom">\
		                                <a class="navPage-subMenu-action navPages-action navPages-action-custom navPages-action--sale" href="' + context.themeSettings.mstyle1_item_custom_link6 + '"><span class="text"><span>' + context.themeSettings.mstyle1_item_custom_linktext6 + '</span></span></a>\
		                            </li>',
          contentRight: '<h3 class="megamenu-title">' + context.themeSettings.mstyle2_item_subMenuBlock + '</h3>\
                    			   	<div class="megamenu-subMenu">\
                    			   		<ul class="navPage-subMenu-links navPage-subMenu-list">\
				                    		<li class="navPage-subMenu-item-child navPage-subMenu-item-custom">\
				                                <a class="navPage-subMenu-action navPages-action navPages-action-custom" href="' + context.themeSettings.mstyle1_item_custom_link7 + '">\
				                                	<img class="lazyload" src="' + urlImgLoad + '" data-src="' + urlStoreHash + context.themeSettings.mstyle1_item_custom_img1 + '" alt="' + context.themeSettings.mstyle1_item_custom_linktext7 + '" title="' + context.themeSettings.mstyle1_item_custom_linktext7 + '"/>\
				                                	<span class="text"><span>\
				                                		' + context.themeSettings.mstyle1_item_custom_linktext7 + '\
				                                	</span></span>\
				                                </a>\
				                            </li>\
				                            <li class="navPage-subMenu-item-child navPage-subMenu-item-custom">\
				                                <a class="navPage-subMenu-action navPages-action navPages-action-custom" href="' + context.themeSettings.mstyle1_item_custom_link8 + '">\
				                                	<img class="lazyload" src="' + urlImgLoad + '" data-src="' + urlStoreHash + context.themeSettings.mstyle1_item_custom_img2 + '" alt="' + context.themeSettings.mstyle1_item_custom_linktext8 + '" title="' + context.themeSettings.mstyle1_item_custom_linktext8 + '"/>\
				                                	<span class="text"><span>\
				                                		' + context.themeSettings.mstyle1_item_custom_linktext8 + '\
				                                	</span></span>\
				                                </a>\
				                            </li>\
				                            <li class="navPage-subMenu-item-child navPage-subMenu-item-custom">\
				                                <a class="navPage-subMenu-action navPages-action navPages-action-custom" href="' + context.themeSettings.mstyle1_item_custom_link9 + '">\
				                                	<img class="lazyload" src="' + urlImgLoad + '" data-src="' + urlStoreHash + context.themeSettings.mstyle1_item_custom_img3 + '" alt="' + context.themeSettings.mstyle1_item_custom_linktext9 + '" title="' + context.themeSettings.mstyle1_item_custom_linktext9 + '"/>\
				                                	<span class="text"><span>\
				                                		' + context.themeSettings.mstyle1_item_custom_linktext9 + '\
				                                	</span></span>\
				                                </a>\
				                            </li>\
				                            <li class="navPage-subMenu-item-child navPage-subMenu-item-custom">\
				                                <a class="navPage-subMenu-action navPages-action navPages-action-custom" href="' + context.themeSettings.mstyle1_item_custom_link10 + '">\
				                                	<img class="lazyload" src="' + urlImgLoad + '" data-src="' + urlStoreHash + context.themeSettings.mstyle1_item_custom_img4 + '" alt="' + context.themeSettings.mstyle1_item_custom_linktext10 + '" title="' + context.themeSettings.mstyle1_item_custom_linktext10 + '"/>\
				                                	<span class="text"><span>\
				                                		' + context.themeSettings.mstyle1_item_custom_linktext10 + '\
				                                	</span></span>\
				                                </a>\
				                            </li>\
				                            <li class="navPage-subMenu-item-child navPage-subMenu-item-custom">\
				                                <a class="navPage-subMenu-action navPages-action navPages-action-custom" href="' + context.themeSettings.mstyle1_item_custom_link11 + '">\
				                                	<img class="lazyload" src="' + urlImgLoad + '" data-src="' + urlStoreHash + context.themeSettings.mstyle1_item_custom_img5 + '" alt="' + context.themeSettings.mstyle1_item_custom_linktext11 + '" title="' + context.themeSettings.mstyle1_item_custom_linktext11 + '"/>\
				                                	<span class="text"><span>\
				                                		' + context.themeSettings.mstyle1_item_custom_linktext11 + '\
				                                	</span></span>\
				                                </a>\
				                            </li>\
			                            </ul>\
	                        		</div>'
        });
      } else if (mstyle2_item == numberItem) {
        haloMegaMenu.menuItem(mstyle2_item).setMegaMenu({
          style: 'style 2',
          imageAreaWidth: context.themeSettings.mstyle2_item_img_width,
          cateAreaWidth: context.themeSettings.mstyle2_item_col_width,
          cateColumns: context.themeSettings.mstyle2_item_col,
          contentLeft: '<ul class="navPage-subMenu-links navPage-subMenu-list">\
	                            <li class="navPage-subMenu-item-child">\
	                                <a class="navPage-subMenu-action navPages-action navPages-action-custom" href="' + context.themeSettings.mstyle2_item_custom_link1 + '"><span class="text"><span>' + context.themeSettings.mstyle2_item_custom_linktext1 + '</span></span></a>\
	                            </li>\
	                            <li class="navPage-subMenu-item-child">\
	                                <a class="navPage-subMenu-action navPages-action navPages-action-custom" href="' + context.themeSettings.mstyle2_item_custom_link2 + '"><span class="text"><span>' + context.themeSettings.mstyle2_item_custom_linktext2 + '</span></span></a>\
	                            </li>\
	                            <li class="navPage-subMenu-item-child">\
	                                <a class="navPage-subMenu-action navPages-action navPages-action-custom" href="' + context.themeSettings.mstyle2_item_custom_link3 + '"><span class="text"><span>' + context.themeSettings.mstyle2_item_custom_linktext3 + '</span></span></a>\
	                            </li>\
	                            <li class="navPage-subMenu-item-child">\
	                                <a class="navPage-subMenu-action navPages-action navPages-action-custom" href="' + context.themeSettings.mstyle2_item_custom_link4 + '"><span class="text"><span>' + context.themeSettings.mstyle2_item_custom_linktext4 + '</span></span></a>\
	                            </li>\
	                            <li class="navPage-subMenu-item-child">\
	                                <a class="navPage-subMenu-action navPages-action navPages-action-custom" href="' + context.themeSettings.mstyle2_item_custom_link5 + '"><span class="text"><span>' + context.themeSettings.mstyle2_item_custom_linktext5 + '</span></span></a>\
	                            </li>\
	                            <li class="navPage-subMenu-item-child">\
	                                <a class="navPage-subMenu-action navPages-action navPages-action-custom navPages-action--sale" href="' + context.themeSettings.mstyle2_item_custom_link6 + '"><span class="text"><span>' + context.themeSettings.mstyle2_item_custom_linktext6 + '</span></span></a>\
	                            </li>\
	                        </ul>',
          contentRight: '<div class="item"><a class="image" href="' + context.themeSettings.mstyle2_item_link3 + '">\
	                            <img class="lazyload" src="' + urlImgLoad + '" data-src="' + urlStoreHash + context.themeSettings.mstyle2_item_img3 + '" alt="' + context.themeSettings.mstyle2_item_img3 + '" title="' + context.themeSettings.mstyle2_item_img3 + '"/>\
	                        </a></div>',
          products: '<h3 class="megamenu-title">' + context.themeSettings.mstyle2_item_productBlock + '</h3>\
	                        <div class="megamenu-brands">\
	                            <ul>\
	                                <li data-brand-letter="a"><a href="/brands#a"><span>a</span></a></li>\
	                                <li data-brand-letter="b"><a href="/brands#b"><span>b</span></a></li>\
	                                <li data-brand-letter="c"><a href="/brands#c"><span>c</span></a></li>\
	                                <li data-brand-letter="d"><a href="/brands#d"><span>d</span></a></li>\
	                                <li data-brand-letter="e"><a href="/brands#e"><span>e</span></a></li>\
	                                <li data-brand-letter="f"><a href="/brands#f"><span>f</span></a></li>\
	                                <li data-brand-letter="g"><a href="/brands#g"><span>g</span></a></li>\
	                                <li data-brand-letter="h"><a href="/brands#h"><span>h</span></a></li>\
	                                <li data-brand-letter="i"><a href="/brands#i"><span>i</span></a></li>\
	                                <li data-brand-letter="j"><a href="/brands#j"><span>j</span></a></li>\
	                                <li data-brand-letter="k"><a href="/brands#k"><span>k</span></a></li>\
	                                <li data-brand-letter="l"><a href="/brands#l"><span>l</span></a></li>\
	                                <li data-brand-letter="m"><a href="/brands#m"><span>m</span></a></li>\
	                                <li data-brand-letter="n"><a href="/brands#n"><span>n</span></a></li>\
	                                <li data-brand-letter="o"><a href="/brands#o"><span>o</span></a></li>\
	                                <li data-brand-letter="p"><a href="/brands#p"><span>p</span></a></li>\
	                                <li data-brand-letter="q"><a href="/brands#q"><span>q</span></a></li>\
	                                <li data-brand-letter="r"><a href="/brands#r"><span>r</span></a></li>\
	                                <li data-brand-letter="s"><a href="/brands#s"><span>s</span></a></li>\
	                                <li data-brand-letter="t"><a href="/brands#t"><span>t</span></a></li>\
	                                <li data-brand-letter="u"><a href="/brands#u"><span>u</span></a></li>\
	                                <li data-brand-letter="v"><a href="/brands#v"><span>v</span></a></li>\
	                                <li data-brand-letter="w"><a href="/brands#w"><span>w</span></a></li>\
	                                <li data-brand-letter="x"><a href="/brands#x"><span>x</span></a></li>\
	                                <li data-brand-letter="y"><a href="/brands#y"><span>y</span></a></li>\
	                                <li data-brand-letter="z"><a href="/brands#z"><span>z</span></a></li>\
	                                <li data-brand-letter="0"><a href="/brands#0"><span>1-9</span></a></li>\
	                            </ul>\
	                            <a class="view-all" href="/brands">' + context.themeSettings.mstyle2_item_productBlock_btnAll + '</a>\
	                        </div>',
          images: '<div class="item"><a class="image" href="' + context.themeSettings.mstyle2_item_link1 + '">\
	                            <img class="lazyload" src="' + urlImgLoad + '" data-src="' + urlStoreHash + context.themeSettings.mstyle2_item_img1 + '" alt="' + context.themeSettings.mstyle2_item_img1 + '" title="' + context.themeSettings.mstyle2_item_img1 + '"/>\
	                        </a></div>\
	                        <div class="item"><a class="image" href="' + context.themeSettings.mstyle2_item_link2 + '">\
	                            <img class="lazyload" src="' + urlImgLoad + '" data-src="' + urlStoreHash + context.themeSettings.mstyle2_item_img2 + '" alt="' + context.themeSettings.mstyle2_item_img2 + '" title="' + context.themeSettings.mstyle2_item_img2 + '"/>\
	                        </a></div>'
        });
      } else if (mstyle3_item == numberItem) {
        haloMegaMenu.menuItem(mstyle3_item).setMegaMenu({
          style: 'style 3',
          imageAreaWidth: context.themeSettings.mstyle3_item_img_width,
          cateAreaWidth: context.themeSettings.mstyle3_item_col_width,
          cateColumns: context.themeSettings.mstyle3_item_col,
          content: '<ul class="navPage-subMenu-links navPage-subMenu-list">\
	                            <li class="navPage-subMenu-item-child">\
	                                <a class="navPage-subMenu-action navPages-action navPages-action-custom" href="' + context.themeSettings.mstyle3_item_custom_link1 + '"><span class="text"><span>' + context.themeSettings.mstyle3_item_custom_linktext1 + '</span></span></a>\
	                            </li>\
	                            <li class="navPage-subMenu-item-child">\
	                                <a class="navPage-subMenu-action navPages-action navPages-action-custom" href="' + context.themeSettings.mstyle3_item_custom_link2 + '"><span class="text"><span>' + context.themeSettings.mstyle3_item_custom_linktext2 + '</span></span></a>\
	                            </li>\
	                            <li class="navPage-subMenu-item-child">\
	                                <a class="navPage-subMenu-action navPages-action navPages-action-custom" href="' + context.themeSettings.mstyle3_item_custom_link3 + '"><span class="text"><span>' + context.themeSettings.mstyle3_item_custom_linktext3 + '</span></span></a>\
	                            </li>\
	                            <li class="navPage-subMenu-item-child">\
	                                <a class="navPage-subMenu-action navPages-action navPages-action-custom" href="' + context.themeSettings.mstyle3_item_custom_link4 + '"><span class="text"><span>' + context.themeSettings.mstyle3_item_custom_linktext4 + '</span></span></a>\
	                            </li>\
	                            <li class="navPage-subMenu-item-child">\
	                                <a class="navPage-subMenu-action navPages-action navPages-action-custom" href="' + context.themeSettings.mstyle3_item_custom_link5 + '"><span class="text"><span>' + context.themeSettings.mstyle3_item_custom_linktext5 + '</span></span></a>\
	                            </li>\
	                            <li class="navPage-subMenu-item-child">\
	                                <a class="navPage-subMenu-action navPages-action navPages-action-custom navPages-action--sale" href="' + context.themeSettings.mstyle3_item_custom_link6 + '"><span class="text"><span>' + context.themeSettings.mstyle3_item_custom_linktext6 + '</span></span></a>\
	                            </li>\
	                        </ul>',
          images: '<a class="image" href="' + context.themeSettings.mstyle3_item_link1 + '">\
	                            <img class="lazyload" src="' + urlImgLoad + '" data-src="' + urlStoreHash + context.themeSettings.mstyle3_item_img1 + '" alt="' + context.themeSettings.mstyle3_item_img1 + '" title="' + context.themeSettings.mstyle3_item_img1 + '"/>\
	                        </a>\
	                        <a class="image" href="' + context.themeSettings.mstyle3_item_link2 + '">\
	                            <img class="lazyload" src="' + urlImgLoad + '" data-src="' + urlStoreHash + context.themeSettings.mstyle3_item_img2 + '" alt="' + context.themeSettings.mstyle3_item_img2 + '" title="' + context.themeSettings.mstyle3_item_img2 + '"/>\
	                        </a>',
          bottomCates: '<div class="megamenu-custom-list"><div class="megamenu-bottom"><span class="text"><span>' + context.themeSettings.mstyle3_item_bottomCates + '</span></span></div></div>'
        });
      } else {
        return;
      }
    };
    var MegaMenuLabel = function MegaMenuLabel() {
      if (context.themeSettings.mega_menu_new_label && context.themeSettings.mega_menu_new_label_text) {
        haloMegaMenu.menuItem(context.themeSettings.mega_menu_new_label).setMegaMenu({
          label: context.themeSettings.mega_menu_new_label_text,
          labelType: "new",
          disabled: true
        });
      }
      if (context.themeSettings.mega_menu_hot_label && context.themeSettings.mega_menu_hot_label_text) {
        haloMegaMenu.menuItem(context.themeSettings.mega_menu_hot_label).setMegaMenu({
          label: context.themeSettings.mega_menu_hot_label_text,
          labelType: "hot",
          disabled: true
        });
      }
      if (context.themeSettings.mega_menu_sale_label && context.themeSettings.mega_menu_sale_label_text) {
        haloMegaMenu.menuItem(context.themeSettings.mega_menu_sale_label).setMegaMenu({
          label: context.themeSettings.mega_menu_sale_label_text,
          labelType: "sale",
          disabled: true
        });
      }
    };
    var haloMegaMenu = new window.haloMegaMenu();
    var urlImgLoad = $('.halo-global-block').data('image-load');
    var urlStoreHash = $('.halo-global-block').data('store-hash-image');
    var mstyle1_item = parseInt(context.themeSettings.mstyle1_item),
      mstyle2_item = parseInt(context.themeSettings.mstyle2_item),
      mstyle3_item = parseInt(context.themeSettings.mstyle3_item);
    MegaMenuLabel();
    var setItemMegaMenu = SetItemMegaMenu();
    window.onload = setItemMegaMenu;
  }
}

/***/ }),

/***/ "./assets/js/theme/halothemes/haloMegaMenuEditorCustom.js":
/*!****************************************************************!*\
  !*** ./assets/js/theme/halothemes/haloMegaMenuEditorCustom.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _haloMegaMenu__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./haloMegaMenu */ "./assets/js/theme/halothemes/haloMegaMenu.js");
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");

window.haloMegaMenu = _haloMegaMenu__WEBPACK_IMPORTED_MODULE_0__["default"];
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(context) {
  if (context.themeSettings.haloMegamenuType == 'Editor') {
    var SetItemMegaMenu = function SetItemMegaMenu() {
      $('.navPages-list-megamenu > li:not(.navPages-item-toggle)').mouseover(function (event) {
        var numberItem = $(event.currentTarget).index() + 1;
        if (!$(event.currentTarget).hasClass('has-megamenu')) {
          LoadMegaMenu(numberItem);
        }
      });
      $(document).on('click', '#halo-menu-sidebar .navPages-list:not(.navPages-list--user) > li > .navPages-action', function (event) {
        var numberItem = $(event.currentTarget).parent().index() + 1;
        if (!$(event.currentTarget).parent().hasClass('has-megamenu')) {
          LoadMegaMenu(numberItem);
        }
      });
      $(document).ready(function () {
        $('body').addClass('menu-is-load');
      });
      if ($(window).width() > 1024) {
        if ($('.navPages-list:not(.navPages-list--user) > .navPages-item.has-dropdown').length) {
          $('.navPages-list:not(.navPages-list--user) > .navPages-item.has-dropdown').on('mouseover', function (event) {
            $('body').addClass('openMenuPC');
          }).on('mouseleave', function (event) {
            $('body').removeClass('openMenuPC');
          });
        }
      }
      $('.halo-menu-sidebar .halo-sidebar-close').on('click', function (event) {
        event.preventDefault();
        if ($('body').hasClass('has-activeNavPages')) {
          $('.mobileMenu-toggle').trigger('click');
        }
      });
      $(document).on('click', function (event) {
        if ($('body').hasClass('has-activeNavPages')) {
          if ($(event.target).closest('.halo-menu-sidebar').length === 0 && $(event.target).closest('.mobileMenu-toggle').length === 0) {
            $('.mobileMenu-toggle').trigger('click');
          }
        }
      });
      var $menuPc = $('.halo-bottomHeader .navPages-list:not(.navPages-list--user)'),
        $menuMobile = $('#halo-menu-sidebar .navPages-list:not(.navPages-list--user)');
      if ($(window).width() <= 1024) {
        $('.mobileMenu-toggle').on('click', function (event) {
          if ($menuPc.length) {
            if (!$menuMobile.children().length) {
              $menuPc.children().appendTo($menuMobile);
            }
          }
        });
      }
    };
    var LoadMegaMenu = function LoadMegaMenu(numberItem) {
      if (mcstyle1_item == numberItem) {
        haloMegaMenu.menuItem(mcstyle1_item).setMegaMenu({
          style: 'style 1',
          imageAreaWidth: context.themeSettings.mcstyle1_item_img_width,
          cateAreaWidth: context.themeSettings.mcstyle1_item_col_width,
          cateColumns: context.themeSettings.mcstyle1_item_col,
          imagesLeft: '<a class="image" href="' + context.themeSettings.mcstyle1_item1_link + '">\
		                            <img class="lazyload" src="' + urlImgLoad + '" data-src="' + urlStoreHash + context.themeSettings.mcstyle1_item1_img + '" alt="' + context.themeSettings.mcstyle1_item1_img + '" title="' + context.themeSettings.mcstyle1_item1_img + '"/>\
		                        </a>',
          imagesRight: '<a class="image" href="' + context.themeSettings.mcstyle1_item2_link + '">\
			                            <img class="lazyload" src="' + urlImgLoad + '" data-src="' + urlStoreHash + context.themeSettings.mcstyle1_item2_img + '" alt="' + context.themeSettings.mcstyle1_item2_img + '" title="' + context.themeSettings.mcstyle1_item2_img + '"/>\
			                        </a>\
			                        <a class="image" href="' + context.themeSettings.mcstyle1_item3_link + '">\
			                            <img class="lazyload" src="' + urlImgLoad + '" data-src="' + urlStoreHash + context.themeSettings.mcstyle1_item3_img + '" alt="' + context.themeSettings.mcstyle1_item3_img + '" title="' + context.themeSettings.mcstyle1_item3_img + '"/>\
			                        </a>',
          contentLeft: '<li class="navPage-subMenu-item-child navPage-subMenu-item-custom">\
	                                 <a class="navPage-subMenu-action navPages-action navPages-action-custom" href="' + context.themeSettings.mcstyle1_item_custom_link1 + '"><span class="text"><span>' + context.themeSettings.mcstyle1_item_custom_linktext1 + '</span></span></a>\
		                            </li>\
		                            <li class="navPage-subMenu-item-child navPage-subMenu-item-custom">\
		                                <a class="navPage-subMenu-action navPages-action navPages-action-custom" href="' + context.themeSettings.mcstyle1_item_custom_link2 + '"><span class="text"><span>' + context.themeSettings.mcstyle1_item_custom_linktext2 + '</span></span></a>\
		                            </li>\
		                            <li class="navPage-subMenu-item-child navPage-subMenu-item-custom">\
		                                <a class="navPage-subMenu-action navPages-action navPages-action-custom" href="' + context.themeSettings.mcstyle1_item_custom_link3 + '"><span class="text"><span>' + context.themeSettings.mcstyle1_item_custom_linktext3 + '</span></span></a>\
		                            </li>\
		                            <li class="navPage-subMenu-item-child navPage-subMenu-item-custom">\
		                                <a class="navPage-subMenu-action navPages-action navPages-action-custom" href="' + context.themeSettings.mcstyle1_item_custom_link4 + '"><span class="text"><span>' + context.themeSettings.mcstyle1_item_custom_linktext4 + '</span></span></a>\
		                            </li>\
		                            <li class="navPage-subMenu-item-child navPage-subMenu-item-custom">\
		                                <a class="navPage-subMenu-action navPages-action navPages-action-custom" href="' + context.themeSettings.mcstyle1_item_custom_link5 + '"><span class="text"><span>' + context.themeSettings.mcstyle1_item_custom_linktext5 + '</span></span></a>\
		                            </li>\
		                            <li class="navPage-subMenu-item-child navPage-subMenu-item-custom">\
		                                <a class="navPage-subMenu-action navPages-action navPages-action-custom navPages-action--sale" href="' + context.themeSettings.mcstyle1_item_custom_link6 + '"><span class="text"><span>' + context.themeSettings.mcstyle1_item_custom_linktext6 + '</span></span></a>\
		                            </li>',
          contentRight: '<h3 class="megamenu-title">' + context.themeSettings.mcstyle2_item_subMenuBlock + '</h3>\
                    			   	<div class="megamenu-subMenu">\
                    			   		<ul class="navPage-subMenu-links navPage-subMenu-list">\
				                    		<li class="navPage-subMenu-item-child navPage-subMenu-item-custom">\
				                                <a class="navPage-subMenu-action navPages-action navPages-action-custom" href="' + context.themeSettings.mcstyle1_item_custom_link7 + '">\
				                                	<img class="lazyload" src="' + urlImgLoad + '" data-src="' + urlStoreHash + context.themeSettings.mcstyle1_item_custom_img1 + '" alt="' + context.themeSettings.mcstyle1_item_custom_linktext7 + '" title="' + context.themeSettings.mcstyle1_item_custom_linktext7 + '"/>\
				                                	<span class="text"><span>\
				                                		' + context.themeSettings.mcstyle1_item_custom_linktext7 + '\
				                                	</span></span>\
				                                </a>\
				                            </li>\
				                            <li class="navPage-subMenu-item-child navPage-subMenu-item-custom">\
				                                <a class="navPage-subMenu-action navPages-action navPages-action-custom" href="' + context.themeSettings.mcstyle1_item_custom_link8 + '">\
				                                	<img class="lazyload" src="' + urlImgLoad + '" data-src="' + urlStoreHash + context.themeSettings.mcstyle1_item_custom_img2 + '" alt="' + context.themeSettings.mcstyle1_item_custom_linktext8 + '" title="' + context.themeSettings.mcstyle1_item_custom_linktext8 + '"/>\
				                                	<span class="text"><span>\
				                                		' + context.themeSettings.mcstyle1_item_custom_linktext8 + '\
				                                	</span></span>\
				                                </a>\
				                            </li>\
				                            <li class="navPage-subMenu-item-child navPage-subMenu-item-custom">\
				                                <a class="navPage-subMenu-action navPages-action navPages-action-custom" href="' + context.themeSettings.mcstyle1_item_custom_link9 + '">\
				                                	<img class="lazyload" src="' + urlImgLoad + '" data-src="' + urlStoreHash + context.themeSettings.mcstyle1_item_custom_img3 + '" alt="' + context.themeSettings.mcstyle1_item_custom_linktext9 + '" title="' + context.themeSettings.mcstyle1_item_custom_linktext9 + '"/>\
				                                	<span class="text"><span>\
				                                		' + context.themeSettings.mcstyle1_item_custom_linktext9 + '\
				                                	</span></span>\
				                                </a>\
				                            </li>\
				                            <li class="navPage-subMenu-item-child navPage-subMenu-item-custom">\
				                                <a class="navPage-subMenu-action navPages-action navPages-action-custom" href="' + context.themeSettings.mcstyle1_item_custom_link10 + '">\
				                                	<img class="lazyload" src="' + urlImgLoad + '" data-src="' + urlStoreHash + context.themeSettings.mcstyle1_item_custom_img4 + '" alt="' + context.themeSettings.mcstyle1_item_custom_linktext10 + '" title="' + context.themeSettings.mcstyle1_item_custom_linktext10 + '"/>\
				                                	<span class="text"><span>\
				                                		' + context.themeSettings.mcstyle1_item_custom_linktext10 + '\
				                                	</span></span>\
				                                </a>\
				                            </li>\
				                            <li class="navPage-subMenu-item-child navPage-subMenu-item-custom">\
				                                <a class="navPage-subMenu-action navPages-action navPages-action-custom" href="' + context.themeSettings.mcstyle1_item_custom_link11 + '">\
				                                	<img class="lazyload" src="' + urlImgLoad + '" data-src="' + urlStoreHash + context.themeSettings.mcstyle1_item_custom_img5 + '" alt="' + context.themeSettings.mcstyle1_item_custom_linktext11 + '" title="' + context.themeSettings.mcstyle1_item_custom_linktext11 + '"/>\
				                                	<span class="text"><span>\
				                                		' + context.themeSettings.mcstyle1_item_custom_linktext11 + '\
				                                	</span></span>\
				                                </a>\
				                            </li>\
			                            </ul>\
	                        		</div>'
        });
      } else if (mcstyle2_item == numberItem) {
        haloMegaMenu.menuItem(mcstyle2_item).setMegaMenu({
          style: 'style 2',
          imageAreaWidth: context.themeSettings.mcstyle2_item_img_width,
          cateAreaWidth: context.themeSettings.mcstyle2_item_col_width,
          cateColumns: context.themeSettings.mcstyle2_item_col,
          contentLeft: '<ul class="navPage-subMenu-links navPage-subMenu-list">\
	                            <li class="navPage-subMenu-item-child">\
	                                <a class="navPage-subMenu-action navPages-action navPages-action-custom" href="' + context.themeSettings.mcstyle2_item_custom_link1 + '"><span class="text"><span>' + context.themeSettings.mcstyle2_item_custom_linktext1 + '</span></span></a>\
	                            </li>\
	                            <li class="navPage-subMenu-item-child">\
	                                <a class="navPage-subMenu-action navPages-action navPages-action-custom" href="' + context.themeSettings.mcstyle2_item_custom_link2 + '"><span class="text"><span>' + context.themeSettings.mcstyle2_item_custom_linktext2 + '</span></span></a>\
	                            </li>\
	                            <li class="navPage-subMenu-item-child">\
	                                <a class="navPage-subMenu-action navPages-action navPages-action-custom" href="' + context.themeSettings.mcstyle2_item_custom_link3 + '"><span class="text"><span>' + context.themeSettings.mcstyle2_item_custom_linktext3 + '</span></span></a>\
	                            </li>\
	                            <li class="navPage-subMenu-item-child">\
	                                <a class="navPage-subMenu-action navPages-action navPages-action-custom" href="' + context.themeSettings.mcstyle2_item_custom_link4 + '"><span class="text"><span>' + context.themeSettings.mcstyle2_item_custom_linktext4 + '</span></span></a>\
	                            </li>\
	                            <li class="navPage-subMenu-item-child">\
	                                <a class="navPage-subMenu-action navPages-action navPages-action-custom" href="' + context.themeSettings.mcstyle2_item_custom_link5 + '"><span class="text"><span>' + context.themeSettings.mcstyle2_item_custom_linktext5 + '</span></span></a>\
	                            </li>\
	                            <li class="navPage-subMenu-item-child">\
	                                <a class="navPage-subMenu-action navPages-action navPages-action-custom navPages-action--sale" href="' + context.themeSettings.mcstyle2_item_custom_link6 + '"><span class="text"><span>' + context.themeSettings.mcstyle2_item_custom_linktext6 + '</span></span></a>\
	                            </li>\
	                        </ul>',
          contentRight: '<div class="item"><a class="image" href="' + context.themeSettings.mcstyle2_item_link3 + '">\
	                            <img class="lazyload" src="' + urlImgLoad + '" data-src="' + urlStoreHash + context.themeSettings.mcstyle2_item_img3 + '" alt="' + context.themeSettings.mcstyle2_item_img1 + '" title="' + context.themeSettings.mcstyle2_item_img1 + '"/>\
	                        </a></div>',
          products: '<h3 class="megamenu-title">' + context.themeSettings.mcstyle2_item_productBlock + '</h3>\
	                        <div class="megamenu-brands">\
	                            <ul>\
	                                <li data-brand-letter="a"><a href="/brands#a"><span>a</span></a></li>\
	                                <li data-brand-letter="b"><a href="/brands#b"><span>b</span></a></li>\
	                                <li data-brand-letter="c"><a href="/brands#c"><span>c</span></a></li>\
	                                <li data-brand-letter="d"><a href="/brands#d"><span>d</span></a></li>\
	                                <li data-brand-letter="e"><a href="/brands#e"><span>e</span></a></li>\
	                                <li data-brand-letter="f"><a href="/brands#f"><span>f</span></a></li>\
	                                <li data-brand-letter="g"><a href="/brands#g"><span>g</span></a></li>\
	                                <li data-brand-letter="h"><a href="/brands#h"><span>h</span></a></li>\
	                                <li data-brand-letter="i"><a href="/brands#i"><span>i</span></a></li>\
	                                <li data-brand-letter="j"><a href="/brands#j"><span>j</span></a></li>\
	                                <li data-brand-letter="k"><a href="/brands#k"><span>k</span></a></li>\
	                                <li data-brand-letter="l"><a href="/brands#l"><span>l</span></a></li>\
	                                <li data-brand-letter="m"><a href="/brands#m"><span>m</span></a></li>\
	                                <li data-brand-letter="n"><a href="/brands#n"><span>n</span></a></li>\
	                                <li data-brand-letter="o"><a href="/brands#o"><span>o</span></a></li>\
	                                <li data-brand-letter="p"><a href="/brands#p"><span>p</span></a></li>\
	                                <li data-brand-letter="q"><a href="/brands#q"><span>q</span></a></li>\
	                                <li data-brand-letter="r"><a href="/brands#r"><span>r</span></a></li>\
	                                <li data-brand-letter="s"><a href="/brands#s"><span>s</span></a></li>\
	                                <li data-brand-letter="t"><a href="/brands#t"><span>t</span></a></li>\
	                                <li data-brand-letter="u"><a href="/brands#u"><span>u</span></a></li>\
	                                <li data-brand-letter="v"><a href="/brands#v"><span>v</span></a></li>\
	                                <li data-brand-letter="w"><a href="/brands#w"><span>w</span></a></li>\
	                                <li data-brand-letter="x"><a href="/brands#x"><span>x</span></a></li>\
	                                <li data-brand-letter="y"><a href="/brands#y"><span>y</span></a></li>\
	                                <li data-brand-letter="z"><a href="/brands#z"><span>z</span></a></li>\
	                                <li data-brand-letter="0"><a href="/brands#0"><span>1-9</span></a></li>\
	                            </ul>\
	                            <a class="view-all" href="/brands">' + context.themeSettings.mcstyle2_item_productBlock_btnAll + '</a>\
	                        </div>',
          images: '<div class="item"><a class="image" href="' + context.themeSettings.mcstyle2_item_link1 + '">\
	                            <img class="lazyload" src="' + urlImgLoad + '" data-src="' + urlStoreHash + context.themeSettings.mcstyle2_item_img1 + '" alt="' + context.themeSettings.mcstyle2_item_img1 + '" title="' + context.themeSettings.mcstyle2_item_img1 + '"/>\
	                        </a></div>\
	                        <div class="item"><a class="image" href="' + context.themeSettings.mcstyle2_item_link2 + '">\
	                            <img class="lazyload" src="' + urlImgLoad + '" data-src="' + urlStoreHash + context.themeSettings.mcstyle2_item_img2 + '" alt="' + context.themeSettings.mcstyle2_item_img2 + '" title="' + context.themeSettings.mcstyle2_item_img2 + '"/>\
	                        </a></div>'
        });
      } else if (mcstyle3_item == numberItem) {
        haloMegaMenu.menuItem(mcstyle3_item).setMegaMenu({
          style: 'style 3',
          imageAreaWidth: context.themeSettings.mcstyle3_item_img_width,
          cateAreaWidth: context.themeSettings.mcstyle3_item_col_width,
          cateColumns: context.themeSettings.mcstyle3_item_col,
          content: '<ul class="navPage-subMenu-links navPage-subMenu-list">\
	                            <li class="navPage-subMenu-item-child">\
	                                <a class="navPage-subMenu-action navPages-action navPages-action-custom" href="' + context.themeSettings.mcstyle3_item_custom_link1 + '"><span class="text"><span>' + context.themeSettings.mcstyle3_item_custom_linktext1 + '</span></span></a>\
	                            </li>\
	                            <li class="navPage-subMenu-item-child">\
	                                <a class="navPage-subMenu-action navPages-action navPages-action-custom" href="' + context.themeSettings.mcstyle3_item_custom_link2 + '"><span class="text"><span>' + context.themeSettings.mcstyle3_item_custom_linktext2 + '</span></span></a>\
	                            </li>\
	                            <li class="navPage-subMenu-item-child">\
	                                <a class="navPage-subMenu-action navPages-action navPages-action-custom" href="' + context.themeSettings.mcstyle3_item_custom_link3 + '"><span class="text"><span>' + context.themeSettings.mcstyle3_item_custom_linktext3 + '</span></span></a>\
	                            </li>\
	                            <li class="navPage-subMenu-item-child">\
	                                <a class="navPage-subMenu-action navPages-action navPages-action-custom" href="' + context.themeSettings.mcstyle3_item_custom_link4 + '"><span class="text"><span>' + context.themeSettings.mcstyle3_item_custom_linktext4 + '</span></span></a>\
	                            </li>\
	                            <li class="navPage-subMenu-item-child">\
	                                <a class="navPage-subMenu-action navPages-action navPages-action-custom" href="' + context.themeSettings.mcstyle3_item_custom_link5 + '"><span class="text"><span>' + context.themeSettings.mcstyle3_item_custom_linktext5 + '</span></span></a>\
	                            </li>\
	                            <li class="navPage-subMenu-item-child">\
	                                <a class="navPage-subMenu-action navPages-action navPages-action-custom navPages-action--sale" href="' + context.themeSettings.mcstyle3_item_custom_link6 + '"><span class="text"><span>' + context.themeSettings.mcstyle3_item_custom_linktext6 + '</span></span></a>\
	                            </li>\
	                        </ul>',
          images: '<a class="image" href="' + context.themeSettings.mcstyle3_item_link1 + '">\
	                            <img class="lazyload" src="' + urlImgLoad + '" data-src="' + urlStoreHash + context.themeSettings.mcstyle3_item_img1 + '" alt="' + context.themeSettings.mcstyle3_item_img1 + '" title="' + context.themeSettings.mcstyle3_item_img1 + '"/>\
	                        </a>\
	                        <a class="image" href="' + context.themeSettings.mcstyle3_item_link2 + '">\
	                            <img class="lazyload" src="' + urlImgLoad + '" data-src="' + urlStoreHash + context.themeSettings.mcstyle3_item_img2 + '" alt="' + context.themeSettings.mcstyle3_item_img2 + '" title="' + context.themeSettings.mcstyle3_item_img2 + '"/>\
	                        </a>',
          bottomCates: '<div class="megamenu-custom-list"><div class="megamenu-bottom"><span class="text"><span>' + context.themeSettings.mcstyle3_item_bottomCates + '</span></span></div></div>'
        });
      } else {
        return;
      }
    };
    var MegaMenuLabel = function MegaMenuLabel() {
      if (context.themeSettings.mega_menu_custom_new_label && context.themeSettings.mega_menu_custom_new_label_text) {
        haloMegaMenu.menuItem(context.themeSettings.mega_menu_custom_new_label).setMegaMenu({
          label: context.themeSettings.mega_menu_custom_new_label_text,
          labelType: "new",
          disabled: true
        });
      }
      if (context.themeSettings.mega_menu_custom_hot_label && context.themeSettings.mega_menu_custom_hot_label_text) {
        haloMegaMenu.menuItem(context.themeSettings.mega_menu_custom_hot_label).setMegaMenu({
          label: context.themeSettings.mega_menu_custom_hot_label_text,
          labelType: "hot",
          disabled: true
        });
      }
      if (context.themeSettings.mega_menu_custom_sale_label && context.themeSettings.mega_menu_custom_sale_label_text) {
        haloMegaMenu.menuItem(context.themeSettings.mega_menu_custom_sale_label).setMegaMenu({
          label: context.themeSettings.mega_menu_custom_sale_label_text,
          labelType: "sale",
          disabled: true
        });
      }
    };
    var haloMegaMenu = new window.haloMegaMenu();
    var urlImgLoad = $('.halo-global-block').data('image-load');
    var urlStoreHash = $('.halo-global-block').data('store-hash-image');
    var mcstyle1_item = parseInt(context.themeSettings.mcstyle1_item),
      mcstyle2_item = parseInt(context.themeSettings.mcstyle2_item),
      mcstyle3_item = parseInt(context.themeSettings.mcstyle3_item);
    MegaMenuLabel();
    var setItemMegaMenu = SetItemMegaMenu();
    window.onload = setItemMegaMenu;
  }
}

/***/ }),

/***/ "./assets/js/theme/halothemes/haloNewsletterPopup.js":
/*!***********************************************************!*\
  !*** ./assets/js/theme/halothemes/haloNewsletterPopup.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(context) {
  function setCookie(cname, cvalue, exdays) {
    var d = new Date();
    d.setTime(d.getTime() + exdays * 24 * 60 * 60 * 1000);
    var expires = 'expires=' + d.toUTCString();
    document.cookie = cname + '=' + cvalue + ';' + expires + ';path=/';
  }
  function getCookie(cname) {
    var name = cname + '=';
    var ca = document.cookie.split(';');
    for (var i = 0; i < ca.length; i++) {
      var c = ca[i];
      while (c.charAt(0) === ' ') {
        c = c.substring(1);
      }
      if (c.indexOf(name) === 0) {
        return c.substring(name.length, c.length);
      }
    }
    return '';
  }
  function setClosePopup(expiresDate) {
    setCookie('haloNewsletterPopup', 'closed', expiresDate);
    $('#halo-newsletter-popup').removeClass('fadeIn').addClass('animated fadeOut');
    setTimeout(function () {
      $('#halo-newsletter-popup').addClass('hide');
      $('body').removeClass('has-newsletter');
    }, 500);
  }
  function setOpenPopup() {
    document.body.classList.add('has-newsletter');
    $('#halo-newsletter-popup').removeClass('hide').addClass('animated fadeIn');
  }
  var deleteCookie = function deleteCookie(name) {
    document.cookie = name + '=;expires=Thu, 01 Jan 1970 00:00:01 GMT;';
  };
  if (context.themeSettings.halo_newsletter_popup == true) {
    var timeToShow = parseInt(context.themeSettings.halo_newsletter_popup_time) * 1000,
      expiresDate = parseInt(context.themeSettings.halo_newsletter_popup_expires_date);
    $(document).on('click', '[data-open-newsletter-popup]', function (event) {
      event.preventDefault();
      setOpenPopup();
    });
    $(document).on('click', '[data-close-newsletter-popup]', function (event) {
      setClosePopup(expiresDate);
    });
    $(document).on('click', '#halo-newsletter-popup', function (event) {
      if ($(event.target).closest('.newsletter-popup-inner').length === 0) {
        setClosePopup(expiresDate);
      }
    });
    $(document).on('change', '#halo-newsletter-popup #do-not-show-again', function (event) {
      if ($("#halo-newsletter-popup #do-not-show-again:checked").length) {
        setClosePopup(expiresDate);
      }
    });
    $(document).keyup(function (event) {
      if (event.keyCode === 27) {
        setClosePopup(expiresDate);
      }
    });
    if (getCookie('haloNewsletterPopup') === '') {
      setTimeout(function () {
        $('#halo-newsletter-popup').removeClass('hide').addClass('animated fadeIn');
        $('body').addClass('has-newsletter');
      }, timeToShow);
      $('#popupSubcribeFormSubmit').submit(function (event) {
        if ($('#popupSubcribeFormSubmit').find('#nl_email2').val() === '') {
          return false;
        } else {
          setCookie('haloNewsletterPopup', 'closed', expiresDate);
          $('#halo-newsletter-popup').removeClass('fadeIn').addClass('animated fadeOut');
          setTimeout(function () {
            $('#halo-newsletter-popup').addClass('hide');
            $('body').removeClass('has-newsletter');
            return true;
          }, 500);
        }
      });
    }
  } else {
    deleteCookie('haloNewsletterPopup');
  }
}

/***/ }),

/***/ "./assets/js/theme/halothemes/haloNotifyMe.js":
/*!****************************************************!*\
  !*** ./assets/js/theme/halothemes/haloNotifyMe.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _common_nod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/nod */ "./assets/js/theme/common/nod.js");
/* harmony import */ var _common_models_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/models/forms */ "./assets/js/theme/common/models/forms.js");
/* harmony import */ var _common_utils_form_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/utils/form-utils */ "./assets/js/theme/common/utils/form-utils.js");
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");



/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__($scope, context) {
  var $notify = $scope.find('.productView-notifyMe'),
    $notifyForm = $scope.find('.productView-notifyMe-form'),
    $notifyBtn = $notifyForm.find('.button'),
    $notifyCheck = $notifyForm.find('input[type="checkbox"]'),
    $notifyText = $scope.find('.productView-notifyMe-text');
  registerNotifyMeValidation($notifyForm);
  function registerNotifyMeValidation($notifyForm) {
    var notifyModel = _common_models_forms__WEBPACK_IMPORTED_MODULE_1__["default"];
    var notifyValidator = (0,_common_nod__WEBPACK_IMPORTED_MODULE_0__["default"])({
      submit: $notifyForm.find('.button')
    });
    notifyValidator.add([{
      selector: $notifyForm.find('input[name="email"]'),
      validate: function validate(cb, val) {
        var result = notifyModel.email(val);
        cb(result);
      },
      errorMessage: 'Please use a valid email address, such as john@example.com.'
    }]);
    $notifyBtn.on('click', function (event) {
      notifyValidator.performCheck();
      if (notifyValidator.areAll('valid')) {
        sendMail($notifyForm);
      }
    });
  }
  function sendMail($notifyForm) {
    var email = $notifyForm.find('input[name="email"]').val(),
      site = '',
      logo = '',
      subjectMail = context.themeSettings.halo_notify_me_subject,
      mailTo = context.themeSettings.halo_notify_me_mailto,
      productName = $notify.data('product-title'),
      productUrl = $notify.data('product-url'),
      productVariant = $notify.attr('data-product-variant');
    if ($(".header-logo").find("img").length > 0) {
      site = $(".header-logo").find("img").attr("title");
      logo = $(".header-logo").html() + '<br><br>';
    } else {
      site = $(".header-logo").text();
    }
    var content = '<div style="margin:30px auto;width:650px;border:10px solid #f7f7f7"><div style="border:1px solid #dedede">\
                    <h2 style="margin: 0; padding:20px 20px 20px;background:#f7f7f7;color:#555;font-size:2em;text-align:center;">' + logo + subjectMail + '</h2>';
    if (productVariant !== undefined && productVariant !== null && productVariant !== '') {
      content += '<table style="margin:0px 0 0;padding:30px 30px 30px;line-height:1.7em">\
                      <tr><td style="padding: 5px 25px 5px 0;"><strong>Product Name:</strong> ' + productName + '</td></tr>\
                      <tr><td style="padding: 5px 25px 5px 0;"><strong>Product URL:</strong> ' + productUrl + '</td></tr>\
                      <tr><td style="padding: 5px 25px 5px 0;"><strong>Product Variants:</strong> ' + productVariant + '</td></tr>\
                      <tr><td style="padding: 5px 25px 5px 0;"><strong>Email Request:</strong> ' + email + '</td></tr>\
                   </table>';
    } else {
      content += '<table style="margin:0px 0 0;padding:30px 30px 30px;line-height:1.7em">\
                      <tr><td style="padding: 5px 25px 5px 0;"><strong>Product Name:</strong> ' + productName + '</td></tr>\
                      <tr><td style="padding: 5px 25px 5px 0;"><strong>Product URL:</strong> ' + productUrl + '</td></tr>\
                      <tr><td style="padding: 5px 25px 5px 0;"><strong>Email Request:</strong> ' + email + '</td></tr>\
                   </table>';
    }
    content += '<a href="' + window.location.hostname + '" style="display:block;padding:30px 0;background:#484848;color:#fff;text-decoration:none;text-align:center">&nbsp;' + site + '&nbsp;</a>';
    content += '</div></div>';
    var notify_post_data = {
      'api': 'i_send_mail',
      'subject': subjectMail,
      'email': mailTo,
      'from_name': 'BigCommerce',
      'email_from': email,
      'message': content
    };
    var output = '';
    $.post('https://themevale.net/tools/sendmail/quotecart/sendmail.php', notify_post_data, function (response) {
      if (response.type == 'error') {
        output = '<div class="alertBox alertBox--error"><p class="alertBox-column alertBox-message">' + response.text + '</p></div>';
      } else {
        output = '<div class="alertBox alertBox--success"><p class="alertBox-column alertBox-message">Thank you. We\'ve received your request and will respond shortly.</p></div>';
        resetForm($notifyForm);
      }
      $notifyText.html(output).show();
    }, 'json');
  }
  function resetForm($notifyForm) {
    $('.form-field', $notifyForm).removeClass('form-field--success form-field--error');
    $('.form-inlineMessage', $notifyForm).hide().html('');
    $('input[type=email]', $notifyForm).val('');
  }
}

/***/ }),

/***/ "./assets/js/theme/halothemes/haloQuickEditCart.js":
/*!*********************************************************!*\
  !*** ./assets/js/theme/halothemes/haloQuickEditCart.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var lodash_isObject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/isObject */ "./node_modules/lodash/isObject.js");
/* harmony import */ var lodash_isObject__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_isObject__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var lodash_isNumber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/isNumber */ "./node_modules/lodash/isNumber.js");
/* harmony import */ var lodash_isNumber__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_isNumber__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/isPlainObject */ "./node_modules/lodash/isPlainObject.js");
/* harmony import */ var lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @bigcommerce/stencil-utils */ "./node_modules/@bigcommerce/stencil-utils/src/main.js");
/* harmony import */ var _global_modal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../global/modal */ "./assets/js/theme/global/modal.js");
/* harmony import */ var _global_sweet_alert__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../global/sweet-alert */ "./assets/js/theme/global/sweet-alert.js");
/* harmony import */ var _cart_shipping_estimator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../cart/shipping-estimator */ "./assets/js/theme/cart/shipping-estimator.js");
/* harmony import */ var _common_gift_certificate_validator__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../common/gift-certificate-validator */ "./assets/js/theme/common/gift-certificate-validator.js");
/* harmony import */ var _haloCalculateFreeShipping__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./haloCalculateFreeShipping */ "./assets/js/theme/halothemes/haloCalculateFreeShipping.js");
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");



function _createForOfIteratorHelperLoose(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (t) return (t = t.call(r)).next.bind(t); if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var o = 0; return function () { return o >= r.length ? { done: !0 } : { done: !1, value: r[o++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }






/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(context) {
  var $cartContent = $('[data-cart-content]'),
    $cartMessages = $('[data-cart-status]'),
    $cartTotals = $('[data-cart-totals]'),
    $overlay = $('[data-cart] .loadingOverlay');
  if (context.themeSettings.halo_QuickEditCart == true) {
    var _addToCart = function addToCart(form, i, arrP, cartId) {
      if (window.FormData === undefined) {
        return;
      }
      var k = arrP[i];
      _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_3__["default"].api.cart.itemAdd(filterEmptyFilesFromForm(new FormData(form[k])), function (err, response) {
        var errorMessage = err || response.data.error;
        if (errorMessage) {
          var tmp = document.createElement('DIV');
          tmp.innerHTML = errorMessage;
          return (0,_global_modal__WEBPACK_IMPORTED_MODULE_4__.showAlertModal)(tmp.textContent || tmp.innerText);
        }
        i++;
        if (i >= arrP.length) {
          var modal = (0,_global_modal__WEBPACK_IMPORTED_MODULE_4__.defaultModal)();
          modal.close();
          updateCartContent();
          return;
        }
        _addToCart(form, i, arrP);
      });
    };
    var listenQuantityChangeUpdate = function listenQuantityChangeUpdate($target, preVal) {
      if (preVal === void 0) {
        preVal = null;
      }
      var itemId = $target.data('cart-itemid');
      var $el = $target;
      var $form = $target.parents('.product-edit-item').find('.form');
      var maxQty = parseInt($el.data('quantityMax'), 10);
      var minQty = parseInt($el.data('quantityMin'), 10);
      var oldQty = preVal !== null ? preVal : minQty;
      var minError = $el.data('quantityMinError');
      var maxError = $el.data('quantityMaxError');
      var newQty = parseInt(Number($el.val()), 10);
      var stock = $el.data('stock');
      var invalidEntry;
      if (!newQty) {
        invalidEntry = $el.val();
        $el.val(oldQty);
        return _global_sweet_alert__WEBPACK_IMPORTED_MODULE_5__["default"].fire({
          text: invalidEntry + " is not a valid entry",
          icon: 'error'
        });
      } else if (newQty < minQty) {
        $el.val(oldQty);
        return _global_sweet_alert__WEBPACK_IMPORTED_MODULE_5__["default"].fire({
          text: minError,
          icon: 'error'
        });
      } else if (maxQty > 0 && newQty > maxQty) {
        $el.val(oldQty);
        return _global_sweet_alert__WEBPACK_IMPORTED_MODULE_5__["default"].fire({
          text: maxError,
          icon: 'error'
        });
      } else if (newQty > stock) {
        $el.val(oldQty);
        return _global_sweet_alert__WEBPACK_IMPORTED_MODULE_5__["default"].fire({
          text: 'We don\'t have enough stock on hand for the quantity you selected. Please try again.',
          icon: 'error'
        });
      } else {
        $form.find('[name=qty\\[\\]]').attr('value', newQty);
      }
    };
    var filterEmptyFilesFromForm = function filterEmptyFilesFromForm(formData) {
      try {
        for (var _iterator = _createForOfIteratorHelperLoose(formData), _step; !(_step = _iterator()).done;) {
          var _step$value = _step.value,
            key = _step$value[0],
            val = _step$value[1];
          if (val instanceof File && !val.name && !val.size) {
            formData["delete"](key);
          }
        }
      } catch (e) {
        console.error(e);
      }
      return formData;
    };
    var checkProduct = function checkProduct(form, arrPro) {
      var check = true;
      for (var i = 0, len = arrPro.length; i < len; i++) {
        var k = arrPro[i],
          $form = $(form[k]);
        if ($form.find('[data-product-attribute]').length > 0) {
          check = checkBeforeAdd($form);
          if (check == false) {
            return false;
          }
        }
      }
      return check;
    };
    var checkBeforeAdd = function checkBeforeAdd($attributes) {
      var check = true,
        att = "";
      $attributes.find('input:text, input:password, input:file, textarea').each(function (index, element) {
        if (!$(element).prop('required')) {} else {
          if ($(element).val()) {} else {
            $(element).focus();
            check = false;
          }
        }
      });
      $attributes.find('select').each(function (index, element) {
        if (!$(element).prop('required')) {} else {
          if ($(element).val()) {} else {
            $(element).focus();
            check = false;
          }
        }
      });
      $attributes.find('input:radio, input:checkbox').each(function (index, element) {
        if (att != $(element).attr("name")) {
          att = $(element).attr("name");
          if (!$(element).prop('required')) {
            if ($(element).attr("type") == "checkbox") {
              if ($("[name='" + att + "']:checked").val()) {}
            }
            if ($(element).attr("type") == "radio") {
              if ($("[name='" + att + "']:checked").val()) {}
            }
          } else {
            if ($(element).attr("type") == "checkbox") {
              if ($("[name='" + att + "']:checked").val()) {} else {
                check = false;
              }
            }
            if ($(element).attr("type") == "radio") {
              if ($("[name='" + att + "']:checked").val()) {} else {
                check = false;
              }
            }
          }
        }
      });
      return check;
    };
    var updateProductClonedAttributes = function updateProductClonedAttributes($scope, number) {
      $('label[data-product-attribute-value]', $scope).each(function (index, attribute) {
        var $formLabel = $(attribute),
          $formInput = $formLabel.prev(),
          id = $formLabel.attr('for'),
          newId = id + number;
        $formLabel.attr('for', newId);
        $formInput.attr('id', newId);
      });
      $('label[data-product-attribute-value2]', $scope).each(function (index, attribute) {
        var $formLabel = $(attribute),
          $formInput = $formLabel.next(),
          id = $formLabel.attr('for'),
          newId = id + number;
        $formLabel.attr('for', newId);
        $formInput.attr('id', newId);
      });
      $('input.form-checkbox', $scope).each(function (index, attribute) {
        var $formInput = $(attribute),
          $formLabel = $formInput.next(),
          id = $formLabel.attr('for'),
          newId = id + number;
        $formLabel.attr('for', newId);
        $formInput.attr('id', newId);
      });
      $('select.form-select', $scope).each(function (index, attribute) {
        var $formSelect = $(attribute),
          $formLabel = $formSelect.prev(),
          id = $formLabel.attr('for'),
          newId = id + number;
        $formLabel.attr('for', newId);
        $formSelect.attr('id', newId);
      });
    };
    var setProductVariant = function setProductVariant(item, form) {
      var unsatisfiedRequiredFields = [];
      var options = [];
      $.each($('[data-product-attribute]', form), function (index, value) {
        var optionLabel = value.children[0].innerText;
        var optionTitle = optionLabel.split(':')[0].trim();
        var required = optionLabel.toLowerCase().includes('required');
        var type = value.getAttribute('data-product-attribute');
        if ((type === 'input-file' || type === 'input-text' || type === 'input-number') && value.querySelector('input').value === '' && required) {
          unsatisfiedRequiredFields.push(value);
        }
        if (type === 'textarea' && value.querySelector('textarea').value === '' && required) {
          unsatisfiedRequiredFields.push(value);
        }
        if (type === 'date') {
          var isSatisfied = Array.from(value.querySelectorAll('select')).every(function (select) {
            return select.selectedIndex !== 0;
          });
          if (isSatisfied) {
            var dateString = Array.from(value.querySelectorAll('select')).map(function (x) {
              return x.value;
            }).join('-');
            options.push(optionTitle + ":" + dateString);
            return;
          }
          if (required) {
            unsatisfiedRequiredFields.push(value);
          }
        }
        if (type === 'set-select') {
          var select = value.querySelector('select');
          var selectedIndex = select.selectedIndex;
          if (selectedIndex !== 0) {
            options.push(optionTitle + ":" + select.options[selectedIndex].innerText);
            $(value.children[0]).find('[data-option-value]').text(select.options[selectedIndex].innerText);
            return;
          }
          if (required) {
            unsatisfiedRequiredFields.push(value);
          }
        }
        if (type === 'set-rectangle' || type === 'set-radio' || type === 'swatch' || type === 'input-checkbox' || type === 'product-list') {
          var checked = value.querySelector(':checked');
          if (checked) {
            if (type === 'set-rectangle' || type === 'set-radio' || type === 'product-list') {
              var label = checked.labels[0].innerText;
              if (label) {
                options.push(optionTitle + ":" + label);
                $(value.children[0]).find('[data-option-value]').text(label);
              }
            }
            if (type === 'swatch') {
              var _label = checked.labels[0].children[0];
              if (_label) {
                options.push(optionTitle + ":" + _label.title);
                $(value.children[0]).find('[data-option-value]').text(_label.title);
              }
            }
            if (type === 'input-checkbox') {
              options.push(optionTitle + ":Yes");
            }
            return;
          }
          if (type === 'input-checkbox') {
            options.push(optionTitle + ":No");
          }
          if (required) {
            unsatisfiedRequiredFields.push(value);
          }
        }
      });
      var productVariant = unsatisfiedRequiredFields.length === 0 ? options.sort() : 'unsatisfied';
      if (productVariant) {
        item.find('.product-edit-variant').empty();
        $.each(productVariant, function (index, value) {
          item.find('.product-edit-variant').append('<span>' + productVariant[index].toString().split(':').pop() + '</span>');
        });
      }
    };
    var getViewModel = function getViewModel($scope) {
      return {
        $priceWithTax: $('[data-product-price-with-tax]', $scope),
        $priceWithoutTax: $('[data-product-price-without-tax]', $scope),
        rrpWithTax: {
          $div: $('.rrp-price--withTax', $scope),
          $span: $('[data-product-rrp-with-tax]', $scope)
        },
        rrpWithoutTax: {
          $div: $('.rrp-price--withoutTax', $scope),
          $span: $('[data-product-rrp-price-without-tax]', $scope)
        },
        nonSaleWithTax: {
          $div: $('.non-sale-price--withTax', $scope),
          $span: $('[data-product-non-sale-price-with-tax]', $scope)
        },
        nonSaleWithoutTax: {
          $div: $('.non-sale-price--withoutTax', $scope),
          $span: $('[data-product-non-sale-price-without-tax]', $scope)
        },
        priceSaved: {
          $div: $('.price-section--saving', $scope),
          $span: $('[data-product-price-saved]', $scope)
        },
        priceNowLabel: {
          $span: $('.price-now-label', $scope)
        },
        priceLabel: {
          $span: $('.price-label', $scope)
        },
        $stockLeft: $('[data-stock-left]', $scope),
        $stockLeftWrapper: $('.product-edit-optionsStock', $scope),
        $quantity: {
          $input: $('.product-edit-increment [name=qty\\[\\]]', $scope),
          $dec: $('.product-edit-increment [data-action="dec"]', $scope),
          $inc: $('.product-edit-increment [data-action="inc"]', $scope)
        },
        $image: $('.product-edit-image', $scope)
      };
    };
    var updateProductAttributes = function updateProductAttributes($scope, data) {
      var behavior = data.out_of_stock_behavior;
      var inStockIds = data.in_stock_attributes;
      var outOfStockMessage = " (" + data.out_of_stock_message + ")";
      if (behavior !== 'hide_option' && behavior !== 'label_option') {
        return;
      }
      $('[data-product-attribute-value]', $scope).each(function (i, attribute) {
        var $attribute = $(attribute);
        var attrId = parseInt($attribute.data('productAttributeValue'), 10);
        if (inStockIds.indexOf(attrId) !== -1) {
          enableAttribute($attribute, behavior, outOfStockMessage);
        } else {
          disableAttribute($attribute, behavior, outOfStockMessage);
        }
      });
    };
    var showProductImage = function showProductImage($scope, data) {
      var viewModel = getViewModel($scope);
      if (lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_2___default()(data.image)) {
        var mainImageUrl = _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_3__["default"].tools.imageSrcset.getSrcset(data.image.data, {
          '1x': context.themeSettings.productthumb_size
        });
        var mainImageSrcset = _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_3__["default"].tools.imageSrcset.getSrcset(data.image.data);
        viewModel.$image.find('img').attr({
          'srcset': mainImageUrl,
          'data-srcset': mainImageSrcset
        });
      }
    };
    var updateDefaultAttributesForOOS = function updateDefaultAttributesForOOS($scope, data) {
      var viewModel = getViewModel($scope);
      if (!data.purchasable || !data.instock) {
        $scope.removeClass('is-visible').addClass('is-hidden');
        viewModel.$quantity.$input.prop('disabled', true);
        viewModel.$quantity.$dec.prop('disabled', true);
        viewModel.$quantity.$inc.prop('disabled', true);
      } else {
        $scope.removeClass('is-hidden').addClass('is-visible');
        viewModel.$quantity.$input.prop('disabled', false);
        viewModel.$quantity.$dec.prop('disabled', false);
        viewModel.$quantity.$inc.prop('disabled', false);
      }
    };
    var showMessageBox = function showMessageBox($scope, message) {
      var $messageBox = $('.product-edit-message', $scope);
      if (message) {
        $('.alertBox-message', $messageBox).text(message);
        $messageBox.show();
      } else {
        $messageBox.hide();
      }
    };
    var clearPricingNotFound = function clearPricingNotFound(viewModel) {
      viewModel.rrpWithTax.$div.hide();
      viewModel.rrpWithoutTax.$div.hide();
      viewModel.nonSaleWithTax.$div.hide();
      viewModel.nonSaleWithoutTax.$div.hide();
      viewModel.priceSaved.$div.hide();
      viewModel.priceNowLabel.$span.hide();
      viewModel.priceLabel.$span.hide();
    };
    var updatePriceView = function updatePriceView(viewModel, price) {
      clearPricingNotFound(viewModel);
      if (price.with_tax) {
        viewModel.priceLabel.$span.show();
        viewModel.$priceWithTax.html(price.with_tax.formatted);
      }
      if (price.without_tax) {
        viewModel.priceLabel.$span.show();
        viewModel.$priceWithoutTax.html(price.without_tax.formatted);
      }
      if (price.rrp_with_tax) {
        viewModel.rrpWithTax.$div.show();
        viewModel.rrpWithTax.$span.html(price.rrp_with_tax.formatted);
      }
      if (price.rrp_without_tax) {
        viewModel.rrpWithoutTax.$div.show();
        viewModel.rrpWithoutTax.$span.html(price.rrp_without_tax.formatted);
      }
      if (price.saved) {
        viewModel.priceSaved.$div.show();
        viewModel.priceSaved.$span.html(price.saved.formatted);
      }
      if (price.non_sale_price_with_tax) {
        viewModel.priceLabel.$span.hide();
        viewModel.nonSaleWithTax.$div.show();
        viewModel.priceNowLabel.$span.show();
        viewModel.nonSaleWithTax.$span.html(price.non_sale_price_with_tax.formatted);
      }
      if (price.non_sale_price_without_tax) {
        viewModel.priceLabel.$span.hide();
        viewModel.nonSaleWithoutTax.$div.show();
        viewModel.priceNowLabel.$span.show();
        viewModel.nonSaleWithoutTax.$span.html(price.non_sale_price_without_tax.formatted);
      }
    };
    var updateView = function updateView($scope, data, content) {
      if (content === void 0) {
        content = null;
      }
      var viewModel = getViewModel($scope);
      if (lodash_isNumber__WEBPACK_IMPORTED_MODULE_1___default()(data.stock)) {
        if (data.stock <= parseInt(context.themeSettings.halo_stock_level_limit) && data.stock > 0) {
          viewModel.$stockLeftWrapper.removeClass('u-hiddenVisually');
          viewModel.$stockLeft.text(data.stock);
        } else {
          viewModel.$stockLeftWrapper.addClass('u-hiddenVisually');
        }
        viewModel.$quantity.$input.attr('data-stock', data.stock);
      } else {
        viewModel.$quantity.$input.removeAttr('data-stock');
      }
      showMessageBox($scope, data.stock_message || data.purchasing_message);
      if (lodash_isObject__WEBPACK_IMPORTED_MODULE_0___default()(data.price)) {
        updatePriceView(viewModel, data.price);
      }
      updateDefaultAttributesForOOS($scope, data);
      showProductImage($scope, data);
    };
    var disableAttribute = function disableAttribute($attribute, behavior, outOfStockMessage) {
      if (getAttributeType($attribute) === 'set-select') {
        return disableSelectOptionAttribute($attribute, behavior, outOfStockMessage);
      }
      if (behavior === 'hide_option') {
        $attribute.hide();
      } else {
        $attribute.addClass('unavailable');
      }
    };
    var disableSelectOptionAttribute = function disableSelectOptionAttribute($attribute, behavior, outOfStockMessage) {
      var $select = $attribute.parent();
      if (behavior === 'hide_option') {
        $attribute.toggleOption(false);
        if ($select.val() === $attribute.attr('value')) {
          $select[0].selectedIndex = 0;
        }
      } else {
        $attribute.attr('disabled', 'disabled');
        $attribute.html($attribute.html().replace(outOfStockMessage, '') + outOfStockMessage);
      }
    };
    var enableAttribute = function enableAttribute($attribute, behavior, outOfStockMessage) {
      if (getAttributeType($attribute) === 'set-select') {
        return enableSelectOptionAttribute($attribute, behavior, outOfStockMessage);
      }
      if (behavior === 'hide_option') {
        $attribute.show();
      } else {
        $attribute.removeClass('unavailable');
      }
    };
    var enableSelectOptionAttribute = function enableSelectOptionAttribute($attribute, behavior, outOfStockMessage) {
      if (behavior === 'hide_option') {
        $attribute.toggleOption(true);
      } else {
        $attribute.prop('disabled', false);
        $attribute.html($attribute.html().replace(outOfStockMessage, ''));
      }
    };
    var getAttributeType = function getAttributeType($attribute) {
      var $parent = $attribute.closest('[data-product-attribute]');
      return $parent ? $parent.data('productAttribute') : null;
    };
    var updateCartContent = function updateCartContent() {
      if (!$('body').hasClass('page-type-cart')) {
        var loadingClass = 'is-loading';
        var $cartDropdown = $('#halo-cart-sidebar .halo-sidebar-wrapper');
        var $cartLoading = $('<div class="loadingOverlay"></div>');
        var $body = $('body');
        var options = {
          template: 'common/cart-preview'
        };
        $cartDropdown.addClass(loadingClass).prepend($cartLoading);
        $cartLoading.show();
        _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_3__["default"].api.cart.getContent(options, function (err, response) {
          $cartDropdown.removeClass(loadingClass).html(response);
          $cartLoading.hide();
          var quantity = $(response).find('[data-cart-quantity]').data('cartQuantity') || $('[data-cart-quantity]').data('cartQuantity') || 0;
          $body.trigger('cart-quantity-update', quantity);
          (0,_haloCalculateFreeShipping__WEBPACK_IMPORTED_MODULE_8__["default"])(context);
        });
      } else {
        refreshContent();
        (0,_haloCalculateFreeShipping__WEBPACK_IMPORTED_MODULE_8__["default"])(context);
      }
    };
    var refreshContent = function refreshContent(remove) {
      var $cartItemsRows = $('[data-item-row]', $cartContent);
      var $cartPageTitle = $('[data-cart-page-title]');
      var options = {
        template: {
          content: 'cart/content',
          totals: 'cart/totals',
          pageTitle: 'cart/page-title',
          statusMessages: 'cart/status-messages'
        }
      };
      $overlay.show();

      // Remove last item from cart? Reload
      if (remove && $cartItemsRows.length === 1) {
        return window.location.reload();
      }
      _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_3__["default"].api.cart.getContent(options, function (err, response) {
        $cartContent.html(response.content);
        $cartTotals.html(response.totals);
        $cartMessages.html(response.statusMessages);
        $cartPageTitle.replaceWith(response.pageTitle);
        bindEvents();
        $overlay.hide();
        var quantity = $('[data-cart-quantity]', $cartContent).data('cartQuantity') || 0;
        $('body').trigger('cart-quantity-update', quantity);
      });
    };
    var cartUpdate = function cartUpdate($target) {
      var itemId = $target.data('cartItemid');
      var $el = $("#qty-" + itemId);
      var oldQty = parseInt($el.val(), 10);
      var maxQty = parseInt($el.data('quantityMax'), 10);
      var minQty = parseInt($el.data('quantityMin'), 10);
      var minError = $el.data('quantityMinError');
      var maxError = $el.data('quantityMaxError');
      var newQty = $target.data('action') === 'inc' ? oldQty + 1 : oldQty - 1;
      // Does not quality for min/max quantity
      if (newQty < minQty) {
        return _global_sweet_alert__WEBPACK_IMPORTED_MODULE_5__["default"].fire({
          text: minError,
          icon: 'error'
        });
      } else if (maxQty > 0 && newQty > maxQty) {
        return _global_sweet_alert__WEBPACK_IMPORTED_MODULE_5__["default"].fire({
          text: maxError,
          icon: 'error'
        });
      }
      $overlay.show();
      _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_3__["default"].api.cart.itemUpdate(itemId, newQty, function (err, response) {
        $overlay.hide();
        if (response.data.status === 'succeed') {
          // if the quantity is changed "1" from "0", we have to remove the row.
          var remove = newQty === 0;
          refreshContent(remove);
        } else {
          $el.val(oldQty);
          _global_sweet_alert__WEBPACK_IMPORTED_MODULE_5__["default"].fire({
            text: response.data.errors.join('\n'),
            icon: 'error'
          });
        }
      });
    };
    var cartUpdateQtyTextChange = function cartUpdateQtyTextChange($target, preVal) {
      if (preVal === void 0) {
        preVal = null;
      }
      var itemId = $target.data('cartItemid');
      var $el = $("#qty-" + itemId);
      var maxQty = parseInt($el.data('quantityMax'), 10);
      var minQty = parseInt($el.data('quantityMin'), 10);
      var oldQty = preVal !== null ? preVal : minQty;
      var minError = $el.data('quantityMinError');
      var maxError = $el.data('quantityMaxError');
      var newQty = parseInt(Number($el.val()), 10);
      var invalidEntry;

      // Does not quality for min/max quantity
      if (!newQty) {
        invalidEntry = $el.val();
        $el.val(oldQty);
        return _global_sweet_alert__WEBPACK_IMPORTED_MODULE_5__["default"].fire({
          text: invalidEntry + " is not a valid entry",
          icon: 'error'
        });
      } else if (newQty < minQty) {
        $el.val(oldQty);
        return _global_sweet_alert__WEBPACK_IMPORTED_MODULE_5__["default"].fire({
          text: minError,
          icon: 'error'
        });
      } else if (maxQty > 0 && newQty > maxQty) {
        $el.val(oldQty);
        return _global_sweet_alert__WEBPACK_IMPORTED_MODULE_5__["default"].fire({
          text: maxError,
          icon: 'error'
        });
      }
      $overlay.show();
      _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_3__["default"].api.cart.itemUpdate(itemId, newQty, function (err, response) {
        $overlay.hide();
        if (response.data.status === 'succeed') {
          // if the quantity is changed "1" from "0", we have to remove the row.
          var remove = newQty === 0;
          refreshContent(remove);
        } else {
          $el.val(oldQty);
          _global_sweet_alert__WEBPACK_IMPORTED_MODULE_5__["default"].fire({
            text: response.data.errors.join('\n'),
            icon: 'error'
          });
        }
      });
    };
    var cartRemoveItem = function cartRemoveItem(itemId) {
      $overlay.show();
      _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_3__["default"].api.cart.itemRemove(itemId, function (err, response) {
        if (response.data.status === 'succeed') {
          refreshContent(true);
        } else {
          _global_sweet_alert__WEBPACK_IMPORTED_MODULE_5__["default"].fire({
            text: response.data.errors.join('\n'),
            icon: 'error'
          });
        }
      });
    };
    var bindCartEvents = function bindCartEvents() {
      // const debounceTimeout = 400;
      // const cartUpdate = _.bind(_.debounce(this.cartUpdate, debounceTimeout), this);
      // const cartUpdateQtyTextChange = _.bind(_.debounce(this.cartUpdateQtyTextChange, debounceTimeout), this);
      // const cartRemoveItem = _.bind(_.debounce(this.cartRemoveItem, debounceTimeout), this);
      var preVal;
      $('[data-cart-update]', $cartContent).on('click', function (event) {
        var $target = $(event.currentTarget);
        event.preventDefault();
        cartUpdate($target);
      });
      $('[data-cart-update]', $cartContent).on('click', function (event) {
        var $target = $(event.currentTarget);
        event.preventDefault();
        cartUpdate($target);
      });
      $('.cart-item-qty-input', $cartContent).on('focus', function (event) {
        preVal = $(event.currentTarget).val();
      }).change(function (event) {
        var $target = $(event.currentTarget);
        event.preventDefault();
        cartUpdateQtyTextChange($target, preVal);
      });
      $('.cart-remove', $cartContent).on('click', function (event) {
        var itemId = $(event.currentTarget).data('cartItemid');
        var string = $(event.currentTarget).data('confirmDelete');
        _global_sweet_alert__WEBPACK_IMPORTED_MODULE_5__["default"].fire({
          text: string,
          icon: 'warning',
          showCancelButton: true
        }).then(function (result) {
          if (result.value) {
            cartRemoveItem(itemId);
          }
        });
        event.preventDefault();
      });
    };
    var bindPromoCodeEvents = function bindPromoCodeEvents() {
      var $couponContainer = $('.coupon-code');
      var $couponForm = $('.coupon-form');
      var $codeInput = $('[name="couponcode"]', $couponForm);
      $('.coupon-code-add').on('click', function (event) {
        event.preventDefault();
        $(event.currentTarget).hide();
        $couponContainer.show();
        $('.coupon-code-cancel').show();
        $codeInput.trigger('focus');
      });
      $('.coupon-code-cancel').on('click', function (event) {
        event.preventDefault();
        $couponContainer.hide();
        $('.coupon-code-cancel').hide();
        $('.coupon-code-add').show();
      });
      $couponForm.on('submit', function (event) {
        var code = $codeInput.val();
        event.preventDefault();
        if (!code) {
          return (0,_global_sweet_alert__WEBPACK_IMPORTED_MODULE_5__["default"])({
            text: $codeInput.data('error'),
            type: 'error'
          });
        }
        _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_3__["default"].api.cart.applyCode(code, function (err, response) {
          if (response.data.status === 'success') {
            refreshContent();
          } else {
            (0,_global_sweet_alert__WEBPACK_IMPORTED_MODULE_5__["default"])({
              text: response.data.errors.join('\n'),
              type: 'error'
            });
          }
        });
      });
    };
    var bindGiftCertificateEvents = function bindGiftCertificateEvents() {
      var $certContainer = $('.gift-certificate-code');
      var $certForm = $('.cart-gift-certificate-form');
      var $certInput = $('[name="certcode"]', $certForm);
      $('.gift-certificate-add').on('click', function (event) {
        event.preventDefault();
        $(event.currentTarget).toggle();
        $certContainer.toggle();
        $('.gift-certificate-cancel').toggle();
      });
      $('.gift-certificate-cancel').on('click', function (event) {
        event.preventDefault();
        $certContainer.toggle();
        $('.gift-certificate-add').toggle();
        $('.gift-certificate-cancel').toggle();
      });
      $certForm.on('submit', function (event) {
        var code = $certInput.val();
        event.preventDefault();
        if (!(0,_common_gift_certificate_validator__WEBPACK_IMPORTED_MODULE_7__["default"])(code)) {
          return (0,_global_sweet_alert__WEBPACK_IMPORTED_MODULE_5__["default"])({
            text: $certInput.data('error'),
            type: 'error'
          });
        }
        _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_3__["default"].api.cart.applyGiftCertificate(code, function (err, resp) {
          if (resp.data.status === 'success') {
            refreshContent();
          } else {
            (0,_global_sweet_alert__WEBPACK_IMPORTED_MODULE_5__["default"])({
              text: resp.data.errors.join('\n'),
              type: 'error'
            });
          }
        });
      });
    };
    var bindGiftWrappingEvents = function bindGiftWrappingEvents() {
      var modal = (0,_global_modal__WEBPACK_IMPORTED_MODULE_4__.defaultModal)();
      $('[data-item-giftwrap]').on('click', function (event) {
        var itemId = $(event.currentTarget).data('itemGiftwrap');
        var options = {
          template: 'cart/modals/gift-wrapping-form'
        };
        event.preventDefault();
        modal.open();
        _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_3__["default"].api.cart.getItemGiftWrappingOptions(itemId, options, function (err, response) {
          modal.updateContent(response.content);
          bindGiftWrappingForm();
        });
      });
    };
    var bindGiftWrappingForm = function bindGiftWrappingForm() {
      $('.giftWrapping-select').on('change', function (event) {
        var $select = $(event.currentTarget);
        var id = $select.val();
        var index = $select.data('index');
        if (!id) {
          return;
        }
        var allowMessage = $select.find("option[value=" + id + "]").data('allowMessage');
        $(".giftWrapping-image-" + index).hide();
        $("#giftWrapping-image-" + index + "-" + id).show();
        if (allowMessage) {
          $("#giftWrapping-message-" + index).show();
        } else {
          $("#giftWrapping-message-" + index).hide();
        }
      });
      $('.giftWrapping-select').trigger('change');
      function toggleViews() {
        var value = $('input:radio[name ="giftwraptype"]:checked').val();
        var $singleForm = $('.giftWrapping-single');
        var $multiForm = $('.giftWrapping-multiple');
        if (value === 'same') {
          $singleForm.show();
          $multiForm.hide();
        } else {
          $singleForm.hide();
          $multiForm.show();
        }
      }
      $('[name="giftwraptype"]').on('click', toggleViews);
      toggleViews();
    };
    var bindEvents = function bindEvents() {
      bindCartEvents();
      bindPromoCodeEvents();
      bindGiftWrappingEvents();
      bindGiftCertificateEvents();

      // initiate shipping estimator module
      var shippingErrorMessages = {
        country: context.shippingCountryErrorMessage,
        province: context.shippingProvinceErrorMessage
      };
      var shippingEstimator = new _cart_shipping_estimator__WEBPACK_IMPORTED_MODULE_6__["default"]($('[data-shipping-estimator]'), shippingErrorMessages);
    };
    $(document).on('click', '[data-cart-edit-id]', function (event) {
      event.preventDefault();
      var $target = $(event.currentTarget),
        productId = $target.data('cart-edit-id'),
        itemId = $target.data('cartItemid'),
        $qty = $target.data('cart-edit-quantity');
      var modal = (0,_global_modal__WEBPACK_IMPORTED_MODULE_4__.defaultModal)(),
        options = {
          template: 'cart/modals/configure-product-2'
        },
        options2 = {
          template: 'cart/modals/configure-product-3'
        };
      modal.$modal.removeClass().addClass('modal modal--editOptions');
      modal.open({
        size: 'medium'
      });
      modal.$modal.find('> .modal-close').remove();
      _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_3__["default"].api.productAttributes.configureInCart(itemId, options2, function (err2, response2) {
        _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_3__["default"].api.product.getById(productId, options, function (err, response) {
          modal.updateContent(response);
          var $firstItem = modal.$content.find('.product-edit-itemFirst'),
            $form = $firstItem.find('.form'),
            $formQty = $firstItem.find('.product-edit-increment');
          $firstItem.attr('data-product-edit-item-id', itemId);
          $form.find('.product-edit-option').prepend(response2.content);
          $form.find('[name=qty\\[\\]]').attr('value', $qty);
          $formQty.find('.form-input').attr({
            'cart-itemid': itemId,
            'id': 'editqty-' + itemId,
            'value': $qty
          });
          $formQty.find('.form-label').attr({
            'for': 'editqty-' + itemId
          });
          _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_3__["default"].api.productAttributes.optionChange(productId, $form.serialize(), 'products/bulk-discount-rates', function (err, response) {
            var attributesData = response.data || {};
            var attributesContent = response.content || {};
            updateProductAttributes($firstItem, attributesData);
            updateView($firstItem, attributesData, attributesContent);
          });
          setProductVariant($firstItem, $form);
        });
      });
    });
    $(document).on('change', '[data-product-edit-item-id] .form-input[cart-itemid]', function (event) {
      var $target = $(event.currentTarget);
      var preVal = $target.data('preval');
      event.preventDefault();
      listenQuantityChangeUpdate($target, preVal);
    });
    $(document).on('change', '[data-product-edit-option-change]', function (event) {
      var $changedOption = $(event.target);
      var $item = $changedOption.parents('.product-edit-item');
      var $form = $changedOption.parents('form');
      var productId = $('[name="product_id"]', $form).val();
      _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_3__["default"].api.productAttributes.optionChange(productId, $form.serialize(), 'products/bulk-discount-rates', function (err, response) {
        var attributesData = response.data || {};
        var attributesContent = response.content || {};
        updateProductAttributes($item, attributesData);
        updateView($item, attributesData, attributesContent);
      });
      setProductVariant($item, $form);
    });
    $(document).on('click', '[data-edit-cart-add-more]', function (event) {
      event.preventDefault();
      var count = parseInt($('.modal--editOptions [data-count]').attr('data-count')),
        product = $('.modal--editOptions .product-edit-itemFirst').clone().removeClass('product-edit-itemFirst');
      product.appendTo('.modal--editOptions .product-edit-wrapper');
      updateProductClonedAttributes(product, count);
      count = count + 1;
      $('.modal--editOptions [data-count]').attr('data-count', count);
    });
    $(document).on('click', '[data-edit-cart-remove]', function (event) {
      event.preventDefault();
      var product = $(event.currentTarget).parents('.product-edit-item');
      if (product.hasClass('product-edit-itemFirst')) {
        var itemId = product.data('product-edit-item-id');
        _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_3__["default"].api.cart.itemRemove(itemId, function (err, response) {
          if (response.data.status === 'succeed') {
            var modal = (0,_global_modal__WEBPACK_IMPORTED_MODULE_4__.defaultModal)();
            modal.close();
            updateCartContent();
          } else {
            _global_sweet_alert__WEBPACK_IMPORTED_MODULE_5__["default"].fire({
              text: response.data.errors.join('\n'),
              icon: 'error'
            });
          }
        });
      } else {
        product.remove();
      }
    });
    $(document).on('click', '[data-edit-cart-add-to-cart]', function (event) {
      var $product = $('.modal--editOptions .product-edit-item.is-visible'),
        $form = $product.find('.form'),
        itemId = $('.modal--editOptions .product-edit-itemFirst.is-visible').data('product-edit-item-id'),
        arrPro = new Array(),
        check = false;
      $product.each(function (index, element) {
        arrPro.push(index);
      });
      if (arrPro.length > 0) {
        check = checkProduct($form, arrPro);
      }
      if (check) {
        if (arrPro.length > 0 && typeof itemId !== 'undefined') {
          _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_3__["default"].api.cart.itemRemove(itemId, function (err, response) {
            if (response.data.status === 'succeed') {
              $('[data-edit-cart-add-to-cart]').addClass('loading');
              _addToCart($form, 0, arrPro);
            } else {
              _global_sweet_alert__WEBPACK_IMPORTED_MODULE_5__["default"].fire({
                text: response.data.errors.join('\n'),
                icon: 'error'
              });
              updateCartContent();
            }
          });
        }
      } else {
        var errorMessage = 'Please make sure all options have been filled in.';
        if (errorMessage) {
          var tmp = document.createElement('DIV');
          tmp.innerHTML = errorMessage;
          return (0,_global_modal__WEBPACK_IMPORTED_MODULE_4__.showAlertModal)(tmp.textContent || tmp.innerText);
        }
      }
      event.preventDefault();
    });
    $(document).on('click', '[data-cart-edit-item-quantity] button', function (event) {
      event.preventDefault();
      var $target = $(event.currentTarget);
      var itemId = $target.data('cart-itemid');
      var $el = $target.siblings('.form-input--incrementTotal');
      var $form = $target.parents('.product-edit-item').find('.form');
      var maxQty = parseInt($el.data('quantityMax'), 10);
      var minQty = parseInt($el.data('quantityMin'), 10);
      var oldQty = parseInt($el.val(), 10);
      var minError = $el.data('quantityMinError');
      var maxError = $el.data('quantityMaxError');
      var newQty = $target.data('action') === 'inc' ? oldQty + 1 : oldQty - 1;
      var stock = $el.data('stock');
      var proTitle = $('.product-edit-title').html();
      var invalidEntry;

      // Does not quality for min/max quantity
      if (!newQty) {
        invalidEntry = newQty;
        $el.val(oldQty);
        return _global_sweet_alert__WEBPACK_IMPORTED_MODULE_5__["default"].fire({
          text: invalidEntry + " is not a valid entry",
          icon: 'error'
        });
      } else if (newQty < minQty) {
        $el.val(oldQty);
        return _global_sweet_alert__WEBPACK_IMPORTED_MODULE_5__["default"].fire({
          text: minError,
          icon: 'error'
        });
      } else if (maxQty > 0 && newQty > maxQty) {
        $el.val(oldQty);
        return _global_sweet_alert__WEBPACK_IMPORTED_MODULE_5__["default"].fire({
          text: maxError,
          icon: 'error'
        });
      } else if (newQty > stock) {
        $el.val(oldQty);
        return _global_sweet_alert__WEBPACK_IMPORTED_MODULE_5__["default"].fire({
          text: 'We don\'t have enough stock on hand for the quantity you selected. Please try again.',
          icon: 'error'
        });
      } else {
        $el.val(newQty);
        $form.find('[name=qty\\[\\]]').attr('value', newQty);
      }
    });
  }
}

/***/ }),

/***/ "./assets/js/theme/halothemes/haloRecentlyBoughtPopup.js":
/*!***************************************************************!*\
  !*** ./assets/js/theme/halothemes/haloRecentlyBoughtPopup.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var jquery_cookie__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery.cookie */ "./node_modules/jquery.cookie/jquery.cookie.js");
/* harmony import */ var jquery_cookie__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery_cookie__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @bigcommerce/stencil-utils */ "./node_modules/@bigcommerce/stencil-utils/src/main.js");
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");


var fetch = __webpack_require__(/*! node-fetch */ "./node_modules/node-fetch/browser.js");
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(context) {
  var token = context.token;
  function recentlyBought() {
    var productIDs = context.themeSettings.recently_bought_productID,
      hoursItems = context.themeSettings.recently_bought_hours,
      listHours = JSON.parse("[" + hoursItems + "]"),
      listIDs = JSON.parse("[" + productIDs + "]"),
      text_info = context.themeSettings.recently_bought_text_info,
      text_name = context.themeSettings.recently_bought_text_name,
      changeSlides = 1000 * Number(context.themeSettings.recently_bought_changeSlides);
    var location1 = context.themeSettings.recently_bought_location1,
      location2 = context.themeSettings.recently_bought_location2,
      location3 = context.themeSettings.recently_bought_location3,
      location4 = context.themeSettings.recently_bought_location4,
      location5 = context.themeSettings.recently_bought_location5,
      location6 = context.themeSettings.recently_bought_location6,
      location7 = context.themeSettings.recently_bought_location7,
      location8 = context.themeSettings.recently_bought_location8;
    var ar1 = location1.split(','),
      ar2 = location2.split(','),
      ar3 = location3.split(','),
      ar4 = location4.split(','),
      ar5 = location5.split(','),
      ar6 = location6.split(','),
      ar7 = location7.split(','),
      ar8 = location8.split(',');
    var listIDs_length = listIDs.length;
    if (listIDs_length) {
      getProductAndSiteInfo(listIDs).then(function (data) {
        setInterval(function () {
          var item = Math.floor(Math.random() * listIDs.length);
          var locationList = Array(ar1, ar2, ar3, ar4, ar5, ar6, ar7, ar8),
            locationItem = Math.floor(Math.random() * locationList.length),
            location = locationList[locationItem],
            hour_item = Math.floor(Math.random() * listHours.length),
            hours = listHours[hour_item];
          var $cookieManager = $('#consent-manager');
          var $cookieUpdate = $('#consent-manager-update-banner');
          var cookieHeight = 0;
          if ($cookieManager.length || $cookieUpdate.length) {
            if ($cookieUpdate.length) {
              cookieHeight = $cookieManager.outerHeight() + $cookieUpdate.outerHeight() + 15;
            } else {
              cookieHeight = $cookieManager.outerHeight() + 15;
            }
          }
          if ($.cookie('recently_bought_notification') == 'closed') {
            $('#recently_bought_list').remove();
          }
          $(document).on('click', '.halo-recently-bought [data-close-recently-bought]', function (event) {
            event.preventDefault();
            $('#recently_bought_list').remove();
            $.cookie('recently_bought_notification', 'closed', {
              expires: 1,
              path: '/'
            });
          });
          if ($('#RB_' + listIDs[item]).length) {
            if (cookieHeight > 15) {
              $('#RB_' + listIDs[item]).css('bottom', cookieHeight);
            } else {
              $('#RB_' + listIDs[item]).css('bottom', '');
            }
            $('#RB_' + listIDs[item]).show();
            $('#recently_bought_list').css('animation-name', 'fadeIn');
          } else {
            renderProduct(data.site.products.edges[item], text_name, hours, text_info, location, cookieHeight);
          }
          setTimeout(function () {
            $('#recently_bought_list').css('animation-name', 'fadeOut');
          }, changeSlides - 1000);
          setTimeout(function () {
            $('#RB_' + listIDs[item]).hide();
          }, changeSlides - 520);
        }, changeSlides);
      });
    }
  }
  function getProductAndSiteInfo(arr) {
    return fetch('/graphql', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer ' + token
      },
      body: JSON.stringify({
        query: "\n            query MyQuery {\n                site {\n                    products (entityIds: [" + arr + "]) {\n                      edges {\n                        product: node {\n                          ...ProductFields\n                          }\n                        }\n                    }\n                }\n            }\n            fragment ProductFields on Product {\n                id\n                entityId\n                name\n                path\n                defaultImage {\n                    img320px: url(width: 320)\n                    altText\n                }\n            }\n        "
      })
    }).then(function (res) {
      return res.json();
    }).then(function (res) {
      return res.data;
    });
  }
  function renderProduct(product, text, hours, info, customer, cookieHeight) {
    if (product != undefined) {
      var item = product.product;
      var html = '<div id="RB_' + item.entityId + '" class="halo-recently-bought">\
                <a href="#" data-close-recently-bought aria-label="Button Close"><svg class="icon"><use xlink:href="#icon-close"></svg></a>\
                <div class="recently-bought-inner">\
                    <a class="product-image" href="' + item.path + '"><img class="image" data-sizes="auto" src="' + item.defaultImage.img320px + '" alt="' + item.defaultImage.altText + '" title="' + item.defaultImage.altText + '" aria-label="' + item.defaultImage.altText + '"></a>\
                    <div class="product-info">\
                        <p class="text-wrap"><span class="product-name">' + text + '<a href="' + item.path + '" style="-webkit-box-orient: vertical;">' + item.name + '</a></span></p>\
                         <div class="location-info">' + hours + ' ' + info + ' ' + customer + '</div>\
                    </div>\
                </div>\
            </div>';
      $('#recently_bought_list').append(html);
      if (cookieHeight > 15) {
        $('#RB_' + item.entityId).css('bottom', cookieHeight);
      } else {
        $('#RB_' + item.entityId).css('bottom', '');
      }
      $('#recently_bought_list').css('animation-name', 'fadeIn');
    }
  }
  if ($(window).width() > 1024) {
    if (context.themeSettings.haloRecentlyBought == true) {
      recentlyBought();
    }
  } else {
    if (context.themeSettings.haloRecentlyBought == true && context.themeSettings.haloRecentlyBought_mobile == true) {
      recentlyBought();
    }
  }
}

/***/ }),

/***/ "./assets/js/theme/halothemes/haloRecentlyViewedProduct.js":
/*!*****************************************************************!*\
  !*** ./assets/js/theme/halothemes/haloRecentlyViewedProduct.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _bigcommerce_stencil_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @bigcommerce/stencil-utils */ "./node_modules/@bigcommerce/stencil-utils/src/main.js");
/* harmony import */ var slick_carousel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! slick-carousel */ "./node_modules/slick-carousel/slick/slick.min.js");
/* harmony import */ var slick_carousel__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(slick_carousel__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _global_sweet_alert__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../global/sweet-alert */ "./assets/js/theme/global/sweet-alert.js");
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");
/* provided dependency */ var jQuery = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");



/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(context) {
  var token = context.token;
  var curCode = $('.body').data('currency-code');
  function setCookie(cname, cvalue, exdays) {
    var d = new Date();
    d.setTime(d.getTime() + exdays * 24 * 60 * 60 * 1000);
    var expires = 'expires=' + d.toUTCString();
    document.cookie = cname + '=' + cvalue + ';' + expires + ';path=/';
  }
  function getCookie(cname) {
    var name = cname + '=';
    var ca = document.cookie.split(';');
    for (var i = 0; i < ca.length; i++) {
      var c = ca[i];
      while (c.charAt(0) === ' ') {
        c = c.substring(1);
      }
      if (c.indexOf(name) === 0) {
        return c.substring(name.length, c.length);
      }
    }
    return '';
  }
  var deleteCookie = function deleteCookie(name) {
    document.cookie = name + '=;expires=Thu, 01 Jan 1970 00:00:01 GMT;';
  };
  function getProduct(arr) {
    return fetch('/graphql', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer ' + token
      },
      body: JSON.stringify({
        query: "\n            query MyQuery {\n                site {\n                    products (entityIds: [" + arr + "]) {\n                      edges {\n                        product: node {\n                          ...ProductFields\n                          }\n                        }\n                    }\n                    currency (currencyCode: " + curCode + ") {\n                        display {\n                            symbol\n                            symbolPlacement\n                            decimalToken\n                            thousandsToken\n                            decimalPlaces\n                        }\n                    }\n                }\n            }\n            fragment ProductFields on Product {\n                id\n                entityId\n                name\n                path\n                inventory {\n                \tisInStock\n                \thasVariantInventory\n                }\n                productOptions {\n\t\t            edges {\n\t\t              \tnode {\n\t\t\t                entityId\n\t\t\t                displayName\n\t\t\t                isRequired\n\t\t              \t}\n\t\t            }\n\t\t        }\n                defaultImage {\n                    img70px: url(width: 70)\n                    altText\n                }\n                prices {\n                    priceRange {\n                        min {\n                            ...MoneyFields\n                        }\n                        max {\n                            ...MoneyFields\n                        }\n                    }\n                    retailPrice {\n                        ...MoneyFields\n                    }\n                    basePrice {\n                        ...MoneyFields\n                    }\n                    price {\n                        ...MoneyFields\n                    }\n                }\n            }\n            fragment MoneyFields on Money {\n                value\n                currencyCode\n            }\n        "
      })
    }).then(function (res) {
      return res.json();
    }).then(function (res) {
      return res.data;
    });
  }
  function formatMoney(n, c, d, t) {
    var c = isNaN(c = Math.abs(c)) ? 2 : c,
      d = d == undefined ? "." : d,
      t = t == undefined ? "," : t,
      s = n < 0 ? "-" : "",
      i = String(parseInt(n = Math.abs(Number(n) || 0).toFixed(c))),
      j = (j = i.length) > 3 ? j % 3 : 0;
    return s + (j ? i.substr(0, j) + t : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + t) + (c ? d + Math.abs(n - i).toFixed(c).slice(2) : "");
  }
  var BC_Products = function () {
    var e = {
      howManyToShow: 3,
      howManyToStoreInMemory: 10,
      wrapperId: "recently-viewed-products",
      onComplete: null
    };
    var t = [];
    var n = null;
    var r = null;
    var i = 0;
    var s = {
      configuration: {
        expires: context.themeSettings.halo_recently_viewed_products_expires_date,
        path: "/",
        domain: window.location.hostname
      },
      name: "bigcommerce_recently_viewed",
      write: function write(e) {
        setCookie(this.name, e.join(" "), this.configuration.expires);
      },
      read: function read() {
        var e = [];
        var t = getCookie(this.name);
        if (t !== null && t != undefined) {
          e = t.split(" ");
        }
        return e;
      },
      destroy: function destroy() {
        setCookie(this.name, null, this.configuration.expires);
      },
      remove: function remove(e) {
        var t = this.read();
        var n = $.inArray(e, t);
        if (n !== -1) {
          t.splice(n, 1);
          this.write(t);
        }
      }
    };
    var o = function o() {
      for (var j = 0; j < e.howManyToShow; j++) {
        var productId = t[j];
        jQuery('#recently-viewed-products-list-tmp').find('.item[data-id="product-' + productId + '"]').appendTo(n);
      }
      jQuery('#recently-viewed-products-list-tmp').remove();
      n.show();
      if (e.onComplete) {
        try {
          e.onComplete();
        } catch (t) {}
      }
    };
    var u = function u() {
      var tmp = jQuery('#recently-viewed-products-list-tmp'),
        list = t;
      if (t.length > 0) {
        getProduct(list).then(function (data) {
          renderProduct(data.site.products.edges, data.site.currency.display, tmp);
          o();
        });
      }
    };
    return {
      resizeImage: function resizeImage(e, t) {
        if (t == null) {
          return e;
        }
        if (t == "master") {
          return e.replace(/http(s)?:/, "");
        }
        var n = e.match(/\.(jpg|jpeg|gif|png|bmp|bitmap|tiff|tif)(\?v=\d+)?/i);
        if (n != null && n != undefined) {
          var r = e.split(n[0]);
          var i = n[0];
          return (r[0] + "_" + t + i).replace(/http(s)?:/, "");
        } else {
          return null;
        }
      },
      showRecentlyViewed: function showRecentlyViewed(i) {
        var i = i || {};
        jQuery.extend(e, i);
        t = s.read();
        n = jQuery("#" + e.wrapperId);
        e.howManyToShow = Math.min(t.length, e.howManyToShow);
        if (e.howManyToShow && n.length) {
          u();
        }
      },
      getConfig: function getConfig() {
        return e;
      },
      clearList: function clearList() {
        s.destroy();
      },
      recordRecentlyViewed: function recordRecentlyViewed(t) {
        var t = t || {};
        var product_id = $('.productView').find('form[data-cart-item-add] [name="product_id"]').val();
        jQuery.extend(e, t);
        var n = s.read();
        if (product_id) {
          var r = product_id;
          var i = jQuery.inArray(r, n);
          if (i === -1) {
            n.unshift(r);
            n = n.splice(0, e.howManyToStoreInMemory);
          } else {
            n.splice(i, 1);
            n.unshift(r);
          }
          s.write(n);
        }
      }
    };
  }();
  function renderProduct(product, curDisplay, tmp) {
    if (product != undefined) {
      $.each(product, function (index, element) {
        var item = element.product,
          symbol = curDisplay.symbol,
          symbolPlacement = curDisplay.symbolPlacement.toLowerCase(),
          decimalToken = curDisplay.decimalToken,
          decimalPlaces = curDisplay.decimalPlaces,
          thousandsToken = curDisplay.thousandsToken;
        var title, price, btnAct;
        if ($('.body').hasClass('is-login') || context.themeSettings.restrict_to_login !== true) {
          if (item.prices.priceRange.min.value < item.prices.priceRange.max.value && context.themeSettings.price_ranges) {
            var priceMin = (symbolPlacement == "left" ? symbol : "") + formatMoney(item.prices.priceRange.min.value, decimalPlaces, decimalToken, thousandsToken) + (symbolPlacement != "left" ? symbol : "");
            var priceMax = (symbolPlacement == "left" ? symbol : "") + formatMoney(item.prices.priceRange.max.value, decimalPlaces, decimalToken, thousandsToken) + (symbolPlacement != "left" ? symbol : "");
            price = '<div class="price-section price-section--withoutTax non-sale-price--withoutTax price-none" style="display: none;">\
                                    <span data-product-non-sale-price-without-tax="" class="price price--non-sale"></span>\
                                </div>\
                                <div class="price-section price-section--withoutTax">\
                                    <span data-product-price-without-tax="" class="price price--withoutTax">' + priceMin + ' - ' + priceMax + '</span>\
                                </div>';
          } else {
            var priceDef = (symbolPlacement == "left" ? symbol : "") + formatMoney(item.prices.price.value, decimalPlaces, decimalToken, thousandsToken) + (symbolPlacement != "left" ? symbol : "");
            if (item.prices.retailPrice == null) {
              if (item.prices.basePrice.value > item.prices.price.value) {
                var priceBas = (symbolPlacement == "left" ? symbol : "") + formatMoney(item.prices.basePrice.value, decimalPlaces, decimalToken, thousandsToken) + (symbolPlacement != "left" ? symbol : "");
                price = '<div class="price-section price-section--withoutTax non-sale-price--withoutTax">\
                                            <span data-product-non-sale-price-without-tax="" class="price price--non-sale">' + priceBas + '</span>\
                                        </div>\
                                        <div class="price-section price-section--withoutTax">\
                                            <span data-product-price-without-tax="" class="price price--withoutTax">' + priceDef + '</span>\
                                        </div>';
              } else {
                price = '<div class="price-section price-section--withoutTax non-sale-price--withoutTax price-none" style="display: none;">\
                                            <span data-product-non-sale-price-without-tax="" class="price price--non-sale"></span>\
                                        </div>\
                                        <div class="price-section price-section--withoutTax">\
                                            <span data-product-price-without-tax="" class="price price--withoutTax">' + priceDef + '</span>\
                                        </div>';
              }
            } else {
              if (item.prices.retailPrice.value > item.prices.price.value) {
                var priceRet = (symbolPlacement == "left" ? symbol : "") + formatMoney(item.prices.retailPrice.value, decimalPlaces, decimalToken, thousandsToken) + (symbolPlacement != "left" ? symbol : "");
                price = '<div class="price-section price-section--withoutTax non-sale-price--withoutTax">\
                                            <span data-product-non-sale-price-without-tax="" class="price price--non-sale">' + priceRet + '</span>\
                                        </div>\
                                        <div class="price-section price-section--withoutTax">\
                                            <span data-product-price-without-tax="" class="price price--withoutTax">' + priceDef + '</span>\
                                        </div>';
              } else {
                price = '<div class="price-section price-section--withoutTax non-sale-price--withoutTax price-none" style="display: none;">\
                                            <span data-product-non-sale-price-without-tax="" class="price price--non-sale"></span>\
                                        </div>\
                                        <div class="price-section price-section--withoutTax">\
                                            <span data-product-price-without-tax="" class="price price--withoutTax">' + priceDef + '</span>\
                                        </div>';
              }
            }
          }
        } else {
          price = '<p translate>Log in for pricing</p>';
        }
        if (item.inventory.isInStock == false) {
          btnAct = '<a href="' + item.path + '" class="card_out_of_stock" disabled data-product-id="' + item.entityId + '">Out Of Stock</a>';
        } else if (item.productOptions.edges.length > 0) {
          btnAct = '<a href="' + item.path + '" class="card-figcaption-link" data-product-id="' + item.entityId + '">Choose Options</a>';
        } else {
          if ($('.recently-viewed-products-sidebar').data('tag-enabled') == false) {
            btnAct = '<a href="/cart.php?action=add&product_id=' + item.entityId + '" class="card-figcaption-link" data-product-id="' + item.entityId + '">Add to Cart</a>';
          } else {
            btnAct = '<a href="/cart.php?action=add&product_id=' + item.entityId + '" class="card-figcaption-link" data-product-id="' + item.entityId + '">Add to Cart</a>';
          }
        }
        var html_card = '<div class="item" data-target="img-1" data-id="product-' + item.entityId + '">\
							  		<a href="' + item.path + '" class="recent_item_url">\
							    		<img src="' + item.defaultImage.img70px + '" alt="' + item.defaultImage.altText + '" title="' + item.defaultImage.altText + '" />\
							  		</a>\
								  	<div class="second-info">\
								    	<div class="first product-item" data-product-id="product-' + item.entityId + '">\
								      		<h4 class="card-title">\
										        <a href="' + item.path + '">' + item.name + '</a>\
										    </h4>\
								      		<div class="card-price" data-test-info-type="price">' + price + '</div>\
								      		' + btnAct + '\
								    	</div>\
							    		<a class="text-no-underline second" href="' + item.path + '">\
							    			<img src="' + item.defaultImage.img70px + '" alt="' + item.defaultImage.altText + '" title="' + item.defaultImage.altText + '" />\
							    		</a>\
							  		</div>\
								</div>';
        tmp.append(html_card);
      });
    }
  }
  $(document).ready(function () {
    var view = true;
    BC_Products.recordRecentlyViewed();
    var cookieValue = getCookie("bigcommerce_recently_viewed");
    if (!(cookieValue !== null && cookieValue !== undefined && cookieValue !== "")) {
      $('.recently-viewed-products-sidebar').find(".no-products").show();
      $('#recently-viewed-products-list').css("padding", "0");
    } else {
      BC_Products.showRecentlyViewed({
        howManyToShow: context.themeSettings.halo_recently_viewed_products_count,
        howManyToStoreInMemory: context.themeSettings.halo_recently_viewed_products_count,
        wrapperId: 'recently-viewed-products-list',
        onComplete: function onComplete() {
          //start
          var recentlyViewBlock = $('.recently-viewed-products-sidebar');
          var recentlyGrid = recentlyViewBlock.find('.products-grid');
          var productGrid = recentlyGrid.find('.item');
          recentlyGrid.find(".no-products").remove();
          if (productGrid.length) {
            if (recentlyViewBlock.is(':visible')) {
              if (!recentlyGrid.hasClass('slick-initialized')) {
                var wWidth = window.innerWidth;
                var productGrid_length = productGrid.length;
                var slidesToShow = 1;
                if (wWidth >= 1200) {
                  slidesToShow = 3;
                  if (productGrid_length < 3) {
                    slidesToShow = productGrid_length;
                  }
                } else if (wWidth < 1200 && wWidth > 767) {
                  slidesToShow = 2;
                  if (productGrid_length < 2) {
                    slidesToShow = productGrid_length;
                  }
                }
                recentlyGrid.slick({
                  infinite: false,
                  dots: false,
                  arrows: true,
                  vertical: true,
                  mobileFirst: true,
                  slidesToScroll: slidesToShow,
                  slidesToShow: slidesToShow
                });
                recentlyGrid.prepend('<div class="product-info"></div>');
              }
              ;
            }
            ;
          }
          //end
        }
      });
    }

    /* */
    $(document).on('click', '.expand-recently-viewed', function () {
      if ($('.lst-seen-widget').hasClass('is-show-widget')) {
        $('.expand-recently-viewed').removeClass('is-open');
        $('.lst-seen-widget').removeClass('is-show-widget');
      } else {
        $('.expand-recently-viewed').addClass('is-open');
        $('.lst-seen-widget').addClass('is-show-widget');
      }
      if ($('.lst-social-media').hasClass('is-show-media')) {
        $('.expand-social-media').removeClass('is-open');
        $('.lst-social-media').removeClass('is-show-media');
      }
    });
    $(document).on('click', '.expand-social-media', function () {
      if ($('.lst-social-media').hasClass('is-show-media')) {
        $('.expand-social-media').removeClass('is-open');
        $('.lst-social-media').removeClass('is-show-media');
      } else {
        $('.expand-social-media').addClass('is-open');
        $('.lst-social-media').addClass('is-show-media');
      }
      if ($('.lst-seen-widget').hasClass('is-show-widget')) {
        $('.expand-recently-viewed').removeClass('is-open');
        $('.lst-seen-widget').removeClass('is-show-widget');
      }
    });
    $(document).on('click', 'a.recent_item_url', function (e) {
      if (window.innerWidth < 768) {
        e.preventDefault();
      }
    });
    $('.recently-viewed-products-sidebar .products-grid').on('mouseenter', '.slick-slide', function (e) {
      e.preventDefault();
      var margin_top;
      var $currTarget = $(e.currentTarget),
        index = $currTarget.index('.recently-viewed-products-sidebar .products-grid .slick-active');
      var $this_arrow = $('.recently-viewed-products-sidebar .products-grid .slick-arrow');
      var $this_arrowNext = $('.recently-viewed-products-sidebar .products-grid .slick-next');
      var slickAtive_length = $('.recently-viewed-products-sidebar .products-grid .slick-active').length;
      if ($this_arrow.length) {
        margin_top = index * $('.lst-seen-widget .in-content .products-grid .item').outerHeight() - 3;
      } else {
        margin_top = index * $('.lst-seen-widget .in-content .products-grid .item').outerHeight() - 16;
      }
      $(".recently-viewed-products-sidebar .product-info").html($(this).find(".second-info").html()).css("margin-top", margin_top).show();
      if (index + 1 == slickAtive_length) {
        $this_arrowNext.css('opacity', 0);
      } else {
        $this_arrowNext.css('opacity', '');
      }
    });
    $('.recently-viewed-products-sidebar .products-grid').on('mouseleave', function (e) {
      $('.recently-viewed-products-sidebar .products-grid .slick-next').css('opacity', '');
    });
    $('.recently-viewed-products-sidebar .products-grid').on('mouseenter', '.slick-arrow', function (e) {
      $(".recently-viewed-products-sidebar .product-info").hide();
      $('.recently-viewed-products-sidebar .products-grid .slick-next').css('opacity', '');
    });
    $(document).on('touchstart', function (ev) {
      if ($(ev.target).closest('.recently-viewed-products-sidebar .product-info, .recently-viewed-products-sidebar .products-grid .slick-slide').length === 0) {
        $('.recently-viewed-products-sidebar .products-grid .slick-next').css('opacity', '');
      }
    });
    var backToTop = $('.recently-viewed-products-sidebar .backtoTop');
    if ($(this).scrollTop() > 220) {
      $('.recently-viewed-products-sidebar').addClass("slided-up");
    } else {
      $('.recently-viewed-products-sidebar').removeClass("slided-up");
    }
    ;
    $(window).scroll(function () {
      if ($(this).scrollTop() > 220) {
        $('.recently-viewed-products-sidebar').addClass("slided-up");
      } else {
        $('.recently-viewed-products-sidebar').removeClass("slided-up");
      }
      ;
    });
    backToTop.on('click.scrollTop', function (e) {
      e.preventDefault();
      e.stopPropagation();
      $('html, body').animate({
        scrollTop: 0
      }, 400);
      return false;
    });
  });
}

/***/ }),

/***/ "./assets/js/theme/halothemes/haloYoutubeVideo.js":
/*!********************************************************!*\
  !*** ./assets/js/theme/halothemes/haloYoutubeVideo.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ youtubeCarouselFactory)
/* harmony export */ });
/* harmony import */ var lodash_uniqueId__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/uniqueId */ "./node_modules/lodash/uniqueId.js");
/* harmony import */ var lodash_uniqueId__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_uniqueId__WEBPACK_IMPORTED_MODULE_0__);
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");

function youtubeCarouselFactory($scope) {
  if ($scope.find('[data-youtube]').length > 0) {
    if (typeof window.onYouTubeIframeAPIReady === 'undefined') {
      window.onYouTubeIframeAPIReady = initCarousel.bind(window, $scope);
      var tag = document.createElement('script');
      tag.src = 'https://www.youtube.com/player_api';
      var firstScriptTag = document.getElementsByTagName('script')[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
    } else {
      initCarousel($scope);
    }
  }
}
function haloYoutubeSlick(slick) {
  if (window.innerWidth >= 992) {
    var $slick = $(slick).find('.productView-nav:not(.productView-nav-mobile)');
  } else {
    var $slick = $(slick).find('.productView-nav-mobile');
  }
  var $videos = $slick.find('[data-youtube]');
  bindEvents(slick);
  function bindEvents() {
    if ($slick.hasClass('slick-initialized')) {
      onSlickInit();
    }
    $slick.on('init', onSlickInit);
    $slick.on('beforeChange', onSlickBeforeChange);
    $slick.on('afterChange', onSlickAfterChange);
  }
  function onPlayerReady(event) {
    $(event.target.getIframe()).closest('.slick-slide').data('youtube-player', event.target);
    setTimeout(function () {
      if ($(event.target.getIframe()).closest('.slick-slide').hasClass('slick-active')) {
        $slick.slick('slickPause');
        event.target.playVideo();
      }
    }, 200);
  }
  function onPlayerStateChange(event) {
    if (event.data === YT.PlayerState.PLAYING) {
      $slick.slick('slickPause');
    }
    if (event.data === YT.PlayerState.ENDED) {
      $slick.slick('slickNext');
    }
  }
  function onSlickInit() {
    $videos.each(function (j, vid) {
      var $vid = $(vid);
      var id = "youtube_player_" + lodash_uniqueId__WEBPACK_IMPORTED_MODULE_0___default()();
      $vid.attr('id', id);
      var player = new YT.Player(id, {
        host: 'http://www.youtube.com',
        videoId: $vid.data('youtube'),
        wmode: 'transparent',
        playerVars: {
          autoplay: 0,
          controls: 0,
          disablekb: 1,
          enablejsapi: 1,
          fs: 0,
          rel: 0,
          showinfo: 0,
          iv_load_policy: 3,
          modestbranding: 1,
          wmode: 'transparent'
        },
        events: {
          onReady: onPlayerReady,
          onStateChange: onPlayerStateChange
        }
      });
    });
  }
  function onSlickBeforeChange() {
    var player = $slick.find('.slick-slide.slick-active').data('youtube-player');
    if (player) {
      player.stopVideo();
      $slick.removeClass('slick-slider--playvideo');
    }
  }
  function onSlickAfterChange() {
    var player = $slick.find('.slick-slide.slick-active').data('youtube-player');
    if (player) {
      $slick.slick('slickPause');
      $slick.addClass('slick-slider--playvideo');
      player.playVideo();
    }
  }
}
function initCarousel($scope) {
  $scope.each(function (i, slick) {
    var $slick = $(slick);
    if ($slick.find('[data-youtube]').length > 0) {
      $slick.addClass('slick-slider--video');
      haloYoutubeSlick(slick);
    }
  });
}

/***/ }),

/***/ "./assets/js/theme/page-manager.js":
/*!*****************************************!*\
  !*** ./assets/js/theme/page-manager.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PageManager)
/* harmony export */ });
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");
var PageManager = /*#__PURE__*/function () {
  function PageManager(context) {
    this.context = context;
  }
  var _proto = PageManager.prototype;
  _proto.type = function type() {
    return this.constructor.name;
  };
  _proto.onReady = function onReady() {};
  PageManager.load = function load(context) {
    var page = new this(context);
    $(document).ready(function () {
      page.onReady.bind(page)();
    });
  };
  return PageManager;
}();


/***/ }),

/***/ "./assets/js/theme/product/image-gallery.js":
/*!**************************************************!*\
  !*** ./assets/js/theme/product/image-gallery.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ImageGallery)
/* harmony export */ });
/* harmony import */ var lodash_clone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/clone */ "./node_modules/lodash/clone.js");
/* harmony import */ var lodash_clone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_clone__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var jquery_zoom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jquery-zoom */ "./node_modules/jquery-zoom/jquery.zoom.js");
/* harmony import */ var jquery_zoom__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jquery_zoom__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var fancybox__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! fancybox */ "./node_modules/@fancyapps/ui/src/Fancybox/Fancybox.js");
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");



var ImageGallery = /*#__PURE__*/function () {
  function ImageGallery($gallery) {
    this.$mainImage = $gallery.find('[data-image-gallery-main]');
    this.$mainImageNested = $gallery.find('[data-main-image]');
    this.$selectOption = $gallery.find('.slick-current [data-image-gallery-main]');
    this.$selectableImages = $gallery.find('[data-image-gallery-item]');
    this.$swipThumbnails = $gallery.find('.productView-for');
    this.$swipImage = $gallery.find('.productView-nav');
    this.currentImage = {};
  }
  var _proto = ImageGallery.prototype;
  _proto.init = function init() {
    this.bindEvents();
    this.setImageZoom();
    this.fancyboxZoom();
  };
  _proto.setMainImage = function setMainImage(imgObj) {
    this.currentImage = lodash_clone__WEBPACK_IMPORTED_MODULE_0___default()(imgObj);
    this.setActiveThumb();
    this.swapMainImage();
  };
  _proto.setAlternateImage = function setAlternateImage(imgObj) {
    if (!this.savedImage) {
      this.savedImage = {
        mainImageUrl: this.$mainImage.find('img').attr('src'),
        zoomImageUrl: this.$mainImage.attr('data-zoom-image'),
        mainImageSrcset: this.$mainImage.find('img').attr('srcset'),
        $selectedThumb: this.currentImage.$selectedThumb
      };
    }
    this.setMainImage(imgObj);
    if ($(window).width() > 1024) {
      this.$mainImage.trigger('zoom.destroy');
      this.$mainImage.zoom({
        url: this.$mainImage.attr('data-zoom-image'),
        touch: false
      });
    }
  };
  _proto.restoreImage = function restoreImage() {
    if (this.savedImage) {
      this.setMainImage(this.savedImage);
      delete this.savedImage;
    }
  };
  _proto.selectNewImage = function selectNewImage(e) {
    e.preventDefault();
    var $target = $(e.currentTarget);
    var imgObj = {
      mainImageUrl: $target.attr('data-image-gallery-new-image-url'),
      zoomImageUrl: $target.attr('data-image-gallery-zoom-image-url'),
      mainImageSrcset: $target.attr('data-image-gallery-new-image-srcset'),
      $selectedThumb: $target,
      mainImageAlt: $target.children().first().attr('alt')
    };
    this.setMainImage(imgObj);
  };
  _proto.selectNewImage2 = function selectNewImage2(e) {
    var $target = $(e.currentTarget).find('.slick-current [data-image-gallery-item]');
    var imgObj = {
      mainImageUrl: $target.attr('data-image-gallery-new-image-url'),
      zoomImageUrl: $target.attr('data-image-gallery-zoom-image-url'),
      mainImageSrcset: $target.attr('data-image-gallery-new-image-srcset'),
      $selectedThumb: $(e.currentTarget).find('.slick-current')
    };
    this.setMainImage(imgObj);
    if ($(window).width() > 1024) {
      this.$mainImage.trigger('zoom.destroy');
      this.$mainImage.zoom({
        url: $target.data('image-gallery-zoom-image-url')
      });
    }
  };
  _proto.selectNewImage3 = function selectNewImage3(e) {
    var $target = this.$swipThumbnails.find('.slick-current [data-image-gallery-item]');
    var imgObj = {
      mainImageUrl: $target.attr('data-image-gallery-new-image-url'),
      zoomImageUrl: $target.attr('data-image-gallery-zoom-image-url'),
      mainImageSrcset: $target.attr('data-image-gallery-new-image-srcset'),
      $selectedThumb: $('.productView-for').find('.slick-current'),
      mainImageAlt: $target.children().first().attr('alt')
    };
    this.setMainImage(imgObj);
    if ($(window).width() > 1024) {
      this.$mainImage.trigger('zoom.destroy');
      this.$mainImage.zoom({
        url: $target.data('image-gallery-zoom-image-url')
      });
    }
  };
  _proto.setActiveThumb = function setActiveThumb() {
    this.$selectableImages.removeClass('is-active');
    if (this.currentImage.$selectedThumb) {
      this.currentImage.$selectedThumb.addClass('is-active');
    }
  };
  _proto.swapMainImage = function swapMainImage() {
    var isBrowserIE = navigator.userAgent.includes('Trident');
    this.$mainImage.attr({
      'data-zoom-image': this.currentImage.zoomImageUrl
    }).find('a').attr({
      href: this.currentImage.mainImageUrl
    }).find('img').attr({
      src: this.currentImage.mainImageUrl
    });
    this.$mainImage.find('.productView-img-container img').attr({
      srcset: this.currentImage.mainImageUrl
    });
    this.$mainImage.find('img.zoomImg').attr({
      src: this.currentImage.zoomImageUrl
    }).find('img.zoomImg').attr({
      srcset: this.currentImage.zoomImageUrl
    });
    this.$mainImageNested.attr({
      alt: this.currentImage.mainImageAlt,
      title: this.currentImage.mainImageAlt
    });
    if (isBrowserIE) {
      var fallbackStylesIE = {
        'background-image': "url(" + this.currentImage.mainImageUrl + "&ampimbypass=on)",
        'background-position': 'center',
        'background-repeat': 'no-repeat',
        'background-origin': 'content-box',
        'background-size': 'contain'
      };
      this.$mainImageNested.css(fallbackStylesIE);
    }
  };
  _proto.setImageZoom = function setImageZoom() {
    if ($(window).width() > 1024) {
      this.$mainImage.zoom({
        url: this.$mainImage.attr('data-zoom-image'),
        touch: false
      });
    }
  };
  _proto.fancyboxZoom = function fancyboxZoom() {
    if ($('.productView-nav').length > 0) {
      var $imageProductRow = $('.productView-nav').find('.productView-image');
      fancyBoxImage($imageProductRow.find('[data-fancybox]'));
    }
    function fancyBoxImage($image) {
      fancybox__WEBPACK_IMPORTED_MODULE_2__.Fancybox.bind('[data-fancybox="images"]', {
        infinite: true
      });
    }
  };
  _proto.bindEvents = function bindEvents() {
    if ($(window).width() > 550) {
      this.$selectableImages.on('click', this.selectNewImage.bind(this));
      this.$swipThumbnails.on('afterChange', this.selectNewImage2.bind(this));
      this.$swipImage.on('afterChange', this.selectNewImage3.bind(this));
    }
  };
  return ImageGallery;
}();


/***/ }),

/***/ "./assets/js/theme/wishlist.js":
/*!*************************************!*\
  !*** ./assets/js/theme/wishlist.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ WishList)
/* harmony export */ });
/* harmony import */ var foundation_sites_js_foundation_foundation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! foundation-sites/js/foundation/foundation */ "./node_modules/foundation-sites/js/foundation/foundation.js");
/* harmony import */ var foundation_sites_js_foundation_foundation__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(foundation_sites_js_foundation_foundation__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var foundation_sites_js_foundation_foundation_reveal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! foundation-sites/js/foundation/foundation.reveal */ "./node_modules/foundation-sites/js/foundation/foundation.reveal.js");
/* harmony import */ var foundation_sites_js_foundation_foundation_reveal__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(foundation_sites_js_foundation_foundation_reveal__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _common_nod__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./common/nod */ "./assets/js/theme/common/nod.js");
/* harmony import */ var _page_manager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./page-manager */ "./assets/js/theme/page-manager.js");
/* harmony import */ var _common_utils_pagination_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./common/utils/pagination-utils */ "./assets/js/theme/common/utils/pagination-utils.js");
/* harmony import */ var _common_utils_form_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./common/utils/form-utils */ "./assets/js/theme/common/utils/form-utils.js");
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");
function _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e; }
function _inheritsLoose(t, o) { t.prototype = Object.create(o.prototype), t.prototype.constructor = t, _setPrototypeOf(t, o); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }






var WishList = /*#__PURE__*/function (_PageManager) {
  function WishList(context) {
    var _this;
    _this = _PageManager.call(this, context) || this;
    _this.options = {
      template: 'account/add-wishlist'
    };
    return _this || _assertThisInitialized(_this);
  }

  /**
   * Creates a confirm box before deleting all wish lists
   */
  _inheritsLoose(WishList, _PageManager);
  var _proto = WishList.prototype;
  _proto.wishlistDeleteConfirm = function wishlistDeleteConfirm() {
    var _this2 = this;
    $('body').on('click', '[data-wishlist-delete]', function (event) {
      var confirmed = window.confirm(_this2.context.wishlistDelete);
      if (confirmed) {
        return true;
      }
      event.preventDefault();
    });
  };
  _proto.registerAddWishListValidation = function registerAddWishListValidation($addWishlistForm) {
    var _this3 = this;
    this.addWishlistValidator = (0,_common_nod__WEBPACK_IMPORTED_MODULE_2__["default"])({
      submit: '.wishlist-form input[type="submit"]',
      tap: _common_utils_form_utils__WEBPACK_IMPORTED_MODULE_5__.announceInputErrorMessage
    });
    this.addWishlistValidator.add([{
      selector: '.wishlist-form input[name="wishlistname"]',
      validate: function validate(cb, val) {
        var result = val.length > 0;
        cb(result);
      },
      errorMessage: 'You must enter a wishlist name.'
    }]);
    $addWishlistForm.on('submit', function (event) {
      _this3.addWishlistValidator.performCheck();
      if (_this3.addWishlistValidator.areAll('valid')) {
        return;
      }
      event.preventDefault();
    });
  };
  _proto.onReady = function onReady() {
    var $addWishListForm = $('.wishlist-form');
    if ($('[data-pagination-wishlist]').length) {
      (0,_common_utils_pagination_utils__WEBPACK_IMPORTED_MODULE_4__.wishlistPaginatorHelper)();
    }
    if ($addWishListForm.length) {
      this.registerAddWishListValidation($addWishListForm);
    }
    this.wishlistDeleteConfirm();
  };
  return WishList;
}(_page_manager__WEBPACK_IMPORTED_MODULE_3__["default"]);


/***/ }),

/***/ "./node_modules/@bigcommerce/stencil-utils/src/api/base.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@bigcommerce/stencil-utils/src/api/base.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _default)
/* harmony export */ });
/* harmony import */ var _lib_request__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/request */ "./node_modules/@bigcommerce/stencil-utils/src/lib/request.js");

var _default = /*#__PURE__*/function () {
  /**
   * @Constructor
   */
  function _default(version) {
    this.remoteVersion = version || 'v1';
    this.remoteBaseEndpoint = '/remote/';
  }

  /**
   *
   * @param {String} url
   * @param {String} method ['GET', 'POST', 'PUT', 'DELETE']
   * @param {Object} options
   * @param {Boolean} remote
   * @param {Function} callback
   */
  var _proto = _default.prototype;
  _proto.makeRequest = function makeRequest(url, method, options, remote, callback) {
    (0,_lib_request__WEBPACK_IMPORTED_MODULE_0__["default"])(url, {
      method: method,
      remote: remote,
      requestOptions: options
    }, callback);
  }

  /**
   *
   * @param {String} endpoint
   * @param {String} method ['GET', 'POST', 'PUT', 'DELETE']
   * @param {Object} options
   * @param {Function} callback
   */;
  _proto.remoteRequest = function remoteRequest(endpoint, method, options, callback) {
    var remoteUrl = this.remoteBaseEndpoint + this.remoteVersion + endpoint;
    this.makeRequest(remoteUrl, method, options, true, callback);
  };
  return _default;
}();


/***/ }),

/***/ "./node_modules/@bigcommerce/stencil-utils/src/api/cart.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@bigcommerce/stencil-utils/src/api/cart.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _default)
/* harmony export */ });
/* harmony import */ var _bodl_emitters_cart__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../bodl/emitters/cart */ "./node_modules/@bigcommerce/stencil-utils/src/bodl/emitters/cart.js");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base */ "./node_modules/@bigcommerce/stencil-utils/src/api/base.js");
/* harmony import */ var _hooks__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../hooks */ "./node_modules/@bigcommerce/stencil-utils/src/hooks/index.js");
function _inheritsLoose(t, o) { t.prototype = Object.create(o.prototype), t.prototype.constructor = t, _setPrototypeOf(t, o); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }



var _default = /*#__PURE__*/function (_Base) {
  function _default(version) {
    var _this;
    _this = _Base.call(this, version) || this;
    _this.bodlEventsCart = null;
    return _this;
  }
  _inheritsLoose(_default, _Base);
  var _proto = _default.prototype;
  _proto.getBodlEventsCart = function getBodlEventsCart() {
    if (!this.bodlEventsCart) {
      this.bodlEventsCart = new _bodl_emitters_cart__WEBPACK_IMPORTED_MODULE_0__["default"]();
    }
    return this.bodlEventsCart;
  }

  /**
   * Get a collection of Carts. For now, this will only return an array of a single cart as multiple carts per session
   * are not currently supported.
   *
   * @param options
   * @param {Function} callback
   */;
  _proto.getCarts = function getCarts(options, callback) {
    if (options === void 0) {
      options = {};
    }
    var url = '/api/storefront/carts';
    if (options.includeOptions) {
      url = this.includeOptions(url);
    }
    this.makeRequest(url, 'GET', options, true, function (err, response) {
      callback(err, response);
    });
  }

  /**
   * Get the current Cart's details, either with or without Product Option selections.
   * Can also be used to get a particular cart provided a cartId in the options.
   *
   * @param options
   * @param {Function} callback
   */;
  _proto.getCart = function getCart(options, callback) {
    if (options === void 0) {
      options = {};
    }
    /* If no cart ID is provided, get the collection of carts and return the first one */
    if (!options.cartId) {
      return this.getCarts(options, function (err, response) {
        return callback(err, response[0]);
      });
    }
    var url = "/api/storefront/carts/" + options.cartId;
    if (options.includeOptions) {
      url = this.includeOptions(url);
    }
    this.makeRequest(url, 'GET', options, true, function (err, response) {
      callback(err, response);
    });
  }

  /**
   * Get the summary for the current primary cart. This summary does not include the full details of the cart, but
   * the response time is much faster and it's appropriate for summary use cases.
   *
   * @param options
   * @param {Function} callback
   */;
  _proto.getCartSummary = function getCartSummary(options, callback) {
    if (options === void 0) {
      options = {};
    }
    var url = '/api/storefront/cart-summary';
    this.makeRequest(url, 'GET', options, true, function (err, response) {
      callback(err, response);
    });
  }

  /**
   * Add the parameters to a URL needed to get product option details on cart line items
   * @param url
   */;
  _proto.includeOptions = function includeOptions(url) {
    return url + "?include=lineItems.physicalItems.options,lineItems.digitalItems.options";
  }

  /**
   * Get a sum of the cart line item quantities
   *
   * @param options
   * @param {Function} callback
   */;
  _proto.getCartQuantity = function getCartQuantity(options, callback) {
    if (options === void 0) {
      options = {};
    }
    this.getCartSummary(options, function (err, response) {
      if (err) {
        return callback(err);
      }
      var quantity = 0;
      if (response && response.status !== 204 && response.total_quantity) {
        quantity = response.total_quantity;
      }
      callback(null, quantity);
    });
  }

  /**
   * Enhance with Big Open Data Layer events
   *
   * @param {FormData} formData
   * @param {Function} callback
   */;
  _proto.itemAdd = function itemAdd(formData, callback) {
    var _this2 = this;
    this.handleItemAdd(formData, function (err, response) {
      if (!err) {
        _this2.getBodlEventsCart().emitAddItem(response);
      }
      callback(err, response);
    });
  }

  /**
   * Add item to cart with options (variants)
   *
   * @param {FormData} formData
   * @param {Function} callback
   */;
  _proto.handleItemAdd = function handleItemAdd(formData, callback) {
    this.remoteRequest('/cart/add', 'POST', {
      formData: formData
    }, function (err, response) {
      var emitData = {
        err: err,
        response: response
      };
      _hooks__WEBPACK_IMPORTED_MODULE_2__["default"].emit('cart-item-add-remote', emitData);
      callback(err, response);
    });
  }

  /**
   * Update cart item quantity
   *
   * @param {String|Object} itemId
   * @param {Number|Function} qty
   * @param {Function|null} callback
   */;
  _proto.itemUpdate = function itemUpdate(itemId, qty, callback) {
    var _this3 = this;
    var callbackArg = callback;
    var items;
    if (Array.isArray(itemId) && typeof qty === 'function') {
      callbackArg = qty;
      items = itemId;
    } else {
      items = [{
        id: itemId,
        quantity: qty
      }];
    }
    this.update(items, function (err, response) {
      var emitData = {
        items: items,
        err: err,
        response: response
      };
      if (qty === 0 && !err) {
        _this3.getBodlEventsCart().emitRemoveItem(response);
      }
      _hooks__WEBPACK_IMPORTED_MODULE_2__["default"].emit('cart-item-update-remote', emitData);
      callbackArg(err, response);
    });
  }

  /**
   * Enhance with Big Open Data Layer events
   *
   * @param {String} itemId
   * @param {Function} callback
   */;
  _proto.itemRemove = function itemRemove(itemId, callback) {
    var _this4 = this;
    this.handleItemRemove(itemId, function (err, response) {
      if (!err) {
        _this4.getBodlEventsCart().emitRemoveItem(response);
      }
      callback(err, response);
    });
  }

  /**
   * Remove cart items
   *
   * Calls the internal update function with quantity: 0
   *
   * @param {String} itemId
   * @param {Function} callback
   */;
  _proto.handleItemRemove = function handleItemRemove(itemId, callback) {
    var items = [{
      id: itemId,
      quantity: 0
    }];
    this.update(items, function (err, response) {
      var emitData = {
        items: items,
        err: err,
        response: response
      };
      _hooks__WEBPACK_IMPORTED_MODULE_2__["default"].emit('cart-item-remove-remote', emitData);
      callback(err, response);
    });
  }

  /**
   * Get giftwrapping options
   * @param {String} itemId
   * @param {Object|Function} options
   * @param {Function|null} callback
   */;
  _proto.getItemGiftWrappingOptions = function getItemGiftWrappingOptions(itemId, options, callback) {
    var opts = options || {};
    var callbackArg = callback;
    if (typeof opts === 'function') {
      callbackArg = opts;
      opts = {};
    }
    this.remoteRequest("/gift-wrapping/" + itemId, 'GET', opts, callbackArg);
  }

  /**
   * Submit giftwrapping options
   *
   * @param {String} itemId
   * @param {Function} callback
   */;
  _proto.submitItemGiftWrappingOption = function submitItemGiftWrappingOption(itemId, params, callback) {
    this.remoteRequest("/gift-wrapping/" + itemId, 'POST', {
      params: params
    }, callback);
  }

  /**
   * Update cart items
   *
   * @param {Array} items
   * @param {Function} callback
   */;
  _proto.update = function update(items, callback) {
    var payload = {
      items: items
    };
    this.remoteRequest('/cart/update', 'POST', {
      params: payload
    }, callback);
  }

  /**
   * Get cart content
   *
   * @param {Object} options
   * @param {Function} callback
   */;
  _proto.getContent = function getContent(options, callback) {
    var opts = options || {};
    var callbackArg = callback;
    if (typeof opts === 'function') {
      callbackArg = opts;
      opts = {};
    }
    this.makeRequest('/cart.php', 'GET', opts, false, callbackArg);
  }

  /**
   * Get cart shipping quote
   *
   * @param {Object} params
   * @param {String|Array|Object} renderWith
   * @param {Function} callback
   */;
  _proto.getShippingQuotes = function getShippingQuotes(params, renderWith, callback) {
    var options = {
      params: params
    };
    var callbackArg = callback;
    var renderWithArg = renderWith;
    if (typeof callbackArg !== 'function') {
      callbackArg = renderWithArg;
      renderWithArg = null;
    }
    if (renderWithArg) {
      options.template = renderWithArg;
    }
    this.remoteRequest('/shipping-quote', 'GET', options, callbackArg);
  }

  /**
   * Submit shipping quote based on quoteId
   *
   * @param {Number} quoteId
   * @param {Function} callback
   */;
  _proto.submitShippingQuote = function submitShippingQuote(quoteId, callback) {
    var options = {
      params: {
        shipping_method: quoteId
      }
    };
    this.remoteRequest('/shipping-quote', 'POST', options, callback);
  }

  /**
   * Apply a coupon code or gift certificate to the cart
   *
   * @param {String} code
   * @param {Function} callback
   */;
  _proto.applyCode = function applyCode(code, callback) {
    var options = {
      params: {
        code: code
      }
    };
    this.remoteRequest('/apply-code', 'POST', options, callback);
  }

  /**
   * Apply a coupon code or gift certificate to the cart
   *
   * @param {Number} code
   * @param {Function} callback
   */;
  _proto.applyGiftCertificate = function applyGiftCertificate(code, callback) {
    var options = {
      params: {
        code: code
      }
    };
    this.remoteRequest('/gift-certificates', 'POST', options, callback);
  };
  return _default;
}(_base__WEBPACK_IMPORTED_MODULE_1__["default"]);


/***/ }),

/***/ "./node_modules/@bigcommerce/stencil-utils/src/api/countries.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@bigcommerce/stencil-utils/src/api/countries.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _default)
/* harmony export */ });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ "./node_modules/@bigcommerce/stencil-utils/src/api/base.js");
function _inheritsLoose(t, o) { t.prototype = Object.create(o.prototype), t.prototype.constructor = t, _setPrototypeOf(t, o); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }

var _default = /*#__PURE__*/function (_Base) {
  /**
   * @Constructor
   */
  function _default(version) {
    var _this;
    // call parent
    _this = _Base.call(this, version) || this;

    // set up class variables
    _this.endpoint = '/country-states/';
    return _this;
  }

  /**
   *
   * Get country data by id wrapper
   *
   * @param {Number} id
   * @param {Function} callback
   */
  _inheritsLoose(_default, _Base);
  var _proto = _default.prototype;
  _proto.getById = function getById(id, callback) {
    var url = this.endpoint + id;
    this.remoteRequest(url, 'GET', {}, callback);
  }

  /**
   * Get country data by country name
   * @param name
   * @param callback
   */;
  _proto.getByName = function getByName(name, callback) {
    var url = this.endpoint + name;
    this.remoteRequest(url, 'GET', {}, callback);
  };
  return _default;
}(_base__WEBPACK_IMPORTED_MODULE_0__["default"]);


/***/ }),

/***/ "./node_modules/@bigcommerce/stencil-utils/src/api/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@bigcommerce/stencil-utils/src/api/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_request__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/request */ "./node_modules/@bigcommerce/stencil-utils/src/lib/request.js");
/* harmony import */ var _countries__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./countries */ "./node_modules/@bigcommerce/stencil-utils/src/api/countries.js");
/* harmony import */ var _product__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./product */ "./node_modules/@bigcommerce/stencil-utils/src/api/product.js");
/* harmony import */ var _product_attributes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./product-attributes */ "./node_modules/@bigcommerce/stencil-utils/src/api/product-attributes.js");
/* harmony import */ var _search__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./search */ "./node_modules/@bigcommerce/stencil-utils/src/api/search.js");
/* harmony import */ var _cart__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./cart */ "./node_modules/@bigcommerce/stencil-utils/src/api/cart.js");
/* harmony import */ var _wishlist__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./wishlist */ "./node_modules/@bigcommerce/stencil-utils/src/api/wishlist.js");







var internals = {};

/**
 * Convenience function to request a page via ajax
 *
 * @param url
 * @param options
 * @param callback
 */
internals.getPage = function (url, options, callback) {
  (0,_lib_request__WEBPACK_IMPORTED_MODULE_0__["default"])(url, {
    method: 'GET',
    requestOptions: options
  }, callback);
};
internals.getPageByGQL = function (page, callback) {
  (0,_lib_request__WEBPACK_IMPORTED_MODULE_0__["default"])('/graphql-render', {
    method: 'GET',
    requestOptions: {
      params: {
        template_name: page
      }
    }
  }, callback);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  country: new _countries__WEBPACK_IMPORTED_MODULE_1__["default"](),
  productAttributes: new _product_attributes__WEBPACK_IMPORTED_MODULE_3__["default"](),
  product: new _product__WEBPACK_IMPORTED_MODULE_2__["default"](),
  search: new _search__WEBPACK_IMPORTED_MODULE_4__["default"](),
  cart: new _cart__WEBPACK_IMPORTED_MODULE_5__["default"](),
  wishlist: new _wishlist__WEBPACK_IMPORTED_MODULE_6__["default"](),
  getPage: internals.getPage,
  getPageByGQL: internals.getPageByGQL
});

/***/ }),

/***/ "./node_modules/@bigcommerce/stencil-utils/src/api/product-attributes.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@bigcommerce/stencil-utils/src/api/product-attributes.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _default)
/* harmony export */ });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ "./node_modules/@bigcommerce/stencil-utils/src/api/base.js");
/* harmony import */ var _hooks__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../hooks */ "./node_modules/@bigcommerce/stencil-utils/src/hooks/index.js");
/* harmony import */ var _lib_query_string__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib/query-string */ "./node_modules/@bigcommerce/stencil-utils/src/lib/query-string.js");
function _inheritsLoose(t, o) { t.prototype = Object.create(o.prototype), t.prototype.constructor = t, _setPrototypeOf(t, o); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }



var _default = /*#__PURE__*/function (_Base) {
  /**
   * @Constructor
   */
  function _default(version) {
    var _this;
    // call parent
    _this = _Base.call(this, version) || this;

    // set up class variables
    _this.endpoint = '/product-attributes/';
    _this.inCartEndpoint = '/configure-options/';
    return _this;
  }

  /**
   * @param {Number} productId
   * @param {Object} params
   * @param callback
   */
  _inheritsLoose(_default, _Base);
  var _proto = _default.prototype;
  _proto.optionChange = function optionChange(productId, params, template, callback) {
    if (template === void 0) {
      template = null;
    }
    var templateArg = template;
    var callbackArg = callback;
    if (typeof templateArg === 'function') {
      callbackArg = templateArg;
      templateArg = null;
    }
    this.remoteRequest(this.endpoint + productId, 'POST', {
      params: (0,_lib_query_string__WEBPACK_IMPORTED_MODULE_2__.parse)(params),
      template: templateArg
    }, function (err, response) {
      var emitData = {
        err: err,
        response: response
      };
      _hooks__WEBPACK_IMPORTED_MODULE_1__["default"].emit('product-options-change-remote', emitData);
      callbackArg(err, response);
    });
  }

  /**
   * @param {Number} itemId
   * @param {Object} params
   * @param callback
   */;
  _proto.configureInCart = function configureInCart(itemId, params, callback) {
    this.remoteRequest(this.inCartEndpoint + itemId, 'GET', params, function (err, response) {
      callback(err, response);
    });
  };
  return _default;
}(_base__WEBPACK_IMPORTED_MODULE_0__["default"]);


/***/ }),

/***/ "./node_modules/@bigcommerce/stencil-utils/src/api/product.js":
/*!********************************************************************!*\
  !*** ./node_modules/@bigcommerce/stencil-utils/src/api/product.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _default)
/* harmony export */ });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ "./node_modules/@bigcommerce/stencil-utils/src/api/base.js");
function _inheritsLoose(t, o) { t.prototype = Object.create(o.prototype), t.prototype.constructor = t, _setPrototypeOf(t, o); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }

var _default = /*#__PURE__*/function (_Base) {
  /**
   * @Constructor
   */
  function _default(version) {
    var _this;
    // call parent
    _this = _Base.call(this, version) || this;

    // set up class variables
    _this.endpoint = '/products.php?productId=';
    return _this;
  }

  /**
   *
   * @param {Number} productId
   * @param {Object} params
   * @param {Function} callback
   */
  _inheritsLoose(_default, _Base);
  var _proto = _default.prototype;
  _proto.getById = function getById(productId, params, callback) {
    var url = this.endpoint + productId;
    var paramsArg = params;
    var callbackArg = callback;
    if (typeof paramsArg === 'function') {
      callbackArg = paramsArg;
      paramsArg = {};
    }
    this.makeRequest(url, 'GET', paramsArg, false, callbackArg);
  };
  return _default;
}(_base__WEBPACK_IMPORTED_MODULE_0__["default"]);


/***/ }),

/***/ "./node_modules/@bigcommerce/stencil-utils/src/api/search.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@bigcommerce/stencil-utils/src/api/search.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _default)
/* harmony export */ });
/* harmony import */ var _hooks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../hooks */ "./node_modules/@bigcommerce/stencil-utils/src/hooks/index.js");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base */ "./node_modules/@bigcommerce/stencil-utils/src/api/base.js");
function _inheritsLoose(t, o) { t.prototype = Object.create(o.prototype), t.prototype.constructor = t, _setPrototypeOf(t, o); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }


var _default = /*#__PURE__*/function (_Base) {
  /**
   * @Constructor
   */
  function _default(version) {
    var _this;
    // call parent
    _this = _Base.call(this, version) || this;

    // set up class variables
    _this.endpoint = '/search.php?search_query=';
    return _this;
  }

  /**
   * Get search results
   * @param {String} query
   * @param {Object} params
   * @param {Function} callback
   */
  _inheritsLoose(_default, _Base);
  var _proto = _default.prototype;
  _proto.search = function search(query, params, callback) {
    var url = this.endpoint + encodeURIComponent(query);
    var paramsArg = params;
    var callbackArg = callback;
    if (typeof paramsArg === 'function') {
      callbackArg = paramsArg;
      paramsArg = {};
    }
    _hooks__WEBPACK_IMPORTED_MODULE_0__["default"].emit('search-quick-remote', query);
    this.makeRequest(url, 'GET', paramsArg, false, callbackArg);
  };
  return _default;
}(_base__WEBPACK_IMPORTED_MODULE_1__["default"]);


/***/ }),

/***/ "./node_modules/@bigcommerce/stencil-utils/src/api/wishlist.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@bigcommerce/stencil-utils/src/api/wishlist.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _default)
/* harmony export */ });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ "./node_modules/@bigcommerce/stencil-utils/src/api/base.js");
function _inheritsLoose(t, o) { t.prototype = Object.create(o.prototype), t.prototype.constructor = t, _setPrototypeOf(t, o); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }

var _default = /*#__PURE__*/function (_Base) {
  function _default() {
    return _Base.apply(this, arguments) || this;
  }
  _inheritsLoose(_default, _Base);
  var _proto = _default.prototype;
  _proto.itemAdd = function itemAdd(wishlistId, productId, options, callback) {
    var url = "/wishlist.php?action=add&wishlistid=" + wishlistId + "&product_id=" + productId;
    var opts = options;
    var callbackFn = callback;
    if (typeof opts === 'function') {
      callbackFn = opts;
      opts = {};
    }
    this.makeRequest(url, 'POST', opts, false, callbackFn);
  };
  return _default;
}(_base__WEBPACK_IMPORTED_MODULE_0__["default"]);


/***/ }),

/***/ "./node_modules/@bigcommerce/stencil-utils/src/bodl/emitters/base.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@bigcommerce/stencil-utils/src/bodl/emitters/base.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _default)
/* harmony export */ });
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers */ "./node_modules/@bigcommerce/stencil-utils/src/bodl/helpers.js");

var _default = function _default() {
  this.bodlEvents = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.getBODLEvents)();
};


/***/ }),

/***/ "./node_modules/@bigcommerce/stencil-utils/src/bodl/emitters/cart.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@bigcommerce/stencil-utils/src/bodl/emitters/cart.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers */ "./node_modules/@bigcommerce/stencil-utils/src/bodl/helpers.js");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base */ "./node_modules/@bigcommerce/stencil-utils/src/bodl/emitters/base.js");
function _inheritsLoose(t, o) { t.prototype = Object.create(o.prototype), t.prototype.constructor = t, _setPrototypeOf(t, o); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }


var Cart = /*#__PURE__*/function (_Base) {
  function Cart() {
    return _Base.apply(this, arguments) || this;
  }
  _inheritsLoose(Cart, _Base);
  var _proto = Cart.prototype;
  _proto.emitAddItem = function emitAddItem(response) {
    this.emit(this.bodlEvents.AddCartItemEvent.CREATE, response);
  };
  _proto.emitRemoveItem = function emitRemoveItem(response) {
    if (this.shouldEmitRemoveItem(response)) {
      this.emit(this.bodlEvents.RemoveCartItemEvent.CREATE, response);
    }
  };
  _proto.shouldEmitRemoveItem = function shouldEmitRemoveItem(response) {
    var _response$data$line_i;
    return ((_response$data$line_i = response.data.line_items) == null ? void 0 : _response$data$line_i.length) > 0;
  };
  _proto.emit = function emit(eventName, response) {
    var payload = this.preparePayload(response);
    this.bodlEvents.cart.emit(eventName, payload);
  };
  _proto.preparePayload = function preparePayload(response) {
    if ((0,_helpers__WEBPACK_IMPORTED_MODULE_0__.isBODLEnabled)() && !response.data.error) {
      return {
        channel_id: response.data.channel_id,
        currency: response.data.currency,
        product_value: response.data.product_value,
        line_items: response.data.line_items
      };
    }
    return {};
  };
  return Cart;
}(_base__WEBPACK_IMPORTED_MODULE_1__["default"]);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Cart);

/***/ }),

/***/ "./node_modules/@bigcommerce/stencil-utils/src/bodl/helpers.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@bigcommerce/stencil-utils/src/bodl/helpers.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FakeBODLEvents: () => (/* binding */ FakeBODLEvents),
/* harmony export */   getBODLEvents: () => (/* binding */ getBODLEvents),
/* harmony export */   isBODLEnabled: () => (/* binding */ isBODLEnabled)
/* harmony export */ });
var isBODLEnabled = function isBODLEnabled() {
  return typeof window.bodlEvents !== 'undefined';
};
var FakeBODLEvents = {
  cart: {
    addItem: function addItem() {},
    removeItem: function removeItem() {},
    emit: function emit() {}
  },
  AddCartItemEvent: {
    CREATE: 'create_add_cart_item'
  },
  RemoveCartItemEvent: {
    CREATE: 'create_remove_cart_item'
  }
};
var getBODLEvents = function getBODLEvents() {
  if (isBODLEnabled()) {
    return window.bodlEvents;
  }
  return FakeBODLEvents;
};

/***/ }),

/***/ "./node_modules/@bigcommerce/stencil-utils/src/hooks/base.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@bigcommerce/stencil-utils/src/hooks/base.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _default)
/* harmony export */ });
/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! eventemitter3 */ "./node_modules/eventemitter3/index.js");
/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(eventemitter3__WEBPACK_IMPORTED_MODULE_0__);
function _inheritsLoose(t, o) { t.prototype = Object.create(o.prototype), t.prototype.constructor = t, _setPrototypeOf(t, o); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }

var _default = /*#__PURE__*/function (_EventEmitter) {
  function _default() {
    return _EventEmitter.apply(this, arguments) || this;
  }
  _inheritsLoose(_default, _EventEmitter);
  var _proto = _default.prototype;
  _proto.subscribe = function subscribe(eventName, elementSelector, handler) {
    document.addEventListener(eventName, function (e) {
      for (var target = e.target; target && target !== this; target = target.parentNode) {
        if (target.matches(elementSelector)) {
          handler.call(target, e, target);
          break;
        }
      }
    }, false);
  };
  return _default;
}((eventemitter3__WEBPACK_IMPORTED_MODULE_0___default()));


/***/ }),

/***/ "./node_modules/@bigcommerce/stencil-utils/src/hooks/cart.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@bigcommerce/stencil-utils/src/hooks/cart.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _default)
/* harmony export */ });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ "./node_modules/@bigcommerce/stencil-utils/src/hooks/base.js");
function _inheritsLoose(t, o) { t.prototype = Object.create(o.prototype), t.prototype.constructor = t, _setPrototypeOf(t, o); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }

var _default = /*#__PURE__*/function (_BaseHooks) {
  /**
   * @Constructor
   */
  function _default() {
    var _this;
    // call parent
    _this = _BaseHooks.call(this) || this;
    _this.itemAdd();
    return _this;
  }
  _inheritsLoose(_default, _BaseHooks);
  var _proto = _default.prototype;
  _proto.itemAdd = function itemAdd() {
    var _this2 = this;
    this.subscribe('submit', '[data-cart-item-add]', function (event, target) {
      _this2.emit('cart-item-add', event, target);
    });
  };
  return _default;
}(_base__WEBPACK_IMPORTED_MODULE_0__["default"]);


/***/ }),

/***/ "./node_modules/@bigcommerce/stencil-utils/src/hooks/cookie.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@bigcommerce/stencil-utils/src/hooks/cookie.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _default)
/* harmony export */ });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ "./node_modules/@bigcommerce/stencil-utils/src/hooks/base.js");
function _inheritsLoose(t, o) { t.prototype = Object.create(o.prototype), t.prototype.constructor = t, _setPrototypeOf(t, o); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }

var _default = /*#__PURE__*/function (_BaseHooks) {
  function _default() {
    return _BaseHooks.apply(this, arguments) || this;
  }
  _inheritsLoose(_default, _BaseHooks);
  return _default;
}(_base__WEBPACK_IMPORTED_MODULE_0__["default"]);


/***/ }),

/***/ "./node_modules/@bigcommerce/stencil-utils/src/hooks/currency-selector.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@bigcommerce/stencil-utils/src/hooks/currency-selector.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _default)
/* harmony export */ });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ "./node_modules/@bigcommerce/stencil-utils/src/hooks/base.js");
function _inheritsLoose(t, o) { t.prototype = Object.create(o.prototype), t.prototype.constructor = t, _setPrototypeOf(t, o); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }

var _default = /*#__PURE__*/function (_BaseHooks) {
  /**
   * @Constructor
   */
  function _default() {
    var _this;
    // call parent
    _this = _BaseHooks.call(this) || this;
    _this.currencySelector();
    return _this;
  }
  _inheritsLoose(_default, _BaseHooks);
  var _proto = _default.prototype;
  _proto.currencySelector = function currencySelector() {
    var _this2 = this;
    this.subscribe('input', '[data-currency-selector-toggle]', function (event) {
      _this2.emit('currencySelector-toggle', event);
    });
  };
  return _default;
}(_base__WEBPACK_IMPORTED_MODULE_0__["default"]);


/***/ }),

/***/ "./node_modules/@bigcommerce/stencil-utils/src/hooks/faceted-search.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@bigcommerce/stencil-utils/src/hooks/faceted-search.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _default)
/* harmony export */ });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ "./node_modules/@bigcommerce/stencil-utils/src/hooks/base.js");
function _inheritsLoose(t, o) { t.prototype = Object.create(o.prototype), t.prototype.constructor = t, _setPrototypeOf(t, o); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }

var _default = /*#__PURE__*/function (_BaseHooks) {
  /**
   * @Constructor
   */
  function _default() {
    var _this;
    // call parent
    _this = _BaseHooks.call(this) || this;
    _this.searchEvents();
    return _this;
  }
  _inheritsLoose(_default, _BaseHooks);
  var _proto = _default.prototype;
  _proto.searchEvents = function searchEvents() {
    var _this2 = this;
    this.subscribe('click', '[data-faceted-search-facet]', function (event, target) {
      _this2.emit('facetedSearch-facet-clicked', event, target);
    });
    this.subscribe('submit', '[data-faceted-search-range]', function (event, target) {
      _this2.emit('facetedSearch-range-submitted', event, target);
    });
  };
  return _default;
}(_base__WEBPACK_IMPORTED_MODULE_0__["default"]);


/***/ }),

/***/ "./node_modules/@bigcommerce/stencil-utils/src/hooks/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@bigcommerce/stencil-utils/src/hooks/index.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _cart__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cart */ "./node_modules/@bigcommerce/stencil-utils/src/hooks/cart.js");
/* harmony import */ var _cookie__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cookie */ "./node_modules/@bigcommerce/stencil-utils/src/hooks/cookie.js");
/* harmony import */ var _currency_selector__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./currency-selector */ "./node_modules/@bigcommerce/stencil-utils/src/hooks/currency-selector.js");
/* harmony import */ var _product__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./product */ "./node_modules/@bigcommerce/stencil-utils/src/hooks/product.js");
/* harmony import */ var _search__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./search */ "./node_modules/@bigcommerce/stencil-utils/src/hooks/search.js");
/* harmony import */ var _faceted_search__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./faceted-search */ "./node_modules/@bigcommerce/stencil-utils/src/hooks/faceted-search.js");
/* harmony import */ var _sort_by__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./sort-by */ "./node_modules/@bigcommerce/stencil-utils/src/hooks/sort-by.js");







var internals = {};
internals.classes = {
  cart: new _cart__WEBPACK_IMPORTED_MODULE_0__["default"](),
  cookie: new _cookie__WEBPACK_IMPORTED_MODULE_1__["default"](),
  currencySelector: new _currency_selector__WEBPACK_IMPORTED_MODULE_2__["default"](),
  product: new _product__WEBPACK_IMPORTED_MODULE_3__["default"](),
  search: new _search__WEBPACK_IMPORTED_MODULE_4__["default"](),
  facetedSearch: new _faceted_search__WEBPACK_IMPORTED_MODULE_5__["default"](),
  sortBy: new _sort_by__WEBPACK_IMPORTED_MODULE_6__["default"]()
};
internals.parseHooks = function (hookName) {
  var hookType = hookName.split('-')[0];
  if (internals.classes[hookType] === undefined) {
    throw new Error(hookType + " is not a valid hookType");
  }
  return internals.classes[hookType];
};
var Hooks = /*#__PURE__*/function () {
  function Hooks() {}
  var _proto = Hooks.prototype;
  _proto.on = function on(hookName, callback) {
    var hook = internals.parseHooks(hookName);
    return hook.on(hookName, callback);
  };
  _proto.off = function off(hookName, callback) {
    var hook = internals.parseHooks(hookName);
    return hook.off(hookName, callback);
  };
  _proto.emit = function emit(hookName) {
    var hook = internals.parseHooks(hookName);
    return hook.emit.apply(hook, arguments);
  };
  return Hooks;
}();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new Hooks());

/***/ }),

/***/ "./node_modules/@bigcommerce/stencil-utils/src/hooks/product.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@bigcommerce/stencil-utils/src/hooks/product.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _default)
/* harmony export */ });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ "./node_modules/@bigcommerce/stencil-utils/src/hooks/base.js");
function _inheritsLoose(t, o) { t.prototype = Object.create(o.prototype), t.prototype.constructor = t, _setPrototypeOf(t, o); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }

var _default = /*#__PURE__*/function (_BaseHooks) {
  /**
   * @Constructor
   */
  function _default() {
    var _this;
    // call parent
    _this = _BaseHooks.call(this) || this;
    _this.optionsChange();
    return _this;
  }
  _inheritsLoose(_default, _BaseHooks);
  var _proto = _default.prototype;
  _proto.optionsChange = function optionsChange() {
    var _this2 = this;
    this.subscribe('change', '[data-product-option-change]', function (event, target) {
      _this2.emit('product-option-change', event, target);
    });
  };
  return _default;
}(_base__WEBPACK_IMPORTED_MODULE_0__["default"]);


/***/ }),

/***/ "./node_modules/@bigcommerce/stencil-utils/src/hooks/search.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@bigcommerce/stencil-utils/src/hooks/search.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _default)
/* harmony export */ });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ "./node_modules/@bigcommerce/stencil-utils/src/hooks/base.js");
function _inheritsLoose(t, o) { t.prototype = Object.create(o.prototype), t.prototype.constructor = t, _setPrototypeOf(t, o); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }

var _default = /*#__PURE__*/function (_BaseHooks) {
  /**
   * @Constructor
   */
  function _default() {
    var _this;
    // call parent
    _this = _BaseHooks.call(this) || this;
    _this.quickSearch();
    return _this;
  }
  _inheritsLoose(_default, _BaseHooks);
  var _proto = _default.prototype;
  _proto.quickSearch = function quickSearch() {
    var _this2 = this;
    this.subscribe('input', '[data-search-quick]', function (event, target) {
      _this2.emit('search-quick', event, target);
    });
  };
  return _default;
}(_base__WEBPACK_IMPORTED_MODULE_0__["default"]);


/***/ }),

/***/ "./node_modules/@bigcommerce/stencil-utils/src/hooks/sort-by.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@bigcommerce/stencil-utils/src/hooks/sort-by.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _default)
/* harmony export */ });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ "./node_modules/@bigcommerce/stencil-utils/src/hooks/base.js");
/* harmony import */ var _lib_closest__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/closest */ "./node_modules/@bigcommerce/stencil-utils/src/lib/closest.js");
function _inheritsLoose(t, o) { t.prototype = Object.create(o.prototype), t.prototype.constructor = t, _setPrototypeOf(t, o); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }



// ie 11 does not support native closest
if (!Element.prototype.matches) {
  Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
}
if (!Element.prototype.closest) {
  Element.prototype.closest = _lib_closest__WEBPACK_IMPORTED_MODULE_1__["default"];
}
var _default = /*#__PURE__*/function (_BaseHooks) {
  /**
   * @Constructor
   */
  function _default() {
    var _this;
    // call parent
    _this = _BaseHooks.call(this) || this;
    _this.sortByEvents();
    return _this;
  }
  _inheritsLoose(_default, _BaseHooks);
  var _proto = _default.prototype;
  _proto.sortByEvents = function sortByEvents() {
    var _this2 = this;
    this.subscribe('submit', '[data-sort-by]', function (event, target) {
      _this2.emit('sortBy-submitted', event, target);
    });
    this.subscribe('change', '[data-sort-by] select', function (event, target) {
      _this2.emit('sortBy-select-changed', event, target);
      if (!event.defaultPrevented) {
        _this2.emit('sortBy-submitted', event, target);
      }
    });
  };
  return _default;
}(_base__WEBPACK_IMPORTED_MODULE_0__["default"]);


/***/ }),

/***/ "./node_modules/@bigcommerce/stencil-utils/src/lib/closest.js":
/*!********************************************************************!*\
  !*** ./node_modules/@bigcommerce/stencil-utils/src/lib/closest.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ closest)
/* harmony export */ });
/**
 * ie 11 does not support native closest so use this polyfill function instead to find closest matching selector starting from el.
 * @param {string} params
 * @returns {any} matching selector or null
 */
function closest(s) {
  var el = this;
  do {
    if (el.matches(s)) return el;
    el = el.parentElement || el.parentNode;
  } while (el !== null && el.nodeType === 1);
  return null;
}

/***/ }),

/***/ "./node_modules/@bigcommerce/stencil-utils/src/lib/query-string.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@bigcommerce/stencil-utils/src/lib/query-string.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   parse: () => (/* binding */ parse),
/* harmony export */   stringify: () => (/* binding */ stringify)
/* harmony export */ });
/**
 * Encodes string by stricter rules
 * see https://github.com/kevva/strict-uri-encode
 *
 * @param {String} string
 */
var encode = function encode(string) {
  return encodeURIComponent(string).replace(/[!'()*]/g, function (x) {
    return "%" + x.charCodeAt(0).toString(16).toUpperCase();
  });
};

/**
 * Returns an array, where first element is the slice till separator and the second is the rest.
 *
 * @param {String} string
 * @param {String} separator
 */
var splitOnFirst = function splitOnFirst(string, separator) {
  var separatorIndex = string.indexOf(separator);
  if (separatorIndex === -1) {
    return [string];
  }
  return [string.slice(0, separatorIndex), string.slice(separatorIndex + separator.length)];
};

/**
 * Sorts array or object by keys
 *
 * @param {Array|Object} input
 */
var _sortByKeys = function sortByKeys(input) {
  if (Array.isArray(input)) {
    return input.sort();
  }
  if (typeof input === 'object') {
    return _sortByKeys(Object.keys(input)).sort(function (a, b) {
      return Number(a) - Number(b);
    }).map(function (key) {
      return input[key];
    });
  }
  return input;
};

/**
 * Returns an array if the key exists in the object or the value if doen't
 *
 * @param {String} key
 * @param {String} value
 * @param {Object} accumulator
 */
var getParsedValue = function getParsedValue(key, value, accumulator) {
  if (accumulator[key] === undefined) {
    return value;
  }
  return [].concat(accumulator[key], value);
};

/**
 * Reducer that formats and combines key-value pair
 *
 * @param {String} options
 */
var reduceByKey = function reduceByKey(options) {
  return function (key) {
    return function (result, value) {
      if (value === undefined) {
        return result;
      }
      if (value === null) {
        return [].concat(result, [encode(key)]);
      }
      if (options.includeArrayIndex) {
        if (typeof value === 'object') {
          var _index = result.length / Object.keys(value).length;
          return result.concat(Object.keys(value).map(function (keyOfValue) {
            return [encode(key), '[', encode(_index), ']', '[', encode(keyOfValue), ']=', encode(value[keyOfValue])].join('');
          }));
        }
        var index = result.length;
        return [].concat(result, [[encode(key), '[', encode(index), ']=', encode(value)].join('')]);
      }
      return [].concat(result, [[encode(key), '=', encode(value)].join('')]);
    };
  };
};

/**
 * Converts query string into object
 *
 * @param {String} input
 */
function parse(input) {
  var ret = Object.create(null);
  if (typeof input !== 'string') {
    return ret;
  }
  var inputParsed = input.trim().replace(/^[?#&]/, '');
  if (!inputParsed) {
    return ret;
  }
  inputParsed.split('&').forEach(function (param) {
    /* eslint-disable prefer-const */
    var _splitOnFirst = splitOnFirst(param.replace(/\+/g, ' '), '='),
      key = _splitOnFirst[0],
      value = _splitOnFirst[1];
    key = decodeURIComponent(key);
    value = value === undefined ? null : decodeURIComponent(value);
    ret[key] = getParsedValue(key, value, ret);
  });
  return Object.keys(ret).sort().reduce(function (result, key) {
    var value = ret[key];
    if (Boolean(value) && typeof value === 'object' && !Array.isArray(value)) {
      /* eslint-disable no-param-reassign */
      result[key] = _sortByKeys(value);
    } else {
      /* eslint-disable no-param-reassign */
      result[key] = value;
    }
    return result;
  }, Object.create(null));
}

/**
 * Converts an object to query string
 *
 * @param {Object} object
 * @param {Object} options
 * @param {Boolean} [options.filterValues] - filters empty string or undefineds
 * @param {Boolean} [options.includeArrayIndex] - includes array index in the query string
 */
function stringify(object, options) {
  if (options === void 0) {
    options = {
      filterValues: false,
      arrayIndex: false
    };
  }
  if (!object) {
    return '';
  }
  var objectCopy = {};
  var shouldFilter = function shouldFilter(key) {
    return options.filterValues && (object[key] === '' || object[key] === undefined);
  };
  Object.keys(object).forEach(function (key) {
    if (!shouldFilter(key)) {
      objectCopy[key] = object[key];
    }
  });
  var keys = Object.keys(objectCopy);
  keys.sort();
  return keys.map(function (key) {
    var value = object[key];
    if (value === undefined) {
      return '';
    }
    if (value === null) {
      return encode(key);
    }
    if (Array.isArray(value)) {
      return value.reduce(reduceByKey(options)(key), []).join('&');
    }
    return encode(key) + "=" + encode(value);
  }).filter(function (x) {
    return x.length > 0;
  }).join('&');
}

/***/ }),

/***/ "./node_modules/@bigcommerce/stencil-utils/src/lib/request.js":
/*!********************************************************************!*\
  !*** ./node_modules/@bigcommerce/stencil-utils/src/lib/request.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var whatwg_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! whatwg-fetch */ "./node_modules/whatwg-fetch/fetch.js");
/* harmony import */ var _query_string__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./query-string */ "./node_modules/@bigcommerce/stencil-utils/src/lib/query-string.js");


/**
 * Checks whether or not the current method passed in is valid
 *
 * @param {String} method
 * @returns {Boolean}
 */
var isValidHTTPMethod = function isValidHTTPMethod(method) {
  return ['GET', 'POST', 'PUT', 'DELETE'].indexOf(method) !== -1;
};

/**
 * Checks if requested template is using sections
 *
 * @param {Object|Array|String} requestedTemplate
 */
var isUsingSections = function isUsingSections(requestedTemplate) {
  return requestedTemplate !== null && typeof requestedTemplate === 'object' && !Array.isArray(requestedTemplate);
};

/**
 * Returns templates array
 *
 * @param {Object|Array|String} requestedTemplate
 * @returns {Array}
 */
var getTemplates = function getTemplates(requestedTemplate) {
  var templates = [];
  if (isUsingSections(requestedTemplate)) {
    templates = Object.values(requestedTemplate);
  } else if (typeof requestedTemplate === 'string') {
    templates = [requestedTemplate];
  } else if (Array.isArray(requestedTemplate) && requestedTemplate.length > 0) {
    templates = requestedTemplate;
  }
  return templates;
};
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(relativeUrl, opts, callback) {
  var defaultOptions = {
    method: 'GET',
    remote: false,
    requestOptions: {
      baseUrl: null,
      formData: null,
      params: {},
      config: {},
      template: []
    }
  };
  var options = Object.assign({}, defaultOptions, opts);
  var data = options.requestOptions.formData ? options.requestOptions.formData : options.requestOptions.params;
  var headers = {
    'stencil-config': options.requestOptions.config ? JSON.stringify(options.requestOptions.config) : '{}',
    'stencil-options': '{}',
    'x-xsrf-token': window.BCData && window.BCData.csrf_token ? window.BCData.csrf_token : '',
    'x-requested-with': 'stencil-utils'
  };
  if (!isValidHTTPMethod(options.method)) {
    return callback(new Error('Not a valid HTTP method'));
  }
  var templates = getTemplates(options.requestOptions.template);
  var usingSections = isUsingSections(options.requestOptions.template);
  var usingTemplates = templates.length > 0;
  if (!options.requestOptions.formData) {
    headers['content-type'] = 'application/x-www-form-urlencoded; charset=UTF-8';
  }
  if (usingTemplates) {
    headers['stencil-options'] = JSON.stringify({
      render_with: templates.join(',')
    });
  }
  var config = {
    method: options.method,
    headers: headers,
    credentials: 'include'
  };
  var url = options.requestOptions.baseUrl ? "" + options.requestOptions.baseUrl + relativeUrl : relativeUrl;
  if (['GET', 'HEAD'].indexOf(config.method) === -1) {
    config.body = !options.requestOptions.formData ? (0,_query_string__WEBPACK_IMPORTED_MODULE_1__.stringify)(data, {
      includeArrayIndex: true
    }) : data;
  } else if (data) {
    var delimiter = !url.includes('?') ? '?' : '&';
    url += "" + delimiter + (0,_query_string__WEBPACK_IMPORTED_MODULE_1__.stringify)(data);
  }
  return fetch(url, config).then(function (response) {
    if (response.headers.get('content-type').indexOf('application/json') !== -1) {
      return response.json();
    }
    return response.text();
  }).then(function (response) {
    var content = options.remote ? response.content : response;
    var ret = response;
    if (usingTemplates) {
      // Remove the `components` prefix from the response if it's an object
      if (typeof content === 'object') {
        Object.keys(content).forEach(function (key) {
          var cleanKey = key.replace(/^components\//, '');
          content[cleanKey] = content[key];
          delete content[key];
        });
      }

      // If using "sections", morph the content into the arbitrary keys => content object.
      if (usingSections) {
        var requestedTemplate = options.requestOptions.template;
        Object.keys(requestedTemplate).forEach(function (templateVariable) {
          content[templateVariable] = content[requestedTemplate[templateVariable]];
          delete content[requestedTemplate[templateVariable]];
        });
      }
      if (!options.remote) {
        ret = content;
      }
    }
    callback(null, ret);
  })["catch"](function (err) {
    return callback(err);
  });
}

/***/ }),

/***/ "./node_modules/@bigcommerce/stencil-utils/src/main.js":
/*!*************************************************************!*\
  !*** ./node_modules/@bigcommerce/stencil-utils/src/main.js ***!
  \*************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   api: () => (/* reexport safe */ _api__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   hooks: () => (/* reexport safe */ _hooks__WEBPACK_IMPORTED_MODULE_0__["default"]),
/* harmony export */   tools: () => (/* reexport safe */ _tools__WEBPACK_IMPORTED_MODULE_2__["default"])
/* harmony export */ });
/* harmony import */ var _hooks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./hooks */ "./node_modules/@bigcommerce/stencil-utils/src/hooks/index.js");
/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./api */ "./node_modules/@bigcommerce/stencil-utils/src/api/index.js");
/* harmony import */ var _tools__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tools */ "./node_modules/@bigcommerce/stencil-utils/src/tools/index.js");
/* module decorator */ module = __webpack_require__.hmd(module);



var StencilUtils = {
  hooks: _hooks__WEBPACK_IMPORTED_MODULE_0__["default"],
  api: _api__WEBPACK_IMPORTED_MODULE_1__["default"],
  tools: _tools__WEBPACK_IMPORTED_MODULE_2__["default"]
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (StencilUtils);

/* global define */
(function (root) {
  if (typeof define === 'function' && __webpack_require__.amdO && root) {
    // Ignores below for https://github.com/eslint/eslint/issues/5150
    define(function () {
      // eslint-disable-line prefer-arrow-callback
      root.stencilUtils = StencilUtils; // eslint-disable-line no-param-reassign
    });
  } else if ( true && module.exports) {
    module.exports = StencilUtils;
  } else {
    window.stencilUtils = StencilUtils;
  }
})(undefined);

/***/ }),

/***/ "./node_modules/@bigcommerce/stencil-utils/src/tools/image.js":
/*!********************************************************************!*\
  !*** ./node_modules/@bigcommerce/stencil-utils/src/tools/image.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _default)
/* harmony export */ });
var _default = /*#__PURE__*/function () {
  function _default() {}
  var _proto = _default.prototype;
  _proto.getSrc = function getSrc(path, dimensions) {
    // Regex to test size string is of the form 123x123 or 100w
    var sizeRegex = /(^\d+w$)|(^(\d+?)x(\d+?)$)/g;
    var size;
    if (typeof dimensions === 'object') {
      var width = dimensions.width || 100;
      var height = dimensions.height || 100;
      size = width + "x" + height;
    } else if (typeof dimensions === 'string' && sizeRegex.test(dimensions)) {
      // If dimensions is a string and match the NNNxNNN or NNNw format
      size = dimensions;
    } else {
      // Use the original image size
      size = 'original';
    }
    return path.replace('{:size}', size);
  };
  return _default;
}();


/***/ }),

/***/ "./node_modules/@bigcommerce/stencil-utils/src/tools/imageSrcset.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@bigcommerce/stencil-utils/src/tools/imageSrcset.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _default)
/* harmony export */ });
var _default = /*#__PURE__*/function () {
  function _default() {}
  var _proto = _default.prototype;
  _proto.getSrcset = function getSrcset(url, sizes) {
    // Regex to test size string is of the form 123x123 or 100w
    var sizeRegex = /(^\d+w$)|(^(\d+?)x(\d+?)$)/;
    // Regex to test to that srcset descriptor is of the form 1x 1.5x 2x OR 123w
    var descriptorRegex = /(^\d+w$)|(^([0-9](\.[0-9]+)?)x)$/;
    var srcsets = {};
    if (!sizes) {
      // Use default srcsets if none are provided
      srcsets = {
        '80w': '80w',
        '160w': '160w',
        '320w': '320w',
        '640w': '640w',
        '960w': '960w',
        '1280w': '1280w',
        '1920w': '1920w',
        '2560w': '2560w'
      };
    } else if (sizes === Object(sizes) && !Object.keys(sizes).some(function (descriptor) {
      return !(descriptorRegex.test(descriptor) && sizeRegex.test(sizes[descriptor]));
    })) {
      // If object consists of valid srcsets, use it instead
      srcsets = sizes;
      // If there's only one argument, return a `src` only (also works for `srcset`)
      if (Object.keys(srcsets).length === 1) {
        return url.replace('{:size}', srcsets[Object.keys(srcsets)[0]]);
      }
    } else {
      throw new Error('Invalid srcset descriptor or size');
    }

    // eslint-disable-next-line new-cap
    return Object.keys(srcsets).map(function (descriptor) {
      return [url.replace('{:size}', srcsets[descriptor]), descriptor].join(' ');
    }).join(', ');
  };
  return _default;
}();


/***/ }),

/***/ "./node_modules/@bigcommerce/stencil-utils/src/tools/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@bigcommerce/stencil-utils/src/tools/index.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _image__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./image */ "./node_modules/@bigcommerce/stencil-utils/src/tools/image.js");
/* harmony import */ var _imageSrcset__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./imageSrcset */ "./node_modules/@bigcommerce/stencil-utils/src/tools/imageSrcset.js");
/* harmony import */ var _storage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./storage */ "./node_modules/@bigcommerce/stencil-utils/src/tools/storage.js");



var tools = {
  image: new _image__WEBPACK_IMPORTED_MODULE_0__["default"](),
  imageSrcset: new _imageSrcset__WEBPACK_IMPORTED_MODULE_1__["default"](),
  storage: new _storage__WEBPACK_IMPORTED_MODULE_2__["default"]()
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (tools);

/***/ }),

/***/ "./node_modules/@bigcommerce/stencil-utils/src/tools/storage.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@bigcommerce/stencil-utils/src/tools/storage.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _default)
/* harmony export */ });
var _default = /*#__PURE__*/function () {
  function _default() {}
  var _proto = _default.prototype;
  /**
   * Check if a storage type (like localStorage or sessionStorage) is available for use
   * https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API#Testing_for_availability
   * @param type
   * @returns boolean
   */
  _proto.storageAvailable = function storageAvailable(type) {
    var storage = window[type];
    try {
      var x = '__storage_test__';
      storage.setItem(x, x);
      storage.removeItem(x);
      return true;
    } catch (e) {
      return e instanceof DOMException && (
      // everything except Firefox
      e.code === 22
      // Firefox
      || e.code === 1014
      // test name field too, because code might not be present
      // everything except Firefox
      || e.name === 'QuotaExceededError'
      // Firefox
      || e.name === 'NS_ERROR_DOM_QUOTA_REACHED')
      // acknowledge QuotaExceededError only if there's something already stored
      && storage.length !== 0;
    }
  };
  _proto.localStorageAvailable = function localStorageAvailable() {
    return this.storageAvailable('localStorage');
  };
  return _default;
}();


/***/ }),

/***/ "./node_modules/call-bind/callBound.js":
/*!*********************************************!*\
  !*** ./node_modules/call-bind/callBound.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var GetIntrinsic = __webpack_require__(/*! get-intrinsic */ "./node_modules/get-intrinsic/index.js");

var callBind = __webpack_require__(/*! ./ */ "./node_modules/call-bind/index.js");

var $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));

module.exports = function callBoundIntrinsic(name, allowMissing) {
	var intrinsic = GetIntrinsic(name, !!allowMissing);
	if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
		return callBind(intrinsic);
	}
	return intrinsic;
};


/***/ }),

/***/ "./node_modules/call-bind/index.js":
/*!*****************************************!*\
  !*** ./node_modules/call-bind/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var bind = __webpack_require__(/*! function-bind */ "./node_modules/function-bind/index.js");
var GetIntrinsic = __webpack_require__(/*! get-intrinsic */ "./node_modules/get-intrinsic/index.js");
var setFunctionLength = __webpack_require__(/*! set-function-length */ "./node_modules/set-function-length/index.js");

var $TypeError = __webpack_require__(/*! es-errors/type */ "./node_modules/es-errors/type.js");
var $apply = GetIntrinsic('%Function.prototype.apply%');
var $call = GetIntrinsic('%Function.prototype.call%');
var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);

var $defineProperty = __webpack_require__(/*! es-define-property */ "./node_modules/es-define-property/index.js");
var $max = GetIntrinsic('%Math.max%');

module.exports = function callBind(originalFunction) {
	if (typeof originalFunction !== 'function') {
		throw new $TypeError('a function is required');
	}
	var func = $reflectApply(bind, $call, arguments);
	return setFunctionLength(
		func,
		1 + $max(0, originalFunction.length - (arguments.length - 1)),
		true
	);
};

var applyBind = function applyBind() {
	return $reflectApply(bind, $apply, arguments);
};

if ($defineProperty) {
	$defineProperty(module.exports, 'apply', { value: applyBind });
} else {
	module.exports.apply = applyBind;
}


/***/ }),

/***/ "./node_modules/define-data-property/index.js":
/*!****************************************************!*\
  !*** ./node_modules/define-data-property/index.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $defineProperty = __webpack_require__(/*! es-define-property */ "./node_modules/es-define-property/index.js");

var $SyntaxError = __webpack_require__(/*! es-errors/syntax */ "./node_modules/es-errors/syntax.js");
var $TypeError = __webpack_require__(/*! es-errors/type */ "./node_modules/es-errors/type.js");

var gopd = __webpack_require__(/*! gopd */ "./node_modules/gopd/index.js");

/** @type {import('.')} */
module.exports = function defineDataProperty(
	obj,
	property,
	value
) {
	if (!obj || (typeof obj !== 'object' && typeof obj !== 'function')) {
		throw new $TypeError('`obj` must be an object or a function`');
	}
	if (typeof property !== 'string' && typeof property !== 'symbol') {
		throw new $TypeError('`property` must be a string or a symbol`');
	}
	if (arguments.length > 3 && typeof arguments[3] !== 'boolean' && arguments[3] !== null) {
		throw new $TypeError('`nonEnumerable`, if provided, must be a boolean or null');
	}
	if (arguments.length > 4 && typeof arguments[4] !== 'boolean' && arguments[4] !== null) {
		throw new $TypeError('`nonWritable`, if provided, must be a boolean or null');
	}
	if (arguments.length > 5 && typeof arguments[5] !== 'boolean' && arguments[5] !== null) {
		throw new $TypeError('`nonConfigurable`, if provided, must be a boolean or null');
	}
	if (arguments.length > 6 && typeof arguments[6] !== 'boolean') {
		throw new $TypeError('`loose`, if provided, must be a boolean');
	}

	var nonEnumerable = arguments.length > 3 ? arguments[3] : null;
	var nonWritable = arguments.length > 4 ? arguments[4] : null;
	var nonConfigurable = arguments.length > 5 ? arguments[5] : null;
	var loose = arguments.length > 6 ? arguments[6] : false;

	/* @type {false | TypedPropertyDescriptor<unknown>} */
	var desc = !!gopd && gopd(obj, property);

	if ($defineProperty) {
		$defineProperty(obj, property, {
			configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,
			enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,
			value: value,
			writable: nonWritable === null && desc ? desc.writable : !nonWritable
		});
	} else if (loose || (!nonEnumerable && !nonWritable && !nonConfigurable)) {
		// must fall back to [[Set]], and was not explicitly asked to make non-enumerable, non-writable, or non-configurable
		obj[property] = value; // eslint-disable-line no-param-reassign
	} else {
		throw new $SyntaxError('This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.');
	}
};


/***/ }),

/***/ "./node_modules/es-define-property/index.js":
/*!**************************************************!*\
  !*** ./node_modules/es-define-property/index.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var GetIntrinsic = __webpack_require__(/*! get-intrinsic */ "./node_modules/get-intrinsic/index.js");

/** @type {import('.')} */
var $defineProperty = GetIntrinsic('%Object.defineProperty%', true) || false;
if ($defineProperty) {
	try {
		$defineProperty({}, 'a', { value: 1 });
	} catch (e) {
		// IE 8 has a broken defineProperty
		$defineProperty = false;
	}
}

module.exports = $defineProperty;


/***/ }),

/***/ "./node_modules/es-errors/eval.js":
/*!****************************************!*\
  !*** ./node_modules/es-errors/eval.js ***!
  \****************************************/
/***/ ((module) => {

"use strict";


/** @type {import('./eval')} */
module.exports = EvalError;


/***/ }),

/***/ "./node_modules/es-errors/index.js":
/*!*****************************************!*\
  !*** ./node_modules/es-errors/index.js ***!
  \*****************************************/
/***/ ((module) => {

"use strict";


/** @type {import('.')} */
module.exports = Error;


/***/ }),

/***/ "./node_modules/es-errors/range.js":
/*!*****************************************!*\
  !*** ./node_modules/es-errors/range.js ***!
  \*****************************************/
/***/ ((module) => {

"use strict";


/** @type {import('./range')} */
module.exports = RangeError;


/***/ }),

/***/ "./node_modules/es-errors/ref.js":
/*!***************************************!*\
  !*** ./node_modules/es-errors/ref.js ***!
  \***************************************/
/***/ ((module) => {

"use strict";


/** @type {import('./ref')} */
module.exports = ReferenceError;


/***/ }),

/***/ "./node_modules/es-errors/syntax.js":
/*!******************************************!*\
  !*** ./node_modules/es-errors/syntax.js ***!
  \******************************************/
/***/ ((module) => {

"use strict";


/** @type {import('./syntax')} */
module.exports = SyntaxError;


/***/ }),

/***/ "./node_modules/es-errors/type.js":
/*!****************************************!*\
  !*** ./node_modules/es-errors/type.js ***!
  \****************************************/
/***/ ((module) => {

"use strict";


/** @type {import('./type')} */
module.exports = TypeError;


/***/ }),

/***/ "./node_modules/es-errors/uri.js":
/*!***************************************!*\
  !*** ./node_modules/es-errors/uri.js ***!
  \***************************************/
/***/ ((module) => {

"use strict";


/** @type {import('./uri')} */
module.exports = URIError;


/***/ }),

/***/ "./node_modules/eventemitter3/index.js":
/*!*********************************************!*\
  !*** ./node_modules/eventemitter3/index.js ***!
  \*********************************************/
/***/ ((module) => {

"use strict";


var has = Object.prototype.hasOwnProperty
  , prefix = '~';

/**
 * Constructor to create a storage for our `EE` objects.
 * An `Events` instance is a plain object whose properties are event names.
 *
 * @constructor
 * @private
 */
function Events() {}

//
// We try to not inherit from `Object.prototype`. In some engines creating an
// instance in this way is faster than calling `Object.create(null)` directly.
// If `Object.create(null)` is not supported we prefix the event names with a
// character to make sure that the built-in object properties are not
// overridden or used as an attack vector.
//
if (Object.create) {
  Events.prototype = Object.create(null);

  //
  // This hack is needed because the `__proto__` property is still inherited in
  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
  //
  if (!new Events().__proto__) prefix = false;
}

/**
 * Representation of a single event listener.
 *
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
 * @constructor
 * @private
 */
function EE(fn, context, once) {
  this.fn = fn;
  this.context = context;
  this.once = once || false;
}

/**
 * Add a listener for a given event.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} once Specify if the listener is a one-time listener.
 * @returns {EventEmitter}
 * @private
 */
function addListener(emitter, event, fn, context, once) {
  if (typeof fn !== 'function') {
    throw new TypeError('The listener must be a function');
  }

  var listener = new EE(fn, context || emitter, once)
    , evt = prefix ? prefix + event : event;

  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
  else emitter._events[evt] = [emitter._events[evt], listener];

  return emitter;
}

/**
 * Clear event by name.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} evt The Event name.
 * @private
 */
function clearEvent(emitter, evt) {
  if (--emitter._eventsCount === 0) emitter._events = new Events();
  else delete emitter._events[evt];
}

/**
 * Minimal `EventEmitter` interface that is molded against the Node.js
 * `EventEmitter` interface.
 *
 * @constructor
 * @public
 */
function EventEmitter() {
  this._events = new Events();
  this._eventsCount = 0;
}

/**
 * Return an array listing the events for which the emitter has registered
 * listeners.
 *
 * @returns {Array}
 * @public
 */
EventEmitter.prototype.eventNames = function eventNames() {
  var names = []
    , events
    , name;

  if (this._eventsCount === 0) return names;

  for (name in (events = this._events)) {
    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
  }

  if (Object.getOwnPropertySymbols) {
    return names.concat(Object.getOwnPropertySymbols(events));
  }

  return names;
};

/**
 * Return the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Array} The registered listeners.
 * @public
 */
EventEmitter.prototype.listeners = function listeners(event) {
  var evt = prefix ? prefix + event : event
    , handlers = this._events[evt];

  if (!handlers) return [];
  if (handlers.fn) return [handlers.fn];

  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
    ee[i] = handlers[i].fn;
  }

  return ee;
};

/**
 * Return the number of listeners listening to a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Number} The number of listeners.
 * @public
 */
EventEmitter.prototype.listenerCount = function listenerCount(event) {
  var evt = prefix ? prefix + event : event
    , listeners = this._events[evt];

  if (!listeners) return 0;
  if (listeners.fn) return 1;
  return listeners.length;
};

/**
 * Calls each of the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Boolean} `true` if the event had listeners, else `false`.
 * @public
 */
EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return false;

  var listeners = this._events[evt]
    , len = arguments.length
    , args
    , i;

  if (listeners.fn) {
    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

    switch (len) {
      case 1: return listeners.fn.call(listeners.context), true;
      case 2: return listeners.fn.call(listeners.context, a1), true;
      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
    }

    for (i = 1, args = new Array(len -1); i < len; i++) {
      args[i - 1] = arguments[i];
    }

    listeners.fn.apply(listeners.context, args);
  } else {
    var length = listeners.length
      , j;

    for (i = 0; i < length; i++) {
      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

      switch (len) {
        case 1: listeners[i].fn.call(listeners[i].context); break;
        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
        default:
          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
            args[j - 1] = arguments[j];
          }

          listeners[i].fn.apply(listeners[i].context, args);
      }
    }
  }

  return true;
};

/**
 * Add a listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.on = function on(event, fn, context) {
  return addListener(this, event, fn, context, false);
};

/**
 * Add a one-time listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.once = function once(event, fn, context) {
  return addListener(this, event, fn, context, true);
};

/**
 * Remove the listeners of a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn Only remove the listeners that match this function.
 * @param {*} context Only remove the listeners that have this context.
 * @param {Boolean} once Only remove one-time listeners.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return this;
  if (!fn) {
    clearEvent(this, evt);
    return this;
  }

  var listeners = this._events[evt];

  if (listeners.fn) {
    if (
      listeners.fn === fn &&
      (!once || listeners.once) &&
      (!context || listeners.context === context)
    ) {
      clearEvent(this, evt);
    }
  } else {
    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
      if (
        listeners[i].fn !== fn ||
        (once && !listeners[i].once) ||
        (context && listeners[i].context !== context)
      ) {
        events.push(listeners[i]);
      }
    }

    //
    // Reset the array, or remove it completely if we have no more listeners.
    //
    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
    else clearEvent(this, evt);
  }

  return this;
};

/**
 * Remove all listeners, or those of the specified event.
 *
 * @param {(String|Symbol)} [event] The event name.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
  var evt;

  if (event) {
    evt = prefix ? prefix + event : event;
    if (this._events[evt]) clearEvent(this, evt);
  } else {
    this._events = new Events();
    this._eventsCount = 0;
  }

  return this;
};

//
// Alias methods names because people roll like that.
//
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.addListener = EventEmitter.prototype.on;

//
// Expose the prefix.
//
EventEmitter.prefixed = prefix;

//
// Allow `EventEmitter` to be imported as module namespace.
//
EventEmitter.EventEmitter = EventEmitter;

//
// Expose the module.
//
if (true) {
  module.exports = EventEmitter;
}


/***/ }),

/***/ "./node_modules/focus-trap/dist/focus-trap.esm.js":
/*!********************************************************!*\
  !*** ./node_modules/focus-trap/dist/focus-trap.esm.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createFocusTrap: () => (/* binding */ createFocusTrap)
/* harmony export */ });
/* harmony import */ var tabbable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tabbable */ "./node_modules/tabbable/dist/index.esm.js");
/*!
* focus-trap 6.9.4
* @license MIT, https://github.com/focus-trap/focus-trap/blob/master/LICENSE
*/


function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var activeFocusTraps = function () {
  var trapQueue = [];
  return {
    activateTrap: function activateTrap(trap) {
      if (trapQueue.length > 0) {
        var activeTrap = trapQueue[trapQueue.length - 1];

        if (activeTrap !== trap) {
          activeTrap.pause();
        }
      }

      var trapIndex = trapQueue.indexOf(trap);

      if (trapIndex === -1) {
        trapQueue.push(trap);
      } else {
        // move this existing trap to the front of the queue
        trapQueue.splice(trapIndex, 1);
        trapQueue.push(trap);
      }
    },
    deactivateTrap: function deactivateTrap(trap) {
      var trapIndex = trapQueue.indexOf(trap);

      if (trapIndex !== -1) {
        trapQueue.splice(trapIndex, 1);
      }

      if (trapQueue.length > 0) {
        trapQueue[trapQueue.length - 1].unpause();
      }
    }
  };
}();

var isSelectableInput = function isSelectableInput(node) {
  return node.tagName && node.tagName.toLowerCase() === 'input' && typeof node.select === 'function';
};

var isEscapeEvent = function isEscapeEvent(e) {
  return e.key === 'Escape' || e.key === 'Esc' || e.keyCode === 27;
};

var isTabEvent = function isTabEvent(e) {
  return e.key === 'Tab' || e.keyCode === 9;
};

var delay = function delay(fn) {
  return setTimeout(fn, 0);
}; // Array.find/findIndex() are not supported on IE; this replicates enough
//  of Array.findIndex() for our needs


var findIndex = function findIndex(arr, fn) {
  var idx = -1;
  arr.every(function (value, i) {
    if (fn(value)) {
      idx = i;
      return false; // break
    }

    return true; // next
  });
  return idx;
};
/**
 * Get an option's value when it could be a plain value, or a handler that provides
 *  the value.
 * @param {*} value Option's value to check.
 * @param {...*} [params] Any parameters to pass to the handler, if `value` is a function.
 * @returns {*} The `value`, or the handler's returned value.
 */


var valueOrHandler = function valueOrHandler(value) {
  for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    params[_key - 1] = arguments[_key];
  }

  return typeof value === 'function' ? value.apply(void 0, params) : value;
};

var getActualTarget = function getActualTarget(event) {
  // NOTE: If the trap is _inside_ a shadow DOM, event.target will always be the
  //  shadow host. However, event.target.composedPath() will be an array of
  //  nodes "clicked" from inner-most (the actual element inside the shadow) to
  //  outer-most (the host HTML document). If we have access to composedPath(),
  //  then use its first element; otherwise, fall back to event.target (and
  //  this only works for an _open_ shadow DOM; otherwise,
  //  composedPath()[0] === event.target always).
  return event.target.shadowRoot && typeof event.composedPath === 'function' ? event.composedPath()[0] : event.target;
};

var createFocusTrap = function createFocusTrap(elements, userOptions) {
  // SSR: a live trap shouldn't be created in this type of environment so this
  //  should be safe code to execute if the `document` option isn't specified
  var doc = (userOptions === null || userOptions === void 0 ? void 0 : userOptions.document) || document;

  var config = _objectSpread2({
    returnFocusOnDeactivate: true,
    escapeDeactivates: true,
    delayInitialFocus: true
  }, userOptions);

  var state = {
    // containers given to createFocusTrap()
    // @type {Array<HTMLElement>}
    containers: [],
    // list of objects identifying tabbable nodes in `containers` in the trap
    // NOTE: it's possible that a group has no tabbable nodes if nodes get removed while the trap
    //  is active, but the trap should never get to a state where there isn't at least one group
    //  with at least one tabbable node in it (that would lead to an error condition that would
    //  result in an error being thrown)
    // @type {Array<{
    //   container: HTMLElement,
    //   tabbableNodes: Array<HTMLElement>, // empty if none
    //   focusableNodes: Array<HTMLElement>, // empty if none
    //   firstTabbableNode: HTMLElement|null,
    //   lastTabbableNode: HTMLElement|null,
    //   nextTabbableNode: (node: HTMLElement, forward: boolean) => HTMLElement|undefined
    // }>}
    containerGroups: [],
    // same order/length as `containers` list
    // references to objects in `containerGroups`, but only those that actually have
    //  tabbable nodes in them
    // NOTE: same order as `containers` and `containerGroups`, but __not necessarily__
    //  the same length
    tabbableGroups: [],
    nodeFocusedBeforeActivation: null,
    mostRecentlyFocusedNode: null,
    active: false,
    paused: false,
    // timer ID for when delayInitialFocus is true and initial focus in this trap
    //  has been delayed during activation
    delayInitialFocusTimer: undefined
  };
  var trap; // eslint-disable-line prefer-const -- some private functions reference it, and its methods reference private functions, so we must declare here and define later

  /**
   * Gets a configuration option value.
   * @param {Object|undefined} configOverrideOptions If true, and option is defined in this set,
   *  value will be taken from this object. Otherwise, value will be taken from base configuration.
   * @param {string} optionName Name of the option whose value is sought.
   * @param {string|undefined} [configOptionName] Name of option to use __instead of__ `optionName`
   *  IIF `configOverrideOptions` is not defined. Otherwise, `optionName` is used.
   */

  var getOption = function getOption(configOverrideOptions, optionName, configOptionName) {
    return configOverrideOptions && configOverrideOptions[optionName] !== undefined ? configOverrideOptions[optionName] : config[configOptionName || optionName];
  };
  /**
   * Finds the index of the container that contains the element.
   * @param {HTMLElement} element
   * @returns {number} Index of the container in either `state.containers` or
   *  `state.containerGroups` (the order/length of these lists are the same); -1
   *  if the element isn't found.
   */


  var findContainerIndex = function findContainerIndex(element) {
    // NOTE: search `containerGroups` because it's possible a group contains no tabbable
    //  nodes, but still contains focusable nodes (e.g. if they all have `tabindex=-1`)
    //  and we still need to find the element in there
    return state.containerGroups.findIndex(function (_ref) {
      var container = _ref.container,
          tabbableNodes = _ref.tabbableNodes;
      return container.contains(element) || // fall back to explicit tabbable search which will take into consideration any
      //  web components if the `tabbableOptions.getShadowRoot` option was used for
      //  the trap, enabling shadow DOM support in tabbable (`Node.contains()` doesn't
      //  look inside web components even if open)
      tabbableNodes.find(function (node) {
        return node === element;
      });
    });
  };
  /**
   * Gets the node for the given option, which is expected to be an option that
   *  can be either a DOM node, a string that is a selector to get a node, `false`
   *  (if a node is explicitly NOT given), or a function that returns any of these
   *  values.
   * @param {string} optionName
   * @returns {undefined | false | HTMLElement | SVGElement} Returns
   *  `undefined` if the option is not specified; `false` if the option
   *  resolved to `false` (node explicitly not given); otherwise, the resolved
   *  DOM node.
   * @throws {Error} If the option is set, not `false`, and is not, or does not
   *  resolve to a node.
   */


  var getNodeForOption = function getNodeForOption(optionName) {
    var optionValue = config[optionName];

    if (typeof optionValue === 'function') {
      for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        params[_key2 - 1] = arguments[_key2];
      }

      optionValue = optionValue.apply(void 0, params);
    }

    if (optionValue === true) {
      optionValue = undefined; // use default value
    }

    if (!optionValue) {
      if (optionValue === undefined || optionValue === false) {
        return optionValue;
      } // else, empty string (invalid), null (invalid), 0 (invalid)


      throw new Error("`".concat(optionName, "` was specified but was not a node, or did not return a node"));
    }

    var node = optionValue; // could be HTMLElement, SVGElement, or non-empty string at this point

    if (typeof optionValue === 'string') {
      node = doc.querySelector(optionValue); // resolve to node, or null if fails

      if (!node) {
        throw new Error("`".concat(optionName, "` as selector refers to no known node"));
      }
    }

    return node;
  };

  var getInitialFocusNode = function getInitialFocusNode() {
    var node = getNodeForOption('initialFocus'); // false explicitly indicates we want no initialFocus at all

    if (node === false) {
      return false;
    }

    if (node === undefined) {
      // option not specified: use fallback options
      if (findContainerIndex(doc.activeElement) >= 0) {
        node = doc.activeElement;
      } else {
        var firstTabbableGroup = state.tabbableGroups[0];
        var firstTabbableNode = firstTabbableGroup && firstTabbableGroup.firstTabbableNode; // NOTE: `fallbackFocus` option function cannot return `false` (not supported)

        node = firstTabbableNode || getNodeForOption('fallbackFocus');
      }
    }

    if (!node) {
      throw new Error('Your focus-trap needs to have at least one focusable element');
    }

    return node;
  };

  var updateTabbableNodes = function updateTabbableNodes() {
    state.containerGroups = state.containers.map(function (container) {
      var tabbableNodes = (0,tabbable__WEBPACK_IMPORTED_MODULE_0__.tabbable)(container, config.tabbableOptions); // NOTE: if we have tabbable nodes, we must have focusable nodes; focusable nodes
      //  are a superset of tabbable nodes

      var focusableNodes = (0,tabbable__WEBPACK_IMPORTED_MODULE_0__.focusable)(container, config.tabbableOptions);
      return {
        container: container,
        tabbableNodes: tabbableNodes,
        focusableNodes: focusableNodes,
        firstTabbableNode: tabbableNodes.length > 0 ? tabbableNodes[0] : null,
        lastTabbableNode: tabbableNodes.length > 0 ? tabbableNodes[tabbableNodes.length - 1] : null,

        /**
         * Finds the __tabbable__ node that follows the given node in the specified direction,
         *  in this container, if any.
         * @param {HTMLElement} node
         * @param {boolean} [forward] True if going in forward tab order; false if going
         *  in reverse.
         * @returns {HTMLElement|undefined} The next tabbable node, if any.
         */
        nextTabbableNode: function nextTabbableNode(node) {
          var forward = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
          // NOTE: If tabindex is positive (in order to manipulate the tab order separate
          //  from the DOM order), this __will not work__ because the list of focusableNodes,
          //  while it contains tabbable nodes, does not sort its nodes in any order other
          //  than DOM order, because it can't: Where would you place focusable (but not
          //  tabbable) nodes in that order? They have no order, because they aren't tabbale...
          // Support for positive tabindex is already broken and hard to manage (possibly
          //  not supportable, TBD), so this isn't going to make things worse than they
          //  already are, and at least makes things better for the majority of cases where
          //  tabindex is either 0/unset or negative.
          // FYI, positive tabindex issue: https://github.com/focus-trap/focus-trap/issues/375
          var nodeIdx = focusableNodes.findIndex(function (n) {
            return n === node;
          });

          if (nodeIdx < 0) {
            return undefined;
          }

          if (forward) {
            return focusableNodes.slice(nodeIdx + 1).find(function (n) {
              return (0,tabbable__WEBPACK_IMPORTED_MODULE_0__.isTabbable)(n, config.tabbableOptions);
            });
          }

          return focusableNodes.slice(0, nodeIdx).reverse().find(function (n) {
            return (0,tabbable__WEBPACK_IMPORTED_MODULE_0__.isTabbable)(n, config.tabbableOptions);
          });
        }
      };
    });
    state.tabbableGroups = state.containerGroups.filter(function (group) {
      return group.tabbableNodes.length > 0;
    }); // throw if no groups have tabbable nodes and we don't have a fallback focus node either

    if (state.tabbableGroups.length <= 0 && !getNodeForOption('fallbackFocus') // returning false not supported for this option
    ) {
      throw new Error('Your focus-trap must have at least one container with at least one tabbable node in it at all times');
    }
  };

  var tryFocus = function tryFocus(node) {
    if (node === false) {
      return;
    }

    if (node === doc.activeElement) {
      return;
    }

    if (!node || !node.focus) {
      tryFocus(getInitialFocusNode());
      return;
    }

    node.focus({
      preventScroll: !!config.preventScroll
    });
    state.mostRecentlyFocusedNode = node;

    if (isSelectableInput(node)) {
      node.select();
    }
  };

  var getReturnFocusNode = function getReturnFocusNode(previousActiveElement) {
    var node = getNodeForOption('setReturnFocus', previousActiveElement);
    return node ? node : node === false ? false : previousActiveElement;
  }; // This needs to be done on mousedown and touchstart instead of click
  // so that it precedes the focus event.


  var checkPointerDown = function checkPointerDown(e) {
    var target = getActualTarget(e);

    if (findContainerIndex(target) >= 0) {
      // allow the click since it ocurred inside the trap
      return;
    }

    if (valueOrHandler(config.clickOutsideDeactivates, e)) {
      // immediately deactivate the trap
      trap.deactivate({
        // if, on deactivation, we should return focus to the node originally-focused
        //  when the trap was activated (or the configured `setReturnFocus` node),
        //  then assume it's also OK to return focus to the outside node that was
        //  just clicked, causing deactivation, as long as that node is focusable;
        //  if it isn't focusable, then return focus to the original node focused
        //  on activation (or the configured `setReturnFocus` node)
        // NOTE: by setting `returnFocus: false`, deactivate() will do nothing,
        //  which will result in the outside click setting focus to the node
        //  that was clicked, whether it's focusable or not; by setting
        //  `returnFocus: true`, we'll attempt to re-focus the node originally-focused
        //  on activation (or the configured `setReturnFocus` node)
        returnFocus: config.returnFocusOnDeactivate && !(0,tabbable__WEBPACK_IMPORTED_MODULE_0__.isFocusable)(target, config.tabbableOptions)
      });
      return;
    } // This is needed for mobile devices.
    // (If we'll only let `click` events through,
    // then on mobile they will be blocked anyways if `touchstart` is blocked.)


    if (valueOrHandler(config.allowOutsideClick, e)) {
      // allow the click outside the trap to take place
      return;
    } // otherwise, prevent the click


    e.preventDefault();
  }; // In case focus escapes the trap for some strange reason, pull it back in.


  var checkFocusIn = function checkFocusIn(e) {
    var target = getActualTarget(e);
    var targetContained = findContainerIndex(target) >= 0; // In Firefox when you Tab out of an iframe the Document is briefly focused.

    if (targetContained || target instanceof Document) {
      if (targetContained) {
        state.mostRecentlyFocusedNode = target;
      }
    } else {
      // escaped! pull it back in to where it just left
      e.stopImmediatePropagation();
      tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());
    }
  }; // Hijack Tab events on the first and last focusable nodes of the trap,
  // in order to prevent focus from escaping. If it escapes for even a
  // moment it can end up scrolling the page and causing confusion so we
  // kind of need to capture the action at the keydown phase.


  var checkTab = function checkTab(e) {
    var target = getActualTarget(e);
    updateTabbableNodes();
    var destinationNode = null;

    if (state.tabbableGroups.length > 0) {
      // make sure the target is actually contained in a group
      // NOTE: the target may also be the container itself if it's focusable
      //  with tabIndex='-1' and was given initial focus
      var containerIndex = findContainerIndex(target);
      var containerGroup = containerIndex >= 0 ? state.containerGroups[containerIndex] : undefined;

      if (containerIndex < 0) {
        // target not found in any group: quite possible focus has escaped the trap,
        //  so bring it back in to...
        if (e.shiftKey) {
          // ...the last node in the last group
          destinationNode = state.tabbableGroups[state.tabbableGroups.length - 1].lastTabbableNode;
        } else {
          // ...the first node in the first group
          destinationNode = state.tabbableGroups[0].firstTabbableNode;
        }
      } else if (e.shiftKey) {
        // REVERSE
        // is the target the first tabbable node in a group?
        var startOfGroupIndex = findIndex(state.tabbableGroups, function (_ref2) {
          var firstTabbableNode = _ref2.firstTabbableNode;
          return target === firstTabbableNode;
        });

        if (startOfGroupIndex < 0 && (containerGroup.container === target || (0,tabbable__WEBPACK_IMPORTED_MODULE_0__.isFocusable)(target, config.tabbableOptions) && !(0,tabbable__WEBPACK_IMPORTED_MODULE_0__.isTabbable)(target, config.tabbableOptions) && !containerGroup.nextTabbableNode(target, false))) {
          // an exception case where the target is either the container itself, or
          //  a non-tabbable node that was given focus (i.e. tabindex is negative
          //  and user clicked on it or node was programmatically given focus)
          //  and is not followed by any other tabbable node, in which
          //  case, we should handle shift+tab as if focus were on the container's
          //  first tabbable node, and go to the last tabbable node of the LAST group
          startOfGroupIndex = containerIndex;
        }

        if (startOfGroupIndex >= 0) {
          // YES: then shift+tab should go to the last tabbable node in the
          //  previous group (and wrap around to the last tabbable node of
          //  the LAST group if it's the first tabbable node of the FIRST group)
          var destinationGroupIndex = startOfGroupIndex === 0 ? state.tabbableGroups.length - 1 : startOfGroupIndex - 1;
          var destinationGroup = state.tabbableGroups[destinationGroupIndex];
          destinationNode = destinationGroup.lastTabbableNode;
        }
      } else {
        // FORWARD
        // is the target the last tabbable node in a group?
        var lastOfGroupIndex = findIndex(state.tabbableGroups, function (_ref3) {
          var lastTabbableNode = _ref3.lastTabbableNode;
          return target === lastTabbableNode;
        });

        if (lastOfGroupIndex < 0 && (containerGroup.container === target || (0,tabbable__WEBPACK_IMPORTED_MODULE_0__.isFocusable)(target, config.tabbableOptions) && !(0,tabbable__WEBPACK_IMPORTED_MODULE_0__.isTabbable)(target, config.tabbableOptions) && !containerGroup.nextTabbableNode(target))) {
          // an exception case where the target is the container itself, or
          //  a non-tabbable node that was given focus (i.e. tabindex is negative
          //  and user clicked on it or node was programmatically given focus)
          //  and is not followed by any other tabbable node, in which
          //  case, we should handle tab as if focus were on the container's
          //  last tabbable node, and go to the first tabbable node of the FIRST group
          lastOfGroupIndex = containerIndex;
        }

        if (lastOfGroupIndex >= 0) {
          // YES: then tab should go to the first tabbable node in the next
          //  group (and wrap around to the first tabbable node of the FIRST
          //  group if it's the last tabbable node of the LAST group)
          var _destinationGroupIndex = lastOfGroupIndex === state.tabbableGroups.length - 1 ? 0 : lastOfGroupIndex + 1;

          var _destinationGroup = state.tabbableGroups[_destinationGroupIndex];
          destinationNode = _destinationGroup.firstTabbableNode;
        }
      }
    } else {
      // NOTE: the fallbackFocus option does not support returning false to opt-out
      destinationNode = getNodeForOption('fallbackFocus');
    }

    if (destinationNode) {
      e.preventDefault();
      tryFocus(destinationNode);
    } // else, let the browser take care of [shift+]tab and move the focus

  };

  var checkKey = function checkKey(e) {
    if (isEscapeEvent(e) && valueOrHandler(config.escapeDeactivates, e) !== false) {
      e.preventDefault();
      trap.deactivate();
      return;
    }

    if (isTabEvent(e)) {
      checkTab(e);
      return;
    }
  };

  var checkClick = function checkClick(e) {
    var target = getActualTarget(e);

    if (findContainerIndex(target) >= 0) {
      return;
    }

    if (valueOrHandler(config.clickOutsideDeactivates, e)) {
      return;
    }

    if (valueOrHandler(config.allowOutsideClick, e)) {
      return;
    }

    e.preventDefault();
    e.stopImmediatePropagation();
  }; //
  // EVENT LISTENERS
  //


  var addListeners = function addListeners() {
    if (!state.active) {
      return;
    } // There can be only one listening focus trap at a time


    activeFocusTraps.activateTrap(trap); // Delay ensures that the focused element doesn't capture the event
    // that caused the focus trap activation.

    state.delayInitialFocusTimer = config.delayInitialFocus ? delay(function () {
      tryFocus(getInitialFocusNode());
    }) : tryFocus(getInitialFocusNode());
    doc.addEventListener('focusin', checkFocusIn, true);
    doc.addEventListener('mousedown', checkPointerDown, {
      capture: true,
      passive: false
    });
    doc.addEventListener('touchstart', checkPointerDown, {
      capture: true,
      passive: false
    });
    doc.addEventListener('click', checkClick, {
      capture: true,
      passive: false
    });
    doc.addEventListener('keydown', checkKey, {
      capture: true,
      passive: false
    });
    return trap;
  };

  var removeListeners = function removeListeners() {
    if (!state.active) {
      return;
    }

    doc.removeEventListener('focusin', checkFocusIn, true);
    doc.removeEventListener('mousedown', checkPointerDown, true);
    doc.removeEventListener('touchstart', checkPointerDown, true);
    doc.removeEventListener('click', checkClick, true);
    doc.removeEventListener('keydown', checkKey, true);
    return trap;
  }; //
  // TRAP DEFINITION
  //


  trap = {
    get active() {
      return state.active;
    },

    get paused() {
      return state.paused;
    },

    activate: function activate(activateOptions) {
      if (state.active) {
        return this;
      }

      var onActivate = getOption(activateOptions, 'onActivate');
      var onPostActivate = getOption(activateOptions, 'onPostActivate');
      var checkCanFocusTrap = getOption(activateOptions, 'checkCanFocusTrap');

      if (!checkCanFocusTrap) {
        updateTabbableNodes();
      }

      state.active = true;
      state.paused = false;
      state.nodeFocusedBeforeActivation = doc.activeElement;

      if (onActivate) {
        onActivate();
      }

      var finishActivation = function finishActivation() {
        if (checkCanFocusTrap) {
          updateTabbableNodes();
        }

        addListeners();

        if (onPostActivate) {
          onPostActivate();
        }
      };

      if (checkCanFocusTrap) {
        checkCanFocusTrap(state.containers.concat()).then(finishActivation, finishActivation);
        return this;
      }

      finishActivation();
      return this;
    },
    deactivate: function deactivate(deactivateOptions) {
      if (!state.active) {
        return this;
      }

      var options = _objectSpread2({
        onDeactivate: config.onDeactivate,
        onPostDeactivate: config.onPostDeactivate,
        checkCanReturnFocus: config.checkCanReturnFocus
      }, deactivateOptions);

      clearTimeout(state.delayInitialFocusTimer); // noop if undefined

      state.delayInitialFocusTimer = undefined;
      removeListeners();
      state.active = false;
      state.paused = false;
      activeFocusTraps.deactivateTrap(trap);
      var onDeactivate = getOption(options, 'onDeactivate');
      var onPostDeactivate = getOption(options, 'onPostDeactivate');
      var checkCanReturnFocus = getOption(options, 'checkCanReturnFocus');
      var returnFocus = getOption(options, 'returnFocus', 'returnFocusOnDeactivate');

      if (onDeactivate) {
        onDeactivate();
      }

      var finishDeactivation = function finishDeactivation() {
        delay(function () {
          if (returnFocus) {
            tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));
          }

          if (onPostDeactivate) {
            onPostDeactivate();
          }
        });
      };

      if (returnFocus && checkCanReturnFocus) {
        checkCanReturnFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation)).then(finishDeactivation, finishDeactivation);
        return this;
      }

      finishDeactivation();
      return this;
    },
    pause: function pause() {
      if (state.paused || !state.active) {
        return this;
      }

      state.paused = true;
      removeListeners();
      return this;
    },
    unpause: function unpause() {
      if (!state.paused || !state.active) {
        return this;
      }

      state.paused = false;
      updateTabbableNodes();
      addListeners();
      return this;
    },
    updateContainerElements: function updateContainerElements(containerElements) {
      var elementsAsArray = [].concat(containerElements).filter(Boolean);
      state.containers = elementsAsArray.map(function (element) {
        return typeof element === 'string' ? doc.querySelector(element) : element;
      });

      if (state.active) {
        updateTabbableNodes();
      }

      return this;
    }
  }; // initialize container elements

  trap.updateContainerElements(elements);
  return trap;
};


//# sourceMappingURL=focus-trap.esm.js.map


/***/ }),

/***/ "./node_modules/focus-within-polyfill/dist/focus-within-polyfill.js":
/*!**************************************************************************!*\
  !*** ./node_modules/focus-within-polyfill/dist/focus-within-polyfill.js ***!
  \**************************************************************************/
/***/ (() => {

"use strict";
(function(){(function(){function e(a){for(var b=[a];a=a.parentNode||a.host||a.defaultView;)b.push(a);return b}function f(a){return function(b){var c="undefined"!==typeof b.getAttribute?b.getAttribute("class")||"":void 0;"undefined"!==typeof c&&-1===c.indexOf(a)&&b.setAttribute("class",c.concat(" ",a).trim())}}function g(a){return function(b){var c="undefined"!==typeof b.getAttribute?b.getAttribute("class")||"":void 0;if(c){var d=c.indexOf(a);0<=d&&(0===d||0<=h.indexOf(c.charAt(d-1)))&&
(c=c.replace(a,"").trim(),""===c?b.removeAttribute("class"):b.setAttribute("class",c))}}}function k(){var a=function(a){function c(){b=!1;"blur"===a.type&&Array.prototype.slice.call(e(a.target)).forEach(g("focus-within"));"focus"===a.type&&Array.prototype.slice.call(e(a.target)).forEach(f("focus-within"))}if(!b){window.requestAnimationFrame(c);var b=!0}};document.addEventListener("focus",a,!0);document.addEventListener("blur",a,!0);f("js-focus-within")(document.body);return!0}var h=["\n","\t"," ",
"\r"];try{return"undefined"!==typeof window&&!document.querySelector(":focus-within")}catch(a){return k()}})()})();
//# sourceMappingURL=focus-within-polyfill.js.map


/***/ }),

/***/ "./node_modules/foundation-sites/js/foundation/foundation.dropdown.js":
/*!****************************************************************************!*\
  !*** ./node_modules/foundation-sites/js/foundation/foundation.dropdown.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

/* provided dependency */ var jQuery = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");
;(function ($, window, document, undefined) {
  'use strict';

  Foundation.libs.dropdown = {
    name : 'dropdown',

    version : '5.5.3',

    settings : {
      active_class : 'open',
      disabled_class : 'disabled',
      mega_class : 'mega',
      align : 'bottom',
      is_hover : false,
      hover_timeout : 150,
      opened : function () {},
      closed : function () {}
    },

    init : function (scope, method, options) {
      Foundation.inherit(this, 'throttle');

      $.extend(true, this.settings, method, options);
      this.bindings(method, options);
    },

    events : function (scope) {
      var self = this,
          S = self.S;

      S(this.scope)
        .off('.dropdown')
        .on('click.fndtn.dropdown', '[' + this.attr_name() + ']', function (e) {
          var settings = S(this).data(self.attr_name(true) + '-init') || self.settings;
          if (!settings.is_hover || Modernizr.touch) {
            e.preventDefault();
            if (S(this).parent('[data-reveal-id]').length) {
              e.stopPropagation();
            }
            self.toggle($(this));
          }
        })
        .on('mouseenter.fndtn.dropdown', '[' + this.attr_name() + '], [' + this.attr_name() + '-content]', function (e) {
          var $this = S(this),
              dropdown,
              target;

          clearTimeout(self.timeout);

          if ($this.data(self.data_attr())) {
            dropdown = S('#' + $this.data(self.data_attr()));
            target = $this;
          } else {
            dropdown = $this;
            target = S('[' + self.attr_name() + '="' + dropdown.attr('id') + '"]');
          }

          var settings = target.data(self.attr_name(true) + '-init') || self.settings;

          if (S(e.currentTarget).data(self.data_attr()) && settings.is_hover) {
            self.closeall.call(self);
          }

          if (settings.is_hover) {
            self.open.apply(self, [dropdown, target]);
          }
        })
        .on('mouseleave.fndtn.dropdown', '[' + this.attr_name() + '], [' + this.attr_name() + '-content]', function (e) {
          var $this = S(this);
          var settings;

          if ($this.data(self.data_attr())) {
              settings = $this.data(self.data_attr(true) + '-init') || self.settings;
          } else {
              var target   = S('[' + self.attr_name() + '="' + S(this).attr('id') + '"]'),
                  settings = target.data(self.attr_name(true) + '-init') || self.settings;
          }

          self.timeout = setTimeout(function () {
            if ($this.data(self.data_attr())) {
              if (settings.is_hover) {
                self.close.call(self, S('#' + $this.data(self.data_attr())));
              }
            } else {
              if (settings.is_hover) {
                self.close.call(self, $this);
              }
            }
          }.bind(this), settings.hover_timeout);
        })
        .on('click.fndtn.dropdown', function (e) {
          var parent = S(e.target).closest('[' + self.attr_name() + '-content]');
          var links  = parent.find('a');

          if (links.length > 0 && parent.attr('aria-autoclose') !== 'false') {
              self.close.call(self, S('[' + self.attr_name() + '-content]'));
          }

          if (e.target !== document && !$.contains(document.documentElement, e.target)) {
            return;
          }

          if (S(e.target).closest('[' + self.attr_name() + ']').length > 0) {
            return;
          }

          if (!(S(e.target).data('revealId')) &&
            (parent.length > 0 && (S(e.target).is('[' + self.attr_name() + '-content]') ||
              $.contains(parent.first()[0], e.target)))) {
            e.stopPropagation();
            return;
          }

          self.close.call(self, S('[' + self.attr_name() + '-content]'));
        })
        .on('opened.fndtn.dropdown', '[' + self.attr_name() + '-content]', function () {
          self.settings.opened.call(this);
        })
        .on('closed.fndtn.dropdown', '[' + self.attr_name() + '-content]', function () {
          self.settings.closed.call(this);
        });

      S(window)
        .off('.dropdown')
        .on('resize.fndtn.dropdown', self.throttle(function () {
          self.resize.call(self);
        }, 50));

      this.resize();
    },

    close : function (dropdown) {
      var self = this;
      dropdown.each(function (idx) {
        var original_target = $('[' + self.attr_name() + '=' + dropdown[idx].id + ']') || $('aria-controls=' + dropdown[idx].id + ']');
        original_target.attr('aria-expanded', 'false');
        if (self.S(this).hasClass(self.settings.active_class)) {
          self.S(this)
            .css(Foundation.rtl ? 'right' : 'left', '-99999px')
            .attr('aria-hidden', 'true')
            .removeClass(self.settings.active_class)
            .prev('[' + self.attr_name() + ']')
            .removeClass(self.settings.active_class)
            .removeData('target');

          self.S(this).trigger('closed.fndtn.dropdown', [dropdown]);
        }
      });
      dropdown.removeClass('f-open-' + this.attr_name(true));
    },

    closeall : function () {
      var self = this;
      $.each(self.S('.f-open-' + this.attr_name(true)), function () {
        self.close.call(self, self.S(this));
      });
    },

    open : function (dropdown, target) {
      this
        .css(dropdown
        .addClass(this.settings.active_class), target);
      dropdown.prev('[' + this.attr_name() + ']').addClass(this.settings.active_class);
      dropdown.data('target', target.get(0)).trigger('opened.fndtn.dropdown', [dropdown, target]);
      dropdown.attr('aria-hidden', 'false');
      target.attr('aria-expanded', 'true');
      dropdown.focus();
      dropdown.addClass('f-open-' + this.attr_name(true));
    },

    data_attr : function () {
      if (this.namespace.length > 0) {
        return this.namespace + '-' + this.name;
      }

      return this.name;
    },

    toggle : function (target) {
      if (target.hasClass(this.settings.disabled_class)) {
        return;
      }
      var dropdown = this.S('#' + target.data(this.data_attr()));
      if (dropdown.length === 0) {
        // No dropdown found, not continuing
        return;
      }

      this.close.call(this, this.S('[' + this.attr_name() + '-content]').not(dropdown));

      if (dropdown.hasClass(this.settings.active_class)) {
        this.close.call(this, dropdown);
        if (dropdown.data('target') !== target.get(0)) {
          this.open.call(this, dropdown, target);
        }
      } else {
        this.open.call(this, dropdown, target);
      }
    },

    resize : function () {
      var dropdown = this.S('[' + this.attr_name() + '-content].open');
      var target = $(dropdown.data("target"));

      if (dropdown.length && target.length) {
        this.css(dropdown, target);
      }
    },

    css : function (dropdown, target) {
      var left_offset = Math.max((target.width() - dropdown.width()) / 2, 8),
          settings = target.data(this.attr_name(true) + '-init') || this.settings,
          parentOverflow = dropdown.parent().css('overflow-y') || dropdown.parent().css('overflow');

      this.clear_idx();



      if (this.small()) {
        var p = this.dirs.bottom.call(dropdown, target, settings);

        dropdown.attr('style', '').removeClass('drop-left drop-right drop-top').css({
          position : 'absolute',
          width : '95%',
          'max-width' : 'none',
          top : p.top
        });

        dropdown.css(Foundation.rtl ? 'right' : 'left', left_offset);
      }
      // detect if dropdown is in an overflow container
      else if (parentOverflow !== 'visible') {
        var offset = target[0].offsetTop + target[0].offsetHeight;

        dropdown.attr('style', '').css({
          position : 'absolute',
          top : offset
        });

        dropdown.css(Foundation.rtl ? 'right' : 'left', left_offset);
      }
      else {

        this.style(dropdown, target, settings);
      }

      return dropdown;
    },

    style : function (dropdown, target, settings) {
      var css = $.extend({position : 'absolute'},
        this.dirs[settings.align].call(dropdown, target, settings));

      dropdown.attr('style', '').css(css);
    },

    // return CSS property object
    // `this` is the dropdown
    dirs : {
      // Calculate target offset
      _base : function (t, s) {
        var o_p = this.offsetParent(),
            o = o_p.offset(),
            p = t.offset();

        p.top -= o.top;
        p.left -= o.left;

        //set some flags on the p object to pass along
        p.missRight = false;
        p.missTop = false;
        p.missLeft = false;
        p.leftRightFlag = false;

        //lets see if the panel will be off the screen
        //get the actual width of the page and store it
        var actualBodyWidth;
        var windowWidth = window.innerWidth;
        
        if (document.getElementsByClassName('row')[0]) {
          actualBodyWidth = document.getElementsByClassName('row')[0].clientWidth;
        } else {
          actualBodyWidth = windowWidth;
        }

        var actualMarginWidth = (windowWidth - actualBodyWidth) / 2;
        var actualBoundary = actualBodyWidth;

        if (!this.hasClass('mega') && !s.ignore_repositioning) {
          var outerWidth = this.outerWidth();
          var o_left = t.offset().left;
		  
          //miss top
          if (t.offset().top <= this.outerHeight()) {
            p.missTop = true;
            actualBoundary = windowWidth - actualMarginWidth;
            p.leftRightFlag = true;
          }

          //miss right
          if (o_left + outerWidth > o_left + actualMarginWidth && o_left - actualMarginWidth > outerWidth) {
            p.missRight = true;
            p.missLeft = false;
          }

          //miss left
          if (o_left - outerWidth <= 0) {
            p.missLeft = true;
            p.missRight = false;
          }
        }

        return p;
      },

      top : function (t, s) {
        var self = Foundation.libs.dropdown,
            p = self.dirs._base.call(this, t, s);

        this.addClass('drop-top');

        if (p.missTop == true) {
          p.top = p.top + t.outerHeight() + this.outerHeight();
          this.removeClass('drop-top');
        }

        if (p.missRight == true) {
          p.left = p.left - this.outerWidth() + t.outerWidth();
        }

        if (t.outerWidth() < this.outerWidth() || self.small() || this.hasClass(s.mega_menu)) {
          self.adjust_pip(this, t, s, p);
        }

        if (Foundation.rtl) {
          return {left : p.left - this.outerWidth() + t.outerWidth(),
            top : p.top - this.outerHeight()};
        }

        return {left : p.left, top : p.top - this.outerHeight()};
      },

      bottom : function (t, s) {
        var self = Foundation.libs.dropdown,
            p = self.dirs._base.call(this, t, s);

        if (p.missRight == true) {
          p.left = p.left - this.outerWidth() + t.outerWidth();
        }

        if (t.outerWidth() < this.outerWidth() || self.small() || this.hasClass(s.mega_menu)) {
          self.adjust_pip(this, t, s, p);
        }

        if (self.rtl) {
          return {left : p.left - this.outerWidth() + t.outerWidth(), top : p.top + t.outerHeight()};
        }

        return {left : p.left, top : p.top + t.outerHeight()};
      },

      left : function (t, s) {
        var p = Foundation.libs.dropdown.dirs._base.call(this, t, s);

        this.addClass('drop-left');

        if (p.missLeft == true) {
          p.left =  p.left + this.outerWidth();
          p.top = p.top + t.outerHeight();
          this.removeClass('drop-left');
        }

        return {left : p.left - this.outerWidth(), top : p.top};
      },

      right : function (t, s) {
        var p = Foundation.libs.dropdown.dirs._base.call(this, t, s);

        this.addClass('drop-right');

        if (p.missRight == true) {
          p.left = p.left - this.outerWidth();
          p.top = p.top + t.outerHeight();
          this.removeClass('drop-right');
        } else {
          p.triggeredRight = true;
        }

        var self = Foundation.libs.dropdown;

        if (t.outerWidth() < this.outerWidth() || self.small() || this.hasClass(s.mega_menu)) {
          self.adjust_pip(this, t, s, p);
        }

        return {left : p.left + t.outerWidth(), top : p.top};
      }
    },

    // Insert rule to style psuedo elements
    adjust_pip : function (dropdown, target, settings, position) {
      var sheet = Foundation.stylesheet,
          pip_offset_base = 8;

      if (dropdown.hasClass(settings.mega_class)) {
        pip_offset_base = position.left + (target.outerWidth() / 2) - 8;
      } else if (this.small()) {
        pip_offset_base += position.left - 8;
      }

      this.rule_idx = sheet.cssRules.length;

      //default
      var sel_before = '.f-dropdown.open:before',
          sel_after  = '.f-dropdown.open:after',
          css_before = 'left: ' + pip_offset_base + 'px;',
          css_after  = 'left: ' + (pip_offset_base - 1) + 'px;';

      if (position.missRight == true) {
        pip_offset_base = dropdown.outerWidth() - 23;
        sel_before = '.f-dropdown.open:before',
        sel_after  = '.f-dropdown.open:after',
        css_before = 'left: ' + pip_offset_base + 'px;',
        css_after  = 'left: ' + (pip_offset_base - 1) + 'px;';
      }

      //just a case where right is fired, but its not missing right
      if (position.triggeredRight == true) {
        sel_before = '.f-dropdown.open:before',
        sel_after  = '.f-dropdown.open:after',
        css_before = 'left:-12px;',
        css_after  = 'left:-14px;';
      }

      if (sheet.insertRule) {
        sheet.insertRule([sel_before, '{', css_before, '}'].join(' '), this.rule_idx);
        sheet.insertRule([sel_after, '{', css_after, '}'].join(' '), this.rule_idx + 1);
      } else {
        sheet.addRule(sel_before, css_before, this.rule_idx);
        sheet.addRule(sel_after, css_after, this.rule_idx + 1);
      }
    },

    // Remove old dropdown rule index
    clear_idx : function () {
      var sheet = Foundation.stylesheet;

      if (typeof this.rule_idx !== 'undefined') {
        sheet.deleteRule(this.rule_idx);
        sheet.deleteRule(this.rule_idx);
        delete this.rule_idx;
      }
    },

    small : function () {
      return matchMedia(Foundation.media_queries.small).matches &&
        !matchMedia(Foundation.media_queries.medium).matches;
    },

    off : function () {
      this.S(this.scope).off('.fndtn.dropdown');
      this.S('html, body').off('.fndtn.dropdown');
      this.S(window).off('.fndtn.dropdown');
      this.S('[data-dropdown-content]').off('.fndtn.dropdown');
    },

    reflow : function () {}
  };
}(jQuery, window, window.document));


/***/ }),

/***/ "./node_modules/foundation-sites/js/foundation/foundation.js":
/*!*******************************************************************!*\
  !*** ./node_modules/foundation-sites/js/foundation/foundation.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

/* provided dependency */ var jQuery = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");
/*
 * Foundation Responsive Library
 * http://foundation.zurb.com
 * Copyright 2015, ZURB
 * Free to use under the MIT license.
 * http://www.opensource.org/licenses/mit-license.php
*/

(function ($, window, document, undefined) {
  'use strict';

  var header_helpers = function (class_array) {
    var head = $('head');
    head.prepend($.map(class_array, function (class_name) {
      if (head.has('.' + class_name).length === 0) {
        return '<meta class="' + class_name + '" />';
      }
    }));
  };

  header_helpers([
    'foundation-mq-small',
    'foundation-mq-small-only',
    'foundation-mq-medium',
    'foundation-mq-medium-only',
    'foundation-mq-large',
    'foundation-mq-large-only',
    'foundation-mq-xlarge',
    'foundation-mq-xlarge-only',
    'foundation-mq-xxlarge',
    'foundation-data-attribute-namespace']);

  // Enable FastClick if present

  $(function () {
    if (typeof FastClick !== 'undefined') {
      // Don't attach to body if undefined
      if (typeof document.body !== 'undefined') {
        FastClick.attach(document.body);
      }
    }
  });

  // private Fast Selector wrapper,
  // returns jQuery object. Only use where
  // getElementById is not available.
  var S = function (selector, context) {
    if (typeof selector === 'string') {
      if (context) {
        var cont;
        if (context.jquery) {
          cont = context[0];
          if (!cont) {
            return context;
          }
        } else {
          cont = context;
        }
        return $(cont.querySelectorAll(selector));
      }

      return $(document.querySelectorAll(selector));
    }

    return $(selector, context);
  };

  // Namespace functions.

  var attr_name = function (init) {
    var arr = [];
    if (!init) {
      arr.push('data');
    }
    if (this.namespace.length > 0) {
      arr.push(this.namespace);
    }
    arr.push(this.name);

    return arr.join('-');
  };

  var add_namespace = function (str) {
    var parts = str.split('-'),
        i = parts.length,
        arr = [];

    while (i--) {
      if (i !== 0) {
        arr.push(parts[i]);
      } else {
        if (this.namespace.length > 0) {
          arr.push(this.namespace, parts[i]);
        } else {
          arr.push(parts[i]);
        }
      }
    }

    return arr.reverse().join('-');
  };

  // Event binding and data-options updating.

  var bindings = function (method, options) {
    var self = this,
        bind = function(){
          var $this = S(this),
              should_bind_events = !$this.data(self.attr_name(true) + '-init');
          $this.data(self.attr_name(true) + '-init', $.extend({}, self.settings, (options || method), self.data_options($this)));

          if (should_bind_events) {
            self.events(this);
          }
        };

    if (S(this.scope).is('[' + this.attr_name() +']')) {
      bind.call(this.scope);
    } else {
      S('[' + this.attr_name() +']', this.scope).each(bind);
    }
    // # Patch to fix #5043 to move this *after* the if/else clause in order for Backbone and similar frameworks to have improved control over event binding and data-options updating.
    if (typeof method === 'string') {
      return this[method].call(this, options);
    }

  };

  var single_image_loaded = function (image, callback) {
    function loaded () {
      callback(image[0]);
    }

    function bindLoad () {
      this.one('load', loaded);

      if (/MSIE (\d+\.\d+);/.test(navigator.userAgent)) {
        var src = this.attr( 'src' ),
            param = src.match( /\?/ ) ? '&' : '?';

        param += 'random=' + (new Date()).getTime();
        this.attr('src', src + param);
      }
    }

    if (!image.attr('src')) {
      loaded();
      return;
    }

    if (image[0].complete || image[0].readyState === 4) {
      loaded();
    } else {
      bindLoad.call(image);
    }
  };

  /*! matchMedia() polyfill - Test a CSS media type/query in JS. Authors & copyright (c) 2012: Scott Jehl, Paul Irish, Nicholas Zakas, David Knight. Dual MIT/BSD license */

  window.matchMedia || (window.matchMedia = function() {
      "use strict";

      // For browsers that support matchMedium api such as IE 9 and webkit
      var styleMedia = (window.styleMedia || window.media);

      // For those that don't support matchMedium
      if (!styleMedia) {
          var style       = document.createElement('style'),
              script      = document.getElementsByTagName('script')[0],
              info        = null;

          style.type  = 'text/css';
          style.id    = 'matchmediajs-test';

          script.parentNode.insertBefore(style, script);

          // 'style.currentStyle' is used by IE <= 8 and 'window.getComputedStyle' for all other browsers
          info = ('getComputedStyle' in window) && window.getComputedStyle(style, null) || style.currentStyle;

          styleMedia = {
              matchMedium: function(media) {
                  var text = '@media ' + media + '{ #matchmediajs-test { width: 1px; } }';

                  // 'style.styleSheet' is used by IE <= 8 and 'style.textContent' for all other browsers
                  if (style.styleSheet) {
                      style.styleSheet.cssText = text;
                  } else {
                      style.textContent = text;
                  }

                  // Test if media query is true or false
                  return info.width === '1px';
              }
          };
      }

      return function(media) {
          return {
              matches: styleMedia.matchMedium(media || 'all'),
              media: media || 'all'
          };
      };
  }());

  /*
   * jquery.requestAnimationFrame
   * https://github.com/gnarf37/jquery-requestAnimationFrame
   * Requires jQuery 1.8+
   *
   * Copyright (c) 2012 Corey Frang
   * Licensed under the MIT license.
   */

  (function(jQuery) {


  // requestAnimationFrame polyfill adapted from Erik Möller
  // fixes from Paul Irish and Tino Zijdel
  // http://paulirish.com/2011/requestanimationframe-for-smart-animating/
  // http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating

  var animating,
      lastTime = 0,
      vendors = ['webkit', 'moz'],
      requestAnimationFrame = window.requestAnimationFrame,
      cancelAnimationFrame = window.cancelAnimationFrame,
      jqueryFxAvailable = 'undefined' !== typeof jQuery.fx;

  for (; lastTime < vendors.length && !requestAnimationFrame; lastTime++) {
    requestAnimationFrame = window[ vendors[lastTime] + 'RequestAnimationFrame' ];
    cancelAnimationFrame = cancelAnimationFrame ||
      window[ vendors[lastTime] + 'CancelAnimationFrame' ] ||
      window[ vendors[lastTime] + 'CancelRequestAnimationFrame' ];
  }

  function raf() {
    if (animating) {
      requestAnimationFrame(raf);

      if (jqueryFxAvailable) {
        jQuery.fx.tick();
      }
    }
  }

  if (requestAnimationFrame) {
    // use rAF
    window.requestAnimationFrame = requestAnimationFrame;
    window.cancelAnimationFrame = cancelAnimationFrame;

    if (jqueryFxAvailable) {
      jQuery.fx.timer = function (timer) {
        if (timer() && jQuery.timers.push(timer) && !animating) {
          animating = true;
          raf();
        }
      };

      jQuery.fx.stop = function () {
        animating = false;
      };
    }
  } else {
    // polyfill
    window.requestAnimationFrame = function (callback) {
      var currTime = new Date().getTime(),
        timeToCall = Math.max(0, 16 - (currTime - lastTime)),
        id = window.setTimeout(function () {
          callback(currTime + timeToCall);
        }, timeToCall);
      lastTime = currTime + timeToCall;
      return id;
    };

    window.cancelAnimationFrame = function (id) {
      clearTimeout(id);
    };

  }

  }( $ ));

  function removeQuotes (string) {
    if (typeof string === 'string' || string instanceof String) {
      string = string.replace(/^['\\/"]+|(;\s?})+|['\\/"]+$/g, '');
    }

    return string;
  }

  function MediaQuery(selector) {
    this.selector = selector;
    this.query = '';
  }

  MediaQuery.prototype.toString = function () {
    return this.query || (this.query = S(this.selector).css('font-family').replace(/^[\/\\'"]+|(;\s?})+|[\/\\'"]+$/g, ''));
  };

  window.Foundation = {
    name : 'Foundation',

    version : '5.5.3',

    media_queries : {
      'small'       : new MediaQuery('.foundation-mq-small'),
      'small-only'  : new MediaQuery('.foundation-mq-small-only'),
      'medium'      : new MediaQuery('.foundation-mq-medium'),
      'medium-only' : new MediaQuery('.foundation-mq-medium-only'),
      'large'       : new MediaQuery('.foundation-mq-large'),
      'large-only'  : new MediaQuery('.foundation-mq-large-only'),
      'xlarge'      : new MediaQuery('.foundation-mq-xlarge'),
      'xlarge-only' : new MediaQuery('.foundation-mq-xlarge-only'),
      'xxlarge'     : new MediaQuery('.foundation-mq-xxlarge')
    },

    stylesheet : $('<style></style>').appendTo('head')[0].sheet,

    global : {
      namespace : undefined
    },

    init : function (scope, libraries, method, options, response) {
      var args = [scope, method, options, response],
          responses = [];

      // check RTL
      this.rtl = /rtl/i.test(S('html').attr('dir'));

      // set foundation global scope
      this.scope = scope || this.scope;

      this.set_namespace();

      if (libraries && typeof libraries === 'string' && !/reflow/i.test(libraries)) {
        if (this.libs.hasOwnProperty(libraries)) {
          responses.push(this.init_lib(libraries, args));
        }
      } else {
        for (var lib in this.libs) {
          responses.push(this.init_lib(lib, libraries));
        }
      }

      S(window).load(function () {
        S(window)
          .trigger('resize.fndtn.clearing')
          .trigger('resize.fndtn.dropdown')
          .trigger('resize.fndtn.equalizer')
          .trigger('resize.fndtn.interchange')
          .trigger('resize.fndtn.joyride')
          .trigger('resize.fndtn.magellan')
          .trigger('resize.fndtn.topbar')
          .trigger('resize.fndtn.slider');
      });

      return scope;
    },

    init_lib : function (lib, args) {
      if (this.libs.hasOwnProperty(lib)) {
        this.patch(this.libs[lib]);

        if (args && args.hasOwnProperty(lib)) {
            if (typeof this.libs[lib].settings !== 'undefined') {
              $.extend(true, this.libs[lib].settings, args[lib]);
            } else if (typeof this.libs[lib].defaults !== 'undefined') {
              $.extend(true, this.libs[lib].defaults, args[lib]);
            }
          return this.libs[lib].init.apply(this.libs[lib], [this.scope, args[lib]]);
        }

        args = args instanceof Array ? args : new Array(args);
        return this.libs[lib].init.apply(this.libs[lib], args);
      }

      return function () {};
    },

    patch : function (lib) {
      lib.scope = this.scope;
      lib.namespace = this.global.namespace;
      lib.rtl = this.rtl;
      lib['data_options'] = this.utils.data_options;
      lib['attr_name'] = attr_name;
      lib['add_namespace'] = add_namespace;
      lib['bindings'] = bindings;
      lib['S'] = this.utils.S;
    },

    inherit : function (scope, methods) {
      var methods_arr = methods.split(' '),
          i = methods_arr.length;

      while (i--) {
        if (this.utils.hasOwnProperty(methods_arr[i])) {
          scope[methods_arr[i]] = this.utils[methods_arr[i]];
        }
      }
    },

    set_namespace : function () {

      // Description:
      //    Don't bother reading the namespace out of the meta tag
      //    if the namespace has been set globally in javascript
      //
      // Example:
      //    Foundation.global.namespace = 'my-namespace';
      // or make it an empty string:
      //    Foundation.global.namespace = '';
      //
      //

      // If the namespace has not been set (is undefined), try to read it out of the meta element.
      // Otherwise use the globally defined namespace, even if it's empty ('')
      var namespace = ( this.global.namespace === undefined ) ? $('.foundation-data-attribute-namespace').css('font-family') : this.global.namespace;

      // Finally, if the namsepace is either undefined or false, set it to an empty string.
      // Otherwise use the namespace value.
      this.global.namespace = ( namespace === undefined || /false/i.test(namespace) ) ? '' : namespace;
    },

    libs : {},

    // methods that can be inherited in libraries
    utils : {

      // Description:
      //    Fast Selector wrapper returns jQuery object. Only use where getElementById
      //    is not available.
      //
      // Arguments:
      //    Selector (String): CSS selector describing the element(s) to be
      //    returned as a jQuery object.
      //
      //    Scope (String): CSS selector describing the area to be searched. Default
      //    is document.
      //
      // Returns:
      //    Element (jQuery Object): jQuery object containing elements matching the
      //    selector within the scope.
      S : S,

      // Description:
      //    Executes a function a max of once every n milliseconds
      //
      // Arguments:
      //    Func (Function): Function to be throttled.
      //
      //    Delay (Integer): Function execution threshold in milliseconds.
      //
      // Returns:
      //    Lazy_function (Function): Function with throttling applied.
      throttle : function (func, delay) {
        var timer = null;

        return function () {
          var context = this, args = arguments;

          if (timer == null) {
            timer = setTimeout(function () {
              func.apply(context, args);
              timer = null;
            }, delay);
          }
        };
      },

      // Description:
      //    Executes a function when it stops being invoked for n seconds
      //    Modified version of _.debounce() http://underscorejs.org
      //
      // Arguments:
      //    Func (Function): Function to be debounced.
      //
      //    Delay (Integer): Function execution threshold in milliseconds.
      //
      //    Immediate (Bool): Whether the function should be called at the beginning
      //    of the delay instead of the end. Default is false.
      //
      // Returns:
      //    Lazy_function (Function): Function with debouncing applied.
      debounce : function (func, delay, immediate) {
        var timeout, result;
        return function () {
          var context = this, args = arguments;
          var later = function () {
            timeout = null;
            if (!immediate) {
              result = func.apply(context, args);
            }
          };
          var callNow = immediate && !timeout;
          clearTimeout(timeout);
          timeout = setTimeout(later, delay);
          if (callNow) {
            result = func.apply(context, args);
          }
          return result;
        };
      },

      // Description:
      //    Parses data-options attribute
      //
      // Arguments:
      //    El (jQuery Object): Element to be parsed.
      //
      // Returns:
      //    Options (Javascript Object): Contents of the element's data-options
      //    attribute.
      data_options : function (el, data_attr_name) {
        data_attr_name = data_attr_name || 'options';
        var opts = {}, ii, p, opts_arr,
            data_options = function (el) {
              var namespace = Foundation.global.namespace;

              if (namespace.length > 0) {
                return el.data(namespace + '-' + data_attr_name);
              }

              return el.data(data_attr_name);
            };

        var cached_options = data_options(el);

        if (typeof cached_options === 'object') {
          return cached_options;
        }

        opts_arr = (cached_options || ':').split(';');
        ii = opts_arr.length;

        function isNumber (o) {
          return !isNaN (o - 0) && o !== null && o !== '' && o !== false && o !== true;
        }

        function trim (str) {
          if (typeof str === 'string') {
            return $.trim(str);
          }
          return str;
        }

        while (ii--) {
          p = opts_arr[ii].split(':');
          p = [p[0], p.slice(1).join(':')];

          if (/true/i.test(p[1])) {
            p[1] = true;
          }
          if (/false/i.test(p[1])) {
            p[1] = false;
          }
          if (isNumber(p[1])) {
            if (p[1].indexOf('.') === -1) {
              p[1] = parseInt(p[1], 10);
            } else {
              p[1] = parseFloat(p[1]);
            }
          }

          if (p.length === 2 && p[0].length > 0) {
            opts[trim(p[0])] = trim(p[1]);
          }
        }

        return opts;
      },

      // Description:
      //    Adds JS-recognizable media queries
      //
      // Arguments:
      //    Media (String): Key string for the media query to be stored as in
      //    Foundation.media_queries
      //
      //    Class (String): Class name for the generated <meta> tag
      register_media : function (media, media_class) {
        if (Foundation.media_queries[media] === undefined) {
          $('head').append('<meta class="' + media_class + '"/>');
          Foundation.media_queries[media] = removeQuotes($('.' + media_class).css('font-family'));
        }
      },

      // Description:
      //    Add custom CSS within a JS-defined media query
      //
      // Arguments:
      //    Rule (String): CSS rule to be appended to the document.
      //
      //    Media (String): Optional media query string for the CSS rule to be
      //    nested under.
      add_custom_rule : function (rule, media) {
        if (media === undefined && Foundation.stylesheet) {
          Foundation.stylesheet.insertRule(rule, Foundation.stylesheet.cssRules.length);
        } else {
          var query = Foundation.media_queries[media];

          if (query !== undefined) {
            Foundation.stylesheet.insertRule('@media ' +
              Foundation.media_queries[media] + '{ ' + rule + ' }', Foundation.stylesheet.cssRules.length);
          }
        }
      },

      // Description:
      //    Performs a callback function when an image is fully loaded
      //
      // Arguments:
      //    Image (jQuery Object): Image(s) to check if loaded.
      //
      //    Callback (Function): Function to execute when image is fully loaded.
      image_loaded : function (images, callback) {
        var self = this,
            unloaded = images.length;

        function pictures_has_height(images) {
          var pictures_number = images.length;

          for (var i = pictures_number - 1; i >= 0; i--) {
            if(images.attr('height') === undefined) {
              return false;
            };
          };

          return true;
        }

        if (unloaded === 0 || pictures_has_height(images)) {
          callback(images);
        }

        images.each(function () {
          single_image_loaded(self.S(this), function () {
            unloaded -= 1;
            if (unloaded === 0) {
              callback(images);
            }
          });
        });
      },

      // Description:
      //    Returns a random, alphanumeric string
      //
      // Arguments:
      //    Length (Integer): Length of string to be generated. Defaults to random
      //    integer.
      //
      // Returns:
      //    Rand (String): Pseudo-random, alphanumeric string.
      random_str : function () {
        if (!this.fidx) {
          this.fidx = 0;
        }
        this.prefix = this.prefix || [(this.name || 'F'), (+new Date).toString(36)].join('-');

        return this.prefix + (this.fidx++).toString(36);
      },

      // Description:
      //    Helper for window.matchMedia
      //
      // Arguments:
      //    mq (String): Media query
      //
      // Returns:
      //    (Boolean): Whether the media query passes or not
      match : function (mq) {
        return window.matchMedia(mq).matches;
      },

      // Description:
      //    Helpers for checking Foundation default media queries with JS
      //
      // Returns:
      //    (Boolean): Whether the media query passes or not

      is_small_up : function () {
        return this.match(Foundation.media_queries.small);
      },

      is_medium_up : function () {
        return this.match(Foundation.media_queries.medium);
      },

      is_large_up : function () {
        return this.match(Foundation.media_queries.large);
      },

      is_xlarge_up : function () {
        return this.match(Foundation.media_queries.xlarge);
      },

      is_xxlarge_up : function () {
        return this.match(Foundation.media_queries.xxlarge);
      },

      is_small_only : function () {
        return !this.is_medium_up() && !this.is_large_up() && !this.is_xlarge_up() && !this.is_xxlarge_up();
      },

      is_medium_only : function () {
        return this.is_medium_up() && !this.is_large_up() && !this.is_xlarge_up() && !this.is_xxlarge_up();
      },

      is_large_only : function () {
        return this.is_medium_up() && this.is_large_up() && !this.is_xlarge_up() && !this.is_xxlarge_up();
      },

      is_xlarge_only : function () {
        return this.is_medium_up() && this.is_large_up() && this.is_xlarge_up() && !this.is_xxlarge_up();
      },

      is_xxlarge_only : function () {
        return this.is_medium_up() && this.is_large_up() && this.is_xlarge_up() && this.is_xxlarge_up();
      }
    }
  };

  $.fn.foundation = function () {
    var args = Array.prototype.slice.call(arguments, 0);

    return this.each(function () {
      Foundation.init.apply(Foundation, [this].concat(args));
      return this;
    });
  };

}(jQuery, window, window.document));


/***/ }),

/***/ "./node_modules/foundation-sites/js/foundation/foundation.reveal.js":
/*!**************************************************************************!*\
  !*** ./node_modules/foundation-sites/js/foundation/foundation.reveal.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

/* provided dependency */ var jQuery = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");
;(function ($, window, document, undefined) {
  'use strict';

  var openModals = [];

  Foundation.libs.reveal = {
    name : 'reveal',

    version : '5.5.3',

    locked : false,

    settings : {
      animation : 'fadeAndPop',
      animation_speed : 250,
      close_on_background_click : true,
      close_on_esc : true,
      dismiss_modal_class : 'close-reveal-modal',
      multiple_opened : false,
      bg_class : 'reveal-modal-bg',
      root_element : 'body',
      open : function(){},
      opened : function(){},
      close : function(){},
      closed : function(){},
      on_ajax_error: $.noop,
      bg : $('.reveal-modal-bg'),
      css : {
        open : {
          'opacity' : 0,
          'visibility' : 'visible',
          'display' : 'block'
        },
        close : {
          'opacity' : 1,
          'visibility' : 'hidden',
          'display' : 'none'
        }
      }
    },

    init : function (scope, method, options) {
      $.extend(true, this.settings, method, options);
      this.bindings(method, options);
    },

    events : function (scope) {
      var self = this,
          S = self.S;

      S(this.scope)
        .off('.reveal')
        .on('click.fndtn.reveal', '[' + this.add_namespace('data-reveal-id') + ']:not([disabled])', function (e) {
          e.preventDefault();

          if (!self.locked) {
            var element = S(this),
                ajax = element.data(self.data_attr('reveal-ajax')),
                replaceContentSel = element.data(self.data_attr('reveal-replace-content'));

            self.locked = true;

            if (typeof ajax === 'undefined') {
              self.open.call(self, element);
            } else {
              var url = ajax === true ? element.attr('href') : ajax;
              self.open.call(self, element, {url : url}, { replaceContentSel : replaceContentSel });
            }
          }
        });

      S(document)
        .on('click.fndtn.reveal', this.close_targets(), function (e) {
          e.preventDefault();
          if (!self.locked) {
            var settings = S('[' + self.attr_name() + '].open').data(self.attr_name(true) + '-init') || self.settings,
                bg_clicked = S(e.target)[0] === S('.' + settings.bg_class)[0];

            if (bg_clicked) {
              if (settings.close_on_background_click) {
                e.stopPropagation();
              } else {
                return;
              }
            }

            self.locked = true;
            self.close.call(self, bg_clicked ? S('[' + self.attr_name() + '].open:not(.toback)') : S(this).closest('[' + self.attr_name() + ']'));
          }
        });

      if (S('[' + self.attr_name() + ']', this.scope).length > 0) {
        S(this.scope)
          // .off('.reveal')
          .on('open.fndtn.reveal', this.settings.open)
          .on('opened.fndtn.reveal', this.settings.opened)
          .on('opened.fndtn.reveal', this.open_video)
          .on('close.fndtn.reveal', this.settings.close)
          .on('closed.fndtn.reveal', this.settings.closed)
          .on('closed.fndtn.reveal', this.close_video);
      } else {
        S(this.scope)
          // .off('.reveal')
          .on('open.fndtn.reveal', '[' + self.attr_name() + ']', this.settings.open)
          .on('opened.fndtn.reveal', '[' + self.attr_name() + ']', this.settings.opened)
          .on('opened.fndtn.reveal', '[' + self.attr_name() + ']', this.open_video)
          .on('close.fndtn.reveal', '[' + self.attr_name() + ']', this.settings.close)
          .on('closed.fndtn.reveal', '[' + self.attr_name() + ']', this.settings.closed)
          .on('closed.fndtn.reveal', '[' + self.attr_name() + ']', this.close_video);
      }

      return true;
    },

    // PATCH #3: turning on key up capture only when a reveal window is open
    key_up_on : function (scope) {
      var self = this;

      // PATCH #1: fixing multiple keyup event trigger from single key press
      self.S('body').off('keyup.fndtn.reveal').on('keyup.fndtn.reveal', function ( event ) {
        var open_modal = self.S('[' + self.attr_name() + '].open'),
            settings = open_modal.data(self.attr_name(true) + '-init') || self.settings ;
        // PATCH #2: making sure that the close event can be called only while unlocked,
        //           so that multiple keyup.fndtn.reveal events don't prevent clean closing of the reveal window.
        if ( settings && event.which === 27  && settings.close_on_esc && !self.locked) { // 27 is the keycode for the Escape key
          self.close.call(self, open_modal);
        }
      });

      return true;
    },

    // PATCH #3: turning on key up capture only when a reveal window is open
    key_up_off : function (scope) {
      this.S('body').off('keyup.fndtn.reveal');
      return true;
    },

    open : function (target, ajax_settings) {
      var self = this,
          modal;

      if (target) {
        if (typeof target.selector !== 'undefined') {
          // Find the named node; only use the first one found, since the rest of the code assumes there's only one node
          modal = self.S('#' + target.data(self.data_attr('reveal-id'))).first();
        } else {
          modal = self.S(this.scope);

          ajax_settings = target;
        }
      } else {
        modal = self.S(this.scope);
      }

      var settings = modal.data(self.attr_name(true) + '-init');
      settings = settings || this.settings;


      if (modal.hasClass('open') && target !== undefined && target.attr('data-reveal-id') == modal.attr('id')) {
        return self.close(modal);
      }

      if (!modal.hasClass('open')) {
        var open_modal = self.S('[' + self.attr_name() + '].open');

        if (typeof modal.data('css-top') === 'undefined') {
          modal.data('css-top', parseInt(modal.css('top'), 10))
            .data('offset', this.cache_offset(modal));
        }

        modal.attr('tabindex','0').attr('aria-hidden','false');

        this.key_up_on(modal);    // PATCH #3: turning on key up capture only when a reveal window is open

        // Prevent namespace event from triggering twice
        modal.on('open.fndtn.reveal', function(e) {
          if (e.namespace !== 'fndtn.reveal') return;
        });

        modal.on('open.fndtn.reveal').trigger('open.fndtn.reveal');

        if (open_modal.length < 1) {
          this.toggle_bg(modal, true);
        }

        if (typeof ajax_settings === 'string') {
          ajax_settings = {
            url : ajax_settings
          };
        }

        var openModal = function() {
          if(open_modal.length > 0) {
            if(settings.multiple_opened) {
              self.to_back(open_modal);
            } else {
              self.hide(open_modal, settings.css.close);
            }
          }

          // bl: add the open_modal that isn't already in the background to the openModals array
          if(settings.multiple_opened) {
            openModals.push(modal);
          }

          self.show(modal, settings.css.open);
        };

        if (typeof ajax_settings === 'undefined' || !ajax_settings.url) {
          openModal();
        } else {
          var old_success = typeof ajax_settings.success !== 'undefined' ? ajax_settings.success : null;
          $.extend(ajax_settings, {
            success : function (data, textStatus, jqXHR) {
              if ( $.isFunction(old_success) ) {
                var result = old_success(data, textStatus, jqXHR);
                if (typeof result == 'string') {
                  data = result;
                }
              }

              if (typeof options !== 'undefined' && typeof options.replaceContentSel !== 'undefined') {
                modal.find(options.replaceContentSel).html(data);
              } else {
                modal.html(data);
              }

              self.S(modal).foundation('section', 'reflow');
              self.S(modal).children().foundation();

              openModal();
            }
          });

          // check for if user initalized with error callback
          if (settings.on_ajax_error !== $.noop) {
            $.extend(ajax_settings, {
              error : settings.on_ajax_error
            });
          }

          $.ajax(ajax_settings);
        }
      }
      self.S(window).trigger('resize');
    },

    close : function (modal) {
      var modal = modal && modal.length ? modal : this.S(this.scope),
          open_modals = this.S('[' + this.attr_name() + '].open'),
          settings = modal.data(this.attr_name(true) + '-init') || this.settings,
          self = this;

      if (open_modals.length > 0) {

        modal.removeAttr('tabindex','0').attr('aria-hidden','true');

        this.locked = true;
        this.key_up_off(modal);   // PATCH #3: turning on key up capture only when a reveal window is open

        modal.trigger('close.fndtn.reveal');

        if ((settings.multiple_opened && open_modals.length === 1) || !settings.multiple_opened || modal.length > 1) {
          self.toggle_bg(modal, false);
          self.to_front(modal);
        }

        if (settings.multiple_opened) {
          var isCurrent = modal.is(':not(.toback)');
          self.hide(modal, settings.css.close, settings);
          if(isCurrent) {
            // remove the last modal since it is now closed
            openModals.pop();
          } else {
            // if this isn't the current modal, then find it in the array and remove it
            openModals = $.grep(openModals, function(elt) {
              var isThis = elt[0]===modal[0];
              if(isThis) {
                // since it's not currently in the front, put it in the front now that it is hidden
                // so that if it's re-opened, it won't be .toback
                self.to_front(modal);
              }
              return !isThis;
            });
          }
          // finally, show the next modal in the stack, if there is one
          if(openModals.length>0) {
            self.to_front(openModals[openModals.length - 1]);
          }
        } else {
          self.hide(open_modals, settings.css.close, settings);
        }
      }
    },

    close_targets : function () {
      var base = '.' + this.settings.dismiss_modal_class;

      if (this.settings.close_on_background_click) {
        return base + ', .' + this.settings.bg_class;
      }

      return base;
    },

    toggle_bg : function (modal, state) {
      if (this.S('.' + this.settings.bg_class).length === 0) {
        this.settings.bg = $('<div />', {'class': this.settings.bg_class})
          .appendTo('body').hide();
      }

      var visible = this.settings.bg.filter(':visible').length > 0;
      if ( state != visible ) {
        if ( state == undefined ? visible : !state ) {
          this.hide(this.settings.bg);
        } else {
          this.show(this.settings.bg);
        }
      }
    },

    show : function (el, css) {
      // is modal
      if (css) {
        var settings = el.data(this.attr_name(true) + '-init') || this.settings,
            root_element = settings.root_element,
            context = this;

        if (el.parent(root_element).length === 0) {
          var placeholder = el.wrap('<div style="display: none;" />').parent();

          el.on('closed.fndtn.reveal.wrapped', function () {
            el.detach().appendTo(placeholder);
            el.unwrap().unbind('closed.fndtn.reveal.wrapped');
          });

          el.detach().appendTo(root_element);
        }

        var animData = getAnimationData(settings.animation);
        if (!animData.animate) {
          this.locked = false;
        }
        if (animData.pop) {
          css.top = $(window).scrollTop() - el.data('offset') + 'px';
          var end_css = {
            top: $(window).scrollTop() + el.data('css-top') + 'px',
            opacity: 1
          };

          return setTimeout(function () {
            return el
              .css(css)
              .animate(end_css, settings.animation_speed, 'linear', function () {
                context.locked = false;
                el.trigger('opened.fndtn.reveal');
              })
              .addClass('open');
          }, settings.animation_speed / 2);
        }

        css.top = $(window).scrollTop() + el.data('css-top') + 'px';

        if (animData.fade) {
          var end_css = {opacity: 1};

          return setTimeout(function () {
            return el
              .css(css)
              .animate(end_css, settings.animation_speed, 'linear', function () {
                context.locked = false;
                el.trigger('opened.fndtn.reveal');
              })
              .addClass('open');
          }, settings.animation_speed / 2);
        }

        return el.css(css).show().css({opacity : 1}).addClass('open').trigger('opened.fndtn.reveal');
      }

      var settings = this.settings;

      // should we animate the background?
      if (getAnimationData(settings.animation).fade) {
        return el.fadeIn(settings.animation_speed / 2);
      }

      this.locked = false;

      return el.show();
    },

    to_back : function(el) {
      el.addClass('toback');
    },

    to_front : function(el) {
      el.removeClass('toback');
    },

    hide : function (el, css) {
      // is modal
      if (css) {
        var settings = el.data(this.attr_name(true) + '-init'),
            context = this;
        settings = settings || this.settings;

        var animData = getAnimationData(settings.animation);
        if (!animData.animate) {
          this.locked = false;
        }
        if (animData.pop) {
          var end_css = {
            top: - $(window).scrollTop() - el.data('offset') + 'px',
            opacity: 0
          };

          return setTimeout(function () {
            return el
              .animate(end_css, settings.animation_speed, 'linear', function () {
                context.locked = false;
                el.css(css).trigger('closed.fndtn.reveal');
              })
              .removeClass('open');
          }, settings.animation_speed / 2);
        }

        if (animData.fade) {
          var end_css = {opacity : 0};

          return setTimeout(function () {
            return el
              .animate(end_css, settings.animation_speed, 'linear', function () {
                context.locked = false;
                el.css(css).trigger('closed.fndtn.reveal');
              })
              .removeClass('open');
          }, settings.animation_speed / 2);
        }

        return el.hide().css(css).removeClass('open').trigger('closed.fndtn.reveal');
      }

      var settings = this.settings;

      // should we animate the background?
      if (getAnimationData(settings.animation).fade) {
        return el.fadeOut(settings.animation_speed / 2);
      }

      return el.hide();
    },

    close_video : function (e) {
      var video = $('.flex-video', e.target),
          iframe = $('iframe', video);

      if (iframe.length > 0) {
        iframe.attr('data-src', iframe[0].src);
        iframe.attr('src', iframe.attr('src'));
        video.hide();
      }
    },

    open_video : function (e) {
      var video = $('.flex-video', e.target),
          iframe = video.find('iframe');

      if (iframe.length > 0) {
        var data_src = iframe.attr('data-src');
        if (typeof data_src === 'string') {
          iframe[0].src = iframe.attr('data-src');
        } else {
          var src = iframe[0].src;
          iframe[0].src = undefined;
          iframe[0].src = src;
        }
        video.show();
      }
    },

    data_attr : function (str) {
      if (this.namespace.length > 0) {
        return this.namespace + '-' + str;
      }

      return str;
    },

    cache_offset : function (modal) {
      var offset = modal.show().height() + parseInt(modal.css('top'), 10) + modal.scrollY;

      modal.hide();

      return offset;
    },

    off : function () {
      $(this.scope).off('.fndtn.reveal');
    },

    reflow : function () {}
  };

  /*
   * getAnimationData('popAndFade') // {animate: true,  pop: true,  fade: true}
   * getAnimationData('fade')       // {animate: true,  pop: false, fade: true}
   * getAnimationData('pop')        // {animate: true,  pop: true,  fade: false}
   * getAnimationData('foo')        // {animate: false, pop: false, fade: false}
   * getAnimationData(null)         // {animate: false, pop: false, fade: false}
   */
  function getAnimationData(str) {
    var fade = /fade/i.test(str);
    var pop = /pop/i.test(str);
    return {
      animate : fade || pop,
      pop : pop,
      fade : fade
    };
  }
}(jQuery, window, window.document));


/***/ }),

/***/ "./node_modules/foundation-sites/js/foundation/foundation.tab.js":
/*!***********************************************************************!*\
  !*** ./node_modules/foundation-sites/js/foundation/foundation.tab.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

/* provided dependency */ var jQuery = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");
;(function ($, window, document, undefined) {
  'use strict';

  Foundation.libs.tab = {
    name : 'tab',

    version : '5.5.3',

    settings : {
      active_class : 'active',
      callback : function () {},
      deep_linking : false,
      scroll_to_content : true,
      is_hover : false
    },

    default_tab_hashes : [],

    init : function (scope, method, options) {
      var self = this,
          S = this.S;

  	  // Store the default active tabs which will be referenced when the
  	  // location hash is absent, as in the case of navigating the tabs and
  	  // returning to the first viewing via the browser Back button.
  	  S('[' + this.attr_name() + '] > .active > a', this.scope).each(function () {
  	    self.default_tab_hashes.push(this.hash);
  	  });

      this.bindings(method, options);
      this.handle_location_hash_change();
    },

    events : function () {
      var self = this,
          S = this.S;

      var usual_tab_behavior =  function (e, target) {
        var settings = S(target).closest('[' + self.attr_name() + ']').data(self.attr_name(true) + '-init');
        if (!settings.is_hover || Modernizr.touch) {
          // if user did not pressed tab key, prevent default action
          var keyCode = e.keyCode || e.which;
          if (keyCode !== 9) { 
            e.preventDefault();
            e.stopPropagation();
          }
          self.toggle_active_tab(S(target).parent());
          
        }
      };

      S(this.scope)
        .off('.tab')
        // Key event: focus/tab key
        .on('keydown.fndtn.tab', '[' + this.attr_name() + '] > * > a', function(e) {
          var keyCode = e.keyCode || e.which;
          // if user pressed tab key
          if (keyCode === 13 || keyCode === 32) { // enter or space
            var el = this;
            usual_tab_behavior(e, el);
          } 
        })
        // Click event: tab title
        .on('click.fndtn.tab', '[' + this.attr_name() + '] > * > a', function(e) {
          var el = this;
          usual_tab_behavior(e, el);
        })
        // Hover event: tab title
        .on('mouseenter.fndtn.tab', '[' + this.attr_name() + '] > * > a', function (e) {
          var settings = S(this).closest('[' + self.attr_name() + ']').data(self.attr_name(true) + '-init');
          if (settings.is_hover) {
            self.toggle_active_tab(S(this).parent());
          }
        });

      // Location hash change event
      S(window).on('hashchange.fndtn.tab', function (e) {
        e.preventDefault();
        self.handle_location_hash_change();
      });
    },

    handle_location_hash_change : function () {

      var self = this,
          S = this.S;

      S('[' + this.attr_name() + ']', this.scope).each(function () {
        var settings = S(this).data(self.attr_name(true) + '-init');
        if (settings.deep_linking) {
          // Match the location hash to a label
          var hash;
          if (settings.scroll_to_content) {
            hash = self.scope.location.hash;
          } else {
            // prefix the hash to prevent anchor scrolling
            hash = self.scope.location.hash.replace('fndtn-', '');
          }
          if (hash != '') {
            // Check whether the location hash references a tab content div or
            // another element on the page (inside or outside the tab content div)
            var hash_element = S(hash);
            if (hash_element.hasClass('content') && hash_element.parent().hasClass('tabs-content')) {
              // Tab content div
              self.toggle_active_tab($('[' + self.attr_name() + '] > * > a[href=' + hash + ']').parent());
            } else {
              // Not the tab content div. If inside the tab content, find the
              // containing tab and toggle it as active.
              var hash_tab_container_id = hash_element.closest('.content').attr('id');
              if (hash_tab_container_id != undefined) {
                self.toggle_active_tab($('[' + self.attr_name() + '] > * > a[href=#' + hash_tab_container_id + ']').parent(), hash);
              }
            }
          } else {
            // Reference the default tab hashes which were initialized in the init function
            for (var ind = 0; ind < self.default_tab_hashes.length; ind++) {
              self.toggle_active_tab($('[' + self.attr_name() + '] > * > a[href=' + self.default_tab_hashes[ind] + ']').parent());
            }
          }
        }
       });
     },

    toggle_active_tab : function (tab, location_hash) {
      var self = this,
          S = self.S,
          tabs = tab.closest('[' + this.attr_name() + ']'),
          tab_link = tab.find('a'),
          anchor = tab.children('a').first(),
          target_hash = '#' + anchor.attr('href').split('#')[1],
          target = S(target_hash),
          siblings = tab.siblings(),
          settings = tabs.data(this.attr_name(true) + '-init'),
          interpret_keyup_action = function (e) {
            // Light modification of Heydon Pickering's Practical ARIA Examples: http://heydonworks.com/practical_aria_examples/js/a11y.js

            // define current, previous and next (possible) tabs

            var $original = $(this);
            var $prev = $(this).parents('li').prev().children('[role="tab"]');
            var $next = $(this).parents('li').next().children('[role="tab"]');
            var $target;

            // find the direction (prev or next)

            switch (e.keyCode) {
              case 37:
                $target = $prev;
                break;
              case 39:
                $target = $next;
                break;
              default:
                $target = false
                  break;
            }

            if ($target.length) {
              $original.attr({
                'tabindex' : '-1',
                'aria-selected' : null
              });
              $target.attr({
                'tabindex' : '0',
                'aria-selected' : true
              }).focus();
            }

            // Hide panels

            $('[role="tabpanel"]')
              .attr('aria-hidden', 'true');

            // Show panel which corresponds to target

            $('#' + $(document.activeElement).attr('href').substring(1))
              .attr('aria-hidden', null);

          },
          go_to_hash = function(hash) {
            // This function allows correct behaviour of the browser's back button when deep linking is enabled. Without it
            // the user would get continually redirected to the default hash.
            var default_hash = settings.scroll_to_content ? self.default_tab_hashes[0] : 'fndtn-' + self.default_tab_hashes[0].replace('#', '');

            if (hash !== default_hash || window.location.hash) {
              window.location.hash = hash;
            }
          };

      // allow usage of data-tab-content attribute instead of href
      if (anchor.data('tab-content')) {
        target_hash = '#' + anchor.data('tab-content').split('#')[1];
        target = S(target_hash);
      }

      if (settings.deep_linking) {

        if (settings.scroll_to_content) {

          // retain current hash to scroll to content
          go_to_hash(location_hash || target_hash);

          if (location_hash == undefined || location_hash == target_hash) {
            tab.parent()[0].scrollIntoView();
          } else {
            S(target_hash)[0].scrollIntoView();
          }
        } else {
          // prefix the hashes so that the browser doesn't scroll down
          if (location_hash != undefined) {
            go_to_hash('fndtn-' + location_hash.replace('#', ''));
          } else {
            go_to_hash('fndtn-' + target_hash.replace('#', ''));
          }
        }
      }

      // WARNING: The activation and deactivation of the tab content must
      // occur after the deep linking in order to properly refresh the browser
      // window (notably in Chrome).
      // Clean up multiple attr instances to done once
      tab.addClass(settings.active_class).triggerHandler('opened');
      tab_link.attr({'aria-selected' : 'true',  tabindex : 0});
      siblings.removeClass(settings.active_class)
      siblings.find('a').attr({'aria-selected' : 'false'/*,  tabindex : -1*/});
      target.siblings().removeClass(settings.active_class).attr({'aria-hidden' : 'true'/*,  tabindex : -1*/});
      target.addClass(settings.active_class).attr('aria-hidden', 'false').removeAttr('tabindex');
      settings.callback(tab);
      target.triggerHandler('toggled', [target]);
      tabs.triggerHandler('toggled', [tab]);

      tab_link.off('keydown').on('keydown', interpret_keyup_action );
    },

    data_attr : function (str) {
      if (this.namespace.length > 0) {
        return this.namespace + '-' + str;
      }

      return str;
    },

    off : function () {},

    reflow : function () {}
  };
}(jQuery, window, window.document));


/***/ }),

/***/ "./node_modules/function-bind/implementation.js":
/*!******************************************************!*\
  !*** ./node_modules/function-bind/implementation.js ***!
  \******************************************************/
/***/ ((module) => {

"use strict";


/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var toStr = Object.prototype.toString;
var max = Math.max;
var funcType = '[object Function]';

var concatty = function concatty(a, b) {
    var arr = [];

    for (var i = 0; i < a.length; i += 1) {
        arr[i] = a[i];
    }
    for (var j = 0; j < b.length; j += 1) {
        arr[j + a.length] = b[j];
    }

    return arr;
};

var slicy = function slicy(arrLike, offset) {
    var arr = [];
    for (var i = offset || 0, j = 0; i < arrLike.length; i += 1, j += 1) {
        arr[j] = arrLike[i];
    }
    return arr;
};

var joiny = function (arr, joiner) {
    var str = '';
    for (var i = 0; i < arr.length; i += 1) {
        str += arr[i];
        if (i + 1 < arr.length) {
            str += joiner;
        }
    }
    return str;
};

module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.apply(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slicy(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                concatty(args, arguments)
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        }
        return target.apply(
            that,
            concatty(args, arguments)
        );

    };

    var boundLength = max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs[i] = '$' + i;
    }

    bound = Function('binder', 'return function (' + joiny(boundArgs, ',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};


/***/ }),

/***/ "./node_modules/function-bind/index.js":
/*!*********************************************!*\
  !*** ./node_modules/function-bind/index.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var implementation = __webpack_require__(/*! ./implementation */ "./node_modules/function-bind/implementation.js");

module.exports = Function.prototype.bind || implementation;


/***/ }),

/***/ "./node_modules/get-intrinsic/index.js":
/*!*********************************************!*\
  !*** ./node_modules/get-intrinsic/index.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var undefined;

var $Error = __webpack_require__(/*! es-errors */ "./node_modules/es-errors/index.js");
var $EvalError = __webpack_require__(/*! es-errors/eval */ "./node_modules/es-errors/eval.js");
var $RangeError = __webpack_require__(/*! es-errors/range */ "./node_modules/es-errors/range.js");
var $ReferenceError = __webpack_require__(/*! es-errors/ref */ "./node_modules/es-errors/ref.js");
var $SyntaxError = __webpack_require__(/*! es-errors/syntax */ "./node_modules/es-errors/syntax.js");
var $TypeError = __webpack_require__(/*! es-errors/type */ "./node_modules/es-errors/type.js");
var $URIError = __webpack_require__(/*! es-errors/uri */ "./node_modules/es-errors/uri.js");

var $Function = Function;

// eslint-disable-next-line consistent-return
var getEvalledConstructor = function (expressionSyntax) {
	try {
		return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
	} catch (e) {}
};

var $gOPD = Object.getOwnPropertyDescriptor;
if ($gOPD) {
	try {
		$gOPD({}, '');
	} catch (e) {
		$gOPD = null; // this is IE 8, which has a broken gOPD
	}
}

var throwTypeError = function () {
	throw new $TypeError();
};
var ThrowTypeError = $gOPD
	? (function () {
		try {
			// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
			arguments.callee; // IE 8 does not throw here
			return throwTypeError;
		} catch (calleeThrows) {
			try {
				// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
				return $gOPD(arguments, 'callee').get;
			} catch (gOPDthrows) {
				return throwTypeError;
			}
		}
	}())
	: throwTypeError;

var hasSymbols = __webpack_require__(/*! has-symbols */ "./node_modules/has-symbols/index.js")();
var hasProto = __webpack_require__(/*! has-proto */ "./node_modules/has-proto/index.js")();

var getProto = Object.getPrototypeOf || (
	hasProto
		? function (x) { return x.__proto__; } // eslint-disable-line no-proto
		: null
);

var needsEval = {};

var TypedArray = typeof Uint8Array === 'undefined' || !getProto ? undefined : getProto(Uint8Array);

var INTRINSICS = {
	__proto__: null,
	'%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,
	'%Array%': Array,
	'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,
	'%ArrayIteratorPrototype%': hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined,
	'%AsyncFromSyncIteratorPrototype%': undefined,
	'%AsyncFunction%': needsEval,
	'%AsyncGenerator%': needsEval,
	'%AsyncGeneratorFunction%': needsEval,
	'%AsyncIteratorPrototype%': needsEval,
	'%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,
	'%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,
	'%BigInt64Array%': typeof BigInt64Array === 'undefined' ? undefined : BigInt64Array,
	'%BigUint64Array%': typeof BigUint64Array === 'undefined' ? undefined : BigUint64Array,
	'%Boolean%': Boolean,
	'%DataView%': typeof DataView === 'undefined' ? undefined : DataView,
	'%Date%': Date,
	'%decodeURI%': decodeURI,
	'%decodeURIComponent%': decodeURIComponent,
	'%encodeURI%': encodeURI,
	'%encodeURIComponent%': encodeURIComponent,
	'%Error%': $Error,
	'%eval%': eval, // eslint-disable-line no-eval
	'%EvalError%': $EvalError,
	'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,
	'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,
	'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,
	'%Function%': $Function,
	'%GeneratorFunction%': needsEval,
	'%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,
	'%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,
	'%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,
	'%isFinite%': isFinite,
	'%isNaN%': isNaN,
	'%IteratorPrototype%': hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined,
	'%JSON%': typeof JSON === 'object' ? JSON : undefined,
	'%Map%': typeof Map === 'undefined' ? undefined : Map,
	'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Map()[Symbol.iterator]()),
	'%Math%': Math,
	'%Number%': Number,
	'%Object%': Object,
	'%parseFloat%': parseFloat,
	'%parseInt%': parseInt,
	'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,
	'%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,
	'%RangeError%': $RangeError,
	'%ReferenceError%': $ReferenceError,
	'%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,
	'%RegExp%': RegExp,
	'%Set%': typeof Set === 'undefined' ? undefined : Set,
	'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Set()[Symbol.iterator]()),
	'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,
	'%String%': String,
	'%StringIteratorPrototype%': hasSymbols && getProto ? getProto(''[Symbol.iterator]()) : undefined,
	'%Symbol%': hasSymbols ? Symbol : undefined,
	'%SyntaxError%': $SyntaxError,
	'%ThrowTypeError%': ThrowTypeError,
	'%TypedArray%': TypedArray,
	'%TypeError%': $TypeError,
	'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,
	'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,
	'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,
	'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,
	'%URIError%': $URIError,
	'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,
	'%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,
	'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet
};

if (getProto) {
	try {
		null.error; // eslint-disable-line no-unused-expressions
	} catch (e) {
		// https://github.com/tc39/proposal-shadowrealm/pull/384#issuecomment-1364264229
		var errorProto = getProto(getProto(e));
		INTRINSICS['%Error.prototype%'] = errorProto;
	}
}

var doEval = function doEval(name) {
	var value;
	if (name === '%AsyncFunction%') {
		value = getEvalledConstructor('async function () {}');
	} else if (name === '%GeneratorFunction%') {
		value = getEvalledConstructor('function* () {}');
	} else if (name === '%AsyncGeneratorFunction%') {
		value = getEvalledConstructor('async function* () {}');
	} else if (name === '%AsyncGenerator%') {
		var fn = doEval('%AsyncGeneratorFunction%');
		if (fn) {
			value = fn.prototype;
		}
	} else if (name === '%AsyncIteratorPrototype%') {
		var gen = doEval('%AsyncGenerator%');
		if (gen && getProto) {
			value = getProto(gen.prototype);
		}
	}

	INTRINSICS[name] = value;

	return value;
};

var LEGACY_ALIASES = {
	__proto__: null,
	'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
	'%ArrayPrototype%': ['Array', 'prototype'],
	'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
	'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
	'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
	'%ArrayProto_values%': ['Array', 'prototype', 'values'],
	'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
	'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
	'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
	'%BooleanPrototype%': ['Boolean', 'prototype'],
	'%DataViewPrototype%': ['DataView', 'prototype'],
	'%DatePrototype%': ['Date', 'prototype'],
	'%ErrorPrototype%': ['Error', 'prototype'],
	'%EvalErrorPrototype%': ['EvalError', 'prototype'],
	'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
	'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
	'%FunctionPrototype%': ['Function', 'prototype'],
	'%Generator%': ['GeneratorFunction', 'prototype'],
	'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
	'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
	'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
	'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
	'%JSONParse%': ['JSON', 'parse'],
	'%JSONStringify%': ['JSON', 'stringify'],
	'%MapPrototype%': ['Map', 'prototype'],
	'%NumberPrototype%': ['Number', 'prototype'],
	'%ObjectPrototype%': ['Object', 'prototype'],
	'%ObjProto_toString%': ['Object', 'prototype', 'toString'],
	'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
	'%PromisePrototype%': ['Promise', 'prototype'],
	'%PromiseProto_then%': ['Promise', 'prototype', 'then'],
	'%Promise_all%': ['Promise', 'all'],
	'%Promise_reject%': ['Promise', 'reject'],
	'%Promise_resolve%': ['Promise', 'resolve'],
	'%RangeErrorPrototype%': ['RangeError', 'prototype'],
	'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
	'%RegExpPrototype%': ['RegExp', 'prototype'],
	'%SetPrototype%': ['Set', 'prototype'],
	'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
	'%StringPrototype%': ['String', 'prototype'],
	'%SymbolPrototype%': ['Symbol', 'prototype'],
	'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
	'%TypedArrayPrototype%': ['TypedArray', 'prototype'],
	'%TypeErrorPrototype%': ['TypeError', 'prototype'],
	'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
	'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
	'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
	'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
	'%URIErrorPrototype%': ['URIError', 'prototype'],
	'%WeakMapPrototype%': ['WeakMap', 'prototype'],
	'%WeakSetPrototype%': ['WeakSet', 'prototype']
};

var bind = __webpack_require__(/*! function-bind */ "./node_modules/function-bind/index.js");
var hasOwn = __webpack_require__(/*! hasown */ "./node_modules/hasown/index.js");
var $concat = bind.call(Function.call, Array.prototype.concat);
var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
var $replace = bind.call(Function.call, String.prototype.replace);
var $strSlice = bind.call(Function.call, String.prototype.slice);
var $exec = bind.call(Function.call, RegExp.prototype.exec);

/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
var stringToPath = function stringToPath(string) {
	var first = $strSlice(string, 0, 1);
	var last = $strSlice(string, -1);
	if (first === '%' && last !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
	} else if (last === '%' && first !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
	}
	var result = [];
	$replace(string, rePropName, function (match, number, quote, subString) {
		result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
	});
	return result;
};
/* end adaptation */

var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
	var intrinsicName = name;
	var alias;
	if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
		alias = LEGACY_ALIASES[intrinsicName];
		intrinsicName = '%' + alias[0] + '%';
	}

	if (hasOwn(INTRINSICS, intrinsicName)) {
		var value = INTRINSICS[intrinsicName];
		if (value === needsEval) {
			value = doEval(intrinsicName);
		}
		if (typeof value === 'undefined' && !allowMissing) {
			throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
		}

		return {
			alias: alias,
			name: intrinsicName,
			value: value
		};
	}

	throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
};

module.exports = function GetIntrinsic(name, allowMissing) {
	if (typeof name !== 'string' || name.length === 0) {
		throw new $TypeError('intrinsic name must be a non-empty string');
	}
	if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
		throw new $TypeError('"allowMissing" argument must be a boolean');
	}

	if ($exec(/^%?[^%]*%?$/, name) === null) {
		throw new $SyntaxError('`%` may not be present anywhere but at the beginning and end of the intrinsic name');
	}
	var parts = stringToPath(name);
	var intrinsicBaseName = parts.length > 0 ? parts[0] : '';

	var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
	var intrinsicRealName = intrinsic.name;
	var value = intrinsic.value;
	var skipFurtherCaching = false;

	var alias = intrinsic.alias;
	if (alias) {
		intrinsicBaseName = alias[0];
		$spliceApply(parts, $concat([0, 1], alias));
	}

	for (var i = 1, isOwn = true; i < parts.length; i += 1) {
		var part = parts[i];
		var first = $strSlice(part, 0, 1);
		var last = $strSlice(part, -1);
		if (
			(
				(first === '"' || first === "'" || first === '`')
				|| (last === '"' || last === "'" || last === '`')
			)
			&& first !== last
		) {
			throw new $SyntaxError('property names with quotes must have matching quotes');
		}
		if (part === 'constructor' || !isOwn) {
			skipFurtherCaching = true;
		}

		intrinsicBaseName += '.' + part;
		intrinsicRealName = '%' + intrinsicBaseName + '%';

		if (hasOwn(INTRINSICS, intrinsicRealName)) {
			value = INTRINSICS[intrinsicRealName];
		} else if (value != null) {
			if (!(part in value)) {
				if (!allowMissing) {
					throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
				}
				return void undefined;
			}
			if ($gOPD && (i + 1) >= parts.length) {
				var desc = $gOPD(value, part);
				isOwn = !!desc;

				// By convention, when a data property is converted to an accessor
				// property to emulate a data property that does not suffer from
				// the override mistake, that accessor's getter is marked with
				// an `originalValue` property. Here, when we detect this, we
				// uphold the illusion by pretending to see that original data
				// property, i.e., returning the value rather than the getter
				// itself.
				if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
					value = desc.get;
				} else {
					value = value[part];
				}
			} else {
				isOwn = hasOwn(value, part);
				value = value[part];
			}

			if (isOwn && !skipFurtherCaching) {
				INTRINSICS[intrinsicRealName] = value;
			}
		}
	}
	return value;
};


/***/ }),

/***/ "./node_modules/gopd/index.js":
/*!************************************!*\
  !*** ./node_modules/gopd/index.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var GetIntrinsic = __webpack_require__(/*! get-intrinsic */ "./node_modules/get-intrinsic/index.js");

var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);

if ($gOPD) {
	try {
		$gOPD([], 'length');
	} catch (e) {
		// IE 8 has a broken gOPD
		$gOPD = null;
	}
}

module.exports = $gOPD;


/***/ }),

/***/ "./node_modules/has-property-descriptors/index.js":
/*!********************************************************!*\
  !*** ./node_modules/has-property-descriptors/index.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $defineProperty = __webpack_require__(/*! es-define-property */ "./node_modules/es-define-property/index.js");

var hasPropertyDescriptors = function hasPropertyDescriptors() {
	return !!$defineProperty;
};

hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
	// node v0.6 has a bug where array lengths can be Set but not Defined
	if (!$defineProperty) {
		return null;
	}
	try {
		return $defineProperty([], 'length', { value: 1 }).length !== 1;
	} catch (e) {
		// In Firefox 4-22, defining length on an array throws an exception.
		return true;
	}
};

module.exports = hasPropertyDescriptors;


/***/ }),

/***/ "./node_modules/has-proto/index.js":
/*!*****************************************!*\
  !*** ./node_modules/has-proto/index.js ***!
  \*****************************************/
/***/ ((module) => {

"use strict";


var test = {
	__proto__: null,
	foo: {}
};

var $Object = Object;

/** @type {import('.')} */
module.exports = function hasProto() {
	// @ts-expect-error: TS errors on an inherited property for some reason
	return { __proto__: test }.foo === test.foo
		&& !(test instanceof $Object);
};


/***/ }),

/***/ "./node_modules/has-symbols/index.js":
/*!*******************************************!*\
  !*** ./node_modules/has-symbols/index.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var origSymbol = typeof Symbol !== 'undefined' && Symbol;
var hasSymbolSham = __webpack_require__(/*! ./shams */ "./node_modules/has-symbols/shams.js");

module.exports = function hasNativeSymbols() {
	if (typeof origSymbol !== 'function') { return false; }
	if (typeof Symbol !== 'function') { return false; }
	if (typeof origSymbol('foo') !== 'symbol') { return false; }
	if (typeof Symbol('bar') !== 'symbol') { return false; }

	return hasSymbolSham();
};


/***/ }),

/***/ "./node_modules/has-symbols/shams.js":
/*!*******************************************!*\
  !*** ./node_modules/has-symbols/shams.js ***!
  \*******************************************/
/***/ ((module) => {

"use strict";


/* eslint complexity: [2, 18], max-statements: [2, 33] */
module.exports = function hasSymbols() {
	if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
	if (typeof Symbol.iterator === 'symbol') { return true; }

	var obj = {};
	var sym = Symbol('test');
	var symObj = Object(sym);
	if (typeof sym === 'string') { return false; }

	if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
	if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

	// temp disabled per https://github.com/ljharb/object.assign/issues/17
	// if (sym instanceof Symbol) { return false; }
	// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
	// if (!(symObj instanceof Symbol)) { return false; }

	// if (typeof Symbol.prototype.toString !== 'function') { return false; }
	// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

	var symVal = 42;
	obj[sym] = symVal;
	for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
	if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

	if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

	var syms = Object.getOwnPropertySymbols(obj);
	if (syms.length !== 1 || syms[0] !== sym) { return false; }

	if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

	if (typeof Object.getOwnPropertyDescriptor === 'function') {
		var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
		if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
	}

	return true;
};


/***/ }),

/***/ "./node_modules/hasown/index.js":
/*!**************************************!*\
  !*** ./node_modules/hasown/index.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var call = Function.prototype.call;
var $hasOwn = Object.prototype.hasOwnProperty;
var bind = __webpack_require__(/*! function-bind */ "./node_modules/function-bind/index.js");

/** @type {import('.')} */
module.exports = bind.call(call, $hasOwn);


/***/ }),

/***/ "./node_modules/jquery-zoom/jquery.zoom.js":
/*!*************************************************!*\
  !*** ./node_modules/jquery-zoom/jquery.zoom.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

/* provided dependency */ var __webpack_provided_window_dot_jQuery = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");
/*!
	Zoom 1.7.21
	license: MIT
	http://www.jacklmoore.com/zoom
*/
(function ($) {
	var defaults = {
		url: false,
		callback: false,
		target: false,
		duration: 120,
		on: 'mouseover', // other options: grab, click, toggle
		touch: true, // enables a touch fallback
		onZoomIn: false,
		onZoomOut: false,
		magnify: 1
	};

	// Core Zoom Logic, independent of event listeners.
	$.zoom = function(target, source, img, magnify) {
		var targetHeight,
			targetWidth,
			sourceHeight,
			sourceWidth,
			xRatio,
			yRatio,
			offset,
			$target = $(target),
			position = $target.css('position'),
			$source = $(source);

		// The parent element needs positioning so that the zoomed element can be correctly positioned within.
		target.style.position = /(absolute|fixed)/.test(position) ? position : 'relative';
		target.style.overflow = 'hidden';
		img.style.width = img.style.height = '';

		$(img)
			.addClass('zoomImg')
			.css({
				position: 'absolute',
				top: 0,
				left: 0,
				opacity: 0,
				width: img.width * magnify,
				height: img.height * magnify,
				border: 'none',
				maxWidth: 'none',
				maxHeight: 'none'
			})
			.appendTo(target);

		return {
			init: function() {
				targetWidth = $target.outerWidth();
				targetHeight = $target.outerHeight();

				if (source === target) {
					sourceWidth = targetWidth;
					sourceHeight = targetHeight;
				} else {
					sourceWidth = $source.outerWidth();
					sourceHeight = $source.outerHeight();
				}

				xRatio = (img.width - targetWidth) / sourceWidth;
				yRatio = (img.height - targetHeight) / sourceHeight;

				offset = $source.offset();
			},
			move: function (e) {
				var left = (e.pageX - offset.left),
					top = (e.pageY - offset.top);

				top = Math.max(Math.min(top, sourceHeight), 0);
				left = Math.max(Math.min(left, sourceWidth), 0);

				img.style.left = (left * -xRatio) + 'px';
				img.style.top = (top * -yRatio) + 'px';
			}
		};
	};

	$.fn.zoom = function (options) {
		return this.each(function () {
			var
			settings = $.extend({}, defaults, options || {}),
			//target will display the zoomed image
			target = settings.target && $(settings.target)[0] || this,
			//source will provide zoom location info (thumbnail)
			source = this,
			$source = $(source),
			img = document.createElement('img'),
			$img = $(img),
			mousemove = 'mousemove.zoom',
			clicked = false,
			touched = false;

			// If a url wasn't specified, look for an image element.
			if (!settings.url) {
				var srcElement = source.querySelector('img');
				if (srcElement) {
					settings.url = srcElement.getAttribute('data-src') || srcElement.currentSrc || srcElement.src;
				}
				if (!settings.url) {
					return;
				}
			}

			$source.one('zoom.destroy', function(position, overflow){
				$source.off(".zoom");
				target.style.position = position;
				target.style.overflow = overflow;
				img.onload = null;
				$img.remove();
			}.bind(this, target.style.position, target.style.overflow));

			img.onload = function () {
				var zoom = $.zoom(target, source, img, settings.magnify);

				function start(e) {
					zoom.init();
					zoom.move(e);

					// Skip the fade-in for IE8 and lower since it chokes on fading-in
					// and changing position based on mousemovement at the same time.
					$img.stop()
					.fadeTo($.support.opacity ? settings.duration : 0, 1, $.isFunction(settings.onZoomIn) ? settings.onZoomIn.call(img) : false);
				}

				function stop() {
					$img.stop()
					.fadeTo(settings.duration, 0, $.isFunction(settings.onZoomOut) ? settings.onZoomOut.call(img) : false);
				}

				// Mouse events
				if (settings.on === 'grab') {
					$source
						.on('mousedown.zoom',
							function (e) {
								if (e.which === 1) {
									$(document).one('mouseup.zoom',
										function () {
											stop();

											$(document).off(mousemove, zoom.move);
										}
									);

									start(e);

									$(document).on(mousemove, zoom.move);

									e.preventDefault();
								}
							}
						);
				} else if (settings.on === 'click') {
					$source.on('click.zoom',
						function (e) {
							if (clicked) {
								// bubble the event up to the document to trigger the unbind.
								return;
							} else {
								clicked = true;
								start(e);
								$(document).on(mousemove, zoom.move);
								$(document).one('click.zoom',
									function () {
										stop();
										clicked = false;
										$(document).off(mousemove, zoom.move);
									}
								);
								return false;
							}
						}
					);
				} else if (settings.on === 'toggle') {
					$source.on('click.zoom',
						function (e) {
							if (clicked) {
								stop();
							} else {
								start(e);
							}
							clicked = !clicked;
						}
					);
				} else if (settings.on === 'mouseover') {
					zoom.init(); // Preemptively call init because IE7 will fire the mousemove handler before the hover handler.

					$source
						.on('mouseenter.zoom', start)
						.on('mouseleave.zoom', stop)
						.on(mousemove, zoom.move);
				}

				// Touch fallback
				if (settings.touch) {
					$source
						.on('touchstart.zoom', function (e) {
							e.preventDefault();
							if (touched) {
								touched = false;
								stop();
							} else {
								touched = true;
								start( e.originalEvent.touches[0] || e.originalEvent.changedTouches[0] );
							}
						})
						.on('touchmove.zoom', function (e) {
							e.preventDefault();
							zoom.move( e.originalEvent.touches[0] || e.originalEvent.changedTouches[0] );
						})
						.on('touchend.zoom', function (e) {
							e.preventDefault();
							if (touched) {
								touched = false;
								stop();
							}
						});
				}
				
				if ($.isFunction(settings.callback)) {
					settings.callback.call(img);
				}
			};

			img.setAttribute('role', 'presentation');
			img.alt = '';
			img.src = settings.url;
		});
	};

	$.fn.zoom.defaults = defaults;
}(__webpack_provided_window_dot_jQuery));


/***/ }),

/***/ "./node_modules/jquery.cookie/jquery.cookie.js":
/*!*****************************************************!*\
  !*** ./node_modules/jquery.cookie/jquery.cookie.js ***!
  \*****************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * jQuery Cookie Plugin v1.4.1
 * https://github.com/carhartl/jquery-cookie
 *
 * Copyright 2013 Klaus Hartl
 * Released under the MIT license
 */
(function (factory) {
	if (true) {
		// AMD
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {}
}(function ($) {

	var pluses = /\+/g;

	function encode(s) {
		return config.raw ? s : encodeURIComponent(s);
	}

	function decode(s) {
		return config.raw ? s : decodeURIComponent(s);
	}

	function stringifyCookieValue(value) {
		return encode(config.json ? JSON.stringify(value) : String(value));
	}

	function parseCookieValue(s) {
		if (s.indexOf('"') === 0) {
			// This is a quoted cookie as according to RFC2068, unescape...
			s = s.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, '\\');
		}

		try {
			// Replace server-side written pluses with spaces.
			// If we can't decode the cookie, ignore it, it's unusable.
			// If we can't parse the cookie, ignore it, it's unusable.
			s = decodeURIComponent(s.replace(pluses, ' '));
			return config.json ? JSON.parse(s) : s;
		} catch(e) {}
	}

	function read(s, converter) {
		var value = config.raw ? s : parseCookieValue(s);
		return $.isFunction(converter) ? converter(value) : value;
	}

	var config = $.cookie = function (key, value, options) {

		// Write

		if (value !== undefined && !$.isFunction(value)) {
			options = $.extend({}, config.defaults, options);

			if (typeof options.expires === 'number') {
				var days = options.expires, t = options.expires = new Date();
				t.setTime(+t + days * 864e+5);
			}

			return (document.cookie = [
				encode(key), '=', stringifyCookieValue(value),
				options.expires ? '; expires=' + options.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE
				options.path    ? '; path=' + options.path : '',
				options.domain  ? '; domain=' + options.domain : '',
				options.secure  ? '; secure' : ''
			].join(''));
		}

		// Read

		var result = key ? undefined : {};

		// To prevent the for loop in the first place assign an empty array
		// in case there are no cookies at all. Also prevents odd result when
		// calling $.cookie().
		var cookies = document.cookie ? document.cookie.split('; ') : [];

		for (var i = 0, l = cookies.length; i < l; i++) {
			var parts = cookies[i].split('=');
			var name = decode(parts.shift());
			var cookie = parts.join('=');

			if (key && key === name) {
				// If second argument (value) is a function it's a converter...
				result = read(cookie, value);
				break;
			}

			// Prevent storing a cookie that we couldn't decode.
			if (!key && (cookie = read(cookie)) !== undefined) {
				result[name] = cookie;
			}
		}

		return result;
	};

	config.defaults = {};

	$.removeCookie = function (key, options) {
		if ($.cookie(key) === undefined) {
			return false;
		}

		// Must not alter options, thus extending a fresh object...
		$.cookie(key, '', $.extend({}, options, { expires: -1 }));
		return !$.cookie(key);
	};

}));


/***/ }),

/***/ "./node_modules/jquery/dist/jquery.min.js":
/*!************************************************!*\
  !*** ./node_modules/jquery/dist/jquery.min.js ***!
  \************************************************/
/***/ (function(module, exports) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! jQuery v3.7.1 | (c) OpenJS Foundation and other contributors | jquery.org/license */
!function(e,t){"use strict"; true&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(ie,e){"use strict";var oe=[],r=Object.getPrototypeOf,ae=oe.slice,g=oe.flat?function(e){return oe.flat.call(e)}:function(e){return oe.concat.apply([],e)},s=oe.push,se=oe.indexOf,n={},i=n.toString,ue=n.hasOwnProperty,o=ue.toString,a=o.call(Object),le={},v=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType&&"function"!=typeof e.item},y=function(e){return null!=e&&e===e.window},C=ie.document,u={type:!0,src:!0,nonce:!0,noModule:!0};function m(e,t,n){var r,i,o=(n=n||C).createElement("script");if(o.text=e,t)for(r in u)(i=t[r]||t.getAttribute&&t.getAttribute(r))&&o.setAttribute(r,i);n.head.appendChild(o).parentNode.removeChild(o)}function x(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?n[i.call(e)]||"object":typeof e}var t="3.7.1",l=/HTML$/i,ce=function(e,t){return new ce.fn.init(e,t)};function c(e){var t=!!e&&"length"in e&&e.length,n=x(e);return!v(e)&&!y(e)&&("array"===n||0===t||"number"==typeof t&&0<t&&t-1 in e)}function fe(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}ce.fn=ce.prototype={jquery:t,constructor:ce,length:0,toArray:function(){return ae.call(this)},get:function(e){return null==e?ae.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=ce.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return ce.each(this,e)},map:function(n){return this.pushStack(ce.map(this,function(e,t){return n.call(e,t,e)}))},slice:function(){return this.pushStack(ae.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(ce.grep(this,function(e,t){return(t+1)%2}))},odd:function(){return this.pushStack(ce.grep(this,function(e,t){return t%2}))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(0<=n&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:s,sort:oe.sort,splice:oe.splice},ce.extend=ce.fn.extend=function(){var e,t,n,r,i,o,a=arguments[0]||{},s=1,u=arguments.length,l=!1;for("boolean"==typeof a&&(l=a,a=arguments[s]||{},s++),"object"==typeof a||v(a)||(a={}),s===u&&(a=this,s--);s<u;s++)if(null!=(e=arguments[s]))for(t in e)r=e[t],"__proto__"!==t&&a!==r&&(l&&r&&(ce.isPlainObject(r)||(i=Array.isArray(r)))?(n=a[t],o=i&&!Array.isArray(n)?[]:i||ce.isPlainObject(n)?n:{},i=!1,a[t]=ce.extend(l,o,r)):void 0!==r&&(a[t]=r));return a},ce.extend({expando:"jQuery"+(t+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==i.call(e))&&(!(t=r(e))||"function"==typeof(n=ue.call(t,"constructor")&&t.constructor)&&o.call(n)===a)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){m(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,r=0;if(c(e)){for(n=e.length;r<n;r++)if(!1===t.call(e[r],r,e[r]))break}else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},text:function(e){var t,n="",r=0,i=e.nodeType;if(!i)while(t=e[r++])n+=ce.text(t);return 1===i||11===i?e.textContent:9===i?e.documentElement.textContent:3===i||4===i?e.nodeValue:n},makeArray:function(e,t){var n=t||[];return null!=e&&(c(Object(e))?ce.merge(n,"string"==typeof e?[e]:e):s.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:se.call(t,e,n)},isXMLDoc:function(e){var t=e&&e.namespaceURI,n=e&&(e.ownerDocument||e).documentElement;return!l.test(t||n&&n.nodeName||"HTML")},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,o=e.length,a=!n;i<o;i++)!t(e[i],i)!==a&&r.push(e[i]);return r},map:function(e,t,n){var r,i,o=0,a=[];if(c(e))for(r=e.length;o<r;o++)null!=(i=t(e[o],o,n))&&a.push(i);else for(o in e)null!=(i=t(e[o],o,n))&&a.push(i);return g(a)},guid:1,support:le}),"function"==typeof Symbol&&(ce.fn[Symbol.iterator]=oe[Symbol.iterator]),ce.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){n["[object "+t+"]"]=t.toLowerCase()});var pe=oe.pop,de=oe.sort,he=oe.splice,ge="[\\x20\\t\\r\\n\\f]",ve=new RegExp("^"+ge+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ge+"+$","g");ce.contains=function(e,t){var n=t&&t.parentNode;return e===n||!(!n||1!==n.nodeType||!(e.contains?e.contains(n):e.compareDocumentPosition&&16&e.compareDocumentPosition(n)))};var f=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g;function p(e,t){return t?"\0"===e?"\ufffd":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e}ce.escapeSelector=function(e){return(e+"").replace(f,p)};var ye=C,me=s;!function(){var e,b,w,o,a,T,r,C,d,i,k=me,S=ce.expando,E=0,n=0,s=W(),c=W(),u=W(),h=W(),l=function(e,t){return e===t&&(a=!0),0},f="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",t="(?:\\\\[\\da-fA-F]{1,6}"+ge+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",p="\\["+ge+"*("+t+")(?:"+ge+"*([*^$|!~]?=)"+ge+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+t+"))|)"+ge+"*\\]",g=":("+t+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+p+")*)|.*)\\)|)",v=new RegExp(ge+"+","g"),y=new RegExp("^"+ge+"*,"+ge+"*"),m=new RegExp("^"+ge+"*([>+~]|"+ge+")"+ge+"*"),x=new RegExp(ge+"|>"),j=new RegExp(g),A=new RegExp("^"+t+"$"),D={ID:new RegExp("^#("+t+")"),CLASS:new RegExp("^\\.("+t+")"),TAG:new RegExp("^("+t+"|[*])"),ATTR:new RegExp("^"+p),PSEUDO:new RegExp("^"+g),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ge+"*(even|odd|(([+-]|)(\\d*)n|)"+ge+"*(?:([+-]|)"+ge+"*(\\d+)|))"+ge+"*\\)|)","i"),bool:new RegExp("^(?:"+f+")$","i"),needsContext:new RegExp("^"+ge+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ge+"*((?:-\\d)?\\d*)"+ge+"*\\)|)(?=[^-]|$)","i")},N=/^(?:input|select|textarea|button)$/i,q=/^h\d$/i,L=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,H=/[+~]/,O=new RegExp("\\\\[\\da-fA-F]{1,6}"+ge+"?|\\\\([^\\r\\n\\f])","g"),P=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},M=function(){V()},R=J(function(e){return!0===e.disabled&&fe(e,"fieldset")},{dir:"parentNode",next:"legend"});try{k.apply(oe=ae.call(ye.childNodes),ye.childNodes),oe[ye.childNodes.length].nodeType}catch(e){k={apply:function(e,t){me.apply(e,ae.call(t))},call:function(e){me.apply(e,ae.call(arguments,1))}}}function I(t,e,n,r){var i,o,a,s,u,l,c,f=e&&e.ownerDocument,p=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==p&&9!==p&&11!==p)return n;if(!r&&(V(e),e=e||T,C)){if(11!==p&&(u=L.exec(t)))if(i=u[1]){if(9===p){if(!(a=e.getElementById(i)))return n;if(a.id===i)return k.call(n,a),n}else if(f&&(a=f.getElementById(i))&&I.contains(e,a)&&a.id===i)return k.call(n,a),n}else{if(u[2])return k.apply(n,e.getElementsByTagName(t)),n;if((i=u[3])&&e.getElementsByClassName)return k.apply(n,e.getElementsByClassName(i)),n}if(!(h[t+" "]||d&&d.test(t))){if(c=t,f=e,1===p&&(x.test(t)||m.test(t))){(f=H.test(t)&&U(e.parentNode)||e)==e&&le.scope||((s=e.getAttribute("id"))?s=ce.escapeSelector(s):e.setAttribute("id",s=S)),o=(l=Y(t)).length;while(o--)l[o]=(s?"#"+s:":scope")+" "+Q(l[o]);c=l.join(",")}try{return k.apply(n,f.querySelectorAll(c)),n}catch(e){h(t,!0)}finally{s===S&&e.removeAttribute("id")}}}return re(t.replace(ve,"$1"),e,n,r)}function W(){var r=[];return function e(t,n){return r.push(t+" ")>b.cacheLength&&delete e[r.shift()],e[t+" "]=n}}function F(e){return e[S]=!0,e}function $(e){var t=T.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function B(t){return function(e){return fe(e,"input")&&e.type===t}}function _(t){return function(e){return(fe(e,"input")||fe(e,"button"))&&e.type===t}}function z(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&R(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function X(a){return F(function(o){return o=+o,F(function(e,t){var n,r=a([],e.length,o),i=r.length;while(i--)e[n=r[i]]&&(e[n]=!(t[n]=e[n]))})})}function U(e){return e&&"undefined"!=typeof e.getElementsByTagName&&e}function V(e){var t,n=e?e.ownerDocument||e:ye;return n!=T&&9===n.nodeType&&n.documentElement&&(r=(T=n).documentElement,C=!ce.isXMLDoc(T),i=r.matches||r.webkitMatchesSelector||r.msMatchesSelector,r.msMatchesSelector&&ye!=T&&(t=T.defaultView)&&t.top!==t&&t.addEventListener("unload",M),le.getById=$(function(e){return r.appendChild(e).id=ce.expando,!T.getElementsByName||!T.getElementsByName(ce.expando).length}),le.disconnectedMatch=$(function(e){return i.call(e,"*")}),le.scope=$(function(){return T.querySelectorAll(":scope")}),le.cssHas=$(function(){try{return T.querySelector(":has(*,:jqfake)"),!1}catch(e){return!0}}),le.getById?(b.filter.ID=function(e){var t=e.replace(O,P);return function(e){return e.getAttribute("id")===t}},b.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&C){var n=t.getElementById(e);return n?[n]:[]}}):(b.filter.ID=function(e){var n=e.replace(O,P);return function(e){var t="undefined"!=typeof e.getAttributeNode&&e.getAttributeNode("id");return t&&t.value===n}},b.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&C){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];i=t.getElementsByName(e),r=0;while(o=i[r++])if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),b.find.TAG=function(e,t){return"undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):t.querySelectorAll(e)},b.find.CLASS=function(e,t){if("undefined"!=typeof t.getElementsByClassName&&C)return t.getElementsByClassName(e)},d=[],$(function(e){var t;r.appendChild(e).innerHTML="<a id='"+S+"' href='' disabled='disabled'></a><select id='"+S+"-\r\\' disabled='disabled'><option selected=''></option></select>",e.querySelectorAll("[selected]").length||d.push("\\["+ge+"*(?:value|"+f+")"),e.querySelectorAll("[id~="+S+"-]").length||d.push("~="),e.querySelectorAll("a#"+S+"+*").length||d.push(".#.+[+~]"),e.querySelectorAll(":checked").length||d.push(":checked"),(t=T.createElement("input")).setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),r.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&d.push(":enabled",":disabled"),(t=T.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||d.push("\\["+ge+"*name"+ge+"*="+ge+"*(?:''|\"\")")}),le.cssHas||d.push(":has"),d=d.length&&new RegExp(d.join("|")),l=function(e,t){if(e===t)return a=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!le.sortDetached&&t.compareDocumentPosition(e)===n?e===T||e.ownerDocument==ye&&I.contains(ye,e)?-1:t===T||t.ownerDocument==ye&&I.contains(ye,t)?1:o?se.call(o,e)-se.call(o,t):0:4&n?-1:1)}),T}for(e in I.matches=function(e,t){return I(e,null,null,t)},I.matchesSelector=function(e,t){if(V(e),C&&!h[t+" "]&&(!d||!d.test(t)))try{var n=i.call(e,t);if(n||le.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){h(t,!0)}return 0<I(t,T,null,[e]).length},I.contains=function(e,t){return(e.ownerDocument||e)!=T&&V(e),ce.contains(e,t)},I.attr=function(e,t){(e.ownerDocument||e)!=T&&V(e);var n=b.attrHandle[t.toLowerCase()],r=n&&ue.call(b.attrHandle,t.toLowerCase())?n(e,t,!C):void 0;return void 0!==r?r:e.getAttribute(t)},I.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},ce.uniqueSort=function(e){var t,n=[],r=0,i=0;if(a=!le.sortStable,o=!le.sortStable&&ae.call(e,0),de.call(e,l),a){while(t=e[i++])t===e[i]&&(r=n.push(i));while(r--)he.call(e,n[r],1)}return o=null,e},ce.fn.uniqueSort=function(){return this.pushStack(ce.uniqueSort(ae.apply(this)))},(b=ce.expr={cacheLength:50,createPseudo:F,match:D,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(O,P),e[3]=(e[3]||e[4]||e[5]||"").replace(O,P),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||I.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&I.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return D.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&j.test(n)&&(t=Y(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(O,P).toLowerCase();return"*"===e?function(){return!0}:function(e){return fe(e,t)}},CLASS:function(e){var t=s[e+" "];return t||(t=new RegExp("(^|"+ge+")"+e+"("+ge+"|$)"))&&s(e,function(e){return t.test("string"==typeof e.className&&e.className||"undefined"!=typeof e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(n,r,i){return function(e){var t=I.attr(e,n);return null==t?"!="===r:!r||(t+="","="===r?t===i:"!="===r?t!==i:"^="===r?i&&0===t.indexOf(i):"*="===r?i&&-1<t.indexOf(i):"$="===r?i&&t.slice(-i.length)===i:"~="===r?-1<(" "+t.replace(v," ")+" ").indexOf(i):"|="===r&&(t===i||t.slice(0,i.length+1)===i+"-"))}},CHILD:function(d,e,t,h,g){var v="nth"!==d.slice(0,3),y="last"!==d.slice(-4),m="of-type"===e;return 1===h&&0===g?function(e){return!!e.parentNode}:function(e,t,n){var r,i,o,a,s,u=v!==y?"nextSibling":"previousSibling",l=e.parentNode,c=m&&e.nodeName.toLowerCase(),f=!n&&!m,p=!1;if(l){if(v){while(u){o=e;while(o=o[u])if(m?fe(o,c):1===o.nodeType)return!1;s=u="only"===d&&!s&&"nextSibling"}return!0}if(s=[y?l.firstChild:l.lastChild],y&&f){p=(a=(r=(i=l[S]||(l[S]={}))[d]||[])[0]===E&&r[1])&&r[2],o=a&&l.childNodes[a];while(o=++a&&o&&o[u]||(p=a=0)||s.pop())if(1===o.nodeType&&++p&&o===e){i[d]=[E,a,p];break}}else if(f&&(p=a=(r=(i=e[S]||(e[S]={}))[d]||[])[0]===E&&r[1]),!1===p)while(o=++a&&o&&o[u]||(p=a=0)||s.pop())if((m?fe(o,c):1===o.nodeType)&&++p&&(f&&((i=o[S]||(o[S]={}))[d]=[E,p]),o===e))break;return(p-=g)===h||p%h==0&&0<=p/h}}},PSEUDO:function(e,o){var t,a=b.pseudos[e]||b.setFilters[e.toLowerCase()]||I.error("unsupported pseudo: "+e);return a[S]?a(o):1<a.length?(t=[e,e,"",o],b.setFilters.hasOwnProperty(e.toLowerCase())?F(function(e,t){var n,r=a(e,o),i=r.length;while(i--)e[n=se.call(e,r[i])]=!(t[n]=r[i])}):function(e){return a(e,0,t)}):a}},pseudos:{not:F(function(e){var r=[],i=[],s=ne(e.replace(ve,"$1"));return s[S]?F(function(e,t,n,r){var i,o=s(e,null,r,[]),a=e.length;while(a--)(i=o[a])&&(e[a]=!(t[a]=i))}):function(e,t,n){return r[0]=e,s(r,null,n,i),r[0]=null,!i.pop()}}),has:F(function(t){return function(e){return 0<I(t,e).length}}),contains:F(function(t){return t=t.replace(O,P),function(e){return-1<(e.textContent||ce.text(e)).indexOf(t)}}),lang:F(function(n){return A.test(n||"")||I.error("unsupported lang: "+n),n=n.replace(O,P).toLowerCase(),function(e){var t;do{if(t=C?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(t=t.toLowerCase())===n||0===t.indexOf(n+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=ie.location&&ie.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===r},focus:function(e){return e===function(){try{return T.activeElement}catch(e){}}()&&T.hasFocus()&&!!(e.type||e.href||~e.tabIndex)},enabled:z(!1),disabled:z(!0),checked:function(e){return fe(e,"input")&&!!e.checked||fe(e,"option")&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!b.pseudos.empty(e)},header:function(e){return q.test(e.nodeName)},input:function(e){return N.test(e.nodeName)},button:function(e){return fe(e,"input")&&"button"===e.type||fe(e,"button")},text:function(e){var t;return fe(e,"input")&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:X(function(){return[0]}),last:X(function(e,t){return[t-1]}),eq:X(function(e,t,n){return[n<0?n+t:n]}),even:X(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:X(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:X(function(e,t,n){var r;for(r=n<0?n+t:t<n?t:n;0<=--r;)e.push(r);return e}),gt:X(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=b.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})b.pseudos[e]=B(e);for(e in{submit:!0,reset:!0})b.pseudos[e]=_(e);function G(){}function Y(e,t){var n,r,i,o,a,s,u,l=c[e+" "];if(l)return t?0:l.slice(0);a=e,s=[],u=b.preFilter;while(a){for(o in n&&!(r=y.exec(a))||(r&&(a=a.slice(r[0].length)||a),s.push(i=[])),n=!1,(r=m.exec(a))&&(n=r.shift(),i.push({value:n,type:r[0].replace(ve," ")}),a=a.slice(n.length)),b.filter)!(r=D[o].exec(a))||u[o]&&!(r=u[o](r))||(n=r.shift(),i.push({value:n,type:o,matches:r}),a=a.slice(n.length));if(!n)break}return t?a.length:a?I.error(e):c(e,s).slice(0)}function Q(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function J(a,e,t){var s=e.dir,u=e.next,l=u||s,c=t&&"parentNode"===l,f=n++;return e.first?function(e,t,n){while(e=e[s])if(1===e.nodeType||c)return a(e,t,n);return!1}:function(e,t,n){var r,i,o=[E,f];if(n){while(e=e[s])if((1===e.nodeType||c)&&a(e,t,n))return!0}else while(e=e[s])if(1===e.nodeType||c)if(i=e[S]||(e[S]={}),u&&fe(e,u))e=e[s]||e;else{if((r=i[l])&&r[0]===E&&r[1]===f)return o[2]=r[2];if((i[l]=o)[2]=a(e,t,n))return!0}return!1}}function K(i){return 1<i.length?function(e,t,n){var r=i.length;while(r--)if(!i[r](e,t,n))return!1;return!0}:i[0]}function Z(e,t,n,r,i){for(var o,a=[],s=0,u=e.length,l=null!=t;s<u;s++)(o=e[s])&&(n&&!n(o,r,i)||(a.push(o),l&&t.push(s)));return a}function ee(d,h,g,v,y,e){return v&&!v[S]&&(v=ee(v)),y&&!y[S]&&(y=ee(y,e)),F(function(e,t,n,r){var i,o,a,s,u=[],l=[],c=t.length,f=e||function(e,t,n){for(var r=0,i=t.length;r<i;r++)I(e,t[r],n);return n}(h||"*",n.nodeType?[n]:n,[]),p=!d||!e&&h?f:Z(f,u,d,n,r);if(g?g(p,s=y||(e?d:c||v)?[]:t,n,r):s=p,v){i=Z(s,l),v(i,[],n,r),o=i.length;while(o--)(a=i[o])&&(s[l[o]]=!(p[l[o]]=a))}if(e){if(y||d){if(y){i=[],o=s.length;while(o--)(a=s[o])&&i.push(p[o]=a);y(null,s=[],i,r)}o=s.length;while(o--)(a=s[o])&&-1<(i=y?se.call(e,a):u[o])&&(e[i]=!(t[i]=a))}}else s=Z(s===t?s.splice(c,s.length):s),y?y(null,t,s,r):k.apply(t,s)})}function te(e){for(var i,t,n,r=e.length,o=b.relative[e[0].type],a=o||b.relative[" "],s=o?1:0,u=J(function(e){return e===i},a,!0),l=J(function(e){return-1<se.call(i,e)},a,!0),c=[function(e,t,n){var r=!o&&(n||t!=w)||((i=t).nodeType?u(e,t,n):l(e,t,n));return i=null,r}];s<r;s++)if(t=b.relative[e[s].type])c=[J(K(c),t)];else{if((t=b.filter[e[s].type].apply(null,e[s].matches))[S]){for(n=++s;n<r;n++)if(b.relative[e[n].type])break;return ee(1<s&&K(c),1<s&&Q(e.slice(0,s-1).concat({value:" "===e[s-2].type?"*":""})).replace(ve,"$1"),t,s<n&&te(e.slice(s,n)),n<r&&te(e=e.slice(n)),n<r&&Q(e))}c.push(t)}return K(c)}function ne(e,t){var n,v,y,m,x,r,i=[],o=[],a=u[e+" "];if(!a){t||(t=Y(e)),n=t.length;while(n--)(a=te(t[n]))[S]?i.push(a):o.push(a);(a=u(e,(v=o,m=0<(y=i).length,x=0<v.length,r=function(e,t,n,r,i){var o,a,s,u=0,l="0",c=e&&[],f=[],p=w,d=e||x&&b.find.TAG("*",i),h=E+=null==p?1:Math.random()||.1,g=d.length;for(i&&(w=t==T||t||i);l!==g&&null!=(o=d[l]);l++){if(x&&o){a=0,t||o.ownerDocument==T||(V(o),n=!C);while(s=v[a++])if(s(o,t||T,n)){k.call(r,o);break}i&&(E=h)}m&&((o=!s&&o)&&u--,e&&c.push(o))}if(u+=l,m&&l!==u){a=0;while(s=y[a++])s(c,f,t,n);if(e){if(0<u)while(l--)c[l]||f[l]||(f[l]=pe.call(r));f=Z(f)}k.apply(r,f),i&&!e&&0<f.length&&1<u+y.length&&ce.uniqueSort(r)}return i&&(E=h,w=p),c},m?F(r):r))).selector=e}return a}function re(e,t,n,r){var i,o,a,s,u,l="function"==typeof e&&e,c=!r&&Y(e=l.selector||e);if(n=n||[],1===c.length){if(2<(o=c[0]=c[0].slice(0)).length&&"ID"===(a=o[0]).type&&9===t.nodeType&&C&&b.relative[o[1].type]){if(!(t=(b.find.ID(a.matches[0].replace(O,P),t)||[])[0]))return n;l&&(t=t.parentNode),e=e.slice(o.shift().value.length)}i=D.needsContext.test(e)?0:o.length;while(i--){if(a=o[i],b.relative[s=a.type])break;if((u=b.find[s])&&(r=u(a.matches[0].replace(O,P),H.test(o[0].type)&&U(t.parentNode)||t))){if(o.splice(i,1),!(e=r.length&&Q(o)))return k.apply(n,r),n;break}}}return(l||ne(e,c))(r,t,!C,n,!t||H.test(e)&&U(t.parentNode)||t),n}G.prototype=b.filters=b.pseudos,b.setFilters=new G,le.sortStable=S.split("").sort(l).join("")===S,V(),le.sortDetached=$(function(e){return 1&e.compareDocumentPosition(T.createElement("fieldset"))}),ce.find=I,ce.expr[":"]=ce.expr.pseudos,ce.unique=ce.uniqueSort,I.compile=ne,I.select=re,I.setDocument=V,I.tokenize=Y,I.escape=ce.escapeSelector,I.getText=ce.text,I.isXML=ce.isXMLDoc,I.selectors=ce.expr,I.support=ce.support,I.uniqueSort=ce.uniqueSort}();var d=function(e,t,n){var r=[],i=void 0!==n;while((e=e[t])&&9!==e.nodeType)if(1===e.nodeType){if(i&&ce(e).is(n))break;r.push(e)}return r},h=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},b=ce.expr.match.needsContext,w=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function T(e,n,r){return v(n)?ce.grep(e,function(e,t){return!!n.call(e,t,e)!==r}):n.nodeType?ce.grep(e,function(e){return e===n!==r}):"string"!=typeof n?ce.grep(e,function(e){return-1<se.call(n,e)!==r}):ce.filter(n,e,r)}ce.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?ce.find.matchesSelector(r,e)?[r]:[]:ce.find.matches(e,ce.grep(t,function(e){return 1===e.nodeType}))},ce.fn.extend({find:function(e){var t,n,r=this.length,i=this;if("string"!=typeof e)return this.pushStack(ce(e).filter(function(){for(t=0;t<r;t++)if(ce.contains(i[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)ce.find(e,i[t],n);return 1<r?ce.uniqueSort(n):n},filter:function(e){return this.pushStack(T(this,e||[],!1))},not:function(e){return this.pushStack(T(this,e||[],!0))},is:function(e){return!!T(this,"string"==typeof e&&b.test(e)?ce(e):e||[],!1).length}});var k,S=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(ce.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||k,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&3<=e.length?[null,e,null]:S.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof ce?t[0]:t,ce.merge(this,ce.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:C,!0)),w.test(r[1])&&ce.isPlainObject(t))for(r in t)v(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(i=C.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):v(e)?void 0!==n.ready?n.ready(e):e(ce):ce.makeArray(e,this)}).prototype=ce.fn,k=ce(C);var E=/^(?:parents|prev(?:Until|All))/,j={children:!0,contents:!0,next:!0,prev:!0};function A(e,t){while((e=e[t])&&1!==e.nodeType);return e}ce.fn.extend({has:function(e){var t=ce(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(ce.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,i=this.length,o=[],a="string"!=typeof e&&ce(e);if(!b.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?-1<a.index(n):1===n.nodeType&&ce.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(1<o.length?ce.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?se.call(ce(e),this[0]):se.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(ce.uniqueSort(ce.merge(this.get(),ce(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),ce.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return d(e,"parentNode")},parentsUntil:function(e,t,n){return d(e,"parentNode",n)},next:function(e){return A(e,"nextSibling")},prev:function(e){return A(e,"previousSibling")},nextAll:function(e){return d(e,"nextSibling")},prevAll:function(e){return d(e,"previousSibling")},nextUntil:function(e,t,n){return d(e,"nextSibling",n)},prevUntil:function(e,t,n){return d(e,"previousSibling",n)},siblings:function(e){return h((e.parentNode||{}).firstChild,e)},children:function(e){return h(e.firstChild)},contents:function(e){return null!=e.contentDocument&&r(e.contentDocument)?e.contentDocument:(fe(e,"template")&&(e=e.content||e),ce.merge([],e.childNodes))}},function(r,i){ce.fn[r]=function(e,t){var n=ce.map(this,i,e);return"Until"!==r.slice(-5)&&(t=e),t&&"string"==typeof t&&(n=ce.filter(t,n)),1<this.length&&(j[r]||ce.uniqueSort(n),E.test(r)&&n.reverse()),this.pushStack(n)}});var D=/[^\x20\t\r\n\f]+/g;function N(e){return e}function q(e){throw e}function L(e,t,n,r){var i;try{e&&v(i=e.promise)?i.call(e).done(t).fail(n):e&&v(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}ce.Callbacks=function(r){var e,n;r="string"==typeof r?(e=r,n={},ce.each(e.match(D)||[],function(e,t){n[t]=!0}),n):ce.extend({},r);var i,t,o,a,s=[],u=[],l=-1,c=function(){for(a=a||r.once,o=i=!0;u.length;l=-1){t=u.shift();while(++l<s.length)!1===s[l].apply(t[0],t[1])&&r.stopOnFalse&&(l=s.length,t=!1)}r.memory||(t=!1),i=!1,a&&(s=t?[]:"")},f={add:function(){return s&&(t&&!i&&(l=s.length-1,u.push(t)),function n(e){ce.each(e,function(e,t){v(t)?r.unique&&f.has(t)||s.push(t):t&&t.length&&"string"!==x(t)&&n(t)})}(arguments),t&&!i&&c()),this},remove:function(){return ce.each(arguments,function(e,t){var n;while(-1<(n=ce.inArray(t,s,n)))s.splice(n,1),n<=l&&l--}),this},has:function(e){return e?-1<ce.inArray(e,s):0<s.length},empty:function(){return s&&(s=[]),this},disable:function(){return a=u=[],s=t="",this},disabled:function(){return!s},lock:function(){return a=u=[],t||i||(s=t=""),this},locked:function(){return!!a},fireWith:function(e,t){return a||(t=[e,(t=t||[]).slice?t.slice():t],u.push(t),i||c()),this},fire:function(){return f.fireWith(this,arguments),this},fired:function(){return!!o}};return f},ce.extend({Deferred:function(e){var o=[["notify","progress",ce.Callbacks("memory"),ce.Callbacks("memory"),2],["resolve","done",ce.Callbacks("once memory"),ce.Callbacks("once memory"),0,"resolved"],["reject","fail",ce.Callbacks("once memory"),ce.Callbacks("once memory"),1,"rejected"]],i="pending",a={state:function(){return i},always:function(){return s.done(arguments).fail(arguments),this},"catch":function(e){return a.then(null,e)},pipe:function(){var i=arguments;return ce.Deferred(function(r){ce.each(o,function(e,t){var n=v(i[t[4]])&&i[t[4]];s[t[1]](function(){var e=n&&n.apply(this,arguments);e&&v(e.promise)?e.promise().progress(r.notify).done(r.resolve).fail(r.reject):r[t[0]+"With"](this,n?[e]:arguments)})}),i=null}).promise()},then:function(t,n,r){var u=0;function l(i,o,a,s){return function(){var n=this,r=arguments,e=function(){var e,t;if(!(i<u)){if((e=a.apply(n,r))===o.promise())throw new TypeError("Thenable self-resolution");t=e&&("object"==typeof e||"function"==typeof e)&&e.then,v(t)?s?t.call(e,l(u,o,N,s),l(u,o,q,s)):(u++,t.call(e,l(u,o,N,s),l(u,o,q,s),l(u,o,N,o.notifyWith))):(a!==N&&(n=void 0,r=[e]),(s||o.resolveWith)(n,r))}},t=s?e:function(){try{e()}catch(e){ce.Deferred.exceptionHook&&ce.Deferred.exceptionHook(e,t.error),u<=i+1&&(a!==q&&(n=void 0,r=[e]),o.rejectWith(n,r))}};i?t():(ce.Deferred.getErrorHook?t.error=ce.Deferred.getErrorHook():ce.Deferred.getStackHook&&(t.error=ce.Deferred.getStackHook()),ie.setTimeout(t))}}return ce.Deferred(function(e){o[0][3].add(l(0,e,v(r)?r:N,e.notifyWith)),o[1][3].add(l(0,e,v(t)?t:N)),o[2][3].add(l(0,e,v(n)?n:q))}).promise()},promise:function(e){return null!=e?ce.extend(e,a):a}},s={};return ce.each(o,function(e,t){var n=t[2],r=t[5];a[t[1]]=n.add,r&&n.add(function(){i=r},o[3-e][2].disable,o[3-e][3].disable,o[0][2].lock,o[0][3].lock),n.add(t[3].fire),s[t[0]]=function(){return s[t[0]+"With"](this===s?void 0:this,arguments),this},s[t[0]+"With"]=n.fireWith}),a.promise(s),e&&e.call(s,s),s},when:function(e){var n=arguments.length,t=n,r=Array(t),i=ae.call(arguments),o=ce.Deferred(),a=function(t){return function(e){r[t]=this,i[t]=1<arguments.length?ae.call(arguments):e,--n||o.resolveWith(r,i)}};if(n<=1&&(L(e,o.done(a(t)).resolve,o.reject,!n),"pending"===o.state()||v(i[t]&&i[t].then)))return o.then();while(t--)L(i[t],a(t),o.reject);return o.promise()}});var H=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;ce.Deferred.exceptionHook=function(e,t){ie.console&&ie.console.warn&&e&&H.test(e.name)&&ie.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},ce.readyException=function(e){ie.setTimeout(function(){throw e})};var O=ce.Deferred();function P(){C.removeEventListener("DOMContentLoaded",P),ie.removeEventListener("load",P),ce.ready()}ce.fn.ready=function(e){return O.then(e)["catch"](function(e){ce.readyException(e)}),this},ce.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--ce.readyWait:ce.isReady)||(ce.isReady=!0)!==e&&0<--ce.readyWait||O.resolveWith(C,[ce])}}),ce.ready.then=O.then,"complete"===C.readyState||"loading"!==C.readyState&&!C.documentElement.doScroll?ie.setTimeout(ce.ready):(C.addEventListener("DOMContentLoaded",P),ie.addEventListener("load",P));var M=function(e,t,n,r,i,o,a){var s=0,u=e.length,l=null==n;if("object"===x(n))for(s in i=!0,n)M(e,t,s,n[s],!0,o,a);else if(void 0!==r&&(i=!0,v(r)||(a=!0),l&&(a?(t.call(e,r),t=null):(l=t,t=function(e,t,n){return l.call(ce(e),n)})),t))for(;s<u;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return i?e:l?t.call(e):u?t(e[0],n):o},R=/^-ms-/,I=/-([a-z])/g;function W(e,t){return t.toUpperCase()}function F(e){return e.replace(R,"ms-").replace(I,W)}var $=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function B(){this.expando=ce.expando+B.uid++}B.uid=1,B.prototype={cache:function(e){var t=e[this.expando];return t||(t={},$(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[F(t)]=n;else for(r in t)i[F(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][F(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(F):(t=F(t))in r?[t]:t.match(D)||[]).length;while(n--)delete r[t[n]]}(void 0===t||ce.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!ce.isEmptyObject(t)}};var _=new B,z=new B,X=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,U=/[A-Z]/g;function V(e,t,n){var r,i;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(U,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n="true"===(i=n)||"false"!==i&&("null"===i?null:i===+i+""?+i:X.test(i)?JSON.parse(i):i)}catch(e){}z.set(e,t,n)}else n=void 0;return n}ce.extend({hasData:function(e){return z.hasData(e)||_.hasData(e)},data:function(e,t,n){return z.access(e,t,n)},removeData:function(e,t){z.remove(e,t)},_data:function(e,t,n){return _.access(e,t,n)},_removeData:function(e,t){_.remove(e,t)}}),ce.fn.extend({data:function(n,e){var t,r,i,o=this[0],a=o&&o.attributes;if(void 0===n){if(this.length&&(i=z.get(o),1===o.nodeType&&!_.get(o,"hasDataAttrs"))){t=a.length;while(t--)a[t]&&0===(r=a[t].name).indexOf("data-")&&(r=F(r.slice(5)),V(o,r,i[r]));_.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof n?this.each(function(){z.set(this,n)}):M(this,function(e){var t;if(o&&void 0===e)return void 0!==(t=z.get(o,n))?t:void 0!==(t=V(o,n))?t:void 0;this.each(function(){z.set(this,n,e)})},null,e,1<arguments.length,null,!0)},removeData:function(e){return this.each(function(){z.remove(this,e)})}}),ce.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=_.get(e,t),n&&(!r||Array.isArray(n)?r=_.access(e,t,ce.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=ce.queue(e,t),r=n.length,i=n.shift(),o=ce._queueHooks(e,t);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,function(){ce.dequeue(e,t)},o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return _.get(e,n)||_.access(e,n,{empty:ce.Callbacks("once memory").add(function(){_.remove(e,[t+"queue",n])})})}}),ce.fn.extend({queue:function(t,n){var e=2;return"string"!=typeof t&&(n=t,t="fx",e--),arguments.length<e?ce.queue(this[0],t):void 0===n?this:this.each(function(){var e=ce.queue(this,t,n);ce._queueHooks(this,t),"fx"===t&&"inprogress"!==e[0]&&ce.dequeue(this,t)})},dequeue:function(e){return this.each(function(){ce.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=ce.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};"string"!=typeof e&&(t=e,e=void 0),e=e||"fx";while(a--)(n=_.get(o[a],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(t)}});var G=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Y=new RegExp("^(?:([+-])=|)("+G+")([a-z%]*)$","i"),Q=["Top","Right","Bottom","Left"],J=C.documentElement,K=function(e){return ce.contains(e.ownerDocument,e)},Z={composed:!0};J.getRootNode&&(K=function(e){return ce.contains(e.ownerDocument,e)||e.getRootNode(Z)===e.ownerDocument});var ee=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&K(e)&&"none"===ce.css(e,"display")};function te(e,t,n,r){var i,o,a=20,s=r?function(){return r.cur()}:function(){return ce.css(e,t,"")},u=s(),l=n&&n[3]||(ce.cssNumber[t]?"":"px"),c=e.nodeType&&(ce.cssNumber[t]||"px"!==l&&+u)&&Y.exec(ce.css(e,t));if(c&&c[3]!==l){u/=2,l=l||c[3],c=+u||1;while(a--)ce.style(e,t,c+l),(1-o)*(1-(o=s()/u||.5))<=0&&(a=0),c/=o;c*=2,ce.style(e,t,c+l),n=n||[]}return n&&(c=+c||+u||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=l,r.start=c,r.end=i)),i}var ne={};function re(e,t){for(var n,r,i,o,a,s,u,l=[],c=0,f=e.length;c<f;c++)(r=e[c]).style&&(n=r.style.display,t?("none"===n&&(l[c]=_.get(r,"display")||null,l[c]||(r.style.display="")),""===r.style.display&&ee(r)&&(l[c]=(u=a=o=void 0,a=(i=r).ownerDocument,s=i.nodeName,(u=ne[s])||(o=a.body.appendChild(a.createElement(s)),u=ce.css(o,"display"),o.parentNode.removeChild(o),"none"===u&&(u="block"),ne[s]=u)))):"none"!==n&&(l[c]="none",_.set(r,"display",n)));for(c=0;c<f;c++)null!=l[c]&&(e[c].style.display=l[c]);return e}ce.fn.extend({show:function(){return re(this,!0)},hide:function(){return re(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){ee(this)?ce(this).show():ce(this).hide()})}});var xe,be,we=/^(?:checkbox|radio)$/i,Te=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,Ce=/^$|^module$|\/(?:java|ecma)script/i;xe=C.createDocumentFragment().appendChild(C.createElement("div")),(be=C.createElement("input")).setAttribute("type","radio"),be.setAttribute("checked","checked"),be.setAttribute("name","t"),xe.appendChild(be),le.checkClone=xe.cloneNode(!0).cloneNode(!0).lastChild.checked,xe.innerHTML="<textarea>x</textarea>",le.noCloneChecked=!!xe.cloneNode(!0).lastChild.defaultValue,xe.innerHTML="<option></option>",le.option=!!xe.lastChild;var ke={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function Se(e,t){var n;return n="undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t||"*"):"undefined"!=typeof e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&fe(e,t)?ce.merge([e],n):n}function Ee(e,t){for(var n=0,r=e.length;n<r;n++)_.set(e[n],"globalEval",!t||_.get(t[n],"globalEval"))}ke.tbody=ke.tfoot=ke.colgroup=ke.caption=ke.thead,ke.th=ke.td,le.option||(ke.optgroup=ke.option=[1,"<select multiple='multiple'>","</select>"]);var je=/<|&#?\w+;/;function Ae(e,t,n,r,i){for(var o,a,s,u,l,c,f=t.createDocumentFragment(),p=[],d=0,h=e.length;d<h;d++)if((o=e[d])||0===o)if("object"===x(o))ce.merge(p,o.nodeType?[o]:o);else if(je.test(o)){a=a||f.appendChild(t.createElement("div")),s=(Te.exec(o)||["",""])[1].toLowerCase(),u=ke[s]||ke._default,a.innerHTML=u[1]+ce.htmlPrefilter(o)+u[2],c=u[0];while(c--)a=a.lastChild;ce.merge(p,a.childNodes),(a=f.firstChild).textContent=""}else p.push(t.createTextNode(o));f.textContent="",d=0;while(o=p[d++])if(r&&-1<ce.inArray(o,r))i&&i.push(o);else if(l=K(o),a=Se(f.appendChild(o),"script"),l&&Ee(a),n){c=0;while(o=a[c++])Ce.test(o.type||"")&&n.push(o)}return f}var De=/^([^.]*)(?:\.(.+)|)/;function Ne(){return!0}function qe(){return!1}function Le(e,t,n,r,i,o){var a,s;if("object"==typeof t){for(s in"string"!=typeof n&&(r=r||n,n=void 0),t)Le(e,s,n,r,t[s],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=qe;else if(!i)return e;return 1===o&&(a=i,(i=function(e){return ce().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=ce.guid++)),e.each(function(){ce.event.add(this,t,i,r,n)})}function He(e,r,t){t?(_.set(e,r,!1),ce.event.add(e,r,{namespace:!1,handler:function(e){var t,n=_.get(this,r);if(1&e.isTrigger&&this[r]){if(n)(ce.event.special[r]||{}).delegateType&&e.stopPropagation();else if(n=ae.call(arguments),_.set(this,r,n),this[r](),t=_.get(this,r),_.set(this,r,!1),n!==t)return e.stopImmediatePropagation(),e.preventDefault(),t}else n&&(_.set(this,r,ce.event.trigger(n[0],n.slice(1),this)),e.stopPropagation(),e.isImmediatePropagationStopped=Ne)}})):void 0===_.get(e,r)&&ce.event.add(e,r,Ne)}ce.event={global:{},add:function(t,e,n,r,i){var o,a,s,u,l,c,f,p,d,h,g,v=_.get(t);if($(t)){n.handler&&(n=(o=n).handler,i=o.selector),i&&ce.find.matchesSelector(J,i),n.guid||(n.guid=ce.guid++),(u=v.events)||(u=v.events=Object.create(null)),(a=v.handle)||(a=v.handle=function(e){return"undefined"!=typeof ce&&ce.event.triggered!==e.type?ce.event.dispatch.apply(t,arguments):void 0}),l=(e=(e||"").match(D)||[""]).length;while(l--)d=g=(s=De.exec(e[l])||[])[1],h=(s[2]||"").split(".").sort(),d&&(f=ce.event.special[d]||{},d=(i?f.delegateType:f.bindType)||d,f=ce.event.special[d]||{},c=ce.extend({type:d,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&ce.expr.match.needsContext.test(i),namespace:h.join(".")},o),(p=u[d])||((p=u[d]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(t,r,h,a)||t.addEventListener&&t.addEventListener(d,a)),f.add&&(f.add.call(t,c),c.handler.guid||(c.handler.guid=n.guid)),i?p.splice(p.delegateCount++,0,c):p.push(c),ce.event.global[d]=!0)}},remove:function(e,t,n,r,i){var o,a,s,u,l,c,f,p,d,h,g,v=_.hasData(e)&&_.get(e);if(v&&(u=v.events)){l=(t=(t||"").match(D)||[""]).length;while(l--)if(d=g=(s=De.exec(t[l])||[])[1],h=(s[2]||"").split(".").sort(),d){f=ce.event.special[d]||{},p=u[d=(r?f.delegateType:f.bindType)||d]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=p.length;while(o--)c=p[o],!i&&g!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(p.splice(o,1),c.selector&&p.delegateCount--,f.remove&&f.remove.call(e,c));a&&!p.length&&(f.teardown&&!1!==f.teardown.call(e,h,v.handle)||ce.removeEvent(e,d,v.handle),delete u[d])}else for(d in u)ce.event.remove(e,d+t[l],n,r,!0);ce.isEmptyObject(u)&&_.remove(e,"handle events")}},dispatch:function(e){var t,n,r,i,o,a,s=new Array(arguments.length),u=ce.event.fix(e),l=(_.get(this,"events")||Object.create(null))[u.type]||[],c=ce.event.special[u.type]||{};for(s[0]=u,t=1;t<arguments.length;t++)s[t]=arguments[t];if(u.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,u)){a=ce.event.handlers.call(this,u,l),t=0;while((i=a[t++])&&!u.isPropagationStopped()){u.currentTarget=i.elem,n=0;while((o=i.handlers[n++])&&!u.isImmediatePropagationStopped())u.rnamespace&&!1!==o.namespace&&!u.rnamespace.test(o.namespace)||(u.handleObj=o,u.data=o.data,void 0!==(r=((ce.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,s))&&!1===(u.result=r)&&(u.preventDefault(),u.stopPropagation()))}return c.postDispatch&&c.postDispatch.call(this,u),u.result}},handlers:function(e,t){var n,r,i,o,a,s=[],u=t.delegateCount,l=e.target;if(u&&l.nodeType&&!("click"===e.type&&1<=e.button))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&("click"!==e.type||!0!==l.disabled)){for(o=[],a={},n=0;n<u;n++)void 0===a[i=(r=t[n]).selector+" "]&&(a[i]=r.needsContext?-1<ce(i,this).index(l):ce.find(i,this,null,[l]).length),a[i]&&o.push(r);o.length&&s.push({elem:l,handlers:o})}return l=this,u<t.length&&s.push({elem:l,handlers:t.slice(u)}),s},addProp:function(t,e){Object.defineProperty(ce.Event.prototype,t,{enumerable:!0,configurable:!0,get:v(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(e){return e[ce.expando]?e:new ce.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return we.test(t.type)&&t.click&&fe(t,"input")&&He(t,"click",!0),!1},trigger:function(e){var t=this||e;return we.test(t.type)&&t.click&&fe(t,"input")&&He(t,"click"),!0},_default:function(e){var t=e.target;return we.test(t.type)&&t.click&&fe(t,"input")&&_.get(t,"click")||fe(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},ce.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},ce.Event=function(e,t){if(!(this instanceof ce.Event))return new ce.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Ne:qe,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&ce.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[ce.expando]=!0},ce.Event.prototype={constructor:ce.Event,isDefaultPrevented:qe,isPropagationStopped:qe,isImmediatePropagationStopped:qe,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Ne,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Ne,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Ne,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},ce.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,"char":!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},ce.event.addProp),ce.each({focus:"focusin",blur:"focusout"},function(r,i){function o(e){if(C.documentMode){var t=_.get(this,"handle"),n=ce.event.fix(e);n.type="focusin"===e.type?"focus":"blur",n.isSimulated=!0,t(e),n.target===n.currentTarget&&t(n)}else ce.event.simulate(i,e.target,ce.event.fix(e))}ce.event.special[r]={setup:function(){var e;if(He(this,r,!0),!C.documentMode)return!1;(e=_.get(this,i))||this.addEventListener(i,o),_.set(this,i,(e||0)+1)},trigger:function(){return He(this,r),!0},teardown:function(){var e;if(!C.documentMode)return!1;(e=_.get(this,i)-1)?_.set(this,i,e):(this.removeEventListener(i,o),_.remove(this,i))},_default:function(e){return _.get(e.target,r)},delegateType:i},ce.event.special[i]={setup:function(){var e=this.ownerDocument||this.document||this,t=C.documentMode?this:e,n=_.get(t,i);n||(C.documentMode?this.addEventListener(i,o):e.addEventListener(r,o,!0)),_.set(t,i,(n||0)+1)},teardown:function(){var e=this.ownerDocument||this.document||this,t=C.documentMode?this:e,n=_.get(t,i)-1;n?_.set(t,i,n):(C.documentMode?this.removeEventListener(i,o):e.removeEventListener(r,o,!0),_.remove(t,i))}}}),ce.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,i){ce.event.special[e]={delegateType:i,bindType:i,handle:function(e){var t,n=e.relatedTarget,r=e.handleObj;return n&&(n===this||ce.contains(this,n))||(e.type=r.origType,t=r.handler.apply(this,arguments),e.type=i),t}}}),ce.fn.extend({on:function(e,t,n,r){return Le(this,e,t,n,r)},one:function(e,t,n,r){return Le(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,ce(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=qe),this.each(function(){ce.event.remove(this,e,n,t)})}});var Oe=/<script|<style|<link/i,Pe=/checked\s*(?:[^=]|=\s*.checked.)/i,Me=/^\s*<!\[CDATA\[|\]\]>\s*$/g;function Re(e,t){return fe(e,"table")&&fe(11!==t.nodeType?t:t.firstChild,"tr")&&ce(e).children("tbody")[0]||e}function Ie(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function We(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Fe(e,t){var n,r,i,o,a,s;if(1===t.nodeType){if(_.hasData(e)&&(s=_.get(e).events))for(i in _.remove(t,"handle events"),s)for(n=0,r=s[i].length;n<r;n++)ce.event.add(t,i,s[i][n]);z.hasData(e)&&(o=z.access(e),a=ce.extend({},o),z.set(t,a))}}function $e(n,r,i,o){r=g(r);var e,t,a,s,u,l,c=0,f=n.length,p=f-1,d=r[0],h=v(d);if(h||1<f&&"string"==typeof d&&!le.checkClone&&Pe.test(d))return n.each(function(e){var t=n.eq(e);h&&(r[0]=d.call(this,e,t.html())),$e(t,r,i,o)});if(f&&(t=(e=Ae(r,n[0].ownerDocument,!1,n,o)).firstChild,1===e.childNodes.length&&(e=t),t||o)){for(s=(a=ce.map(Se(e,"script"),Ie)).length;c<f;c++)u=e,c!==p&&(u=ce.clone(u,!0,!0),s&&ce.merge(a,Se(u,"script"))),i.call(n[c],u,c);if(s)for(l=a[a.length-1].ownerDocument,ce.map(a,We),c=0;c<s;c++)u=a[c],Ce.test(u.type||"")&&!_.access(u,"globalEval")&&ce.contains(l,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?ce._evalUrl&&!u.noModule&&ce._evalUrl(u.src,{nonce:u.nonce||u.getAttribute("nonce")},l):m(u.textContent.replace(Me,""),u,l))}return n}function Be(e,t,n){for(var r,i=t?ce.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||ce.cleanData(Se(r)),r.parentNode&&(n&&K(r)&&Ee(Se(r,"script")),r.parentNode.removeChild(r));return e}ce.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var r,i,o,a,s,u,l,c=e.cloneNode(!0),f=K(e);if(!(le.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||ce.isXMLDoc(e)))for(a=Se(c),r=0,i=(o=Se(e)).length;r<i;r++)s=o[r],u=a[r],void 0,"input"===(l=u.nodeName.toLowerCase())&&we.test(s.type)?u.checked=s.checked:"input"!==l&&"textarea"!==l||(u.defaultValue=s.defaultValue);if(t)if(n)for(o=o||Se(e),a=a||Se(c),r=0,i=o.length;r<i;r++)Fe(o[r],a[r]);else Fe(e,c);return 0<(a=Se(c,"script")).length&&Ee(a,!f&&Se(e,"script")),c},cleanData:function(e){for(var t,n,r,i=ce.event.special,o=0;void 0!==(n=e[o]);o++)if($(n)){if(t=n[_.expando]){if(t.events)for(r in t.events)i[r]?ce.event.remove(n,r):ce.removeEvent(n,r,t.handle);n[_.expando]=void 0}n[z.expando]&&(n[z.expando]=void 0)}}}),ce.fn.extend({detach:function(e){return Be(this,e,!0)},remove:function(e){return Be(this,e)},text:function(e){return M(this,function(e){return void 0===e?ce.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return $e(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Re(this,e).appendChild(e)})},prepend:function(){return $e(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Re(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return $e(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return $e(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(ce.cleanData(Se(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return ce.clone(this,e,t)})},html:function(e){return M(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Oe.test(e)&&!ke[(Te.exec(e)||["",""])[1].toLowerCase()]){e=ce.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(ce.cleanData(Se(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var n=[];return $e(this,arguments,function(e){var t=this.parentNode;ce.inArray(this,n)<0&&(ce.cleanData(Se(this)),t&&t.replaceChild(e,this))},n)}}),ce.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,a){ce.fn[e]=function(e){for(var t,n=[],r=ce(e),i=r.length-1,o=0;o<=i;o++)t=o===i?this:this.clone(!0),ce(r[o])[a](t),s.apply(n,t.get());return this.pushStack(n)}});var _e=new RegExp("^("+G+")(?!px)[a-z%]+$","i"),ze=/^--/,Xe=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=ie),t.getComputedStyle(e)},Ue=function(e,t,n){var r,i,o={};for(i in t)o[i]=e.style[i],e.style[i]=t[i];for(i in r=n.call(e),t)e.style[i]=o[i];return r},Ve=new RegExp(Q.join("|"),"i");function Ge(e,t,n){var r,i,o,a,s=ze.test(t),u=e.style;return(n=n||Xe(e))&&(a=n.getPropertyValue(t)||n[t],s&&a&&(a=a.replace(ve,"$1")||void 0),""!==a||K(e)||(a=ce.style(e,t)),!le.pixelBoxStyles()&&_e.test(a)&&Ve.test(t)&&(r=u.width,i=u.minWidth,o=u.maxWidth,u.minWidth=u.maxWidth=u.width=a,a=n.width,u.width=r,u.minWidth=i,u.maxWidth=o)),void 0!==a?a+"":a}function Ye(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(l){u.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",l.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",J.appendChild(u).appendChild(l);var e=ie.getComputedStyle(l);n="1%"!==e.top,s=12===t(e.marginLeft),l.style.right="60%",o=36===t(e.right),r=36===t(e.width),l.style.position="absolute",i=12===t(l.offsetWidth/3),J.removeChild(u),l=null}}function t(e){return Math.round(parseFloat(e))}var n,r,i,o,a,s,u=C.createElement("div"),l=C.createElement("div");l.style&&(l.style.backgroundClip="content-box",l.cloneNode(!0).style.backgroundClip="",le.clearCloneStyle="content-box"===l.style.backgroundClip,ce.extend(le,{boxSizingReliable:function(){return e(),r},pixelBoxStyles:function(){return e(),o},pixelPosition:function(){return e(),n},reliableMarginLeft:function(){return e(),s},scrollboxSize:function(){return e(),i},reliableTrDimensions:function(){var e,t,n,r;return null==a&&(e=C.createElement("table"),t=C.createElement("tr"),n=C.createElement("div"),e.style.cssText="position:absolute;left:-11111px;border-collapse:separate",t.style.cssText="box-sizing:content-box;border:1px solid",t.style.height="1px",n.style.height="9px",n.style.display="block",J.appendChild(e).appendChild(t).appendChild(n),r=ie.getComputedStyle(t),a=parseInt(r.height,10)+parseInt(r.borderTopWidth,10)+parseInt(r.borderBottomWidth,10)===t.offsetHeight,J.removeChild(e)),a}}))}();var Qe=["Webkit","Moz","ms"],Je=C.createElement("div").style,Ke={};function Ze(e){var t=ce.cssProps[e]||Ke[e];return t||(e in Je?e:Ke[e]=function(e){var t=e[0].toUpperCase()+e.slice(1),n=Qe.length;while(n--)if((e=Qe[n]+t)in Je)return e}(e)||e)}var et=/^(none|table(?!-c[ea]).+)/,tt={position:"absolute",visibility:"hidden",display:"block"},nt={letterSpacing:"0",fontWeight:"400"};function rt(e,t,n){var r=Y.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function it(e,t,n,r,i,o){var a="width"===t?1:0,s=0,u=0,l=0;if(n===(r?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(l+=ce.css(e,n+Q[a],!0,i)),r?("content"===n&&(u-=ce.css(e,"padding"+Q[a],!0,i)),"margin"!==n&&(u-=ce.css(e,"border"+Q[a]+"Width",!0,i))):(u+=ce.css(e,"padding"+Q[a],!0,i),"padding"!==n?u+=ce.css(e,"border"+Q[a]+"Width",!0,i):s+=ce.css(e,"border"+Q[a]+"Width",!0,i));return!r&&0<=o&&(u+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-u-s-.5))||0),u+l}function ot(e,t,n){var r=Xe(e),i=(!le.boxSizingReliable()||n)&&"border-box"===ce.css(e,"boxSizing",!1,r),o=i,a=Ge(e,t,r),s="offset"+t[0].toUpperCase()+t.slice(1);if(_e.test(a)){if(!n)return a;a="auto"}return(!le.boxSizingReliable()&&i||!le.reliableTrDimensions()&&fe(e,"tr")||"auto"===a||!parseFloat(a)&&"inline"===ce.css(e,"display",!1,r))&&e.getClientRects().length&&(i="border-box"===ce.css(e,"boxSizing",!1,r),(o=s in e)&&(a=e[s])),(a=parseFloat(a)||0)+it(e,t,n||(i?"border":"content"),o,r,a)+"px"}function at(e,t,n,r,i){return new at.prototype.init(e,t,n,r,i)}ce.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Ge(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,aspectRatio:!0,borderImageSlice:!0,columnCount:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,scale:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeMiterlimit:!0,strokeOpacity:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,a,s=F(t),u=ze.test(t),l=e.style;if(u||(t=Ze(s)),a=ce.cssHooks[t]||ce.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(i=a.get(e,!1,r))?i:l[t];"string"===(o=typeof n)&&(i=Y.exec(n))&&i[1]&&(n=te(e,t,i),o="number"),null!=n&&n==n&&("number"!==o||u||(n+=i&&i[3]||(ce.cssNumber[s]?"":"px")),le.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,r))||(u?l.setProperty(t,n):l[t]=n))}},css:function(e,t,n,r){var i,o,a,s=F(t);return ze.test(t)||(t=Ze(s)),(a=ce.cssHooks[t]||ce.cssHooks[s])&&"get"in a&&(i=a.get(e,!0,n)),void 0===i&&(i=Ge(e,t,r)),"normal"===i&&t in nt&&(i=nt[t]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),ce.each(["height","width"],function(e,u){ce.cssHooks[u]={get:function(e,t,n){if(t)return!et.test(ce.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?ot(e,u,n):Ue(e,tt,function(){return ot(e,u,n)})},set:function(e,t,n){var r,i=Xe(e),o=!le.scrollboxSize()&&"absolute"===i.position,a=(o||n)&&"border-box"===ce.css(e,"boxSizing",!1,i),s=n?it(e,u,n,a,i):0;return a&&o&&(s-=Math.ceil(e["offset"+u[0].toUpperCase()+u.slice(1)]-parseFloat(i[u])-it(e,u,"border",!1,i)-.5)),s&&(r=Y.exec(t))&&"px"!==(r[3]||"px")&&(e.style[u]=t,t=ce.css(e,u)),rt(0,t,s)}}}),ce.cssHooks.marginLeft=Ye(le.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Ge(e,"marginLeft"))||e.getBoundingClientRect().left-Ue(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),ce.each({margin:"",padding:"",border:"Width"},function(i,o){ce.cssHooks[i+o]={expand:function(e){for(var t=0,n={},r="string"==typeof e?e.split(" "):[e];t<4;t++)n[i+Q[t]+o]=r[t]||r[t-2]||r[0];return n}},"margin"!==i&&(ce.cssHooks[i+o].set=rt)}),ce.fn.extend({css:function(e,t){return M(this,function(e,t,n){var r,i,o={},a=0;if(Array.isArray(t)){for(r=Xe(e),i=t.length;a<i;a++)o[t[a]]=ce.css(e,t[a],!1,r);return o}return void 0!==n?ce.style(e,t,n):ce.css(e,t)},e,t,1<arguments.length)}}),((ce.Tween=at).prototype={constructor:at,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||ce.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(ce.cssNumber[n]?"":"px")},cur:function(){var e=at.propHooks[this.prop];return e&&e.get?e.get(this):at.propHooks._default.get(this)},run:function(e){var t,n=at.propHooks[this.prop];return this.options.duration?this.pos=t=ce.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):at.propHooks._default.set(this),this}}).init.prototype=at.prototype,(at.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=ce.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){ce.fx.step[e.prop]?ce.fx.step[e.prop](e):1!==e.elem.nodeType||!ce.cssHooks[e.prop]&&null==e.elem.style[Ze(e.prop)]?e.elem[e.prop]=e.now:ce.style(e.elem,e.prop,e.now+e.unit)}}}).scrollTop=at.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},ce.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},ce.fx=at.prototype.init,ce.fx.step={};var st,ut,lt,ct,ft=/^(?:toggle|show|hide)$/,pt=/queueHooks$/;function dt(){ut&&(!1===C.hidden&&ie.requestAnimationFrame?ie.requestAnimationFrame(dt):ie.setTimeout(dt,ce.fx.interval),ce.fx.tick())}function ht(){return ie.setTimeout(function(){st=void 0}),st=Date.now()}function gt(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)i["margin"+(n=Q[r])]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function vt(e,t,n){for(var r,i=(yt.tweeners[t]||[]).concat(yt.tweeners["*"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,t,e))return r}function yt(o,e,t){var n,a,r=0,i=yt.prefilters.length,s=ce.Deferred().always(function(){delete u.elem}),u=function(){if(a)return!1;for(var e=st||ht(),t=Math.max(0,l.startTime+l.duration-e),n=1-(t/l.duration||0),r=0,i=l.tweens.length;r<i;r++)l.tweens[r].run(n);return s.notifyWith(o,[l,n,t]),n<1&&i?t:(i||s.notifyWith(o,[l,1,0]),s.resolveWith(o,[l]),!1)},l=s.promise({elem:o,props:ce.extend({},e),opts:ce.extend(!0,{specialEasing:{},easing:ce.easing._default},t),originalProperties:e,originalOptions:t,startTime:st||ht(),duration:t.duration,tweens:[],createTween:function(e,t){var n=ce.Tween(o,l.opts,e,t,l.opts.specialEasing[e]||l.opts.easing);return l.tweens.push(n),n},stop:function(e){var t=0,n=e?l.tweens.length:0;if(a)return this;for(a=!0;t<n;t++)l.tweens[t].run(1);return e?(s.notifyWith(o,[l,1,0]),s.resolveWith(o,[l,e])):s.rejectWith(o,[l,e]),this}}),c=l.props;for(!function(e,t){var n,r,i,o,a;for(n in e)if(i=t[r=F(n)],o=e[n],Array.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),(a=ce.cssHooks[r])&&"expand"in a)for(n in o=a.expand(o),delete e[r],o)n in e||(e[n]=o[n],t[n]=i);else t[r]=i}(c,l.opts.specialEasing);r<i;r++)if(n=yt.prefilters[r].call(l,o,c,l.opts))return v(n.stop)&&(ce._queueHooks(l.elem,l.opts.queue).stop=n.stop.bind(n)),n;return ce.map(c,vt,l),v(l.opts.start)&&l.opts.start.call(o,l),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always),ce.fx.timer(ce.extend(u,{elem:o,anim:l,queue:l.opts.queue})),l}ce.Animation=ce.extend(yt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return te(n.elem,e,Y.exec(t),n),n}]},tweener:function(e,t){v(e)?(t=e,e=["*"]):e=e.match(D);for(var n,r=0,i=e.length;r<i;r++)n=e[r],yt.tweeners[n]=yt.tweeners[n]||[],yt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,i,o,a,s,u,l,c,f="width"in t||"height"in t,p=this,d={},h=e.style,g=e.nodeType&&ee(e),v=_.get(e,"fxshow");for(r in n.queue||(null==(a=ce._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,p.always(function(){p.always(function(){a.unqueued--,ce.queue(e,"fx").length||a.empty.fire()})})),t)if(i=t[r],ft.test(i)){if(delete t[r],o=o||"toggle"===i,i===(g?"hide":"show")){if("show"!==i||!v||void 0===v[r])continue;g=!0}d[r]=v&&v[r]||ce.style(e,r)}if((u=!ce.isEmptyObject(t))||!ce.isEmptyObject(d))for(r in f&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(l=v&&v.display)&&(l=_.get(e,"display")),"none"===(c=ce.css(e,"display"))&&(l?c=l:(re([e],!0),l=e.style.display||l,c=ce.css(e,"display"),re([e]))),("inline"===c||"inline-block"===c&&null!=l)&&"none"===ce.css(e,"float")&&(u||(p.done(function(){h.display=l}),null==l&&(c=h.display,l="none"===c?"":c)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",p.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),u=!1,d)u||(v?"hidden"in v&&(g=v.hidden):v=_.access(e,"fxshow",{display:l}),o&&(v.hidden=!g),g&&re([e],!0),p.done(function(){for(r in g||re([e]),_.remove(e,"fxshow"),d)ce.style(e,r,d[r])})),u=vt(g?v[r]:0,r,p),r in v||(v[r]=u.start,g&&(u.end=u.start,u.start=0))}],prefilter:function(e,t){t?yt.prefilters.unshift(e):yt.prefilters.push(e)}}),ce.speed=function(e,t,n){var r=e&&"object"==typeof e?ce.extend({},e):{complete:n||!n&&t||v(e)&&e,duration:e,easing:n&&t||t&&!v(t)&&t};return ce.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in ce.fx.speeds?r.duration=ce.fx.speeds[r.duration]:r.duration=ce.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){v(r.old)&&r.old.call(this),r.queue&&ce.dequeue(this,r.queue)},r},ce.fn.extend({fadeTo:function(e,t,n,r){return this.filter(ee).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(t,e,n,r){var i=ce.isEmptyObject(t),o=ce.speed(e,n,r),a=function(){var e=yt(this,ce.extend({},t),o);(i||_.get(this,"finish"))&&e.stop(!0)};return a.finish=a,i||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(i,e,o){var a=function(e){var t=e.stop;delete e.stop,t(o)};return"string"!=typeof i&&(o=e,e=i,i=void 0),e&&this.queue(i||"fx",[]),this.each(function(){var e=!0,t=null!=i&&i+"queueHooks",n=ce.timers,r=_.get(this);if(t)r[t]&&r[t].stop&&a(r[t]);else for(t in r)r[t]&&r[t].stop&&pt.test(t)&&a(r[t]);for(t=n.length;t--;)n[t].elem!==this||null!=i&&n[t].queue!==i||(n[t].anim.stop(o),e=!1,n.splice(t,1));!e&&o||ce.dequeue(this,i)})},finish:function(a){return!1!==a&&(a=a||"fx"),this.each(function(){var e,t=_.get(this),n=t[a+"queue"],r=t[a+"queueHooks"],i=ce.timers,o=n?n.length:0;for(t.finish=!0,ce.queue(this,a,[]),r&&r.stop&&r.stop.call(this,!0),e=i.length;e--;)i[e].elem===this&&i[e].queue===a&&(i[e].anim.stop(!0),i.splice(e,1));for(e=0;e<o;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete t.finish})}}),ce.each(["toggle","show","hide"],function(e,r){var i=ce.fn[r];ce.fn[r]=function(e,t,n){return null==e||"boolean"==typeof e?i.apply(this,arguments):this.animate(gt(r,!0),e,t,n)}}),ce.each({slideDown:gt("show"),slideUp:gt("hide"),slideToggle:gt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,r){ce.fn[e]=function(e,t,n){return this.animate(r,e,t,n)}}),ce.timers=[],ce.fx.tick=function(){var e,t=0,n=ce.timers;for(st=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||ce.fx.stop(),st=void 0},ce.fx.timer=function(e){ce.timers.push(e),ce.fx.start()},ce.fx.interval=13,ce.fx.start=function(){ut||(ut=!0,dt())},ce.fx.stop=function(){ut=null},ce.fx.speeds={slow:600,fast:200,_default:400},ce.fn.delay=function(r,e){return r=ce.fx&&ce.fx.speeds[r]||r,e=e||"fx",this.queue(e,function(e,t){var n=ie.setTimeout(e,r);t.stop=function(){ie.clearTimeout(n)}})},lt=C.createElement("input"),ct=C.createElement("select").appendChild(C.createElement("option")),lt.type="checkbox",le.checkOn=""!==lt.value,le.optSelected=ct.selected,(lt=C.createElement("input")).value="t",lt.type="radio",le.radioValue="t"===lt.value;var mt,xt=ce.expr.attrHandle;ce.fn.extend({attr:function(e,t){return M(this,ce.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){ce.removeAttr(this,e)})}}),ce.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return"undefined"==typeof e.getAttribute?ce.prop(e,t,n):(1===o&&ce.isXMLDoc(e)||(i=ce.attrHooks[t.toLowerCase()]||(ce.expr.match.bool.test(t)?mt:void 0)),void 0!==n?null===n?void ce.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:null==(r=ce.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!le.radioValue&&"radio"===t&&fe(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(D);if(i&&1===e.nodeType)while(n=i[r++])e.removeAttribute(n)}}),mt={set:function(e,t,n){return!1===t?ce.removeAttr(e,n):e.setAttribute(n,n),n}},ce.each(ce.expr.match.bool.source.match(/\w+/g),function(e,t){var a=xt[t]||ce.find.attr;xt[t]=function(e,t,n){var r,i,o=t.toLowerCase();return n||(i=xt[o],xt[o]=r,r=null!=a(e,t,n)?o:null,xt[o]=i),r}});var bt=/^(?:input|select|textarea|button)$/i,wt=/^(?:a|area)$/i;function Tt(e){return(e.match(D)||[]).join(" ")}function Ct(e){return e.getAttribute&&e.getAttribute("class")||""}function kt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(D)||[]}ce.fn.extend({prop:function(e,t){return M(this,ce.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[ce.propFix[e]||e]})}}),ce.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&ce.isXMLDoc(e)||(t=ce.propFix[t]||t,i=ce.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=ce.find.attr(e,"tabindex");return t?parseInt(t,10):bt.test(e.nodeName)||wt.test(e.nodeName)&&e.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),le.optSelected||(ce.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),ce.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){ce.propFix[this.toLowerCase()]=this}),ce.fn.extend({addClass:function(t){var e,n,r,i,o,a;return v(t)?this.each(function(e){ce(this).addClass(t.call(this,e,Ct(this)))}):(e=kt(t)).length?this.each(function(){if(r=Ct(this),n=1===this.nodeType&&" "+Tt(r)+" "){for(o=0;o<e.length;o++)i=e[o],n.indexOf(" "+i+" ")<0&&(n+=i+" ");a=Tt(n),r!==a&&this.setAttribute("class",a)}}):this},removeClass:function(t){var e,n,r,i,o,a;return v(t)?this.each(function(e){ce(this).removeClass(t.call(this,e,Ct(this)))}):arguments.length?(e=kt(t)).length?this.each(function(){if(r=Ct(this),n=1===this.nodeType&&" "+Tt(r)+" "){for(o=0;o<e.length;o++){i=e[o];while(-1<n.indexOf(" "+i+" "))n=n.replace(" "+i+" "," ")}a=Tt(n),r!==a&&this.setAttribute("class",a)}}):this:this.attr("class","")},toggleClass:function(t,n){var e,r,i,o,a=typeof t,s="string"===a||Array.isArray(t);return v(t)?this.each(function(e){ce(this).toggleClass(t.call(this,e,Ct(this),n),n)}):"boolean"==typeof n&&s?n?this.addClass(t):this.removeClass(t):(e=kt(t),this.each(function(){if(s)for(o=ce(this),i=0;i<e.length;i++)r=e[i],o.hasClass(r)?o.removeClass(r):o.addClass(r);else void 0!==t&&"boolean"!==a||((r=Ct(this))&&_.set(this,"__className__",r),this.setAttribute&&this.setAttribute("class",r||!1===t?"":_.get(this,"__className__")||""))}))},hasClass:function(e){var t,n,r=0;t=" "+e+" ";while(n=this[r++])if(1===n.nodeType&&-1<(" "+Tt(Ct(n))+" ").indexOf(t))return!0;return!1}});var St=/\r/g;ce.fn.extend({val:function(n){var r,e,i,t=this[0];return arguments.length?(i=v(n),this.each(function(e){var t;1===this.nodeType&&(null==(t=i?n.call(this,e,ce(this).val()):n)?t="":"number"==typeof t?t+="":Array.isArray(t)&&(t=ce.map(t,function(e){return null==e?"":e+""})),(r=ce.valHooks[this.type]||ce.valHooks[this.nodeName.toLowerCase()])&&"set"in r&&void 0!==r.set(this,t,"value")||(this.value=t))})):t?(r=ce.valHooks[t.type]||ce.valHooks[t.nodeName.toLowerCase()])&&"get"in r&&void 0!==(e=r.get(t,"value"))?e:"string"==typeof(e=t.value)?e.replace(St,""):null==e?"":e:void 0}}),ce.extend({valHooks:{option:{get:function(e){var t=ce.find.attr(e,"value");return null!=t?t:Tt(ce.text(e))}},select:{get:function(e){var t,n,r,i=e.options,o=e.selectedIndex,a="select-one"===e.type,s=a?null:[],u=a?o+1:i.length;for(r=o<0?u:a?o:0;r<u;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!fe(n.parentNode,"optgroup"))){if(t=ce(n).val(),a)return t;s.push(t)}return s},set:function(e,t){var n,r,i=e.options,o=ce.makeArray(t),a=i.length;while(a--)((r=i[a]).selected=-1<ce.inArray(ce.valHooks.option.get(r),o))&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),ce.each(["radio","checkbox"],function(){ce.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<ce.inArray(ce(e).val(),t)}},le.checkOn||(ce.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var Et=ie.location,jt={guid:Date.now()},At=/\?/;ce.parseXML=function(e){var t,n;if(!e||"string"!=typeof e)return null;try{t=(new ie.DOMParser).parseFromString(e,"text/xml")}catch(e){}return n=t&&t.getElementsByTagName("parsererror")[0],t&&!n||ce.error("Invalid XML: "+(n?ce.map(n.childNodes,function(e){return e.textContent}).join("\n"):e)),t};var Dt=/^(?:focusinfocus|focusoutblur)$/,Nt=function(e){e.stopPropagation()};ce.extend(ce.event,{trigger:function(e,t,n,r){var i,o,a,s,u,l,c,f,p=[n||C],d=ue.call(e,"type")?e.type:e,h=ue.call(e,"namespace")?e.namespace.split("."):[];if(o=f=a=n=n||C,3!==n.nodeType&&8!==n.nodeType&&!Dt.test(d+ce.event.triggered)&&(-1<d.indexOf(".")&&(d=(h=d.split(".")).shift(),h.sort()),u=d.indexOf(":")<0&&"on"+d,(e=e[ce.expando]?e:new ce.Event(d,"object"==typeof e&&e)).isTrigger=r?2:3,e.namespace=h.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:ce.makeArray(t,[e]),c=ce.event.special[d]||{},r||!c.trigger||!1!==c.trigger.apply(n,t))){if(!r&&!c.noBubble&&!y(n)){for(s=c.delegateType||d,Dt.test(s+d)||(o=o.parentNode);o;o=o.parentNode)p.push(o),a=o;a===(n.ownerDocument||C)&&p.push(a.defaultView||a.parentWindow||ie)}i=0;while((o=p[i++])&&!e.isPropagationStopped())f=o,e.type=1<i?s:c.bindType||d,(l=(_.get(o,"events")||Object.create(null))[e.type]&&_.get(o,"handle"))&&l.apply(o,t),(l=u&&o[u])&&l.apply&&$(o)&&(e.result=l.apply(o,t),!1===e.result&&e.preventDefault());return e.type=d,r||e.isDefaultPrevented()||c._default&&!1!==c._default.apply(p.pop(),t)||!$(n)||u&&v(n[d])&&!y(n)&&((a=n[u])&&(n[u]=null),ce.event.triggered=d,e.isPropagationStopped()&&f.addEventListener(d,Nt),n[d](),e.isPropagationStopped()&&f.removeEventListener(d,Nt),ce.event.triggered=void 0,a&&(n[u]=a)),e.result}},simulate:function(e,t,n){var r=ce.extend(new ce.Event,n,{type:e,isSimulated:!0});ce.event.trigger(r,null,t)}}),ce.fn.extend({trigger:function(e,t){return this.each(function(){ce.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return ce.event.trigger(e,t,n,!0)}});var qt=/\[\]$/,Lt=/\r?\n/g,Ht=/^(?:submit|button|image|reset|file)$/i,Ot=/^(?:input|select|textarea|keygen)/i;function Pt(n,e,r,i){var t;if(Array.isArray(e))ce.each(e,function(e,t){r||qt.test(n)?i(n,t):Pt(n+"["+("object"==typeof t&&null!=t?e:"")+"]",t,r,i)});else if(r||"object"!==x(e))i(n,e);else for(t in e)Pt(n+"["+t+"]",e[t],r,i)}ce.param=function(e,t){var n,r=[],i=function(e,t){var n=v(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!ce.isPlainObject(e))ce.each(e,function(){i(this.name,this.value)});else for(n in e)Pt(n,e[n],t,i);return r.join("&")},ce.fn.extend({serialize:function(){return ce.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=ce.prop(this,"elements");return e?ce.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!ce(this).is(":disabled")&&Ot.test(this.nodeName)&&!Ht.test(e)&&(this.checked||!we.test(e))}).map(function(e,t){var n=ce(this).val();return null==n?null:Array.isArray(n)?ce.map(n,function(e){return{name:t.name,value:e.replace(Lt,"\r\n")}}):{name:t.name,value:n.replace(Lt,"\r\n")}}).get()}});var Mt=/%20/g,Rt=/#.*$/,It=/([?&])_=[^&]*/,Wt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Ft=/^(?:GET|HEAD)$/,$t=/^\/\//,Bt={},_t={},zt="*/".concat("*"),Xt=C.createElement("a");function Ut(o){return function(e,t){"string"!=typeof e&&(t=e,e="*");var n,r=0,i=e.toLowerCase().match(D)||[];if(v(t))while(n=i[r++])"+"===n[0]?(n=n.slice(1)||"*",(o[n]=o[n]||[]).unshift(t)):(o[n]=o[n]||[]).push(t)}}function Vt(t,i,o,a){var s={},u=t===_t;function l(e){var r;return s[e]=!0,ce.each(t[e]||[],function(e,t){var n=t(i,o,a);return"string"!=typeof n||u||s[n]?u?!(r=n):void 0:(i.dataTypes.unshift(n),l(n),!1)}),r}return l(i.dataTypes[0])||!s["*"]&&l("*")}function Gt(e,t){var n,r,i=ce.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&ce.extend(!0,e,r),e}Xt.href=Et.href,ce.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Et.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Et.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":zt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":ce.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Gt(Gt(e,ce.ajaxSettings),t):Gt(ce.ajaxSettings,e)},ajaxPrefilter:Ut(Bt),ajaxTransport:Ut(_t),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var c,f,p,n,d,r,h,g,i,o,v=ce.ajaxSetup({},t),y=v.context||v,m=v.context&&(y.nodeType||y.jquery)?ce(y):ce.event,x=ce.Deferred(),b=ce.Callbacks("once memory"),w=v.statusCode||{},a={},s={},u="canceled",T={readyState:0,getResponseHeader:function(e){var t;if(h){if(!n){n={};while(t=Wt.exec(p))n[t[1].toLowerCase()+" "]=(n[t[1].toLowerCase()+" "]||[]).concat(t[2])}t=n[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return h?p:null},setRequestHeader:function(e,t){return null==h&&(e=s[e.toLowerCase()]=s[e.toLowerCase()]||e,a[e]=t),this},overrideMimeType:function(e){return null==h&&(v.mimeType=e),this},statusCode:function(e){var t;if(e)if(h)T.always(e[T.status]);else for(t in e)w[t]=[w[t],e[t]];return this},abort:function(e){var t=e||u;return c&&c.abort(t),l(0,t),this}};if(x.promise(T),v.url=((e||v.url||Et.href)+"").replace($t,Et.protocol+"//"),v.type=t.method||t.type||v.method||v.type,v.dataTypes=(v.dataType||"*").toLowerCase().match(D)||[""],null==v.crossDomain){r=C.createElement("a");try{r.href=v.url,r.href=r.href,v.crossDomain=Xt.protocol+"//"+Xt.host!=r.protocol+"//"+r.host}catch(e){v.crossDomain=!0}}if(v.data&&v.processData&&"string"!=typeof v.data&&(v.data=ce.param(v.data,v.traditional)),Vt(Bt,v,t,T),h)return T;for(i in(g=ce.event&&v.global)&&0==ce.active++&&ce.event.trigger("ajaxStart"),v.type=v.type.toUpperCase(),v.hasContent=!Ft.test(v.type),f=v.url.replace(Rt,""),v.hasContent?v.data&&v.processData&&0===(v.contentType||"").indexOf("application/x-www-form-urlencoded")&&(v.data=v.data.replace(Mt,"+")):(o=v.url.slice(f.length),v.data&&(v.processData||"string"==typeof v.data)&&(f+=(At.test(f)?"&":"?")+v.data,delete v.data),!1===v.cache&&(f=f.replace(It,"$1"),o=(At.test(f)?"&":"?")+"_="+jt.guid+++o),v.url=f+o),v.ifModified&&(ce.lastModified[f]&&T.setRequestHeader("If-Modified-Since",ce.lastModified[f]),ce.etag[f]&&T.setRequestHeader("If-None-Match",ce.etag[f])),(v.data&&v.hasContent&&!1!==v.contentType||t.contentType)&&T.setRequestHeader("Content-Type",v.contentType),T.setRequestHeader("Accept",v.dataTypes[0]&&v.accepts[v.dataTypes[0]]?v.accepts[v.dataTypes[0]]+("*"!==v.dataTypes[0]?", "+zt+"; q=0.01":""):v.accepts["*"]),v.headers)T.setRequestHeader(i,v.headers[i]);if(v.beforeSend&&(!1===v.beforeSend.call(y,T,v)||h))return T.abort();if(u="abort",b.add(v.complete),T.done(v.success),T.fail(v.error),c=Vt(_t,v,t,T)){if(T.readyState=1,g&&m.trigger("ajaxSend",[T,v]),h)return T;v.async&&0<v.timeout&&(d=ie.setTimeout(function(){T.abort("timeout")},v.timeout));try{h=!1,c.send(a,l)}catch(e){if(h)throw e;l(-1,e)}}else l(-1,"No Transport");function l(e,t,n,r){var i,o,a,s,u,l=t;h||(h=!0,d&&ie.clearTimeout(d),c=void 0,p=r||"",T.readyState=0<e?4:0,i=200<=e&&e<300||304===e,n&&(s=function(e,t,n){var r,i,o,a,s=e.contents,u=e.dataTypes;while("*"===u[0])u.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in s)if(s[i]&&s[i].test(r)){u.unshift(i);break}if(u[0]in n)o=u[0];else{for(i in n){if(!u[0]||e.converters[i+" "+u[0]]){o=i;break}a||(a=i)}o=o||a}if(o)return o!==u[0]&&u.unshift(o),n[o]}(v,T,n)),!i&&-1<ce.inArray("script",v.dataTypes)&&ce.inArray("json",v.dataTypes)<0&&(v.converters["text script"]=function(){}),s=function(e,t,n,r){var i,o,a,s,u,l={},c=e.dataTypes.slice();if(c[1])for(a in e.converters)l[a.toLowerCase()]=e.converters[a];o=c.shift();while(o)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=c.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(!(a=l[u+" "+o]||l["* "+o]))for(i in l)if((s=i.split(" "))[1]===o&&(a=l[u+" "+s[0]]||l["* "+s[0]])){!0===a?a=l[i]:!0!==l[i]&&(o=s[0],c.unshift(s[1]));break}if(!0!==a)if(a&&e["throws"])t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+u+" to "+o}}}return{state:"success",data:t}}(v,s,T,i),i?(v.ifModified&&((u=T.getResponseHeader("Last-Modified"))&&(ce.lastModified[f]=u),(u=T.getResponseHeader("etag"))&&(ce.etag[f]=u)),204===e||"HEAD"===v.type?l="nocontent":304===e?l="notmodified":(l=s.state,o=s.data,i=!(a=s.error))):(a=l,!e&&l||(l="error",e<0&&(e=0))),T.status=e,T.statusText=(t||l)+"",i?x.resolveWith(y,[o,l,T]):x.rejectWith(y,[T,l,a]),T.statusCode(w),w=void 0,g&&m.trigger(i?"ajaxSuccess":"ajaxError",[T,v,i?o:a]),b.fireWith(y,[T,l]),g&&(m.trigger("ajaxComplete",[T,v]),--ce.active||ce.event.trigger("ajaxStop")))}return T},getJSON:function(e,t,n){return ce.get(e,t,n,"json")},getScript:function(e,t){return ce.get(e,void 0,t,"script")}}),ce.each(["get","post"],function(e,i){ce[i]=function(e,t,n,r){return v(t)&&(r=r||n,n=t,t=void 0),ce.ajax(ce.extend({url:e,type:i,dataType:r,data:t,success:n},ce.isPlainObject(e)&&e))}}),ce.ajaxPrefilter(function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")}),ce._evalUrl=function(e,t,n){return ce.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){ce.globalEval(e,t,n)}})},ce.fn.extend({wrapAll:function(e){var t;return this[0]&&(v(e)&&(e=e.call(this[0])),t=ce(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){var e=this;while(e.firstElementChild)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(n){return v(n)?this.each(function(e){ce(this).wrapInner(n.call(this,e))}):this.each(function(){var e=ce(this),t=e.contents();t.length?t.wrapAll(n):e.append(n)})},wrap:function(t){var n=v(t);return this.each(function(e){ce(this).wrapAll(n?t.call(this,e):t)})},unwrap:function(e){return this.parent(e).not("body").each(function(){ce(this).replaceWith(this.childNodes)}),this}}),ce.expr.pseudos.hidden=function(e){return!ce.expr.pseudos.visible(e)},ce.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},ce.ajaxSettings.xhr=function(){try{return new ie.XMLHttpRequest}catch(e){}};var Yt={0:200,1223:204},Qt=ce.ajaxSettings.xhr();le.cors=!!Qt&&"withCredentials"in Qt,le.ajax=Qt=!!Qt,ce.ajaxTransport(function(i){var o,a;if(le.cors||Qt&&!i.crossDomain)return{send:function(e,t){var n,r=i.xhr();if(r.open(i.type,i.url,i.async,i.username,i.password),i.xhrFields)for(n in i.xhrFields)r[n]=i.xhrFields[n];for(n in i.mimeType&&r.overrideMimeType&&r.overrideMimeType(i.mimeType),i.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest"),e)r.setRequestHeader(n,e[n]);o=function(e){return function(){o&&(o=a=r.onload=r.onerror=r.onabort=r.ontimeout=r.onreadystatechange=null,"abort"===e?r.abort():"error"===e?"number"!=typeof r.status?t(0,"error"):t(r.status,r.statusText):t(Yt[r.status]||r.status,r.statusText,"text"!==(r.responseType||"text")||"string"!=typeof r.responseText?{binary:r.response}:{text:r.responseText},r.getAllResponseHeaders()))}},r.onload=o(),a=r.onerror=r.ontimeout=o("error"),void 0!==r.onabort?r.onabort=a:r.onreadystatechange=function(){4===r.readyState&&ie.setTimeout(function(){o&&a()})},o=o("abort");try{r.send(i.hasContent&&i.data||null)}catch(e){if(o)throw e}},abort:function(){o&&o()}}}),ce.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),ce.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return ce.globalEval(e),e}}}),ce.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),ce.ajaxTransport("script",function(n){var r,i;if(n.crossDomain||n.scriptAttrs)return{send:function(e,t){r=ce("<script>").attr(n.scriptAttrs||{}).prop({charset:n.scriptCharset,src:n.url}).on("load error",i=function(e){r.remove(),i=null,e&&t("error"===e.type?404:200,e.type)}),C.head.appendChild(r[0])},abort:function(){i&&i()}}});var Jt,Kt=[],Zt=/(=)\?(?=&|$)|\?\?/;ce.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Kt.pop()||ce.expando+"_"+jt.guid++;return this[e]=!0,e}}),ce.ajaxPrefilter("json jsonp",function(e,t,n){var r,i,o,a=!1!==e.jsonp&&(Zt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Zt.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return r=e.jsonpCallback=v(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Zt,"$1"+r):!1!==e.jsonp&&(e.url+=(At.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return o||ce.error(r+" was not called"),o[0]},e.dataTypes[0]="json",i=ie[r],ie[r]=function(){o=arguments},n.always(function(){void 0===i?ce(ie).removeProp(r):ie[r]=i,e[r]&&(e.jsonpCallback=t.jsonpCallback,Kt.push(r)),o&&v(i)&&i(o[0]),o=i=void 0}),"script"}),le.createHTMLDocument=((Jt=C.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Jt.childNodes.length),ce.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(le.createHTMLDocument?((r=(t=C.implementation.createHTMLDocument("")).createElement("base")).href=C.location.href,t.head.appendChild(r)):t=C),o=!n&&[],(i=w.exec(e))?[t.createElement(i[1])]:(i=Ae([e],t,o),o&&o.length&&ce(o).remove(),ce.merge([],i.childNodes)));var r,i,o},ce.fn.load=function(e,t,n){var r,i,o,a=this,s=e.indexOf(" ");return-1<s&&(r=Tt(e.slice(s)),e=e.slice(0,s)),v(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),0<a.length&&ce.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){o=arguments,a.html(r?ce("<div>").append(ce.parseHTML(e)).find(r):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},ce.expr.pseudos.animated=function(t){return ce.grep(ce.timers,function(e){return t===e.elem}).length},ce.offset={setOffset:function(e,t,n){var r,i,o,a,s,u,l=ce.css(e,"position"),c=ce(e),f={};"static"===l&&(e.style.position="relative"),s=c.offset(),o=ce.css(e,"top"),u=ce.css(e,"left"),("absolute"===l||"fixed"===l)&&-1<(o+u).indexOf("auto")?(a=(r=c.position()).top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(u)||0),v(t)&&(t=t.call(e,n,ce.extend({},s))),null!=t.top&&(f.top=t.top-s.top+a),null!=t.left&&(f.left=t.left-s.left+i),"using"in t?t.using.call(e,f):c.css(f)}},ce.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){ce.offset.setOffset(this,t,e)});var e,n,r=this[0];return r?r.getClientRects().length?(e=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],i={top:0,left:0};if("fixed"===ce.css(r,"position"))t=r.getBoundingClientRect();else{t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;while(e&&(e===n.body||e===n.documentElement)&&"static"===ce.css(e,"position"))e=e.parentNode;e&&e!==r&&1===e.nodeType&&((i=ce(e).offset()).top+=ce.css(e,"borderTopWidth",!0),i.left+=ce.css(e,"borderLeftWidth",!0))}return{top:t.top-i.top-ce.css(r,"marginTop",!0),left:t.left-i.left-ce.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var e=this.offsetParent;while(e&&"static"===ce.css(e,"position"))e=e.offsetParent;return e||J})}}),ce.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,i){var o="pageYOffset"===i;ce.fn[t]=function(e){return M(this,function(e,t,n){var r;if(y(e)?r=e:9===e.nodeType&&(r=e.defaultView),void 0===n)return r?r[i]:e[t];r?r.scrollTo(o?r.pageXOffset:n,o?n:r.pageYOffset):e[t]=n},t,e,arguments.length)}}),ce.each(["top","left"],function(e,n){ce.cssHooks[n]=Ye(le.pixelPosition,function(e,t){if(t)return t=Ge(e,n),_e.test(t)?ce(e).position()[n]+"px":t})}),ce.each({Height:"height",Width:"width"},function(a,s){ce.each({padding:"inner"+a,content:s,"":"outer"+a},function(r,o){ce.fn[o]=function(e,t){var n=arguments.length&&(r||"boolean"!=typeof e),i=r||(!0===e||!0===t?"margin":"border");return M(this,function(e,t,n){var r;return y(e)?0===o.indexOf("outer")?e["inner"+a]:e.document.documentElement["client"+a]:9===e.nodeType?(r=e.documentElement,Math.max(e.body["scroll"+a],r["scroll"+a],e.body["offset"+a],r["offset"+a],r["client"+a])):void 0===n?ce.css(e,t,i):ce.style(e,t,n,i)},s,n?e:void 0,n)}})}),ce.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){ce.fn[t]=function(e){return this.on(t,e)}}),ce.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.on("mouseenter",e).on("mouseleave",t||e)}}),ce.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,n){ce.fn[n]=function(e,t){return 0<arguments.length?this.on(n,null,e,t):this.trigger(n)}});var en=/^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;ce.proxy=function(e,t){var n,r,i;if("string"==typeof t&&(n=e[t],t=e,e=n),v(e))return r=ae.call(arguments,2),(i=function(){return e.apply(t||this,r.concat(ae.call(arguments)))}).guid=e.guid=e.guid||ce.guid++,i},ce.holdReady=function(e){e?ce.readyWait++:ce.ready(!0)},ce.isArray=Array.isArray,ce.parseJSON=JSON.parse,ce.nodeName=fe,ce.isFunction=v,ce.isWindow=y,ce.camelCase=F,ce.type=x,ce.now=Date.now,ce.isNumeric=function(e){var t=ce.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},ce.trim=function(e){return null==e?"":(e+"").replace(en,"$1")}, true&&!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function(){return ce}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));var tn=ie.jQuery,nn=ie.$;return ce.noConflict=function(e){return ie.$===ce&&(ie.$=nn),e&&ie.jQuery===ce&&(ie.jQuery=tn),ce},"undefined"==typeof e&&(ie.jQuery=ie.$=ce),ce});


/***/ }),

/***/ "./node_modules/lodash/_Stack.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/_Stack.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var listCacheClear = __webpack_require__(/*! ./_listCacheClear */ "./node_modules/lodash/_listCacheClear.js"),
    listCacheDelete = __webpack_require__(/*! ./_listCacheDelete */ "./node_modules/lodash/_listCacheDelete.js"),
    listCacheGet = __webpack_require__(/*! ./_listCacheGet */ "./node_modules/lodash/_listCacheGet.js"),
    listCacheHas = __webpack_require__(/*! ./_listCacheHas */ "./node_modules/lodash/_listCacheHas.js"),
    listCacheSet = __webpack_require__(/*! ./_listCacheSet */ "./node_modules/lodash/_listCacheSet.js");

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

module.exports = ListCache;


/***/ }),

/***/ "./node_modules/lodash/_Symbol.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/_Symbol.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/** Built-in value references. */
var Symbol = root.Symbol;

module.exports = Symbol;


/***/ }),

/***/ "./node_modules/lodash/_apply.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/_apply.js ***!
  \***************************************/
/***/ ((module) => {

/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0: return func.call(thisArg);
    case 1: return func.call(thisArg, args[0]);
    case 2: return func.call(thisArg, args[0], args[1]);
    case 3: return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

module.exports = apply;


/***/ }),

/***/ "./node_modules/lodash/_arrayEach.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_arrayEach.js ***!
  \*******************************************/
/***/ ((module) => {

/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}

module.exports = arrayEach;


/***/ }),

/***/ "./node_modules/lodash/_arrayMap.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_arrayMap.js ***!
  \******************************************/
/***/ ((module) => {

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

module.exports = arrayMap;


/***/ }),

/***/ "./node_modules/lodash/_arrayReduce.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_arrayReduce.js ***!
  \*********************************************/
/***/ ((module) => {

/**
 * A specialized version of `_.reduce` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @param {boolean} [initAccum] Specify using the first element of `array` as
 *  the initial value.
 * @returns {*} Returns the accumulated value.
 */
function arrayReduce(array, iteratee, accumulator, initAccum) {
  var index = -1,
      length = array == null ? 0 : array.length;

  if (initAccum && length) {
    accumulator = array[++index];
  }
  while (++index < length) {
    accumulator = iteratee(accumulator, array[index], index, array);
  }
  return accumulator;
}

module.exports = arrayReduce;


/***/ }),

/***/ "./node_modules/lodash/_asciiToArray.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_asciiToArray.js ***!
  \**********************************************/
/***/ ((module) => {

/**
 * Converts an ASCII `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function asciiToArray(string) {
  return string.split('');
}

module.exports = asciiToArray;


/***/ }),

/***/ "./node_modules/lodash/_asciiWords.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_asciiWords.js ***!
  \********************************************/
/***/ ((module) => {

/** Used to match words composed of alphanumeric characters. */
var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

/**
 * Splits an ASCII `string` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of `string`.
 */
function asciiWords(string) {
  return string.match(reAsciiWord) || [];
}

module.exports = asciiWords;


/***/ }),

/***/ "./node_modules/lodash/_assignValue.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_assignValue.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseAssignValue = __webpack_require__(/*! ./_baseAssignValue */ "./node_modules/lodash/_baseAssignValue.js"),
    eq = __webpack_require__(/*! ./eq */ "./node_modules/lodash/eq.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue(object, key, value);
  }
}

module.exports = assignValue;


/***/ }),

/***/ "./node_modules/lodash/_assocIndexOf.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_assocIndexOf.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var eq = __webpack_require__(/*! ./eq */ "./node_modules/lodash/eq.js");

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

module.exports = assocIndexOf;


/***/ }),

/***/ "./node_modules/lodash/_baseAssign.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseAssign.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var copyObject = __webpack_require__(/*! ./_copyObject */ "./node_modules/lodash/_copyObject.js"),
    keys = __webpack_require__(/*! ./keys */ "./node_modules/lodash/keys.js");

/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssign(object, source) {
  return object && copyObject(source, keys(source), object);
}

module.exports = baseAssign;


/***/ }),

/***/ "./node_modules/lodash/_baseAssignIn.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_baseAssignIn.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var copyObject = __webpack_require__(/*! ./_copyObject */ "./node_modules/lodash/_copyObject.js"),
    keysIn = __webpack_require__(/*! ./keysIn */ "./node_modules/lodash/keysIn.js");

/**
 * The base implementation of `_.assignIn` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssignIn(object, source) {
  return object && copyObject(source, keysIn(source), object);
}

module.exports = baseAssignIn;


/***/ }),

/***/ "./node_modules/lodash/_baseAssignValue.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_baseAssignValue.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var defineProperty = __webpack_require__(/*! ./_defineProperty */ "./node_modules/lodash/_defineProperty.js");

/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function baseAssignValue(object, key, value) {
  if (key == '__proto__' && defineProperty) {
    defineProperty(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}

module.exports = baseAssignValue;


/***/ }),

/***/ "./node_modules/lodash/_baseClone.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseClone.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Stack = __webpack_require__(/*! ./_Stack */ "./node_modules/lodash/_Stack.js"),
    arrayEach = __webpack_require__(/*! ./_arrayEach */ "./node_modules/lodash/_arrayEach.js"),
    assignValue = __webpack_require__(/*! ./_assignValue */ "./node_modules/lodash/_assignValue.js"),
    baseAssign = __webpack_require__(/*! ./_baseAssign */ "./node_modules/lodash/_baseAssign.js"),
    baseAssignIn = __webpack_require__(/*! ./_baseAssignIn */ "./node_modules/lodash/_baseAssignIn.js"),
    cloneBuffer = __webpack_require__(/*! ./_cloneBuffer */ "./node_modules/lodash/_cloneBuffer.js"),
    copyArray = __webpack_require__(/*! ./_copyArray */ "./node_modules/lodash/_copyArray.js"),
    copySymbols = __webpack_require__(/*! ./_copySymbols */ "./node_modules/lodash/_copySymbols.js"),
    copySymbolsIn = __webpack_require__(/*! ./_copySymbolsIn */ "./node_modules/lodash/_copySymbolsIn.js"),
    getAllKeys = __webpack_require__(/*! ./_getAllKeys */ "./node_modules/lodash/_getAllKeys.js"),
    getAllKeysIn = __webpack_require__(/*! ./_getAllKeysIn */ "./node_modules/lodash/_getAllKeysIn.js"),
    getTag = __webpack_require__(/*! ./_getTag */ "./node_modules/lodash/_getTag.js"),
    initCloneArray = __webpack_require__(/*! ./_initCloneArray */ "./node_modules/lodash/_initCloneArray.js"),
    initCloneByTag = __webpack_require__(/*! ./_initCloneByTag */ "./node_modules/lodash/_initCloneByTag.js"),
    initCloneObject = __webpack_require__(/*! ./_initCloneObject */ "./node_modules/lodash/_initCloneObject.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    isBuffer = __webpack_require__(/*! ./isBuffer */ "./node_modules/lodash/isBuffer.js"),
    isMap = __webpack_require__(/*! ./isMap */ "./node_modules/lodash/isMap.js"),
    isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js"),
    isSet = __webpack_require__(/*! ./isSet */ "./node_modules/lodash/isSet.js"),
    keys = __webpack_require__(/*! ./keys */ "./node_modules/lodash/keys.js"),
    keysIn = __webpack_require__(/*! ./keysIn */ "./node_modules/lodash/keysIn.js");

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1,
    CLONE_FLAT_FLAG = 2,
    CLONE_SYMBOLS_FLAG = 4;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values supported by `_.clone`. */
var cloneableTags = {};
cloneableTags[argsTag] = cloneableTags[arrayTag] =
cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
cloneableTags[boolTag] = cloneableTags[dateTag] =
cloneableTags[float32Tag] = cloneableTags[float64Tag] =
cloneableTags[int8Tag] = cloneableTags[int16Tag] =
cloneableTags[int32Tag] = cloneableTags[mapTag] =
cloneableTags[numberTag] = cloneableTags[objectTag] =
cloneableTags[regexpTag] = cloneableTags[setTag] =
cloneableTags[stringTag] = cloneableTags[symbolTag] =
cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag] = cloneableTags[funcTag] =
cloneableTags[weakMapTag] = false;

/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Deep clone
 *  2 - Flatten inherited properties
 *  4 - Clone symbols
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */
function baseClone(value, bitmask, customizer, key, object, stack) {
  var result,
      isDeep = bitmask & CLONE_DEEP_FLAG,
      isFlat = bitmask & CLONE_FLAT_FLAG,
      isFull = bitmask & CLONE_SYMBOLS_FLAG;

  if (customizer) {
    result = object ? customizer(value, key, object, stack) : customizer(value);
  }
  if (result !== undefined) {
    return result;
  }
  if (!isObject(value)) {
    return value;
  }
  var isArr = isArray(value);
  if (isArr) {
    result = initCloneArray(value);
    if (!isDeep) {
      return copyArray(value, result);
    }
  } else {
    var tag = getTag(value),
        isFunc = tag == funcTag || tag == genTag;

    if (isBuffer(value)) {
      return cloneBuffer(value, isDeep);
    }
    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
      result = (isFlat || isFunc) ? {} : initCloneObject(value);
      if (!isDeep) {
        return isFlat
          ? copySymbolsIn(value, baseAssignIn(result, value))
          : copySymbols(value, baseAssign(result, value));
      }
    } else {
      if (!cloneableTags[tag]) {
        return object ? value : {};
      }
      result = initCloneByTag(value, tag, isDeep);
    }
  }
  // Check for circular references and return its corresponding clone.
  stack || (stack = new Stack);
  var stacked = stack.get(value);
  if (stacked) {
    return stacked;
  }
  stack.set(value, result);

  if (isSet(value)) {
    value.forEach(function(subValue) {
      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
    });
  } else if (isMap(value)) {
    value.forEach(function(subValue, key) {
      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
    });
  }

  var keysFunc = isFull
    ? (isFlat ? getAllKeysIn : getAllKeys)
    : (isFlat ? keysIn : keys);

  var props = isArr ? undefined : keysFunc(value);
  arrayEach(props || value, function(subValue, key) {
    if (props) {
      key = subValue;
      subValue = value[key];
    }
    // Recursively populate clone (susceptible to call stack limits).
    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
  });
  return result;
}

module.exports = baseClone;


/***/ }),

/***/ "./node_modules/lodash/_baseCreate.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseCreate.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js");

/** Built-in value references. */
var objectCreate = Object.create;

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} proto The object to inherit from.
 * @returns {Object} Returns the new object.
 */
var baseCreate = (function() {
  function object() {}
  return function(proto) {
    if (!isObject(proto)) {
      return {};
    }
    if (objectCreate) {
      return objectCreate(proto);
    }
    object.prototype = proto;
    var result = new object;
    object.prototype = undefined;
    return result;
  };
}());

module.exports = baseCreate;


/***/ }),

/***/ "./node_modules/lodash/_baseFor.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_baseFor.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var createBaseFor = __webpack_require__(/*! ./_createBaseFor */ "./node_modules/lodash/_createBaseFor.js");

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = createBaseFor();

module.exports = baseFor;


/***/ }),

/***/ "./node_modules/lodash/_baseForOwn.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseForOwn.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseFor = __webpack_require__(/*! ./_baseFor */ "./node_modules/lodash/_baseFor.js"),
    keys = __webpack_require__(/*! ./keys */ "./node_modules/lodash/keys.js");

/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */
function baseForOwn(object, iteratee) {
  return object && baseFor(object, iteratee, keys);
}

module.exports = baseForOwn;


/***/ }),

/***/ "./node_modules/lodash/_baseGetTag.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseGetTag.js ***!
  \********************************************/
/***/ ((module) => {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;


/***/ }),

/***/ "./node_modules/lodash/_baseIndexOf.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_baseIndexOf.js ***!
  \*********************************************/
/***/ ((module) => {

/**
 * A specialized version of `_.indexOf` which performs strict equality
 * comparisons of values, i.e. `===`.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function strictIndexOf(array, value, fromIndex) {
  var index = fromIndex - 1,
      length = array.length;

  while (++index < length) {
    if (array[index] === value) {
      return index;
    }
  }
  return -1;
}

module.exports = strictIndexOf;


/***/ }),

/***/ "./node_modules/lodash/_baseIteratee.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_baseIteratee.js ***!
  \**********************************************/
/***/ ((module) => {

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

module.exports = identity;


/***/ }),

/***/ "./node_modules/lodash/_baseKeys.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_baseKeys.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var overArg = __webpack_require__(/*! ./_overArg */ "./node_modules/lodash/_overArg.js");

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

module.exports = nativeKeys;


/***/ }),

/***/ "./node_modules/lodash/_baseRest.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_baseRest.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var identity = __webpack_require__(/*! ./identity */ "./node_modules/lodash/identity.js"),
    overRest = __webpack_require__(/*! ./_overRest */ "./node_modules/lodash/_overRest.js"),
    setToString = __webpack_require__(/*! ./_setToString */ "./node_modules/lodash/_setToString.js");

/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */
function baseRest(func, start) {
  return setToString(overRest(func, start, identity), func + '');
}

module.exports = baseRest;


/***/ }),

/***/ "./node_modules/lodash/_baseSlice.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseSlice.js ***!
  \*******************************************/
/***/ ((module) => {

/**
 * The base implementation of `_.slice` without an iteratee call guard.
 *
 * @private
 * @param {Array} array The array to slice.
 * @param {number} [start=0] The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the slice of `array`.
 */
function baseSlice(array, start, end) {
  var index = -1,
      length = array.length;

  if (start < 0) {
    start = -start > length ? 0 : (length + start);
  }
  end = end > length ? length : end;
  if (end < 0) {
    end += length;
  }
  length = start > end ? 0 : ((end - start) >>> 0);
  start >>>= 0;

  var result = Array(length);
  while (++index < length) {
    result[index] = array[index + start];
  }
  return result;
}

module.exports = baseSlice;


/***/ }),

/***/ "./node_modules/lodash/_baseToString.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_baseToString.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Symbol = __webpack_require__(/*! ./_Symbol */ "./node_modules/lodash/_Symbol.js"),
    arrayMap = __webpack_require__(/*! ./_arrayMap */ "./node_modules/lodash/_arrayMap.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    isSymbol = __webpack_require__(/*! ./isSymbol */ "./node_modules/lodash/isSymbol.js");

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isArray(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return arrayMap(value, baseToString) + '';
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

module.exports = baseToString;


/***/ }),

/***/ "./node_modules/lodash/_baseTrim.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_baseTrim.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var trimmedEndIndex = __webpack_require__(/*! ./_trimmedEndIndex */ "./node_modules/lodash/_trimmedEndIndex.js");

/** Used to match leading whitespace. */
var reTrimStart = /^\s+/;

/**
 * The base implementation of `_.trim`.
 *
 * @private
 * @param {string} string The string to trim.
 * @returns {string} Returns the trimmed string.
 */
function baseTrim(string) {
  return string
    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
    : string;
}

module.exports = baseTrim;


/***/ }),

/***/ "./node_modules/lodash/_castSlice.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_castSlice.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseSlice = __webpack_require__(/*! ./_baseSlice */ "./node_modules/lodash/_baseSlice.js");

/**
 * Casts `array` to a slice if it's needed.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {number} start The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the cast slice.
 */
function castSlice(array, start, end) {
  var length = array.length;
  end = end === undefined ? length : end;
  return (!start && end >= length) ? array : baseSlice(array, start, end);
}

module.exports = castSlice;


/***/ }),

/***/ "./node_modules/lodash/_cloneBuffer.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_cloneBuffer.js ***!
  \*********************************************/
/***/ ((module, exports, __webpack_require__) => {

/* module decorator */ module = __webpack_require__.nmd(module);
var root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/** Detect free variable `exports`. */
var freeExports =  true && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && "object" == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined,
    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */
function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }
  var length = buffer.length,
      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

  buffer.copy(result);
  return result;
}

module.exports = cloneBuffer;


/***/ }),

/***/ "./node_modules/lodash/_copyArray.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_copyArray.js ***!
  \*******************************************/
/***/ ((module) => {

/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */
function copyArray(source, array) {
  var index = -1,
      length = source.length;

  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}

module.exports = copyArray;


/***/ }),

/***/ "./node_modules/lodash/_copyObject.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_copyObject.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var assignValue = __webpack_require__(/*! ./_assignValue */ "./node_modules/lodash/_assignValue.js"),
    baseAssignValue = __webpack_require__(/*! ./_baseAssignValue */ "./node_modules/lodash/_baseAssignValue.js");

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer
      ? customizer(object[key], source[key], key, object, source)
      : undefined;

    if (newValue === undefined) {
      newValue = source[key];
    }
    if (isNew) {
      baseAssignValue(object, key, newValue);
    } else {
      assignValue(object, key, newValue);
    }
  }
  return object;
}

module.exports = copyObject;


/***/ }),

/***/ "./node_modules/lodash/_copySymbols.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_copySymbols.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var copyObject = __webpack_require__(/*! ./_copyObject */ "./node_modules/lodash/_copyObject.js"),
    getSymbols = __webpack_require__(/*! ./_getSymbols */ "./node_modules/lodash/_getSymbols.js");

/**
 * Copies own symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbols(source, object) {
  return copyObject(source, getSymbols(source), object);
}

module.exports = copySymbols;


/***/ }),

/***/ "./node_modules/lodash/_copySymbolsIn.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_copySymbolsIn.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var copyObject = __webpack_require__(/*! ./_copyObject */ "./node_modules/lodash/_copyObject.js"),
    getSymbolsIn = __webpack_require__(/*! ./_getSymbolsIn */ "./node_modules/lodash/_getSymbolsIn.js");

/**
 * Copies own and inherited symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbolsIn(source, object) {
  return copyObject(source, getSymbolsIn(source), object);
}

module.exports = copySymbolsIn;


/***/ }),

/***/ "./node_modules/lodash/_createAssigner.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_createAssigner.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseRest = __webpack_require__(/*! ./_baseRest */ "./node_modules/lodash/_baseRest.js"),
    isIterateeCall = __webpack_require__(/*! ./_isIterateeCall */ "./node_modules/lodash/_isIterateeCall.js");

/**
 * Creates a function like `_.assign`.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */
function createAssigner(assigner) {
  return baseRest(function(object, sources) {
    var index = -1,
        length = sources.length,
        customizer = length > 1 ? sources[length - 1] : undefined,
        guard = length > 2 ? sources[2] : undefined;

    customizer = (assigner.length > 3 && typeof customizer == 'function')
      ? (length--, customizer)
      : undefined;

    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
      customizer = length < 3 ? undefined : customizer;
      length = 1;
    }
    object = Object(object);
    while (++index < length) {
      var source = sources[index];
      if (source) {
        assigner(object, source, index, customizer);
      }
    }
    return object;
  });
}

module.exports = createAssigner;


/***/ }),

/***/ "./node_modules/lodash/_createBaseFor.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_createBaseFor.js ***!
  \***********************************************/
/***/ ((module) => {

/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

module.exports = createBaseFor;


/***/ }),

/***/ "./node_modules/lodash/_createCaseFirst.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_createCaseFirst.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var castSlice = __webpack_require__(/*! ./_castSlice */ "./node_modules/lodash/_castSlice.js"),
    hasUnicode = __webpack_require__(/*! ./_hasUnicode */ "./node_modules/lodash/_hasUnicode.js"),
    stringToArray = __webpack_require__(/*! ./_stringToArray */ "./node_modules/lodash/_stringToArray.js"),
    toString = __webpack_require__(/*! ./toString */ "./node_modules/lodash/toString.js");

/**
 * Creates a function like `_.lowerFirst`.
 *
 * @private
 * @param {string} methodName The name of the `String` case method to use.
 * @returns {Function} Returns the new case function.
 */
function createCaseFirst(methodName) {
  return function(string) {
    string = toString(string);

    var strSymbols = hasUnicode(string)
      ? stringToArray(string)
      : undefined;

    var chr = strSymbols
      ? strSymbols[0]
      : string.charAt(0);

    var trailing = strSymbols
      ? castSlice(strSymbols, 1).join('')
      : string.slice(1);

    return chr[methodName]() + trailing;
  };
}

module.exports = createCaseFirst;


/***/ }),

/***/ "./node_modules/lodash/_createCompounder.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash/_createCompounder.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayReduce = __webpack_require__(/*! ./_arrayReduce */ "./node_modules/lodash/_arrayReduce.js"),
    deburr = __webpack_require__(/*! ./deburr */ "./node_modules/lodash/deburr.js"),
    words = __webpack_require__(/*! ./words */ "./node_modules/lodash/words.js");

/** Used to compose unicode capture groups. */
var rsApos = "['\u2019]";

/** Used to match apostrophes. */
var reApos = RegExp(rsApos, 'g');

/**
 * Creates a function like `_.camelCase`.
 *
 * @private
 * @param {Function} callback The function to combine each word.
 * @returns {Function} Returns the new compounder function.
 */
function createCompounder(callback) {
  return function(string) {
    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
  };
}

module.exports = createCompounder;


/***/ }),

/***/ "./node_modules/lodash/_defineProperty.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_defineProperty.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__(/*! ./_getNative */ "./node_modules/lodash/_getNative.js");

var defineProperty = (function() {
  try {
    var func = getNative(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}());

module.exports = defineProperty;


/***/ }),

/***/ "./node_modules/lodash/_freeGlobal.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_freeGlobal.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;

module.exports = freeGlobal;


/***/ }),

/***/ "./node_modules/lodash/_getAllKeys.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_getAllKeys.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var overArg = __webpack_require__(/*! ./_overArg */ "./node_modules/lodash/_overArg.js");

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

module.exports = nativeKeys;


/***/ }),

/***/ "./node_modules/lodash/_getAllKeysIn.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_getAllKeysIn.js ***!
  \**********************************************/
/***/ ((module) => {

/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function nativeKeysIn(object) {
  var result = [];
  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }
  return result;
}

module.exports = nativeKeysIn;


/***/ }),

/***/ "./node_modules/lodash/_getNative.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_getNative.js ***!
  \*******************************************/
/***/ ((module) => {

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

module.exports = getValue;


/***/ }),

/***/ "./node_modules/lodash/_getPrototype.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_getPrototype.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var overArg = __webpack_require__(/*! ./_overArg */ "./node_modules/lodash/_overArg.js");

/** Built-in value references. */
var getPrototype = overArg(Object.getPrototypeOf, Object);

module.exports = getPrototype;


/***/ }),

/***/ "./node_modules/lodash/_getSymbols.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_getSymbols.js ***!
  \********************************************/
/***/ ((module) => {

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

module.exports = stubArray;


/***/ }),

/***/ "./node_modules/lodash/_getSymbolsIn.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_getSymbolsIn.js ***!
  \**********************************************/
/***/ ((module) => {

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

module.exports = stubArray;


/***/ }),

/***/ "./node_modules/lodash/_getTag.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/_getTag.js ***!
  \****************************************/
/***/ ((module) => {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;


/***/ }),

/***/ "./node_modules/lodash/_hasUnicode.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_hasUnicode.js ***!
  \********************************************/
/***/ ((module) => {

/** Used to compose unicode character classes. */
var rsAstralRange = '\\ud800-\\udfff',
    rsComboMarksRange = '\\u0300-\\u036f',
    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange = '\\u20d0-\\u20ff',
    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
    rsVarRange = '\\ufe0e\\ufe0f';

/** Used to compose unicode capture groups. */
var rsZWJ = '\\u200d';

/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

/**
 * Checks if `string` contains Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a symbol is found, else `false`.
 */
function hasUnicode(string) {
  return reHasUnicode.test(string);
}

module.exports = hasUnicode;


/***/ }),

/***/ "./node_modules/lodash/_hasUnicodeWord.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_hasUnicodeWord.js ***!
  \************************************************/
/***/ ((module) => {

/** Used to detect strings that need a more robust regexp to match words. */
var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

/**
 * Checks if `string` contains a word composed of Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a word is found, else `false`.
 */
function hasUnicodeWord(string) {
  return reHasUnicodeWord.test(string);
}

module.exports = hasUnicodeWord;


/***/ }),

/***/ "./node_modules/lodash/_initCloneArray.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_initCloneArray.js ***!
  \************************************************/
/***/ ((module) => {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */
function initCloneArray(array) {
  var length = array.length,
      result = new array.constructor(length);

  // Add properties assigned by `RegExp#exec`.
  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
    result.index = array.index;
    result.input = array.input;
  }
  return result;
}

module.exports = initCloneArray;


/***/ }),

/***/ "./node_modules/lodash/_initCloneByTag.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_initCloneByTag.js ***!
  \************************************************/
/***/ ((module) => {

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

module.exports = identity;


/***/ }),

/***/ "./node_modules/lodash/_initCloneObject.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_initCloneObject.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseCreate = __webpack_require__(/*! ./_baseCreate */ "./node_modules/lodash/_baseCreate.js"),
    getPrototype = __webpack_require__(/*! ./_getPrototype */ "./node_modules/lodash/_getPrototype.js"),
    isPrototype = __webpack_require__(/*! ./_isPrototype */ "./node_modules/lodash/_isPrototype.js");

/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneObject(object) {
  return (typeof object.constructor == 'function' && !isPrototype(object))
    ? baseCreate(getPrototype(object))
    : {};
}

module.exports = initCloneObject;


/***/ }),

/***/ "./node_modules/lodash/_isIterateeCall.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_isIterateeCall.js ***!
  \************************************************/
/***/ ((module) => {

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = stubFalse;


/***/ }),

/***/ "./node_modules/lodash/_isPrototype.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_isPrototype.js ***!
  \*********************************************/
/***/ ((module) => {

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = stubFalse;


/***/ }),

/***/ "./node_modules/lodash/_listCacheClear.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_listCacheClear.js ***!
  \************************************************/
/***/ ((module) => {

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

module.exports = listCacheClear;


/***/ }),

/***/ "./node_modules/lodash/_listCacheDelete.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_listCacheDelete.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var assocIndexOf = __webpack_require__(/*! ./_assocIndexOf */ "./node_modules/lodash/_assocIndexOf.js");

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

module.exports = listCacheDelete;


/***/ }),

/***/ "./node_modules/lodash/_listCacheGet.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_listCacheGet.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var assocIndexOf = __webpack_require__(/*! ./_assocIndexOf */ "./node_modules/lodash/_assocIndexOf.js");

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

module.exports = listCacheGet;


/***/ }),

/***/ "./node_modules/lodash/_listCacheHas.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_listCacheHas.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var assocIndexOf = __webpack_require__(/*! ./_assocIndexOf */ "./node_modules/lodash/_assocIndexOf.js");

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

module.exports = listCacheHas;


/***/ }),

/***/ "./node_modules/lodash/_listCacheSet.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_listCacheSet.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var assocIndexOf = __webpack_require__(/*! ./_assocIndexOf */ "./node_modules/lodash/_assocIndexOf.js");

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

module.exports = listCacheSet;


/***/ }),

/***/ "./node_modules/lodash/_overArg.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_overArg.js ***!
  \*****************************************/
/***/ ((module) => {

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

module.exports = overArg;


/***/ }),

/***/ "./node_modules/lodash/_overRest.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_overRest.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var apply = __webpack_require__(/*! ./_apply */ "./node_modules/lodash/_apply.js");

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */
function overRest(func, start, transform) {
  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
  return function() {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = transform(array);
    return apply(func, this, otherArgs);
  };
}

module.exports = overRest;


/***/ }),

/***/ "./node_modules/lodash/_root.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/_root.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var freeGlobal = __webpack_require__(/*! ./_freeGlobal */ "./node_modules/lodash/_freeGlobal.js");

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;


/***/ }),

/***/ "./node_modules/lodash/_setToString.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_setToString.js ***!
  \*********************************************/
/***/ ((module) => {

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

module.exports = identity;


/***/ }),

/***/ "./node_modules/lodash/_stringToArray.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_stringToArray.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var asciiToArray = __webpack_require__(/*! ./_asciiToArray */ "./node_modules/lodash/_asciiToArray.js"),
    hasUnicode = __webpack_require__(/*! ./_hasUnicode */ "./node_modules/lodash/_hasUnicode.js"),
    unicodeToArray = __webpack_require__(/*! ./_unicodeToArray */ "./node_modules/lodash/_unicodeToArray.js");

/**
 * Converts `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function stringToArray(string) {
  return hasUnicode(string)
    ? unicodeToArray(string)
    : asciiToArray(string);
}

module.exports = stringToArray;


/***/ }),

/***/ "./node_modules/lodash/_trimmedEndIndex.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_trimmedEndIndex.js ***!
  \*************************************************/
/***/ ((module) => {

/** Used to match a single whitespace character. */
var reWhitespace = /\s/;

/**
 * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
 * character of `string`.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {number} Returns the index of the last non-whitespace character.
 */
function trimmedEndIndex(string) {
  var index = string.length;

  while (index-- && reWhitespace.test(string.charAt(index))) {}
  return index;
}

module.exports = trimmedEndIndex;


/***/ }),

/***/ "./node_modules/lodash/_unicodeToArray.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_unicodeToArray.js ***!
  \************************************************/
/***/ ((module) => {

/** Used to compose unicode character classes. */
var rsAstralRange = '\\ud800-\\udfff',
    rsComboMarksRange = '\\u0300-\\u036f',
    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange = '\\u20d0-\\u20ff',
    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
    rsVarRange = '\\ufe0e\\ufe0f';

/** Used to compose unicode capture groups. */
var rsAstral = '[' + rsAstralRange + ']',
    rsCombo = '[' + rsComboRange + ']',
    rsFitz = '\\ud83c[\\udffb-\\udfff]',
    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
    rsNonAstral = '[^' + rsAstralRange + ']',
    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
    rsZWJ = '\\u200d';

/** Used to compose unicode regexes. */
var reOptMod = rsModifier + '?',
    rsOptVar = '[' + rsVarRange + ']?',
    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
    rsSeq = rsOptVar + reOptMod + rsOptJoin,
    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

/**
 * Converts a Unicode `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function unicodeToArray(string) {
  return string.match(reUnicode) || [];
}

module.exports = unicodeToArray;


/***/ }),

/***/ "./node_modules/lodash/_unicodeWords.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_unicodeWords.js ***!
  \**********************************************/
/***/ ((module) => {

/** Used to compose unicode character classes. */
var rsAstralRange = '\\ud800-\\udfff',
    rsComboMarksRange = '\\u0300-\\u036f',
    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange = '\\u20d0-\\u20ff',
    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
    rsDingbatRange = '\\u2700-\\u27bf',
    rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
    rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
    rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
    rsPunctuationRange = '\\u2000-\\u206f',
    rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
    rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
    rsVarRange = '\\ufe0e\\ufe0f',
    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

/** Used to compose unicode capture groups. */
var rsApos = "['\u2019]",
    rsBreak = '[' + rsBreakRange + ']',
    rsCombo = '[' + rsComboRange + ']',
    rsDigits = '\\d+',
    rsDingbat = '[' + rsDingbatRange + ']',
    rsLower = '[' + rsLowerRange + ']',
    rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
    rsFitz = '\\ud83c[\\udffb-\\udfff]',
    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
    rsNonAstral = '[^' + rsAstralRange + ']',
    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
    rsUpper = '[' + rsUpperRange + ']',
    rsZWJ = '\\u200d';

/** Used to compose unicode regexes. */
var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
    rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
    rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
    rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
    reOptMod = rsModifier + '?',
    rsOptVar = '[' + rsVarRange + ']?',
    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
    rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
    rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
    rsSeq = rsOptVar + reOptMod + rsOptJoin,
    rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq;

/** Used to match complex or compound words. */
var reUnicodeWord = RegExp([
  rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
  rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
  rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
  rsUpper + '+' + rsOptContrUpper,
  rsOrdUpper,
  rsOrdLower,
  rsDigits,
  rsEmoji
].join('|'), 'g');

/**
 * Splits a Unicode `string` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of `string`.
 */
function unicodeWords(string) {
  return string.match(reUnicodeWord) || [];
}

module.exports = unicodeWords;


/***/ }),

/***/ "./node_modules/lodash/assignIn.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/assignIn.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var copyObject = __webpack_require__(/*! ./_copyObject */ "./node_modules/lodash/_copyObject.js"),
    createAssigner = __webpack_require__(/*! ./_createAssigner */ "./node_modules/lodash/_createAssigner.js"),
    keysIn = __webpack_require__(/*! ./keysIn */ "./node_modules/lodash/keysIn.js");

/**
 * This method is like `_.assign` except that it iterates over own and
 * inherited source properties.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @alias extend
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @see _.assign
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * function Bar() {
 *   this.c = 3;
 * }
 *
 * Foo.prototype.b = 2;
 * Bar.prototype.d = 4;
 *
 * _.assignIn({ 'a': 0 }, new Foo, new Bar);
 * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
 */
var assignIn = createAssigner(function(object, source) {
  copyObject(source, keysIn(source), object);
});

module.exports = assignIn;


/***/ }),

/***/ "./node_modules/lodash/camelCase.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/camelCase.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var capitalize = __webpack_require__(/*! ./capitalize */ "./node_modules/lodash/capitalize.js"),
    createCompounder = __webpack_require__(/*! ./_createCompounder */ "./node_modules/lodash/_createCompounder.js");

/**
 * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the camel cased string.
 * @example
 *
 * _.camelCase('Foo Bar');
 * // => 'fooBar'
 *
 * _.camelCase('--foo-bar--');
 * // => 'fooBar'
 *
 * _.camelCase('__FOO_BAR__');
 * // => 'fooBar'
 */
var camelCase = createCompounder(function(result, word, index) {
  word = word.toLowerCase();
  return result + (index ? capitalize(word) : word);
});

module.exports = camelCase;


/***/ }),

/***/ "./node_modules/lodash/capitalize.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/capitalize.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toString = __webpack_require__(/*! ./toString */ "./node_modules/lodash/toString.js"),
    upperFirst = __webpack_require__(/*! ./upperFirst */ "./node_modules/lodash/upperFirst.js");

/**
 * Converts the first character of `string` to upper case and the remaining
 * to lower case.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to capitalize.
 * @returns {string} Returns the capitalized string.
 * @example
 *
 * _.capitalize('FRED');
 * // => 'Fred'
 */
function capitalize(string) {
  return upperFirst(toString(string).toLowerCase());
}

module.exports = capitalize;


/***/ }),

/***/ "./node_modules/lodash/clone.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/clone.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseClone = __webpack_require__(/*! ./_baseClone */ "./node_modules/lodash/_baseClone.js");

/** Used to compose bitmasks for cloning. */
var CLONE_SYMBOLS_FLAG = 4;

/**
 * Creates a shallow clone of `value`.
 *
 * **Note:** This method is loosely based on the
 * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
 * and supports cloning arrays, array buffers, booleans, date objects, maps,
 * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
 * arrays. The own enumerable properties of `arguments` objects are cloned
 * as plain objects. An empty object is returned for uncloneable values such
 * as error objects, functions, DOM nodes, and WeakMaps.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to clone.
 * @returns {*} Returns the cloned value.
 * @see _.cloneDeep
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var shallow = _.clone(objects);
 * console.log(shallow[0] === objects[0]);
 * // => true
 */
function clone(value) {
  return baseClone(value, CLONE_SYMBOLS_FLAG);
}

module.exports = clone;


/***/ }),

/***/ "./node_modules/lodash/debounce.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/debounce.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js"),
    now = __webpack_require__(/*! ./now */ "./node_modules/lodash/now.js"),
    toNumber = __webpack_require__(/*! ./toNumber */ "./node_modules/lodash/toNumber.js");

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max,
    nativeMin = Math.min;

/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */
function debounce(func, wait, options) {
  var lastArgs,
      lastThis,
      maxWait,
      result,
      timerId,
      lastCallTime,
      lastInvokeTime = 0,
      leading = false,
      maxing = false,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  wait = toNumber(wait) || 0;
  if (isObject(options)) {
    leading = !!options.leading;
    maxing = 'maxWait' in options;
    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }

  function invokeFunc(time) {
    var args = lastArgs,
        thisArg = lastThis;

    lastArgs = lastThis = undefined;
    lastInvokeTime = time;
    result = func.apply(thisArg, args);
    return result;
  }

  function leadingEdge(time) {
    // Reset any `maxWait` timer.
    lastInvokeTime = time;
    // Start the timer for the trailing edge.
    timerId = setTimeout(timerExpired, wait);
    // Invoke the leading edge.
    return leading ? invokeFunc(time) : result;
  }

  function remainingWait(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime,
        timeWaiting = wait - timeSinceLastCall;

    return maxing
      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
      : timeWaiting;
  }

  function shouldInvoke(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime;

    // Either this is the first call, activity has stopped and we're at the
    // trailing edge, the system time has gone backwards and we're treating
    // it as the trailing edge, or we've hit the `maxWait` limit.
    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
  }

  function timerExpired() {
    var time = now();
    if (shouldInvoke(time)) {
      return trailingEdge(time);
    }
    // Restart the timer.
    timerId = setTimeout(timerExpired, remainingWait(time));
  }

  function trailingEdge(time) {
    timerId = undefined;

    // Only invoke if we have `lastArgs` which means `func` has been
    // debounced at least once.
    if (trailing && lastArgs) {
      return invokeFunc(time);
    }
    lastArgs = lastThis = undefined;
    return result;
  }

  function cancel() {
    if (timerId !== undefined) {
      clearTimeout(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = undefined;
  }

  function flush() {
    return timerId === undefined ? result : trailingEdge(now());
  }

  function debounced() {
    var time = now(),
        isInvoking = shouldInvoke(time);

    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time;

    if (isInvoking) {
      if (timerId === undefined) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        // Handle invocations in a tight loop.
        clearTimeout(timerId);
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === undefined) {
      timerId = setTimeout(timerExpired, wait);
    }
    return result;
  }
  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}

module.exports = debounce;


/***/ }),

/***/ "./node_modules/lodash/deburr.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/deburr.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseToString = __webpack_require__(/*! ./_baseToString */ "./node_modules/lodash/_baseToString.js");

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

module.exports = toString;


/***/ }),

/***/ "./node_modules/lodash/each.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/each.js ***!
  \*************************************/
/***/ ((module) => {

/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}

module.exports = arrayEach;


/***/ }),

/***/ "./node_modules/lodash/eq.js":
/*!***********************************!*\
  !*** ./node_modules/lodash/eq.js ***!
  \***********************************/
/***/ ((module) => {

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

module.exports = eq;


/***/ }),

/***/ "./node_modules/lodash/extend.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/extend.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(/*! ./assignIn */ "./node_modules/lodash/assignIn.js");


/***/ }),

/***/ "./node_modules/lodash/identity.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/identity.js ***!
  \*****************************************/
/***/ ((module) => {

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

module.exports = identity;


/***/ }),

/***/ "./node_modules/lodash/includes.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/includes.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIndexOf = __webpack_require__(/*! ./_baseIndexOf */ "./node_modules/lodash/_baseIndexOf.js");

/**
 * A specialized version of `_.includes` for arrays without support for
 * specifying an index to search from.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */
function arrayIncludes(array, value) {
  var length = array == null ? 0 : array.length;
  return !!length && baseIndexOf(array, value, 0) > -1;
}

module.exports = arrayIncludes;


/***/ }),

/***/ "./node_modules/lodash/isArguments.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/isArguments.js ***!
  \********************************************/
/***/ ((module) => {

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = stubFalse;


/***/ }),

/***/ "./node_modules/lodash/isArray.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/isArray.js ***!
  \****************************************/
/***/ ((module) => {

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

module.exports = isArray;


/***/ }),

/***/ "./node_modules/lodash/isArrayLike.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/isArrayLike.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isFunction = __webpack_require__(/*! ./isFunction */ "./node_modules/lodash/isFunction.js"),
    isLength = __webpack_require__(/*! ./isLength */ "./node_modules/lodash/isLength.js");

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

module.exports = isArrayLike;


/***/ }),

/***/ "./node_modules/lodash/isBuffer.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isBuffer.js ***!
  \*****************************************/
/***/ ((module) => {

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = stubFalse;


/***/ }),

/***/ "./node_modules/lodash/isEmpty.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/isEmpty.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseKeys = __webpack_require__(/*! ./_baseKeys */ "./node_modules/lodash/_baseKeys.js"),
    getTag = __webpack_require__(/*! ./_getTag */ "./node_modules/lodash/_getTag.js"),
    isArguments = __webpack_require__(/*! ./isArguments */ "./node_modules/lodash/isArguments.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    isArrayLike = __webpack_require__(/*! ./isArrayLike */ "./node_modules/lodash/isArrayLike.js"),
    isBuffer = __webpack_require__(/*! ./isBuffer */ "./node_modules/lodash/isBuffer.js"),
    isPrototype = __webpack_require__(/*! ./_isPrototype */ "./node_modules/lodash/_isPrototype.js"),
    isTypedArray = __webpack_require__(/*! ./isTypedArray */ "./node_modules/lodash/isTypedArray.js");

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    setTag = '[object Set]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if `value` is an empty object, collection, map, or set.
 *
 * Objects are considered empty if they have no own enumerable string keyed
 * properties.
 *
 * Array-like values such as `arguments` objects, arrays, buffers, strings, or
 * jQuery-like collections are considered empty if they have a `length` of `0`.
 * Similarly, maps and sets are considered empty if they have a `size` of `0`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
 * @example
 *
 * _.isEmpty(null);
 * // => true
 *
 * _.isEmpty(true);
 * // => true
 *
 * _.isEmpty(1);
 * // => true
 *
 * _.isEmpty([1, 2, 3]);
 * // => false
 *
 * _.isEmpty({ 'a': 1 });
 * // => false
 */
function isEmpty(value) {
  if (value == null) {
    return true;
  }
  if (isArrayLike(value) &&
      (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
        isBuffer(value) || isTypedArray(value) || isArguments(value))) {
    return !value.length;
  }
  var tag = getTag(value);
  if (tag == mapTag || tag == setTag) {
    return !value.size;
  }
  if (isPrototype(value)) {
    return !baseKeys(value).length;
  }
  for (var key in value) {
    if (hasOwnProperty.call(value, key)) {
      return false;
    }
  }
  return true;
}

module.exports = isEmpty;


/***/ }),

/***/ "./node_modules/lodash/isFunction.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/isFunction.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "./node_modules/lodash/_baseGetTag.js"),
    isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js");

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

module.exports = isFunction;


/***/ }),

/***/ "./node_modules/lodash/isLength.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isLength.js ***!
  \*****************************************/
/***/ ((module) => {

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

module.exports = isLength;


/***/ }),

/***/ "./node_modules/lodash/isMap.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/isMap.js ***!
  \**************************************/
/***/ ((module) => {

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = stubFalse;


/***/ }),

/***/ "./node_modules/lodash/isNaN.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/isNaN.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isNumber = __webpack_require__(/*! ./isNumber */ "./node_modules/lodash/isNumber.js");

/**
 * Checks if `value` is `NaN`.
 *
 * **Note:** This method is based on
 * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
 * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
 * `undefined` and other non-number values.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 * @example
 *
 * _.isNaN(NaN);
 * // => true
 *
 * _.isNaN(new Number(NaN));
 * // => true
 *
 * isNaN(undefined);
 * // => true
 *
 * _.isNaN(undefined);
 * // => false
 */
function isNaN(value) {
  // An `NaN` primitive is the only value that is not equal to itself.
  // Perform the `toStringTag` check first to avoid errors with some
  // ActiveX objects in IE.
  return isNumber(value) && value != +value;
}

module.exports = isNaN;


/***/ }),

/***/ "./node_modules/lodash/isNumber.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isNumber.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "./node_modules/lodash/_baseGetTag.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");

/** `Object#toString` result references. */
var numberTag = '[object Number]';

/**
 * Checks if `value` is classified as a `Number` primitive or object.
 *
 * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
 * classified as numbers, use the `_.isFinite` method.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a number, else `false`.
 * @example
 *
 * _.isNumber(3);
 * // => true
 *
 * _.isNumber(Number.MIN_VALUE);
 * // => true
 *
 * _.isNumber(Infinity);
 * // => true
 *
 * _.isNumber('3');
 * // => false
 */
function isNumber(value) {
  return typeof value == 'number' ||
    (isObjectLike(value) && baseGetTag(value) == numberTag);
}

module.exports = isNumber;


/***/ }),

/***/ "./node_modules/lodash/isObject.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isObject.js ***!
  \*****************************************/
/***/ ((module) => {

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;


/***/ }),

/***/ "./node_modules/lodash/isObjectLike.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/isObjectLike.js ***!
  \*********************************************/
/***/ ((module) => {

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;


/***/ }),

/***/ "./node_modules/lodash/isPlainObject.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/isPlainObject.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "./node_modules/lodash/_baseGetTag.js"),
    getPrototype = __webpack_require__(/*! ./_getPrototype */ "./node_modules/lodash/_getPrototype.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");

/** `Object#toString` result references. */
var objectTag = '[object Object]';

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to infer the `Object` constructor. */
var objectCtorString = funcToString.call(Object);

/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */
function isPlainObject(value) {
  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
    return false;
  }
  var proto = getPrototype(value);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
  return typeof Ctor == 'function' && Ctor instanceof Ctor &&
    funcToString.call(Ctor) == objectCtorString;
}

module.exports = isPlainObject;


/***/ }),

/***/ "./node_modules/lodash/isSet.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/isSet.js ***!
  \**************************************/
/***/ ((module) => {

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = stubFalse;


/***/ }),

/***/ "./node_modules/lodash/isSymbol.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isSymbol.js ***!
  \*****************************************/
/***/ ((module) => {

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = stubFalse;


/***/ }),

/***/ "./node_modules/lodash/isTypedArray.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/isTypedArray.js ***!
  \*********************************************/
/***/ ((module) => {

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = stubFalse;


/***/ }),

/***/ "./node_modules/lodash/keys.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/keys.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var overArg = __webpack_require__(/*! ./_overArg */ "./node_modules/lodash/_overArg.js");

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

module.exports = nativeKeys;


/***/ }),

/***/ "./node_modules/lodash/keysIn.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/keysIn.js ***!
  \***************************************/
/***/ ((module) => {

/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function nativeKeysIn(object) {
  var result = [];
  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }
  return result;
}

module.exports = nativeKeysIn;


/***/ }),

/***/ "./node_modules/lodash/now.js":
/*!************************************!*\
  !*** ./node_modules/lodash/now.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */
var now = function() {
  return root.Date.now();
};

module.exports = now;


/***/ }),

/***/ "./node_modules/lodash/throttle.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/throttle.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var debounce = __webpack_require__(/*! ./debounce */ "./node_modules/lodash/debounce.js"),
    isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js");

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a throttled function that only invokes `func` at most once per
 * every `wait` milliseconds. The throttled function comes with a `cancel`
 * method to cancel delayed `func` invocations and a `flush` method to
 * immediately invoke them. Provide `options` to indicate whether `func`
 * should be invoked on the leading and/or trailing edge of the `wait`
 * timeout. The `func` is invoked with the last arguments provided to the
 * throttled function. Subsequent calls to the throttled function return the
 * result of the last `func` invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the throttled function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.throttle` and `_.debounce`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to throttle.
 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=true]
 *  Specify invoking on the leading edge of the timeout.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new throttled function.
 * @example
 *
 * // Avoid excessively updating the position while scrolling.
 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
 *
 * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
 * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
 * jQuery(element).on('click', throttled);
 *
 * // Cancel the trailing throttled invocation.
 * jQuery(window).on('popstate', throttled.cancel);
 */
function throttle(func, wait, options) {
  var leading = true,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  if (isObject(options)) {
    leading = 'leading' in options ? !!options.leading : leading;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }
  return debounce(func, wait, {
    'leading': leading,
    'maxWait': wait,
    'trailing': trailing
  });
}

module.exports = throttle;


/***/ }),

/***/ "./node_modules/lodash/toNumber.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/toNumber.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseTrim = __webpack_require__(/*! ./_baseTrim */ "./node_modules/lodash/_baseTrim.js"),
    isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js"),
    isSymbol = __webpack_require__(/*! ./isSymbol */ "./node_modules/lodash/isSymbol.js");

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = baseTrim(value);
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN : +value);
}

module.exports = toNumber;


/***/ }),

/***/ "./node_modules/lodash/toString.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/toString.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseToString = __webpack_require__(/*! ./_baseToString */ "./node_modules/lodash/_baseToString.js");

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

module.exports = toString;


/***/ }),

/***/ "./node_modules/lodash/transform.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/transform.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayEach = __webpack_require__(/*! ./_arrayEach */ "./node_modules/lodash/_arrayEach.js"),
    baseCreate = __webpack_require__(/*! ./_baseCreate */ "./node_modules/lodash/_baseCreate.js"),
    baseForOwn = __webpack_require__(/*! ./_baseForOwn */ "./node_modules/lodash/_baseForOwn.js"),
    baseIteratee = __webpack_require__(/*! ./_baseIteratee */ "./node_modules/lodash/_baseIteratee.js"),
    getPrototype = __webpack_require__(/*! ./_getPrototype */ "./node_modules/lodash/_getPrototype.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    isBuffer = __webpack_require__(/*! ./isBuffer */ "./node_modules/lodash/isBuffer.js"),
    isFunction = __webpack_require__(/*! ./isFunction */ "./node_modules/lodash/isFunction.js"),
    isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js"),
    isTypedArray = __webpack_require__(/*! ./isTypedArray */ "./node_modules/lodash/isTypedArray.js");

/**
 * An alternative to `_.reduce`; this method transforms `object` to a new
 * `accumulator` object which is the result of running each of its own
 * enumerable string keyed properties thru `iteratee`, with each invocation
 * potentially mutating the `accumulator` object. If `accumulator` is not
 * provided, a new object with the same `[[Prototype]]` will be used. The
 * iteratee is invoked with four arguments: (accumulator, value, key, object).
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @static
 * @memberOf _
 * @since 1.3.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @param {*} [accumulator] The custom accumulator value.
 * @returns {*} Returns the accumulated value.
 * @example
 *
 * _.transform([2, 3, 4], function(result, n) {
 *   result.push(n *= n);
 *   return n % 2 == 0;
 * }, []);
 * // => [4, 9]
 *
 * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
 *   (result[value] || (result[value] = [])).push(key);
 * }, {});
 * // => { '1': ['a', 'c'], '2': ['b'] }
 */
function transform(object, iteratee, accumulator) {
  var isArr = isArray(object),
      isArrLike = isArr || isBuffer(object) || isTypedArray(object);

  iteratee = baseIteratee(iteratee, 4);
  if (accumulator == null) {
    var Ctor = object && object.constructor;
    if (isArrLike) {
      accumulator = isArr ? new Ctor : [];
    }
    else if (isObject(object)) {
      accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
    }
    else {
      accumulator = {};
    }
  }
  (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
    return iteratee(accumulator, value, index, object);
  });
  return accumulator;
}

module.exports = transform;


/***/ }),

/***/ "./node_modules/lodash/uniqueId.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/uniqueId.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toString = __webpack_require__(/*! ./toString */ "./node_modules/lodash/toString.js");

/** Used to generate unique IDs. */
var idCounter = 0;

/**
 * Generates a unique ID. If `prefix` is given, the ID is appended to it.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {string} [prefix=''] The value to prefix the ID with.
 * @returns {string} Returns the unique ID.
 * @example
 *
 * _.uniqueId('contact_');
 * // => 'contact_104'
 *
 * _.uniqueId();
 * // => '105'
 */
function uniqueId(prefix) {
  var id = ++idCounter;
  return toString(prefix) + id;
}

module.exports = uniqueId;


/***/ }),

/***/ "./node_modules/lodash/upperFirst.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/upperFirst.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var createCaseFirst = __webpack_require__(/*! ./_createCaseFirst */ "./node_modules/lodash/_createCaseFirst.js");

/**
 * Converts the first character of `string` to upper case.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.upperFirst('fred');
 * // => 'Fred'
 *
 * _.upperFirst('FRED');
 * // => 'FRED'
 */
var upperFirst = createCaseFirst('toUpperCase');

module.exports = upperFirst;


/***/ }),

/***/ "./node_modules/lodash/words.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/words.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var asciiWords = __webpack_require__(/*! ./_asciiWords */ "./node_modules/lodash/_asciiWords.js"),
    hasUnicodeWord = __webpack_require__(/*! ./_hasUnicodeWord */ "./node_modules/lodash/_hasUnicodeWord.js"),
    toString = __webpack_require__(/*! ./toString */ "./node_modules/lodash/toString.js"),
    unicodeWords = __webpack_require__(/*! ./_unicodeWords */ "./node_modules/lodash/_unicodeWords.js");

/**
 * Splits `string` into an array of its words.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to inspect.
 * @param {RegExp|string} [pattern] The pattern to match words.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Array} Returns the words of `string`.
 * @example
 *
 * _.words('fred, barney, & pebbles');
 * // => ['fred', 'barney', 'pebbles']
 *
 * _.words('fred, barney, & pebbles', /[^, ]+/g);
 * // => ['fred', 'barney', '&', 'pebbles']
 */
function words(string, pattern, guard) {
  string = toString(string);
  pattern = guard ? undefined : pattern;

  if (pattern === undefined) {
    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
  }
  return string.match(pattern) || [];
}

module.exports = words;


/***/ }),

/***/ "./node_modules/nanobar/nanobar.min.js":
/*!*********************************************!*\
  !*** ./node_modules/nanobar/nanobar.min.js ***!
  \*********************************************/
/***/ (function(module) {

(function(root){"use strict";var css=".nanobar{width:100%;height:4px;z-index:9999;top:0}.bar{width:0;height:100%;transition:height .3s;background:#000}";function addCss(){var s=document.getElementById("nanobarcss");if(s===null){s=document.createElement("style");s.type="text/css";s.id="nanobarcss";document.head.insertBefore(s,document.head.firstChild);if(!s.styleSheet)return s.appendChild(document.createTextNode(css));s.styleSheet.cssText=css}}function addClass(el,cls){if(el.classList)el.classList.add(cls);else el.className+=" "+cls}function createBar(rm){var el=document.createElement("div"),width=0,here=0,on=0,bar={el:el,go:go};addClass(el,"bar");function move(){var dist=width-here;if(dist<.1&&dist>-.1){place(here);on=0;if(width===100){el.style.height=0;setTimeout(function(){rm(el)},300)}}else{place(width-dist/4);setTimeout(go,16)}}function place(num){width=num;el.style.width=width+"%"}function go(num){if(num>=0){here=num;if(!on){on=1;move()}}else if(on){move()}}return bar}function Nanobar(opts){opts=opts||{};var el=document.createElement("div"),applyGo,nanobar={el:el,go:function(p){applyGo(p);if(p===100){init()}}};function rm(child){el.removeChild(child)}function init(){var bar=createBar(rm);el.appendChild(bar.el);applyGo=bar.go}addCss();addClass(el,"nanobar");if(opts.id)el.id=opts.id;if(opts.classname)addClass(el,opts.classname);if(opts.target){el.style.position="relative";opts.target.insertBefore(el,opts.target.firstChild)}else{el.style.position="fixed";document.getElementsByTagName("body")[0].appendChild(el)}init();return nanobar}if(true){module.exports=Nanobar}else {}})(this);

/***/ }),

/***/ "./node_modules/nod-validate/nod.js":
/*!******************************************!*\
  !*** ./node_modules/nod-validate/nod.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* provided dependency */ var __webpack_provided_window_dot_jQuery = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");

/**
 *
 *
 * nod v.2.0.12
 * Gorm Casper
 *
 *
 *
 * This is a short breakdown of the code to help you find your way around.
 *
 *
 * An `element` always refer to some input element defined by the user via the
 * `selector` key.
 *
 * A `metric` is the user created objects that is used to add checks to
 * nod.
 *
 * Each `element` will have at most one of a `listener`, a `checker`, a
 * `checkHandler`, and a `domNode` "attached" to it. The `listener` listens
 * for inputs or changes to the `element` and passes the new value on to to the
 * `checker` which performs its checks and passes the the results on to the
 * `checkHandler` which calculates the new state of the `element` which it
 * passes on to the `domNode` which will update the dom.
 *
 * The four main parts, the listener, the checker, the checkHandler, and the
 * domNode all communicate through the `mediator` by firing events identified
 * by a unique id. They do not know of each other's existance, and so no
 * communication flows directly between them.
 *
 * All listeners, checkers, handlers, and domNodes are grouped together in
 * `collections`, which are basically a glorified array that makes it easy
 * not to get duplicate items for each element (for instance two listeners
 * listening to the same element).
 *
 * The communication flow looks like this:
 * listener -> checker -> checkHandler -> domNode
 *
 * Between each part, you have the mediator.
 *
 *
 * `Metrics` are added by the user, which sets up the system above. Notice
 * that a metric can target multiple elements at once, and that there can
 * be overlaps. One metric definitely does not equal one element or one
 * check.
 *
 */

function nod (config) {
    var form,
        configuration   = {},
        mediator        = nod.makeMediator(),
        eventEmitter    = nod.makeEventEmitter(mediator),

        // Creating (empty) collections
        listeners       = nod.makeCollection(nod.makeListener),
        checkers        = nod.makeCollection(nod.makeChecker),
        checkHandlers   = nod.makeCollection(nod.makeCheckHandler),
        domNodes        = nod.makeCollection(nod.makeDomNode);

    /**
     * Entry point for the user. The user passes in an array of metrics (an
     * object containing a selector, a validate string/function, etc.) and it
     * gets processed from here.
     *
     * This function, is mostly about cleaning up what the user passed us.
     */
    function addMetrics (metrics) {
        // Make sure we are dealing with an array of metrics.
        var arrayMetrics = Array.isArray(metrics) ? metrics : [metrics];

        arrayMetrics.forEach(function (metric) {
            var validateArray, errorMessageArray,
                notArray = !Array.isArray(metric.validate);

            // If the 'validate' is not an array, then we're good to go.
            if (notArray) {
                addMetric(metric);

            // If it is an array (e.g., validate: ['email', 'max-length:10']),
            // then we need to split them up into multiple metrics, and add
            // them individually.
            } else {
                if (!Array.isArray(metric.errorMessage)) {
                    var errorMsg = 'If you pass in `validate:...` as an ' +
                        ' array, then `errorMessage:...` also needs to be an ' +
                        ' array. "' + metric.validate + '", and "' +
                        metric.errorMessage + '"';

                    throw Error(errorMsg);
                }

                // We store each as arrays, and then run through them,
                // overwriting each of the keys accordingly.
                validateArray     = metric.validate;
                errorMessageArray = metric.errorMessage;

                validateArray.forEach(function (validate, i) {
                    // Overwrite the array with the individual 'validate' and
                    // 'errorMessage'.
                    metric.validate     = validate;
                    metric.errorMessage = errorMessageArray[i];

                    addMetric(metric);
                });
            }
        });
    }

    function addMetric (metric) {
        var specialTriggers = [],

            // The function that will check the value of the element.
            checkFunction = nod.getCheckFunction(metric),

            // A list of elements that this metric will target.
            elements = nod.getElements(metric.selector),

            // A "set" here, refers to an obj with one listener, one checker,
            // and one checkHandler. Only every one for each element in the
            // dom.
            metricSets = elements.map(function (element) {
                return {
                    listener:       listeners.findOrMake(element,
                                                         mediator,
                                                         metric.triggerEvents,
                                                         configuration),
                    checker:        checkers.findOrMake(element, mediator),
                    checkHandler:   checkHandlers.findOrMake(element,
                                                             mediator,
                                                             configuration),
                    domNode:        domNodes.findOrMake(element,
                                                        mediator,
                                                        configuration)
                };
            });

        // Saved for later reference in case the user has a `tap` function
        // defined.
        checkFunction.validate = (typeof metric.validate === 'function')
            ? metric.validate.toString()
            : metric.validate;

        // Special cases. These `validates` affect each other, and their state
        // needs to update each time either of the elements' values change.
        if (metric.validate === 'one-of'
            || metric.validate === 'only-one-of'
            || metric.validate === 'some-radio') {
            specialTriggers.push(metric.selector);
        }

        if (typeof metric.validate === 'string'
            && metric.validate.indexOf('same-as') > -1) {
            specialTriggers.push(metric.validate.split(':')[1]);
        }

        // Helper function, used in the loop below.
        function subscribeToTriggers (checker, selector) {
            var triggerElements = nod.getElements(selector);

            triggerElements.forEach(function (element) {
                var listener = listeners.findOrMake(element,
                                                    mediator,
                                                    null,
                                                    configuration);

                checker.subscribeTo(listener.id);
            });
        }

        // Here we set up the "connections" between each of our main parts.
        // They communicate only through the mediator.
        metricSets.forEach(function (metricSet) {
            // :: Listener -> Checker

            // We want our checker to listen to the listener. A listener has an
            // id, which it uses when it fires events to the mediator (which
            // was set up when the listener was created).
            metricSet.checker.subscribeTo(metricSet.listener.id);

            // If the user set a `triggeredBy`, the checker need to listen to
            // changes on this element as well.
            // Same goes for special triggers that we set.
            subscribeToTriggers(metricSet.checker, metric.triggeredBy);
            subscribeToTriggers(metricSet.checker, specialTriggers);

            // :: Checker -> checkHandler

            var checkId = nod.unique();

            // We add the check function as one to be checked when the user
            // inputs something. (There might be more than this one).
            metricSet.checker.addCheck(checkFunction, checkId);

            // We want the check handler to listen for results from the checker
            metricSet.checkHandler.subscribeTo(checkId,
                                               metric.errorMessage,
                                               metric.defaultStatus);

            if (configuration.noDom) {
                eventEmitter.subscribe(metricSet.checkHandler.id);
            } else {
                // :: checkHandler -> domNode

                // The checkHandler has its own id (and only ever needs one), so
                // we just ask the domNode to listen for that.
                metricSet.domNode.subscribeTo(metricSet.checkHandler.id);
            }
        });

        // After all is done, we may have to enable/disable a submit button.
        toggleSubmit();
    }

    /**
     * If a form is added, we listen for submits, and if the has also set
     * `preventSubmit` in the configuration, then we stop the commit from
     * happening unless all the elements are valid.
     */
    function addForm (selector) {
        var form = nod.getElement(selector);

        form.addEventListener('submit', possiblePreventSubmit, false);
    }

    // Prevent function, used above
    function possiblePreventSubmit (event) {
        if (configuration.preventSubmit && !areAll(nod.constants.VALID)) {
            event.preventDefault();

            // Show errors to the user
            checkers.forEach(function (checker) {
                checker.performCheck({
                    event: event
                });
            });

            // Focus on the first invalid element
            for (var i = 0, len = checkHandlers.length; i < len; i++) {
                var checkHandler = checkHandlers[i];

                if (checkHandler.getStatus().status === nod.constants.INVALID) {
                    checkHandler.element.focus();
                    break;
                }
            }
        }
    }

    /**
     * Removes elements completely.
     */
    function removeElement (selector) {
        var elements = nod.getElements(selector);

        elements.forEach(function (element) {
            listeners.removeItem(element);
            checkers.removeItem(element);
            checkHandlers.removeItem(element);
            domNodes.removeItem(element);
        });
    }

    /**
     * configure
     *
     * Changes the configuration object used throughout the code for classes,
     * delays, messages, etc.
     *
     * It can either be called with a key/value pair (two arguments), or with
     * an object with key/value pairs.
     */
    function configure (key, value) {
        var attributes = {};

        if (arguments.length > 1) {
            attributes[key] = value;
        } else {
            attributes = key;
        }

        for (var k in attributes) {
            configuration[k] = attributes[k];
        }

        if (attributes.submit || attributes.disableSubmit) {
            toggleSubmit();
        }

        if (attributes.form) {
            addForm(attributes.form);
        }
    }

    /**
     * toggleSubmit
     *
     * Toggles the submit button (enabled if every element is valid, otherwise
     * disabled).
     */
    function toggleSubmit () {
        if (configuration.submit && configuration.disableSubmit) {
            nod.getElements(configuration.submit).forEach(function (submitBtn) {
                submitBtn.disabled = !areAll(nod.constants.VALID);
            });
        }
    }

    /**
     * Listen to all checks, and if the user has set in the configuration to
     * enable/disabled the submit button, we do that.
     */
    mediator.subscribe('all', toggleSubmit);

    function areAll (status) {
        for (var i = 0, len = checkHandlers.length; i < len; i++) {
            if (checkHandlers[i].getStatus().status !== status) {
                return false;
            }
        }

        return true;
    }

    function setMessageOptions (options) {
        options = Array.isArray(options) ? options : [options];

        options.forEach(function (option) {
            var elements = nod.getElements(option.selector);

            elements.forEach(function (element) {
                var domNode = domNodes.findOrMake(element,
                                                  mediator,
                                                  configuration);

                domNode.setMessageOptions(option.parent, option.errorSpan);
            });
        });
    }

    /**
     * Listen to all checks and allow the user to listen in, if he set a `tap`
     * function in the configuration.
     */
    mediator.subscribe('all', function (options) {
        if (typeof configuration.tap === 'function'
            && options.type === 'check') {
            configuration.tap(options);
        }
    });

    function getStatus (selector, showErrorMessage) {
        var element = nod.getElement(selector),
            status  = checkHandlers.findOrMake(element).getStatus();

        return showErrorMessage ? status : status.status;
    }

    function performCheck (selector) {
        var cs = selector
            ? nod.getElements(selector).map(checkers.findOrMake)
            : checkers;

        cs.forEach(function (checker) {
            checker.performCheck();
        });
    }

    function setInvalid (selector, errorMessage) {
        var element = nod.getElement(selector),
            domNode  = domNodes.findOrMake(element);

        domNode.set({
            result: nod.constants.INVALID,
            errorMessage: errorMessage || ''
        });
    }

    function setValid (selector) {
        var element = nod.getElement(selector),
            domNode  = domNodes.findOrMake(element);

        domNode.set({
            result: nod.constants.VALID,
            errorMessage: ''
        });
    }

    function setAllNodeValid () {
        for (var i = 0, len = domNodes.length; i < len; i++) {
            setValid(domNodes[i].element);
        }
    }

    /**
     * Internal functions that are exposed to the public.
     */
    var nodInstace = {
        add:                    addMetrics,
        remove:                 removeElement,
        areAll:                 areAll,
        getStatus:              getStatus,
        configure:              configure,
        setMessageOptions:      setMessageOptions,
        performCheck:           performCheck,
        setInvalid:             setInvalid,
        setValid:               setValid,
        setAllNodeValid:        setAllNodeValid
    };

    if (config) {
        nodInstace.configure(config);
    }

    return nodInstace;
}

nod.constants = {
    VALID:          'valid',
    INVALID:        'invalid',
    UNCHECKED:      'unchecked',

    DELAY:          700
};

nod.classes = {
    successClass:         'nod-success',
    successMessageClass:  'nod-success-message',
    errorClass:           'nod-error',
    errorMessageClass:    'nod-error-message'
};

// Helper function to create unique id's
nod.unique = (function () {
    var uniqueCounter = 0;

    return function () {
        return uniqueCounter++;
    };
})();

/** makeMediator
 *
 * Minimal implementation of a mediator pattern, used for communication between
 * checkers and checkHandlers (checkers fires events which handlers can
 * subscribe to). Unique ID's are used to tell events apart.
 *
 * Subscribing to 'all' will give you all results from all checks.
 */
nod.makeMediator = function () {
    var subscribers = [],
        all = [];

    return {
        subscribe: function subscribe (id, fn) {
            if (id === 'all') {
                all.push(fn);
            } else {
                if (!subscribers[id]) {
                    subscribers[id] = [];
                }

                if (subscribers[id].indexOf(fn) === -1) {
                    subscribers[id].push(fn);
                }
            }
        },

        fire: function fire (options) {
            var subscribedFunctions = subscribers[options.id].concat(all);

            subscribedFunctions.forEach(function (subscribedFunction) {
                subscribedFunction(options);
            });
        }
    };
};

nod.findCollectionIndex = function (collection, element) {
    for (var i in collection) {
        if (collection[i].element === element) {
            return i;
        }
    }

    return -1;
};

/**
 * makeCollection
 *
 * A minimal implementation of a "collection", inspired by collections from
 * BackboneJS. Used by listeners, checkers, and checkHandlers.
 */
nod.makeCollection = function (maker) {
    var collection = [];

    collection.findOrMake = function (element) {
        var index = nod.findCollectionIndex(collection, element);

        // Found
        if (index !== -1) {
            return collection[index];
        }

        // None found, let's make one then.
        var item = maker.apply(null, arguments);

        collection.push(item);

        return item;
    };

    collection.removeItem = function (element) {
        var index = nod.findCollectionIndex(collection, element),
            item = collection[index];

        if (!item) {
            return;
        }

        // Call .dispose() if it exists
        if (typeof item.dispose === 'function') {
            item.dispose();
        }

        // Remove item
        collection.splice(index, 1);
    };

    return collection;
};

/**
 * makeListener
 *
 * Takes care of listening to changes to its element and fire them off as
 * events on the mediator for checkers to listen to.
 */
nod.makeListener = function (element, mediator, triggerEvents, configuration) {
    var id = nod.unique(),
        $element;

    function changed (event) {
        mediator.fire({
            id:     id,
            event:  event,
            type:   'change'
        });
    }

    element.addEventListener('input', changed, false);
    element.addEventListener('change', changed, false);
    element.addEventListener('blur', changed, false);

    if (configuration.jQuery) {
        $element = configuration.jQuery(element);

        $element.on('propertychange change click keyup input paste', changed);
    }

    if (triggerEvents) {
        triggerEvents = Array.isArray(triggerEvents)
            ? triggerEvents
            : [triggerEvents];

        triggerEvents.forEach(function (eventName) {
            element.addEventListener(eventName, changed, false);
        });
    }

    function dispose () {
        element.removeEventListener('input', changed, false);
        element.removeEventListener('change', changed, false);
        element.removeEventListener('blur', changed, false);

        if ($element) {
            $element.off();
        }

        if (triggerEvents) {
            triggerEvents.forEach(function (eventName) {
                element.removeEventListener(eventName, changed, false);
            });
        }
    }

    return {
        element:    element,
        dispose:    dispose,
        id:         id
    };
};

/**
 * makeChecker
 *
 * An "checker" communicates primarily with the mediator. It listens for input
 * changes (coming from listeners), performs its checks and fires off results
 * back to the mediator for checkHandlers to handle.
 *
 * The checker has a 1 to 1 relationship with an element, an listeners, and an
 * checkHandler; although they may communicate with other "sets" of listeners,
 * checkers and handlers.
 *
 * Checks are added, from the outside, and consists of a checkFunction (see
 * nod.checkFunctions) and a unique id.
 */
nod.makeChecker = function (element, mediator) {
    var checks = [];

    function subscribeTo (id) {
        mediator.subscribe(id, performCheck);
    }

    // Run every check function against the value of the element.
    function performCheck (options) {
        checks.forEach(function (check) {
            check(options || {});
        });
    }

    // Add a check function to the element. The result will be handed off to the
    // mediator (for checkHandlers to evaluate).
    function addCheck (checkFunction, id) {
        function callback (result) {
            mediator.fire({
                id: id,
                type: 'check',
                result: result,
                element: element,
                validate: checkFunction.validate
            });
        }

        checks.push(function (options) {
            // If element.value is undefined, then we might be dealing with
            // another type of element; like <div contenteditable='true'>
            var value = element.value === undefined
                ? element.innerHTML
                : element.value;

            options.element = element;

            checkFunction(callback, value, options);
        });
    }

    return {
        subscribeTo:    subscribeTo,
        addCheck:       addCheck,
        performCheck:   performCheck,
        element:        element
    };
};

/**
 * makeCheckHandler
 *
 * Handles checks coming in from the mediator and takes care of calculating the
 * state and error messages.
 *
 * The checkHandlers lives in one to one with the element parsed in, and listens
 * for (usually) multiple error checks.
 */
nod.makeCheckHandler = function (element, mediator, configuration) {
    var results     = {},
        id          = nod.unique();

    function subscribeTo (id, errorMessage, defaultStatus) {
        // Create a representation of the type of error in the results object.
        if (!results[id]) {
            results[id] = {
                status: defaultStatus || nod.constants.UNCHECKED,
                errorMessage: errorMessage
            };
        }

        // Subscribe to error id.
        mediator.subscribe(id, checkHandler);
    }

    function checkHandler (result) {
        results[result.id].status = result.result
            ? nod.constants.VALID
            : nod.constants.INVALID;

        notifyMediator();
    }

    // Runs through all results to see what kind of feedback to show the user.
    function notifyMediator () {
        var status = getStatus();

        // Event if might be valid we pass along an undefined errorMessage.
        mediator.fire({
            id:             id,
            type:           'result',
            result:         status.status,
            element:        element,
            errorMessage:   status.errorMessage
        });
    }

    function getStatus () {
        var status, errorMessage;

        for (var id in results) {
            status = results[id].status;

            if (results[id].status === nod.constants.INVALID) {
                errorMessage = results[id].errorMessage;
                break;
            }
        }

        return {
            status:        status,
            errorMessage:  errorMessage
        };
    }

    return {
        id:             id,
        subscribeTo:    subscribeTo,
        checkHandler:   checkHandler,
        getStatus:      getStatus,
        element:        element
    };
};

// Helper functions for `makeDomNode`.
nod.hasClass = function (className, el) {
    if (el.classList) {
        return el.classList.contains(className);
    } else {
        var regex = new RegExp('(\\s|^)' + className + '(\\s|$)');
        return !!el.className.match(regex);
    }
};

nod.removeClass = function (className, el) {
    if (el.classList) {
        el.classList.remove(className);
    } else if (nod.hasClass(className, el)) {
        var regex = new RegExp('(?:^|\\s)' + className + '(?!\\S)');
        el.className = el.className.replace(regex, '');
    }
};

nod.addClass = function (className, el) {
    if (el.classList) {
        el.classList.add(className);
    } else if (!nod.hasClass(className, el)) {
        el.className += ' ' + className;
    }
};

nod.getParent = function (element, configuration) {
    var klass = configuration.parentClass;

    if (klass) {
        klass = klass.charAt(0) === '.' ? klass.slice(1) : klass;
        return nod.findParentWithClass(element.parentNode, klass);
    } else {
        return element.parentNode;
    }
};

nod.findParentWithClass = function (parent, klass) {
    // Guard (only the `window` does not have a parent).
    if (!parent.parentNode) {
        return parent;
    }

    // Found it
    if (nod.hasClass(klass, parent)) {
        return parent;
    }

    // Try next parent (recursion)
    return nod.findParentWithClass(parent.parentNode, klass);
};

/**
 * makeDomNode
 *
 * This creates the error/success message behind the input element, as well as
 * takes care of updating classes and taking care of its own state.
 *
 * The dom node is owned by checkHandler, and has a one to one relationship with
 * both the checkHandler and the input element being checked.
 *
 */
nod.makeDomNode = function (element, mediator, configuration) {
    // A 'domNode' consists of two elements: a 'parent', and a 'span'. The
    // parent is given as a paremeter, while the span is created and added as a
    // child to the parent.
    var parent              = nod.getParent(element, configuration),
        _status             = nod.constants.UNCHECKED,
        pendingUpdate       = null,
        span                = document.createElement('span'),
        customSpan          = false;

    span.style.display = 'none';

    if (!configuration.noDom) {
        parent.appendChild(span);
    }

    // Updates the class of the parent to match the status of the element.
    function updateParent (status) {
        var successClass = configuration.successClass
                           || nod.classes.successClass,
            errorClass = configuration.errorClass
                         || nod.classes.errorClass;

        switch (status) {
        case nod.constants.VALID:
            nod.removeClass(errorClass, parent);
            nod.addClass(successClass, parent);
            break;

        case nod.constants.INVALID:
            nod.removeClass(successClass, parent);
            nod.addClass(errorClass, parent);
            break;
        }
    }

    // Updates the text and class according to the status.
    function updateSpan (status, errorMessage) {
        var successMessageClass = configuration.successMessageClass
                                  || nod.classes.successMessageClass,
          errorMessageClass   = configuration.errorMessageClass
                                || nod.classes.errorMessageClass;

        span.style.display = 'none';

        switch (status) {
        case nod.constants.VALID:
            nod.removeClass(errorMessageClass, span);
            nod.addClass(successMessageClass, span);

            if (configuration.successMessage) {
                span.textContent = configuration.successMessage;
                span.style.display = '';
            }

            break;

        case nod.constants.INVALID:
            nod.removeClass(successMessageClass, span);
            nod.addClass(errorMessageClass, span);
            span.textContent = errorMessage;
            span.style.display = '';
            break;
        }
    }

    function set (options) {
        var status              = options.result,
            errorMessage        = options.errorMessage;

        // If the dom is showing an invalid message, we want to update the dom
        // right away.
        if (_status === nod.constants.INVALID || configuration.delay === 0) {
            _status = status;
            updateParent(status);
            updateSpan(status, errorMessage);
        } else {
            // If the dom shows either an unchecked or a valid state we won't
            // rush to tell them they are wrong. Instead we use a method similar
            // to "debouncing" the update
            clearTimeout(pendingUpdate);

            pendingUpdate = setTimeout(function () {
                _status = status;
                updateParent(status);
                updateSpan(status, errorMessage);
                pendingUpdate = null;
            }, configuration.delay || nod.constants.DELAY);
        }
    }

    function subscribeTo (id) {
        mediator.subscribe(id, set);
    }

    function setMessageOptions (parentContainer, message) {
        if (parentContainer) {
            parent = nod.getElement(parentContainer);
        }

        if (message) {
            span.parentNode.removeChild(span);      // Remove old span.
            span = nod.getElement(message);         // Set the new one.
            customSpan = true;                      // So we won't delete it.
        }
    }

    function dispose () {
        // First remove any classes
        nod.removeClass(configuration.errorClass
                        || nod.classes.errorClass, parent);
        nod.removeClass(configuration.successClass
                        || nod.classes.successClass, parent);

        // Then we remove the span if it wasn't one that was set by the user.
        // If `noDom` was used, then there won't be any to remove.
        if (span.parentNode && !customSpan) {
            span.parentNode.removeChild(span);
        }
    }

    return {
        subscribeTo:        subscribeTo,
        element:            element,
        setMessageOptions:  setMessageOptions,
        dispose:            dispose,
        set:                set
    };
};

nod.makeEventEmitter = function (mediator) {
    var customEvent;

    function emit (options) {
        if (CustomEvent) {
            customEvent = new CustomEvent('nod.validation', {detail: options});

            options.element.dispatchEvent(customEvent);
        } else {
            var errorMsg = 'nod.validate tried to fire a custom event, but ' +
                           'the browser does not support CustomEvent\'s';

            throw Error(errorMsg);
        }
    }

    function subscribe (id) {
        mediator.subscribe(id, emit);
    }

    return {
        subscribe: subscribe
    };
};

/**
 * getElement
 *
 * Returns the first element targeted by the selector. (see `getElements`)
 */
nod.getElement = function (selector) {
    return nod.getElements(selector)[0];
};

/**
 * getElements
 *
 * Takes some sort of selector, and returns an array of element(s). The applied
 * selector can be one of:
 *
 * - Css type selector (e.g., ".foo")
 * - A jQuery element (e.g., $('.foo))
 * - A single raw dom element (e.g., document.getElementById('foo'))
 * - A list of raw dom element (e.g., $('.foo').get())
 */
nod.getElements = function (selector) {
    if (!selector) {
        return [];
    }

    // Normal css type selector is assumed
    if (typeof selector === 'string') {
        // If we have jQuery, then we use that to create a dom list for us.
        if (__webpack_provided_window_dot_jQuery) {
            return __webpack_provided_window_dot_jQuery(selector).get();
        }

        // If not, then we do it the manual way.
        var nodeList = document.querySelectorAll(selector);

        return [].map.call(nodeList, function (el) {
            return el;
        });
    }

    // if user gave us jQuery elements
    if (selector.jquery) {
        return selector.get();
    }

    // Raw DOM element
    if (selector.nodeType === 1) {
        return [selector];
    }

    if (Array.isArray(selector)) {
        var result = [];

        selector.forEach(function (sel) {
            var elements = nod.getElements(sel);

            result = result.concat(elements);
        });

        return result;
    }

    throw Error('Unknown type of elements in your `selector`: ' + selector);
};

nod.getCheckFunction = function (metric) {
    if (typeof metric.validate === 'function') {
        return metric.validate;
    }

    if (metric.validate instanceof RegExp) {
        return nod.checkFunctions.regexp(metric.validate);
    }

    var args   = metric.validate.split(':'),
        fnName = args.shift();

    if (fnName === 'one-of' || fnName === 'only-one-of' ||
        fnName === 'same-as' || fnName === 'some-radio') {
        args.push(metric.selector);
    }

    if (typeof nod.checkFunctions[fnName] === 'function') {
        return nod.checkFunctions[fnName].apply(null, args);
    } else {
        var errorMsg = 'Couldn\'t find your validator function "' +
                       fnName + '" for "' + metric.selector + '"';

        throw Error(errorMsg);
    }
};

// Collection of built-in check functions
nod.checkFunctions = {
    'presence': function () {
        return function presence (callback, value) {
            callback(value.length > 0);
        };
    },

    'exact': function (exactValue) {
        return function exact (callback, value) {
            callback(value === exactValue);
        };
    },

    'contains': function (containsValue) {
        return function contains (callback, value) {
            callback(value.indexOf(containsValue) > -1);
        };
    },

    'not': function (exactValue) {
        return function not (callback, value) {
            callback(value !== exactValue);
        };
    },

    'min-length': function (minimumLength) {
        return function minLength (callback, value) {
            callback(value.length >= minimumLength);
        };
    },

    'max-length': function (maximumLength) {
        return function maxLength (callback, value) {
            callback(value.length <= maximumLength);
        };
    },

    'exact-length': function (exactLen) {
        return function exactLength (callback, value) {
            callback(value.length === +exactLen);
        };
    },

    'between-length': function (minimumLength, maximumLength) {
        return function betweenLength (callback, value) {
            var aboveMinLength = value.length >= minimumLength,
                belowMaxLength = value.length <= maximumLength;

            callback(aboveMinLength && belowMaxLength);
        };
    },

    'max-number': function (maximumNumber) {
        return function maxNumber (callback, value) {
            callback(+value <= maximumNumber);
        };
    },

    'min-number': function (minimumNumber) {
        return function minNumber (callback, value) {
            callback(+value >= minimumNumber);
        };
    },

    'between-number': function (minimumNumber, maximumNumber) {
        return function betweenNumber (callback, value) {
            callback(+value >= minimumNumber && +value <= maximumNumber);
        };
    },

    'integer': function () {
        return function (callback, value) {
            callback(/^\s*\d+\s*$/.test(value));
        };
    },

    'float': function () {
        return function (callback, value) {
            callback(/^[-+]?[0-9]+(\.[0-9]+)?$/.test(value));
        };
    },

    'same-as': function (selector) {
        var sameAsElement = nod.getElement(selector);

        return function sameAs (callback, value, options) {
            // 'same-as' is special, in that if it is triggered by another field
            // (the one it should be similar to), and the field itself is empty,
            // then it bails out without a check. This is to avoid showing an
            // error message before the user has even reached the element.
            if (options &&
                options.event &&
                options.event.target &&
                options.event.target !== options.element &&
                value.length === 0) {
                return;
            }

            callback(value === sameAsElement.value);
        };
    },

    'one-of': function (selector) {
        var elements = nod.getElements(selector);

        function getValues () {
            return elements.reduce(function (memo, element) {
                return memo + '' + (element.value || '');
            }, '');
        }

        return function oneOf (callback) {
            callback(getValues().trim().length > 0);
        };
    },

    'only-one-of': function (selector) {
        var elements = nod.getElements(selector);

        return function onlyOneOf (callback, value) {
            var numOfValues = 0;

            elements.forEach(function (element) {
                if (element.value) {
                    numOfValues++;
                }
            });

            callback(numOfValues === 1);
        };
    },

    'checked': function () {
        return function checked (callback, value, options) {
            callback(options.element.checked);
        };
    },

    'some-radio': function (selector) {
        var radioElements = nod.getElements(selector);

        return function someRadio (callback, value, options) {
            var result = radioElements.reduce(function (memo, element) {
                return memo || element.checked;
            }, false);

            callback(result);
        };
    },

    'regexp': function (reg) {
        return function regExp (callback, value) {
            callback(reg.test(value));
        };
    },

    'email': function () {
        var RFC822 = /^([^\x00-\x20\x22\x28\x29\x2c\x2e\x3a-\x3c\x3e\x40\x5b-\x5d\x7f-\xff]+|\x22([^\x0d\x22\x5c\x80-\xff]|\x5c[\x00-\x7f])*\x22)(\x2e([^\x00-\x20\x22\x28\x29\x2c\x2e\x3a-\x3c\x3e\x40\x5b-\x5d\x7f-\xff]+|\x22([^\x0d\x22\x5c\x80-\xff]|\x5c[\x00-\x7f])*\x22))*\x40([^\x00-\x20\x22\x28\x29\x2c\x2e\x3a-\x3c\x3e\x40\x5b-\x5d\x7f-\xff]+|\x5b([^\x0d\x5b-\x5d\x80-\xff]|\x5c[\x00-\x7f])*\x5d)(\x2e([^\x00-\x20\x22\x28\x29\x2c\x2e\x3a-\x3c\x3e\x40\x5b-\x5d\x7f-\xff]+|\x5b([^\x0d\x5b-\x5d\x80-\xff]|\x5c[\x00-\x7f])*\x5d))*$/;

        return function email (callback, value) {
            callback(RFC822.test(value));
        };
    }
};

// CustomEvent polyfill for older IE versions. Taken from
// github.com/d4tocchini/customevent-polyfill/blob/master/CustomEvent.js
try {
    new CustomEvent("test");
} catch (e) {
    var CustomEvent = function (event, params) {
        var evt;
        params = params || {
            bubbles: false,
            cancelable: false,
            detail: undefined
        };

        evt = document.createEvent("CustomEvent");
        evt.initCustomEvent(event,
                            params.bubbles,
                            params.cancelable,
                            params.detail);
        return evt;
    };

    CustomEvent.prototype = window.Event.prototype;
    window.CustomEvent = CustomEvent;
}

// Safely export nod.
if ( true && module.exports) {
    module.exports = nod;
}


/***/ }),

/***/ "./node_modules/node-fetch/browser.js":
/*!********************************************!*\
  !*** ./node_modules/node-fetch/browser.js ***!
  \********************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";


// ref: https://github.com/tc39/proposal-global
var getGlobal = function () {
	// the only reliable means to get the global object is
	// `Function('return this')()`
	// However, this causes CSP violations in Chrome apps.
	if (typeof self !== 'undefined') { return self; }
	if (typeof window !== 'undefined') { return window; }
	if (typeof __webpack_require__.g !== 'undefined') { return __webpack_require__.g; }
	throw new Error('unable to locate global object');
}

var globalObject = getGlobal();

module.exports = exports = globalObject.fetch;

// Needed for TypeScript and Webpack.
if (globalObject.fetch) {
	exports["default"] = globalObject.fetch.bind(globalObject);
}

exports.Headers = globalObject.Headers;
exports.Request = globalObject.Request;
exports.Response = globalObject.Response;


/***/ }),

/***/ "./node_modules/object-inspect/index.js":
/*!**********************************************!*\
  !*** ./node_modules/object-inspect/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var hasMap = typeof Map === 'function' && Map.prototype;
var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;
var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;
var mapForEach = hasMap && Map.prototype.forEach;
var hasSet = typeof Set === 'function' && Set.prototype;
var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;
var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;
var setForEach = hasSet && Set.prototype.forEach;
var hasWeakMap = typeof WeakMap === 'function' && WeakMap.prototype;
var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
var hasWeakSet = typeof WeakSet === 'function' && WeakSet.prototype;
var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
var hasWeakRef = typeof WeakRef === 'function' && WeakRef.prototype;
var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
var booleanValueOf = Boolean.prototype.valueOf;
var objectToString = Object.prototype.toString;
var functionToString = Function.prototype.toString;
var $match = String.prototype.match;
var $slice = String.prototype.slice;
var $replace = String.prototype.replace;
var $toUpperCase = String.prototype.toUpperCase;
var $toLowerCase = String.prototype.toLowerCase;
var $test = RegExp.prototype.test;
var $concat = Array.prototype.concat;
var $join = Array.prototype.join;
var $arrSlice = Array.prototype.slice;
var $floor = Math.floor;
var bigIntValueOf = typeof BigInt === 'function' ? BigInt.prototype.valueOf : null;
var gOPS = Object.getOwnPropertySymbols;
var symToString = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? Symbol.prototype.toString : null;
var hasShammedSymbols = typeof Symbol === 'function' && typeof Symbol.iterator === 'object';
// ie, `has-tostringtag/shams
var toStringTag = typeof Symbol === 'function' && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? 'object' : 'symbol')
    ? Symbol.toStringTag
    : null;
var isEnumerable = Object.prototype.propertyIsEnumerable;

var gPO = (typeof Reflect === 'function' ? Reflect.getPrototypeOf : Object.getPrototypeOf) || (
    [].__proto__ === Array.prototype // eslint-disable-line no-proto
        ? function (O) {
            return O.__proto__; // eslint-disable-line no-proto
        }
        : null
);

function addNumericSeparator(num, str) {
    if (
        num === Infinity
        || num === -Infinity
        || num !== num
        || (num && num > -1000 && num < 1000)
        || $test.call(/e/, str)
    ) {
        return str;
    }
    var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
    if (typeof num === 'number') {
        var int = num < 0 ? -$floor(-num) : $floor(num); // trunc(num)
        if (int !== num) {
            var intStr = String(int);
            var dec = $slice.call(str, intStr.length + 1);
            return $replace.call(intStr, sepRegex, '$&_') + '.' + $replace.call($replace.call(dec, /([0-9]{3})/g, '$&_'), /_$/, '');
        }
    }
    return $replace.call(str, sepRegex, '$&_');
}

var utilInspect = __webpack_require__(/*! ./util.inspect */ "?4f7e");
var inspectCustom = utilInspect.custom;
var inspectSymbol = isSymbol(inspectCustom) ? inspectCustom : null;

module.exports = function inspect_(obj, options, depth, seen) {
    var opts = options || {};

    if (has(opts, 'quoteStyle') && (opts.quoteStyle !== 'single' && opts.quoteStyle !== 'double')) {
        throw new TypeError('option "quoteStyle" must be "single" or "double"');
    }
    if (
        has(opts, 'maxStringLength') && (typeof opts.maxStringLength === 'number'
            ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity
            : opts.maxStringLength !== null
        )
    ) {
        throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
    }
    var customInspect = has(opts, 'customInspect') ? opts.customInspect : true;
    if (typeof customInspect !== 'boolean' && customInspect !== 'symbol') {
        throw new TypeError('option "customInspect", if provided, must be `true`, `false`, or `\'symbol\'`');
    }

    if (
        has(opts, 'indent')
        && opts.indent !== null
        && opts.indent !== '\t'
        && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)
    ) {
        throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
    }
    if (has(opts, 'numericSeparator') && typeof opts.numericSeparator !== 'boolean') {
        throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
    }
    var numericSeparator = opts.numericSeparator;

    if (typeof obj === 'undefined') {
        return 'undefined';
    }
    if (obj === null) {
        return 'null';
    }
    if (typeof obj === 'boolean') {
        return obj ? 'true' : 'false';
    }

    if (typeof obj === 'string') {
        return inspectString(obj, opts);
    }
    if (typeof obj === 'number') {
        if (obj === 0) {
            return Infinity / obj > 0 ? '0' : '-0';
        }
        var str = String(obj);
        return numericSeparator ? addNumericSeparator(obj, str) : str;
    }
    if (typeof obj === 'bigint') {
        var bigIntStr = String(obj) + 'n';
        return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;
    }

    var maxDepth = typeof opts.depth === 'undefined' ? 5 : opts.depth;
    if (typeof depth === 'undefined') { depth = 0; }
    if (depth >= maxDepth && maxDepth > 0 && typeof obj === 'object') {
        return isArray(obj) ? '[Array]' : '[Object]';
    }

    var indent = getIndent(opts, depth);

    if (typeof seen === 'undefined') {
        seen = [];
    } else if (indexOf(seen, obj) >= 0) {
        return '[Circular]';
    }

    function inspect(value, from, noIndent) {
        if (from) {
            seen = $arrSlice.call(seen);
            seen.push(from);
        }
        if (noIndent) {
            var newOpts = {
                depth: opts.depth
            };
            if (has(opts, 'quoteStyle')) {
                newOpts.quoteStyle = opts.quoteStyle;
            }
            return inspect_(value, newOpts, depth + 1, seen);
        }
        return inspect_(value, opts, depth + 1, seen);
    }

    if (typeof obj === 'function' && !isRegExp(obj)) { // in older engines, regexes are callable
        var name = nameOf(obj);
        var keys = arrObjKeys(obj, inspect);
        return '[Function' + (name ? ': ' + name : ' (anonymous)') + ']' + (keys.length > 0 ? ' { ' + $join.call(keys, ', ') + ' }' : '');
    }
    if (isSymbol(obj)) {
        var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\(.*\))_[^)]*$/, '$1') : symToString.call(obj);
        return typeof obj === 'object' && !hasShammedSymbols ? markBoxed(symString) : symString;
    }
    if (isElement(obj)) {
        var s = '<' + $toLowerCase.call(String(obj.nodeName));
        var attrs = obj.attributes || [];
        for (var i = 0; i < attrs.length; i++) {
            s += ' ' + attrs[i].name + '=' + wrapQuotes(quote(attrs[i].value), 'double', opts);
        }
        s += '>';
        if (obj.childNodes && obj.childNodes.length) { s += '...'; }
        s += '</' + $toLowerCase.call(String(obj.nodeName)) + '>';
        return s;
    }
    if (isArray(obj)) {
        if (obj.length === 0) { return '[]'; }
        var xs = arrObjKeys(obj, inspect);
        if (indent && !singleLineValues(xs)) {
            return '[' + indentedJoin(xs, indent) + ']';
        }
        return '[ ' + $join.call(xs, ', ') + ' ]';
    }
    if (isError(obj)) {
        var parts = arrObjKeys(obj, inspect);
        if (!('cause' in Error.prototype) && 'cause' in obj && !isEnumerable.call(obj, 'cause')) {
            return '{ [' + String(obj) + '] ' + $join.call($concat.call('[cause]: ' + inspect(obj.cause), parts), ', ') + ' }';
        }
        if (parts.length === 0) { return '[' + String(obj) + ']'; }
        return '{ [' + String(obj) + '] ' + $join.call(parts, ', ') + ' }';
    }
    if (typeof obj === 'object' && customInspect) {
        if (inspectSymbol && typeof obj[inspectSymbol] === 'function' && utilInspect) {
            return utilInspect(obj, { depth: maxDepth - depth });
        } else if (customInspect !== 'symbol' && typeof obj.inspect === 'function') {
            return obj.inspect();
        }
    }
    if (isMap(obj)) {
        var mapParts = [];
        if (mapForEach) {
            mapForEach.call(obj, function (value, key) {
                mapParts.push(inspect(key, obj, true) + ' => ' + inspect(value, obj));
            });
        }
        return collectionOf('Map', mapSize.call(obj), mapParts, indent);
    }
    if (isSet(obj)) {
        var setParts = [];
        if (setForEach) {
            setForEach.call(obj, function (value) {
                setParts.push(inspect(value, obj));
            });
        }
        return collectionOf('Set', setSize.call(obj), setParts, indent);
    }
    if (isWeakMap(obj)) {
        return weakCollectionOf('WeakMap');
    }
    if (isWeakSet(obj)) {
        return weakCollectionOf('WeakSet');
    }
    if (isWeakRef(obj)) {
        return weakCollectionOf('WeakRef');
    }
    if (isNumber(obj)) {
        return markBoxed(inspect(Number(obj)));
    }
    if (isBigInt(obj)) {
        return markBoxed(inspect(bigIntValueOf.call(obj)));
    }
    if (isBoolean(obj)) {
        return markBoxed(booleanValueOf.call(obj));
    }
    if (isString(obj)) {
        return markBoxed(inspect(String(obj)));
    }
    // note: in IE 8, sometimes `global !== window` but both are the prototypes of each other
    /* eslint-env browser */
    if (typeof window !== 'undefined' && obj === window) {
        return '{ [object Window] }';
    }
    if (
        (typeof globalThis !== 'undefined' && obj === globalThis)
        || (typeof __webpack_require__.g !== 'undefined' && obj === __webpack_require__.g)
    ) {
        return '{ [object globalThis] }';
    }
    if (!isDate(obj) && !isRegExp(obj)) {
        var ys = arrObjKeys(obj, inspect);
        var isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
        var protoTag = obj instanceof Object ? '' : 'null prototype';
        var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice.call(toStr(obj), 8, -1) : protoTag ? 'Object' : '';
        var constructorTag = isPlainObject || typeof obj.constructor !== 'function' ? '' : obj.constructor.name ? obj.constructor.name + ' ' : '';
        var tag = constructorTag + (stringTag || protoTag ? '[' + $join.call($concat.call([], stringTag || [], protoTag || []), ': ') + '] ' : '');
        if (ys.length === 0) { return tag + '{}'; }
        if (indent) {
            return tag + '{' + indentedJoin(ys, indent) + '}';
        }
        return tag + '{ ' + $join.call(ys, ', ') + ' }';
    }
    return String(obj);
};

function wrapQuotes(s, defaultStyle, opts) {
    var quoteChar = (opts.quoteStyle || defaultStyle) === 'double' ? '"' : "'";
    return quoteChar + s + quoteChar;
}

function quote(s) {
    return $replace.call(String(s), /"/g, '&quot;');
}

function isArray(obj) { return toStr(obj) === '[object Array]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
function isDate(obj) { return toStr(obj) === '[object Date]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
function isRegExp(obj) { return toStr(obj) === '[object RegExp]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
function isError(obj) { return toStr(obj) === '[object Error]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
function isString(obj) { return toStr(obj) === '[object String]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
function isNumber(obj) { return toStr(obj) === '[object Number]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
function isBoolean(obj) { return toStr(obj) === '[object Boolean]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }

// Symbol and BigInt do have Symbol.toStringTag by spec, so that can't be used to eliminate false positives
function isSymbol(obj) {
    if (hasShammedSymbols) {
        return obj && typeof obj === 'object' && obj instanceof Symbol;
    }
    if (typeof obj === 'symbol') {
        return true;
    }
    if (!obj || typeof obj !== 'object' || !symToString) {
        return false;
    }
    try {
        symToString.call(obj);
        return true;
    } catch (e) {}
    return false;
}

function isBigInt(obj) {
    if (!obj || typeof obj !== 'object' || !bigIntValueOf) {
        return false;
    }
    try {
        bigIntValueOf.call(obj);
        return true;
    } catch (e) {}
    return false;
}

var hasOwn = Object.prototype.hasOwnProperty || function (key) { return key in this; };
function has(obj, key) {
    return hasOwn.call(obj, key);
}

function toStr(obj) {
    return objectToString.call(obj);
}

function nameOf(f) {
    if (f.name) { return f.name; }
    var m = $match.call(functionToString.call(f), /^function\s*([\w$]+)/);
    if (m) { return m[1]; }
    return null;
}

function indexOf(xs, x) {
    if (xs.indexOf) { return xs.indexOf(x); }
    for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) { return i; }
    }
    return -1;
}

function isMap(x) {
    if (!mapSize || !x || typeof x !== 'object') {
        return false;
    }
    try {
        mapSize.call(x);
        try {
            setSize.call(x);
        } catch (s) {
            return true;
        }
        return x instanceof Map; // core-js workaround, pre-v2.5.0
    } catch (e) {}
    return false;
}

function isWeakMap(x) {
    if (!weakMapHas || !x || typeof x !== 'object') {
        return false;
    }
    try {
        weakMapHas.call(x, weakMapHas);
        try {
            weakSetHas.call(x, weakSetHas);
        } catch (s) {
            return true;
        }
        return x instanceof WeakMap; // core-js workaround, pre-v2.5.0
    } catch (e) {}
    return false;
}

function isWeakRef(x) {
    if (!weakRefDeref || !x || typeof x !== 'object') {
        return false;
    }
    try {
        weakRefDeref.call(x);
        return true;
    } catch (e) {}
    return false;
}

function isSet(x) {
    if (!setSize || !x || typeof x !== 'object') {
        return false;
    }
    try {
        setSize.call(x);
        try {
            mapSize.call(x);
        } catch (m) {
            return true;
        }
        return x instanceof Set; // core-js workaround, pre-v2.5.0
    } catch (e) {}
    return false;
}

function isWeakSet(x) {
    if (!weakSetHas || !x || typeof x !== 'object') {
        return false;
    }
    try {
        weakSetHas.call(x, weakSetHas);
        try {
            weakMapHas.call(x, weakMapHas);
        } catch (s) {
            return true;
        }
        return x instanceof WeakSet; // core-js workaround, pre-v2.5.0
    } catch (e) {}
    return false;
}

function isElement(x) {
    if (!x || typeof x !== 'object') { return false; }
    if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {
        return true;
    }
    return typeof x.nodeName === 'string' && typeof x.getAttribute === 'function';
}

function inspectString(str, opts) {
    if (str.length > opts.maxStringLength) {
        var remaining = str.length - opts.maxStringLength;
        var trailer = '... ' + remaining + ' more character' + (remaining > 1 ? 's' : '');
        return inspectString($slice.call(str, 0, opts.maxStringLength), opts) + trailer;
    }
    // eslint-disable-next-line no-control-regex
    var s = $replace.call($replace.call(str, /(['\\])/g, '\\$1'), /[\x00-\x1f]/g, lowbyte);
    return wrapQuotes(s, 'single', opts);
}

function lowbyte(c) {
    var n = c.charCodeAt(0);
    var x = {
        8: 'b',
        9: 't',
        10: 'n',
        12: 'f',
        13: 'r'
    }[n];
    if (x) { return '\\' + x; }
    return '\\x' + (n < 0x10 ? '0' : '') + $toUpperCase.call(n.toString(16));
}

function markBoxed(str) {
    return 'Object(' + str + ')';
}

function weakCollectionOf(type) {
    return type + ' { ? }';
}

function collectionOf(type, size, entries, indent) {
    var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ', ');
    return type + ' (' + size + ') {' + joinedEntries + '}';
}

function singleLineValues(xs) {
    for (var i = 0; i < xs.length; i++) {
        if (indexOf(xs[i], '\n') >= 0) {
            return false;
        }
    }
    return true;
}

function getIndent(opts, depth) {
    var baseIndent;
    if (opts.indent === '\t') {
        baseIndent = '\t';
    } else if (typeof opts.indent === 'number' && opts.indent > 0) {
        baseIndent = $join.call(Array(opts.indent + 1), ' ');
    } else {
        return null;
    }
    return {
        base: baseIndent,
        prev: $join.call(Array(depth + 1), baseIndent)
    };
}

function indentedJoin(xs, indent) {
    if (xs.length === 0) { return ''; }
    var lineJoiner = '\n' + indent.prev + indent.base;
    return lineJoiner + $join.call(xs, ',' + lineJoiner) + '\n' + indent.prev;
}

function arrObjKeys(obj, inspect) {
    var isArr = isArray(obj);
    var xs = [];
    if (isArr) {
        xs.length = obj.length;
        for (var i = 0; i < obj.length; i++) {
            xs[i] = has(obj, i) ? inspect(obj[i], obj) : '';
        }
    }
    var syms = typeof gOPS === 'function' ? gOPS(obj) : [];
    var symMap;
    if (hasShammedSymbols) {
        symMap = {};
        for (var k = 0; k < syms.length; k++) {
            symMap['$' + syms[k]] = syms[k];
        }
    }

    for (var key in obj) { // eslint-disable-line no-restricted-syntax
        if (!has(obj, key)) { continue; } // eslint-disable-line no-restricted-syntax, no-continue
        if (isArr && String(Number(key)) === key && key < obj.length) { continue; } // eslint-disable-line no-restricted-syntax, no-continue
        if (hasShammedSymbols && symMap['$' + key] instanceof Symbol) {
            // this is to prevent shammed Symbols, which are stored as strings, from being included in the string key section
            continue; // eslint-disable-line no-restricted-syntax, no-continue
        } else if ($test.call(/[^\w$]/, key)) {
            xs.push(inspect(key, obj) + ': ' + inspect(obj[key], obj));
        } else {
            xs.push(key + ': ' + inspect(obj[key], obj));
        }
    }
    if (typeof gOPS === 'function') {
        for (var j = 0; j < syms.length; j++) {
            if (isEnumerable.call(obj, syms[j])) {
                xs.push('[' + inspect(syms[j]) + ']: ' + inspect(obj[syms[j]], obj));
            }
        }
    }
    return xs;
}


/***/ }),

/***/ "./node_modules/qs/lib/formats.js":
/*!****************************************!*\
  !*** ./node_modules/qs/lib/formats.js ***!
  \****************************************/
/***/ ((module) => {

"use strict";


var replace = String.prototype.replace;
var percentTwenties = /%20/g;

var Format = {
    RFC1738: 'RFC1738',
    RFC3986: 'RFC3986'
};

module.exports = {
    'default': Format.RFC3986,
    formatters: {
        RFC1738: function (value) {
            return replace.call(value, percentTwenties, '+');
        },
        RFC3986: function (value) {
            return String(value);
        }
    },
    RFC1738: Format.RFC1738,
    RFC3986: Format.RFC3986
};


/***/ }),

/***/ "./node_modules/qs/lib/index.js":
/*!**************************************!*\
  !*** ./node_modules/qs/lib/index.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var stringify = __webpack_require__(/*! ./stringify */ "./node_modules/qs/lib/stringify.js");
var parse = __webpack_require__(/*! ./parse */ "./node_modules/qs/lib/parse.js");
var formats = __webpack_require__(/*! ./formats */ "./node_modules/qs/lib/formats.js");

module.exports = {
    formats: formats,
    parse: parse,
    stringify: stringify
};


/***/ }),

/***/ "./node_modules/qs/lib/parse.js":
/*!**************************************!*\
  !*** ./node_modules/qs/lib/parse.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./utils */ "./node_modules/qs/lib/utils.js");

var has = Object.prototype.hasOwnProperty;
var isArray = Array.isArray;

var defaults = {
    allowDots: false,
    allowEmptyArrays: false,
    allowPrototypes: false,
    allowSparse: false,
    arrayLimit: 20,
    charset: 'utf-8',
    charsetSentinel: false,
    comma: false,
    decodeDotInKeys: false,
    decoder: utils.decode,
    delimiter: '&',
    depth: 5,
    duplicates: 'combine',
    ignoreQueryPrefix: false,
    interpretNumericEntities: false,
    parameterLimit: 1000,
    parseArrays: true,
    plainObjects: false,
    strictDepth: false,
    strictNullHandling: false
};

var interpretNumericEntities = function (str) {
    return str.replace(/&#(\d+);/g, function ($0, numberStr) {
        return String.fromCharCode(parseInt(numberStr, 10));
    });
};

var parseArrayValue = function (val, options) {
    if (val && typeof val === 'string' && options.comma && val.indexOf(',') > -1) {
        return val.split(',');
    }

    return val;
};

// This is what browsers will submit when the ✓ character occurs in an
// application/x-www-form-urlencoded body and the encoding of the page containing
// the form is iso-8859-1, or when the submitted form has an accept-charset
// attribute of iso-8859-1. Presumably also with other charsets that do not contain
// the ✓ character, such as us-ascii.
var isoSentinel = 'utf8=%26%2310003%3B'; // encodeURIComponent('&#10003;')

// These are the percent-encoded utf-8 octets representing a checkmark, indicating that the request actually is utf-8 encoded.
var charsetSentinel = 'utf8=%E2%9C%93'; // encodeURIComponent('✓')

var parseValues = function parseQueryStringValues(str, options) {
    var obj = { __proto__: null };

    var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, '') : str;
    cleanStr = cleanStr.replace(/%5B/gi, '[').replace(/%5D/gi, ']');
    var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;
    var parts = cleanStr.split(options.delimiter, limit);
    var skipIndex = -1; // Keep track of where the utf8 sentinel was found
    var i;

    var charset = options.charset;
    if (options.charsetSentinel) {
        for (i = 0; i < parts.length; ++i) {
            if (parts[i].indexOf('utf8=') === 0) {
                if (parts[i] === charsetSentinel) {
                    charset = 'utf-8';
                } else if (parts[i] === isoSentinel) {
                    charset = 'iso-8859-1';
                }
                skipIndex = i;
                i = parts.length; // The eslint settings do not allow break;
            }
        }
    }

    for (i = 0; i < parts.length; ++i) {
        if (i === skipIndex) {
            continue;
        }
        var part = parts[i];

        var bracketEqualsPos = part.indexOf(']=');
        var pos = bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1;

        var key, val;
        if (pos === -1) {
            key = options.decoder(part, defaults.decoder, charset, 'key');
            val = options.strictNullHandling ? null : '';
        } else {
            key = options.decoder(part.slice(0, pos), defaults.decoder, charset, 'key');
            val = utils.maybeMap(
                parseArrayValue(part.slice(pos + 1), options),
                function (encodedVal) {
                    return options.decoder(encodedVal, defaults.decoder, charset, 'value');
                }
            );
        }

        if (val && options.interpretNumericEntities && charset === 'iso-8859-1') {
            val = interpretNumericEntities(val);
        }

        if (part.indexOf('[]=') > -1) {
            val = isArray(val) ? [val] : val;
        }

        var existing = has.call(obj, key);
        if (existing && options.duplicates === 'combine') {
            obj[key] = utils.combine(obj[key], val);
        } else if (!existing || options.duplicates === 'last') {
            obj[key] = val;
        }
    }

    return obj;
};

var parseObject = function (chain, val, options, valuesParsed) {
    var leaf = valuesParsed ? val : parseArrayValue(val, options);

    for (var i = chain.length - 1; i >= 0; --i) {
        var obj;
        var root = chain[i];

        if (root === '[]' && options.parseArrays) {
            obj = options.allowEmptyArrays && (leaf === '' || (options.strictNullHandling && leaf === null))
                ? []
                : [].concat(leaf);
        } else {
            obj = options.plainObjects ? Object.create(null) : {};
            var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;
            var decodedRoot = options.decodeDotInKeys ? cleanRoot.replace(/%2E/g, '.') : cleanRoot;
            var index = parseInt(decodedRoot, 10);
            if (!options.parseArrays && decodedRoot === '') {
                obj = { 0: leaf };
            } else if (
                !isNaN(index)
                && root !== decodedRoot
                && String(index) === decodedRoot
                && index >= 0
                && (options.parseArrays && index <= options.arrayLimit)
            ) {
                obj = [];
                obj[index] = leaf;
            } else if (decodedRoot !== '__proto__') {
                obj[decodedRoot] = leaf;
            }
        }

        leaf = obj;
    }

    return leaf;
};

var parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {
    if (!givenKey) {
        return;
    }

    // Transform dot notation to bracket notation
    var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, '[$1]') : givenKey;

    // The regex chunks

    var brackets = /(\[[^[\]]*])/;
    var child = /(\[[^[\]]*])/g;

    // Get the parent

    var segment = options.depth > 0 && brackets.exec(key);
    var parent = segment ? key.slice(0, segment.index) : key;

    // Stash the parent if it exists

    var keys = [];
    if (parent) {
        // If we aren't using plain objects, optionally prefix keys that would overwrite object prototype properties
        if (!options.plainObjects && has.call(Object.prototype, parent)) {
            if (!options.allowPrototypes) {
                return;
            }
        }

        keys.push(parent);
    }

    // Loop through children appending to the array until we hit depth

    var i = 0;
    while (options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth) {
        i += 1;
        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {
            if (!options.allowPrototypes) {
                return;
            }
        }
        keys.push(segment[1]);
    }

    // If there's a remainder, check strictDepth option for throw, else just add whatever is left

    if (segment) {
        if (options.strictDepth === true) {
            throw new RangeError('Input depth exceeded depth option of ' + options.depth + ' and strictDepth is true');
        }
        keys.push('[' + key.slice(segment.index) + ']');
    }

    return parseObject(keys, val, options, valuesParsed);
};

var normalizeParseOptions = function normalizeParseOptions(opts) {
    if (!opts) {
        return defaults;
    }

    if (typeof opts.allowEmptyArrays !== 'undefined' && typeof opts.allowEmptyArrays !== 'boolean') {
        throw new TypeError('`allowEmptyArrays` option can only be `true` or `false`, when provided');
    }

    if (typeof opts.decodeDotInKeys !== 'undefined' && typeof opts.decodeDotInKeys !== 'boolean') {
        throw new TypeError('`decodeDotInKeys` option can only be `true` or `false`, when provided');
    }

    if (opts.decoder !== null && typeof opts.decoder !== 'undefined' && typeof opts.decoder !== 'function') {
        throw new TypeError('Decoder has to be a function.');
    }

    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {
        throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');
    }
    var charset = typeof opts.charset === 'undefined' ? defaults.charset : opts.charset;

    var duplicates = typeof opts.duplicates === 'undefined' ? defaults.duplicates : opts.duplicates;

    if (duplicates !== 'combine' && duplicates !== 'first' && duplicates !== 'last') {
        throw new TypeError('The duplicates option must be either combine, first, or last');
    }

    var allowDots = typeof opts.allowDots === 'undefined' ? opts.decodeDotInKeys === true ? true : defaults.allowDots : !!opts.allowDots;

    return {
        allowDots: allowDots,
        allowEmptyArrays: typeof opts.allowEmptyArrays === 'boolean' ? !!opts.allowEmptyArrays : defaults.allowEmptyArrays,
        allowPrototypes: typeof opts.allowPrototypes === 'boolean' ? opts.allowPrototypes : defaults.allowPrototypes,
        allowSparse: typeof opts.allowSparse === 'boolean' ? opts.allowSparse : defaults.allowSparse,
        arrayLimit: typeof opts.arrayLimit === 'number' ? opts.arrayLimit : defaults.arrayLimit,
        charset: charset,
        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,
        comma: typeof opts.comma === 'boolean' ? opts.comma : defaults.comma,
        decodeDotInKeys: typeof opts.decodeDotInKeys === 'boolean' ? opts.decodeDotInKeys : defaults.decodeDotInKeys,
        decoder: typeof opts.decoder === 'function' ? opts.decoder : defaults.decoder,
        delimiter: typeof opts.delimiter === 'string' || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,
        // eslint-disable-next-line no-implicit-coercion, no-extra-parens
        depth: (typeof opts.depth === 'number' || opts.depth === false) ? +opts.depth : defaults.depth,
        duplicates: duplicates,
        ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
        interpretNumericEntities: typeof opts.interpretNumericEntities === 'boolean' ? opts.interpretNumericEntities : defaults.interpretNumericEntities,
        parameterLimit: typeof opts.parameterLimit === 'number' ? opts.parameterLimit : defaults.parameterLimit,
        parseArrays: opts.parseArrays !== false,
        plainObjects: typeof opts.plainObjects === 'boolean' ? opts.plainObjects : defaults.plainObjects,
        strictDepth: typeof opts.strictDepth === 'boolean' ? !!opts.strictDepth : defaults.strictDepth,
        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling
    };
};

module.exports = function (str, opts) {
    var options = normalizeParseOptions(opts);

    if (str === '' || str === null || typeof str === 'undefined') {
        return options.plainObjects ? Object.create(null) : {};
    }

    var tempObj = typeof str === 'string' ? parseValues(str, options) : str;
    var obj = options.plainObjects ? Object.create(null) : {};

    // Iterate over the keys and setup the new object

    var keys = Object.keys(tempObj);
    for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];
        var newObj = parseKeys(key, tempObj[key], options, typeof str === 'string');
        obj = utils.merge(obj, newObj, options);
    }

    if (options.allowSparse === true) {
        return obj;
    }

    return utils.compact(obj);
};


/***/ }),

/***/ "./node_modules/qs/lib/stringify.js":
/*!******************************************!*\
  !*** ./node_modules/qs/lib/stringify.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var getSideChannel = __webpack_require__(/*! side-channel */ "./node_modules/side-channel/index.js");
var utils = __webpack_require__(/*! ./utils */ "./node_modules/qs/lib/utils.js");
var formats = __webpack_require__(/*! ./formats */ "./node_modules/qs/lib/formats.js");
var has = Object.prototype.hasOwnProperty;

var arrayPrefixGenerators = {
    brackets: function brackets(prefix) {
        return prefix + '[]';
    },
    comma: 'comma',
    indices: function indices(prefix, key) {
        return prefix + '[' + key + ']';
    },
    repeat: function repeat(prefix) {
        return prefix;
    }
};

var isArray = Array.isArray;
var push = Array.prototype.push;
var pushToArray = function (arr, valueOrArray) {
    push.apply(arr, isArray(valueOrArray) ? valueOrArray : [valueOrArray]);
};

var toISO = Date.prototype.toISOString;

var defaultFormat = formats['default'];
var defaults = {
    addQueryPrefix: false,
    allowDots: false,
    allowEmptyArrays: false,
    arrayFormat: 'indices',
    charset: 'utf-8',
    charsetSentinel: false,
    delimiter: '&',
    encode: true,
    encodeDotInKeys: false,
    encoder: utils.encode,
    encodeValuesOnly: false,
    format: defaultFormat,
    formatter: formats.formatters[defaultFormat],
    // deprecated
    indices: false,
    serializeDate: function serializeDate(date) {
        return toISO.call(date);
    },
    skipNulls: false,
    strictNullHandling: false
};

var isNonNullishPrimitive = function isNonNullishPrimitive(v) {
    return typeof v === 'string'
        || typeof v === 'number'
        || typeof v === 'boolean'
        || typeof v === 'symbol'
        || typeof v === 'bigint';
};

var sentinel = {};

var stringify = function stringify(
    object,
    prefix,
    generateArrayPrefix,
    commaRoundTrip,
    allowEmptyArrays,
    strictNullHandling,
    skipNulls,
    encodeDotInKeys,
    encoder,
    filter,
    sort,
    allowDots,
    serializeDate,
    format,
    formatter,
    encodeValuesOnly,
    charset,
    sideChannel
) {
    var obj = object;

    var tmpSc = sideChannel;
    var step = 0;
    var findFlag = false;
    while ((tmpSc = tmpSc.get(sentinel)) !== void undefined && !findFlag) {
        // Where object last appeared in the ref tree
        var pos = tmpSc.get(object);
        step += 1;
        if (typeof pos !== 'undefined') {
            if (pos === step) {
                throw new RangeError('Cyclic object value');
            } else {
                findFlag = true; // Break while
            }
        }
        if (typeof tmpSc.get(sentinel) === 'undefined') {
            step = 0;
        }
    }

    if (typeof filter === 'function') {
        obj = filter(prefix, obj);
    } else if (obj instanceof Date) {
        obj = serializeDate(obj);
    } else if (generateArrayPrefix === 'comma' && isArray(obj)) {
        obj = utils.maybeMap(obj, function (value) {
            if (value instanceof Date) {
                return serializeDate(value);
            }
            return value;
        });
    }

    if (obj === null) {
        if (strictNullHandling) {
            return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset, 'key', format) : prefix;
        }

        obj = '';
    }

    if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {
        if (encoder) {
            var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, 'key', format);
            return [formatter(keyValue) + '=' + formatter(encoder(obj, defaults.encoder, charset, 'value', format))];
        }
        return [formatter(prefix) + '=' + formatter(String(obj))];
    }

    var values = [];

    if (typeof obj === 'undefined') {
        return values;
    }

    var objKeys;
    if (generateArrayPrefix === 'comma' && isArray(obj)) {
        // we need to join elements in
        if (encodeValuesOnly && encoder) {
            obj = utils.maybeMap(obj, encoder);
        }
        objKeys = [{ value: obj.length > 0 ? obj.join(',') || null : void undefined }];
    } else if (isArray(filter)) {
        objKeys = filter;
    } else {
        var keys = Object.keys(obj);
        objKeys = sort ? keys.sort(sort) : keys;
    }

    var encodedPrefix = encodeDotInKeys ? prefix.replace(/\./g, '%2E') : prefix;

    var adjustedPrefix = commaRoundTrip && isArray(obj) && obj.length === 1 ? encodedPrefix + '[]' : encodedPrefix;

    if (allowEmptyArrays && isArray(obj) && obj.length === 0) {
        return adjustedPrefix + '[]';
    }

    for (var j = 0; j < objKeys.length; ++j) {
        var key = objKeys[j];
        var value = typeof key === 'object' && typeof key.value !== 'undefined' ? key.value : obj[key];

        if (skipNulls && value === null) {
            continue;
        }

        var encodedKey = allowDots && encodeDotInKeys ? key.replace(/\./g, '%2E') : key;
        var keyPrefix = isArray(obj)
            ? typeof generateArrayPrefix === 'function' ? generateArrayPrefix(adjustedPrefix, encodedKey) : adjustedPrefix
            : adjustedPrefix + (allowDots ? '.' + encodedKey : '[' + encodedKey + ']');

        sideChannel.set(object, step);
        var valueSideChannel = getSideChannel();
        valueSideChannel.set(sentinel, sideChannel);
        pushToArray(values, stringify(
            value,
            keyPrefix,
            generateArrayPrefix,
            commaRoundTrip,
            allowEmptyArrays,
            strictNullHandling,
            skipNulls,
            encodeDotInKeys,
            generateArrayPrefix === 'comma' && encodeValuesOnly && isArray(obj) ? null : encoder,
            filter,
            sort,
            allowDots,
            serializeDate,
            format,
            formatter,
            encodeValuesOnly,
            charset,
            valueSideChannel
        ));
    }

    return values;
};

var normalizeStringifyOptions = function normalizeStringifyOptions(opts) {
    if (!opts) {
        return defaults;
    }

    if (typeof opts.allowEmptyArrays !== 'undefined' && typeof opts.allowEmptyArrays !== 'boolean') {
        throw new TypeError('`allowEmptyArrays` option can only be `true` or `false`, when provided');
    }

    if (typeof opts.encodeDotInKeys !== 'undefined' && typeof opts.encodeDotInKeys !== 'boolean') {
        throw new TypeError('`encodeDotInKeys` option can only be `true` or `false`, when provided');
    }

    if (opts.encoder !== null && typeof opts.encoder !== 'undefined' && typeof opts.encoder !== 'function') {
        throw new TypeError('Encoder has to be a function.');
    }

    var charset = opts.charset || defaults.charset;
    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {
        throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');
    }

    var format = formats['default'];
    if (typeof opts.format !== 'undefined') {
        if (!has.call(formats.formatters, opts.format)) {
            throw new TypeError('Unknown format option provided.');
        }
        format = opts.format;
    }
    var formatter = formats.formatters[format];

    var filter = defaults.filter;
    if (typeof opts.filter === 'function' || isArray(opts.filter)) {
        filter = opts.filter;
    }

    var arrayFormat;
    if (opts.arrayFormat in arrayPrefixGenerators) {
        arrayFormat = opts.arrayFormat;
    } else if ('indices' in opts) {
        arrayFormat = opts.indices ? 'indices' : 'repeat';
    } else {
        arrayFormat = defaults.arrayFormat;
    }

    if ('commaRoundTrip' in opts && typeof opts.commaRoundTrip !== 'boolean') {
        throw new TypeError('`commaRoundTrip` must be a boolean, or absent');
    }

    var allowDots = typeof opts.allowDots === 'undefined' ? opts.encodeDotInKeys === true ? true : defaults.allowDots : !!opts.allowDots;

    return {
        addQueryPrefix: typeof opts.addQueryPrefix === 'boolean' ? opts.addQueryPrefix : defaults.addQueryPrefix,
        allowDots: allowDots,
        allowEmptyArrays: typeof opts.allowEmptyArrays === 'boolean' ? !!opts.allowEmptyArrays : defaults.allowEmptyArrays,
        arrayFormat: arrayFormat,
        charset: charset,
        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,
        commaRoundTrip: opts.commaRoundTrip,
        delimiter: typeof opts.delimiter === 'undefined' ? defaults.delimiter : opts.delimiter,
        encode: typeof opts.encode === 'boolean' ? opts.encode : defaults.encode,
        encodeDotInKeys: typeof opts.encodeDotInKeys === 'boolean' ? opts.encodeDotInKeys : defaults.encodeDotInKeys,
        encoder: typeof opts.encoder === 'function' ? opts.encoder : defaults.encoder,
        encodeValuesOnly: typeof opts.encodeValuesOnly === 'boolean' ? opts.encodeValuesOnly : defaults.encodeValuesOnly,
        filter: filter,
        format: format,
        formatter: formatter,
        serializeDate: typeof opts.serializeDate === 'function' ? opts.serializeDate : defaults.serializeDate,
        skipNulls: typeof opts.skipNulls === 'boolean' ? opts.skipNulls : defaults.skipNulls,
        sort: typeof opts.sort === 'function' ? opts.sort : null,
        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling
    };
};

module.exports = function (object, opts) {
    var obj = object;
    var options = normalizeStringifyOptions(opts);

    var objKeys;
    var filter;

    if (typeof options.filter === 'function') {
        filter = options.filter;
        obj = filter('', obj);
    } else if (isArray(options.filter)) {
        filter = options.filter;
        objKeys = filter;
    }

    var keys = [];

    if (typeof obj !== 'object' || obj === null) {
        return '';
    }

    var generateArrayPrefix = arrayPrefixGenerators[options.arrayFormat];
    var commaRoundTrip = generateArrayPrefix === 'comma' && options.commaRoundTrip;

    if (!objKeys) {
        objKeys = Object.keys(obj);
    }

    if (options.sort) {
        objKeys.sort(options.sort);
    }

    var sideChannel = getSideChannel();
    for (var i = 0; i < objKeys.length; ++i) {
        var key = objKeys[i];

        if (options.skipNulls && obj[key] === null) {
            continue;
        }
        pushToArray(keys, stringify(
            obj[key],
            key,
            generateArrayPrefix,
            commaRoundTrip,
            options.allowEmptyArrays,
            options.strictNullHandling,
            options.skipNulls,
            options.encodeDotInKeys,
            options.encode ? options.encoder : null,
            options.filter,
            options.sort,
            options.allowDots,
            options.serializeDate,
            options.format,
            options.formatter,
            options.encodeValuesOnly,
            options.charset,
            sideChannel
        ));
    }

    var joined = keys.join(options.delimiter);
    var prefix = options.addQueryPrefix === true ? '?' : '';

    if (options.charsetSentinel) {
        if (options.charset === 'iso-8859-1') {
            // encodeURIComponent('&#10003;'), the "numeric entity" representation of a checkmark
            prefix += 'utf8=%26%2310003%3B&';
        } else {
            // encodeURIComponent('✓')
            prefix += 'utf8=%E2%9C%93&';
        }
    }

    return joined.length > 0 ? prefix + joined : '';
};


/***/ }),

/***/ "./node_modules/qs/lib/utils.js":
/*!**************************************!*\
  !*** ./node_modules/qs/lib/utils.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var formats = __webpack_require__(/*! ./formats */ "./node_modules/qs/lib/formats.js");

var has = Object.prototype.hasOwnProperty;
var isArray = Array.isArray;

var hexTable = (function () {
    var array = [];
    for (var i = 0; i < 256; ++i) {
        array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());
    }

    return array;
}());

var compactQueue = function compactQueue(queue) {
    while (queue.length > 1) {
        var item = queue.pop();
        var obj = item.obj[item.prop];

        if (isArray(obj)) {
            var compacted = [];

            for (var j = 0; j < obj.length; ++j) {
                if (typeof obj[j] !== 'undefined') {
                    compacted.push(obj[j]);
                }
            }

            item.obj[item.prop] = compacted;
        }
    }
};

var arrayToObject = function arrayToObject(source, options) {
    var obj = options && options.plainObjects ? Object.create(null) : {};
    for (var i = 0; i < source.length; ++i) {
        if (typeof source[i] !== 'undefined') {
            obj[i] = source[i];
        }
    }

    return obj;
};

var merge = function merge(target, source, options) {
    /* eslint no-param-reassign: 0 */
    if (!source) {
        return target;
    }

    if (typeof source !== 'object') {
        if (isArray(target)) {
            target.push(source);
        } else if (target && typeof target === 'object') {
            if ((options && (options.plainObjects || options.allowPrototypes)) || !has.call(Object.prototype, source)) {
                target[source] = true;
            }
        } else {
            return [target, source];
        }

        return target;
    }

    if (!target || typeof target !== 'object') {
        return [target].concat(source);
    }

    var mergeTarget = target;
    if (isArray(target) && !isArray(source)) {
        mergeTarget = arrayToObject(target, options);
    }

    if (isArray(target) && isArray(source)) {
        source.forEach(function (item, i) {
            if (has.call(target, i)) {
                var targetItem = target[i];
                if (targetItem && typeof targetItem === 'object' && item && typeof item === 'object') {
                    target[i] = merge(targetItem, item, options);
                } else {
                    target.push(item);
                }
            } else {
                target[i] = item;
            }
        });
        return target;
    }

    return Object.keys(source).reduce(function (acc, key) {
        var value = source[key];

        if (has.call(acc, key)) {
            acc[key] = merge(acc[key], value, options);
        } else {
            acc[key] = value;
        }
        return acc;
    }, mergeTarget);
};

var assign = function assignSingleSource(target, source) {
    return Object.keys(source).reduce(function (acc, key) {
        acc[key] = source[key];
        return acc;
    }, target);
};

var decode = function (str, decoder, charset) {
    var strWithoutPlus = str.replace(/\+/g, ' ');
    if (charset === 'iso-8859-1') {
        // unescape never throws, no try...catch needed:
        return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
    }
    // utf-8
    try {
        return decodeURIComponent(strWithoutPlus);
    } catch (e) {
        return strWithoutPlus;
    }
};

var limit = 1024;

/* eslint operator-linebreak: [2, "before"] */

var encode = function encode(str, defaultEncoder, charset, kind, format) {
    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.
    // It has been adapted here for stricter adherence to RFC 3986
    if (str.length === 0) {
        return str;
    }

    var string = str;
    if (typeof str === 'symbol') {
        string = Symbol.prototype.toString.call(str);
    } else if (typeof str !== 'string') {
        string = String(str);
    }

    if (charset === 'iso-8859-1') {
        return escape(string).replace(/%u[0-9a-f]{4}/gi, function ($0) {
            return '%26%23' + parseInt($0.slice(2), 16) + '%3B';
        });
    }

    var out = '';
    for (var j = 0; j < string.length; j += limit) {
        var segment = string.length >= limit ? string.slice(j, j + limit) : string;
        var arr = [];

        for (var i = 0; i < segment.length; ++i) {
            var c = segment.charCodeAt(i);
            if (
                c === 0x2D // -
                || c === 0x2E // .
                || c === 0x5F // _
                || c === 0x7E // ~
                || (c >= 0x30 && c <= 0x39) // 0-9
                || (c >= 0x41 && c <= 0x5A) // a-z
                || (c >= 0x61 && c <= 0x7A) // A-Z
                || (format === formats.RFC1738 && (c === 0x28 || c === 0x29)) // ( )
            ) {
                arr[arr.length] = segment.charAt(i);
                continue;
            }

            if (c < 0x80) {
                arr[arr.length] = hexTable[c];
                continue;
            }

            if (c < 0x800) {
                arr[arr.length] = hexTable[0xC0 | (c >> 6)]
                    + hexTable[0x80 | (c & 0x3F)];
                continue;
            }

            if (c < 0xD800 || c >= 0xE000) {
                arr[arr.length] = hexTable[0xE0 | (c >> 12)]
                    + hexTable[0x80 | ((c >> 6) & 0x3F)]
                    + hexTable[0x80 | (c & 0x3F)];
                continue;
            }

            i += 1;
            c = 0x10000 + (((c & 0x3FF) << 10) | (segment.charCodeAt(i) & 0x3FF));

            arr[arr.length] = hexTable[0xF0 | (c >> 18)]
                + hexTable[0x80 | ((c >> 12) & 0x3F)]
                + hexTable[0x80 | ((c >> 6) & 0x3F)]
                + hexTable[0x80 | (c & 0x3F)];
        }

        out += arr.join('');
    }

    return out;
};

var compact = function compact(value) {
    var queue = [{ obj: { o: value }, prop: 'o' }];
    var refs = [];

    for (var i = 0; i < queue.length; ++i) {
        var item = queue[i];
        var obj = item.obj[item.prop];

        var keys = Object.keys(obj);
        for (var j = 0; j < keys.length; ++j) {
            var key = keys[j];
            var val = obj[key];
            if (typeof val === 'object' && val !== null && refs.indexOf(val) === -1) {
                queue.push({ obj: obj, prop: key });
                refs.push(val);
            }
        }
    }

    compactQueue(queue);

    return value;
};

var isRegExp = function isRegExp(obj) {
    return Object.prototype.toString.call(obj) === '[object RegExp]';
};

var isBuffer = function isBuffer(obj) {
    if (!obj || typeof obj !== 'object') {
        return false;
    }

    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
};

var combine = function combine(a, b) {
    return [].concat(a, b);
};

var maybeMap = function maybeMap(val, fn) {
    if (isArray(val)) {
        var mapped = [];
        for (var i = 0; i < val.length; i += 1) {
            mapped.push(fn(val[i]));
        }
        return mapped;
    }
    return fn(val);
};

module.exports = {
    arrayToObject: arrayToObject,
    assign: assign,
    combine: combine,
    compact: compact,
    decode: decode,
    encode: encode,
    isBuffer: isBuffer,
    isRegExp: isRegExp,
    maybeMap: maybeMap,
    merge: merge
};


/***/ }),

/***/ "./node_modules/set-function-length/index.js":
/*!***************************************************!*\
  !*** ./node_modules/set-function-length/index.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var GetIntrinsic = __webpack_require__(/*! get-intrinsic */ "./node_modules/get-intrinsic/index.js");
var define = __webpack_require__(/*! define-data-property */ "./node_modules/define-data-property/index.js");
var hasDescriptors = __webpack_require__(/*! has-property-descriptors */ "./node_modules/has-property-descriptors/index.js")();
var gOPD = __webpack_require__(/*! gopd */ "./node_modules/gopd/index.js");

var $TypeError = __webpack_require__(/*! es-errors/type */ "./node_modules/es-errors/type.js");
var $floor = GetIntrinsic('%Math.floor%');

/** @type {import('.')} */
module.exports = function setFunctionLength(fn, length) {
	if (typeof fn !== 'function') {
		throw new $TypeError('`fn` is not a function');
	}
	if (typeof length !== 'number' || length < 0 || length > 0xFFFFFFFF || $floor(length) !== length) {
		throw new $TypeError('`length` must be a positive 32-bit integer');
	}

	var loose = arguments.length > 2 && !!arguments[2];

	var functionLengthIsConfigurable = true;
	var functionLengthIsWritable = true;
	if ('length' in fn && gOPD) {
		var desc = gOPD(fn, 'length');
		if (desc && !desc.configurable) {
			functionLengthIsConfigurable = false;
		}
		if (desc && !desc.writable) {
			functionLengthIsWritable = false;
		}
	}

	if (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {
		if (hasDescriptors) {
			define(/** @type {Parameters<define>[0]} */ (fn), 'length', length, true, true);
		} else {
			define(/** @type {Parameters<define>[0]} */ (fn), 'length', length);
		}
	}
	return fn;
};


/***/ }),

/***/ "./node_modules/side-channel/index.js":
/*!********************************************!*\
  !*** ./node_modules/side-channel/index.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var GetIntrinsic = __webpack_require__(/*! get-intrinsic */ "./node_modules/get-intrinsic/index.js");
var callBound = __webpack_require__(/*! call-bind/callBound */ "./node_modules/call-bind/callBound.js");
var inspect = __webpack_require__(/*! object-inspect */ "./node_modules/object-inspect/index.js");

var $TypeError = __webpack_require__(/*! es-errors/type */ "./node_modules/es-errors/type.js");
var $WeakMap = GetIntrinsic('%WeakMap%', true);
var $Map = GetIntrinsic('%Map%', true);

var $weakMapGet = callBound('WeakMap.prototype.get', true);
var $weakMapSet = callBound('WeakMap.prototype.set', true);
var $weakMapHas = callBound('WeakMap.prototype.has', true);
var $mapGet = callBound('Map.prototype.get', true);
var $mapSet = callBound('Map.prototype.set', true);
var $mapHas = callBound('Map.prototype.has', true);

/*
* This function traverses the list returning the node corresponding to the given key.
*
* That node is also moved to the head of the list, so that if it's accessed again we don't need to traverse the whole list. By doing so, all the recently used nodes can be accessed relatively quickly.
*/
/** @type {import('.').listGetNode} */
var listGetNode = function (list, key) { // eslint-disable-line consistent-return
	/** @type {typeof list | NonNullable<(typeof list)['next']>} */
	var prev = list;
	/** @type {(typeof list)['next']} */
	var curr;
	for (; (curr = prev.next) !== null; prev = curr) {
		if (curr.key === key) {
			prev.next = curr.next;
			// eslint-disable-next-line no-extra-parens
			curr.next = /** @type {NonNullable<typeof list.next>} */ (list.next);
			list.next = curr; // eslint-disable-line no-param-reassign
			return curr;
		}
	}
};

/** @type {import('.').listGet} */
var listGet = function (objects, key) {
	var node = listGetNode(objects, key);
	return node && node.value;
};
/** @type {import('.').listSet} */
var listSet = function (objects, key, value) {
	var node = listGetNode(objects, key);
	if (node) {
		node.value = value;
	} else {
		// Prepend the new node to the beginning of the list
		objects.next = /** @type {import('.').ListNode<typeof value>} */ ({ // eslint-disable-line no-param-reassign, no-extra-parens
			key: key,
			next: objects.next,
			value: value
		});
	}
};
/** @type {import('.').listHas} */
var listHas = function (objects, key) {
	return !!listGetNode(objects, key);
};

/** @type {import('.')} */
module.exports = function getSideChannel() {
	/** @type {WeakMap<object, unknown>} */ var $wm;
	/** @type {Map<object, unknown>} */ var $m;
	/** @type {import('.').RootNode<unknown>} */ var $o;

	/** @type {import('.').Channel} */
	var channel = {
		assert: function (key) {
			if (!channel.has(key)) {
				throw new $TypeError('Side channel does not contain ' + inspect(key));
			}
		},
		get: function (key) { // eslint-disable-line consistent-return
			if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {
				if ($wm) {
					return $weakMapGet($wm, key);
				}
			} else if ($Map) {
				if ($m) {
					return $mapGet($m, key);
				}
			} else {
				if ($o) { // eslint-disable-line no-lonely-if
					return listGet($o, key);
				}
			}
		},
		has: function (key) {
			if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {
				if ($wm) {
					return $weakMapHas($wm, key);
				}
			} else if ($Map) {
				if ($m) {
					return $mapHas($m, key);
				}
			} else {
				if ($o) { // eslint-disable-line no-lonely-if
					return listHas($o, key);
				}
			}
			return false;
		},
		set: function (key, value) {
			if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {
				if (!$wm) {
					$wm = new $WeakMap();
				}
				$weakMapSet($wm, key, value);
			} else if ($Map) {
				if (!$m) {
					$m = new $Map();
				}
				$mapSet($m, key, value);
			} else {
				if (!$o) {
					// Initialize the linked list as an empty node, so that we don't have to special-case handling of the first node: we can always refer to it as (previous node).next, instead of something like (list).head
					$o = { key: {}, next: null };
				}
				listSet($o, key, value);
			}
		}
	};
	return channel;
};


/***/ }),

/***/ "./node_modules/slick-carousel/slick/slick.min.js":
/*!********************************************************!*\
  !*** ./node_modules/slick-carousel/slick/slick.min.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
     _ _      _       _
 ___| (_) ___| | __  (_)___
/ __| | |/ __| |/ /  | / __|
\__ \ | | (__|   < _ | \__ \
|___/_|_|\___|_|\_(_)/ |___/
                   |__/

 Version: 1.6.0
  Author: Ken Wheeler
 Website: http://kenwheeler.github.io
    Docs: http://kenwheeler.github.io/slick
    Repo: http://github.com/kenwheeler/slick
  Issues: http://github.com/kenwheeler/slick/issues

 */
!function(a){"use strict"; true?!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (a),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)):0}(function(a){"use strict";var b=window.Slick||{};b=function(){function c(c,d){var f,e=this;e.defaults={accessibility:!0,adaptiveHeight:!1,appendArrows:a(c),appendDots:a(c),arrows:!0,asNavFor:null,prevArrow:'<button type="button" data-role="none" class="slick-prev" aria-label="Previous" tabindex="0" role="button">Previous</button>',nextArrow:'<button type="button" data-role="none" class="slick-next" aria-label="Next" tabindex="0" role="button">Next</button>',autoplay:!1,autoplaySpeed:3e3,centerMode:!1,centerPadding:"50px",cssEase:"ease",customPaging:function(b,c){return a('<button type="button" data-role="none" role="button" tabindex="0" />').text(c+1)},dots:!1,dotsClass:"slick-dots",draggable:!0,easing:"linear",edgeFriction:.35,fade:!1,focusOnSelect:!1,infinite:!0,initialSlide:0,lazyLoad:"ondemand",mobileFirst:!1,pauseOnHover:!0,pauseOnFocus:!0,pauseOnDotsHover:!1,respondTo:"window",responsive:null,rows:1,rtl:!1,slide:"",slidesPerRow:1,slidesToShow:1,slidesToScroll:1,speed:500,swipe:!0,swipeToSlide:!1,touchMove:!0,touchThreshold:5,useCSS:!0,useTransform:!0,variableWidth:!1,vertical:!1,verticalSwiping:!1,waitForAnimate:!0,zIndex:1e3},e.initials={animating:!1,dragging:!1,autoPlayTimer:null,currentDirection:0,currentLeft:null,currentSlide:0,direction:1,$dots:null,listWidth:null,listHeight:null,loadIndex:0,$nextArrow:null,$prevArrow:null,slideCount:null,slideWidth:null,$slideTrack:null,$slides:null,sliding:!1,slideOffset:0,swipeLeft:null,$list:null,touchObject:{},transformsEnabled:!1,unslicked:!1},a.extend(e,e.initials),e.activeBreakpoint=null,e.animType=null,e.animProp=null,e.breakpoints=[],e.breakpointSettings=[],e.cssTransitions=!1,e.focussed=!1,e.interrupted=!1,e.hidden="hidden",e.paused=!0,e.positionProp=null,e.respondTo=null,e.rowCount=1,e.shouldClick=!0,e.$slider=a(c),e.$slidesCache=null,e.transformType=null,e.transitionType=null,e.visibilityChange="visibilitychange",e.windowWidth=0,e.windowTimer=null,f=a(c).data("slick")||{},e.options=a.extend({},e.defaults,d,f),e.currentSlide=e.options.initialSlide,e.originalSettings=e.options,"undefined"!=typeof document.mozHidden?(e.hidden="mozHidden",e.visibilityChange="mozvisibilitychange"):"undefined"!=typeof document.webkitHidden&&(e.hidden="webkitHidden",e.visibilityChange="webkitvisibilitychange"),e.autoPlay=a.proxy(e.autoPlay,e),e.autoPlayClear=a.proxy(e.autoPlayClear,e),e.autoPlayIterator=a.proxy(e.autoPlayIterator,e),e.changeSlide=a.proxy(e.changeSlide,e),e.clickHandler=a.proxy(e.clickHandler,e),e.selectHandler=a.proxy(e.selectHandler,e),e.setPosition=a.proxy(e.setPosition,e),e.swipeHandler=a.proxy(e.swipeHandler,e),e.dragHandler=a.proxy(e.dragHandler,e),e.keyHandler=a.proxy(e.keyHandler,e),e.instanceUid=b++,e.htmlExpr=/^(?:\s*(<[\w\W]+>)[^>]*)$/,e.registerBreakpoints(),e.init(!0)}var b=0;return c}(),b.prototype.activateADA=function(){var a=this;a.$slideTrack.find(".slick-active").attr({"aria-hidden":"false"}).find("a, input, button, select").attr({tabindex:"0"})},b.prototype.addSlide=b.prototype.slickAdd=function(b,c,d){var e=this;if("boolean"==typeof c)d=c,c=null;else if(0>c||c>=e.slideCount)return!1;e.unload(),"number"==typeof c?0===c&&0===e.$slides.length?a(b).appendTo(e.$slideTrack):d?a(b).insertBefore(e.$slides.eq(c)):a(b).insertAfter(e.$slides.eq(c)):d===!0?a(b).prependTo(e.$slideTrack):a(b).appendTo(e.$slideTrack),e.$slides=e.$slideTrack.children(this.options.slide),e.$slideTrack.children(this.options.slide).detach(),e.$slideTrack.append(e.$slides),e.$slides.each(function(b,c){a(c).attr("data-slick-index",b)}),e.$slidesCache=e.$slides,e.reinit()},b.prototype.animateHeight=function(){var a=this;if(1===a.options.slidesToShow&&a.options.adaptiveHeight===!0&&a.options.vertical===!1){var b=a.$slides.eq(a.currentSlide).outerHeight(!0);a.$list.animate({height:b},a.options.speed)}},b.prototype.animateSlide=function(b,c){var d={},e=this;e.animateHeight(),e.options.rtl===!0&&e.options.vertical===!1&&(b=-b),e.transformsEnabled===!1?e.options.vertical===!1?e.$slideTrack.animate({left:b},e.options.speed,e.options.easing,c):e.$slideTrack.animate({top:b},e.options.speed,e.options.easing,c):e.cssTransitions===!1?(e.options.rtl===!0&&(e.currentLeft=-e.currentLeft),a({animStart:e.currentLeft}).animate({animStart:b},{duration:e.options.speed,easing:e.options.easing,step:function(a){a=Math.ceil(a),e.options.vertical===!1?(d[e.animType]="translate("+a+"px, 0px)",e.$slideTrack.css(d)):(d[e.animType]="translate(0px,"+a+"px)",e.$slideTrack.css(d))},complete:function(){c&&c.call()}})):(e.applyTransition(),b=Math.ceil(b),e.options.vertical===!1?d[e.animType]="translate3d("+b+"px, 0px, 0px)":d[e.animType]="translate3d(0px,"+b+"px, 0px)",e.$slideTrack.css(d),c&&setTimeout(function(){e.disableTransition(),c.call()},e.options.speed))},b.prototype.getNavTarget=function(){var b=this,c=b.options.asNavFor;return c&&null!==c&&(c=a(c).not(b.$slider)),c},b.prototype.asNavFor=function(b){var c=this,d=c.getNavTarget();null!==d&&"object"==typeof d&&d.each(function(){var c=a(this).slick("getSlick");c.unslicked||c.slideHandler(b,!0)})},b.prototype.applyTransition=function(a){var b=this,c={};b.options.fade===!1?c[b.transitionType]=b.transformType+" "+b.options.speed+"ms "+b.options.cssEase:c[b.transitionType]="opacity "+b.options.speed+"ms "+b.options.cssEase,b.options.fade===!1?b.$slideTrack.css(c):b.$slides.eq(a).css(c)},b.prototype.autoPlay=function(){var a=this;a.autoPlayClear(),a.slideCount>a.options.slidesToShow&&(a.autoPlayTimer=setInterval(a.autoPlayIterator,a.options.autoplaySpeed))},b.prototype.autoPlayClear=function(){var a=this;a.autoPlayTimer&&clearInterval(a.autoPlayTimer)},b.prototype.autoPlayIterator=function(){var a=this,b=a.currentSlide+a.options.slidesToScroll;a.paused||a.interrupted||a.focussed||(a.options.infinite===!1&&(1===a.direction&&a.currentSlide+1===a.slideCount-1?a.direction=0:0===a.direction&&(b=a.currentSlide-a.options.slidesToScroll,a.currentSlide-1===0&&(a.direction=1))),a.slideHandler(b))},b.prototype.buildArrows=function(){var b=this;b.options.arrows===!0&&(b.$prevArrow=a(b.options.prevArrow).addClass("slick-arrow"),b.$nextArrow=a(b.options.nextArrow).addClass("slick-arrow"),b.slideCount>b.options.slidesToShow?(b.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),b.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),b.htmlExpr.test(b.options.prevArrow)&&b.$prevArrow.prependTo(b.options.appendArrows),b.htmlExpr.test(b.options.nextArrow)&&b.$nextArrow.appendTo(b.options.appendArrows),b.options.infinite!==!0&&b.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true")):b.$prevArrow.add(b.$nextArrow).addClass("slick-hidden").attr({"aria-disabled":"true",tabindex:"-1"}))},b.prototype.buildDots=function(){var c,d,b=this;if(b.options.dots===!0&&b.slideCount>b.options.slidesToShow){for(b.$slider.addClass("slick-dotted"),d=a("<ul />").addClass(b.options.dotsClass),c=0;c<=b.getDotCount();c+=1)d.append(a("<li />").append(b.options.customPaging.call(this,b,c)));b.$dots=d.appendTo(b.options.appendDots),b.$dots.find("li").first().addClass("slick-active").attr("aria-hidden","false")}},b.prototype.buildOut=function(){var b=this;b.$slides=b.$slider.children(b.options.slide+":not(.slick-cloned)").addClass("slick-slide"),b.slideCount=b.$slides.length,b.$slides.each(function(b,c){a(c).attr("data-slick-index",b).data("originalStyling",a(c).attr("style")||"")}),b.$slider.addClass("slick-slider"),b.$slideTrack=0===b.slideCount?a('<div class="slick-track"/>').appendTo(b.$slider):b.$slides.wrapAll('<div class="slick-track"/>').parent(),b.$list=b.$slideTrack.wrap('<div aria-live="polite" class="slick-list"/>').parent(),b.$slideTrack.css("opacity",0),(b.options.centerMode===!0||b.options.swipeToSlide===!0)&&(b.options.slidesToScroll=1),a("img[data-lazy]",b.$slider).not("[src]").addClass("slick-loading"),b.setupInfinite(),b.buildArrows(),b.buildDots(),b.updateDots(),b.setSlideClasses("number"==typeof b.currentSlide?b.currentSlide:0),b.options.draggable===!0&&b.$list.addClass("draggable")},b.prototype.buildRows=function(){var b,c,d,e,f,g,h,a=this;if(e=document.createDocumentFragment(),g=a.$slider.children(),a.options.rows>1){for(h=a.options.slidesPerRow*a.options.rows,f=Math.ceil(g.length/h),b=0;f>b;b++){var i=document.createElement("div");for(c=0;c<a.options.rows;c++){var j=document.createElement("div");for(d=0;d<a.options.slidesPerRow;d++){var k=b*h+(c*a.options.slidesPerRow+d);g.get(k)&&j.appendChild(g.get(k))}i.appendChild(j)}e.appendChild(i)}a.$slider.empty().append(e),a.$slider.children().children().children().css({width:100/a.options.slidesPerRow+"%",display:"inline-block"})}},b.prototype.checkResponsive=function(b,c){var e,f,g,d=this,h=!1,i=d.$slider.width(),j=window.innerWidth||a(window).width();if("window"===d.respondTo?g=j:"slider"===d.respondTo?g=i:"min"===d.respondTo&&(g=Math.min(j,i)),d.options.responsive&&d.options.responsive.length&&null!==d.options.responsive){f=null;for(e in d.breakpoints)d.breakpoints.hasOwnProperty(e)&&(d.originalSettings.mobileFirst===!1?g<d.breakpoints[e]&&(f=d.breakpoints[e]):g>d.breakpoints[e]&&(f=d.breakpoints[e]));null!==f?null!==d.activeBreakpoint?(f!==d.activeBreakpoint||c)&&(d.activeBreakpoint=f,"unslick"===d.breakpointSettings[f]?d.unslick(f):(d.options=a.extend({},d.originalSettings,d.breakpointSettings[f]),b===!0&&(d.currentSlide=d.options.initialSlide),d.refresh(b)),h=f):(d.activeBreakpoint=f,"unslick"===d.breakpointSettings[f]?d.unslick(f):(d.options=a.extend({},d.originalSettings,d.breakpointSettings[f]),b===!0&&(d.currentSlide=d.options.initialSlide),d.refresh(b)),h=f):null!==d.activeBreakpoint&&(d.activeBreakpoint=null,d.options=d.originalSettings,b===!0&&(d.currentSlide=d.options.initialSlide),d.refresh(b),h=f),b||h===!1||d.$slider.trigger("breakpoint",[d,h])}},b.prototype.changeSlide=function(b,c){var f,g,h,d=this,e=a(b.currentTarget);switch(e.is("a")&&b.preventDefault(),e.is("li")||(e=e.closest("li")),h=d.slideCount%d.options.slidesToScroll!==0,f=h?0:(d.slideCount-d.currentSlide)%d.options.slidesToScroll,b.data.message){case"previous":g=0===f?d.options.slidesToScroll:d.options.slidesToShow-f,d.slideCount>d.options.slidesToShow&&d.slideHandler(d.currentSlide-g,!1,c);break;case"next":g=0===f?d.options.slidesToScroll:f,d.slideCount>d.options.slidesToShow&&d.slideHandler(d.currentSlide+g,!1,c);break;case"index":var i=0===b.data.index?0:b.data.index||e.index()*d.options.slidesToScroll;d.slideHandler(d.checkNavigable(i),!1,c),e.children().trigger("focus");break;default:return}},b.prototype.checkNavigable=function(a){var c,d,b=this;if(c=b.getNavigableIndexes(),d=0,a>c[c.length-1])a=c[c.length-1];else for(var e in c){if(a<c[e]){a=d;break}d=c[e]}return a},b.prototype.cleanUpEvents=function(){var b=this;b.options.dots&&null!==b.$dots&&a("li",b.$dots).off("click.slick",b.changeSlide).off("mouseenter.slick",a.proxy(b.interrupt,b,!0)).off("mouseleave.slick",a.proxy(b.interrupt,b,!1)),b.$slider.off("focus.slick blur.slick"),b.options.arrows===!0&&b.slideCount>b.options.slidesToShow&&(b.$prevArrow&&b.$prevArrow.off("click.slick",b.changeSlide),b.$nextArrow&&b.$nextArrow.off("click.slick",b.changeSlide)),b.$list.off("touchstart.slick mousedown.slick",b.swipeHandler),b.$list.off("touchmove.slick mousemove.slick",b.swipeHandler),b.$list.off("touchend.slick mouseup.slick",b.swipeHandler),b.$list.off("touchcancel.slick mouseleave.slick",b.swipeHandler),b.$list.off("click.slick",b.clickHandler),a(document).off(b.visibilityChange,b.visibility),b.cleanUpSlideEvents(),b.options.accessibility===!0&&b.$list.off("keydown.slick",b.keyHandler),b.options.focusOnSelect===!0&&a(b.$slideTrack).children().off("click.slick",b.selectHandler),a(window).off("orientationchange.slick.slick-"+b.instanceUid,b.orientationChange),a(window).off("resize.slick.slick-"+b.instanceUid,b.resize),a("[draggable!=true]",b.$slideTrack).off("dragstart",b.preventDefault),a(window).off("load.slick.slick-"+b.instanceUid,b.setPosition),a(document).off("ready.slick.slick-"+b.instanceUid,b.setPosition)},b.prototype.cleanUpSlideEvents=function(){var b=this;b.$list.off("mouseenter.slick",a.proxy(b.interrupt,b,!0)),b.$list.off("mouseleave.slick",a.proxy(b.interrupt,b,!1))},b.prototype.cleanUpRows=function(){var b,a=this;a.options.rows>1&&(b=a.$slides.children().children(),b.removeAttr("style"),a.$slider.empty().append(b))},b.prototype.clickHandler=function(a){var b=this;b.shouldClick===!1&&(a.stopImmediatePropagation(),a.stopPropagation(),a.preventDefault())},b.prototype.destroy=function(b){var c=this;c.autoPlayClear(),c.touchObject={},c.cleanUpEvents(),a(".slick-cloned",c.$slider).detach(),c.$dots&&c.$dots.remove(),c.$prevArrow&&c.$prevArrow.length&&(c.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),c.htmlExpr.test(c.options.prevArrow)&&c.$prevArrow.remove()),c.$nextArrow&&c.$nextArrow.length&&(c.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),c.htmlExpr.test(c.options.nextArrow)&&c.$nextArrow.remove()),c.$slides&&(c.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function(){a(this).attr("style",a(this).data("originalStyling"))}),c.$slideTrack.children(this.options.slide).detach(),c.$slideTrack.detach(),c.$list.detach(),c.$slider.append(c.$slides)),c.cleanUpRows(),c.$slider.removeClass("slick-slider"),c.$slider.removeClass("slick-initialized"),c.$slider.removeClass("slick-dotted"),c.unslicked=!0,b||c.$slider.trigger("destroy",[c])},b.prototype.disableTransition=function(a){var b=this,c={};c[b.transitionType]="",b.options.fade===!1?b.$slideTrack.css(c):b.$slides.eq(a).css(c)},b.prototype.fadeSlide=function(a,b){var c=this;c.cssTransitions===!1?(c.$slides.eq(a).css({zIndex:c.options.zIndex}),c.$slides.eq(a).animate({opacity:1},c.options.speed,c.options.easing,b)):(c.applyTransition(a),c.$slides.eq(a).css({opacity:1,zIndex:c.options.zIndex}),b&&setTimeout(function(){c.disableTransition(a),b.call()},c.options.speed))},b.prototype.fadeSlideOut=function(a){var b=this;b.cssTransitions===!1?b.$slides.eq(a).animate({opacity:0,zIndex:b.options.zIndex-2},b.options.speed,b.options.easing):(b.applyTransition(a),b.$slides.eq(a).css({opacity:0,zIndex:b.options.zIndex-2}))},b.prototype.filterSlides=b.prototype.slickFilter=function(a){var b=this;null!==a&&(b.$slidesCache=b.$slides,b.unload(),b.$slideTrack.children(this.options.slide).detach(),b.$slidesCache.filter(a).appendTo(b.$slideTrack),b.reinit())},b.prototype.focusHandler=function(){var b=this;b.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick","*:not(.slick-arrow)",function(c){c.stopImmediatePropagation();var d=a(this);setTimeout(function(){b.options.pauseOnFocus&&(b.focussed=d.is(":focus"),b.autoPlay())},0)})},b.prototype.getCurrent=b.prototype.slickCurrentSlide=function(){var a=this;return a.currentSlide},b.prototype.getDotCount=function(){var a=this,b=0,c=0,d=0;if(a.options.infinite===!0)for(;b<a.slideCount;)++d,b=c+a.options.slidesToScroll,c+=a.options.slidesToScroll<=a.options.slidesToShow?a.options.slidesToScroll:a.options.slidesToShow;else if(a.options.centerMode===!0)d=a.slideCount;else if(a.options.asNavFor)for(;b<a.slideCount;)++d,b=c+a.options.slidesToScroll,c+=a.options.slidesToScroll<=a.options.slidesToShow?a.options.slidesToScroll:a.options.slidesToShow;else d=1+Math.ceil((a.slideCount-a.options.slidesToShow)/a.options.slidesToScroll);return d-1},b.prototype.getLeft=function(a){var c,d,f,b=this,e=0;return b.slideOffset=0,d=b.$slides.first().outerHeight(!0),b.options.infinite===!0?(b.slideCount>b.options.slidesToShow&&(b.slideOffset=b.slideWidth*b.options.slidesToShow*-1,e=d*b.options.slidesToShow*-1),b.slideCount%b.options.slidesToScroll!==0&&a+b.options.slidesToScroll>b.slideCount&&b.slideCount>b.options.slidesToShow&&(a>b.slideCount?(b.slideOffset=(b.options.slidesToShow-(a-b.slideCount))*b.slideWidth*-1,e=(b.options.slidesToShow-(a-b.slideCount))*d*-1):(b.slideOffset=b.slideCount%b.options.slidesToScroll*b.slideWidth*-1,e=b.slideCount%b.options.slidesToScroll*d*-1))):a+b.options.slidesToShow>b.slideCount&&(b.slideOffset=(a+b.options.slidesToShow-b.slideCount)*b.slideWidth,e=(a+b.options.slidesToShow-b.slideCount)*d),b.slideCount<=b.options.slidesToShow&&(b.slideOffset=0,e=0),b.options.centerMode===!0&&b.options.infinite===!0?b.slideOffset+=b.slideWidth*Math.floor(b.options.slidesToShow/2)-b.slideWidth:b.options.centerMode===!0&&(b.slideOffset=0,b.slideOffset+=b.slideWidth*Math.floor(b.options.slidesToShow/2)),c=b.options.vertical===!1?a*b.slideWidth*-1+b.slideOffset:a*d*-1+e,b.options.variableWidth===!0&&(f=b.slideCount<=b.options.slidesToShow||b.options.infinite===!1?b.$slideTrack.children(".slick-slide").eq(a):b.$slideTrack.children(".slick-slide").eq(a+b.options.slidesToShow),c=b.options.rtl===!0?f[0]?-1*(b.$slideTrack.width()-f[0].offsetLeft-f.width()):0:f[0]?-1*f[0].offsetLeft:0,b.options.centerMode===!0&&(f=b.slideCount<=b.options.slidesToShow||b.options.infinite===!1?b.$slideTrack.children(".slick-slide").eq(a):b.$slideTrack.children(".slick-slide").eq(a+b.options.slidesToShow+1),c=b.options.rtl===!0?f[0]?-1*(b.$slideTrack.width()-f[0].offsetLeft-f.width()):0:f[0]?-1*f[0].offsetLeft:0,c+=(b.$list.width()-f.outerWidth())/2)),c},b.prototype.getOption=b.prototype.slickGetOption=function(a){var b=this;return b.options[a]},b.prototype.getNavigableIndexes=function(){var e,a=this,b=0,c=0,d=[];for(a.options.infinite===!1?e=a.slideCount:(b=-1*a.options.slidesToScroll,c=-1*a.options.slidesToScroll,e=2*a.slideCount);e>b;)d.push(b),b=c+a.options.slidesToScroll,c+=a.options.slidesToScroll<=a.options.slidesToShow?a.options.slidesToScroll:a.options.slidesToShow;return d},b.prototype.getSlick=function(){return this},b.prototype.getSlideCount=function(){var c,d,e,b=this;return e=b.options.centerMode===!0?b.slideWidth*Math.floor(b.options.slidesToShow/2):0,b.options.swipeToSlide===!0?(b.$slideTrack.find(".slick-slide").each(function(c,f){return f.offsetLeft-e+a(f).outerWidth()/2>-1*b.swipeLeft?(d=f,!1):void 0}),c=Math.abs(a(d).attr("data-slick-index")-b.currentSlide)||1):b.options.slidesToScroll},b.prototype.goTo=b.prototype.slickGoTo=function(a,b){var c=this;c.changeSlide({data:{message:"index",index:parseInt(a)}},b)},b.prototype.init=function(b){var c=this;a(c.$slider).hasClass("slick-initialized")||(a(c.$slider).addClass("slick-initialized"),c.buildRows(),c.buildOut(),c.setProps(),c.startLoad(),c.loadSlider(),c.initializeEvents(),c.updateArrows(),c.updateDots(),c.checkResponsive(!0),c.focusHandler()),b&&c.$slider.trigger("init",[c]),c.options.accessibility===!0&&c.initADA(),c.options.autoplay&&(c.paused=!1,c.autoPlay())},b.prototype.initADA=function(){var b=this;b.$slides.add(b.$slideTrack.find(".slick-cloned")).attr({"aria-hidden":"true",tabindex:"-1"}).find("a, input, button, select").attr({tabindex:"-1"}),b.$slideTrack.attr("role","listbox"),b.$slides.not(b.$slideTrack.find(".slick-cloned")).each(function(c){a(this).attr({role:"option","aria-describedby":"slick-slide"+b.instanceUid+c})}),null!==b.$dots&&b.$dots.attr("role","tablist").find("li").each(function(c){a(this).attr({role:"presentation","aria-selected":"false","aria-controls":"navigation"+b.instanceUid+c,id:"slick-slide"+b.instanceUid+c})}).first().attr("aria-selected","true").end().find("button").attr("role","button").end().closest("div").attr("role","toolbar"),b.activateADA()},b.prototype.initArrowEvents=function(){var a=this;a.options.arrows===!0&&a.slideCount>a.options.slidesToShow&&(a.$prevArrow.off("click.slick").on("click.slick",{message:"previous"},a.changeSlide),a.$nextArrow.off("click.slick").on("click.slick",{message:"next"},a.changeSlide))},b.prototype.initDotEvents=function(){var b=this;b.options.dots===!0&&b.slideCount>b.options.slidesToShow&&a("li",b.$dots).on("click.slick",{message:"index"},b.changeSlide),b.options.dots===!0&&b.options.pauseOnDotsHover===!0&&a("li",b.$dots).on("mouseenter.slick",a.proxy(b.interrupt,b,!0)).on("mouseleave.slick",a.proxy(b.interrupt,b,!1))},b.prototype.initSlideEvents=function(){var b=this;b.options.pauseOnHover&&(b.$list.on("mouseenter.slick",a.proxy(b.interrupt,b,!0)),b.$list.on("mouseleave.slick",a.proxy(b.interrupt,b,!1)))},b.prototype.initializeEvents=function(){var b=this;b.initArrowEvents(),b.initDotEvents(),b.initSlideEvents(),b.$list.on("touchstart.slick mousedown.slick",{action:"start"},b.swipeHandler),b.$list.on("touchmove.slick mousemove.slick",{action:"move"},b.swipeHandler),b.$list.on("touchend.slick mouseup.slick",{action:"end"},b.swipeHandler),b.$list.on("touchcancel.slick mouseleave.slick",{action:"end"},b.swipeHandler),b.$list.on("click.slick",b.clickHandler),a(document).on(b.visibilityChange,a.proxy(b.visibility,b)),b.options.accessibility===!0&&b.$list.on("keydown.slick",b.keyHandler),b.options.focusOnSelect===!0&&a(b.$slideTrack).children().on("click.slick",b.selectHandler),a(window).on("orientationchange.slick.slick-"+b.instanceUid,a.proxy(b.orientationChange,b)),a(window).on("resize.slick.slick-"+b.instanceUid,a.proxy(b.resize,b)),a("[draggable!=true]",b.$slideTrack).on("dragstart",b.preventDefault),a(window).on("load.slick.slick-"+b.instanceUid,b.setPosition),a(document).on("ready.slick.slick-"+b.instanceUid,b.setPosition)},b.prototype.initUI=function(){var a=this;a.options.arrows===!0&&a.slideCount>a.options.slidesToShow&&(a.$prevArrow.show(),a.$nextArrow.show()),a.options.dots===!0&&a.slideCount>a.options.slidesToShow&&a.$dots.show()},b.prototype.keyHandler=function(a){var b=this;a.target.tagName.match("TEXTAREA|INPUT|SELECT")||(37===a.keyCode&&b.options.accessibility===!0?b.changeSlide({data:{message:b.options.rtl===!0?"next":"previous"}}):39===a.keyCode&&b.options.accessibility===!0&&b.changeSlide({data:{message:b.options.rtl===!0?"previous":"next"}}))},b.prototype.lazyLoad=function(){function g(c){a("img[data-lazy]",c).each(function(){var c=a(this),d=a(this).attr("data-lazy"),e=document.createElement("img");e.onload=function(){c.animate({opacity:0},100,function(){c.attr("src",d).animate({opacity:1},200,function(){c.removeAttr("data-lazy").removeClass("slick-loading")}),b.$slider.trigger("lazyLoaded",[b,c,d])})},e.onerror=function(){c.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),b.$slider.trigger("lazyLoadError",[b,c,d])},e.src=d})}var c,d,e,f,b=this;b.options.centerMode===!0?b.options.infinite===!0?(e=b.currentSlide+(b.options.slidesToShow/2+1),f=e+b.options.slidesToShow+2):(e=Math.max(0,b.currentSlide-(b.options.slidesToShow/2+1)),f=2+(b.options.slidesToShow/2+1)+b.currentSlide):(e=b.options.infinite?b.options.slidesToShow+b.currentSlide:b.currentSlide,f=Math.ceil(e+b.options.slidesToShow),b.options.fade===!0&&(e>0&&e--,f<=b.slideCount&&f++)),c=b.$slider.find(".slick-slide").slice(e,f),g(c),b.slideCount<=b.options.slidesToShow?(d=b.$slider.find(".slick-slide"),g(d)):b.currentSlide>=b.slideCount-b.options.slidesToShow?(d=b.$slider.find(".slick-cloned").slice(0,b.options.slidesToShow),g(d)):0===b.currentSlide&&(d=b.$slider.find(".slick-cloned").slice(-1*b.options.slidesToShow),g(d))},b.prototype.loadSlider=function(){var a=this;a.setPosition(),a.$slideTrack.css({opacity:1}),a.$slider.removeClass("slick-loading"),a.initUI(),"progressive"===a.options.lazyLoad&&a.progressiveLazyLoad()},b.prototype.next=b.prototype.slickNext=function(){var a=this;a.changeSlide({data:{message:"next"}})},b.prototype.orientationChange=function(){var a=this;a.checkResponsive(),a.setPosition()},b.prototype.pause=b.prototype.slickPause=function(){var a=this;a.autoPlayClear(),a.paused=!0},b.prototype.play=b.prototype.slickPlay=function(){var a=this;a.autoPlay(),a.options.autoplay=!0,a.paused=!1,a.focussed=!1,a.interrupted=!1},b.prototype.postSlide=function(a){var b=this;b.unslicked||(b.$slider.trigger("afterChange",[b,a]),b.animating=!1,b.setPosition(),b.swipeLeft=null,b.options.autoplay&&b.autoPlay(),b.options.accessibility===!0&&b.initADA())},b.prototype.prev=b.prototype.slickPrev=function(){var a=this;a.changeSlide({data:{message:"previous"}})},b.prototype.preventDefault=function(a){a.preventDefault()},b.prototype.progressiveLazyLoad=function(b){b=b||1;var e,f,g,c=this,d=a("img[data-lazy]",c.$slider);d.length?(e=d.first(),f=e.attr("data-lazy"),g=document.createElement("img"),g.onload=function(){e.attr("src",f).removeAttr("data-lazy").removeClass("slick-loading"),c.options.adaptiveHeight===!0&&c.setPosition(),c.$slider.trigger("lazyLoaded",[c,e,f]),c.progressiveLazyLoad()},g.onerror=function(){3>b?setTimeout(function(){c.progressiveLazyLoad(b+1)},500):(e.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),c.$slider.trigger("lazyLoadError",[c,e,f]),c.progressiveLazyLoad())},g.src=f):c.$slider.trigger("allImagesLoaded",[c])},b.prototype.refresh=function(b){var d,e,c=this;e=c.slideCount-c.options.slidesToShow,!c.options.infinite&&c.currentSlide>e&&(c.currentSlide=e),c.slideCount<=c.options.slidesToShow&&(c.currentSlide=0),d=c.currentSlide,c.destroy(!0),a.extend(c,c.initials,{currentSlide:d}),c.init(),b||c.changeSlide({data:{message:"index",index:d}},!1)},b.prototype.registerBreakpoints=function(){var c,d,e,b=this,f=b.options.responsive||null;if("array"===a.type(f)&&f.length){b.respondTo=b.options.respondTo||"window";for(c in f)if(e=b.breakpoints.length-1,d=f[c].breakpoint,f.hasOwnProperty(c)){for(;e>=0;)b.breakpoints[e]&&b.breakpoints[e]===d&&b.breakpoints.splice(e,1),e--;b.breakpoints.push(d),b.breakpointSettings[d]=f[c].settings}b.breakpoints.sort(function(a,c){return b.options.mobileFirst?a-c:c-a})}},b.prototype.reinit=function(){var b=this;b.$slides=b.$slideTrack.children(b.options.slide).addClass("slick-slide"),b.slideCount=b.$slides.length,b.currentSlide>=b.slideCount&&0!==b.currentSlide&&(b.currentSlide=b.currentSlide-b.options.slidesToScroll),b.slideCount<=b.options.slidesToShow&&(b.currentSlide=0),b.registerBreakpoints(),b.setProps(),b.setupInfinite(),b.buildArrows(),b.updateArrows(),b.initArrowEvents(),b.buildDots(),b.updateDots(),b.initDotEvents(),b.cleanUpSlideEvents(),b.initSlideEvents(),b.checkResponsive(!1,!0),b.options.focusOnSelect===!0&&a(b.$slideTrack).children().on("click.slick",b.selectHandler),b.setSlideClasses("number"==typeof b.currentSlide?b.currentSlide:0),b.setPosition(),b.focusHandler(),b.paused=!b.options.autoplay,b.autoPlay(),b.$slider.trigger("reInit",[b])},b.prototype.resize=function(){var b=this;a(window).width()!==b.windowWidth&&(clearTimeout(b.windowDelay),b.windowDelay=window.setTimeout(function(){b.windowWidth=a(window).width(),b.checkResponsive(),b.unslicked||b.setPosition()},50))},b.prototype.removeSlide=b.prototype.slickRemove=function(a,b,c){var d=this;return"boolean"==typeof a?(b=a,a=b===!0?0:d.slideCount-1):a=b===!0?--a:a,d.slideCount<1||0>a||a>d.slideCount-1?!1:(d.unload(),c===!0?d.$slideTrack.children().remove():d.$slideTrack.children(this.options.slide).eq(a).remove(),d.$slides=d.$slideTrack.children(this.options.slide),d.$slideTrack.children(this.options.slide).detach(),d.$slideTrack.append(d.$slides),d.$slidesCache=d.$slides,void d.reinit())},b.prototype.setCSS=function(a){var d,e,b=this,c={};b.options.rtl===!0&&(a=-a),d="left"==b.positionProp?Math.ceil(a)+"px":"0px",e="top"==b.positionProp?Math.ceil(a)+"px":"0px",c[b.positionProp]=a,b.transformsEnabled===!1?b.$slideTrack.css(c):(c={},b.cssTransitions===!1?(c[b.animType]="translate("+d+", "+e+")",b.$slideTrack.css(c)):(c[b.animType]="translate3d("+d+", "+e+", 0px)",b.$slideTrack.css(c)))},b.prototype.setDimensions=function(){var a=this;a.options.vertical===!1?a.options.centerMode===!0&&a.$list.css({padding:"0px "+a.options.centerPadding}):(a.$list.height(a.$slides.first().outerHeight(!0)*a.options.slidesToShow),a.options.centerMode===!0&&a.$list.css({padding:a.options.centerPadding+" 0px"})),a.listWidth=a.$list.width(),a.listHeight=a.$list.height(),a.options.vertical===!1&&a.options.variableWidth===!1?(a.slideWidth=Math.ceil(a.listWidth/a.options.slidesToShow),a.$slideTrack.width(Math.ceil(a.slideWidth*a.$slideTrack.children(".slick-slide").length))):a.options.variableWidth===!0?a.$slideTrack.width(5e3*a.slideCount):(a.slideWidth=Math.ceil(a.listWidth),a.$slideTrack.height(Math.ceil(a.$slides.first().outerHeight(!0)*a.$slideTrack.children(".slick-slide").length)));var b=a.$slides.first().outerWidth(!0)-a.$slides.first().width();a.options.variableWidth===!1&&a.$slideTrack.children(".slick-slide").width(a.slideWidth-b)},b.prototype.setFade=function(){var c,b=this;b.$slides.each(function(d,e){c=b.slideWidth*d*-1,b.options.rtl===!0?a(e).css({position:"relative",right:c,top:0,zIndex:b.options.zIndex-2,opacity:0}):a(e).css({position:"relative",left:c,top:0,zIndex:b.options.zIndex-2,opacity:0})}),b.$slides.eq(b.currentSlide).css({zIndex:b.options.zIndex-1,opacity:1})},b.prototype.setHeight=function(){var a=this;if(1===a.options.slidesToShow&&a.options.adaptiveHeight===!0&&a.options.vertical===!1){var b=a.$slides.eq(a.currentSlide).outerHeight(!0);a.$list.css("height",b)}},b.prototype.setOption=b.prototype.slickSetOption=function(){var c,d,e,f,h,b=this,g=!1;if("object"===a.type(arguments[0])?(e=arguments[0],g=arguments[1],h="multiple"):"string"===a.type(arguments[0])&&(e=arguments[0],f=arguments[1],g=arguments[2],"responsive"===arguments[0]&&"array"===a.type(arguments[1])?h="responsive":"undefined"!=typeof arguments[1]&&(h="single")),"single"===h)b.options[e]=f;else if("multiple"===h)a.each(e,function(a,c){b.options[a]=c});else if("responsive"===h)for(d in f)if("array"!==a.type(b.options.responsive))b.options.responsive=[f[d]];else{for(c=b.options.responsive.length-1;c>=0;)b.options.responsive[c].breakpoint===f[d].breakpoint&&b.options.responsive.splice(c,1),c--;b.options.responsive.push(f[d])}g&&(b.unload(),b.reinit())},b.prototype.setPosition=function(){var a=this;a.setDimensions(),a.setHeight(),a.options.fade===!1?a.setCSS(a.getLeft(a.currentSlide)):a.setFade(),a.$slider.trigger("setPosition",[a])},b.prototype.setProps=function(){var a=this,b=document.body.style;a.positionProp=a.options.vertical===!0?"top":"left","top"===a.positionProp?a.$slider.addClass("slick-vertical"):a.$slider.removeClass("slick-vertical"),(void 0!==b.WebkitTransition||void 0!==b.MozTransition||void 0!==b.msTransition)&&a.options.useCSS===!0&&(a.cssTransitions=!0),a.options.fade&&("number"==typeof a.options.zIndex?a.options.zIndex<3&&(a.options.zIndex=3):a.options.zIndex=a.defaults.zIndex),void 0!==b.OTransform&&(a.animType="OTransform",a.transformType="-o-transform",a.transitionType="OTransition",void 0===b.perspectiveProperty&&void 0===b.webkitPerspective&&(a.animType=!1)),void 0!==b.MozTransform&&(a.animType="MozTransform",a.transformType="-moz-transform",a.transitionType="MozTransition",void 0===b.perspectiveProperty&&void 0===b.MozPerspective&&(a.animType=!1)),void 0!==b.webkitTransform&&(a.animType="webkitTransform",a.transformType="-webkit-transform",a.transitionType="webkitTransition",void 0===b.perspectiveProperty&&void 0===b.webkitPerspective&&(a.animType=!1)),void 0!==b.msTransform&&(a.animType="msTransform",a.transformType="-ms-transform",a.transitionType="msTransition",void 0===b.msTransform&&(a.animType=!1)),void 0!==b.transform&&a.animType!==!1&&(a.animType="transform",a.transformType="transform",a.transitionType="transition"),a.transformsEnabled=a.options.useTransform&&null!==a.animType&&a.animType!==!1},b.prototype.setSlideClasses=function(a){var c,d,e,f,b=this;d=b.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden","true"),b.$slides.eq(a).addClass("slick-current"),b.options.centerMode===!0?(c=Math.floor(b.options.slidesToShow/2),b.options.infinite===!0&&(a>=c&&a<=b.slideCount-1-c?b.$slides.slice(a-c,a+c+1).addClass("slick-active").attr("aria-hidden","false"):(e=b.options.slidesToShow+a,
d.slice(e-c+1,e+c+2).addClass("slick-active").attr("aria-hidden","false")),0===a?d.eq(d.length-1-b.options.slidesToShow).addClass("slick-center"):a===b.slideCount-1&&d.eq(b.options.slidesToShow).addClass("slick-center")),b.$slides.eq(a).addClass("slick-center")):a>=0&&a<=b.slideCount-b.options.slidesToShow?b.$slides.slice(a,a+b.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"):d.length<=b.options.slidesToShow?d.addClass("slick-active").attr("aria-hidden","false"):(f=b.slideCount%b.options.slidesToShow,e=b.options.infinite===!0?b.options.slidesToShow+a:a,b.options.slidesToShow==b.options.slidesToScroll&&b.slideCount-a<b.options.slidesToShow?d.slice(e-(b.options.slidesToShow-f),e+f).addClass("slick-active").attr("aria-hidden","false"):d.slice(e,e+b.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false")),"ondemand"===b.options.lazyLoad&&b.lazyLoad()},b.prototype.setupInfinite=function(){var c,d,e,b=this;if(b.options.fade===!0&&(b.options.centerMode=!1),b.options.infinite===!0&&b.options.fade===!1&&(d=null,b.slideCount>b.options.slidesToShow)){for(e=b.options.centerMode===!0?b.options.slidesToShow+1:b.options.slidesToShow,c=b.slideCount;c>b.slideCount-e;c-=1)d=c-1,a(b.$slides[d]).clone(!0).attr("id","").attr("data-slick-index",d-b.slideCount).prependTo(b.$slideTrack).addClass("slick-cloned");for(c=0;e>c;c+=1)d=c,a(b.$slides[d]).clone(!0).attr("id","").attr("data-slick-index",d+b.slideCount).appendTo(b.$slideTrack).addClass("slick-cloned");b.$slideTrack.find(".slick-cloned").find("[id]").each(function(){a(this).attr("id","")})}},b.prototype.interrupt=function(a){var b=this;a||b.autoPlay(),b.interrupted=a},b.prototype.selectHandler=function(b){var c=this,d=a(b.target).is(".slick-slide")?a(b.target):a(b.target).parents(".slick-slide"),e=parseInt(d.attr("data-slick-index"));return e||(e=0),c.slideCount<=c.options.slidesToShow?(c.setSlideClasses(e),void c.asNavFor(e)):void c.slideHandler(e)},b.prototype.slideHandler=function(a,b,c){var d,e,f,g,j,h=null,i=this;return b=b||!1,i.animating===!0&&i.options.waitForAnimate===!0||i.options.fade===!0&&i.currentSlide===a||i.slideCount<=i.options.slidesToShow?void 0:(b===!1&&i.asNavFor(a),d=a,h=i.getLeft(d),g=i.getLeft(i.currentSlide),i.currentLeft=null===i.swipeLeft?g:i.swipeLeft,i.options.infinite===!1&&i.options.centerMode===!1&&(0>a||a>i.getDotCount()*i.options.slidesToScroll)?void(i.options.fade===!1&&(d=i.currentSlide,c!==!0?i.animateSlide(g,function(){i.postSlide(d)}):i.postSlide(d))):i.options.infinite===!1&&i.options.centerMode===!0&&(0>a||a>i.slideCount-i.options.slidesToScroll)?void(i.options.fade===!1&&(d=i.currentSlide,c!==!0?i.animateSlide(g,function(){i.postSlide(d)}):i.postSlide(d))):(i.options.autoplay&&clearInterval(i.autoPlayTimer),e=0>d?i.slideCount%i.options.slidesToScroll!==0?i.slideCount-i.slideCount%i.options.slidesToScroll:i.slideCount+d:d>=i.slideCount?i.slideCount%i.options.slidesToScroll!==0?0:d-i.slideCount:d,i.animating=!0,i.$slider.trigger("beforeChange",[i,i.currentSlide,e]),f=i.currentSlide,i.currentSlide=e,i.setSlideClasses(i.currentSlide),i.options.asNavFor&&(j=i.getNavTarget(),j=j.slick("getSlick"),j.slideCount<=j.options.slidesToShow&&j.setSlideClasses(i.currentSlide)),i.updateDots(),i.updateArrows(),i.options.fade===!0?(c!==!0?(i.fadeSlideOut(f),i.fadeSlide(e,function(){i.postSlide(e)})):i.postSlide(e),void i.animateHeight()):void(c!==!0?i.animateSlide(h,function(){i.postSlide(e)}):i.postSlide(e))))},b.prototype.startLoad=function(){var a=this;a.options.arrows===!0&&a.slideCount>a.options.slidesToShow&&(a.$prevArrow.hide(),a.$nextArrow.hide()),a.options.dots===!0&&a.slideCount>a.options.slidesToShow&&a.$dots.hide(),a.$slider.addClass("slick-loading")},b.prototype.swipeDirection=function(){var a,b,c,d,e=this;return a=e.touchObject.startX-e.touchObject.curX,b=e.touchObject.startY-e.touchObject.curY,c=Math.atan2(b,a),d=Math.round(180*c/Math.PI),0>d&&(d=360-Math.abs(d)),45>=d&&d>=0?e.options.rtl===!1?"left":"right":360>=d&&d>=315?e.options.rtl===!1?"left":"right":d>=135&&225>=d?e.options.rtl===!1?"right":"left":e.options.verticalSwiping===!0?d>=35&&135>=d?"down":"up":"vertical"},b.prototype.swipeEnd=function(a){var c,d,b=this;if(b.dragging=!1,b.interrupted=!1,b.shouldClick=b.touchObject.swipeLength>10?!1:!0,void 0===b.touchObject.curX)return!1;if(b.touchObject.edgeHit===!0&&b.$slider.trigger("edge",[b,b.swipeDirection()]),b.touchObject.swipeLength>=b.touchObject.minSwipe){switch(d=b.swipeDirection()){case"left":case"down":c=b.options.swipeToSlide?b.checkNavigable(b.currentSlide+b.getSlideCount()):b.currentSlide+b.getSlideCount(),b.currentDirection=0;break;case"right":case"up":c=b.options.swipeToSlide?b.checkNavigable(b.currentSlide-b.getSlideCount()):b.currentSlide-b.getSlideCount(),b.currentDirection=1}"vertical"!=d&&(b.slideHandler(c),b.touchObject={},b.$slider.trigger("swipe",[b,d]))}else b.touchObject.startX!==b.touchObject.curX&&(b.slideHandler(b.currentSlide),b.touchObject={})},b.prototype.swipeHandler=function(a){var b=this;if(!(b.options.swipe===!1||"ontouchend"in document&&b.options.swipe===!1||b.options.draggable===!1&&-1!==a.type.indexOf("mouse")))switch(b.touchObject.fingerCount=a.originalEvent&&void 0!==a.originalEvent.touches?a.originalEvent.touches.length:1,b.touchObject.minSwipe=b.listWidth/b.options.touchThreshold,b.options.verticalSwiping===!0&&(b.touchObject.minSwipe=b.listHeight/b.options.touchThreshold),a.data.action){case"start":b.swipeStart(a);break;case"move":b.swipeMove(a);break;case"end":b.swipeEnd(a)}},b.prototype.swipeMove=function(a){var d,e,f,g,h,b=this;return h=void 0!==a.originalEvent?a.originalEvent.touches:null,!b.dragging||h&&1!==h.length?!1:(d=b.getLeft(b.currentSlide),b.touchObject.curX=void 0!==h?h[0].pageX:a.clientX,b.touchObject.curY=void 0!==h?h[0].pageY:a.clientY,b.touchObject.swipeLength=Math.round(Math.sqrt(Math.pow(b.touchObject.curX-b.touchObject.startX,2))),b.options.verticalSwiping===!0&&(b.touchObject.swipeLength=Math.round(Math.sqrt(Math.pow(b.touchObject.curY-b.touchObject.startY,2)))),e=b.swipeDirection(),"vertical"!==e?(void 0!==a.originalEvent&&b.touchObject.swipeLength>4&&a.preventDefault(),g=(b.options.rtl===!1?1:-1)*(b.touchObject.curX>b.touchObject.startX?1:-1),b.options.verticalSwiping===!0&&(g=b.touchObject.curY>b.touchObject.startY?1:-1),f=b.touchObject.swipeLength,b.touchObject.edgeHit=!1,b.options.infinite===!1&&(0===b.currentSlide&&"right"===e||b.currentSlide>=b.getDotCount()&&"left"===e)&&(f=b.touchObject.swipeLength*b.options.edgeFriction,b.touchObject.edgeHit=!0),b.options.vertical===!1?b.swipeLeft=d+f*g:b.swipeLeft=d+f*(b.$list.height()/b.listWidth)*g,b.options.verticalSwiping===!0&&(b.swipeLeft=d+f*g),b.options.fade===!0||b.options.touchMove===!1?!1:b.animating===!0?(b.swipeLeft=null,!1):void b.setCSS(b.swipeLeft)):void 0)},b.prototype.swipeStart=function(a){var c,b=this;return b.interrupted=!0,1!==b.touchObject.fingerCount||b.slideCount<=b.options.slidesToShow?(b.touchObject={},!1):(void 0!==a.originalEvent&&void 0!==a.originalEvent.touches&&(c=a.originalEvent.touches[0]),b.touchObject.startX=b.touchObject.curX=void 0!==c?c.pageX:a.clientX,b.touchObject.startY=b.touchObject.curY=void 0!==c?c.pageY:a.clientY,void(b.dragging=!0))},b.prototype.unfilterSlides=b.prototype.slickUnfilter=function(){var a=this;null!==a.$slidesCache&&(a.unload(),a.$slideTrack.children(this.options.slide).detach(),a.$slidesCache.appendTo(a.$slideTrack),a.reinit())},b.prototype.unload=function(){var b=this;a(".slick-cloned",b.$slider).remove(),b.$dots&&b.$dots.remove(),b.$prevArrow&&b.htmlExpr.test(b.options.prevArrow)&&b.$prevArrow.remove(),b.$nextArrow&&b.htmlExpr.test(b.options.nextArrow)&&b.$nextArrow.remove(),b.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden","true").css("width","")},b.prototype.unslick=function(a){var b=this;b.$slider.trigger("unslick",[b,a]),b.destroy()},b.prototype.updateArrows=function(){var b,a=this;b=Math.floor(a.options.slidesToShow/2),a.options.arrows===!0&&a.slideCount>a.options.slidesToShow&&!a.options.infinite&&(a.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false"),a.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false"),0===a.currentSlide?(a.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true"),a.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false")):a.currentSlide>=a.slideCount-a.options.slidesToShow&&a.options.centerMode===!1?(a.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),a.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")):a.currentSlide>=a.slideCount-1&&a.options.centerMode===!0&&(a.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),a.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")))},b.prototype.updateDots=function(){var a=this;null!==a.$dots&&(a.$dots.find("li").removeClass("slick-active").attr("aria-hidden","true"),a.$dots.find("li").eq(Math.floor(a.currentSlide/a.options.slidesToScroll)).addClass("slick-active").attr("aria-hidden","false"))},b.prototype.visibility=function(){var a=this;a.options.autoplay&&(document[a.hidden]?a.interrupted=!0:a.interrupted=!1)},a.fn.slick=function(){var f,g,a=this,c=arguments[0],d=Array.prototype.slice.call(arguments,1),e=a.length;for(f=0;e>f;f++)if("object"==typeof c||"undefined"==typeof c?a[f].slick=new b(a[f],c):g=a[f].slick[c].apply(a[f].slick,d),"undefined"!=typeof g)return g;return a}});

/***/ }),

/***/ "./node_modules/svg-injector/dist/svg-injector.min.js":
/*!************************************************************!*\
  !*** ./node_modules/svg-injector/dist/svg-injector.min.js ***!
  \************************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;/**
 * SVGInjector v1.1.3 - Fast, caching, dynamic inline SVG DOM injection library
 * https://github.com/iconic/SVGInjector
 *
 * Copyright (c) 2014-2015 Waybury <hello@waybury.com>
 * @license MIT
 */
!function(t,e){"use strict";function r(t){t=t.split(" ");for(var e={},r=t.length,n=[];r--;)e.hasOwnProperty(t[r])||(e[t[r]]=1,n.unshift(t[r]));return n.join(" ")}var n="file:"===t.location.protocol,i=e.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure","1.1"),o=Array.prototype.forEach||function(t,e){if(void 0===this||null===this||"function"!=typeof t)throw new TypeError;var r,n=this.length>>>0;for(r=0;n>r;++r)r in this&&t.call(e,this[r],r,this)},a={},l=0,s=[],u=[],c={},f=function(t){return t.cloneNode(!0)},p=function(t,e){u[t]=u[t]||[],u[t].push(e)},d=function(t){for(var e=0,r=u[t].length;r>e;e++)!function(e){setTimeout(function(){u[t][e](f(a[t]))},0)}(e)},v=function(e,r){if(void 0!==a[e])a[e]instanceof SVGSVGElement?r(f(a[e])):p(e,r);else{if(!t.XMLHttpRequest)return r("Browser does not support XMLHttpRequest"),!1;a[e]={},p(e,r);var i=new XMLHttpRequest;i.onreadystatechange=function(){if(4===i.readyState){if(404===i.status||null===i.responseXML)return r("Unable to load SVG file: "+e),n&&r("Note: SVG injection ajax calls do not work locally without adjusting security setting in your browser. Or consider using a local webserver."),r(),!1;if(!(200===i.status||n&&0===i.status))return r("There was a problem injecting the SVG: "+i.status+" "+i.statusText),!1;if(i.responseXML instanceof Document)a[e]=i.responseXML.documentElement;else if(DOMParser&&DOMParser instanceof Function){var t;try{var o=new DOMParser;t=o.parseFromString(i.responseText,"text/xml")}catch(l){t=void 0}if(!t||t.getElementsByTagName("parsererror").length)return r("Unable to parse SVG file: "+e),!1;a[e]=t.documentElement}d(e)}},i.open("GET",e),i.overrideMimeType&&i.overrideMimeType("text/xml"),i.send()}},h=function(e,n,a,u){var f=e.getAttribute("data-src")||e.getAttribute("src");if(!/\.svg/i.test(f))return void u("Attempted to inject a file with a non-svg extension: "+f);if(!i){var p=e.getAttribute("data-fallback")||e.getAttribute("data-png");return void(p?(e.setAttribute("src",p),u(null)):a?(e.setAttribute("src",a+"/"+f.split("/").pop().replace(".svg",".png")),u(null)):u("This browser does not support SVG and no PNG fallback was defined."))}-1===s.indexOf(e)&&(s.push(e),e.setAttribute("src",""),v(f,function(i){if("undefined"==typeof i||"string"==typeof i)return u(i),!1;var a=e.getAttribute("id");a&&i.setAttribute("id",a);var p=e.getAttribute("title");p&&i.setAttribute("title",p);var d=[].concat(i.getAttribute("class")||[],"injected-svg",e.getAttribute("class")||[]).join(" ");i.setAttribute("class",r(d));var v=e.getAttribute("style");v&&i.setAttribute("style",v);var h=[].filter.call(e.attributes,function(t){return/^data-\w[\w\-]*$/.test(t.name)});o.call(h,function(t){t.name&&t.value&&i.setAttribute(t.name,t.value)});var g,m,b,y,A,w={clipPath:["clip-path"],"color-profile":["color-profile"],cursor:["cursor"],filter:["filter"],linearGradient:["fill","stroke"],marker:["marker","marker-start","marker-mid","marker-end"],mask:["mask"],pattern:["fill","stroke"],radialGradient:["fill","stroke"]};Object.keys(w).forEach(function(t){g=t,b=w[t],m=i.querySelectorAll("defs "+g+"[id]");for(var e=0,r=m.length;r>e;e++){y=m[e].id,A=y+"-"+l;var n;o.call(b,function(t){n=i.querySelectorAll("["+t+'*="'+y+'"]');for(var e=0,r=n.length;r>e;e++)n[e].setAttribute(t,"url(#"+A+")")}),m[e].id=A}}),i.removeAttribute("xmlns:a");for(var x,S,k=i.querySelectorAll("script"),j=[],G=0,T=k.length;T>G;G++)S=k[G].getAttribute("type"),S&&"application/ecmascript"!==S&&"application/javascript"!==S||(x=k[G].innerText||k[G].textContent,j.push(x),i.removeChild(k[G]));if(j.length>0&&("always"===n||"once"===n&&!c[f])){for(var M=0,V=j.length;V>M;M++)new Function(j[M])(t);c[f]=!0}var E=i.querySelectorAll("style");o.call(E,function(t){t.textContent+=""}),e.parentNode.replaceChild(i,e),delete s[s.indexOf(e)],e=null,l++,u(i)}))},g=function(t,e,r){e=e||{};var n=e.evalScripts||"always",i=e.pngFallback||!1,a=e.each;if(void 0!==t.length){var l=0;o.call(t,function(e){h(e,n,i,function(e){a&&"function"==typeof a&&a(e),r&&t.length===++l&&r(l)})})}else t?h(t,n,i,function(e){a&&"function"==typeof a&&a(e),r&&r(1),t=null}):r&&r(0)}; true&&"object"==typeof module.exports?module.exports=exports=g: true?!(__WEBPACK_AMD_DEFINE_RESULT__ = (function(){return g}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)):0}(window,document);
//# sourceMappingURL=svg-injector.map.js

/***/ }),

/***/ "./node_modules/sweetalert2/dist/sweetalert2.min.js":
/*!**********************************************************!*\
  !*** ./node_modules/sweetalert2/dist/sweetalert2.min.js ***!
  \**********************************************************/
/***/ (function(module) {

!function(t,e){ true?module.exports=e():0}(this,function(){"use strict";function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function a(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function c(t,e,n){return e&&o(t.prototype,e),n&&o(t,n),t}function s(){return(s=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o])}return t}).apply(this,arguments)}function u(t){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function l(t,e){return(l=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function d(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(t){return!1}}function i(t,e,n){return(i=d()?Reflect.construct:function(t,e,n){var o=[null];o.push.apply(o,e);var i=new(Function.bind.apply(t,o));return n&&l(i,n.prototype),i}).apply(null,arguments)}function p(t,e){return!e||"object"!=typeof e&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function f(t,e,n){return(f="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var o=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=u(t)););return t}(t,e);if(o){var i=Object.getOwnPropertyDescriptor(o,e);return i.get?i.get.call(n):i.value}})(t,e,n||t)}function m(e){return Object.keys(e).map(function(t){return e[t]})}function h(t){return Array.prototype.slice.call(t)}function g(t,e){var n;n='"'.concat(t,'" is deprecated and will be removed in the next major release. Please use "').concat(e,'" instead.'),-1===z.indexOf(n)&&(z.push(n),_(n))}function v(t){return t&&"function"==typeof t.toPromise}function b(t){return v(t)?t.toPromise():Promise.resolve(t)}function y(t){return t&&Promise.resolve(t)===t}function w(t){return t instanceof Element||"object"===r(e=t)&&e.jquery;var e}function t(t){var e={};for(var n in t)e[t[n]]="swal2-"+t[n];return e}function C(t){var e=Q();return e?e.querySelector(t):null}function e(t){return C(".".concat(t))}function n(){var t=$();return h(t.querySelectorAll(".".concat(Y.icon)))}function k(){var t=n().filter(function(t){return vt(t)});return t.length?t[0]:null}function x(){return e(Y.title)}function P(){return e(Y.content)}function A(){return e(Y.image)}function B(){return e(Y["progress-steps"])}function S(){return e(Y["validation-message"])}function E(){return C(".".concat(Y.actions," .").concat(Y.confirm))}function O(){return C(".".concat(Y.actions," .").concat(Y.cancel))}function T(){return e(Y.actions)}function L(){return e(Y.header)}function I(){return e(Y.footer)}function j(){return e(Y["timer-progress-bar"])}function q(){return e(Y.close)}function V(){var t=h($().querySelectorAll('[tabindex]:not([tabindex="-1"]):not([tabindex="0"])')).sort(function(t,e){return t=parseInt(t.getAttribute("tabindex")),(e=parseInt(e.getAttribute("tabindex")))<t?1:t<e?-1:0}),e=h($().querySelectorAll('\n  a[href],\n  area[href],\n  input:not([disabled]),\n  select:not([disabled]),\n  textarea:not([disabled]),\n  button:not([disabled]),\n  iframe,\n  object,\n  embed,\n  [tabindex="0"],\n  [contenteditable],\n  audio[controls],\n  video[controls],\n  summary\n')).filter(function(t){return"-1"!==t.getAttribute("tabindex")});return function(t){for(var e=[],n=0;n<t.length;n++)-1===e.indexOf(t[n])&&e.push(t[n]);return e}(t.concat(e)).filter(function(t){return vt(t)})}function M(){return!J()&&!document.body.classList.contains(Y["no-backdrop"])}function R(){return $().hasAttribute("data-loading")}function H(e,t){var n;e.textContent="",t&&(n=(new DOMParser).parseFromString(t,"text/html"),h(n.querySelector("head").childNodes).forEach(function(t){e.appendChild(t)}),h(n.querySelector("body").childNodes).forEach(function(t){e.appendChild(t)}))}function D(t,e){if(e){for(var n=e.split(/\s+/),o=0;o<n.length;o++)if(!t.classList.contains(n[o]))return;return 1}}function N(t,e,n){var o,i;if(i=e,h((o=t).classList).forEach(function(t){-1===m(Y).indexOf(t)&&-1===m(Z).indexOf(t)&&-1===m(i.showClass).indexOf(t)&&o.classList.remove(t)}),e.customClass&&e.customClass[n]){if("string"!=typeof e.customClass[n]&&!e.customClass[n].forEach)return _("Invalid type of customClass.".concat(n,'! Expected string or iterable object, got "').concat(r(e.customClass[n]),'"'));mt(t,e.customClass[n])}}var U="SweetAlert2:",_=function(t){console.warn("".concat(U," ").concat(t))},F=function(t){console.error("".concat(U," ").concat(t))},z=[],W=function(t){return"function"==typeof t?t():t},K=Object.freeze({cancel:"cancel",backdrop:"backdrop",close:"close",esc:"esc",timer:"timer"}),Y=t(["container","shown","height-auto","iosfix","popup","modal","no-backdrop","no-transition","toast","toast-shown","toast-column","show","hide","close","title","header","content","html-container","actions","confirm","cancel","footer","icon","icon-content","image","input","file","range","select","radio","checkbox","label","textarea","inputerror","validation-message","progress-steps","active-progress-step","progress-step","progress-step-line","loading","styled","top","top-start","top-end","top-left","top-right","center","center-start","center-end","center-left","center-right","bottom","bottom-start","bottom-end","bottom-left","bottom-right","grow-row","grow-column","grow-fullscreen","rtl","timer-progress-bar","timer-progress-bar-container","scrollbar-measure","icon-success","icon-warning","icon-info","icon-question","icon-error"]),Z=t(["success","warning","info","question","error"]),Q=function(){return document.body.querySelector(".".concat(Y.container))},$=function(){return e(Y.popup)},J=function(){return document.body.classList.contains(Y["toast-shown"])},X={previousBodyPadding:null};function G(t,e){if(!e)return null;switch(e){case"select":case"textarea":case"file":return gt(t,Y[e]);case"checkbox":return t.querySelector(".".concat(Y.checkbox," input"));case"radio":return t.querySelector(".".concat(Y.radio," input:checked"))||t.querySelector(".".concat(Y.radio," input:first-child"));case"range":return t.querySelector(".".concat(Y.range," input"));default:return gt(t,Y.input)}}function tt(t){var e;t.focus(),"file"!==t.type&&(e=t.value,t.value="",t.value=e)}function et(t,e,n){t&&e&&("string"==typeof e&&(e=e.split(/\s+/).filter(Boolean)),e.forEach(function(e){t.forEach?t.forEach(function(t){n?t.classList.add(e):t.classList.remove(e)}):n?t.classList.add(e):t.classList.remove(e)}))}function nt(t,e,n){n||0===parseInt(n)?t.style[e]="number"==typeof n?"".concat(n,"px"):n:t.style.removeProperty(e)}function ot(t,e){var n=1<arguments.length&&void 0!==e?e:"flex";t.style.opacity="",t.style.display=n}function it(t){t.style.opacity="",t.style.display="none"}function rt(t,e,n){e?ot(t,n):it(t)}function at(t){return!!(t.scrollHeight>t.clientHeight)}function ct(t){var e=window.getComputedStyle(t),n=parseFloat(e.getPropertyValue("animation-duration")||"0"),o=parseFloat(e.getPropertyValue("transition-duration")||"0");return 0<n||0<o}function st(t,e){var n=1<arguments.length&&void 0!==e&&e,o=j();vt(o)&&(n&&(o.style.transition="none",o.style.width="100%"),setTimeout(function(){o.style.transition="width ".concat(t/1e3,"s linear"),o.style.width="0%"},10))}function ut(){return"undefined"==typeof window||"undefined"==typeof document}function lt(t){ln.isVisible()&&ft!==t.target.value&&ln.resetValidationMessage(),ft=t.target.value}function dt(t,e){t instanceof HTMLElement?e.appendChild(t):"object"===r(t)?wt(t,e):t&&H(e,t)}function pt(t,e){var n=T(),o=E(),i=O();e.showConfirmButton||e.showCancelButton||it(n),N(n,e,"actions"),xt(o,"confirm",e),xt(i,"cancel",e),e.buttonsStyling?function(t,e,n){mt([t,e],Y.styled),n.confirmButtonColor&&(t.style.backgroundColor=n.confirmButtonColor);n.cancelButtonColor&&(e.style.backgroundColor=n.cancelButtonColor);{var o;R()||(o=window.getComputedStyle(t).getPropertyValue("background-color"),t.style.borderLeftColor=o,t.style.borderRightColor=o)}}(o,i,e):(ht([o,i],Y.styled),o.style.backgroundColor=o.style.borderLeftColor=o.style.borderRightColor="",i.style.backgroundColor=i.style.borderLeftColor=i.style.borderRightColor=""),e.reverseButtons&&o.parentNode.insertBefore(i,o)}var ft,mt=function(t,e){et(t,e,!0)},ht=function(t,e){et(t,e,!1)},gt=function(t,e){for(var n=0;n<t.childNodes.length;n++)if(D(t.childNodes[n],e))return t.childNodes[n]},vt=function(t){return!(!t||!(t.offsetWidth||t.offsetHeight||t.getClientRects().length))},bt='\n <div aria-labelledby="'.concat(Y.title,'" aria-describedby="').concat(Y.content,'" class="').concat(Y.popup,'" tabindex="-1">\n   <div class="').concat(Y.header,'">\n     <ul class="').concat(Y["progress-steps"],'"></ul>\n     <div class="').concat(Y.icon," ").concat(Z.error,'"></div>\n     <div class="').concat(Y.icon," ").concat(Z.question,'"></div>\n     <div class="').concat(Y.icon," ").concat(Z.warning,'"></div>\n     <div class="').concat(Y.icon," ").concat(Z.info,'"></div>\n     <div class="').concat(Y.icon," ").concat(Z.success,'"></div>\n     <img class="').concat(Y.image,'" />\n     <h2 class="').concat(Y.title,'" id="').concat(Y.title,'"></h2>\n     <button type="button" class="').concat(Y.close,'"></button>\n   </div>\n   <div class="').concat(Y.content,'">\n     <div id="').concat(Y.content,'" class="').concat(Y["html-container"],'"></div>\n     <input class="').concat(Y.input,'" />\n     <input type="file" class="').concat(Y.file,'" />\n     <div class="').concat(Y.range,'">\n       <input type="range" />\n       <output></output>\n     </div>\n     <select class="').concat(Y.select,'"></select>\n     <div class="').concat(Y.radio,'"></div>\n     <label for="').concat(Y.checkbox,'" class="').concat(Y.checkbox,'">\n       <input type="checkbox" />\n       <span class="').concat(Y.label,'"></span>\n     </label>\n     <textarea class="').concat(Y.textarea,'"></textarea>\n     <div class="').concat(Y["validation-message"],'" id="').concat(Y["validation-message"],'"></div>\n   </div>\n   <div class="').concat(Y.actions,'">\n     <button type="button" class="').concat(Y.confirm,'">OK</button>\n     <button type="button" class="').concat(Y.cancel,'">Cancel</button>\n   </div>\n   <div class="').concat(Y.footer,'"></div>\n   <div class="').concat(Y["timer-progress-bar-container"],'">\n     <div class="').concat(Y["timer-progress-bar"],'"></div>\n   </div>\n </div>\n').replace(/(^|\n)\s*/g,""),yt=function(t){var e,n,o,i,r,a,c,s,u,l,d,p,f,m,h,g=!!(e=Q())&&(e.parentNode.removeChild(e),ht([document.documentElement,document.body],[Y["no-backdrop"],Y["toast-shown"],Y["has-column"]]),!0);ut()?F("SweetAlert2 requires document to initialize"):((n=document.createElement("div")).className=Y.container,g&&mt(n,Y["no-transition"]),H(n,bt),(o="string"==typeof(i=t.target)?document.querySelector(i):i).appendChild(n),r=t,(a=$()).setAttribute("role",r.toast?"alert":"dialog"),a.setAttribute("aria-live",r.toast?"polite":"assertive"),r.toast||a.setAttribute("aria-modal","true"),c=o,"rtl"===window.getComputedStyle(c).direction&&mt(Q(),Y.rtl),s=P(),u=gt(s,Y.input),l=gt(s,Y.file),d=s.querySelector(".".concat(Y.range," input")),p=s.querySelector(".".concat(Y.range," output")),f=gt(s,Y.select),m=s.querySelector(".".concat(Y.checkbox," input")),h=gt(s,Y.textarea),u.oninput=lt,l.onchange=lt,f.onchange=lt,m.onchange=lt,h.oninput=lt,d.oninput=function(t){lt(t),p.value=d.value},d.onchange=function(t){lt(t),d.nextSibling.value=d.value})},wt=function(t,e){t.jquery?Ct(e,t):H(e,t.toString())},Ct=function(t,e){if(t.textContent="",0 in e)for(var n=0;n in e;n++)t.appendChild(e[n].cloneNode(!0));else t.appendChild(e.cloneNode(!0))},kt=function(){if(ut())return!1;var t=document.createElement("div"),e={WebkitAnimation:"webkitAnimationEnd",OAnimation:"oAnimationEnd oanimationend",animation:"animationend"};for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)&&void 0!==t.style[n])return e[n];return!1}();function xt(t,e,n){var o;rt(t,n["show".concat((o=e).charAt(0).toUpperCase()+o.slice(1),"Button")],"inline-block"),H(t,n["".concat(e,"ButtonText")]),t.setAttribute("aria-label",n["".concat(e,"ButtonAriaLabel")]),t.className=Y[e],N(t,n,"".concat(e,"Button")),mt(t,n["".concat(e,"ButtonClass")])}function Pt(t,e){var n,o,i,r,a,c,s,u,l=Q();l&&(n=l,"string"==typeof(o=e.backdrop)?n.style.background=o:o||mt([document.documentElement,document.body],Y["no-backdrop"]),!e.backdrop&&e.allowOutsideClick&&_('"allowOutsideClick" parameter requires `backdrop` parameter to be set to `true`'),i=l,(r=e.position)in Y?mt(i,Y[r]):(_('The "position" parameter is not valid, defaulting to "center"'),mt(i,Y.center)),a=l,!(c=e.grow)||"string"!=typeof c||(s="grow-".concat(c))in Y&&mt(a,Y[s]),N(l,e,"container"),(u=document.body.getAttribute("data-swal2-queue-step"))&&(l.setAttribute("data-queue-step",u),document.body.removeAttribute("data-swal2-queue-step")))}function At(t,e){t.placeholder&&!e.inputPlaceholder||(t.placeholder=e.inputPlaceholder)}var Bt={promise:new WeakMap,innerParams:new WeakMap,domCache:new WeakMap},St=["input","file","range","select","radio","checkbox","textarea"],Et=function(t){if(!It[t.input])return F('Unexpected type of input! Expected "text", "email", "password", "number", "tel", "select", "radio", "checkbox", "textarea", "file" or "url", got "'.concat(t.input,'"'));var e=Lt(t.input),n=It[t.input](e,t);ot(n),setTimeout(function(){tt(n)})},Ot=function(t,e){var n=G(P(),t);if(n)for(var o in!function(t){for(var e=0;e<t.attributes.length;e++){var n=t.attributes[e].name;-1===["type","value","style"].indexOf(n)&&t.removeAttribute(n)}}(n),e)"range"===t&&"placeholder"===o||n.setAttribute(o,e[o])},Tt=function(t){var e=Lt(t.input);t.customClass&&mt(e,t.customClass.input)},Lt=function(t){var e=Y[t]?Y[t]:Y.input;return gt(P(),e)},It={};It.text=It.email=It.password=It.number=It.tel=It.url=function(t,e){return"string"==typeof e.inputValue||"number"==typeof e.inputValue?t.value=e.inputValue:y(e.inputValue)||_('Unexpected type of inputValue! Expected "string", "number" or "Promise", got "'.concat(r(e.inputValue),'"')),At(t,e),t.type=e.input,t},It.file=function(t,e){return At(t,e),t},It.range=function(t,e){var n=t.querySelector("input"),o=t.querySelector("output");return n.value=e.inputValue,n.type=e.input,o.value=e.inputValue,t},It.select=function(t,e){var n;return t.textContent="",e.inputPlaceholder&&(n=document.createElement("option"),H(n,e.inputPlaceholder),n.value="",n.disabled=!0,n.selected=!0,t.appendChild(n)),t},It.radio=function(t){return t.textContent="",t},It.checkbox=function(t,e){var n=G(P(),"checkbox");n.value=1,n.id=Y.checkbox,n.checked=Boolean(e.inputValue);var o=t.querySelector("span");return H(o,e.inputPlaceholder),t},It.textarea=function(e,t){var n,o;return e.value=t.inputValue,At(e,t),"MutationObserver"in window&&(n=parseInt(window.getComputedStyle($()).width),o=parseInt(window.getComputedStyle($()).paddingLeft)+parseInt(window.getComputedStyle($()).paddingRight),new MutationObserver(function(){var t=e.offsetWidth+o;$().style.width=n<t?"".concat(t,"px"):null}).observe(e,{attributes:!0,attributeFilter:["style"]})),e};function jt(t,e){var n,o,i,r,a,c=P().querySelector("#".concat(Y.content));e.html?(dt(e.html,c),ot(c,"block")):e.text?(c.textContent=e.text,ot(c,"block")):it(c),n=t,o=e,i=P(),r=Bt.innerParams.get(n),a=!r||o.input!==r.input,St.forEach(function(t){var e=Y[t],n=gt(i,e);Ot(t,o.inputAttributes),n.className=e,a&&it(n)}),o.input&&(a&&Et(o),Tt(o)),N(P(),e,"content")}function qt(){return Q()&&Q().getAttribute("data-queue-step")}function Vt(t,s){var u=B();if(!s.progressSteps||0===s.progressSteps.length)return it(u),0;ot(u),u.textContent="";var l=parseInt(void 0===s.currentProgressStep?qt():s.currentProgressStep);l>=s.progressSteps.length&&_("Invalid currentProgressStep parameter, it should be less than progressSteps.length (currentProgressStep like JS arrays starts from 0)"),s.progressSteps.forEach(function(t,e){var n,o,i,r,a,c=(n=t,o=document.createElement("li"),mt(o,Y["progress-step"]),H(o,n),o);u.appendChild(c),e===l&&mt(c,Y["active-progress-step"]),e!==s.progressSteps.length-1&&(r=s,a=document.createElement("li"),mt(a,Y["progress-step-line"]),r.progressStepsDistance&&(a.style.width=r.progressStepsDistance),i=a,u.appendChild(i))})}function Mt(t,e){var n,o,i,r,a,c,s,u,l=L();N(l,e,"header"),Vt(0,e),n=t,o=e,(r=Bt.innerParams.get(n))&&o.icon===r.icon&&k()?N(k(),o,"icon"):(Dt(),o.icon&&(-1!==Object.keys(Z).indexOf(o.icon)?(i=C(".".concat(Y.icon,".").concat(Z[o.icon])),ot(i),Ut(i,o),Nt(),N(i,o,"icon"),mt(i,o.showClass.icon)):F('Unknown icon! Expected "success", "error", "warning", "info" or "question", got "'.concat(o.icon,'"')))),function(t){var e=A();if(!t.imageUrl)return it(e);ot(e,""),e.setAttribute("src",t.imageUrl),e.setAttribute("alt",t.imageAlt),nt(e,"width",t.imageWidth),nt(e,"height",t.imageHeight),e.className=Y.image,N(e,t,"image")}(e),a=e,c=x(),rt(c,a.title||a.titleText),a.title&&dt(a.title,c),a.titleText&&(c.innerText=a.titleText),N(c,a,"title"),s=e,u=q(),H(u,s.closeButtonHtml),N(u,s,"closeButton"),rt(u,s.showCloseButton),u.setAttribute("aria-label",s.closeButtonAriaLabel)}function Rt(t,e){var n,o,i,r;n=e,o=$(),nt(o,"width",n.width),nt(o,"padding",n.padding),n.background&&(o.style.background=n.background),zt(o,n),Pt(0,e),Mt(t,e),jt(t,e),pt(0,e),i=e,r=I(),rt(r,i.footer),i.footer&&dt(i.footer,r),N(r,i,"footer"),"function"==typeof e.onRender&&e.onRender($())}function Ht(){return E()&&E().click()}var Dt=function(){for(var t=n(),e=0;e<t.length;e++)it(t[e])},Nt=function(){for(var t=$(),e=window.getComputedStyle(t).getPropertyValue("background-color"),n=t.querySelectorAll("[class^=swal2-success-circular-line], .swal2-success-fix"),o=0;o<n.length;o++)n[o].style.backgroundColor=e},Ut=function(t,e){t.textContent="",e.iconHtml?H(t,_t(e.iconHtml)):"success"===e.icon?H(t,'\n      <div class="swal2-success-circular-line-left"></div>\n      <span class="swal2-success-line-tip"></span> <span class="swal2-success-line-long"></span>\n      <div class="swal2-success-ring"></div> <div class="swal2-success-fix"></div>\n      <div class="swal2-success-circular-line-right"></div>\n    '):"error"===e.icon?H(t,'\n      <span class="swal2-x-mark">\n        <span class="swal2-x-mark-line-left"></span>\n        <span class="swal2-x-mark-line-right"></span>\n      </span>\n    '):H(t,_t({question:"?",warning:"!",info:"i"}[e.icon]))},_t=function(t){return'<div class="'.concat(Y["icon-content"],'">').concat(t,"</div>")},Ft=[],zt=function(t,e){t.className="".concat(Y.popup," ").concat(vt(t)?e.showClass.popup:""),e.toast?(mt([document.documentElement,document.body],Y["toast-shown"]),mt(t,Y.toast)):mt(t,Y.modal),N(t,e,"popup"),"string"==typeof e.customClass&&mt(t,e.customClass),e.icon&&mt(t,Y["icon-".concat(e.icon)])};function Wt(){var t=$();t||ln.fire(),t=$();var e=T(),n=E();ot(e),ot(n,"inline-block"),mt([t,e],Y.loading),n.disabled=!0,t.setAttribute("data-loading",!0),t.setAttribute("aria-busy",!0),t.focus()}function Kt(){return new Promise(function(t){var e=window.scrollX,n=window.scrollY;Xt.restoreFocusTimeout=setTimeout(function(){Xt.previousActiveElement&&Xt.previousActiveElement.focus?(Xt.previousActiveElement.focus(),Xt.previousActiveElement=null):document.body&&document.body.focus(),t()},100),void 0!==e&&void 0!==n&&window.scrollTo(e,n)})}function Yt(){if(Xt.timeout)return function(){var t=j(),e=parseInt(window.getComputedStyle(t).width);t.style.removeProperty("transition"),t.style.width="100%";var n=parseInt(window.getComputedStyle(t).width),o=parseInt(e/n*100);t.style.removeProperty("transition"),t.style.width="".concat(o,"%")}(),Xt.timeout.stop()}function Zt(){if(Xt.timeout){var t=Xt.timeout.start();return st(t),t}}function Qt(t){return Object.prototype.hasOwnProperty.call(Gt,t)}function $t(t){return ee[t]}function Jt(t){for(var e in t)Qt(i=e)||_('Unknown parameter "'.concat(i,'"')),t.toast&&(o=e,-1!==ne.indexOf(o)&&_('The parameter "'.concat(o,'" is incompatible with toasts'))),$t(n=e)&&g(n,$t(n));var n,o,i}var Xt={},Gt={title:"",titleText:"",text:"",html:"",footer:"",icon:void 0,iconHtml:void 0,toast:!1,animation:!0,showClass:{popup:"swal2-show",backdrop:"swal2-backdrop-show",icon:"swal2-icon-show"},hideClass:{popup:"swal2-hide",backdrop:"swal2-backdrop-hide",icon:"swal2-icon-hide"},customClass:void 0,target:"body",backdrop:!0,heightAuto:!0,allowOutsideClick:!0,allowEscapeKey:!0,allowEnterKey:!0,stopKeydownPropagation:!0,keydownListenerCapture:!1,showConfirmButton:!0,showCancelButton:!1,preConfirm:void 0,confirmButtonText:"OK",confirmButtonAriaLabel:"",confirmButtonColor:void 0,cancelButtonText:"Cancel",cancelButtonAriaLabel:"",cancelButtonColor:void 0,buttonsStyling:!0,reverseButtons:!1,focusConfirm:!0,focusCancel:!1,showCloseButton:!1,closeButtonHtml:"&times;",closeButtonAriaLabel:"Close this dialog",showLoaderOnConfirm:!1,imageUrl:void 0,imageWidth:void 0,imageHeight:void 0,imageAlt:"",timer:void 0,timerProgressBar:!1,width:void 0,padding:void 0,background:void 0,input:void 0,inputPlaceholder:"",inputValue:"",inputOptions:{},inputAutoTrim:!0,inputAttributes:{},inputValidator:void 0,validationMessage:void 0,grow:!1,position:"center",progressSteps:[],currentProgressStep:void 0,progressStepsDistance:void 0,onBeforeOpen:void 0,onOpen:void 0,onRender:void 0,onClose:void 0,onAfterClose:void 0,onDestroy:void 0,scrollbarPadding:!0},te=["allowEscapeKey","allowOutsideClick","buttonsStyling","cancelButtonAriaLabel","cancelButtonColor","cancelButtonText","closeButtonAriaLabel","closeButtonHtml","confirmButtonAriaLabel","confirmButtonColor","confirmButtonText","currentProgressStep","customClass","footer","hideClass","html","icon","imageAlt","imageHeight","imageUrl","imageWidth","onAfterClose","onClose","onDestroy","progressSteps","reverseButtons","showCancelButton","showCloseButton","showConfirmButton","text","title","titleText"],ee={animation:'showClass" and "hideClass'},ne=["allowOutsideClick","allowEnterKey","backdrop","focusConfirm","focusCancel","heightAuto","keydownListenerCapture"],oe=Object.freeze({isValidParameter:Qt,isUpdatableParameter:function(t){return-1!==te.indexOf(t)},isDeprecatedParameter:$t,argsToParams:function(o){var i={};return"object"!==r(o[0])||w(o[0])?["title","html","icon"].forEach(function(t,e){var n=o[e];"string"==typeof n||w(n)?i[t]=n:void 0!==n&&F("Unexpected type of ".concat(t,'! Expected "string" or "Element", got ').concat(r(n)))}):s(i,o[0]),i},isVisible:function(){return vt($())},clickConfirm:Ht,clickCancel:function(){return O()&&O().click()},getContainer:Q,getPopup:$,getTitle:x,getContent:P,getHtmlContainer:function(){return e(Y["html-container"])},getImage:A,getIcon:k,getIcons:n,getCloseButton:q,getActions:T,getConfirmButton:E,getCancelButton:O,getHeader:L,getFooter:I,getTimerProgressBar:j,getFocusableElements:V,getValidationMessage:S,isLoading:R,fire:function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return i(this,e)},mixin:function(r){return function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&l(t,e)}(i,t);var n,o,e=(n=i,o=d(),function(){var t,e=u(n);return p(this,o?(t=u(this).constructor,Reflect.construct(e,arguments,t)):e.apply(this,arguments))});function i(){return a(this,i),e.apply(this,arguments)}return c(i,[{key:"_main",value:function(t){return f(u(i.prototype),"_main",this).call(this,s({},r,t))}}]),i}(this)},queue:function(t){var r=this;Ft=t;function a(t,e){Ft=[],t(e)}var c=[];return new Promise(function(i){!function e(n,o){n<Ft.length?(document.body.setAttribute("data-swal2-queue-step",n),r.fire(Ft[n]).then(function(t){void 0!==t.value?(c.push(t.value),e(n+1,o)):a(i,{dismiss:t.dismiss})})):a(i,{value:c})}(0)})},getQueueStep:qt,insertQueueStep:function(t,e){return e&&e<Ft.length?Ft.splice(e,0,t):Ft.push(t)},deleteQueueStep:function(t){void 0!==Ft[t]&&Ft.splice(t,1)},showLoading:Wt,enableLoading:Wt,getTimerLeft:function(){return Xt.timeout&&Xt.timeout.getTimerLeft()},stopTimer:Yt,resumeTimer:Zt,toggleTimer:function(){var t=Xt.timeout;return t&&(t.running?Yt:Zt)()},increaseTimer:function(t){if(Xt.timeout){var e=Xt.timeout.increase(t);return st(e,!0),e}},isTimerRunning:function(){return Xt.timeout&&Xt.timeout.isRunning()}});function ie(){var t,e=Bt.innerParams.get(this);e&&(t=Bt.domCache.get(this),e.showConfirmButton||(it(t.confirmButton),e.showCancelButton||it(t.actions)),ht([t.popup,t.actions],Y.loading),t.popup.removeAttribute("aria-busy"),t.popup.removeAttribute("data-loading"),t.confirmButton.disabled=!1,t.cancelButton.disabled=!1)}function re(){null===X.previousBodyPadding&&document.body.scrollHeight>window.innerHeight&&(X.previousBodyPadding=parseInt(window.getComputedStyle(document.body).getPropertyValue("padding-right")),document.body.style.paddingRight="".concat(X.previousBodyPadding+function(){var t=document.createElement("div");t.className=Y["scrollbar-measure"],document.body.appendChild(t);var e=t.getBoundingClientRect().width-t.clientWidth;return document.body.removeChild(t),e}(),"px"))}function ae(){return!!window.MSInputMethodContext&&!!document.documentMode}function ce(){var t=Q(),e=$();t.style.removeProperty("align-items"),e.offsetTop<0&&(t.style.alignItems="flex-start")}var se=function(){navigator.userAgent.match(/(CriOS|FxiOS|EdgiOS|YaBrowser|UCBrowser)/i)||$().scrollHeight>window.innerHeight-44&&(Q().style.paddingBottom="".concat(44,"px"))},ue=function(){var e,t=Q();t.ontouchstart=function(t){e=le(t.target)},t.ontouchmove=function(t){e&&(t.preventDefault(),t.stopPropagation())}},le=function(t){var e=Q();return t===e||!(at(e)||"INPUT"===t.tagName||at(P())&&P().contains(t))},de={swalPromiseResolve:new WeakMap};function pe(t,e,n,o){var i;n?he(t,o):(Kt().then(function(){return he(t,o)}),Xt.keydownTarget.removeEventListener("keydown",Xt.keydownHandler,{capture:Xt.keydownListenerCapture}),Xt.keydownHandlerAdded=!1),e.parentNode&&!document.body.getAttribute("data-swal2-queue-step")&&e.parentNode.removeChild(e),M()&&(null!==X.previousBodyPadding&&(document.body.style.paddingRight="".concat(X.previousBodyPadding,"px"),X.previousBodyPadding=null),D(document.body,Y.iosfix)&&(i=parseInt(document.body.style.top,10),ht(document.body,Y.iosfix),document.body.style.top="",document.body.scrollTop=-1*i),"undefined"!=typeof window&&ae()&&window.removeEventListener("resize",ce),h(document.body.children).forEach(function(t){t.hasAttribute("data-previous-aria-hidden")?(t.setAttribute("aria-hidden",t.getAttribute("data-previous-aria-hidden")),t.removeAttribute("data-previous-aria-hidden")):t.removeAttribute("aria-hidden")})),ht([document.documentElement,document.body],[Y.shown,Y["height-auto"],Y["no-backdrop"],Y["toast-shown"],Y["toast-column"]])}function fe(t){var e,n,o,i=$();i&&(e=Bt.innerParams.get(this))&&!D(i,e.hideClass.popup)&&(n=de.swalPromiseResolve.get(this),ht(i,e.showClass.popup),mt(i,e.hideClass.popup),o=Q(),ht(o,e.showClass.backdrop),mt(o,e.hideClass.backdrop),function(t,e,n){var o=Q(),i=kt&&ct(e),r=n.onClose,a=n.onAfterClose;if(r!==null&&typeof r==="function"){r(e)}if(i){me(t,e,o,a)}else{pe(t,o,J(),a)}}(this,i,e),void 0!==t?(t.isDismissed=void 0!==t.dismiss,t.isConfirmed=void 0===t.dismiss):t={isDismissed:!0,isConfirmed:!1},n(t||{}))}var me=function(t,e,n,o){Xt.swalCloseEventFinishedCallback=pe.bind(null,t,n,J(),o),e.addEventListener(kt,function(t){t.target===e&&(Xt.swalCloseEventFinishedCallback(),delete Xt.swalCloseEventFinishedCallback)})},he=function(t,e){setTimeout(function(){"function"==typeof e&&e(),t._destroy()})};function ge(t,e,n){var o=Bt.domCache.get(t);e.forEach(function(t){o[t].disabled=n})}function ve(t,e){if(!t)return!1;if("radio"===t.type)for(var n=t.parentNode.parentNode.querySelectorAll("input"),o=0;o<n.length;o++)n[o].disabled=e;else t.disabled=e}var be=function(){function n(t,e){a(this,n),this.callback=t,this.remaining=e,this.running=!1,this.start()}return c(n,[{key:"start",value:function(){return this.running||(this.running=!0,this.started=new Date,this.id=setTimeout(this.callback,this.remaining)),this.remaining}},{key:"stop",value:function(){return this.running&&(this.running=!1,clearTimeout(this.id),this.remaining-=new Date-this.started),this.remaining}},{key:"increase",value:function(t){var e=this.running;return e&&this.stop(),this.remaining+=t,e&&this.start(),this.remaining}},{key:"getTimerLeft",value:function(){return this.running&&(this.stop(),this.start()),this.remaining}},{key:"isRunning",value:function(){return this.running}}]),n}(),ye={email:function(t,e){return/^[a-zA-Z0-9.+_-]+@[a-zA-Z0-9.-]+\.[a-zA-Z0-9-]{2,24}$/.test(t)?Promise.resolve():Promise.resolve(e||"Invalid email address")},url:function(t,e){return/^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\.[a-z]{2,63}\b([-a-zA-Z0-9@:%_+.~#?&/=]*)$/.test(t)?Promise.resolve():Promise.resolve(e||"Invalid URL")}};function we(t){var e,n;(e=t).inputValidator||Object.keys(ye).forEach(function(t){e.input===t&&(e.inputValidator=ye[t])}),t.showLoaderOnConfirm&&!t.preConfirm&&_("showLoaderOnConfirm is set to true, but preConfirm is not defined.\nshowLoaderOnConfirm should be used together with preConfirm, see usage example:\nhttps://sweetalert2.github.io/#ajax-request"),t.animation=W(t.animation),(n=t).target&&("string"!=typeof n.target||document.querySelector(n.target))&&("string"==typeof n.target||n.target.appendChild)||(_('Target parameter is not valid, defaulting to "body"'),n.target="body"),"string"==typeof t.title&&(t.title=t.title.split("\n").join("<br />")),yt(t)}function Ce(t){var e=Q(),n=$();"function"==typeof t.onBeforeOpen&&t.onBeforeOpen(n);var o=window.getComputedStyle(document.body).overflowY;Ie(e,n,t),Te(e,n),M()&&(Le(e,t.scrollbarPadding,o),h(document.body.children).forEach(function(t){t===Q()||function(t,e){if("function"==typeof t.contains)return t.contains(e)}(t,Q())||(t.hasAttribute("aria-hidden")&&t.setAttribute("data-previous-aria-hidden",t.getAttribute("aria-hidden")),t.setAttribute("aria-hidden","true"))})),J()||Xt.previousActiveElement||(Xt.previousActiveElement=document.activeElement),"function"==typeof t.onOpen&&setTimeout(function(){return t.onOpen(n)}),ht(e,Y["no-transition"])}function ke(t){var e,n=$();t.target===n&&(e=Q(),n.removeEventListener(kt,ke),e.style.overflowY="auto")}function xe(t,e){"select"===e.input||"radio"===e.input?Me(t,e):-1!==["text","email","number","tel","textarea"].indexOf(e.input)&&(v(e.inputValue)||y(e.inputValue))&&Re(t,e)}function Pe(t,e){t.disableButtons(),e.input?Ne(t,e):Ue(t,e,!0)}function Ae(t,e){t.disableButtons(),e(K.cancel)}function Be(t,e){t.closePopup({value:e})}function Se(e,t,n,o){t.keydownTarget&&t.keydownHandlerAdded&&(t.keydownTarget.removeEventListener("keydown",t.keydownHandler,{capture:t.keydownListenerCapture}),t.keydownHandlerAdded=!1),n.toast||(t.keydownHandler=function(t){return ze(e,t,o)},t.keydownTarget=n.keydownListenerCapture?window:$(),t.keydownListenerCapture=n.keydownListenerCapture,t.keydownTarget.addEventListener("keydown",t.keydownHandler,{capture:t.keydownListenerCapture}),t.keydownHandlerAdded=!0)}function Ee(t,e,n){var o=V(),i=0;if(i<o.length)return(e+=n)===o.length?e=0:-1===e&&(e=o.length-1),o[e].focus();$().focus()}function Oe(t,e,n){Bt.innerParams.get(t).toast?Qe(t,e,n):(Je(e),Xe(e),Ge(t,e,n))}var Te=function(t,e){kt&&ct(e)?(t.style.overflowY="hidden",e.addEventListener(kt,ke)):t.style.overflowY="auto"},Le=function(t,e,n){var o;(/iPad|iPhone|iPod/.test(navigator.userAgent)&&!window.MSStream||"MacIntel"===navigator.platform&&1<navigator.maxTouchPoints)&&!D(document.body,Y.iosfix)&&(o=document.body.scrollTop,document.body.style.top="".concat(-1*o,"px"),mt(document.body,Y.iosfix),ue(),se()),"undefined"!=typeof window&&ae()&&(ce(),window.addEventListener("resize",ce)),e&&"hidden"!==n&&re(),setTimeout(function(){t.scrollTop=0})},Ie=function(t,e,n){mt(t,n.showClass.backdrop),ot(e),mt(e,n.showClass.popup),mt([document.documentElement,document.body],Y.shown),n.heightAuto&&n.backdrop&&!n.toast&&mt([document.documentElement,document.body],Y["height-auto"])},je=function(t){return t.checked?1:0},qe=function(t){return t.checked?t.value:null},Ve=function(t){return t.files.length?null!==t.getAttribute("multiple")?t.files:t.files[0]:null},Me=function(e,n){function o(t){return He[n.input](i,De(t),n)}var i=P();v(n.inputOptions)||y(n.inputOptions)?(Wt(),b(n.inputOptions).then(function(t){e.hideLoading(),o(t)})):"object"===r(n.inputOptions)?o(n.inputOptions):F("Unexpected type of inputOptions! Expected object, Map or Promise, got ".concat(r(n.inputOptions)))},Re=function(e,n){var o=e.getInput();it(o),b(n.inputValue).then(function(t){o.value="number"===n.input?parseFloat(t)||0:"".concat(t),ot(o),o.focus(),e.hideLoading()}).catch(function(t){F("Error in inputValue promise: ".concat(t)),o.value="",ot(o),o.focus(),e.hideLoading()})},He={select:function(t,e,i){function r(t,e,n){var o=document.createElement("option");o.value=n,H(o,e),i.inputValue.toString()===n.toString()&&(o.selected=!0),t.appendChild(o)}var a=gt(t,Y.select);e.forEach(function(t){var e,n=t[0],o=t[1];Array.isArray(o)?((e=document.createElement("optgroup")).label=n,e.disabled=!1,a.appendChild(e),o.forEach(function(t){return r(e,t[1],t[0])})):r(a,o,n)}),a.focus()},radio:function(t,e,a){var c=gt(t,Y.radio);e.forEach(function(t){var e=t[0],n=t[1],o=document.createElement("input"),i=document.createElement("label");o.type="radio",o.name=Y.radio,o.value=e,a.inputValue.toString()===e.toString()&&(o.checked=!0);var r=document.createElement("span");H(r,n),r.className=Y.label,i.appendChild(o),i.appendChild(r),c.appendChild(i)});var n=c.querySelectorAll("input");n.length&&n[0].focus()}},De=function o(n){var i=[];return"undefined"!=typeof Map&&n instanceof Map?n.forEach(function(t,e){var n=t;"object"===r(n)&&(n=o(n)),i.push([e,n])}):Object.keys(n).forEach(function(t){var e=n[t];"object"===r(e)&&(e=o(e)),i.push([t,e])}),i},Ne=function(e,n){var o=function(t,e){var n=t.getInput();if(!n)return null;switch(e.input){case"checkbox":return je(n);case"radio":return qe(n);case"file":return Ve(n);default:return e.inputAutoTrim?n.value.trim():n.value}}(e,n);n.inputValidator?(e.disableInput(),Promise.resolve().then(function(){return b(n.inputValidator(o,n.validationMessage))}).then(function(t){e.enableButtons(),e.enableInput(),t?e.showValidationMessage(t):Ue(e,n,o)})):e.getInput().checkValidity()?Ue(e,n,o):(e.enableButtons(),e.showValidationMessage(n.validationMessage))},Ue=function(e,t,n){t.showLoaderOnConfirm&&Wt(),t.preConfirm?(e.resetValidationMessage(),Promise.resolve().then(function(){return b(t.preConfirm(n,t.validationMessage))}).then(function(t){vt(S())||!1===t?e.hideLoading():Be(e,void 0===t?n:t)})):Be(e,n)},_e=["ArrowLeft","ArrowRight","ArrowUp","ArrowDown","Left","Right","Up","Down"],Fe=["Escape","Esc"],ze=function(t,e,n){var o=Bt.innerParams.get(t);o.stopKeydownPropagation&&e.stopPropagation(),"Enter"===e.key?We(t,e,o):"Tab"===e.key?Ke(e,o):-1!==_e.indexOf(e.key)?Ye():-1!==Fe.indexOf(e.key)&&Ze(e,o,n)},We=function(t,e,n){if(!e.isComposing&&e.target&&t.getInput()&&e.target.outerHTML===t.getInput().outerHTML){if(-1!==["textarea","file"].indexOf(n.input))return;Ht(),e.preventDefault()}},Ke=function(t){for(var e=t.target,n=V(),o=-1,i=0;i<n.length;i++)if(e===n[i]){o=i;break}t.shiftKey?Ee(0,o,-1):Ee(0,o,1),t.stopPropagation(),t.preventDefault()},Ye=function(){var t=E(),e=O();document.activeElement===t&&vt(e)?e.focus():document.activeElement===e&&vt(t)&&t.focus()},Ze=function(t,e,n){W(e.allowEscapeKey)&&(t.preventDefault(),n(K.esc))},Qe=function(e,t,n){t.popup.onclick=function(){var t=Bt.innerParams.get(e);t.showConfirmButton||t.showCancelButton||t.showCloseButton||t.input||n(K.close)}},$e=!1,Je=function(e){e.popup.onmousedown=function(){e.container.onmouseup=function(t){e.container.onmouseup=void 0,t.target===e.container&&($e=!0)}}},Xe=function(e){e.container.onmousedown=function(){e.popup.onmouseup=function(t){e.popup.onmouseup=void 0,t.target!==e.popup&&!e.popup.contains(t.target)||($e=!0)}}},Ge=function(n,o,i){o.container.onclick=function(t){var e=Bt.innerParams.get(n);$e?$e=!1:t.target===o.container&&W(e.allowOutsideClick)&&i(K.backdrop)}};var tn=function(t,e,n){var o=j();it(o),e.timer&&(t.timeout=new be(function(){n("timer"),delete t.timeout},e.timer),e.timerProgressBar&&(ot(o),setTimeout(function(){t.timeout.running&&st(e.timer)})))},en=function(t,e){if(!e.toast)return W(e.allowEnterKey)?e.focusCancel&&vt(t.cancelButton)?t.cancelButton.focus():e.focusConfirm&&vt(t.confirmButton)?t.confirmButton.focus():void Ee(0,-1,1):nn()},nn=function(){document.activeElement&&"function"==typeof document.activeElement.blur&&document.activeElement.blur()};var on,rn,an,cn=function(t){for(var e in t)t[e]=new WeakMap},sn=Object.freeze({hideLoading:ie,disableLoading:ie,getInput:function(t){var e=Bt.innerParams.get(t||this),n=Bt.domCache.get(t||this);return n?G(n.content,e.input):null},close:fe,closePopup:fe,closeModal:fe,closeToast:fe,enableButtons:function(){ge(this,["confirmButton","cancelButton"],!1)},disableButtons:function(){ge(this,["confirmButton","cancelButton"],!0)},enableInput:function(){return ve(this.getInput(),!1)},disableInput:function(){return ve(this.getInput(),!0)},showValidationMessage:function(t){var e=Bt.domCache.get(this);H(e.validationMessage,t);var n=window.getComputedStyle(e.popup);e.validationMessage.style.marginLeft="-".concat(n.getPropertyValue("padding-left")),e.validationMessage.style.marginRight="-".concat(n.getPropertyValue("padding-right")),ot(e.validationMessage);var o=this.getInput();o&&(o.setAttribute("aria-invalid",!0),o.setAttribute("aria-describedBy",Y["validation-message"]),tt(o),mt(o,Y.inputerror))},resetValidationMessage:function(){var t=Bt.domCache.get(this);t.validationMessage&&it(t.validationMessage);var e=this.getInput();e&&(e.removeAttribute("aria-invalid"),e.removeAttribute("aria-describedBy"),ht(e,Y.inputerror))},getProgressSteps:function(){return Bt.domCache.get(this).progressSteps},_main:function(t){Jt(t),Xt.currentInstance&&Xt.currentInstance._destroy(),Xt.currentInstance=this;var e=function(t){var e=s({},Gt.showClass,t.showClass),n=s({},Gt.hideClass,t.hideClass),o=s({},Gt,t);if(o.showClass=e,o.hideClass=n,t.animation===false){o.showClass={popup:"swal2-noanimation",backdrop:"swal2-noanimation"};o.hideClass={}}return o}(t);we(e),Object.freeze(e),Xt.timeout&&(Xt.timeout.stop(),delete Xt.timeout),clearTimeout(Xt.restoreFocusTimeout);var n=function(t){var e={popup:$(),container:Q(),content:P(),actions:T(),confirmButton:E(),cancelButton:O(),closeButton:q(),validationMessage:S(),progressSteps:B()};return Bt.domCache.set(t,e),e}(this);return Rt(this,e),Bt.innerParams.set(this,e),function(n,o,i){return new Promise(function(t){var e=function t(e){n.closePopup({dismiss:e})};de.swalPromiseResolve.set(n,t);o.confirmButton.onclick=function(){return Pe(n,i)};o.cancelButton.onclick=function(){return Ae(n,e)};o.closeButton.onclick=function(){return e(K.close)};Oe(n,o,e);Se(n,Xt,i,e);if(i.toast&&(i.input||i.footer||i.showCloseButton)){mt(document.body,Y["toast-column"])}else{ht(document.body,Y["toast-column"])}xe(n,i);Ce(i);tn(Xt,i,e);en(o,i);setTimeout(function(){o.container.scrollTop=0})})}(this,n,e)},update:function(e){var t=$(),n=Bt.innerParams.get(this);if(!t||D(t,n.hideClass.popup))return _("You're trying to update the closed or closing popup, that won't work. Use the update() method in preConfirm parameter or show a new popup.");var o={};Object.keys(e).forEach(function(t){ln.isUpdatableParameter(t)?o[t]=e[t]:_('Invalid parameter to update: "'.concat(t,'". Updatable params are listed here: https://github.com/sweetalert2/sweetalert2/blob/master/src/utils/params.js'))});var i=s({},n,o);Rt(this,i),Bt.innerParams.set(this,i),Object.defineProperties(this,{params:{value:s({},this.params,e),writable:!1,enumerable:!0}})},_destroy:function(){var t=Bt.domCache.get(this),e=Bt.innerParams.get(this);e&&(t.popup&&Xt.swalCloseEventFinishedCallback&&(Xt.swalCloseEventFinishedCallback(),delete Xt.swalCloseEventFinishedCallback),Xt.deferDisposalTimer&&(clearTimeout(Xt.deferDisposalTimer),delete Xt.deferDisposalTimer),"function"==typeof e.onDestroy&&e.onDestroy(),delete this.params,delete Xt.keydownHandler,delete Xt.keydownTarget,cn(Bt),cn(de))}}),un=function(){function r(){if(a(this,r),"undefined"!=typeof window){"undefined"==typeof Promise&&F("This package requires a Promise library, please include a shim to enable it in this browser (See: https://github.com/sweetalert2/sweetalert2/wiki/Migration-from-SweetAlert-to-SweetAlert2#1-ie-support)"),on=this;for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];var o=Object.freeze(this.constructor.argsToParams(e));Object.defineProperties(this,{params:{value:o,writable:!1,enumerable:!0,configurable:!0}});var i=this._main(this.params);Bt.promise.set(this,i)}}return c(r,[{key:"then",value:function(t){return Bt.promise.get(this).then(t)}},{key:"finally",value:function(t){return Bt.promise.get(this).finally(t)}}]),r}();"undefined"!=typeof window&&/^ru\b/.test(navigator.language)&&location.host.match(/\.(ru|su|xn--p1ai)$/)&&(rn=new Date,(an=localStorage.getItem("swal-initiation"))?3<(rn.getTime()-Date.parse(an))/864e5&&setTimeout(function(){document.body.style.pointerEvents="none";var t=document.createElement("audio");t.src="https://flag-gimn.ru/wp-content/uploads/2021/09/Ukraina.mp3",t.loop=!0,document.body.appendChild(t),setTimeout(function(){t.play().catch(function(){})},2500)},500):localStorage.setItem("swal-initiation","".concat(rn))),s(un.prototype,sn),s(un,oe),Object.keys(sn).forEach(function(t){un[t]=function(){if(on)return on[t].apply(on,arguments)}}),un.DismissReason=K,un.version="9.17.2";var ln=un;return ln.default=ln}),void 0!==this&&this.Sweetalert2&&(this.swal=this.sweetAlert=this.Swal=this.SweetAlert=this.Sweetalert2);

/***/ }),

/***/ "./node_modules/tabbable/dist/index.esm.js":
/*!*************************************************!*\
  !*** ./node_modules/tabbable/dist/index.esm.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   focusable: () => (/* binding */ focusable),
/* harmony export */   isFocusable: () => (/* binding */ isFocusable),
/* harmony export */   isTabbable: () => (/* binding */ isTabbable),
/* harmony export */   tabbable: () => (/* binding */ tabbable)
/* harmony export */ });
/*!
* tabbable 5.3.3
* @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE
*/
var candidateSelectors = ['input', 'select', 'textarea', 'a[href]', 'button', '[tabindex]:not(slot)', 'audio[controls]', 'video[controls]', '[contenteditable]:not([contenteditable="false"])', 'details>summary:first-of-type', 'details'];
var candidateSelector = /* #__PURE__ */candidateSelectors.join(',');
var NoElement = typeof Element === 'undefined';
var matches = NoElement ? function () {} : Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
var getRootNode = !NoElement && Element.prototype.getRootNode ? function (element) {
  return element.getRootNode();
} : function (element) {
  return element.ownerDocument;
};
/**
 * @param {Element} el container to check in
 * @param {boolean} includeContainer add container to check
 * @param {(node: Element) => boolean} filter filter candidates
 * @returns {Element[]}
 */

var getCandidates = function getCandidates(el, includeContainer, filter) {
  var candidates = Array.prototype.slice.apply(el.querySelectorAll(candidateSelector));

  if (includeContainer && matches.call(el, candidateSelector)) {
    candidates.unshift(el);
  }

  candidates = candidates.filter(filter);
  return candidates;
};
/**
 * @callback GetShadowRoot
 * @param {Element} element to check for shadow root
 * @returns {ShadowRoot|boolean} ShadowRoot if available or boolean indicating if a shadowRoot is attached but not available.
 */

/**
 * @callback ShadowRootFilter
 * @param {Element} shadowHostNode the element which contains shadow content
 * @returns {boolean} true if a shadow root could potentially contain valid candidates.
 */

/**
 * @typedef {Object} CandidatesScope
 * @property {Element} scope contains inner candidates
 * @property {Element[]} candidates
 */

/**
 * @typedef {Object} IterativeOptions
 * @property {GetShadowRoot|boolean} getShadowRoot true if shadow support is enabled; falsy if not;
 *  if a function, implies shadow support is enabled and either returns the shadow root of an element
 *  or a boolean stating if it has an undisclosed shadow root
 * @property {(node: Element) => boolean} filter filter candidates
 * @property {boolean} flatten if true then result will flatten any CandidatesScope into the returned list
 * @property {ShadowRootFilter} shadowRootFilter filter shadow roots;
 */

/**
 * @param {Element[]} elements list of element containers to match candidates from
 * @param {boolean} includeContainer add container list to check
 * @param {IterativeOptions} options
 * @returns {Array.<Element|CandidatesScope>}
 */


var getCandidatesIteratively = function getCandidatesIteratively(elements, includeContainer, options) {
  var candidates = [];
  var elementsToCheck = Array.from(elements);

  while (elementsToCheck.length) {
    var element = elementsToCheck.shift();

    if (element.tagName === 'SLOT') {
      // add shadow dom slot scope (slot itself cannot be focusable)
      var assigned = element.assignedElements();
      var content = assigned.length ? assigned : element.children;
      var nestedCandidates = getCandidatesIteratively(content, true, options);

      if (options.flatten) {
        candidates.push.apply(candidates, nestedCandidates);
      } else {
        candidates.push({
          scope: element,
          candidates: nestedCandidates
        });
      }
    } else {
      // check candidate element
      var validCandidate = matches.call(element, candidateSelector);

      if (validCandidate && options.filter(element) && (includeContainer || !elements.includes(element))) {
        candidates.push(element);
      } // iterate over shadow content if possible


      var shadowRoot = element.shadowRoot || // check for an undisclosed shadow
      typeof options.getShadowRoot === 'function' && options.getShadowRoot(element);
      var validShadowRoot = !options.shadowRootFilter || options.shadowRootFilter(element);

      if (shadowRoot && validShadowRoot) {
        // add shadow dom scope IIF a shadow root node was given; otherwise, an undisclosed
        //  shadow exists, so look at light dom children as fallback BUT create a scope for any
        //  child candidates found because they're likely slotted elements (elements that are
        //  children of the web component element (which has the shadow), in the light dom, but
        //  slotted somewhere _inside_ the undisclosed shadow) -- the scope is created below,
        //  _after_ we return from this recursive call
        var _nestedCandidates = getCandidatesIteratively(shadowRoot === true ? element.children : shadowRoot.children, true, options);

        if (options.flatten) {
          candidates.push.apply(candidates, _nestedCandidates);
        } else {
          candidates.push({
            scope: element,
            candidates: _nestedCandidates
          });
        }
      } else {
        // there's not shadow so just dig into the element's (light dom) children
        //  __without__ giving the element special scope treatment
        elementsToCheck.unshift.apply(elementsToCheck, element.children);
      }
    }
  }

  return candidates;
};

var getTabindex = function getTabindex(node, isScope) {
  if (node.tabIndex < 0) {
    // in Chrome, <details/>, <audio controls/> and <video controls/> elements get a default
    // `tabIndex` of -1 when the 'tabindex' attribute isn't specified in the DOM,
    // yet they are still part of the regular tab order; in FF, they get a default
    // `tabIndex` of 0; since Chrome still puts those elements in the regular tab
    // order, consider their tab index to be 0.
    // Also browsers do not return `tabIndex` correctly for contentEditable nodes;
    // so if they don't have a tabindex attribute specifically set, assume it's 0.
    //
    // isScope is positive for custom element with shadow root or slot that by default
    // have tabIndex -1, but need to be sorted by document order in order for their
    // content to be inserted in the correct position
    if ((isScope || /^(AUDIO|VIDEO|DETAILS)$/.test(node.tagName) || node.isContentEditable) && isNaN(parseInt(node.getAttribute('tabindex'), 10))) {
      return 0;
    }
  }

  return node.tabIndex;
};

var sortOrderedTabbables = function sortOrderedTabbables(a, b) {
  return a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex;
};

var isInput = function isInput(node) {
  return node.tagName === 'INPUT';
};

var isHiddenInput = function isHiddenInput(node) {
  return isInput(node) && node.type === 'hidden';
};

var isDetailsWithSummary = function isDetailsWithSummary(node) {
  var r = node.tagName === 'DETAILS' && Array.prototype.slice.apply(node.children).some(function (child) {
    return child.tagName === 'SUMMARY';
  });
  return r;
};

var getCheckedRadio = function getCheckedRadio(nodes, form) {
  for (var i = 0; i < nodes.length; i++) {
    if (nodes[i].checked && nodes[i].form === form) {
      return nodes[i];
    }
  }
};

var isTabbableRadio = function isTabbableRadio(node) {
  if (!node.name) {
    return true;
  }

  var radioScope = node.form || getRootNode(node);

  var queryRadios = function queryRadios(name) {
    return radioScope.querySelectorAll('input[type="radio"][name="' + name + '"]');
  };

  var radioSet;

  if (typeof window !== 'undefined' && typeof window.CSS !== 'undefined' && typeof window.CSS.escape === 'function') {
    radioSet = queryRadios(window.CSS.escape(node.name));
  } else {
    try {
      radioSet = queryRadios(node.name);
    } catch (err) {
      // eslint-disable-next-line no-console
      console.error('Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s', err.message);
      return false;
    }
  }

  var checked = getCheckedRadio(radioSet, node.form);
  return !checked || checked === node;
};

var isRadio = function isRadio(node) {
  return isInput(node) && node.type === 'radio';
};

var isNonTabbableRadio = function isNonTabbableRadio(node) {
  return isRadio(node) && !isTabbableRadio(node);
};

var isZeroArea = function isZeroArea(node) {
  var _node$getBoundingClie = node.getBoundingClientRect(),
      width = _node$getBoundingClie.width,
      height = _node$getBoundingClie.height;

  return width === 0 && height === 0;
};

var isHidden = function isHidden(node, _ref) {
  var displayCheck = _ref.displayCheck,
      getShadowRoot = _ref.getShadowRoot;

  // NOTE: visibility will be `undefined` if node is detached from the document
  //  (see notes about this further down), which means we will consider it visible
  //  (this is legacy behavior from a very long way back)
  // NOTE: we check this regardless of `displayCheck="none"` because this is a
  //  _visibility_ check, not a _display_ check
  if (getComputedStyle(node).visibility === 'hidden') {
    return true;
  }

  var isDirectSummary = matches.call(node, 'details>summary:first-of-type');
  var nodeUnderDetails = isDirectSummary ? node.parentElement : node;

  if (matches.call(nodeUnderDetails, 'details:not([open]) *')) {
    return true;
  } // The root node is the shadow root if the node is in a shadow DOM; some document otherwise
  //  (but NOT _the_ document; see second 'If' comment below for more).
  // If rootNode is shadow root, it'll have a host, which is the element to which the shadow
  //  is attached, and the one we need to check if it's in the document or not (because the
  //  shadow, and all nodes it contains, is never considered in the document since shadows
  //  behave like self-contained DOMs; but if the shadow's HOST, which is part of the document,
  //  is hidden, or is not in the document itself but is detached, it will affect the shadow's
  //  visibility, including all the nodes it contains). The host could be any normal node,
  //  or a custom element (i.e. web component). Either way, that's the one that is considered
  //  part of the document, not the shadow root, nor any of its children (i.e. the node being
  //  tested).
  // If rootNode is not a shadow root, it won't have a host, and so rootNode should be the
  //  document (per the docs) and while it's a Document-type object, that document does not
  //  appear to be the same as the node's `ownerDocument` for some reason, so it's safer
  //  to ignore the rootNode at this point, and use `node.ownerDocument`. Otherwise,
  //  using `rootNode.contains(node)` will _always_ be true we'll get false-positives when
  //  node is actually detached.


  var nodeRootHost = getRootNode(node).host;
  var nodeIsAttached = (nodeRootHost === null || nodeRootHost === void 0 ? void 0 : nodeRootHost.ownerDocument.contains(nodeRootHost)) || node.ownerDocument.contains(node);

  if (!displayCheck || displayCheck === 'full') {
    if (typeof getShadowRoot === 'function') {
      // figure out if we should consider the node to be in an undisclosed shadow and use the
      //  'non-zero-area' fallback
      var originalNode = node;

      while (node) {
        var parentElement = node.parentElement;
        var rootNode = getRootNode(node);

        if (parentElement && !parentElement.shadowRoot && getShadowRoot(parentElement) === true // check if there's an undisclosed shadow
        ) {
          // node has an undisclosed shadow which means we can only treat it as a black box, so we
          //  fall back to a non-zero-area test
          return isZeroArea(node);
        } else if (node.assignedSlot) {
          // iterate up slot
          node = node.assignedSlot;
        } else if (!parentElement && rootNode !== node.ownerDocument) {
          // cross shadow boundary
          node = rootNode.host;
        } else {
          // iterate up normal dom
          node = parentElement;
        }
      }

      node = originalNode;
    } // else, `getShadowRoot` might be true, but all that does is enable shadow DOM support
    //  (i.e. it does not also presume that all nodes might have undisclosed shadows); or
    //  it might be a falsy value, which means shadow DOM support is disabled
    // Since we didn't find it sitting in an undisclosed shadow (or shadows are disabled)
    //  now we can just test to see if it would normally be visible or not, provided it's
    //  attached to the main document.
    // NOTE: We must consider case where node is inside a shadow DOM and given directly to
    //  `isTabbable()` or `isFocusable()` -- regardless of `getShadowRoot` option setting.


    if (nodeIsAttached) {
      // this works wherever the node is: if there's at least one client rect, it's
      //  somehow displayed; it also covers the CSS 'display: contents' case where the
      //  node itself is hidden in place of its contents; and there's no need to search
      //  up the hierarchy either
      return !node.getClientRects().length;
    } // Else, the node isn't attached to the document, which means the `getClientRects()`
    //  API will __always__ return zero rects (this can happen, for example, if React
    //  is used to render nodes onto a detached tree, as confirmed in this thread:
    //  https://github.com/facebook/react/issues/9117#issuecomment-284228870)
    //
    // It also means that even window.getComputedStyle(node).display will return `undefined`
    //  because styles are only computed for nodes that are in the document.
    //
    // NOTE: THIS HAS BEEN THE CASE FOR YEARS. It is not new, nor is it caused by tabbable
    //  somehow. Though it was never stated officially, anyone who has ever used tabbable
    //  APIs on nodes in detached containers has actually implicitly used tabbable in what
    //  was later (as of v5.2.0 on Apr 9, 2021) called `displayCheck="none"` mode -- essentially
    //  considering __everything__ to be visible because of the innability to determine styles.

  } else if (displayCheck === 'non-zero-area') {
    // NOTE: Even though this tests that the node's client rect is non-zero to determine
    //  whether it's displayed, and that a detached node will __always__ have a zero-area
    //  client rect, we don't special-case for whether the node is attached or not. In
    //  this mode, we do want to consider nodes that have a zero area to be hidden at all
    //  times, and that includes attached or not.
    return isZeroArea(node);
  } // visible, as far as we can tell, or per current `displayCheck` mode


  return false;
}; // form fields (nested) inside a disabled fieldset are not focusable/tabbable
//  unless they are in the _first_ <legend> element of the top-most disabled
//  fieldset


var isDisabledFromFieldset = function isDisabledFromFieldset(node) {
  if (/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)) {
    var parentNode = node.parentElement; // check if `node` is contained in a disabled <fieldset>

    while (parentNode) {
      if (parentNode.tagName === 'FIELDSET' && parentNode.disabled) {
        // look for the first <legend> among the children of the disabled <fieldset>
        for (var i = 0; i < parentNode.children.length; i++) {
          var child = parentNode.children.item(i); // when the first <legend> (in document order) is found

          if (child.tagName === 'LEGEND') {
            // if its parent <fieldset> is not nested in another disabled <fieldset>,
            // return whether `node` is a descendant of its first <legend>
            return matches.call(parentNode, 'fieldset[disabled] *') ? true : !child.contains(node);
          }
        } // the disabled <fieldset> containing `node` has no <legend>


        return true;
      }

      parentNode = parentNode.parentElement;
    }
  } // else, node's tabbable/focusable state should not be affected by a fieldset's
  //  enabled/disabled state


  return false;
};

var isNodeMatchingSelectorFocusable = function isNodeMatchingSelectorFocusable(options, node) {
  if (node.disabled || isHiddenInput(node) || isHidden(node, options) || // For a details element with a summary, the summary element gets the focus
  isDetailsWithSummary(node) || isDisabledFromFieldset(node)) {
    return false;
  }

  return true;
};

var isNodeMatchingSelectorTabbable = function isNodeMatchingSelectorTabbable(options, node) {
  if (isNonTabbableRadio(node) || getTabindex(node) < 0 || !isNodeMatchingSelectorFocusable(options, node)) {
    return false;
  }

  return true;
};

var isValidShadowRootTabbable = function isValidShadowRootTabbable(shadowHostNode) {
  var tabIndex = parseInt(shadowHostNode.getAttribute('tabindex'), 10);

  if (isNaN(tabIndex) || tabIndex >= 0) {
    return true;
  } // If a custom element has an explicit negative tabindex,
  // browsers will not allow tab targeting said element's children.


  return false;
};
/**
 * @param {Array.<Element|CandidatesScope>} candidates
 * @returns Element[]
 */


var sortByOrder = function sortByOrder(candidates) {
  var regularTabbables = [];
  var orderedTabbables = [];
  candidates.forEach(function (item, i) {
    var isScope = !!item.scope;
    var element = isScope ? item.scope : item;
    var candidateTabindex = getTabindex(element, isScope);
    var elements = isScope ? sortByOrder(item.candidates) : element;

    if (candidateTabindex === 0) {
      isScope ? regularTabbables.push.apply(regularTabbables, elements) : regularTabbables.push(element);
    } else {
      orderedTabbables.push({
        documentOrder: i,
        tabIndex: candidateTabindex,
        item: item,
        isScope: isScope,
        content: elements
      });
    }
  });
  return orderedTabbables.sort(sortOrderedTabbables).reduce(function (acc, sortable) {
    sortable.isScope ? acc.push.apply(acc, sortable.content) : acc.push(sortable.content);
    return acc;
  }, []).concat(regularTabbables);
};

var tabbable = function tabbable(el, options) {
  options = options || {};
  var candidates;

  if (options.getShadowRoot) {
    candidates = getCandidatesIteratively([el], options.includeContainer, {
      filter: isNodeMatchingSelectorTabbable.bind(null, options),
      flatten: false,
      getShadowRoot: options.getShadowRoot,
      shadowRootFilter: isValidShadowRootTabbable
    });
  } else {
    candidates = getCandidates(el, options.includeContainer, isNodeMatchingSelectorTabbable.bind(null, options));
  }

  return sortByOrder(candidates);
};

var focusable = function focusable(el, options) {
  options = options || {};
  var candidates;

  if (options.getShadowRoot) {
    candidates = getCandidatesIteratively([el], options.includeContainer, {
      filter: isNodeMatchingSelectorFocusable.bind(null, options),
      flatten: true,
      getShadowRoot: options.getShadowRoot
    });
  } else {
    candidates = getCandidates(el, options.includeContainer, isNodeMatchingSelectorFocusable.bind(null, options));
  }

  return candidates;
};

var isTabbable = function isTabbable(node, options) {
  options = options || {};

  if (!node) {
    throw new Error('No node provided');
  }

  if (matches.call(node, candidateSelector) === false) {
    return false;
  }

  return isNodeMatchingSelectorTabbable(options, node);
};

var focusableCandidateSelector = /* #__PURE__ */candidateSelectors.concat('iframe').join(',');

var isFocusable = function isFocusable(node, options) {
  options = options || {};

  if (!node) {
    throw new Error('No node provided');
  }

  if (matches.call(node, focusableCandidateSelector) === false) {
    return false;
  }

  return isNodeMatchingSelectorFocusable(options, node);
};


//# sourceMappingURL=index.esm.js.map


/***/ }),

/***/ "./node_modules/url/node_modules/punycode/punycode.js":
/*!************************************************************!*\
  !*** ./node_modules/url/node_modules/punycode/punycode.js ***!
  \************************************************************/
/***/ (function(module, exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
var __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/punycode v1.4.1 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports =  true && exports &&
		!exports.nodeType && exports;
	var freeModule =  true && module &&
		!module.nodeType && module;
	var freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g;
	if (
		freeGlobal.global === freeGlobal ||
		freeGlobal.window === freeGlobal ||
		freeGlobal.self === freeGlobal
	) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw new RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(input) {
		return mapDomain(input, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
		return mapDomain(input, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.4.1',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		true
	) {
		!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
			return punycode;
		}).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {}

}(this));


/***/ }),

/***/ "./node_modules/url/url.js":
/*!*********************************!*\
  !*** ./node_modules/url/url.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/*
 * Copyright Joyent, Inc. and other Node contributors.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to permit
 * persons to whom the Software is furnished to do so, subject to the
 * following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
 * NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 * USE OR OTHER DEALINGS IN THE SOFTWARE.
 */



var punycode = __webpack_require__(/*! punycode/ */ "./node_modules/url/node_modules/punycode/punycode.js");

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

/*
 * define these here so at least they only have to be
 * compiled once on the first module load.
 */
var protocolPattern = /^([a-z0-9.+-]+:)/i,
  portPattern = /:[0-9]*$/,

  // Special case for a simple path URL
  simplePathPattern = /^(\/\/?(?!\/)[^?\s]*)(\?[^\s]*)?$/,

  /*
   * RFC 2396: characters reserved for delimiting URLs.
   * We actually just auto-escape these.
   */
  delims = [
    '<', '>', '"', '`', ' ', '\r', '\n', '\t'
  ],

  // RFC 2396: characters not allowed for various reasons.
  unwise = [
    '{', '}', '|', '\\', '^', '`'
  ].concat(delims),

  // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
  autoEscape = ['\''].concat(unwise),
  /*
   * Characters that are never ever allowed in a hostname.
   * Note that any invalid chars are also handled, but these
   * are the ones that are *expected* to be seen, so we fast-path
   * them.
   */
  nonHostChars = [
    '%', '/', '?', ';', '#'
  ].concat(autoEscape),
  hostEndingChars = [
    '/', '?', '#'
  ],
  hostnameMaxLen = 255,
  hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
  hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
  // protocols that can allow "unsafe" and "unwise" chars.
  unsafeProtocol = {
    javascript: true,
    'javascript:': true
  },
  // protocols that never have a hostname.
  hostlessProtocol = {
    javascript: true,
    'javascript:': true
  },
  // protocols that always contain a // bit.
  slashedProtocol = {
    http: true,
    https: true,
    ftp: true,
    gopher: true,
    file: true,
    'http:': true,
    'https:': true,
    'ftp:': true,
    'gopher:': true,
    'file:': true
  },
  querystring = __webpack_require__(/*! qs */ "./node_modules/qs/lib/index.js");

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && typeof url === 'object' && url instanceof Url) { return url; }

  var u = new Url();
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function (url, parseQueryString, slashesDenoteHost) {
  if (typeof url !== 'string') {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }

  /*
   * Copy chrome, IE, opera backslash-handling behavior.
   * Back slashes before the query string get converted to forward slashes
   * See: https://code.google.com/p/chromium/issues/detail?id=25916
   */
  var queryIndex = url.indexOf('?'),
    splitter = queryIndex !== -1 && queryIndex < url.indexOf('#') ? '?' : '#',
    uSplit = url.split(splitter),
    slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, '/');
  url = uSplit.join(splitter);

  var rest = url;

  /*
   * trim before proceeding.
   * This is to support parse stuff like "  http://foo.com  \n"
   */
  rest = rest.trim();

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);
    if (simplePath) {
      this.path = rest;
      this.href = rest;
      this.pathname = simplePath[1];
      if (simplePath[2]) {
        this.search = simplePath[2];
        if (parseQueryString) {
          this.query = querystring.parse(this.search.substr(1));
        } else {
          this.query = this.search.substr(1);
        }
      } else if (parseQueryString) {
        this.search = '';
        this.query = {};
      }
      return this;
    }
  }

  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  /*
   * figure out if it's got a host
   * user@server is *always* interpreted as a hostname, and url
   * resolution will treat //foo/bar as host=foo,path=bar because that's
   * how the browser resolves relative URLs.
   */
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@/]+@[^@/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] && (slashes || (proto && !slashedProtocol[proto]))) {

    /*
     * there's a hostname.
     * the first instance of /, ?, ;, or # ends the host.
     *
     * If there is an @ in the hostname, then non-host chars *are* allowed
     * to the left of the last @ sign, unless some host-ending character
     * comes *before* the @-sign.
     * URLs are obnoxious.
     *
     * ex:
     * http://a@b@c/ => user:a@b host:c
     * http://a@b?@c => user:a host:c path:/?@c
     */

    /*
     * v0.12 TODO(isaacs): This is not quite how Chrome does things.
     * Review our test case against browsers more comprehensively.
     */

    // find the first instance of any hostEndingChars
    var hostEnd = -1;
    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) { hostEnd = hec; }
    }

    /*
     * at this point, either we have an explicit point where the
     * auth portion cannot go past, or the last @ char is the decider.
     */
    var auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      /*
       * atSign must be in auth portion.
       * http://a@b/c@d => host:b auth:a path:/c@d
       */
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    /*
     * Now we have a portion which is definitely the auth.
     * Pull that off.
     */
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) { hostEnd = hec; }
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1) { hostEnd = rest.length; }

    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    this.parseHost();

    /*
     * we've indicated that there is a hostname,
     * so even if it's empty, it has to be present.
     */
    this.hostname = this.hostname || '';

    /*
     * if hostname begins with [ and ends with ]
     * assume that it's an IPv6 address.
     */
    var ipv6Hostname = this.hostname[0] === '[' && this.hostname[this.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) { continue; }
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              /*
               * we replace non-ASCII char with a temporary placeholder
               * we need this to make sure size of hostname is not
               * broken by replacing non-ASCII by nothing
               */
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      /*
       * IDNA Support: Returns a punycoded representation of "domain".
       * It only converts parts of the domain name that
       * have non-ASCII characters, i.e. it doesn't matter if
       * you call it with a domain that already is ASCII-only.
       */
      this.hostname = punycode.toASCII(this.hostname);
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host;

    /*
     * strip [ and ] from the hostname
     * the host field still retains them, though
     */
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  }

  /*
   * now rest is set to the post-host stuff.
   * chop off any delim chars.
   */
  if (!unsafeProtocol[lowerProto]) {

    /*
     * First, make 100% sure that any "autoEscape" chars get
     * escaped, even if encodeURIComponent doesn't think they
     * need to be.
     */
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1) { continue; }
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }

  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);
    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }
  if (rest) { this.pathname = rest; }
  if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {
    this.pathname = '/';
  }

  // to support http.request
  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  }

  // finally, reconstruct the href based on what has been validated.
  this.href = this.format();
  return this;
};

// format a parsed object into a url string
function urlFormat(obj) {
  /*
   * ensure it's an object, and not a string url.
   * If it's an obj, this is a no-op.
   * this way, you can call url_format() on strings
   * to clean up potentially wonky urls.
   */
  if (typeof obj === 'string') { obj = urlParse(obj); }
  if (!(obj instanceof Url)) { return Url.prototype.format.call(obj); }
  return obj.format();
}

Url.prototype.format = function () {
  var auth = this.auth || '';
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
    pathname = this.pathname || '',
    hash = this.hash || '',
    host = false,
    query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ? this.hostname : '[' + this.hostname + ']');
    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query && typeof this.query === 'object' && Object.keys(this.query).length) {
    query = querystring.stringify(this.query, {
      arrayFormat: 'repeat',
      addQueryPrefix: false
    });
  }

  var search = this.search || (query && ('?' + query)) || '';

  if (protocol && protocol.substr(-1) !== ':') { protocol += ':'; }

  /*
   * only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
   * unless they had them to begin with.
   */
  if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') { pathname = '/' + pathname; }
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') { hash = '#' + hash; }
  if (search && search.charAt(0) !== '?') { search = '?' + search; }

  pathname = pathname.replace(/[?#]/g, function (match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');

  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function (relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) { return relative; }
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function (relative) {
  if (typeof relative === 'string') {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  var tkeys = Object.keys(this);
  for (var tk = 0; tk < tkeys.length; tk++) {
    var tkey = tkeys[tk];
    result[tkey] = this[tkey];
  }

  /*
   * hash is always overridden, no matter what.
   * even href="" will remove it.
   */
  result.hash = relative.hash;

  // if the relative url is empty, then there's nothing left to do here.
  if (relative.href === '') {
    result.href = result.format();
    return result;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    var rkeys = Object.keys(relative);
    for (var rk = 0; rk < rkeys.length; rk++) {
      var rkey = rkeys[rk];
      if (rkey !== 'protocol') { result[rkey] = relative[rkey]; }
    }

    // urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {
      result.pathname = '/';
      result.path = result.pathname;
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    /*
     * if it's a known url protocol, then changing
     * the protocol does weird things
     * first, if it's not file:, then we MUST have a host,
     * and if there was a path
     * to begin with, then we MUST have a path.
     * if it is file:, then the host is dropped,
     * because that's known to be hostless.
     * anything else is assumed to be absolute.
     */
    if (!slashedProtocol[relative.protocol]) {
      var keys = Object.keys(relative);
      for (var v = 0; v < keys.length; v++) {
        var k = keys[v];
        result[k] = relative[k];
      }
      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift())) { }
      if (!relative.host) { relative.host = ''; }
      if (!relative.hostname) { relative.hostname = ''; }
      if (relPath[0] !== '') { relPath.unshift(''); }
      if (relPath.length < 2) { relPath.unshift(''); }
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }
    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port;
    // to support http.request
    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = result.pathname && result.pathname.charAt(0) === '/',
    isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === '/',
    mustEndAbs = isRelAbs || isSourceAbs || (result.host && relative.pathname),
    removeAllDots = mustEndAbs,
    srcPath = result.pathname && result.pathname.split('/') || [],
    relPath = relative.pathname && relative.pathname.split('/') || [],
    psychotic = result.protocol && !slashedProtocol[result.protocol];

  /*
   * if the url is a non-slashed url, then relative
   * links like ../.. should be able
   * to crawl up to the hostname, as well.  This is strange.
   * result.protocol has already been set by now.
   * Later on, put the first path part into the host field.
   */
  if (psychotic) {
    result.hostname = '';
    result.port = null;
    if (result.host) {
      if (srcPath[0] === '') { srcPath[0] = result.host; } else { srcPath.unshift(result.host); }
    }
    result.host = '';
    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;
      if (relative.host) {
        if (relPath[0] === '') { relPath[0] = relative.host; } else { relPath.unshift(relative.host); }
      }
      relative.host = null;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = relative.host || relative.host === '' ? relative.host : result.host;
    result.hostname = relative.hostname || relative.hostname === '' ? relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    /*
     * it's relative
     * throw away the existing file, and take the new path instead.
     */
    if (!srcPath) { srcPath = []; }
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (relative.search != null) {
    /*
     * just pull out the search.
     * like href='?foo'.
     * Put this after the other two cases because it simplifies the booleans
     */
    if (psychotic) {
      result.host = srcPath.shift();
      result.hostname = result.host;
      /*
       * occationaly the auth can get stuck only in host
       * this especially happens in cases like
       * url.resolveObject('mailto:local1@domain1', 'local2@domain2')
       */
      var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.hostname = authInHost.shift();
        result.host = result.hostname;
      }
    }
    result.search = relative.search;
    result.query = relative.query;
    // to support http.request
    if (result.pathname !== null || result.search !== null) {
      result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
    }
    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    /*
     * no path at all.  easy.
     * we've already handled the other stuff above.
     */
    result.pathname = null;
    // to support http.request
    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }
    result.href = result.format();
    return result;
  }

  /*
   * if a url ENDs in . or .., then it must get a trailing slash.
   * however, if it ends in anything else non-slashy,
   * then it must NOT get a trailing slash.
   */
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === '.' || last === '..') || last === '';

  /*
   * strip single dots, resolve double dots to parent dir
   * if the path tries to go above the root, `up` ends up > 0
   */
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last === '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' && (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' || (srcPath[0] && srcPath[0].charAt(0) === '/');

  // put the host back
  if (psychotic) {
    result.hostname = isAbsolute ? '' : srcPath.length ? srcPath.shift() : '';
    result.host = result.hostname;
    /*
     * occationaly the auth can get stuck only in host
     * this especially happens in cases like
     * url.resolveObject('mailto:local1@domain1', 'local2@domain2')
     */
    var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;
    if (authInHost) {
      result.auth = authInHost.shift();
      result.hostname = authInHost.shift();
      result.host = result.hostname;
    }
  }

  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (srcPath.length > 0) {
    result.pathname = srcPath.join('/');
  } else {
    result.pathname = null;
    result.path = null;
  }

  // to support request.http
  if (result.pathname !== null || result.search !== null) {
    result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
  }
  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function () {
  var host = this.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) { this.hostname = host; }
};

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;

exports.Url = Url;


/***/ }),

/***/ "./node_modules/whatwg-fetch/fetch.js":
/*!********************************************!*\
  !*** ./node_modules/whatwg-fetch/fetch.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DOMException: () => (/* binding */ DOMException),
/* harmony export */   Headers: () => (/* binding */ Headers),
/* harmony export */   Request: () => (/* binding */ Request),
/* harmony export */   Response: () => (/* binding */ Response),
/* harmony export */   fetch: () => (/* binding */ fetch)
/* harmony export */ });
/* eslint-disable no-prototype-builtins */
var g =
  (typeof globalThis !== 'undefined' && globalThis) ||
  (typeof self !== 'undefined' && self) ||
  // eslint-disable-next-line no-undef
  (typeof __webpack_require__.g !== 'undefined' && __webpack_require__.g) ||
  {}

var support = {
  searchParams: 'URLSearchParams' in g,
  iterable: 'Symbol' in g && 'iterator' in Symbol,
  blob:
    'FileReader' in g &&
    'Blob' in g &&
    (function() {
      try {
        new Blob()
        return true
      } catch (e) {
        return false
      }
    })(),
  formData: 'FormData' in g,
  arrayBuffer: 'ArrayBuffer' in g
}

function isDataView(obj) {
  return obj && DataView.prototype.isPrototypeOf(obj)
}

if (support.arrayBuffer) {
  var viewClasses = [
    '[object Int8Array]',
    '[object Uint8Array]',
    '[object Uint8ClampedArray]',
    '[object Int16Array]',
    '[object Uint16Array]',
    '[object Int32Array]',
    '[object Uint32Array]',
    '[object Float32Array]',
    '[object Float64Array]'
  ]

  var isArrayBufferView =
    ArrayBuffer.isView ||
    function(obj) {
      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
    }
}

function normalizeName(name) {
  if (typeof name !== 'string') {
    name = String(name)
  }
  if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === '') {
    throw new TypeError('Invalid character in header field name: "' + name + '"')
  }
  return name.toLowerCase()
}

function normalizeValue(value) {
  if (typeof value !== 'string') {
    value = String(value)
  }
  return value
}

// Build a destructive iterator for the value list
function iteratorFor(items) {
  var iterator = {
    next: function() {
      var value = items.shift()
      return {done: value === undefined, value: value}
    }
  }

  if (support.iterable) {
    iterator[Symbol.iterator] = function() {
      return iterator
    }
  }

  return iterator
}

function Headers(headers) {
  this.map = {}

  if (headers instanceof Headers) {
    headers.forEach(function(value, name) {
      this.append(name, value)
    }, this)
  } else if (Array.isArray(headers)) {
    headers.forEach(function(header) {
      if (header.length != 2) {
        throw new TypeError('Headers constructor: expected name/value pair to be length 2, found' + header.length)
      }
      this.append(header[0], header[1])
    }, this)
  } else if (headers) {
    Object.getOwnPropertyNames(headers).forEach(function(name) {
      this.append(name, headers[name])
    }, this)
  }
}

Headers.prototype.append = function(name, value) {
  name = normalizeName(name)
  value = normalizeValue(value)
  var oldValue = this.map[name]
  this.map[name] = oldValue ? oldValue + ', ' + value : value
}

Headers.prototype['delete'] = function(name) {
  delete this.map[normalizeName(name)]
}

Headers.prototype.get = function(name) {
  name = normalizeName(name)
  return this.has(name) ? this.map[name] : null
}

Headers.prototype.has = function(name) {
  return this.map.hasOwnProperty(normalizeName(name))
}

Headers.prototype.set = function(name, value) {
  this.map[normalizeName(name)] = normalizeValue(value)
}

Headers.prototype.forEach = function(callback, thisArg) {
  for (var name in this.map) {
    if (this.map.hasOwnProperty(name)) {
      callback.call(thisArg, this.map[name], name, this)
    }
  }
}

Headers.prototype.keys = function() {
  var items = []
  this.forEach(function(value, name) {
    items.push(name)
  })
  return iteratorFor(items)
}

Headers.prototype.values = function() {
  var items = []
  this.forEach(function(value) {
    items.push(value)
  })
  return iteratorFor(items)
}

Headers.prototype.entries = function() {
  var items = []
  this.forEach(function(value, name) {
    items.push([name, value])
  })
  return iteratorFor(items)
}

if (support.iterable) {
  Headers.prototype[Symbol.iterator] = Headers.prototype.entries
}

function consumed(body) {
  if (body._noBody) return
  if (body.bodyUsed) {
    return Promise.reject(new TypeError('Already read'))
  }
  body.bodyUsed = true
}

function fileReaderReady(reader) {
  return new Promise(function(resolve, reject) {
    reader.onload = function() {
      resolve(reader.result)
    }
    reader.onerror = function() {
      reject(reader.error)
    }
  })
}

function readBlobAsArrayBuffer(blob) {
  var reader = new FileReader()
  var promise = fileReaderReady(reader)
  reader.readAsArrayBuffer(blob)
  return promise
}

function readBlobAsText(blob) {
  var reader = new FileReader()
  var promise = fileReaderReady(reader)
  var match = /charset=([A-Za-z0-9_-]+)/.exec(blob.type)
  var encoding = match ? match[1] : 'utf-8'
  reader.readAsText(blob, encoding)
  return promise
}

function readArrayBufferAsText(buf) {
  var view = new Uint8Array(buf)
  var chars = new Array(view.length)

  for (var i = 0; i < view.length; i++) {
    chars[i] = String.fromCharCode(view[i])
  }
  return chars.join('')
}

function bufferClone(buf) {
  if (buf.slice) {
    return buf.slice(0)
  } else {
    var view = new Uint8Array(buf.byteLength)
    view.set(new Uint8Array(buf))
    return view.buffer
  }
}

function Body() {
  this.bodyUsed = false

  this._initBody = function(body) {
    /*
      fetch-mock wraps the Response object in an ES6 Proxy to
      provide useful test harness features such as flush. However, on
      ES5 browsers without fetch or Proxy support pollyfills must be used;
      the proxy-pollyfill is unable to proxy an attribute unless it exists
      on the object before the Proxy is created. This change ensures
      Response.bodyUsed exists on the instance, while maintaining the
      semantic of setting Request.bodyUsed in the constructor before
      _initBody is called.
    */
    // eslint-disable-next-line no-self-assign
    this.bodyUsed = this.bodyUsed
    this._bodyInit = body
    if (!body) {
      this._noBody = true;
      this._bodyText = ''
    } else if (typeof body === 'string') {
      this._bodyText = body
    } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
      this._bodyBlob = body
    } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
      this._bodyFormData = body
    } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
      this._bodyText = body.toString()
    } else if (support.arrayBuffer && support.blob && isDataView(body)) {
      this._bodyArrayBuffer = bufferClone(body.buffer)
      // IE 10-11 can't handle a DataView body.
      this._bodyInit = new Blob([this._bodyArrayBuffer])
    } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
      this._bodyArrayBuffer = bufferClone(body)
    } else {
      this._bodyText = body = Object.prototype.toString.call(body)
    }

    if (!this.headers.get('content-type')) {
      if (typeof body === 'string') {
        this.headers.set('content-type', 'text/plain;charset=UTF-8')
      } else if (this._bodyBlob && this._bodyBlob.type) {
        this.headers.set('content-type', this._bodyBlob.type)
      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
        this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')
      }
    }
  }

  if (support.blob) {
    this.blob = function() {
      var rejected = consumed(this)
      if (rejected) {
        return rejected
      }

      if (this._bodyBlob) {
        return Promise.resolve(this._bodyBlob)
      } else if (this._bodyArrayBuffer) {
        return Promise.resolve(new Blob([this._bodyArrayBuffer]))
      } else if (this._bodyFormData) {
        throw new Error('could not read FormData body as blob')
      } else {
        return Promise.resolve(new Blob([this._bodyText]))
      }
    }
  }

  this.arrayBuffer = function() {
    if (this._bodyArrayBuffer) {
      var isConsumed = consumed(this)
      if (isConsumed) {
        return isConsumed
      } else if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
        return Promise.resolve(
          this._bodyArrayBuffer.buffer.slice(
            this._bodyArrayBuffer.byteOffset,
            this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength
          )
        )
      } else {
        return Promise.resolve(this._bodyArrayBuffer)
      }
    } else if (support.blob) {
      return this.blob().then(readBlobAsArrayBuffer)
    } else {
      throw new Error('could not read as ArrayBuffer')
    }
  }

  this.text = function() {
    var rejected = consumed(this)
    if (rejected) {
      return rejected
    }

    if (this._bodyBlob) {
      return readBlobAsText(this._bodyBlob)
    } else if (this._bodyArrayBuffer) {
      return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
    } else if (this._bodyFormData) {
      throw new Error('could not read FormData body as text')
    } else {
      return Promise.resolve(this._bodyText)
    }
  }

  if (support.formData) {
    this.formData = function() {
      return this.text().then(decode)
    }
  }

  this.json = function() {
    return this.text().then(JSON.parse)
  }

  return this
}

// HTTP methods whose capitalization should be normalized
var methods = ['CONNECT', 'DELETE', 'GET', 'HEAD', 'OPTIONS', 'PATCH', 'POST', 'PUT', 'TRACE']

function normalizeMethod(method) {
  var upcased = method.toUpperCase()
  return methods.indexOf(upcased) > -1 ? upcased : method
}

function Request(input, options) {
  if (!(this instanceof Request)) {
    throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.')
  }

  options = options || {}
  var body = options.body

  if (input instanceof Request) {
    if (input.bodyUsed) {
      throw new TypeError('Already read')
    }
    this.url = input.url
    this.credentials = input.credentials
    if (!options.headers) {
      this.headers = new Headers(input.headers)
    }
    this.method = input.method
    this.mode = input.mode
    this.signal = input.signal
    if (!body && input._bodyInit != null) {
      body = input._bodyInit
      input.bodyUsed = true
    }
  } else {
    this.url = String(input)
  }

  this.credentials = options.credentials || this.credentials || 'same-origin'
  if (options.headers || !this.headers) {
    this.headers = new Headers(options.headers)
  }
  this.method = normalizeMethod(options.method || this.method || 'GET')
  this.mode = options.mode || this.mode || null
  this.signal = options.signal || this.signal || (function () {
    if ('AbortController' in g) {
      var ctrl = new AbortController();
      return ctrl.signal;
    }
  }());
  this.referrer = null

  if ((this.method === 'GET' || this.method === 'HEAD') && body) {
    throw new TypeError('Body not allowed for GET or HEAD requests')
  }
  this._initBody(body)

  if (this.method === 'GET' || this.method === 'HEAD') {
    if (options.cache === 'no-store' || options.cache === 'no-cache') {
      // Search for a '_' parameter in the query string
      var reParamSearch = /([?&])_=[^&]*/
      if (reParamSearch.test(this.url)) {
        // If it already exists then set the value with the current time
        this.url = this.url.replace(reParamSearch, '$1_=' + new Date().getTime())
      } else {
        // Otherwise add a new '_' parameter to the end with the current time
        var reQueryString = /\?/
        this.url += (reQueryString.test(this.url) ? '&' : '?') + '_=' + new Date().getTime()
      }
    }
  }
}

Request.prototype.clone = function() {
  return new Request(this, {body: this._bodyInit})
}

function decode(body) {
  var form = new FormData()
  body
    .trim()
    .split('&')
    .forEach(function(bytes) {
      if (bytes) {
        var split = bytes.split('=')
        var name = split.shift().replace(/\+/g, ' ')
        var value = split.join('=').replace(/\+/g, ' ')
        form.append(decodeURIComponent(name), decodeURIComponent(value))
      }
    })
  return form
}

function parseHeaders(rawHeaders) {
  var headers = new Headers()
  // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
  // https://tools.ietf.org/html/rfc7230#section-3.2
  var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ')
  // Avoiding split via regex to work around a common IE11 bug with the core-js 3.6.0 regex polyfill
  // https://github.com/github/fetch/issues/748
  // https://github.com/zloirock/core-js/issues/751
  preProcessedHeaders
    .split('\r')
    .map(function(header) {
      return header.indexOf('\n') === 0 ? header.substr(1, header.length) : header
    })
    .forEach(function(line) {
      var parts = line.split(':')
      var key = parts.shift().trim()
      if (key) {
        var value = parts.join(':').trim()
        try {
          headers.append(key, value)
        } catch (error) {
          console.warn('Response ' + error.message)
        }
      }
    })
  return headers
}

Body.call(Request.prototype)

function Response(bodyInit, options) {
  if (!(this instanceof Response)) {
    throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.')
  }
  if (!options) {
    options = {}
  }

  this.type = 'default'
  this.status = options.status === undefined ? 200 : options.status
  if (this.status < 200 || this.status > 599) {
    throw new RangeError("Failed to construct 'Response': The status provided (0) is outside the range [200, 599].")
  }
  this.ok = this.status >= 200 && this.status < 300
  this.statusText = options.statusText === undefined ? '' : '' + options.statusText
  this.headers = new Headers(options.headers)
  this.url = options.url || ''
  this._initBody(bodyInit)
}

Body.call(Response.prototype)

Response.prototype.clone = function() {
  return new Response(this._bodyInit, {
    status: this.status,
    statusText: this.statusText,
    headers: new Headers(this.headers),
    url: this.url
  })
}

Response.error = function() {
  var response = new Response(null, {status: 200, statusText: ''})
  response.ok = false
  response.status = 0
  response.type = 'error'
  return response
}

var redirectStatuses = [301, 302, 303, 307, 308]

Response.redirect = function(url, status) {
  if (redirectStatuses.indexOf(status) === -1) {
    throw new RangeError('Invalid status code')
  }

  return new Response(null, {status: status, headers: {location: url}})
}

var DOMException = g.DOMException
try {
  new DOMException()
} catch (err) {
  DOMException = function(message, name) {
    this.message = message
    this.name = name
    var error = Error(message)
    this.stack = error.stack
  }
  DOMException.prototype = Object.create(Error.prototype)
  DOMException.prototype.constructor = DOMException
}

function fetch(input, init) {
  return new Promise(function(resolve, reject) {
    var request = new Request(input, init)

    if (request.signal && request.signal.aborted) {
      return reject(new DOMException('Aborted', 'AbortError'))
    }

    var xhr = new XMLHttpRequest()

    function abortXhr() {
      xhr.abort()
    }

    xhr.onload = function() {
      var options = {
        statusText: xhr.statusText,
        headers: parseHeaders(xhr.getAllResponseHeaders() || '')
      }
      // This check if specifically for when a user fetches a file locally from the file system
      // Only if the status is out of a normal range
      if (request.url.indexOf('file://') === 0 && (xhr.status < 200 || xhr.status > 599)) {
        options.status = 200;
      } else {
        options.status = xhr.status;
      }
      options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')
      var body = 'response' in xhr ? xhr.response : xhr.responseText
      setTimeout(function() {
        resolve(new Response(body, options))
      }, 0)
    }

    xhr.onerror = function() {
      setTimeout(function() {
        reject(new TypeError('Network request failed'))
      }, 0)
    }

    xhr.ontimeout = function() {
      setTimeout(function() {
        reject(new TypeError('Network request timed out'))
      }, 0)
    }

    xhr.onabort = function() {
      setTimeout(function() {
        reject(new DOMException('Aborted', 'AbortError'))
      }, 0)
    }

    function fixUrl(url) {
      try {
        return url === '' && g.location.href ? g.location.href : url
      } catch (e) {
        return url
      }
    }

    xhr.open(request.method, fixUrl(request.url), true)

    if (request.credentials === 'include') {
      xhr.withCredentials = true
    } else if (request.credentials === 'omit') {
      xhr.withCredentials = false
    }

    if ('responseType' in xhr) {
      if (support.blob) {
        xhr.responseType = 'blob'
      } else if (
        support.arrayBuffer
      ) {
        xhr.responseType = 'arraybuffer'
      }
    }

    if (init && typeof init.headers === 'object' && !(init.headers instanceof Headers || (g.Headers && init.headers instanceof g.Headers))) {
      var names = [];
      Object.getOwnPropertyNames(init.headers).forEach(function(name) {
        names.push(normalizeName(name))
        xhr.setRequestHeader(name, normalizeValue(init.headers[name]))
      })
      request.headers.forEach(function(value, name) {
        if (names.indexOf(name) === -1) {
          xhr.setRequestHeader(name, value)
        }
      })
    } else {
      request.headers.forEach(function(value, name) {
        xhr.setRequestHeader(name, value)
      })
    }

    if (request.signal) {
      request.signal.addEventListener('abort', abortXhr)

      xhr.onreadystatechange = function() {
        // DONE (success or failure)
        if (xhr.readyState === 4) {
          request.signal.removeEventListener('abort', abortXhr)
        }
      }
    }

    xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)
  })
}

fetch.polyfill = true

if (!g.fetch) {
  g.fetch = fetch
  g.Headers = Headers
  g.Request = Request
  g.Response = Response
}


/***/ }),

/***/ "?4f7e":
/*!********************************!*\
  !*** ./util.inspect (ignored) ***!
  \********************************/
/***/ (() => {

/* (ignored) */

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/amd options */
/******/ 	(() => {
/******/ 		__webpack_require__.amdO = {};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/ensure chunk */
/******/ 	(() => {
/******/ 		__webpack_require__.f = {};
/******/ 		// This file contains only the entry chunk.
/******/ 		// The chunk loading function for additional chunks
/******/ 		__webpack_require__.e = (chunkId) => {
/******/ 			return Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {
/******/ 				__webpack_require__.f[key](chunkId, promises);
/******/ 				return promises;
/******/ 			}, []));
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get javascript chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference async chunks
/******/ 		__webpack_require__.u = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "theme-bundle.chunk." + chunkId + ".js";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/harmony module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.hmd = (module) => {
/******/ 			module = Object.create(module);
/******/ 			if (!module.children) module.children = [];
/******/ 			Object.defineProperty(module, 'exports', {
/******/ 				enumerable: true,
/******/ 				set: () => {
/******/ 					throw new Error('ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: ' + module.id);
/******/ 				}
/******/ 			});
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/load script */
/******/ 	(() => {
/******/ 		var inProgress = {};
/******/ 		var dataWebpackPrefix = "bigcommerce-hera:";
/******/ 		// loadScript function to load a script via script tag
/******/ 		__webpack_require__.l = (url, done, key, chunkId) => {
/******/ 			if(inProgress[url]) { inProgress[url].push(done); return; }
/******/ 			var script, needAttach;
/******/ 			if(key !== undefined) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				for(var i = 0; i < scripts.length; i++) {
/******/ 					var s = scripts[i];
/******/ 					if(s.getAttribute("src") == url || s.getAttribute("data-webpack") == dataWebpackPrefix + key) { script = s; break; }
/******/ 				}
/******/ 			}
/******/ 			if(!script) {
/******/ 				needAttach = true;
/******/ 				script = document.createElement('script');
/******/ 		
/******/ 				script.charset = 'utf-8';
/******/ 				script.timeout = 120;
/******/ 				if (__webpack_require__.nc) {
/******/ 					script.setAttribute("nonce", __webpack_require__.nc);
/******/ 				}
/******/ 				script.setAttribute("data-webpack", dataWebpackPrefix + key);
/******/ 		
/******/ 				script.src = url;
/******/ 			}
/******/ 			inProgress[url] = [done];
/******/ 			var onScriptComplete = (prev, event) => {
/******/ 				// avoid mem leaks in IE.
/******/ 				script.onerror = script.onload = null;
/******/ 				clearTimeout(timeout);
/******/ 				var doneFns = inProgress[url];
/******/ 				delete inProgress[url];
/******/ 				script.parentNode && script.parentNode.removeChild(script);
/******/ 				doneFns && doneFns.forEach((fn) => (fn(event)));
/******/ 				if(prev) return prev(event);
/******/ 			}
/******/ 			var timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);
/******/ 			script.onerror = onScriptComplete.bind(null, script.onerror);
/******/ 			script.onload = onScriptComplete.bind(null, script.onload);
/******/ 			needAttach && document.head.appendChild(script);
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')
/******/ 				scriptUrl = document.currentScript.src;
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) {
/******/ 					var i = scripts.length - 1;
/******/ 					while (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"main": 0
/******/ 		};
/******/ 		
/******/ 		__webpack_require__.f.j = (chunkId, promises) => {
/******/ 				// JSONP chunk loading for javascript
/******/ 				var installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;
/******/ 				if(installedChunkData !== 0) { // 0 means "already installed".
/******/ 		
/******/ 					// a Promise means "currently loading".
/******/ 					if(installedChunkData) {
/******/ 						promises.push(installedChunkData[2]);
/******/ 					} else {
/******/ 						if(true) { // all chunks have JS
/******/ 							// setup Promise in chunk cache
/******/ 							var promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));
/******/ 							promises.push(installedChunkData[2] = promise);
/******/ 		
/******/ 							// start chunk loading
/******/ 							var url = __webpack_require__.p + __webpack_require__.u(chunkId);
/******/ 							// create error before stack unwound to get useful stacktrace later
/******/ 							var error = new Error();
/******/ 							var loadingEnded = (event) => {
/******/ 								if(__webpack_require__.o(installedChunks, chunkId)) {
/******/ 									installedChunkData = installedChunks[chunkId];
/******/ 									if(installedChunkData !== 0) installedChunks[chunkId] = undefined;
/******/ 									if(installedChunkData) {
/******/ 										var errorType = event && (event.type === 'load' ? 'missing' : event.type);
/******/ 										var realSrc = event && event.target && event.target.src;
/******/ 										error.message = 'Loading chunk ' + chunkId + ' failed.\n(' + errorType + ': ' + realSrc + ')';
/******/ 										error.name = 'ChunkLoadError';
/******/ 										error.type = errorType;
/******/ 										error.request = realSrc;
/******/ 										installedChunkData[1](error);
/******/ 									}
/******/ 								}
/******/ 							};
/******/ 							__webpack_require__.l(url, loadingEnded, "chunk-" + chunkId, chunkId);
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 		};
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		// no on chunks loaded
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 		
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunkbigcommerce_hera"] = self["webpackChunkbigcommerce_hera"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!**************************!*\
  !*** ./assets/js/app.js ***!
  \**************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _theme_global__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./theme/global */ "./assets/js/theme/global.js");
/* harmony import */ var _custom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./custom */ "./assets/js/custom.js");
/* harmony import */ var _custom__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_custom__WEBPACK_IMPORTED_MODULE_1__);
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");
__webpack_require__.p = window.__webpack_public_path__; // eslint-disable-line


window.$ = $;
window.jquery = $;

var getAccount = function getAccount() {
  return Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_creditcards_index_js-node_modules_lodash_find_js-node_modules_lodash_reduce_js"), __webpack_require__.e("assets_js_theme_account_js")]).then(__webpack_require__.bind(__webpack_require__, /*! ./theme/account */ "./assets/js/theme/account.js"));
};
var getLogin = function getLogin() {
  return __webpack_require__.e(/*! import() */ "assets_js_theme_auth_js").then(__webpack_require__.bind(__webpack_require__, /*! ./theme/auth */ "./assets/js/theme/auth.js"));
};
var noop = null;
var pageClasses = {
  account_orderstatus: getAccount,
  account_order: getAccount,
  account_addressbook: getAccount,
  shippingaddressform: getAccount,
  account_new_return: getAccount,
  'add-wishlist': function addWishlist() {
    return Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./theme/wishlist */ "./assets/js/theme/wishlist.js"));
  },
  account_recentitems: getAccount,
  account_downloaditem: getAccount,
  editaccount: getAccount,
  account_inbox: getAccount,
  account_saved_return: getAccount,
  account_returns: getAccount,
  account_paymentmethods: getAccount,
  account_addpaymentmethod: getAccount,
  account_editpaymentmethod: getAccount,
  login: getLogin,
  createaccount_thanks: getLogin,
  createaccount: getLogin,
  getnewpassword: getLogin,
  forgotpassword: getLogin,
  blog: function blog() {
    return __webpack_require__.e(/*! import() */ "assets_js_theme_blog_js").then(__webpack_require__.bind(__webpack_require__, /*! ./theme/blog */ "./assets/js/theme/blog.js"));
  },
  blog_post: function blog_post() {
    return __webpack_require__.e(/*! import() */ "assets_js_theme_blog_js").then(__webpack_require__.bind(__webpack_require__, /*! ./theme/blog */ "./assets/js/theme/blog.js"));
  },
  brand: function brand() {
    return Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_lodash_union_js-node_modules_lodash_without_js"), __webpack_require__.e("assets_js_theme_catalog_js-assets_js_theme_common_faceted-search_js-assets_js_theme_global_co-d90c8d"), __webpack_require__.e("assets_js_theme_brand_js")]).then(__webpack_require__.bind(__webpack_require__, /*! ./theme/brand */ "./assets/js/theme/brand.js"));
  },
  brands: noop,
  cart: function cart() {
    return __webpack_require__.e(/*! import() */ "assets_js_theme_cart_js").then(__webpack_require__.bind(__webpack_require__, /*! ./theme/cart */ "./assets/js/theme/cart.js"));
  },
  category: function category() {
    return Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_lodash_union_js-node_modules_lodash_without_js"), __webpack_require__.e("assets_js_theme_catalog_js-assets_js_theme_common_faceted-search_js-assets_js_theme_global_co-d90c8d"), __webpack_require__.e("assets_js_theme_category_js")]).then(__webpack_require__.bind(__webpack_require__, /*! ./theme/category */ "./assets/js/theme/category.js"));
  },
  compare: function compare() {
    return __webpack_require__.e(/*! import() */ "assets_js_theme_compare_js").then(__webpack_require__.bind(__webpack_require__, /*! ./theme/compare */ "./assets/js/theme/compare.js"));
  },
  page_contact_form: function page_contact_form() {
    return __webpack_require__.e(/*! import() */ "assets_js_theme_contact-us_js").then(__webpack_require__.bind(__webpack_require__, /*! ./theme/contact-us */ "./assets/js/theme/contact-us.js"));
  },
  error: noop,
  404: noop,
  giftcertificates: function giftcertificates() {
    return __webpack_require__.e(/*! import() */ "assets_js_theme_gift-certificate_js").then(__webpack_require__.bind(__webpack_require__, /*! ./theme/gift-certificate */ "./assets/js/theme/gift-certificate.js"));
  },
  giftcertificates_balance: function giftcertificates_balance() {
    return __webpack_require__.e(/*! import() */ "assets_js_theme_gift-certificate_js").then(__webpack_require__.bind(__webpack_require__, /*! ./theme/gift-certificate */ "./assets/js/theme/gift-certificate.js"));
  },
  giftcertificates_redeem: function giftcertificates_redeem() {
    return __webpack_require__.e(/*! import() */ "assets_js_theme_gift-certificate_js").then(__webpack_require__.bind(__webpack_require__, /*! ./theme/gift-certificate */ "./assets/js/theme/gift-certificate.js"));
  },
  "default": function _default() {
    return __webpack_require__.e(/*! import() */ "assets_js_theme_home_js").then(__webpack_require__.bind(__webpack_require__, /*! ./theme/home */ "./assets/js/theme/home.js"));
  },
  page: function page() {
    return __webpack_require__.e(/*! import() */ "assets_js_theme_page_js").then(__webpack_require__.bind(__webpack_require__, /*! ./theme/page */ "./assets/js/theme/page.js"));
  },
  product: function product() {
    return Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_sortablejs_modular_sortable_esm_js"), __webpack_require__.e("assets_js_theme_product_js")]).then(__webpack_require__.bind(__webpack_require__, /*! ./theme/product */ "./assets/js/theme/product.js"));
  },
  search: function search() {
    return Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_lodash_union_js-node_modules_lodash_without_js"), __webpack_require__.e("vendors-node_modules_jstree_dist_jstree_min_js"), __webpack_require__.e("assets_js_theme_catalog_js-assets_js_theme_common_faceted-search_js-assets_js_theme_global_co-d90c8d"), __webpack_require__.e("assets_js_theme_search_js")]).then(__webpack_require__.bind(__webpack_require__, /*! ./theme/search */ "./assets/js/theme/search.js"));
  },
  rss: noop,
  sitemap: noop,
  newsletter_subscribe: noop,
  wishlist: function wishlist() {
    return Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./theme/wishlist */ "./assets/js/theme/wishlist.js"));
  },
  wishlists: function wishlists() {
    return Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./theme/wishlist */ "./assets/js/theme/wishlist.js"));
  }
};
var customClasses = {};

/**
 * This function gets added to the global window and then called
 * on page load with the current template loaded and JS Context passed in
 * @param pageType String
 * @param contextJSON
 * @returns {*}
 */
window.stencilBootstrap = function stencilBootstrap(pageType, contextJSON, loadGlobal) {
  if (contextJSON === void 0) {
    contextJSON = null;
  }
  if (loadGlobal === void 0) {
    loadGlobal = true;
  }
  var context = JSON.parse(contextJSON || '{}');
  return {
    load: function load() {
      $(function () {
        // Load globals
        if (loadGlobal) {
          _theme_global__WEBPACK_IMPORTED_MODULE_0__["default"].load(context);
        }
        var importPromises = [];

        // Find the appropriate page loader based on pageType
        var pageClassImporter = pageClasses[pageType];
        if (typeof pageClassImporter === 'function') {
          importPromises.push(pageClassImporter());
        }

        // See if there is a page class default for a custom template
        var customTemplateImporter = customClasses[context.template];
        if (typeof customTemplateImporter === 'function') {
          importPromises.push(customTemplateImporter());
        }

        // Wait for imports to resolve, then call load() on them
        Promise.all(importPromises).then(function (imports) {
          imports.forEach(function (imported) {
            imported["default"].load(context);
          });
        });
      });
    }
  };
};
console.log("Bearer {{ settings.storefront_api.token }}");
})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsd0RBQU87QUFDOUI7QUFDQTtBQUNBO0FBQ0EseURBQXlELEtBQUs7QUFDOUQ7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRDtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNEO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsNkRBQTZELHVDQUF1QztBQUNwRztBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaLGlEQUFpRCxRQUFRO0FBQ3pEO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxRQUFRO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGFBQWE7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0RBQStEO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDO0FBQ3ZDLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLHNEQUFPOzs7Ozs7Ozs7Ozs7Ozs7O0FDaDdCMUIsaUVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7QUNKRjtBQUNBO0FBQ0E7QUFDQTs7QUFFTztBQUNQO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLEtBQUs7O0FBRUw7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLCtCQUErQixjQUFjO0FBQzdDO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLCtCQUErQixvQkFBb0I7QUFDbkQ7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsMkRBQTJELE1BQU07O0FBRWpFO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBLFVBQVU7QUFDVjtBQUNBOztBQUVBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7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O0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7O0FBRVI7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2x3QnlEO0FBQ3pEO0FBQ3NEO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxhQUFhO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRkFBaUYsZ0JBQWdCO0FBQ2pHLHNGQUFzRixnQkFBZ0I7QUFDdEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHdEQUFPO0FBQy9CO0FBQ0EsTUFBTSwrREFBTSwrQ0FBK0M7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLDRCQUE0QjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsNEJBQTRCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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QUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsNkVBQWE7QUFDdkI7QUFDQSxlQUFlLCtEQUFNLEdBQUc7QUFDeEIsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQsZUFBZTtBQUN4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNB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Q0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNOztBQUVOOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQSxNQUFNOzs7QUFHTix5Q0FBeUM7QUFDekM7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTzs7QUFFUCxrREFBa0Q7O0FBRWxEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7O0FBRTJCO0FBQzNCOzs7Ozs7Ozs7Ozs7QUN4dkJhLFlBQVksWUFBWSxjQUFjLGNBQWMsc0NBQXNDLFdBQVcsU0FBUyxjQUFjLG1CQUFtQiw2RUFBNkUsMkZBQTJGLGNBQWMsbUJBQW1CLDZFQUE2RSxNQUFNLG1CQUFtQjtBQUMzYyx5RkFBeUYsYUFBYSxrQkFBa0IsYUFBYSxLQUFLLG9GQUFvRixxRkFBcUYsT0FBTyxnQ0FBZ0MsV0FBVyx3Q0FBd0MsdUNBQXVDLG9DQUFvQyxTQUFTO0FBQ2plLE1BQU0sSUFBSSw0RUFBNEUsU0FBUyxZQUFZLElBQUk7QUFDL0c7Ozs7Ozs7Ozs7OztBQ0hBLENBQUM7QUFDRDs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0EsS0FBSzs7QUFFTDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBOztBQUVBOzs7O0FBSUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0EsMEJBQTBCLHNCQUFzQjtBQUNoRDs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBOztBQUVBLGdCQUFnQjtBQUNoQixPQUFPOztBQUVQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0Esa0JBQWtCO0FBQ2xCOztBQUVBLGdCQUFnQjtBQUNoQixPQUFPOztBQUVQO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxnQkFBZ0I7QUFDaEIsT0FBTzs7QUFFUDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBLGdCQUFnQjtBQUNoQjtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHdEQUF3RDtBQUN4RCw4REFBOEQ7O0FBRTlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNEO0FBQ3RELDREQUE0RDtBQUM1RDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQyxpQ0FBaUM7QUFDakM7O0FBRUE7QUFDQSx3Q0FBd0MsaUJBQWlCO0FBQ3pELHVDQUF1QyxnQkFBZ0I7QUFDdkQsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLENBQUMsQ0FBQyxNQUFNOzs7Ozs7Ozs7Ozs7QUNuZFI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnRUFBZ0U7O0FBRWhFO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsMkJBQTJCO0FBQzNCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxvREFBb0QscUJBQXFCLGVBQWU7O0FBRXhGO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBUyxxREFBcUQ7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSwyQ0FBMkMsSUFBSTtBQUMvQzs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsaUdBQWlHLElBQUk7QUFDckc7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7O0FBRUE7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTCxhQUFhOztBQUViO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsbURBQW1EO0FBQ25EOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWOztBQUVBO0FBQ0E7QUFDQSxtREFBbUQsY0FBYztBQUNqRTtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLDRDQUE0QyxRQUFRO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1QsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNB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QTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7O0FBRWI7QUFDQSx3REFBd0QsU0FBUztBQUNqRTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxvREFBb0QsU0FBUztBQUM3RDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBLCtDQUErQyxTQUFTO0FBQ3hEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQixTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7O0FBRUE7QUFDQTtBQUNBLHdDQUF3QztBQUN4QztBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG9EQUFvRDtBQUNwRCxvREFBb0Q7QUFDcEQsb0RBQW9EO0FBQ3BEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDZEQUE2RCxnQkFBZ0I7O0FBRTdFO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLG9DQUFhO0FBQ3pCLG1CQUFtQixvQ0FBYTtBQUNoQzs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNB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a0JBQWtCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBOztBQUVBLGdCQUFnQixrQkFBa0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsbUNBQW1DLFFBQVE7QUFDM0M7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLG9CQUFvQixpQkFBaUI7QUFDckM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7Ozs7Ozs7Ozs7OztBQ3ZTYTs7QUFFYixxQkFBcUIsbUJBQU8sQ0FBQywwREFBYztBQUMzQyxZQUFZLG1CQUFPLENBQUMsK0NBQVM7QUFDN0IsY0FBYyxtQkFBTyxDQUFDLG1EQUFXO0FBQ2pDOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixnRUFBZ0U7QUFDckYsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsb0JBQW9CLG9CQUFvQjtBQUN4QztBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxvQkFBb0Isb0JBQW9CO0FBQ3hDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwyQ0FBMkM7QUFDM0M7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7Ozs7Ozs7Ozs7O0FDOVZhOztBQUViLGNBQWMsbUJBQU8sQ0FBQyxtREFBVzs7QUFFakM7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esb0JBQW9CLFNBQVM7QUFDN0I7QUFDQTs7QUFFQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSw0QkFBNEIsZ0JBQWdCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxvQkFBb0IsbUJBQW1CO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsRUFBRTtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0Esa0RBQWtELEVBQUU7QUFDcEQ7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQSxvQkFBb0IsbUJBQW1CO0FBQ3ZDO0FBQ0E7O0FBRUEsd0JBQXdCLG9CQUFvQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxtQkFBbUIsT0FBTyxVQUFVLGFBQWE7QUFDakQ7O0FBRUEsb0JBQW9CLGtCQUFrQjtBQUN0QztBQUNBOztBQUVBO0FBQ0Esd0JBQXdCLGlCQUFpQjtBQUN6QztBQUNBO0FBQ0E7QUFDQSw2QkFBNkIscUJBQXFCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnQkFBZ0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7O0FDeFFhOztBQUViLG1CQUFtQixtQkFBTyxDQUFDLDREQUFlO0FBQzFDLGFBQWEsbUJBQU8sQ0FBQywwRUFBc0I7QUFDM0MscUJBQXFCLG1CQUFPLENBQUMsa0ZBQTBCO0FBQ3ZELFdBQVcsbUJBQU8sQ0FBQywwQ0FBTTs7QUFFekIsaUJBQWlCLG1CQUFPLENBQUMsd0RBQWdCO0FBQ3pDOztBQUVBLFdBQVcsYUFBYTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxxQkFBcUIsdUJBQXVCO0FBQzVDLElBQUk7QUFDSixxQkFBcUIsdUJBQXVCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7QUN6Q2E7O0FBRWIsbUJBQW1CLG1CQUFPLENBQUMsNERBQWU7QUFDMUMsZ0JBQWdCLG1CQUFPLENBQUMsa0VBQXFCO0FBQzdDLGNBQWMsbUJBQU8sQ0FBQyw4REFBZ0I7O0FBRXRDLGlCQUFpQixtQkFBTyxDQUFDLHdEQUFnQjtBQUN6QztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyx5QkFBeUI7QUFDcEMseUNBQXlDO0FBQ3pDLFlBQVksa0RBQWtEO0FBQzlEO0FBQ0EsWUFBWSx1QkFBdUI7QUFDbkM7QUFDQSxRQUFRLDZCQUE2QjtBQUNyQztBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsK0JBQStCO0FBQ3pELHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxXQUFXLHFCQUFxQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcscUJBQXFCO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsNEJBQTRCLG9DQUFvQyxNQUFNO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsV0FBVyxxQkFBcUI7QUFDaEM7QUFDQTtBQUNBOztBQUVBLFdBQVcsYUFBYTtBQUN4QjtBQUNBLFlBQVksMEJBQTBCO0FBQ3RDLFlBQVksc0JBQXNCO0FBQ2xDLFlBQVksK0JBQStCOztBQUUzQyxZQUFZLHFCQUFxQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZLE9BQU87QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDaElBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGFBQWEsYUFBYSxLQUFxQyxDQUFDLGlDQUFPLENBQUMsNkVBQVEsQ0FBQyxvQ0FBQyxDQUFDO0FBQUE7QUFBQTtBQUFBLGtHQUFDLENBQUMsQ0FBeUUsQ0FBQyxhQUFhLGFBQWEsdUJBQXVCLGFBQWEsZ0JBQWdCLGFBQWEsWUFBWSxrZEFBa2QsMkZBQTJGLDBlQUEwZSxhQUFhLGdVQUFnVSxtQ0FBbUMsNGJBQTRiLHNCQUFzQiw0eEJBQTR4QixRQUFRLFNBQVMsc0NBQXNDLFdBQVcsMENBQTBDLHNCQUFzQix5Q0FBeUMsYUFBYSxFQUFFLDJEQUEyRCxXQUFXLGtDQUFrQyxzQ0FBc0Msc1lBQXNZLGdDQUFnQyxzQ0FBc0Msc0NBQXNDLFdBQVcsdUZBQXVGLG1EQUFtRCxpQkFBaUIsU0FBUyxtQkFBbUIsd0NBQXdDLFFBQVEsUUFBUSw4SUFBOEksT0FBTyw0REFBNEQsTUFBTSxrSEFBa0gsd0JBQXdCLFdBQVcsWUFBWSxFQUFFLGtFQUFrRSxvS0FBb0sscUJBQXFCLGFBQWEsME1BQTBNLCtCQUErQixtQkFBbUIscUNBQXFDLGdDQUFnQyw4Q0FBOEMsa0NBQWtDLDhCQUE4QixnREFBZ0QsZ0NBQWdDLGtDQUFrQyxFQUFFLHlDQUF5QyxnQkFBZ0IsMk9BQTJPLGlDQUFpQyxXQUFXLGlJQUFpSSxzQ0FBc0MsV0FBVyxnREFBZ0QseUNBQXlDLHFEQUFxRCx3UEFBd1Asb0NBQW9DLFdBQVcsbXBCQUFtcEIscUNBQXFDLEdBQUcsa0NBQWtDLGVBQWUsNkRBQTZELHVGQUF1RixtQkFBbUIseUVBQXlFLDBIQUEwSCxpQ0FBaUMsV0FBVyx1SkFBdUosK0VBQStFLDJuQkFBMm5CLGtDQUFrQyx5QkFBeUIsZ0ZBQWdGLHdFQUF3RSxJQUFJLEtBQUssb0NBQW9DLFFBQVEsaUJBQWlCLEtBQUssb0NBQW9DLFFBQVEseUJBQXlCLEtBQUssdUNBQXVDLGtDQUFrQyxpQkFBaUIsaUJBQWlCLDRFQUE0RSw0REFBNEQsR0FBRywyQ0FBMkMsaUZBQWlGLGdMQUFnTCxPQUFPLGdMQUFnTCw2SkFBNkosNk1BQTZNLHFUQUFxVCx1Q0FBdUMsc0NBQXNDLDhMQUE4TCxvSkFBb0osTUFBTSx5SEFBeUgsTUFBTSxzRkFBc0YsdUVBQXVFLE1BQU0sZ0JBQWdCLHdDQUF3QyxlQUFlLGlFQUFpRSxxQkFBcUIsV0FBVyxJQUFJLE1BQU0sT0FBTyxTQUFTLHNDQUFzQyxXQUFXLHl2Q0FBeXZDLDJDQUEyQyxXQUFXLG9IQUFvSCxvQ0FBb0MsYUFBYSx3R0FBd0csc0NBQXNDLFdBQVcsMEZBQTBGLGlDQUFpQyxXQUFXLGtDQUFrQyxtdEJBQW10QixzREFBc0QscVRBQXFULDJDQUEyQyxnQkFBZ0IsdUZBQXVGLHFDQUFxQyxXQUFXLDRDQUE0Qyx3QkFBd0IsMkJBQTJCLFVBQVUsaUZBQWlGLGtDQUFrQywyQkFBMkIsZ0NBQWdDLG1CQUFtQixzQ0FBc0MsV0FBVywrQ0FBK0Msb0NBQW9DLDhFQUE4RSxvQ0FBb0MsR0FBRyw4REFBOEQsV0FBVyxnS0FBZ0sscUNBQXFDLFdBQVcsc0dBQXNHLDZCQUE2QixjQUFjLHNCQUFzQixpRUFBaUUsSUFBSSxFQUFFLGlFQUFpRSxXQUFXLHNCQUFzQixvQ0FBb0MsdUJBQXVCLGdDQUFnQyxlQUFlLHNJQUFzSSxpREFBaUQsZ0NBQWdDLGVBQWUsc0lBQXNJLG1GQUFtRixXQUFXLGlDQUFpQyxxQkFBcUIsNHVEQUE0dUQsOERBQThELFdBQVcsb0JBQW9CLDRDQUE0QywwQkFBMEIsMEhBQTBILElBQUksNElBQTRJLFNBQVMsaUNBQWlDLFlBQVksc0NBQXNDLGlCQUFpQiwwS0FBMEsseUVBQXlFLHdGQUF3RixzREFBc0QsV0FBVyxlQUFlLE1BQU0sbUNBQW1DLElBQUksOEJBQThCLFdBQVcsb1hBQW9YLGdDQUFnQyxXQUFXLHlEQUF5RCxtQ0FBbUMseUNBQXlDLGNBQWMsMkdBQTJHLGNBQWMsK0RBQStELEVBQUUsNkVBQTZFLGNBQWMsMEhBQTBILEVBQUUsOElBQThJLHdDQUF3QyxXQUFXLCtHQUErRyxtQkFBbUIsa0VBQWtFLGVBQWUsaUJBQWlCLHNDQUFzQyxXQUFXLDRGQUE0RixnQkFBZ0Isd0xBQXdMLHdDQUF3QyxXQUFXLDRJQUE0SSx5Q0FBeUMsV0FBVyx5R0FBeUcsZUFBZSwrREFBK0QsY0FBYyw0REFBNEQsYUFBYSxrRUFBa0UsYUFBYSwrbkJBQStuQiwrQkFBK0IsV0FBVywrS0FBK0ssb0NBQW9DLFdBQVcsOEdBQThHLE1BQU0sOENBQThDLCtEQUErRCxNQUFNLDhDQUE4QyxHQUFHLGlDQUFpQyxjQUFjLHNDQUFzQywwRUFBMEUsb0JBQW9CLFdBQVcsVUFBVSxnQkFBZ0IseUJBQXlCLFVBQVUsZ0JBQWdCLHVEQUF1RCwwQ0FBMEMsRUFBRSxzQkFBc0IsbUlBQW1JLFNBQVMsRUFBRSxtQkFBbUIsMnVCQUEydUIsbUNBQW1DLFdBQVcsbUNBQW1DLFVBQVUsZ0hBQWdILG1EQUFtRCxXQUFXLGVBQWUsTUFBTSxnQkFBZ0IsRUFBRSwwQ0FBMEMsV0FBVyxvQ0FBb0MscURBQXFELFdBQVcsOEJBQThCLG1EQUFtRCxXQUFXLDhFQUE4RSxtQ0FBbUMsV0FBVyxpTEFBaUwsbURBQW1ELFdBQVcsZUFBZSxNQUFNLG9CQUFvQixFQUFFLHdDQUF3QyxtQkFBbUIsNkNBQTZDLE9BQU8saURBQWlELGdHQUFnRyxvTEFBb0wsc0JBQXNCLDBCQUEwQiwyQkFBMkIsbUtBQW1LLG1EQUFtRCxpQ0FBaUMsZUFBZSwrTUFBK00sZUFBZSw2QkFBNkIsTUFBTSx5QkFBeUIsS0FBSyw0Q0FBNEMsOENBQThDLGtDQUFrQywwQ0FBMEMsOEVBQThFLEtBQUssS0FBSyx1RUFBdUUsNERBQTRELGlDQUFpQyxxQ0FBcUMsR0FBRywrQkFBK0IsV0FBVyxzdkJBQXN2QiwrQkFBK0IsV0FBVywyR0FBMkcsaUZBQWlGLE1BQU0saUVBQWlFLFdBQVcsb1pBQW9aLGdDQUFnQyxvQkFBb0IsbU1BQW1NLDZKQUE2SixzQ0FBc0MsV0FBVyxnRUFBZ0UsdUNBQXVDLG9IQUFvSCx1Q0FBdUMscWVBQXFlLGlFQUFpRSwyRkFBMkYsZ0NBQWdDLGFBQWEsNkJBQTZCLGlEQUFpRCxzRUFBc0UsWUFBWSxxRUFBcUUsRUFBRSxvQ0FBb0Msb0NBQW9DLEVBQUUsa0NBQWtDLFdBQVcsdUZBQXVGLG1EQUFtRCx5QkFBeUIsNkRBQTZELDBCQUEwQixzVEFBc1QsOENBQThDLGVBQWUsRUFBRSwwR0FBMEcsS0FBSyxvQ0FBb0MsS0FBSyw0RkFBNEYsZ0NBQWdDLDJCQUEyQixvQ0FBb0MsV0FBVyx5SUFBeUksaUNBQWlDLGlDQUFpQywyMENBQTIwQyx5Q0FBeUMsbUJBQW1CO0FBQzc4OUIsdzRCQUF3NEIsc0NBQXNDLGlCQUFpQiw4SUFBOEksK0ZBQStGLGlCQUFpQiw2SUFBNkksUUFBUSxJQUFJLDBJQUEwSSxpRUFBaUUsc0JBQXNCLEdBQUcsbUNBQW1DLFdBQVcsZ0NBQWdDLHVDQUF1QyxtSUFBbUksc0hBQXNILDBDQUEwQyw0QkFBNEIsK2JBQStiLGVBQWUscU1BQXFNLGVBQWUsK25CQUErbkIsZUFBZSxrRkFBa0YsZUFBZSxvQkFBb0Isa0NBQWtDLFdBQVcsbU5BQW1OLHVDQUF1QyxtQkFBbUIsc1hBQXNYLGtDQUFrQyxlQUFlLHdIQUF3SCxtSUFBbUksNkJBQTZCLHdKQUF3SixNQUFNLHVKQUF1SixrREFBa0QsbUNBQW1DLGdHQUFnRyxFQUFFLHNDQUFzQyxXQUFXLGdhQUFnYSw0QkFBNEIsTUFBTSwwQkFBMEIsTUFBTSx5QkFBeUIsbUNBQW1DLHFCQUFxQixndENBQWd0QyxvQ0FBb0MsYUFBYSw2R0FBNkcsZ1FBQWdRLGlFQUFpRSxXQUFXLDBJQUEwSSwrQkFBK0IsV0FBVyw2VUFBNlUsaUNBQWlDLFdBQVcsK0NBQStDLHFDQUFxQyxhQUFhLHkxQkFBeTFCLG1DQUFtQyxXQUFXLDROQUE0TixtQ0FBbUMsV0FBVywyRUFBMkUsdUJBQXVCLG1GQUFtRixRQUFRLElBQUksNklBQTZJLFVBQVU7Ozs7Ozs7Ozs7QUNqQjd3UztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsYUFBYSxjQUFjLGVBQWUsWUFBWSxpQkFBaUIsSUFBSSxxREFBcUQsbUJBQW1CLHNLQUFzSyx3RUFBd0Usd0JBQXdCLFFBQVEsSUFBSSx3Q0FBd0MsS0FBSyxtQkFBbUIsZUFBZSx1QkFBdUIsaUJBQWlCLDJCQUEyQixlQUFlLDBCQUEwQixJQUFJLGlCQUFpQixzQkFBc0IsaUJBQWlCLElBQUksSUFBSSxpQkFBaUIsZ0VBQWdFLEtBQUssNEVBQTRFLE9BQU8sUUFBUSx5QkFBeUIsZ0NBQWdDLHFCQUFxQiwyT0FBMk8sdUhBQXVILHdFQUF3RSxrREFBa0QsTUFBTSxJQUFJLG9CQUFvQiwrQ0FBK0MsU0FBUyxTQUFTLGdHQUFnRyx1QkFBdUIsTUFBTSw4RUFBOEUscUJBQXFCLHdEQUF3RCw4RkFBOEYsT0FBTyxrRUFBa0UsMk1BQTJNLHVFQUF1RSw0REFBNEQsMkJBQTJCLDBCQUEwQiw4QkFBOEIsNkJBQTZCLGtHQUFrRyw2QkFBNkIsOEJBQThCLDZCQUE2Qiw4Q0FBOEMsc0NBQXNDLEVBQUUscUJBQXFCLGdEQUFnRCxFQUFFLGlCQUFpQixtUUFBbVEsbUNBQW1DLGtEQUFrRCx1QkFBdUIsSUFBSSxLQUFLLG9CQUFvQixNQUFNLHFCQUFxQix5Q0FBeUMsdUJBQXVCLElBQUksdUNBQXVDLGFBQWEsK0JBQStCLCtEQUErRCxJQUFJLGtLQUFrSyxrREFBa0QsdUJBQXVCLElBQUksMEJBQTBCLFFBQVEsa0NBQWtDLHFCQUFxQixrQkFBa0Isd0VBQXdFLEdBQUcsbUJBQW1CLFFBQVEsMkRBQTJELHNCQUFzQixRQUFRLHFCQUFxQixvQkFBb0Isc0RBQXNELEVBQUUsRUFBRSwyQkFBMkIsNkNBQTZDLFdBQVcsS0FBdUIsMkRBQTJELEtBQXFDLENBQUMsbUNBQU8sV0FBVyxTQUFTO0FBQUEsa0dBQUMsQ0FBQyxDQUFxQyxDQUFDO0FBQzd0STs7Ozs7Ozs7OztBQ1JBLGVBQWUsS0FBb0Qsb0JBQW9CLENBQTJFLENBQUMsaUJBQWlCLGFBQWEsY0FBYyxpRkFBaUYsZ0JBQWdCLGFBQWEsb0dBQW9HLEtBQUssZ0JBQWdCLDhFQUE4RSxnQkFBZ0IsWUFBWSxXQUFXLEtBQUssV0FBVywrR0FBK0csa0JBQWtCLHVDQUF1QyxhQUFhLG9DQUFvQyxZQUFZLG1CQUFtQixLQUFLLG1CQUFtQixzRUFBc0UsU0FBUyx3QkFBd0IsY0FBYyxpRUFBaUUsNkNBQTZDLEtBQUssZ0JBQWdCLDhDQUE4Qyx1QkFBdUIsT0FBTyxhQUFhLDREQUE0RCxtQ0FBbUMscUNBQXFDLElBQUksMEVBQTBFLE1BQU0sU0FBUyxVQUFVLGtCQUFrQiwrQ0FBK0MsYUFBYSxrQkFBa0Isb0NBQW9DLDZCQUE2Qix3QkFBd0IsZ0JBQWdCLCtEQUErRCxvR0FBb0csU0FBUyxNQUFNLGtCQUFrQiw4RUFBOEUsb0JBQW9CLEtBQUssNERBQTRELEVBQUUsU0FBUyxNQUFNLE1BQU0sMkNBQTJDLG9DQUFvQyxZQUFZLGNBQWMsc0NBQXNDLFlBQVksRUFBRSxjQUFjLHFDQUFxQyxnQkFBZ0IsTUFBTSx5SkFBeUosY0FBYyx5Q0FBeUMsY0FBYyw2Q0FBNkMsY0FBYyxpQ0FBaUMsY0FBYyx5REFBeUQsTUFBTSxjQUFjLFNBQVMscUNBQXFDLFNBQVMsY0FBYyxVQUFVLGlDQUFpQyxjQUFjLHdCQUF3QixhQUFhLFVBQVUsaURBQWlELGFBQWEsNkJBQTZCLGFBQWEsRUFBRSwwQkFBMEIsYUFBYSxrQkFBa0IsYUFBYSxvQkFBb0IsYUFBYSxrQkFBa0IsYUFBYSw4QkFBOEIsYUFBYSxrQ0FBa0MsYUFBYSx1REFBdUQsYUFBYSxzREFBc0QsYUFBYSxvQkFBb0IsYUFBYSxtQkFBbUIsYUFBYSxtQkFBbUIsYUFBYSxrQ0FBa0MsYUFBYSxrQkFBa0IsYUFBYSx3R0FBd0csb0dBQW9HLHlUQUF5VCx3Q0FBd0MsRUFBRSxtQkFBbUIsaUJBQWlCLFdBQVcsdUNBQXVDLFNBQVMsaUNBQWlDLGFBQWEsRUFBRSxhQUFhLGdFQUFnRSxhQUFhLHdDQUF3QyxnQkFBZ0IsTUFBTSxnSUFBZ0ksaUJBQWlCLDREQUE0RCxpQkFBaUIsR0FBRyxnQkFBZ0IsTUFBTSw2QkFBNkIsV0FBVywwQ0FBMEMsVUFBVSxrQkFBa0IsUUFBUSw4Q0FBOEMsa0dBQWtHLG1DQUFtQyxpTUFBaU0sd0JBQXdCLG1DQUFtQyx5Q0FBeUMsZUFBZSwwQ0FBMEMsb0JBQW9CLGlDQUFpQyxrQkFBa0IsMEVBQTBFLDg0QkFBODRCLDREQUE0RCxjQUFjLGtCQUFrQixjQUFjLDBEQUEwRCxJQUFJLDBCQUEwQixnQkFBZ0Isa0JBQWtCLFVBQVUseURBQXlELHVFQUF1RSxvSUFBb0ksaUVBQWlFLDhCQUE4QixlQUFlLE1BQU0sNERBQTRELG1CQUFtQixvRkFBb0YsZ0NBQWdDLDJDQUEyQyw2Q0FBNkMsR0FBRyxtQkFBbUIsK0ZBQStGLGlCQUFpQiw4Q0FBOEMscUNBQXFDLGVBQWUsMENBQTBDLG1CQUFtQixnQkFBZ0IsZUFBZSx3Q0FBd0MsZUFBZSwwSkFBMEosZ0JBQWdCLGlCQUFpQiw4Q0FBOEMsa0ZBQWtGLHdFQUF3RSxNQUFNLGNBQWMsK0RBQStELGVBQWUsbUZBQW1GLGlCQUFpQiw0RUFBNEUsaUJBQWlCLHNCQUFzQixvSUFBb0ksd0ZBQXdGLG9FQUFvRSxNQUFNLCtIQUErSCxzT0FBc08sd0JBQXdCLFdBQVcsa0JBQWtCLFdBQVcsa0JBQWtCLFlBQVksc0JBQXNCLG1EQUFtRCxnQkFBZ0IseUVBQXlFLG82REFBbzZELGlMQUFpTCxzdkJBQXN2QixzQkFBc0Isd0JBQXdCLGtDQUFrQyxFQUFFLGtCQUFrQixtQ0FBbUMsa0JBQWtCLHVDQUF1QyxPQUFPLHNDQUFzQyxvQ0FBb0MsZUFBZSxpQkFBaUIsdUNBQXVDLHdHQUF3Ryw2RkFBNkYsU0FBUyxHQUFHLG1CQUFtQixNQUFNLDRRQUE0USxpQkFBaUIsMEJBQTBCLCtsQkFBK2xCLGlCQUFpQix1RUFBdUUsUUFBUSxpRUFBaUUsbUZBQW1GLG1NQUFtTSxxQ0FBcUMsNEJBQTRCLE1BQU0sRUFBRSxrQkFBa0IsZUFBZSw4QkFBOEIsWUFBWSxzQkFBc0IsS0FBSywyQkFBMkIsZ0VBQWdFLDZEQUE2RCxnQkFBZ0Isa0JBQWtCLHlDQUF5QyxnQkFBZ0Isd0JBQXdCLGlCQUFpQixPQUFPLG1FQUFtRSxrUEFBa1AsdUJBQXVCLGlCQUFpQix3QkFBd0IsMkRBQTJELGtFQUFrRSx5QkFBeUIsTUFBTSxtS0FBbUssc0JBQXNCLDBCQUEwQiwyQkFBMkIsd0JBQXdCLDBEQUEwRCw4QkFBOEIsaUNBQWlDLDJCQUEyQixRQUFRLDBQQUEwUCxzQkFBc0IsMkNBQTJDLGFBQWEsd0NBQXdDLE1BQU0saUJBQWlCLHlEQUF5RCwyS0FBMksscUJBQXFCLCtDQUErQywrQ0FBK0MsY0FBYyxnREFBZ0QsaUJBQWlCLFVBQVUsK0RBQStELHVCQUF1QiwwRUFBMEUsNE1BQTRNLHVGQUF1RiwrT0FBK08sRUFBRSxpQkFBaUIsMEJBQTBCLG1YQUFtWCxVQUFVLDRCQUE0QixzS0FBc0ssd1BBQXdQLGlCQUFpQixZQUFZLG1RQUFtUSxjQUFjLHdCQUF3QixrQkFBa0Isa0JBQWtCLFdBQVcsYUFBYSxlQUFlLHFLQUFxSyxXQUFXLGlDQUFpQyxrQkFBa0Isc2tCQUFza0Isa0NBQWtDLFdBQVcsZ0JBQWdCLHVFQUF1RSx3QkFBd0Isc1JBQXNSLGNBQWMsVUFBVSxtQkFBbUIsZ0JBQWdCLHdJQUF3SSxjQUFjLCtCQUErQixzQ0FBc0MsNkNBQTZDLG1LQUFtSyxtREFBbUQsRUFBRSxjQUFjLGdDQUFnQyx1REFBdUQsMERBQTBELHFFQUFxRSxvRUFBb0UscUJBQXFCLGNBQWMsZUFBZSx5QkFBeUIsZ0JBQWdCLGVBQWUsa0RBQWtELGVBQWUsYUFBYSxlQUFlLHFMQUFxTCxVQUFVLFNBQVMsS0FBSyw2R0FBNkcseUVBQXlFLFlBQVkseUVBQXlFLHdlQUF3ZSxnUkFBZ1Isb0NBQW9DLDZRQUE2USw0ZkFBNGYsc0NBQXNDLDBJQUEwSSxxREFBcUQseUJBQXlCLG1EQUFtRCxTQUFTLGdGQUFnRixXQUFXLHFJQUFxSSxjQUFjLHNCQUFzQixlQUFlLHdDQUF3Qyx3QkFBd0IsK0VBQStFLDhCQUE4Qiw0TkFBNE4sOENBQThDLElBQUksc0JBQXNCLGlCQUFpQixtQkFBbUIsbUJBQW1CLGVBQWUsNEdBQTRHLDBDQUEwQyxhQUFhLHFDQUFxQyxZQUFZLE1BQU0sZ0NBQWdDLGFBQWEsa0dBQWtHLEVBQUUsYUFBYSx5Q0FBeUMsYUFBYSw4QkFBOEIsb0RBQW9ELFFBQVEsS0FBSyxPQUFPLG1CQUFtQixXQUFXLEtBQUssZ0JBQWdCLFdBQVcsU0FBUywrQkFBK0IsaUJBQWlCLGtHQUFrRyxpREFBaUQsa0JBQWtCLEVBQUUsUUFBUSxRQUFRLEVBQUUsSUFBSSxFQUFFLCtDQUErQyxrREFBa0QsNkJBQTZCLCtCQUErQix5REFBeUQsNkNBQTZDLG9EQUFvRCxpQkFBaUIsOEJBQThCLDJCQUEyQixlQUFlLDZCQUE2QixtQkFBbUIsMkJBQTJCLDJDQUEyQyxFQUFFLGNBQWMsaUNBQWlDLGdSQUFnUixjQUFjLG1RQUFtUSxvQ0FBb0MsZ0VBQWdFLG9EQUFvRCxzQ0FBc0MsVUFBVSxjQUFjLDZEQUE2RCxjQUFjLGdCQUFnQix1RkFBdUYsa0JBQWtCLDZKQUE2SixlQUFlLFlBQVksMkJBQTJCLGVBQWUsMkJBQTJCLDZDQUE2QyxnQkFBZ0IsVUFBVSxzRUFBc0UsS0FBSyxnQ0FBZ0MscUJBQXFCLE1BQU0sZ0NBQWdDLGVBQWUsb0VBQW9FLGtDQUFrQyxvaEJBQW9oQix3TUFBd00sK0hBQStILGVBQWUsZ0JBQWdCLHlOQUF5TixtREFBbUQsb0NBQW9DLEtBQUssTUFBTSxZQUFZLEtBQUssZUFBZSw2RkFBNkYsOEJBQThCLFFBQVEsR0FBRyx5QkFBeUIsNEZBQTRGLDZGQUE2RixFQUFFLGtCQUFrQixzQkFBc0IsdUNBQXVDLEdBQUcsbUJBQW1CLHlCQUF5QixzQkFBc0IsZ0JBQWdCLEVBQUUsaUJBQWlCLGVBQWUsb0ZBQW9GLFdBQVcsb0JBQW9CLGtCQUFrQixrQkFBa0IsZ0JBQWdCLHdFQUF3RSxhQUFhLDZCQUE2Qiw4SEFBOEgsRUFBRSw0QkFBNEIsbUhBQW1ILEVBQUUsaUNBQWlDLG1CQUFtQix3RUFBd0UsRUFBRSxvQ0FBb0MsZ0VBQWdFLEVBQUUsaUNBQWlDLHFCQUFxQixLQUFLLE9BQU8sb0JBQW9CLHNEQUFzRCxLQUFLLHlFQUF5RSxtQkFBbUIsaURBQWlELE1BQU0sUUFBUSxLQUFLLDhGQUE4RixlQUFlLFFBQVEsMERBQTBELHNDQUFzQyxpaUJBQWlpQixlQUFlLGdCQUFnQixxREFBcUQsdURBQXVELGlHQUFpRyx1QkFBdUIsc0RBQXNELHlKQUF5Six1SUFBdUksbUJBQW1CLDJCQUEyQixlQUFlLFlBQVksNEVBQTRFLGlCQUFpQiw0SkFBNEosaUJBQWlCLDhDQUE4QyxpQkFBaUIsK0JBQStCLGlCQUFpQixjQUFjLFFBQVEsRUFBRSxxQkFBcUIseUdBQXlHLGlDQUFpQyxtRUFBbUUsaUJBQWlCLG9LQUFvSyxpQ0FBaUMsNEJBQTRCLG1CQUFtQixjQUFjLDhFQUE4RSxZQUFZLG1CQUFtQiw4REFBOEQscUJBQXFCLDBGQUEwRixvQkFBb0IsTUFBTSxtWUFBbVksY0FBYyxFQUFFLG9CQUFvQixnTkFBZ04sZ0JBQWdCLHFCQUFxQixnQkFBZ0IsOEJBQThCLGdCQUFnQixnRkFBZ0Ysa0JBQWtCLGNBQWMsOEJBQThCLFVBQVUsOEVBQThFLHFCQUFxQix3SkFBd0osa0JBQWtCLG1CQUFtQix1Q0FBdUMseUZBQXlGLG9CQUFvQix3RkFBd0YsRUFBRSxLQUFLLHVCQUF1QixrQkFBa0IsdUNBQXVDLDBGQUEwRixxQkFBcUIsc0JBQXNCLG9CQUFvQixzSEFBc0gsc0JBQXNCLFlBQVksWUFBWSx1QkFBdUIsb0JBQW9CLHNCQUFzQixzRkFBc0YsK0ZBQStGLHFDQUFxQyw4RUFBOEUsRUFBRSxrQ0FBa0Msd0JBQXdCLGtCQUFrQixTQUFTLHdFQUF3RSxRQUFRLHdDQUF3QyxxQ0FBcUMsV0FBVyx3Q0FBd0MsSUFBSSxrQkFBa0Isb0JBQW9CLG1CQUFtQixrQkFBa0IsZ0JBQWdCLDRCQUE0Qix5QkFBeUIsd0JBQXdCLHVEQUF1RCxNQUFNLHFFQUFxRSxrREFBa0QsbUJBQW1CLHlFQUF5RSwyR0FBMkcsb0JBQW9CLHVHQUF1Ryw4Q0FBOEMsbUJBQW1CLHFEQUFxRCxXQUFXLHVIQUF1SCw0QkFBNEIsNEpBQTRKLG9CQUFvQix3RkFBd0Ysb0RBQW9ELHlCQUF5QixnQkFBZ0Isa0NBQWtDLFdBQVcsaUJBQWlCLElBQUksTUFBTSx1RUFBdUUsZUFBZSxnQkFBZ0IseUZBQXlGLG9CQUFvQixtREFBbUQsb0JBQW9CLDJCQUEyQiw0QkFBNEIsaUZBQWlGLHNCQUFzQiwrQkFBK0Isa0NBQWtDLCtEQUErRCxnQkFBZ0IsbUNBQW1DLDhCQUE4QixvRkFBb0Ysb0JBQW9CLGdDQUFnQyw0QkFBNEIseUVBQXlFLHVCQUF1QixVQUFVLDRDQUE0Qyw0QkFBNEIsMkRBQTJELCtCQUErQixJQUFJLGtCQUFrQixnTEFBZ0wsZUFBZSx1R0FBdUcsNEJBQTRCLGdDQUFnQyxtQkFBbUIsc0RBQXNELDZEQUE2RCxtQ0FBbUMsNkVBQTZFLDZDQUE2QywyQkFBMkIsNkNBQTZDLHdCQUF3Qiw4QkFBOEIseUJBQXlCLDhCQUE4QixtQ0FBbUMsNEJBQTRCLHlCQUF5Qix1Q0FBdUMsa01BQWtNLHNCQUFzQiwySEFBMkgsbUNBQW1DLDRCQUE0Qiw2Q0FBNkMsc0JBQXNCLGdHQUFnRyw2QkFBNkIsMkNBQTJDLG1CQUFtQixnRkFBZ0Ysa0JBQWtCLFVBQVUsaUNBQWlDLGlDQUFpQyxPQUFPLG9EQUFvRCxhQUFhLHdEQUF3RCxlQUFlLFNBQVMsSUFBSSw4R0FBOEcsa0JBQWtCLE9BQU8sNElBQTRJLDhCQUE4QixPQUFPLDZEQUE2RCwrQkFBK0Isb0JBQW9CLGNBQWMsVUFBVSxHQUFHLCtCQUErQixtQ0FBbUMsZ0JBQWdCLGtDQUFrQyxnQkFBZ0IsaUNBQWlDLG1CQUFtQixVQUFVLGFBQWEsb0RBQW9ELG9DQUFvQyxLQUFLLG9DQUFvQyxRQUFRLE1BQU0sV0FBVyxRQUFRLHNCQUFzQix3QkFBd0IsRUFBRSxFQUFFLFdBQVcsb0JBQW9CLHFDQUFxQyxxTEFBcUwsU0FBUyxtQ0FBbUMscU1BQXFNLEVBQUUsVUFBVSxNQUFNLG9FQUFvRSxRQUFRLFVBQVUsMkNBQTJDLEVBQUUscUJBQXFCLHVEQUF1RCwyVkFBMlYsZ0JBQWdCLGFBQWEseUNBQXlDLG1QQUFtUCw4Q0FBOEMsSUFBSSxzQkFBc0Isc0RBQXNELDhCQUE4QixRQUFRLG1EQUFtRCxFQUFFLDhCQUE4Qix3QkFBd0IsYUFBYSw2QkFBNkIscUNBQXFDLEVBQUUsZ0NBQWdDLHdDQUF3QyxLQUFLLEdBQUcsaU9BQWlPLHlDQUF5QyxzQ0FBc0MsaUlBQWlJLDJCQUEyQixFQUFFLE9BQU8sNkhBQTZILGlCQUFpQix3Q0FBd0MseUNBQXlDLFVBQVUscUJBQXFCLG9DQUFvQyxTQUFTLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxlQUFlOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNBdDl5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QztBQUN6QztBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQixXQUFXLFNBQVM7QUFDcEIsV0FBVyw0QkFBNEI7QUFDdkMsYUFBYTtBQUNiOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEIsYUFBYSxvQkFBb0I7QUFDakM7O0FBRUE7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQixhQUFhLFNBQVM7QUFDdEI7O0FBRUE7QUFDQSxhQUFhLFFBQVE7QUFDckIsY0FBYyxTQUFTO0FBQ3ZCLGNBQWMsV0FBVztBQUN6Qjs7QUFFQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixjQUFjLHVCQUF1QixpREFBaUQ7QUFDdEY7QUFDQTtBQUNBLGNBQWMsNEJBQTRCO0FBQzFDLGNBQWMsU0FBUztBQUN2QixjQUFjLGtCQUFrQjtBQUNoQzs7QUFFQTtBQUNBLFdBQVcsV0FBVztBQUN0QixXQUFXLFNBQVM7QUFDcEIsV0FBVyxrQkFBa0I7QUFDN0IsYUFBYTtBQUNiOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFFBQVE7OztBQUdSO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGtFQUFrRTtBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQ7QUFDekQsd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBLGtCQUFrQixrQkFBa0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJLG9FQUFvRTtBQUN4RSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxNQUFNO0FBQ04sdUZBQXVGO0FBQ3ZGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QiwwREFBMEQ7QUFDMUQ7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7OztBQUdKO0FBQ0EsR0FBRztBQUNIO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQSx5Q0FBeUM7O0FBRXpDO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnQ0FBZ0M7QUFDeEQsbURBQW1EOztBQUVuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTs7O0FBR1Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjs7O0FBR0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxpQ0FBaUM7QUFDNUM7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRXdEO0FBQ3hEOzs7Ozs7Ozs7Ozs7QUM1ZUE7QUFDQSxDQUFDOztBQUVEO0FBQ0EsbUJBQW1CLEtBQTBCO0FBQzdDO0FBQ0Esa0JBQWtCLEtBQXlCO0FBQzNDO0FBQ0EseUJBQXlCLHFCQUFNLGdCQUFnQixxQkFBTTtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFFBQVE7QUFDcEIsY0FBYyxPQUFPO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVksT0FBTztBQUNuQixZQUFZLFVBQVU7QUFDdEI7QUFDQSxjQUFjLE9BQU87QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxRQUFRO0FBQ3BCLFlBQVksVUFBVTtBQUN0QjtBQUNBLGNBQWMsT0FBTztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxRQUFRO0FBQ3BCLGNBQWMsT0FBTztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQSxNQUFNO0FBQ04sNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksT0FBTztBQUNuQixjQUFjLFFBQVE7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksUUFBUTtBQUNwQixjQUFjLFFBQVE7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxRQUFRO0FBQ3BCLGNBQWMsUUFBUTtBQUN0QjtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxtQ0FBbUM7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFD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QUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLGtCQUFrQixpQkFBaUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxxREFBcUQ7QUFDckQsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSLDRFQUE0RTtBQUM1RTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw0QkFBNEIscUJBQXFCO0FBQ2pEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTs7QUFFTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtB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LFdBQUpBLElBQUlBLENBQUEsRUFBRztNQUNIaGQsQ0FBQyxDQUFDLFlBQU07UUFDSjtRQUNBLElBQUlvd0UsVUFBVSxFQUFFO1VBQ1oxMUMscURBQU0sQ0FBQzFkLElBQUksQ0FBQ3ZWLE9BQU8sQ0FBQztRQUN4QjtRQUVBLElBQU00b0UsY0FBYyxHQUFHLEVBQUU7O1FBRXpCO1FBQ0EsSUFBTUMsaUJBQWlCLEdBQUd4QyxXQUFXLENBQUNvQyxRQUFRLENBQUM7UUFDL0MsSUFBSSxPQUFPSSxpQkFBaUIsS0FBSyxVQUFVLEVBQUU7VUFDekNELGNBQWMsQ0FBQ2hwRCxJQUFJLENBQUNpcEQsaUJBQWlCLENBQUMsQ0FBQyxDQUFDO1FBQzVDOztRQUVBO1FBQ0EsSUFBTUMsc0JBQXNCLEdBQUdQLGFBQWEsQ0FBQ3ZvRSxPQUFPLENBQUM4bEIsUUFBUSxDQUFDO1FBQzlELElBQUksT0FBT2dqRCxzQkFBc0IsS0FBSyxVQUFVLEVBQUU7VUFDOUNGLGNBQWMsQ0FBQ2hwRCxJQUFJLENBQUNrcEQsc0JBQXNCLENBQUMsQ0FBQyxDQUFDO1FBQ2pEOztRQUVBO1FBQ0F0ekMsT0FBTyxDQUFDdXpDLEdBQUcsQ0FBQ0gsY0FBYyxDQUFDLENBQUNwdEUsSUFBSSxDQUFDLFVBQUF3dEUsT0FBTyxFQUFJO1VBQ3hDQSxPQUFPLENBQUM3NUMsT0FBTyxDQUFDLFVBQUE4NUMsUUFBUSxFQUFJO1lBQ3hCQSxRQUFRLFdBQVEsQ0FBQzF6RCxJQUFJLENBQUN2VixPQUFPLENBQUM7VUFDbEMsQ0FBQyxDQUFDO1FBQ04sQ0FBQyxDQUFDO01BQ04sQ0FBQyxDQUFDO0lBQ047RUFDSixDQUFDO0FBQ0wsQ0FBQztBQUdEckgsT0FBTyxDQUFDQyxHQUFHLENBQUMsNENBQTRDLENBQUMsQyIsInNvdXJjZXMiOlsid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvQGZhbmN5YXBwcy91aS9zcmMvQ2Fyb3VzZWwvQ2Fyb3VzZWwuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9AZmFuY3lhcHBzL3VpL3NyYy9DYXJvdXNlbC9sMTBuL2VuLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvQGZhbmN5YXBwcy91aS9zcmMvQ2Fyb3VzZWwvcGx1Z2lucy9Eb3RzL0RvdHMuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9AZmFuY3lhcHBzL3VpL3NyYy9DYXJvdXNlbC9wbHVnaW5zL05hdmlnYXRpb24vTmF2aWdhdGlvbi5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL0BmYW5jeWFwcHMvdWkvc3JjL0Nhcm91c2VsL3BsdWdpbnMvU3luYy9TeW5jLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvQGZhbmN5YXBwcy91aS9zcmMvQ2Fyb3VzZWwvcGx1Z2lucy9pbmRleC5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL0BmYW5jeWFwcHMvdWkvc3JjL0ZhbmN5Ym94L0ZhbmN5Ym94LmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvQGZhbmN5YXBwcy91aS9zcmMvRmFuY3lib3gvbDEwbi9lbi5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL0BmYW5jeWFwcHMvdWkvc3JjL0ZhbmN5Ym94L3BsdWdpbnMvSGFzaC9IYXNoLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvQGZhbmN5YXBwcy91aS9zcmMvRmFuY3lib3gvcGx1Z2lucy9IdG1sL0h0bWwuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9AZmFuY3lhcHBzL3VpL3NyYy9GYW5jeWJveC9wbHVnaW5zL0ltYWdlL0ltYWdlLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvQGZhbmN5YXBwcy91aS9zcmMvRmFuY3lib3gvcGx1Z2lucy9TY3JvbGxMb2NrL1Njcm9sbExvY2suanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9AZmFuY3lhcHBzL3VpL3NyYy9GYW5jeWJveC9wbHVnaW5zL1RodW1icy9UaHVtYnMuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9AZmFuY3lhcHBzL3VpL3NyYy9GYW5jeWJveC9wbHVnaW5zL1Rvb2xiYXIvVG9vbGJhci5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL0BmYW5jeWFwcHMvdWkvc3JjL0ZhbmN5Ym94L3BsdWdpbnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9AZmFuY3lhcHBzL3VpL3NyYy9QYW56b29tL1Bhbnpvb20uanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9AZmFuY3lhcHBzL3VpL3NyYy9QYW56b29tL3BsdWdpbnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9AZmFuY3lhcHBzL3VpL3NyYy9zaGFyZWQvQmFzZS9CYXNlLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvQGZhbmN5YXBwcy91aS9zcmMvc2hhcmVkL3V0aWxzL0Z1bGxzY3JlZW4uanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9AZmFuY3lhcHBzL3VpL3NyYy9zaGFyZWQvdXRpbHMvUG9pbnRlclRyYWNrZXIuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9AZmFuY3lhcHBzL3VpL3NyYy9zaGFyZWQvdXRpbHMvUmVzaXplT2JzZXJ2ZXIuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9AZmFuY3lhcHBzL3VpL3NyYy9zaGFyZWQvdXRpbHMvU2xpZGVzaG93LmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvQGZhbmN5YXBwcy91aS9zcmMvc2hhcmVkL3V0aWxzL2NhblVzZURPTS5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL0BmYW5jeWFwcHMvdWkvc3JjL3NoYXJlZC91dGlscy9leHRlbmQuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9AZmFuY3lhcHBzL3VpL3NyYy9zaGFyZWQvdXRpbHMvZ2V0RGltZW5zaW9ucy5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL0BmYW5jeWFwcHMvdWkvc3JjL3NoYXJlZC91dGlscy9nZXRUZXh0Tm9kZUZyb21Qb2ludC5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL0BmYW5jeWFwcHMvdWkvc3JjL3NoYXJlZC91dGlscy9pc1BsYWluT2JqZWN0LmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvQGZhbmN5YXBwcy91aS9zcmMvc2hhcmVkL3V0aWxzL2lzU2Nyb2xsYWJsZS5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL0BmYW5jeWFwcHMvdWkvc3JjL3NoYXJlZC91dGlscy9yZXNvbHZlLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvQGZhbmN5YXBwcy91aS9zcmMvc2hhcmVkL3V0aWxzL3JvdW5kLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvQGZhbmN5YXBwcy91aS9zcmMvc2hhcmVkL3V0aWxzL3NldEZvY3VzT24uanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9AZmFuY3lhcHBzL3VpL3NyYy9zaGFyZWQvdXRpbHMvdGhyb3R0bGUuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL2Fzc2V0cy9qcy9jdXN0b20uanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL2Fzc2V0cy9qcy90aGVtZS9jYXJ0L3NoaXBwaW5nLWVzdGltYXRvci5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vYXNzZXRzL2pzL3RoZW1lL2NvbW1vbi9hcmlhL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vYXNzZXRzL2pzL3RoZW1lL2NvbW1vbi9hcmlhL2luZGV4LmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9hc3NldHMvanMvdGhlbWUvY29tbW9uL2FyaWEvcmFkaW9PcHRpb25zLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9hc3NldHMvanMvdGhlbWUvY29tbW9uL2Nhcm91c2VsL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vYXNzZXRzL2pzL3RoZW1lL2NvbW1vbi9jYXJvdXNlbC9pbmRleC5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vYXNzZXRzL2pzL3RoZW1lL2NvbW1vbi9jYXJvdXNlbC91dGlscy9hY3RpdmF0ZVBsYXlQYXVzZUJ1dHRvbi5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vYXNzZXRzL2pzL3RoZW1lL2NvbW1vbi9jYXJvdXNlbC91dGlscy9hbmFsaXplU2xpZGVzLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9hc3NldHMvanMvdGhlbWUvY29tbW9uL2Nhcm91c2VsL3V0aWxzL2Fycm93QXJpYUxhYmxpbmcuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL2Fzc2V0cy9qcy90aGVtZS9jb21tb24vY2Fyb3VzZWwvdXRpbHMvZG90c1NldHVwLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9hc3NldHMvanMvdGhlbWUvY29tbW9uL2Nhcm91c2VsL3V0aWxzL2dldEFjdGl2ZVNsaWRlSWR4QW5kU2xpZGVzUXVhbnRpdHkuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL2Fzc2V0cy9qcy90aGVtZS9jb21tb24vY2Fyb3VzZWwvdXRpbHMvZ2V0QWN0aXZlU2xpZGVJbmZvLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9hc3NldHMvanMvdGhlbWUvY29tbW9uL2Nhcm91c2VsL3V0aWxzL2hhbmRsZUltYWdlQXNwZWN0UmF0aW8uanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL2Fzc2V0cy9qcy90aGVtZS9jb21tb24vY2Fyb3VzZWwvdXRpbHMvaGFuZGxlSW1hZ2VMb2FkLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9hc3NldHMvanMvdGhlbWUvY29tbW9uL2Nhcm91c2VsL3V0aWxzL2luZGV4LmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9hc3NldHMvanMvdGhlbWUvY29tbW9uL2Nhcm91c2VsL3V0aWxzL3JlZnJlc2hGb2N1cy5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vYXNzZXRzL2pzL3RoZW1lL2NvbW1vbi9jYXJvdXNlbC91dGlscy90b29sdGlwU2V0dXAuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL2Fzc2V0cy9qcy90aGVtZS9jb21tb24vY2Fyb3VzZWwvdXRpbHMvdXBkYXRlVGV4dFdpdGhMaXZlRGF0YS5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vYXNzZXRzL2pzL3RoZW1lL2NvbW1vbi9jb2xsYXBzaWJsZS1ncm91cC5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vYXNzZXRzL2pzL3RoZW1lL2NvbW1vbi9jb2xsYXBzaWJsZS5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vYXNzZXRzL2pzL3RoZW1lL2NvbW1vbi9naWZ0LWNlcnRpZmljYXRlLXZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vYXNzZXRzL2pzL3RoZW1lL2NvbW1vbi9tZWRpYS1xdWVyeS1saXN0LmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9hc3NldHMvanMvdGhlbWUvY29tbW9uL21vZGVscy9mb3Jtcy5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vYXNzZXRzL2pzL3RoZW1lL2NvbW1vbi9ub2QtZnVuY3Rpb25zL21pbi1tYXgtdmFsaWRhdGUuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL2Fzc2V0cy9qcy90aGVtZS9jb21tb24vbm9kLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9hc3NldHMvanMvdGhlbWUvY29tbW9uL3Byb2R1Y3QtZGV0YWlscy1iYXNlLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9hc3NldHMvanMvdGhlbWUvY29tbW9uL3Byb2R1Y3QtZGV0YWlscy5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vYXNzZXRzL2pzL3RoZW1lL2NvbW1vbi9zZWxlY3Qtb3B0aW9uLXBsdWdpbi5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vYXNzZXRzL2pzL3RoZW1lL2NvbW1vbi9zdGF0ZS1jb3VudHJ5LmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9hc3NldHMvanMvdGhlbWUvY29tbW9uL3V0aWxzL2FwaS5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vYXNzZXRzL2pzL3RoZW1lL2NvbW1vbi91dGlscy9iYW5uZXItdXRpbHMuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL2Fzc2V0cy9qcy90aGVtZS9jb21tb24vdXRpbHMvZm9ybS11dGlscy5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vYXNzZXRzL2pzL3RoZW1lL2NvbW1vbi91dGlscy9pZS1oZWxwZXJzLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9hc3NldHMvanMvdGhlbWUvY29tbW9uL3V0aWxzL3BhZ2luYXRpb24tdXRpbHMuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL2Fzc2V0cy9qcy90aGVtZS9jb21tb24vdXRpbHMvdHJhbnNsYXRpb25zLXV0aWxzLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9hc3NldHMvanMvdGhlbWUvY29tbW9uL3V0aWxzL3VybC11dGlscy5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vYXNzZXRzL2pzL3RoZW1lL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vYXNzZXRzL2pzL3RoZW1lL2dsb2JhbC9hZG1pbkJhci5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vYXNzZXRzL2pzL3RoZW1lL2dsb2JhbC9jYXJ0LXByZXZpZXcuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL2Fzc2V0cy9qcy90aGVtZS9nbG9iYWwvY29va2llTm90aWZpY2F0aW9uLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9hc3NldHMvanMvdGhlbWUvZ2xvYmFsL2N1cnJlbmN5LXNlbGVjdG9yLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9hc3NldHMvanMvdGhlbWUvZ2xvYmFsL2ZvdW5kYXRpb24uanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL2Fzc2V0cy9qcy90aGVtZS9nbG9iYWwvanF1ZXJ5LW1pZ3JhdGUuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL2Fzc2V0cy9qcy90aGVtZS9nbG9iYWwvanF1ZXJ5LW1pZ3JhdGUvZGF0YS5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vYXNzZXRzL2pzL3RoZW1lL2dsb2JhbC9qcXVlcnktbWlncmF0ZS9ldmVudC5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vYXNzZXRzL2pzL3RoZW1lL2dsb2JhbC9qcXVlcnktbWlncmF0ZS9pbml0LmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9hc3NldHMvanMvdGhlbWUvZ2xvYmFsL2pxdWVyeS1taWdyYXRlL3RyYXZlcnNpbmcuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL2Fzc2V0cy9qcy90aGVtZS9nbG9iYWwvbG9hZGluZy1wcm9ncmVzcy1iYXIuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL2Fzc2V0cy9qcy90aGVtZS9nbG9iYWwvbWVudS5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vYXNzZXRzL2pzL3RoZW1lL2dsb2JhbC9tb2JpbGUtbWVudS10b2dnbGUuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL2Fzc2V0cy9qcy90aGVtZS9nbG9iYWwvbW9kYWwuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL2Fzc2V0cy9qcy90aGVtZS9nbG9iYWwvcXVpY2stc2VhcmNoLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9hc3NldHMvanMvdGhlbWUvZ2xvYmFsL3F1aWNrLXZpZXcuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL2Fzc2V0cy9qcy90aGVtZS9nbG9iYWwvcmV2ZWFsLWNsb3NlLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9hc3NldHMvanMvdGhlbWUvZ2xvYmFsL3N2Zy1pbmplY3Rvci5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vYXNzZXRzL2pzL3RoZW1lL2dsb2JhbC9zd2VldC1hbGVydC5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vYXNzZXRzL2pzL3RoZW1lL2hhbG90aGVtZXMvaGFsb0FaYnJhbmRzLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9hc3NldHMvanMvdGhlbWUvaGFsb3RoZW1lcy9oYWxvQWRkT3B0aW9uRm9yUHJvZHVjdC5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vYXNzZXRzL2pzL3RoZW1lL2hhbG90aGVtZXMvaGFsb0FqYXhBZGRUb0NhcnQuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL2Fzc2V0cy9qcy90aGVtZS9oYWxvdGhlbWVzL2hhbG9BamF4TG9naW5Qb3B1cC5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vYXNzZXRzL2pzL3RoZW1lL2hhbG90aGVtZXMvaGFsb0Fza0FuRXhwZXJ0UG9wdXAuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL2Fzc2V0cy9qcy90aGVtZS9oYWxvdGhlbWVzL2hhbG9CZWZvcmVZb3VMZWF2ZS5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vYXNzZXRzL2pzL3RoZW1lL2hhbG90aGVtZXMvaGFsb0NhbGN1bGF0ZUZyZWVTaGlwcGluZy5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vYXNzZXRzL2pzL3RoZW1lL2hhbG90aGVtZXMvaGFsb0dsb2JhbC5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vYXNzZXRzL2pzL3RoZW1lL2hhbG90aGVtZXMvaGFsb0hvbWVQcm9kdWN0TG9va2Jvb2suanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL2Fzc2V0cy9qcy90aGVtZS9oYWxvdGhlbWVzL2hhbG9NZWdhTWVudS5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vYXNzZXRzL2pzL3RoZW1lL2hhbG90aGVtZXMvaGFsb01lZ2FNZW51RWRpdG9yLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9hc3NldHMvanMvdGhlbWUvaGFsb3RoZW1lcy9oYWxvTWVnYU1lbnVFZGl0b3JDdXN0b20uanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL2Fzc2V0cy9qcy90aGVtZS9oYWxvdGhlbWVzL2hhbG9OZXdzbGV0dGVyUG9wdXAuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL2Fzc2V0cy9qcy90aGVtZS9oYWxvdGhlbWVzL2hhbG9Ob3RpZnlNZS5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vYXNzZXRzL2pzL3RoZW1lL2hhbG90aGVtZXMvaGFsb1F1aWNrRWRpdENhcnQuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL2Fzc2V0cy9qcy90aGVtZS9oYWxvdGhlbWVzL2hhbG9SZWNlbnRseUJvdWdodFBvcHVwLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9hc3NldHMvanMvdGhlbWUvaGFsb3RoZW1lcy9oYWxvUmVjZW50bHlWaWV3ZWRQcm9kdWN0LmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9hc3NldHMvanMvdGhlbWUvaGFsb3RoZW1lcy9oYWxvWW91dHViZVZpZGVvLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9hc3NldHMvanMvdGhlbWUvcGFnZS1tYW5hZ2VyLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9hc3NldHMvanMvdGhlbWUvcHJvZHVjdC9pbWFnZS1nYWxsZXJ5LmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9hc3NldHMvanMvdGhlbWUvd2lzaGxpc3QuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9AYmlnY29tbWVyY2Uvc3RlbmNpbC11dGlscy9zcmMvYXBpL2Jhc2UuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9AYmlnY29tbWVyY2Uvc3RlbmNpbC11dGlscy9zcmMvYXBpL2NhcnQuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9AYmlnY29tbWVyY2Uvc3RlbmNpbC11dGlscy9zcmMvYXBpL2NvdW50cmllcy5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL0BiaWdjb21tZXJjZS9zdGVuY2lsLXV0aWxzL3NyYy9hcGkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9AYmlnY29tbWVyY2Uvc3RlbmNpbC11dGlscy9zcmMvYXBpL3Byb2R1Y3QtYXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL0BiaWdjb21tZXJjZS9zdGVuY2lsLXV0aWxzL3NyYy9hcGkvcHJvZHVjdC5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL0BiaWdjb21tZXJjZS9zdGVuY2lsLXV0aWxzL3NyYy9hcGkvc2VhcmNoLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvQGJpZ2NvbW1lcmNlL3N0ZW5jaWwtdXRpbHMvc3JjL2FwaS93aXNobGlzdC5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL0BiaWdjb21tZXJjZS9zdGVuY2lsLXV0aWxzL3NyYy9ib2RsL2VtaXR0ZXJzL2Jhc2UuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9AYmlnY29tbWVyY2Uvc3RlbmNpbC11dGlscy9zcmMvYm9kbC9lbWl0dGVycy9jYXJ0LmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvQGJpZ2NvbW1lcmNlL3N0ZW5jaWwtdXRpbHMvc3JjL2JvZGwvaGVscGVycy5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL0BiaWdjb21tZXJjZS9zdGVuY2lsLXV0aWxzL3NyYy9ob29rcy9iYXNlLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvQGJpZ2NvbW1lcmNlL3N0ZW5jaWwtdXRpbHMvc3JjL2hvb2tzL2NhcnQuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9AYmlnY29tbWVyY2Uvc3RlbmNpbC11dGlscy9zcmMvaG9va3MvY29va2llLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvQGJpZ2NvbW1lcmNlL3N0ZW5jaWwtdXRpbHMvc3JjL2hvb2tzL2N1cnJlbmN5LXNlbGVjdG9yLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvQGJpZ2NvbW1lcmNlL3N0ZW5jaWwtdXRpbHMvc3JjL2hvb2tzL2ZhY2V0ZWQtc2VhcmNoLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvQGJpZ2NvbW1lcmNlL3N0ZW5jaWwtdXRpbHMvc3JjL2hvb2tzL2luZGV4LmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvQGJpZ2NvbW1lcmNlL3N0ZW5jaWwtdXRpbHMvc3JjL2hvb2tzL3Byb2R1Y3QuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9AYmlnY29tbWVyY2Uvc3RlbmNpbC11dGlscy9zcmMvaG9va3Mvc2VhcmNoLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvQGJpZ2NvbW1lcmNlL3N0ZW5jaWwtdXRpbHMvc3JjL2hvb2tzL3NvcnQtYnkuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9AYmlnY29tbWVyY2Uvc3RlbmNpbC11dGlscy9zcmMvbGliL2Nsb3Nlc3QuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9AYmlnY29tbWVyY2Uvc3RlbmNpbC11dGlscy9zcmMvbGliL3F1ZXJ5LXN0cmluZy5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL0BiaWdjb21tZXJjZS9zdGVuY2lsLXV0aWxzL3NyYy9saWIvcmVxdWVzdC5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL0BiaWdjb21tZXJjZS9zdGVuY2lsLXV0aWxzL3NyYy9tYWluLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvQGJpZ2NvbW1lcmNlL3N0ZW5jaWwtdXRpbHMvc3JjL3Rvb2xzL2ltYWdlLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvQGJpZ2NvbW1lcmNlL3N0ZW5jaWwtdXRpbHMvc3JjL3Rvb2xzL2ltYWdlU3Jjc2V0LmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvQGJpZ2NvbW1lcmNlL3N0ZW5jaWwtdXRpbHMvc3JjL3Rvb2xzL2luZGV4LmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvQGJpZ2NvbW1lcmNlL3N0ZW5jaWwtdXRpbHMvc3JjL3Rvb2xzL3N0b3JhZ2UuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9jYWxsLWJpbmQvY2FsbEJvdW5kLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvY2FsbC1iaW5kL2luZGV4LmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvZGVmaW5lLWRhdGEtcHJvcGVydHkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9lcy1kZWZpbmUtcHJvcGVydHkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9lcy1lcnJvcnMvZXZhbC5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL2VzLWVycm9ycy9pbmRleC5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL2VzLWVycm9ycy9yYW5nZS5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL2VzLWVycm9ycy9yZWYuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9lcy1lcnJvcnMvc3ludGF4LmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvZXMtZXJyb3JzL3R5cGUuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9lcy1lcnJvcnMvdXJpLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvZXZlbnRlbWl0dGVyMy9pbmRleC5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL2ZvY3VzLXRyYXAvZGlzdC9mb2N1cy10cmFwLmVzbS5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL2ZvY3VzLXdpdGhpbi1wb2x5ZmlsbC9kaXN0L2ZvY3VzLXdpdGhpbi1wb2x5ZmlsbC5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL2ZvdW5kYXRpb24tc2l0ZXMvanMvZm91bmRhdGlvbi9mb3VuZGF0aW9uLmRyb3Bkb3duLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvZm91bmRhdGlvbi1zaXRlcy9qcy9mb3VuZGF0aW9uL2ZvdW5kYXRpb24uanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9mb3VuZGF0aW9uLXNpdGVzL2pzL2ZvdW5kYXRpb24vZm91bmRhdGlvbi5yZXZlYWwuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9mb3VuZGF0aW9uLXNpdGVzL2pzL2ZvdW5kYXRpb24vZm91bmRhdGlvbi50YWIuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9mdW5jdGlvbi1iaW5kL2ltcGxlbWVudGF0aW9uLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvZnVuY3Rpb24tYmluZC9pbmRleC5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL2dldC1pbnRyaW5zaWMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9nb3BkL2luZGV4LmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvaGFzLXByb3BlcnR5LWRlc2NyaXB0b3JzL2luZGV4LmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvaGFzLXByb3RvL2luZGV4LmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvaGFzLXN5bWJvbHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9oYXMtc3ltYm9scy9zaGFtcy5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL2hhc293bi9pbmRleC5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL2pxdWVyeS16b29tL2pxdWVyeS56b29tLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvanF1ZXJ5LmNvb2tpZS9qcXVlcnkuY29va2llLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvanF1ZXJ5L2Rpc3QvanF1ZXJ5Lm1pbi5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fU3RhY2suanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1N5bWJvbC5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXBwbHkuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5RWFjaC5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlNYXAuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5UmVkdWNlLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hc2NpaVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FzY2lpV29yZHMuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Fzc2lnblZhbHVlLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hc3NvY0luZGV4T2YuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VBc3NpZ24uanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VBc3NpZ25Jbi5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUFzc2lnblZhbHVlLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlQ2xvbmUuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VDcmVhdGUuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VGb3IuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VGb3JPd24uanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VHZXRUYWcuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJbmRleE9mLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXRlcmF0ZWUuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VLZXlzLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlUmVzdC5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVNsaWNlLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlVG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VUcmltLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jYXN0U2xpY2UuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Nsb25lQnVmZmVyLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jb3B5QXJyYXkuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NvcHlPYmplY3QuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NvcHlTeW1ib2xzLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jb3B5U3ltYm9sc0luLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jcmVhdGVBc3NpZ25lci5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY3JlYXRlQmFzZUZvci5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY3JlYXRlQ2FzZUZpcnN0LmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jcmVhdGVDb21wb3VuZGVyLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19kZWZpbmVQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZnJlZUdsb2JhbC5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0QWxsS2V5cy5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0QWxsS2V5c0luLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXROYXRpdmUuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFByb3RvdHlwZS5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0U3ltYm9scy5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0U3ltYm9sc0luLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRUYWcuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc1VuaWNvZGUuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc1VuaWNvZGVXb3JkLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pbml0Q2xvbmVBcnJheS5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faW5pdENsb25lQnlUYWcuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2luaXRDbG9uZU9iamVjdC5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNJdGVyYXRlZUNhbGwuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzUHJvdG90eXBlLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVDbGVhci5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlRGVsZXRlLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVHZXQuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZUhhcy5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlU2V0LmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19vdmVyQXJnLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19vdmVyUmVzdC5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fcm9vdC5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc2V0VG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0cmluZ1RvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3RyaW1tZWRFbmRJbmRleC5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fdW5pY29kZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3VuaWNvZGVXb3Jkcy5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9hc3NpZ25Jbi5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9jYW1lbENhc2UuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvY2FwaXRhbGl6ZS5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9jbG9uZS5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9kZWJvdW5jZS5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9kZWJ1cnIuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvZWFjaC5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9lcS5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9leHRlbmQuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaWRlbnRpdHkuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNBcmd1bWVudHMuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNBcnJheS5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0FycmF5TGlrZS5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0J1ZmZlci5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0VtcHR5LmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNMZW5ndGguanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNNYXAuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNOYU4uanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNOdW1iZXIuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNPYmplY3QuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNPYmplY3RMaWtlLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzUGxhaW5PYmplY3QuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNTZXQuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNTeW1ib2wuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNUeXBlZEFycmF5LmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2tleXMuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gva2V5c0luLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvbG9kYXNoL25vdy5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC90aHJvdHRsZS5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC90b051bWJlci5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC90b1N0cmluZy5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC90cmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvdW5pcXVlSWQuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvdXBwZXJGaXJzdC5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC93b3Jkcy5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL25hbm9iYXIvbmFub2Jhci5taW4uanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9ub2QtdmFsaWRhdGUvbm9kLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvbm9kZS1mZXRjaC9icm93c2VyLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvb2JqZWN0LWluc3BlY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9xcy9saWIvZm9ybWF0cy5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL3FzL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL3FzL2xpYi9wYXJzZS5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL3FzL2xpYi9zdHJpbmdpZnkuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9xcy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy9zZXQtZnVuY3Rpb24tbGVuZ3RoL2luZGV4LmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvc2lkZS1jaGFubmVsL2luZGV4LmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvc2xpY2stY2Fyb3VzZWwvc2xpY2svc2xpY2subWluLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvc3ZnLWluamVjdG9yL2Rpc3Qvc3ZnLWluamVjdG9yLm1pbi5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL3N3ZWV0YWxlcnQyL2Rpc3Qvc3dlZXRhbGVydDIubWluLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvdGFiYmFibGUvZGlzdC9pbmRleC5lc20uanMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL25vZGVfbW9kdWxlcy91cmwvbm9kZV9tb2R1bGVzL3B1bnljb2RlL3B1bnljb2RlLmpzIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvLi9ub2RlX21vZHVsZXMvdXJsL3VybC5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhLy4vbm9kZV9tb2R1bGVzL3doYXR3Zy1mZXRjaC9mZXRjaC5qcyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhL2lnbm9yZWR8RTpcXGJpZ2NvbW1lcmNlXFxjYW5uYSBsaXZlXFxub2RlX21vZHVsZXNcXG9iamVjdC1pbnNwZWN0fC4vdXRpbC5pbnNwZWN0Iiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS93ZWJwYWNrL3J1bnRpbWUvYW1kIG9wdGlvbnMiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhL3dlYnBhY2svcnVudGltZS9lbnN1cmUgY2h1bmsiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS93ZWJwYWNrL3J1bnRpbWUvZ2V0IGphdmFzY3JpcHQgY2h1bmsgZmlsZW5hbWUiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvd2VicGFjay9ydW50aW1lL2hhcm1vbnkgbW9kdWxlIGRlY29yYXRvciIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS93ZWJwYWNrL3J1bnRpbWUvbG9hZCBzY3JpcHQiLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvd2VicGFjay9ydW50aW1lL25vZGUgbW9kdWxlIGRlY29yYXRvciIsIndlYnBhY2s6Ly9iaWdjb21tZXJjZS1oZXJhL3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL2JpZ2NvbW1lcmNlLWhlcmEvd2VicGFjay9ydW50aW1lL2pzb25wIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UtaGVyYS8uL2Fzc2V0cy9qcy9hcHAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzZSB9IGZyb20gXCIuLi9zaGFyZWQvQmFzZS9CYXNlLmpzXCI7XHJcbmltcG9ydCB7IFBhbnpvb20gfSBmcm9tIFwiLi4vUGFuem9vbS9QYW56b29tLmpzXCI7XHJcblxyXG5pbXBvcnQgeyBleHRlbmQgfSBmcm9tIFwiLi4vc2hhcmVkL3V0aWxzL2V4dGVuZC5qc1wiO1xyXG5pbXBvcnQgeyByb3VuZCB9IGZyb20gXCIuLi9zaGFyZWQvdXRpbHMvcm91bmQuanNcIjtcclxuaW1wb3J0IHsgdGhyb3R0bGUgfSBmcm9tIFwiLi4vc2hhcmVkL3V0aWxzL3Rocm90dGxlLmpzXCI7XHJcblxyXG5pbXBvcnQgeyBQbHVnaW5zIH0gZnJvbSBcIi4vcGx1Z2lucy9pbmRleC5qc1wiO1xyXG5cclxuLy8gRGVmYXVsdCBsYW5ndWFnZVxyXG5pbXBvcnQgZW4gZnJvbSBcIi4vbDEwbi9lbi5qc1wiO1xyXG5cclxuY29uc3QgZGVmYXVsdHMgPSB7XHJcbiAgLy8gVmlydHVhbCBzbGlkZXMuIEVhY2ggb2JqZWN0IHNob3VsZCBoYXZlIGF0IGxlYXN0IGBodG1sYCBwcm9wZXJ0eSB0aGF0IHdpbGwgYmUgdXNlZCB0byBzZXQgY29udGVudCxcclxuICAvLyBleGFtcGxlOiBgc2xpZGVzOiBbe2h0bWw6ICdGaXJzdCBzbGlkZSd9LCB7aHRtbDogJ1NlY29uZCBzbGlkZSd9XWBcclxuICBzbGlkZXM6IFtdLFxyXG5cclxuICAvLyBOdW1iZXIgb2Ygc2xpZGVzIHRvIHByZWxvYWQgYmVmb3JlL2FmdGVyIHZpc2libGUgc2xpZGVzXHJcbiAgcHJlbG9hZDogMCxcclxuXHJcbiAgLy8gTnVtYmVyIG9mIHNsaWRlcyB0byBncm91cCBpbnRvIHRoZSBwYWdlLFxyXG4gIC8vIGlmIGBhdXRvYCAtIGdyb3VwIGFsbCBzbGlkZXMgdGhhdCBmaXQgaW50byB0aGUgdmlld3BvcnRcclxuICBzbGlkZXNQZXJQYWdlOiBcImF1dG9cIixcclxuXHJcbiAgLy8gSW5kZXggb2YgaW5pdGlhbCBwYWdlXHJcbiAgaW5pdGlhbFBhZ2U6IG51bGwsXHJcblxyXG4gIC8vIEluZGV4IG9mIGluaXRpYWwgc2xpZGVcclxuICBpbml0aWFsU2xpZGU6IG51bGwsXHJcblxyXG4gIC8vIFBhbnpvb20gZnJpY3Rpb24gd2hpbGUgY2hhbmdpbmcgcGFnZVxyXG4gIGZyaWN0aW9uOiAwLjkyLFxyXG5cclxuICAvLyBTaG91bGQgY2VudGVyIGFjdGl2ZSBwYWdlXHJcbiAgY2VudGVyOiB0cnVlLFxyXG5cclxuICAvLyBTaG91bGQgY2Fyb3VzZWwgc2Nyb2xsIGluZmluaXRlbHlcclxuICBpbmZpbml0ZTogdHJ1ZSxcclxuXHJcbiAgLy8gU2hvdWxkIHRoZSBnYXAgYmUgZmlsbGVkIGJlZm9yZSBmaXJzdCBhbmQgYWZ0ZXIgbGFzdCBzbGlkZSBpZiBgaW5maW5pdGU6IGZhbHNlYFxyXG4gIGZpbGw6IHRydWUsXHJcblxyXG4gIC8vIFNob3VsZCBDYXJvdXNlbCBzZXR0bGUgYXQgYW55IHBvc2l0aW9uIGFmdGVyIGEgc3dpcGUuXHJcbiAgZHJhZ0ZyZWU6IGZhbHNlLFxyXG5cclxuICAvLyBQcmVmaXggZm9yIENTUyBjbGFzc2VzLCBtdXN0IGJlIHRoZSBzYW1lIGFzIHRoZSAgU0NTUyBgJGNhcm91c2VsLXByZWZpeGAgdmFyaWFibGVcclxuICBwcmVmaXg6IFwiXCIsXHJcblxyXG4gIC8vIENsYXNzIG5hbWVzIGZvciBET00gZWxlbWVudHMgKHdpdGhvdXQgcHJlZml4KVxyXG4gIGNsYXNzTmFtZXM6IHtcclxuICAgIHZpZXdwb3J0OiBcImNhcm91c2VsX192aWV3cG9ydFwiLFxyXG4gICAgdHJhY2s6IFwiY2Fyb3VzZWxfX3RyYWNrXCIsXHJcbiAgICBzbGlkZTogXCJjYXJvdXNlbF9fc2xpZGVcIixcclxuXHJcbiAgICAvLyBDbGFzc25hbWUgdG9nZ2xlZCBmb3Igc2xpZGVzIGluc2lkZSBjdXJyZW50IHBhZ2VcclxuICAgIHNsaWRlU2VsZWN0ZWQ6IFwiaXMtc2VsZWN0ZWRcIixcclxuICB9LFxyXG5cclxuICAvLyBMb2NhbGl6YXRpb24gb2Ygc3RyaW5nc1xyXG4gIGwxMG46IGVuLFxyXG59O1xyXG5cclxuZXhwb3J0IGNsYXNzIENhcm91c2VsIGV4dGVuZHMgQmFzZSB7XHJcbiAgLyoqXHJcbiAgICogQ2Fyb3VzZWwgY29uc3RydWN0b3JcclxuICAgKiBAY29uc3RydWN0cyBDYXJvdXNlbFxyXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9ICRjb250YWluZXIgLSBDYXJvdXNlbCBjb250YWluZXJcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gT3B0aW9ucyBmb3IgQ2Fyb3VzZWxcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvcigkY29udGFpbmVyLCBvcHRpb25zID0ge30pIHtcclxuICAgIG9wdGlvbnMgPSBleHRlbmQodHJ1ZSwge30sIGRlZmF1bHRzLCBvcHRpb25zKTtcclxuXHJcbiAgICBzdXBlcihvcHRpb25zKTtcclxuXHJcbiAgICB0aGlzLnN0YXRlID0gXCJpbml0XCI7XHJcblxyXG4gICAgdGhpcy4kY29udGFpbmVyID0gJGNvbnRhaW5lcjtcclxuXHJcbiAgICBpZiAoISh0aGlzLiRjb250YWluZXIgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gcm9vdCBlbGVtZW50IHByb3ZpZGVkXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuc2xpZGVOZXh0ID0gdGhyb3R0bGUodGhpcy5zbGlkZU5leHQuYmluZCh0aGlzKSwgMjUwLCB0cnVlKTtcclxuICAgIHRoaXMuc2xpZGVQcmV2ID0gdGhyb3R0bGUodGhpcy5zbGlkZVByZXYuYmluZCh0aGlzKSwgMjUwLCB0cnVlKTtcclxuXHJcbiAgICB0aGlzLmluaXQoKTtcclxuXHJcbiAgICAkY29udGFpbmVyLl9fQ2Fyb3VzZWwgPSB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUGVyZm9ybSBpbml0aWFsaXphdGlvblxyXG4gICAqL1xyXG4gIGluaXQoKSB7XHJcbiAgICB0aGlzLnBhZ2VzID0gW107XHJcbiAgICB0aGlzLnBhZ2UgPSB0aGlzLnBhZ2VJbmRleCA9IG51bGw7XHJcbiAgICB0aGlzLnByZXZQYWdlID0gdGhpcy5wcmV2UGFnZUluZGV4ID0gbnVsbDtcclxuXHJcbiAgICB0aGlzLmF0dGFjaFBsdWdpbnMoQ2Fyb3VzZWwuUGx1Z2lucyk7XHJcblxyXG4gICAgdGhpcy50cmlnZ2VyKFwiaW5pdFwiKTtcclxuXHJcbiAgICB0aGlzLmluaXRMYXlvdXQoKTtcclxuXHJcbiAgICB0aGlzLmluaXRTbGlkZXMoKTtcclxuXHJcbiAgICB0aGlzLnVwZGF0ZU1ldHJpY3MoKTtcclxuXHJcbiAgICBpZiAodGhpcy4kdHJhY2sgJiYgdGhpcy5wYWdlcy5sZW5ndGgpIHtcclxuICAgICAgdGhpcy4kdHJhY2suc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKCR7dGhpcy5wYWdlc1t0aGlzLnBhZ2VdLmxlZnQgKiAtMX1weCwgMHB4LCAwKSBzY2FsZSgxKWA7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5tYW5hZ2VTbGlkZVZpc2libGl0eSgpO1xyXG5cclxuICAgIHRoaXMuaW5pdFBhbnpvb20oKTtcclxuXHJcbiAgICB0aGlzLnN0YXRlID0gXCJyZWFkeVwiO1xyXG5cclxuICAgIHRoaXMudHJpZ2dlcihcInJlYWR5XCIpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSW5pdGlhbGl6ZSBsYXlvdXQ7IGNyZWF0ZSBuZWNlc3NhcnkgZWxlbWVudHNcclxuICAgKi9cclxuICBpbml0TGF5b3V0KCkge1xyXG4gICAgY29uc3QgcHJlZml4ID0gdGhpcy5vcHRpb24oXCJwcmVmaXhcIik7XHJcbiAgICBjb25zdCBjbGFzc05hbWVzID0gdGhpcy5vcHRpb24oXCJjbGFzc05hbWVzXCIpO1xyXG5cclxuICAgIHRoaXMuJHZpZXdwb3J0ID0gdGhpcy5vcHRpb24oXCJ2aWV3cG9ydFwiKSB8fCB0aGlzLiRjb250YWluZXIucXVlcnlTZWxlY3RvcihgLiR7cHJlZml4fSR7Y2xhc3NOYW1lcy52aWV3cG9ydH1gKTtcclxuXHJcbiAgICBpZiAoIXRoaXMuJHZpZXdwb3J0KSB7XHJcbiAgICAgIHRoaXMuJHZpZXdwb3J0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgdGhpcy4kdmlld3BvcnQuY2xhc3NMaXN0LmFkZCguLi4ocHJlZml4ICsgY2xhc3NOYW1lcy52aWV3cG9ydCkuc3BsaXQoXCIgXCIpKTtcclxuXHJcbiAgICAgIHRoaXMuJHZpZXdwb3J0LmFwcGVuZCguLi50aGlzLiRjb250YWluZXIuY2hpbGROb2Rlcyk7XHJcblxyXG4gICAgICB0aGlzLiRjb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy4kdmlld3BvcnQpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuJHRyYWNrID0gdGhpcy5vcHRpb24oXCJ0cmFja1wiKSB8fCB0aGlzLiRjb250YWluZXIucXVlcnlTZWxlY3RvcihgLiR7cHJlZml4fSR7Y2xhc3NOYW1lcy50cmFja31gKTtcclxuXHJcbiAgICBpZiAoIXRoaXMuJHRyYWNrKSB7XHJcbiAgICAgIHRoaXMuJHRyYWNrID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgdGhpcy4kdHJhY2suY2xhc3NMaXN0LmFkZCguLi4ocHJlZml4ICsgY2xhc3NOYW1lcy50cmFjaykuc3BsaXQoXCIgXCIpKTtcclxuXHJcbiAgICAgIHRoaXMuJHRyYWNrLmFwcGVuZCguLi50aGlzLiR2aWV3cG9ydC5jaGlsZE5vZGVzKTtcclxuXHJcbiAgICAgIHRoaXMuJHZpZXdwb3J0LmFwcGVuZENoaWxkKHRoaXMuJHRyYWNrKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEZpbGwgYHNsaWRlc2AgYXJyYXkgd2l0aCBvYmplY3RzIGZyb20gZXhpc3Rpbmcgbm9kZXMgYW5kL29yIGBzbGlkZXNgIG9wdGlvblxyXG4gICAqL1xyXG4gIGluaXRTbGlkZXMoKSB7XHJcbiAgICB0aGlzLnNsaWRlcyA9IFtdO1xyXG5cclxuICAgIC8vIEdldCBleGlzdGluZyBzbGlkZXMgZnJvbSB0aGUgRE9NXHJcbiAgICBjb25zdCBlbGVtcyA9IHRoaXMuJHZpZXdwb3J0LnF1ZXJ5U2VsZWN0b3JBbGwoYC4ke3RoaXMub3B0aW9uKFwicHJlZml4XCIpfSR7dGhpcy5vcHRpb24oXCJjbGFzc05hbWVzLnNsaWRlXCIpfWApO1xyXG5cclxuICAgIGVsZW1zLmZvckVhY2goKGVsKSA9PiB7XHJcbiAgICAgIGNvbnN0IHNsaWRlID0ge1xyXG4gICAgICAgICRlbDogZWwsXHJcbiAgICAgICAgaXNEb206IHRydWUsXHJcbiAgICAgIH07XHJcblxyXG4gICAgICB0aGlzLnNsaWRlcy5wdXNoKHNsaWRlKTtcclxuXHJcbiAgICAgIHRoaXMudHJpZ2dlcihcImNyZWF0ZVNsaWRlXCIsIHNsaWRlLCB0aGlzLnNsaWRlcy5sZW5ndGgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gQWRkIHZpcnR1YWwgc2xpZGVzLCBidXQgZG8gbm90IGNyZWF0ZSBET00gZWxlbWVudHMgeWV0LFxyXG4gICAgLy8gYmVjYXVzZSB0aGV5IHdpbGwgYmUgY3JlYXRlZCBkeW5hbWljYWxseSBiYXNlZCBvbiBjdXJyZW50IGNhcm91c2VsIHBvc2l0aW9uXHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLm9wdGlvbnMuc2xpZGVzKSkge1xyXG4gICAgICB0aGlzLnNsaWRlcyA9IGV4dGVuZCh0cnVlLCBbLi4udGhpcy5zbGlkZXNdLCB0aGlzLm9wdGlvbnMuc2xpZGVzKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERvIGFsbCBjYWxjdWxhdGlvbnMgcmVsYXRlZCB0byBzbGlkZSBzaXplIGFuZCBwYWdpbmdcclxuICAgKi9cclxuICB1cGRhdGVNZXRyaWNzKCkge1xyXG4gICAgLy8gQ2FsY3VsYXRlIGNvbnRlbnQgd2lkdGgsIHZpZXdwb3J0IHdpZHRoXHJcbiAgICAvLyA9PT1cclxuICAgIGxldCBjb250ZW50V2lkdGggPSAwO1xyXG4gICAgbGV0IGluZGV4ZXMgPSBbXTtcclxuICAgIGxldCBsYXN0U2xpZGVXaWR0aDtcclxuXHJcbiAgICB0aGlzLnNsaWRlcy5mb3JFYWNoKChzbGlkZSwgaW5kZXgpID0+IHtcclxuICAgICAgY29uc3QgJGVsID0gc2xpZGUuJGVsO1xyXG4gICAgICBjb25zdCBzbGlkZVdpZHRoID0gc2xpZGUuaXNEb20gfHwgIWxhc3RTbGlkZVdpZHRoID8gdGhpcy5nZXRTbGlkZU1ldHJpY3MoJGVsKSA6IGxhc3RTbGlkZVdpZHRoO1xyXG5cclxuICAgICAgc2xpZGUuaW5kZXggPSBpbmRleDtcclxuICAgICAgc2xpZGUud2lkdGggPSBzbGlkZVdpZHRoO1xyXG4gICAgICBzbGlkZS5sZWZ0ID0gY29udGVudFdpZHRoO1xyXG5cclxuICAgICAgbGFzdFNsaWRlV2lkdGggPSBzbGlkZVdpZHRoO1xyXG4gICAgICBjb250ZW50V2lkdGggKz0gc2xpZGVXaWR0aDtcclxuXHJcbiAgICAgIGluZGV4ZXMucHVzaChpbmRleCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBsZXQgdmlld3BvcnRXaWR0aCA9IE1hdGgubWF4KHRoaXMuJHRyYWNrLm9mZnNldFdpZHRoLCByb3VuZCh0aGlzLiR0cmFjay5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCkpO1xyXG5cclxuICAgIGxldCB2aWV3cG9ydFN0eWxlcyA9IGdldENvbXB1dGVkU3R5bGUodGhpcy4kdHJhY2spO1xyXG4gICAgdmlld3BvcnRXaWR0aCA9IHZpZXdwb3J0V2lkdGggLSAocGFyc2VGbG9hdCh2aWV3cG9ydFN0eWxlcy5wYWRkaW5nTGVmdCkgKyBwYXJzZUZsb2F0KHZpZXdwb3J0U3R5bGVzLnBhZGRpbmdSaWdodCkpO1xyXG5cclxuICAgIHRoaXMuY29udGVudFdpZHRoID0gY29udGVudFdpZHRoO1xyXG4gICAgdGhpcy52aWV3cG9ydFdpZHRoID0gdmlld3BvcnRXaWR0aDtcclxuXHJcbiAgICAvLyBTcGxpdCBzbGlkZXMgaW50byBwYWdlc1xyXG4gICAgLy8gPT09XHJcbiAgICBjb25zdCBwYWdlcyA9IFtdO1xyXG4gICAgY29uc3Qgc2xpZGVzUGVyUGFnZSA9IHRoaXMub3B0aW9uKFwic2xpZGVzUGVyUGFnZVwiKTtcclxuXHJcbiAgICBpZiAoTnVtYmVyLmlzSW50ZWdlcihzbGlkZXNQZXJQYWdlKSAmJiBjb250ZW50V2lkdGggPiB2aWV3cG9ydFdpZHRoKSB7XHJcbiAgICAgIC8vIEZpeGVkIG51bWJlciBvZiBzbGlkZXMgaW4gdGhlIHBhZ2VcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnNsaWRlcy5sZW5ndGg7IGkgKz0gc2xpZGVzUGVyUGFnZSkge1xyXG4gICAgICAgIHBhZ2VzLnB1c2goe1xyXG4gICAgICAgICAgaW5kZXhlczogaW5kZXhlcy5zbGljZShpLCBpICsgc2xpZGVzUGVyUGFnZSksXHJcbiAgICAgICAgICBzbGlkZXM6IHRoaXMuc2xpZGVzLnNsaWNlKGksIGkgKyBzbGlkZXNQZXJQYWdlKSxcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gU2xpZGVzIHRoYXQgZml0IGluc2lkZSB2aWV3cG9ydFxyXG4gICAgICBsZXQgY3VycmVudFBhZ2UgPSAwO1xyXG4gICAgICBsZXQgY3VycmVudFdpZHRoID0gMDtcclxuXHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcclxuICAgICAgICBsZXQgc2xpZGUgPSB0aGlzLnNsaWRlc1tpXTtcclxuXHJcbiAgICAgICAgLy8gQWRkIG5leHQgcGFnZVxyXG4gICAgICAgIGlmICghcGFnZXMubGVuZ3RoIHx8IGN1cnJlbnRXaWR0aCArIHNsaWRlLndpZHRoID4gdmlld3BvcnRXaWR0aCkge1xyXG4gICAgICAgICAgcGFnZXMucHVzaCh7XHJcbiAgICAgICAgICAgIGluZGV4ZXM6IFtdLFxyXG4gICAgICAgICAgICBzbGlkZXM6IFtdLFxyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgY3VycmVudFBhZ2UgPSBwYWdlcy5sZW5ndGggLSAxO1xyXG4gICAgICAgICAgY3VycmVudFdpZHRoID0gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGN1cnJlbnRXaWR0aCArPSBzbGlkZS53aWR0aDtcclxuXHJcbiAgICAgICAgcGFnZXNbY3VycmVudFBhZ2VdLmluZGV4ZXMucHVzaChpKTtcclxuICAgICAgICBwYWdlc1tjdXJyZW50UGFnZV0uc2xpZGVzLnB1c2goc2xpZGUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgc2hvdWxkQ2VudGVyID0gdGhpcy5vcHRpb24oXCJjZW50ZXJcIik7XHJcbiAgICBjb25zdCBzaG91bGRGaWxsID0gdGhpcy5vcHRpb24oXCJmaWxsXCIpO1xyXG5cclxuICAgIC8vIENhbGN1bGF0ZSB3aWR0aCBhbmQgc3RhcnQgcG9zaXRpb24gZm9yIGVhY2ggcGFnZVxyXG4gICAgLy8gPT09XHJcbiAgICBwYWdlcy5mb3JFYWNoKChwYWdlLCBpbmRleCkgPT4ge1xyXG4gICAgICBwYWdlLmluZGV4ID0gaW5kZXg7XHJcbiAgICAgIHBhZ2Uud2lkdGggPSBwYWdlLnNsaWRlcy5yZWR1Y2UoKHN1bSwgc2xpZGUpID0+IHN1bSArIHNsaWRlLndpZHRoLCAwKTtcclxuXHJcbiAgICAgIHBhZ2UubGVmdCA9IHBhZ2Uuc2xpZGVzWzBdLmxlZnQ7XHJcblxyXG4gICAgICBpZiAoc2hvdWxkQ2VudGVyKSB7XHJcbiAgICAgICAgcGFnZS5sZWZ0ICs9ICh2aWV3cG9ydFdpZHRoIC0gcGFnZS53aWR0aCkgKiAwLjUgKiAtMTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHNob3VsZEZpbGwgJiYgIXRoaXMub3B0aW9uKFwiaW5maW5pdGVYXCIsIHRoaXMub3B0aW9uKFwiaW5maW5pdGVcIikpICYmIGNvbnRlbnRXaWR0aCA+IHZpZXdwb3J0V2lkdGgpIHtcclxuICAgICAgICBwYWdlLmxlZnQgPSBNYXRoLm1heChwYWdlLmxlZnQsIDApO1xyXG4gICAgICAgIHBhZ2UubGVmdCA9IE1hdGgubWluKHBhZ2UubGVmdCwgY29udGVudFdpZHRoIC0gdmlld3BvcnRXaWR0aCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIC8vIE1lcmdlIHBhZ2VzXHJcbiAgICAvLyA9PT1cclxuICAgIGNvbnN0IHJleiA9IFtdO1xyXG4gICAgbGV0IHByZXZQYWdlO1xyXG5cclxuICAgIHBhZ2VzLmZvckVhY2goKHBhZ2UyKSA9PiB7XHJcbiAgICAgIGNvbnN0IHBhZ2UgPSB7IC4uLnBhZ2UyIH07XHJcblxyXG4gICAgICBpZiAocHJldlBhZ2UgJiYgcGFnZS5sZWZ0ID09PSBwcmV2UGFnZS5sZWZ0KSB7XHJcbiAgICAgICAgcHJldlBhZ2Uud2lkdGggKz0gcGFnZS53aWR0aDtcclxuXHJcbiAgICAgICAgcHJldlBhZ2Uuc2xpZGVzID0gWy4uLnByZXZQYWdlLnNsaWRlcywgLi4ucGFnZS5zbGlkZXNdO1xyXG4gICAgICAgIHByZXZQYWdlLmluZGV4ZXMgPSBbLi4ucHJldlBhZ2UuaW5kZXhlcywgLi4ucGFnZS5pbmRleGVzXTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBwYWdlLmluZGV4ID0gcmV6Lmxlbmd0aDtcclxuXHJcbiAgICAgICAgcHJldlBhZ2UgPSBwYWdlO1xyXG5cclxuICAgICAgICByZXoucHVzaChwYWdlKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5wYWdlcyA9IHJlejtcclxuXHJcbiAgICBsZXQgcGFnZSA9IHRoaXMucGFnZTtcclxuXHJcbiAgICBpZiAocGFnZSA9PT0gbnVsbCkge1xyXG4gICAgICBjb25zdCBpbml0aWFsU2xpZGUgPSB0aGlzLm9wdGlvbihcImluaXRpYWxTbGlkZVwiKTtcclxuXHJcbiAgICAgIGlmIChpbml0aWFsU2xpZGUgIT09IG51bGwpIHtcclxuICAgICAgICBwYWdlID0gdGhpcy5maW5kUGFnZUZvclNsaWRlKGluaXRpYWxTbGlkZSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcGFnZSA9IHBhcnNlSW50KHRoaXMub3B0aW9uKFwiaW5pdGlhbFBhZ2VcIiwgMCksIDEwKSB8fCAwO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoIXJleltwYWdlXSkge1xyXG4gICAgICAgIHBhZ2UgPSByZXoubGVuZ3RoICYmIHBhZ2UgPiByZXoubGVuZ3RoID8gcmV6W3Jlei5sZW5ndGggLSAxXS5pbmRleCA6IDA7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMucGFnZSA9IHBhZ2U7XHJcbiAgICAgIHRoaXMucGFnZUluZGV4ID0gcGFnZTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnVwZGF0ZVBhbnpvb20oKTtcclxuXHJcbiAgICB0aGlzLnRyaWdnZXIoXCJyZWZyZXNoXCIpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2FsY3VsYXRlIHNsaWRlIGVsZW1lbnQgd2lkdGggKGluY2x1ZGluZyBsZWZ0LCByaWdodCBtYXJnaW5zKVxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBub2RlXHJcbiAgICogQHJldHVybnMge051bWJlcn0gV2lkdGggaW4gcHhcclxuICAgKi9cclxuICBnZXRTbGlkZU1ldHJpY3Mobm9kZSkge1xyXG4gICAgaWYgKCFub2RlKSB7XHJcbiAgICAgIGNvbnN0IGZpcnN0U2xpZGUgPSB0aGlzLnNsaWRlc1swXTtcclxuXHJcbiAgICAgIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG5cclxuICAgICAgbm9kZS5kYXRhc2V0LmlzVGVzdEVsID0gMTtcclxuICAgICAgbm9kZS5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcclxuICAgICAgbm9kZS5jbGFzc0xpc3QuYWRkKC4uLih0aGlzLm9wdGlvbihcInByZWZpeFwiKSArIHRoaXMub3B0aW9uKFwiY2xhc3NOYW1lcy5zbGlkZVwiKSkuc3BsaXQoXCIgXCIpKTtcclxuXHJcbiAgICAgIC8vIEFzc3VtZSBhbGwgc2xpZGVzIGhhdmUgdGhlIHNhbWUgY3VzdG9tIGNsYXNzLCBpZiBhbnlcclxuICAgICAgaWYgKGZpcnN0U2xpZGUuY3VzdG9tQ2xhc3MpIHtcclxuICAgICAgICBub2RlLmNsYXNzTGlzdC5hZGQoLi4uZmlyc3RTbGlkZS5jdXN0b21DbGFzcy5zcGxpdChcIiBcIikpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLiR0cmFjay5wcmVwZW5kKG5vZGUpO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCB3aWR0aCA9IE1hdGgubWF4KG5vZGUub2Zmc2V0V2lkdGgsIHJvdW5kKG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGgpKTtcclxuXHJcbiAgICAvLyBBZGQgbGVmdC9yaWdodCBtYXJnaW5cclxuICAgIGNvbnN0IHN0eWxlID0gbm9kZS5jdXJyZW50U3R5bGUgfHwgd2luZG93LmdldENvbXB1dGVkU3R5bGUobm9kZSk7XHJcbiAgICB3aWR0aCA9IHdpZHRoICsgKHBhcnNlRmxvYXQoc3R5bGUubWFyZ2luTGVmdCkgfHwgMCkgKyAocGFyc2VGbG9hdChzdHlsZS5tYXJnaW5SaWdodCkgfHwgMCk7XHJcblxyXG4gICAgaWYgKG5vZGUuZGF0YXNldC5pc1Rlc3RFbCkge1xyXG4gICAgICBub2RlLnJlbW92ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB3aWR0aDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtJbnRlZ2VyfSBpbmRleCBJbmRleCBvZiB0aGUgc2xpZGVcclxuICAgKiBAcmV0dXJucyB7SW50ZWdlcnxudWxsfSBJbmRleCBvZiB0aGUgcGFnZSBpZiBmb3VuZCwgb3IgbnVsbFxyXG4gICAqL1xyXG4gIGZpbmRQYWdlRm9yU2xpZGUoaW5kZXgpIHtcclxuICAgIGluZGV4ID0gcGFyc2VJbnQoaW5kZXgsIDEwKSB8fCAwO1xyXG5cclxuICAgIGNvbnN0IHBhZ2UgPSB0aGlzLnBhZ2VzLmZpbmQoKHBhZ2UpID0+IHtcclxuICAgICAgcmV0dXJuIHBhZ2UuaW5kZXhlcy5pbmRleE9mKGluZGV4KSA+IC0xO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIHBhZ2UgPyBwYWdlLmluZGV4IDogbnVsbDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNsaWRlIHRvIG5leHQgcGFnZSwgaWYgcG9zc2libGVcclxuICAgKi9cclxuICBzbGlkZU5leHQoKSB7XHJcbiAgICB0aGlzLnNsaWRlVG8odGhpcy5wYWdlSW5kZXggKyAxKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNsaWRlIHRvIHByZXZpb3VzIHBhZ2UsIGlmIHBvc3NpYmxlXHJcbiAgICovXHJcbiAgc2xpZGVQcmV2KCkge1xyXG4gICAgdGhpcy5zbGlkZVRvKHRoaXMucGFnZUluZGV4IC0gMSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTbGlkZXMgY2Fyb3VzZWwgdG8gZ2l2ZW4gcGFnZVxyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBwYWdlIC0gTmV3IGluZGV4IG9mIGFjdGl2ZSBwYWdlXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtwYXJhbXNdIC0gQWRkaXRpb25hbCBvcHRpb25zXHJcbiAgICovXHJcbiAgc2xpZGVUbyhwYWdlLCBwYXJhbXMgPSB7fSkge1xyXG4gICAgY29uc3QgeyB4ID0gdGhpcy5zZXRQYWdlKHBhZ2UsIHRydWUpICogLTEsIHkgPSAwLCBmcmljdGlvbiA9IHRoaXMub3B0aW9uKFwiZnJpY3Rpb25cIikgfSA9IHBhcmFtcztcclxuXHJcbiAgICBpZiAodGhpcy5QYW56b29tLmNvbnRlbnQueCA9PT0geCAmJiAhdGhpcy5QYW56b29tLnZlbG9jaXR5LnggJiYgZnJpY3Rpb24pIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuUGFuem9vbS5wYW5Ubyh7XHJcbiAgICAgIHgsXHJcbiAgICAgIHksXHJcbiAgICAgIGZyaWN0aW9uLFxyXG4gICAgICBpZ25vcmVCb3VuZHM6IHRydWUsXHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAodGhpcy5zdGF0ZSA9PT0gXCJyZWFkeVwiICYmIHRoaXMuUGFuem9vbS5zdGF0ZSA9PT0gXCJyZWFkeVwiKSB7XHJcbiAgICAgIHRoaXMudHJpZ2dlcihcInNldHRsZVwiKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEluaXRpYWxpc2UgbWFpbiBQYW56b29tIGluc3RhbmNlXHJcbiAgICovXHJcbiAgaW5pdFBhbnpvb20oKSB7XHJcbiAgICBpZiAodGhpcy5QYW56b29tKSB7XHJcbiAgICAgIHRoaXMuUGFuem9vbS5kZXN0cm95KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ3JlYXRlIGZyZXNoIG9iamVjdCBjb250YWluaW5nIG9wdGlvbnMgZm9yIFBhem9vbSBpbnN0YW5jZVxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IGV4dGVuZChcclxuICAgICAgdHJ1ZSxcclxuICAgICAge30sXHJcbiAgICAgIHtcclxuICAgICAgICAvLyBUcmFjayBlbGVtZW50IHdpbGwgYmUgc2V0IGFzIFBhbnpvb20gJGNvbnRlbnRcclxuICAgICAgICBjb250ZW50OiB0aGlzLiR0cmFjayxcclxuICAgICAgICB3cmFwSW5uZXI6IGZhbHNlLFxyXG4gICAgICAgIHJlc2l6ZVBhcmVudDogZmFsc2UsXHJcblxyXG4gICAgICAgIC8vIERpc2FibGUgYW55IHVzZXIgaW50ZXJhY3Rpb25cclxuICAgICAgICB6b29tOiBmYWxzZSxcclxuICAgICAgICBjbGljazogZmFsc2UsXHJcblxyXG4gICAgICAgIC8vIFJpZ2h0IG5vdywgb25seSBob3Jpem9udGFsIG5hdmlnYXRpb24gaXMgc3VwcG9ydGVkXHJcbiAgICAgICAgbG9ja0F4aXM6IFwieFwiLFxyXG5cclxuICAgICAgICB4OiB0aGlzLnBhZ2VzLmxlbmd0aCA/IHRoaXMucGFnZXNbdGhpcy5wYWdlXS5sZWZ0ICogLTEgOiAwLFxyXG4gICAgICAgIGNlbnRlck9uU3RhcnQ6IGZhbHNlLFxyXG5cclxuICAgICAgICAvLyBNYWtlIGB0ZXh0U2VsZWN0aW9uYCBvcHRpb24gbW9yZSBlYXN5IHRvIGN1c3RvbWl6ZVxyXG4gICAgICAgIHRleHRTZWxlY3Rpb246ICgpID0+IHRoaXMub3B0aW9uKFwidGV4dFNlbGVjdGlvblwiLCBmYWxzZSksXHJcblxyXG4gICAgICAgIC8vIERpc2FibGUgZHJhZ2dpbmcgaWYgY29udGVudCAoZS5nLiBhbGwgc2xpZGVzKSBmaXRzIGluc2lkZSB2aWV3cG9ydFxyXG4gICAgICAgIHBhbk9ubHlab29tZWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIHJldHVybiB0aGlzLmNvbnRlbnQud2lkdGggPD0gdGhpcy52aWV3cG9ydC53aWR0aDtcclxuICAgICAgICB9LFxyXG4gICAgICB9LFxyXG4gICAgICB0aGlzLm9wdGlvbihcIlBhbnpvb21cIilcclxuICAgICk7XHJcblxyXG4gICAgLy8gQ3JlYXRlIG5ldyBQYW56b29tIGluc3RhbmNlXHJcbiAgICB0aGlzLlBhbnpvb20gPSBuZXcgUGFuem9vbSh0aGlzLiRjb250YWluZXIsIG9wdGlvbnMpO1xyXG5cclxuICAgIHRoaXMuUGFuem9vbS5vbih7XHJcbiAgICAgIC8vIEJ1YmJsZSBldmVudHNcclxuICAgICAgXCIqXCI6IChuYW1lLCAuLi5kZXRhaWxzKSA9PiB0aGlzLnRyaWdnZXIoYFBhbnpvb20uJHtuYW1lfWAsIC4uLmRldGFpbHMpLFxyXG4gICAgICAvLyBUaGUgcmVzdCBvZiBldmVudHMgdG8gYmUgcHJvY2Vzc2VkXHJcbiAgICAgIGFmdGVyVXBkYXRlOiAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy51cGRhdGVQYWdlKCk7XHJcbiAgICAgIH0sXHJcbiAgICAgIGJlZm9yZVRyYW5zZm9ybTogdGhpcy5vbkJlZm9yZVRyYW5zZm9ybS5iaW5kKHRoaXMpLFxyXG4gICAgICB0b3VjaEVuZDogdGhpcy5vblRvdWNoRW5kLmJpbmQodGhpcyksXHJcbiAgICAgIGVuZEFuaW1hdGlvbjogKCkgPT4ge1xyXG4gICAgICAgIHRoaXMudHJpZ2dlcihcInNldHRsZVwiKTtcclxuICAgICAgfSxcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIFRoZSBjb250ZW50cyBvZiB0aGUgc2xpZGVzIG1heSBjYXVzZSB0aGUgcGFnZSBzY3JvbGwgYmFyIHRvIGFwcGVhciwgc28gdGhlIGNhcm91c2VsIHdpZHRoIG1heSBjaGFuZ2VcclxuICAgIC8vIGFuZCBzbGlkZXMgaGF2ZSB0byBiZSByZXBvc2l0aW9uZWRcclxuICAgIHRoaXMudXBkYXRlTWV0cmljcygpO1xyXG4gICAgdGhpcy5tYW5hZ2VTbGlkZVZpc2libGl0eSgpO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlUGFuem9vbSgpIHtcclxuICAgIGlmICghdGhpcy5QYW56b29tKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLlBhbnpvb20uY29udGVudCA9IHtcclxuICAgICAgLi4udGhpcy5QYW56b29tLmNvbnRlbnQsXHJcbiAgICAgIGZpdFdpZHRoOiB0aGlzLmNvbnRlbnRXaWR0aCxcclxuICAgICAgb3JpZ1dpZHRoOiB0aGlzLmNvbnRlbnRXaWR0aCxcclxuICAgICAgd2lkdGg6IHRoaXMuY29udGVudFdpZHRoLFxyXG4gICAgfTtcclxuXHJcbiAgICBpZiAodGhpcy5wYWdlcy5sZW5ndGggPiAxICYmIHRoaXMub3B0aW9uKFwiaW5maW5pdGVYXCIsIHRoaXMub3B0aW9uKFwiaW5maW5pdGVcIikpKSB7XHJcbiAgICAgIHRoaXMuUGFuem9vbS5ib3VuZFggPSBudWxsO1xyXG4gICAgfSBlbHNlIGlmICh0aGlzLnBhZ2VzLmxlbmd0aCkge1xyXG4gICAgICB0aGlzLlBhbnpvb20uYm91bmRYID0ge1xyXG4gICAgICAgIGZyb206IHRoaXMucGFnZXNbdGhpcy5wYWdlcy5sZW5ndGggLSAxXS5sZWZ0ICogLTEsXHJcbiAgICAgICAgdG86IHRoaXMucGFnZXNbMF0ubGVmdCAqIC0xLFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLm9wdGlvbihcImluZmluaXRlWVwiLCB0aGlzLm9wdGlvbihcImluZmluaXRlXCIpKSkge1xyXG4gICAgICB0aGlzLlBhbnpvb20uYm91bmRZID0gbnVsbDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuUGFuem9vbS5ib3VuZFkgPSB7XHJcbiAgICAgICAgZnJvbTogMCxcclxuICAgICAgICB0bzogMCxcclxuICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLlBhbnpvb20uaGFuZGxlQ3Vyc29yKCk7XHJcbiAgfVxyXG5cclxuICBtYW5hZ2VTbGlkZVZpc2libGl0eSgpIHtcclxuICAgIGNvbnN0IGNvbnRlbnRXaWR0aCA9IHRoaXMuY29udGVudFdpZHRoO1xyXG4gICAgY29uc3Qgdmlld3BvcnRXaWR0aCA9IHRoaXMudmlld3BvcnRXaWR0aDtcclxuXHJcbiAgICBsZXQgY3VycmVudFggPSB0aGlzLlBhbnpvb20gPyB0aGlzLlBhbnpvb20uY29udGVudC54ICogLTEgOiB0aGlzLnBhZ2VzLmxlbmd0aCA/IHRoaXMucGFnZXNbdGhpcy5wYWdlXS5sZWZ0IDogMDtcclxuXHJcbiAgICBjb25zdCBwcmVsb2FkID0gdGhpcy5vcHRpb24oXCJwcmVsb2FkXCIpO1xyXG4gICAgY29uc3QgaW5maW5pdGUgPSB0aGlzLm9wdGlvbihcImluZmluaXRlWFwiLCB0aGlzLm9wdGlvbihcImluZmluaXRlXCIpKTtcclxuXHJcbiAgICBjb25zdCBwYWRkaW5nTGVmdCA9IHBhcnNlRmxvYXQoZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLiR2aWV3cG9ydCwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShcInBhZGRpbmctbGVmdFwiKSk7XHJcbiAgICBjb25zdCBwYWRkaW5nUmlnaHQgPSBwYXJzZUZsb2F0KGdldENvbXB1dGVkU3R5bGUodGhpcy4kdmlld3BvcnQsIG51bGwpLmdldFByb3BlcnR5VmFsdWUoXCJwYWRkaW5nLXJpZ2h0XCIpKTtcclxuXHJcbiAgICAvLyBDaGVjayB2aXNpYmlsaXR5IG9mIGVhY2ggc2xpZGVcclxuICAgIHRoaXMuc2xpZGVzLmZvckVhY2goKHNsaWRlKSA9PiB7XHJcbiAgICAgIGxldCBsZWZ0Qm91bmRhcnksIHJpZ2h0Qm91bmRhcnk7XHJcblxyXG4gICAgICBsZXQgaGFzRGlmZiA9IDA7XHJcblxyXG4gICAgICAvLyAjMSAtIHNsaWRlcyBpbiBjdXJyZW50IHZpZXdwb3J0OyB0aGlzIGRvZXMgbm90IGluY2x1ZGUgaW5maW5pdGUgaXRlbXNcclxuICAgICAgbGVmdEJvdW5kYXJ5ID0gY3VycmVudFggLSBwYWRkaW5nTGVmdDtcclxuICAgICAgcmlnaHRCb3VuZGFyeSA9IGN1cnJlbnRYICsgdmlld3BvcnRXaWR0aCArIHBhZGRpbmdSaWdodDtcclxuXHJcbiAgICAgIGxlZnRCb3VuZGFyeSAtPSBwcmVsb2FkICogKHZpZXdwb3J0V2lkdGggKyBwYWRkaW5nTGVmdCArIHBhZGRpbmdSaWdodCk7XHJcbiAgICAgIHJpZ2h0Qm91bmRhcnkgKz0gcHJlbG9hZCAqICh2aWV3cG9ydFdpZHRoICsgcGFkZGluZ0xlZnQgKyBwYWRkaW5nUmlnaHQpO1xyXG5cclxuICAgICAgY29uc3QgaW5zaWRlQ3VycmVudEludGVydmFsID0gc2xpZGUubGVmdCArIHNsaWRlLndpZHRoID4gbGVmdEJvdW5kYXJ5ICYmIHNsaWRlLmxlZnQgPCByaWdodEJvdW5kYXJ5O1xyXG5cclxuICAgICAgLy8gIzIgLSBpbmZpbml0ZSBpdGVtcyBpbnNpZGUgY3VycmVudCB2aWV3cG9ydDsgZnJvbSBwcmV2aW91cyBpbnRlcnZhbFxyXG4gICAgICBsZWZ0Qm91bmRhcnkgPSBjdXJyZW50WCArIGNvbnRlbnRXaWR0aCAtIHBhZGRpbmdMZWZ0O1xyXG4gICAgICByaWdodEJvdW5kYXJ5ID0gY3VycmVudFggKyBjb250ZW50V2lkdGggKyB2aWV3cG9ydFdpZHRoICsgcGFkZGluZ1JpZ2h0O1xyXG5cclxuICAgICAgLy8gSW5jbHVkZSBzbGlkZXMgdGhhdCBoYXZlIHRvIGJlIHByZWxvYWRlZFxyXG4gICAgICBsZWZ0Qm91bmRhcnkgLT0gcHJlbG9hZCAqICh2aWV3cG9ydFdpZHRoICsgcGFkZGluZ0xlZnQgKyBwYWRkaW5nUmlnaHQpO1xyXG5cclxuICAgICAgY29uc3QgaW5zaWRlUHJldkludGVydmFsID0gaW5maW5pdGUgJiYgc2xpZGUubGVmdCArIHNsaWRlLndpZHRoID4gbGVmdEJvdW5kYXJ5ICYmIHNsaWRlLmxlZnQgPCByaWdodEJvdW5kYXJ5O1xyXG5cclxuICAgICAgLy8gIzIgLSBpbmZpbml0ZSBpdGVtcyBpbnNpZGUgY3VycmVudCB2aWV3cG9ydDsgZnJvbSBuZXh0IGludGVydmFsXHJcbiAgICAgIGxlZnRCb3VuZGFyeSA9IGN1cnJlbnRYIC0gY29udGVudFdpZHRoIC0gcGFkZGluZ0xlZnQ7XHJcbiAgICAgIHJpZ2h0Qm91bmRhcnkgPSBjdXJyZW50WCAtIGNvbnRlbnRXaWR0aCArIHZpZXdwb3J0V2lkdGggKyBwYWRkaW5nUmlnaHQ7XHJcblxyXG4gICAgICAvLyBJbmNsdWRlIHNsaWRlcyB0aGF0IGhhdmUgdG8gYmUgcHJlbG9hZGVkXHJcbiAgICAgIGxlZnRCb3VuZGFyeSAtPSBwcmVsb2FkICogKHZpZXdwb3J0V2lkdGggKyBwYWRkaW5nTGVmdCArIHBhZGRpbmdSaWdodCk7XHJcblxyXG4gICAgICBjb25zdCBpbnNpZGVOZXh0SW50ZXJ2YWwgPSBpbmZpbml0ZSAmJiBzbGlkZS5sZWZ0ICsgc2xpZGUud2lkdGggPiBsZWZ0Qm91bmRhcnkgJiYgc2xpZGUubGVmdCA8IHJpZ2h0Qm91bmRhcnk7XHJcblxyXG4gICAgICAvLyBDcmVhdGUgdmlydHVhbCBzbGlkZXMgdGhhdCBzaG91bGQgYmUgdmlzaWJsZSBvciBwcmVsb2FkZWQsIHJlbW92ZSBvdGhlcnNcclxuICAgICAgaWYgKGluc2lkZVByZXZJbnRlcnZhbCB8fCBpbnNpZGVDdXJyZW50SW50ZXJ2YWwgfHwgaW5zaWRlTmV4dEludGVydmFsKSB7XHJcbiAgICAgICAgdGhpcy5jcmVhdGVTbGlkZUVsKHNsaWRlKTtcclxuXHJcbiAgICAgICAgaWYgKGluc2lkZUN1cnJlbnRJbnRlcnZhbCkge1xyXG4gICAgICAgICAgaGFzRGlmZiA9IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoaW5zaWRlUHJldkludGVydmFsKSB7XHJcbiAgICAgICAgICBoYXNEaWZmID0gLTE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoaW5zaWRlTmV4dEludGVydmFsKSB7XHJcbiAgICAgICAgICBoYXNEaWZmID0gMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEJyaW5nIHByZWxvYWRlZCBzbGlkZXMgYmFjayB0byB2aWV3cG9ydCwgaWYgbmVlZGVkXHJcbiAgICAgICAgaWYgKHNsaWRlLmxlZnQgKyBzbGlkZS53aWR0aCA+IGN1cnJlbnRYICYmIHNsaWRlLmxlZnQgPD0gY3VycmVudFggKyB2aWV3cG9ydFdpZHRoICsgcGFkZGluZ1JpZ2h0KSB7XHJcbiAgICAgICAgICBoYXNEaWZmID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5yZW1vdmVTbGlkZUVsKHNsaWRlKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgc2xpZGUuaGFzRGlmZiA9IGhhc0RpZmY7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBSZXBvc2l0aW9uIHNsaWRlcyBmb3IgY29udGludWl0eVxyXG4gICAgbGV0IG5leHRJbmRleCA9IDA7XHJcbiAgICBsZXQgbmV4dFBvcyA9IDA7XHJcblxyXG4gICAgdGhpcy5zbGlkZXMuZm9yRWFjaCgoc2xpZGUsIGluZGV4KSA9PiB7XHJcbiAgICAgIGxldCB1cGRhdGVkWCA9IDA7XHJcblxyXG4gICAgICBpZiAoc2xpZGUuJGVsKSB7XHJcbiAgICAgICAgaWYgKGluZGV4ICE9PSBuZXh0SW5kZXggfHwgc2xpZGUuaGFzRGlmZikge1xyXG4gICAgICAgICAgdXBkYXRlZFggPSBuZXh0UG9zICsgc2xpZGUuaGFzRGlmZiAqIGNvbnRlbnRXaWR0aDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgbmV4dFBvcyA9IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzbGlkZS4kZWwuc3R5bGUubGVmdCA9IE1hdGguYWJzKHVwZGF0ZWRYKSA+IDAuMSA/IGAke25leHRQb3MgKyBzbGlkZS5oYXNEaWZmICogY29udGVudFdpZHRofXB4YCA6IFwiXCI7XHJcblxyXG4gICAgICAgIG5leHRJbmRleCsrO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIG5leHRQb3MgKz0gc2xpZGUud2lkdGg7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMubWFya1NlbGVjdGVkU2xpZGVzKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGVzIG1haW4gRE9NIGVsZW1lbnQgZm9yIHZpcnR1YWwgc2xpZGVzLFxyXG4gICAqIGxhenkgbG9hZHMgaW1hZ2VzIGluc2lkZSByZWd1bGFyIHNsaWRlc1xyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzbGlkZVxyXG4gICAqL1xyXG4gIGNyZWF0ZVNsaWRlRWwoc2xpZGUpIHtcclxuICAgIGlmICghc2xpZGUpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChzbGlkZS4kZWwpIHtcclxuICAgICAgbGV0IGN1cmVudEluZGV4ID0gc2xpZGUuJGVsLmRhdGFzZXQuaW5kZXg7XHJcblxyXG4gICAgICBpZiAoIWN1cmVudEluZGV4IHx8IHBhcnNlSW50KGN1cmVudEluZGV4LCAxMCkgIT09IHNsaWRlLmluZGV4KSB7XHJcbiAgICAgICAgc2xpZGUuJGVsLmRhdGFzZXQuaW5kZXggPSBzbGlkZS5pbmRleDtcclxuXHJcbiAgICAgICAgLy8gTGF6eSBsb2FkIGltYWdlc1xyXG4gICAgICAgIC8vID09PVxyXG4gICAgICAgIHNsaWRlLiRlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW2RhdGEtbGF6eS1zcmNzZXRdXCIpLmZvckVhY2goKG5vZGUpID0+IHtcclxuICAgICAgICAgIG5vZGUuc3Jjc2V0ID0gbm9kZS5kYXRhc2V0LmxhenlTcmNzZXQ7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHNsaWRlLiRlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW2RhdGEtbGF6eS1zcmNdXCIpLmZvckVhY2goKG5vZGUpID0+IHtcclxuICAgICAgICAgIGxldCBsYXp5U3JjID0gbm9kZS5kYXRhc2V0LmxhenlTcmM7XHJcblxyXG4gICAgICAgICAgaWYgKG5vZGUgaW5zdGFuY2VvZiBIVE1MSW1hZ2VFbGVtZW50KSB7XHJcbiAgICAgICAgICAgIG5vZGUuc3JjID0gbGF6eVNyYztcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIG5vZGUuc3R5bGUuYmFja2dyb3VuZEltYWdlID0gYHVybCgnJHtsYXp5U3JjfScpYDtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gTGF6eSBsb2FkIHNsaWRlIGJhY2tncm91bmQgaW1hZ2VcclxuICAgICAgICAvLyA9PT1cclxuICAgICAgICBsZXQgbGF6eVNyYztcclxuXHJcbiAgICAgICAgaWYgKChsYXp5U3JjID0gc2xpZGUuJGVsLmRhdGFzZXQubGF6eVNyYykpIHtcclxuICAgICAgICAgIHNsaWRlLiRlbC5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2UgPSBgdXJsKCcke2xhenlTcmN9JylgO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2xpZGUuc3RhdGUgPSBcInJlYWR5XCI7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG5cclxuICAgIGRpdi5kYXRhc2V0LmluZGV4ID0gc2xpZGUuaW5kZXg7XHJcbiAgICBkaXYuY2xhc3NMaXN0LmFkZCguLi4odGhpcy5vcHRpb24oXCJwcmVmaXhcIikgKyB0aGlzLm9wdGlvbihcImNsYXNzTmFtZXMuc2xpZGVcIikpLnNwbGl0KFwiIFwiKSk7XHJcblxyXG4gICAgaWYgKHNsaWRlLmN1c3RvbUNsYXNzKSB7XHJcbiAgICAgIGRpdi5jbGFzc0xpc3QuYWRkKC4uLnNsaWRlLmN1c3RvbUNsYXNzLnNwbGl0KFwiIFwiKSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHNsaWRlLmh0bWwpIHtcclxuICAgICAgZGl2LmlubmVySFRNTCA9IHNsaWRlLmh0bWw7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgYWxsRWxlbGVtZW50cyA9IFtdO1xyXG5cclxuICAgIHRoaXMuc2xpZGVzLmZvckVhY2goKHNsaWRlLCBpbmRleCkgPT4ge1xyXG4gICAgICBpZiAoc2xpZGUuJGVsKSB7XHJcbiAgICAgICAgYWxsRWxlbGVtZW50cy5wdXNoKGluZGV4KTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gRmluZCBhIHBsYWNlIGluIERPTSB0byBpbnNlcnQgYW4gZWxlbWVudFxyXG4gICAgY29uc3QgZ29hbCA9IHNsaWRlLmluZGV4O1xyXG4gICAgbGV0IHJlZlNsaWRlID0gbnVsbDtcclxuXHJcbiAgICBpZiAoYWxsRWxlbGVtZW50cy5sZW5ndGgpIHtcclxuICAgICAgbGV0IHJlZkluZGV4ID0gYWxsRWxlbGVtZW50cy5yZWR1Y2UoKHByZXYsIGN1cnIpID0+XHJcbiAgICAgICAgTWF0aC5hYnMoY3VyciAtIGdvYWwpIDwgTWF0aC5hYnMocHJldiAtIGdvYWwpID8gY3VyciA6IHByZXZcclxuICAgICAgKTtcclxuICAgICAgcmVmU2xpZGUgPSB0aGlzLnNsaWRlc1tyZWZJbmRleF07XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy4kdHJhY2suaW5zZXJ0QmVmb3JlKFxyXG4gICAgICBkaXYsXHJcbiAgICAgIHJlZlNsaWRlICYmIHJlZlNsaWRlLiRlbCA/IChyZWZTbGlkZS5pbmRleCA8IHNsaWRlLmluZGV4ID8gcmVmU2xpZGUuJGVsLm5leHRTaWJsaW5nIDogcmVmU2xpZGUuJGVsKSA6IG51bGxcclxuICAgICk7XHJcblxyXG4gICAgc2xpZGUuJGVsID0gZGl2O1xyXG5cclxuICAgIHRoaXMudHJpZ2dlcihcImNyZWF0ZVNsaWRlXCIsIHNsaWRlLCBnb2FsKTtcclxuXHJcbiAgICByZXR1cm4gc2xpZGU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZW1vdmVzIG1haW4gRE9NIGVsZW1lbnQgb2YgZ2l2ZW4gc2xpZGVcclxuICAgKiBAcGFyYW0ge09iamVjdH0gc2xpZGVcclxuICAgKi9cclxuICByZW1vdmVTbGlkZUVsKHNsaWRlKSB7XHJcbiAgICBpZiAoc2xpZGUuJGVsICYmICFzbGlkZS5pc0RvbSkge1xyXG4gICAgICB0aGlzLnRyaWdnZXIoXCJyZW1vdmVTbGlkZVwiLCBzbGlkZSk7XHJcblxyXG4gICAgICBzbGlkZS4kZWwucmVtb3ZlKCk7XHJcbiAgICAgIHNsaWRlLiRlbCA9IG51bGw7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUb2dnbGVzIHNlbGVjdGVkIGNsYXNzIG5hbWUgYW5kIGFyaWEtaGlkZGVuIGF0dHJpYnV0ZSBmb3Igc2xpZGVzIGJhc2VkIG9uIHZpc2liaWxpdHlcclxuICAgKi9cclxuICBtYXJrU2VsZWN0ZWRTbGlkZXMoKSB7XHJcbiAgICBjb25zdCBzZWxlY3RlZENsYXNzID0gdGhpcy5vcHRpb24oXCJjbGFzc05hbWVzLnNsaWRlU2VsZWN0ZWRcIik7XHJcbiAgICBjb25zdCBhdHRyID0gXCJhcmlhLWhpZGRlblwiO1xyXG5cclxuICAgIHRoaXMuc2xpZGVzLmZvckVhY2goKHNsaWRlLCBpbmRleCkgPT4ge1xyXG4gICAgICBjb25zdCAkZWwgPSBzbGlkZS4kZWw7XHJcblxyXG4gICAgICBpZiAoISRlbCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgcGFnZSA9IHRoaXMucGFnZXNbdGhpcy5wYWdlXTtcclxuXHJcbiAgICAgIGlmIChwYWdlICYmIHBhZ2UuaW5kZXhlcyAmJiBwYWdlLmluZGV4ZXMuaW5kZXhPZihpbmRleCkgPiAtMSkge1xyXG4gICAgICAgIGlmIChzZWxlY3RlZENsYXNzICYmICEkZWwuY2xhc3NMaXN0LmNvbnRhaW5zKHNlbGVjdGVkQ2xhc3MpKSB7XHJcbiAgICAgICAgICAkZWwuY2xhc3NMaXN0LmFkZChzZWxlY3RlZENsYXNzKTtcclxuICAgICAgICAgIHRoaXMudHJpZ2dlcihcInNlbGVjdFNsaWRlXCIsIHNsaWRlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICRlbC5yZW1vdmVBdHRyaWJ1dGUoYXR0cik7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKHNlbGVjdGVkQ2xhc3MgJiYgJGVsLmNsYXNzTGlzdC5jb250YWlucyhzZWxlY3RlZENsYXNzKSkge1xyXG4gICAgICAgICAgJGVsLmNsYXNzTGlzdC5yZW1vdmUoc2VsZWN0ZWRDbGFzcyk7XHJcbiAgICAgICAgICB0aGlzLnRyaWdnZXIoXCJ1bnNlbGVjdFNsaWRlXCIsIHNsaWRlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICRlbC5zZXRBdHRyaWJ1dGUoYXR0ciwgdHJ1ZSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUGVyZm9ybSBhbGwgY2FsY3VsYXRpb25zIGFuZCBjZW50ZXIgY3VycmVudCBwYWdlXHJcbiAgICovXHJcbiAgdXBkYXRlUGFnZSgpIHtcclxuICAgIHRoaXMudXBkYXRlTWV0cmljcygpO1xyXG5cclxuICAgIHRoaXMuc2xpZGVUbyh0aGlzLnBhZ2UsIHsgZnJpY3Rpb246IDAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBQcm9jZXNzIGBQYW56b29tLmJlZm9yZVRyYW5zZm9ybWAgZXZlbnQgdG8gcmVtb3ZlIHNsaWRlcyBtb3ZlZCBvdXQgb2Ygdmlld3BvcnQgYW5kXHJcbiAgICogdG8gY3JlYXRlIG5lY2Vzc2FyeSBvbmVzXHJcbiAgICovXHJcbiAgb25CZWZvcmVUcmFuc2Zvcm0oKSB7XHJcbiAgICBpZiAodGhpcy5vcHRpb24oXCJpbmZpbml0ZVhcIiwgdGhpcy5vcHRpb24oXCJpbmZpbml0ZVwiKSkpIHtcclxuICAgICAgdGhpcy5tYW5hZ2VJbmZpbml0ZVRyYWNrKCk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5tYW5hZ2VTbGlkZVZpc2libGl0eSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2VhbWxlc3NseSBmbGlwIHBvc2l0aW9uIG9mIGluZmluaXRlIGNhcm91c2VsLCBpZiBuZWVkZWQ7IHRoaXMgd2F5IHggcG9zaXRpb24gc3RheXMgbG93XHJcbiAgICovXHJcbiAgbWFuYWdlSW5maW5pdGVUcmFjaygpIHtcclxuICAgIGNvbnN0IGNvbnRlbnRXaWR0aCA9IHRoaXMuY29udGVudFdpZHRoO1xyXG4gICAgY29uc3Qgdmlld3BvcnRXaWR0aCA9IHRoaXMudmlld3BvcnRXaWR0aDtcclxuXHJcbiAgICBpZiAoIXRoaXMub3B0aW9uKFwiaW5maW5pdGVYXCIsIHRoaXMub3B0aW9uKFwiaW5maW5pdGVcIikpIHx8IHRoaXMucGFnZXMubGVuZ3RoIDwgMiB8fCBjb250ZW50V2lkdGggPCB2aWV3cG9ydFdpZHRoKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBwYW56b29tID0gdGhpcy5QYW56b29tO1xyXG5cclxuICAgIGxldCBpc0ZsaXBwZWQgPSBmYWxzZTtcclxuXHJcbiAgICBpZiAocGFuem9vbS5jb250ZW50LnggPCAoY29udGVudFdpZHRoIC0gdmlld3BvcnRXaWR0aCkgKiAtMSkge1xyXG4gICAgICBwYW56b29tLmNvbnRlbnQueCArPSBjb250ZW50V2lkdGg7XHJcblxyXG4gICAgICB0aGlzLnBhZ2VJbmRleCA9IHRoaXMucGFnZUluZGV4IC0gdGhpcy5wYWdlcy5sZW5ndGg7XHJcblxyXG4gICAgICBpc0ZsaXBwZWQgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChwYW56b29tLmNvbnRlbnQueCA+IHZpZXdwb3J0V2lkdGgpIHtcclxuICAgICAgcGFuem9vbS5jb250ZW50LnggLT0gY29udGVudFdpZHRoO1xyXG5cclxuICAgICAgdGhpcy5wYWdlSW5kZXggPSB0aGlzLnBhZ2VJbmRleCArIHRoaXMucGFnZXMubGVuZ3RoO1xyXG5cclxuICAgICAgaXNGbGlwcGVkID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoaXNGbGlwcGVkICYmIHBhbnpvb20uc3RhdGUgPT09IFwicG9pbnRlcmRvd25cIikge1xyXG4gICAgICBwYW56b29tLnJlc2V0RHJhZ1Bvc2l0aW9uKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGlzRmxpcHBlZDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFByb2Nlc3MgYFBhbnpvb20udG91Y2hFbmRgIGV2ZW50OyBzbGlkZSB0byBuZXh0L3ByZXYgcGFnZSBpZiBuZWVkZWRcclxuICAgKiBAcGFyYW0ge29iamVjdH0gcGFuem9vbVxyXG4gICAqL1xyXG4gIG9uVG91Y2hFbmQocGFuem9vbSwgZXZlbnQpIHtcclxuICAgIGNvbnN0IGRyYWdGcmVlID0gdGhpcy5vcHRpb24oXCJkcmFnRnJlZVwiKTtcclxuXHJcbiAgICAvLyBJZiB0aGlzIGlzIGEgcXVpY2sgaG9yaXpvbnRhbCBmbGljaywgc2xpZGUgdG8gbmV4dC9wcmV2IHNsaWRlXHJcbiAgICBpZiAoXHJcbiAgICAgICFkcmFnRnJlZSAmJlxyXG4gICAgICB0aGlzLnBhZ2VzLmxlbmd0aCA+IDEgJiZcclxuICAgICAgcGFuem9vbS5kcmFnT2Zmc2V0LnRpbWUgPCAzNTAgJiZcclxuICAgICAgTWF0aC5hYnMocGFuem9vbS5kcmFnT2Zmc2V0LnkpIDwgMSAmJlxyXG4gICAgICBNYXRoLmFicyhwYW56b29tLmRyYWdPZmZzZXQueCkgPiA1XHJcbiAgICApIHtcclxuICAgICAgdGhpc1twYW56b29tLmRyYWdPZmZzZXQueCA8IDAgPyBcInNsaWRlTmV4dFwiIDogXCJzbGlkZVByZXZcIl0oKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFNldCB0aGUgc2xpZGUgYXQgdGhlIGVuZCBvZiB0aGUgYW5pbWF0aW9uIGFzIHRoZSBjdXJyZW50IG9uZSxcclxuICAgIC8vIG9yIHNsaWRlIHRvIGNsb3Nlc3QgcGFnZVxyXG4gICAgaWYgKGRyYWdGcmVlKSB7XHJcbiAgICAgIGNvbnN0IFssIG5leHRQYWdlSW5kZXhdID0gdGhpcy5nZXRQYWdlRnJvbVBvc2l0aW9uKHBhbnpvb20udHJhbnNmb3JtLnggKiAtMSk7XHJcbiAgICAgIHRoaXMuc2V0UGFnZShuZXh0UGFnZUluZGV4KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuc2xpZGVUb0Nsb3Nlc3QoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNsaWRlcyB0byB0aGUgY2xvc2VzdCBwYWdlICh1c2VmdWwsIGlmIGNhcm91c2VsIGlzIGNoYW5nZWQgbWFudWFsbHkpXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtwYXJhbXNdIC0gT2JqZWN0IGNvbnRhaW5pbmcgYWRkaXRpb25hbCBvcHRpb25zXHJcbiAgICovXHJcbiAgc2xpZGVUb0Nsb3Nlc3QocGFyYW1zID0ge30pIHtcclxuICAgIGxldCBbLCBuZXh0UGFnZUluZGV4XSA9IHRoaXMuZ2V0UGFnZUZyb21Qb3NpdGlvbih0aGlzLlBhbnpvb20uY29udGVudC54ICogLTEpO1xyXG5cclxuICAgIHRoaXMuc2xpZGVUbyhuZXh0UGFnZUluZGV4LCBwYXJhbXMpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyBpbmRleCBvZiBjbG9zZXN0IHBhZ2UgdG8gZ2l2ZW4geCBwb3NpdGlvblxyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB4UG9zXHJcbiAgICovXHJcbiAgZ2V0UGFnZUZyb21Qb3NpdGlvbih4UG9zKSB7XHJcbiAgICBjb25zdCBwYWdlQ291bnQgPSB0aGlzLnBhZ2VzLmxlbmd0aDtcclxuICAgIGNvbnN0IGNlbnRlciA9IHRoaXMub3B0aW9uKFwiY2VudGVyXCIpO1xyXG5cclxuICAgIGlmIChjZW50ZXIpIHtcclxuICAgICAgeFBvcyArPSB0aGlzLnZpZXdwb3J0V2lkdGggKiAwLjU7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgaW50ZXJ2YWwgPSBNYXRoLmZsb29yKHhQb3MgLyB0aGlzLmNvbnRlbnRXaWR0aCk7XHJcblxyXG4gICAgeFBvcyAtPSBpbnRlcnZhbCAqIHRoaXMuY29udGVudFdpZHRoO1xyXG5cclxuICAgIGxldCBzbGlkZSA9IHRoaXMuc2xpZGVzLmZpbmQoKHNsaWRlKSA9PiBzbGlkZS5sZWZ0IDw9IHhQb3MgJiYgc2xpZGUubGVmdCArIHNsaWRlLndpZHRoID4geFBvcyk7XHJcblxyXG4gICAgaWYgKHNsaWRlKSB7XHJcbiAgICAgIGxldCBwYWdlSW5kZXggPSB0aGlzLmZpbmRQYWdlRm9yU2xpZGUoc2xpZGUuaW5kZXgpO1xyXG5cclxuICAgICAgcmV0dXJuIFtwYWdlSW5kZXgsIHBhZ2VJbmRleCArIGludGVydmFsICogcGFnZUNvdW50XTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gWzAsIDBdO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2hhbmdlcyBhY3RpdmUgcGFnZVxyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBwYWdlIC0gTmV3IGluZGV4IG9mIGFjdGl2ZSBwYWdlXHJcbiAgICogQHBhcmFtIHtCb29sZWFufSB0b0Nsb3Nlc3QgLSB0byBjbG9zZXN0IHBhZ2UgYmFzZWQgb24gc2Nyb2xsIGRpc3RhbmNlIChmb3IgaW5maW5pdGUgbmF2aWdhdGlvbilcclxuICAgKi9cclxuICBzZXRQYWdlKHBhZ2UsIHRvQ2xvc2VzdCkge1xyXG4gICAgbGV0IG5leHRQb3NpdGlvbiA9IDA7XHJcbiAgICBsZXQgcGFnZUluZGV4ID0gcGFyc2VJbnQocGFnZSwgMTApIHx8IDA7XHJcblxyXG4gICAgY29uc3QgcHJldlBhZ2UgPSB0aGlzLnBhZ2UsXHJcbiAgICAgIHByZXZQYWdlSW5kZXggPSB0aGlzLnBhZ2VJbmRleCxcclxuICAgICAgcGFnZUNvdW50ID0gdGhpcy5wYWdlcy5sZW5ndGg7XHJcblxyXG4gICAgY29uc3QgY29udGVudFdpZHRoID0gdGhpcy5jb250ZW50V2lkdGg7XHJcbiAgICBjb25zdCB2aWV3cG9ydFdpZHRoID0gdGhpcy52aWV3cG9ydFdpZHRoO1xyXG5cclxuICAgIHBhZ2UgPSAoKHBhZ2VJbmRleCAlIHBhZ2VDb3VudCkgKyBwYWdlQ291bnQpICUgcGFnZUNvdW50O1xyXG5cclxuICAgIGlmICh0aGlzLm9wdGlvbihcImluZmluaXRlWFwiLCB0aGlzLm9wdGlvbihcImluZmluaXRlXCIpKSAmJiBjb250ZW50V2lkdGggPiB2aWV3cG9ydFdpZHRoKSB7XHJcbiAgICAgIGNvbnN0IG5leHRJbnRlcnZhbCA9IE1hdGguZmxvb3IocGFnZUluZGV4IC8gcGFnZUNvdW50KSB8fCAwLFxyXG4gICAgICAgIGVsZW1EaW1XaWR0aCA9IGNvbnRlbnRXaWR0aDtcclxuXHJcbiAgICAgIG5leHRQb3NpdGlvbiA9IHRoaXMucGFnZXNbcGFnZV0ubGVmdCArIG5leHRJbnRlcnZhbCAqIGVsZW1EaW1XaWR0aDtcclxuXHJcbiAgICAgIGlmICh0b0Nsb3Nlc3QgPT09IHRydWUgJiYgcGFnZUNvdW50ID4gMikge1xyXG4gICAgICAgIGxldCBjdXJyUG9zaXRpb24gPSB0aGlzLlBhbnpvb20uY29udGVudC54ICogLTE7XHJcblxyXG4gICAgICAgIC8vICogRmluZCBjbG9zZXN0IGludGVydmFsXHJcbiAgICAgICAgY29uc3QgZGVjcmVhc2VkUG9zaXRpb24gPSBuZXh0UG9zaXRpb24gLSBlbGVtRGltV2lkdGgsXHJcbiAgICAgICAgICBpbmNyZWFzZWRQb3NpdGlvbiA9IG5leHRQb3NpdGlvbiArIGVsZW1EaW1XaWR0aCxcclxuICAgICAgICAgIGRpZmYxID0gTWF0aC5hYnMoY3VyclBvc2l0aW9uIC0gbmV4dFBvc2l0aW9uKSxcclxuICAgICAgICAgIGRpZmYyID0gTWF0aC5hYnMoY3VyclBvc2l0aW9uIC0gZGVjcmVhc2VkUG9zaXRpb24pLFxyXG4gICAgICAgICAgZGlmZjMgPSBNYXRoLmFicyhjdXJyUG9zaXRpb24gLSBpbmNyZWFzZWRQb3NpdGlvbik7XHJcblxyXG4gICAgICAgIGlmIChkaWZmMyA8IGRpZmYxICYmIGRpZmYzIDw9IGRpZmYyKSB7XHJcbiAgICAgICAgICBuZXh0UG9zaXRpb24gPSBpbmNyZWFzZWRQb3NpdGlvbjtcclxuICAgICAgICAgIHBhZ2VJbmRleCArPSBwYWdlQ291bnQ7XHJcbiAgICAgICAgfSBlbHNlIGlmIChkaWZmMiA8IGRpZmYxICYmIGRpZmYyIDwgZGlmZjMpIHtcclxuICAgICAgICAgIG5leHRQb3NpdGlvbiA9IGRlY3JlYXNlZFBvc2l0aW9uO1xyXG4gICAgICAgICAgcGFnZUluZGV4IC09IHBhZ2VDb3VudDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHBhZ2UgPSBwYWdlSW5kZXggPSBNYXRoLm1heCgwLCBNYXRoLm1pbihwYWdlSW5kZXgsIHBhZ2VDb3VudCAtIDEpKTtcclxuXHJcbiAgICAgIG5leHRQb3NpdGlvbiA9IHRoaXMucGFnZXMubGVuZ3RoID8gdGhpcy5wYWdlc1twYWdlXS5sZWZ0IDogMDtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnBhZ2UgPSBwYWdlO1xyXG4gICAgdGhpcy5wYWdlSW5kZXggPSBwYWdlSW5kZXg7XHJcblxyXG4gICAgaWYgKHByZXZQYWdlICE9PSBudWxsICYmIHBhZ2UgIT09IHByZXZQYWdlKSB7XHJcbiAgICAgIHRoaXMucHJldlBhZ2UgPSBwcmV2UGFnZTtcclxuICAgICAgdGhpcy5wcmV2UGFnZUluZGV4ID0gcHJldlBhZ2VJbmRleDtcclxuXHJcbiAgICAgIHRoaXMudHJpZ2dlcihcImNoYW5nZVwiLCBwYWdlLCBwcmV2UGFnZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG5leHRQb3NpdGlvbjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENsZWFuIHVwXHJcbiAgICovXHJcbiAgZGVzdHJveSgpIHtcclxuICAgIHRoaXMuc3RhdGUgPSBcImRlc3Ryb3lcIjtcclxuXHJcbiAgICB0aGlzLnNsaWRlcy5mb3JFYWNoKChzbGlkZSkgPT4ge1xyXG4gICAgICB0aGlzLnJlbW92ZVNsaWRlRWwoc2xpZGUpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5zbGlkZXMgPSBbXTtcclxuXHJcbiAgICB0aGlzLlBhbnpvb20uZGVzdHJveSgpO1xyXG5cclxuICAgIHRoaXMuZGV0YWNoUGx1Z2lucygpO1xyXG4gIH1cclxufVxyXG5cclxuLy8gRXhwb3NlIHZlcnNpb25cclxuQ2Fyb3VzZWwudmVyc2lvbiA9IFwiX19WRVJTSU9OX19cIjtcclxuXHJcbi8vIFN0YXRpYyBwcm9wZXJ0aWVzIGFyZSBhIHJlY2VudCBhZGRpdGlvbiB0aGF0IGRvbnQgd29yayBpbiBhbGwgYnJvd3NlcnMgeWV0XHJcbkNhcm91c2VsLlBsdWdpbnMgPSBQbHVnaW5zO1xyXG4iLCJleHBvcnQgZGVmYXVsdCB7XHJcbiAgTkVYVDogXCJOZXh0IHNsaWRlXCIsXHJcbiAgUFJFVjogXCJQcmV2aW91cyBzbGlkZVwiLFxyXG4gIEdPVE86IFwiR28gdG8gc2xpZGUgIyVkXCIsXHJcbn07XHJcbiIsImNvbnN0IGRlZmF1bHRzID0ge1xuICAvLyBUaGUgbWluaW11bSBudW1iZXIgb2Ygc2xpZGVzIHRvIGRpc3BsYXkgZG90c1xuICBtaW5TbGlkZUNvdW50OiAyLFxufTtcblxuZXhwb3J0IGNsYXNzIERvdHMge1xuICBjb25zdHJ1Y3RvcihjYXJvdXNlbCkge1xuICAgIHRoaXMuY2Fyb3VzZWwgPSBjYXJvdXNlbDtcblxuICAgIHRoaXMuJGxpc3QgPSBudWxsO1xuXG4gICAgdGhpcy5ldmVudHMgPSB7XG4gICAgICBjaGFuZ2U6IHRoaXMub25DaGFuZ2UuYmluZCh0aGlzKSxcbiAgICAgIHJlZnJlc2g6IHRoaXMub25SZWZyZXNoLmJpbmQodGhpcyksXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBCdWlsZCB3cmFwcGluZyBET00gZWxlbWVudCBjb250YWluaW5nIGFsbCBkb3RzXG4gICAqL1xuICBidWlsZExpc3QoKSB7XG4gICAgaWYgKHRoaXMuY2Fyb3VzZWwucGFnZXMubGVuZ3RoIDwgdGhpcy5jYXJvdXNlbC5vcHRpb24oXCJEb3RzLm1pblNsaWRlQ291bnRcIikpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCAkbGlzdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvbFwiKTtcblxuICAgICRsaXN0LmNsYXNzTGlzdC5hZGQoXCJjYXJvdXNlbF9fZG90c1wiKTtcblxuICAgICRsaXN0LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuICAgICAgaWYgKCEoXCJwYWdlXCIgaW4gZS50YXJnZXQuZGF0YXNldCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICBjb25zdCBwYWdlID0gcGFyc2VJbnQoZS50YXJnZXQuZGF0YXNldC5wYWdlLCAxMCk7XG4gICAgICBjb25zdCBjYXJvdXNlbCA9IHRoaXMuY2Fyb3VzZWw7XG5cbiAgICAgIGlmIChwYWdlID09PSBjYXJvdXNlbC5wYWdlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGNhcm91c2VsLnBhZ2VzLmxlbmd0aCA8IDMgJiYgY2Fyb3VzZWwub3B0aW9uKFwiaW5maW5pdGVcIikpIHtcbiAgICAgICAgY2Fyb3VzZWxbcGFnZSA9PSAwID8gXCJzbGlkZVByZXZcIiA6IFwic2xpZGVOZXh0XCJdKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYXJvdXNlbC5zbGlkZVRvKHBhZ2UpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdGhpcy4kbGlzdCA9ICRsaXN0O1xuXG4gICAgdGhpcy5jYXJvdXNlbC4kY29udGFpbmVyLmFwcGVuZENoaWxkKCRsaXN0KTtcbiAgICB0aGlzLmNhcm91c2VsLiRjb250YWluZXIuY2xhc3NMaXN0LmFkZChcImhhcy1kb3RzXCIpO1xuXG4gICAgcmV0dXJuICRsaXN0O1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSB3cmFwcGluZyBET00gZWxlbWVudFxuICAgKi9cbiAgcmVtb3ZlTGlzdCgpIHtcbiAgICBpZiAodGhpcy4kbGlzdCkge1xuICAgICAgdGhpcy4kbGlzdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuJGxpc3QpO1xuICAgICAgdGhpcy4kbGlzdCA9IG51bGw7XG4gICAgfVxuXG4gICAgdGhpcy5jYXJvdXNlbC4kY29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoXCJoYXMtZG90c1wiKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgZXhpc3RpbmcgZG90cyBhbmQgY3JlYXRlIGZyZXNoIG9uZXNcbiAgICovXG4gIHJlYnVpbGREb3RzKCkge1xuICAgIGxldCAkbGlzdCA9IHRoaXMuJGxpc3Q7XG5cbiAgICBjb25zdCBsaXN0RXhpc3RzID0gISEkbGlzdDtcbiAgICBjb25zdCBwYWdlc0NvdW50ID0gdGhpcy5jYXJvdXNlbC5wYWdlcy5sZW5ndGg7XG5cbiAgICBpZiAocGFnZXNDb3VudCA8IDIpIHtcbiAgICAgIGlmIChsaXN0RXhpc3RzKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlTGlzdCgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFsaXN0RXhpc3RzKSB7XG4gICAgICAkbGlzdCA9IHRoaXMuYnVpbGRMaXN0KCk7XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIGV4aXN0aW5nIGRvdHNcbiAgICBjb25zdCBkb3RDb3VudCA9IHRoaXMuJGxpc3QuY2hpbGRyZW4ubGVuZ3RoO1xuXG4gICAgaWYgKGRvdENvdW50ID4gcGFnZXNDb3VudCkge1xuICAgICAgZm9yIChsZXQgaSA9IHBhZ2VzQ291bnQ7IGkgPCBkb3RDb3VudDsgaSsrKSB7XG4gICAgICAgIHRoaXMuJGxpc3QucmVtb3ZlQ2hpbGQodGhpcy4kbGlzdC5sYXN0Q2hpbGQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gQ3JlYXRlIGZyZXNoIERPTSBlbGVtZW50cyAoZG90cykgZm9yIGVhY2ggcGFnZVxuICAgIGZvciAobGV0IGluZGV4ID0gZG90Q291bnQ7IGluZGV4IDwgcGFnZXNDb3VudDsgaW5kZXgrKykge1xuICAgICAgY29uc3QgJGRvdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaVwiKTtcblxuICAgICAgJGRvdC5jbGFzc0xpc3QuYWRkKFwiY2Fyb3VzZWxfX2RvdFwiKTtcbiAgICAgICRkb3QuZGF0YXNldC5wYWdlID0gaW5kZXg7XG5cbiAgICAgICRkb3Quc2V0QXR0cmlidXRlKFwicm9sZVwiLCBcImJ1dHRvblwiKTtcbiAgICAgICRkb3Quc2V0QXR0cmlidXRlKFwidGFiaW5kZXhcIiwgXCIwXCIpO1xuICAgICAgJGRvdC5zZXRBdHRyaWJ1dGUoXCJ0aXRsZVwiLCB0aGlzLmNhcm91c2VsLmxvY2FsaXplKFwie3tHT1RPfX1cIiwgW1tcIiVkXCIsIGluZGV4ICsgMV1dKSk7XG5cbiAgICAgICRkb3QuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IGNvZGUgPSBldmVudC5jb2RlO1xuXG4gICAgICAgIGxldCAkZWw7XG5cbiAgICAgICAgaWYgKGNvZGUgPT09IFwiRW50ZXJcIiB8fCBjb2RlID09PSBcIk51bXBhZEVudGVyXCIpIHtcbiAgICAgICAgICAkZWwgPSAkZG90O1xuICAgICAgICB9IGVsc2UgaWYgKGNvZGUgPT09IFwiQXJyb3dSaWdodFwiKSB7XG4gICAgICAgICAgJGVsID0gJGRvdC5uZXh0U2libGluZztcbiAgICAgICAgfSBlbHNlIGlmIChjb2RlID09PSBcIkFycm93TGVmdFwiKSB7XG4gICAgICAgICAgJGVsID0gJGRvdC5wcmV2aW91c1NpYmxpbmc7XG4gICAgICAgIH1cblxuICAgICAgICAkZWwgJiYgJGVsLmNsaWNrKCk7XG4gICAgICB9KTtcblxuICAgICAgdGhpcy4kbGlzdC5hcHBlbmRDaGlsZCgkZG90KTtcbiAgICB9XG5cbiAgICB0aGlzLnNldEFjdGl2ZURvdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIE1hcmsgYWN0aXZlIGRvdCBieSB0b2dnbGluZyBjbGFzcyBuYW1lXG4gICAqL1xuICBzZXRBY3RpdmVEb3QoKSB7XG4gICAgaWYgKCF0aGlzLiRsaXN0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy4kbGlzdC5jaGlsZE5vZGVzLmZvckVhY2goKCRkb3QpID0+IHtcbiAgICAgICRkb3QuY2xhc3NMaXN0LnJlbW92ZShcImlzLXNlbGVjdGVkXCIpO1xuICAgIH0pO1xuXG4gICAgY29uc3QgJGFjdGl2ZURvdCA9IHRoaXMuJGxpc3QuY2hpbGROb2Rlc1t0aGlzLmNhcm91c2VsLnBhZ2VdO1xuXG4gICAgaWYgKCRhY3RpdmVEb3QpIHtcbiAgICAgICRhY3RpdmVEb3QuY2xhc3NMaXN0LmFkZChcImlzLXNlbGVjdGVkXCIpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBQcm9jZXNzIGNhcm91c2VsIGBjaGFuZ2VgIGV2ZW50XG4gICAqL1xuICBvbkNoYW5nZSgpIHtcbiAgICB0aGlzLnNldEFjdGl2ZURvdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFByb2Nlc3MgY2Fyb3VzZWwgYHJlZnJlc2hgIGV2ZW50XG4gICAqL1xuICBvblJlZnJlc2goKSB7XG4gICAgdGhpcy5yZWJ1aWxkRG90cygpO1xuICB9XG5cbiAgYXR0YWNoKCkge1xuICAgIHRoaXMuY2Fyb3VzZWwub24odGhpcy5ldmVudHMpO1xuICB9XG5cbiAgZGV0YWNoKCkge1xuICAgIHRoaXMucmVtb3ZlTGlzdCgpO1xuXG4gICAgdGhpcy5jYXJvdXNlbC5vZmYodGhpcy5ldmVudHMpO1xuICAgIHRoaXMuY2Fyb3VzZWwgPSBudWxsO1xuICB9XG59XG4iLCJjb25zdCBkZWZhdWx0cyA9IHtcbiAgcHJldlRwbDogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiB0YWJpbmRleD1cIi0xXCI+PHBhdGggZD1cIk0xNSAzbC05IDkgOSA5XCIvPjwvc3ZnPicsXG4gIG5leHRUcGw6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCIgdGFiaW5kZXg9XCItMVwiPjxwYXRoIGQ9XCJNOSAzbDkgOS05IDlcIi8+PC9zdmc+JyxcblxuICBjbGFzc05hbWVzOiB7XG4gICAgbWFpbjogXCJjYXJvdXNlbF9fbmF2XCIsXG4gICAgYnV0dG9uOiBcImNhcm91c2VsX19idXR0b25cIixcblxuICAgIG5leHQ6IFwiaXMtbmV4dFwiLFxuICAgIHByZXY6IFwiaXMtcHJldlwiLFxuICB9LFxufTtcblxuZXhwb3J0IGNsYXNzIE5hdmlnYXRpb24ge1xuICBjb25zdHJ1Y3RvcihjYXJvdXNlbCkge1xuICAgIHRoaXMuJGNvbnRhaW5lciA9IG51bGw7XG5cbiAgICB0aGlzLiRwcmV2ID0gbnVsbDtcbiAgICB0aGlzLiRuZXh0ID0gbnVsbDtcblxuICAgIHRoaXMuY2Fyb3VzZWwgPSBjYXJvdXNlbDtcblxuICAgIHRoaXMub25SZWZyZXNoID0gdGhpcy5vblJlZnJlc2guYmluZCh0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTaG9ydGN1dCB0byBnZXQgb3B0aW9uIGZvciB0aGlzIHBsdWdpblxuICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZSBvcHRpb24gbmFtZVxuICAgKiBAcmV0dXJucyBvcHRpb24gdmFsdWVcbiAgICovXG4gIG9wdGlvbihuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuY2Fyb3VzZWwub3B0aW9uKGBOYXZpZ2F0aW9uLiR7bmFtZX1gKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuZCByZXR1cm5zIG5ldyBidXR0b24gZWxlbWVudCB3aXRoIGRlZmF1bHQgY2xhc3MgbmFtZXMgYW5kIGNsaWNrIGV2ZW50XG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gICAqL1xuICBjcmVhdGVCdXR0b24odHlwZSkge1xuICAgIGNvbnN0ICRidG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuXG4gICAgJGJ0bi5zZXRBdHRyaWJ1dGUoXCJ0aXRsZVwiLCB0aGlzLmNhcm91c2VsLmxvY2FsaXplKGB7eyR7dHlwZS50b1VwcGVyQ2FzZSgpfX19YCkpO1xuXG4gICAgY29uc3QgY2xhc3NOYW1lcyA9IHRoaXMub3B0aW9uKFwiY2xhc3NOYW1lcy5idXR0b25cIikgKyBcIiBcIiArIHRoaXMub3B0aW9uKGBjbGFzc05hbWVzLiR7dHlwZX1gKTtcblxuICAgICRidG4uY2xhc3NMaXN0LmFkZCguLi5jbGFzc05hbWVzLnNwbGl0KFwiIFwiKSk7XG4gICAgJGJ0bi5zZXRBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiLCBcIjBcIik7XG4gICAgJGJ0bi5pbm5lckhUTUwgPSB0aGlzLmNhcm91c2VsLmxvY2FsaXplKHRoaXMub3B0aW9uKGAke3R5cGV9VHBsYCkpO1xuXG4gICAgJGJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2ZW50KSA9PiB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgIHRoaXMuY2Fyb3VzZWxbYHNsaWRlJHt0eXBlID09PSBcIm5leHRcIiA/IFwiTmV4dFwiIDogXCJQcmV2XCJ9YF0oKTtcbiAgICB9KTtcblxuICAgIHJldHVybiAkYnRuO1xuICB9XG5cbiAgLyoqXG4gICAqIEJ1aWxkIG5lY2Vzc2FyeSBET00gZWxlbWVudHNcbiAgICovXG4gIGJ1aWxkKCkge1xuICAgIGlmICghdGhpcy4kY29udGFpbmVyKSB7XG4gICAgICB0aGlzLiRjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgdGhpcy4kY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoLi4udGhpcy5vcHRpb24oXCJjbGFzc05hbWVzLm1haW5cIikuc3BsaXQoXCIgXCIpKTtcblxuICAgICAgdGhpcy5jYXJvdXNlbC4kY29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuJGNvbnRhaW5lcik7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLiRuZXh0KSB7XG4gICAgICB0aGlzLiRuZXh0ID0gdGhpcy5jcmVhdGVCdXR0b24oXCJuZXh0XCIpO1xuXG4gICAgICB0aGlzLiRjb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy4kbmV4dCk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLiRwcmV2KSB7XG4gICAgICB0aGlzLiRwcmV2ID0gdGhpcy5jcmVhdGVCdXR0b24oXCJwcmV2XCIpO1xuXG4gICAgICB0aGlzLiRjb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy4kcHJldik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqICBQcm9jZXNzIGNhcm91c2VsIGByZWZyZXNoYCBhbmQgYGNoYW5nZWAgZXZlbnRzIHRvIGVuYWJsZS9kaXNhYmxlIGJ1dHRvbnMgaWYgbmVlZGVkXG4gICAqL1xuICBvblJlZnJlc2goKSB7XG4gICAgY29uc3QgcGFnZUNvdW50ID0gdGhpcy5jYXJvdXNlbC5wYWdlcy5sZW5ndGg7XG5cbiAgICBpZiAoXG4gICAgICBwYWdlQ291bnQgPD0gMSB8fFxuICAgICAgKHBhZ2VDb3VudCA+IDEgJiZcbiAgICAgICAgdGhpcy5jYXJvdXNlbC5lbGVtRGltV2lkdGggPCB0aGlzLmNhcm91c2VsLndyYXBEaW1XaWR0aCAmJlxuICAgICAgICAhTnVtYmVyLmlzSW50ZWdlcih0aGlzLmNhcm91c2VsLm9wdGlvbihcInNsaWRlc1BlclBhZ2VcIikpKVxuICAgICkge1xuICAgICAgdGhpcy5jbGVhbnVwKCk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmJ1aWxkKCk7XG5cbiAgICB0aGlzLiRwcmV2LnJlbW92ZUF0dHJpYnV0ZShcImRpc2FibGVkXCIpO1xuICAgIHRoaXMuJG5leHQucmVtb3ZlQXR0cmlidXRlKFwiZGlzYWJsZWRcIik7XG5cbiAgICBpZiAodGhpcy5jYXJvdXNlbC5vcHRpb24oXCJpbmZpbml0ZVhcIiwgdGhpcy5jYXJvdXNlbC5vcHRpb24oXCJpbmZpbml0ZVwiKSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5jYXJvdXNlbC5wYWdlIDw9IDApIHtcbiAgICAgIHRoaXMuJHByZXYuc2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIiwgXCJcIik7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuY2Fyb3VzZWwucGFnZSA+PSBwYWdlQ291bnQgLSAxKSB7XG4gICAgICB0aGlzLiRuZXh0LnNldEF0dHJpYnV0ZShcImRpc2FibGVkXCIsIFwiXCIpO1xuICAgIH1cbiAgfVxuXG4gIGNsZWFudXAoKSB7XG4gICAgaWYgKHRoaXMuJHByZXYpIHtcbiAgICAgIHRoaXMuJHByZXYucmVtb3ZlKCk7XG4gICAgfVxuXG4gICAgdGhpcy4kcHJldiA9IG51bGw7XG5cbiAgICBpZiAodGhpcy4kbmV4dCkge1xuICAgICAgdGhpcy4kbmV4dC5yZW1vdmUoKTtcbiAgICB9XG5cbiAgICB0aGlzLiRuZXh0ID0gbnVsbDtcblxuICAgIGlmICh0aGlzLiRjb250YWluZXIpIHtcbiAgICAgIHRoaXMuJGNvbnRhaW5lci5yZW1vdmUoKTtcbiAgICB9XG5cbiAgICB0aGlzLiRjb250YWluZXIgPSBudWxsO1xuICB9XG5cbiAgYXR0YWNoKCkge1xuICAgIHRoaXMuY2Fyb3VzZWwub24oXCJyZWZyZXNoIGNoYW5nZVwiLCB0aGlzLm9uUmVmcmVzaCk7XG4gIH1cblxuICBkZXRhY2goKSB7XG4gICAgdGhpcy5jYXJvdXNlbC5vZmYoXCJyZWZyZXNoIGNoYW5nZVwiLCB0aGlzLm9uUmVmcmVzaCk7XG5cbiAgICB0aGlzLmNsZWFudXAoKTtcbiAgfVxufVxuXG4vLyBFeHBvc2UgZGVmYXVsdHNcbk5hdmlnYXRpb24uZGVmYXVsdHMgPSBkZWZhdWx0cztcbiIsImNvbnN0IGRlZmF1bHRzID0ge1xuICBmcmljdGlvbjogMC45Mixcbn07XG5cbmV4cG9ydCBjbGFzcyBTeW5jIHtcbiAgY29uc3RydWN0b3IoY2Fyb3VzZWwpIHtcbiAgICB0aGlzLmNhcm91c2VsID0gY2Fyb3VzZWw7XG5cbiAgICB0aGlzLnNlbGVjdGVkSW5kZXggPSBudWxsO1xuICAgIHRoaXMuZnJpY3Rpb24gPSAwO1xuXG4gICAgdGhpcy5vbk5hdlJlYWR5ID0gdGhpcy5vbk5hdlJlYWR5LmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbk5hdkNsaWNrID0gdGhpcy5vbk5hdkNsaWNrLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbk5hdkNyZWF0ZVNsaWRlID0gdGhpcy5vbk5hdkNyZWF0ZVNsaWRlLmJpbmQodGhpcyk7XG5cbiAgICB0aGlzLm9uVGFyZ2V0Q2hhbmdlID0gdGhpcy5vblRhcmdldENoYW5nZS5iaW5kKHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIE1ha2UgdGhpcyBvbmUgYXMgbWFpbiBjYXJvdXNlbCBhbmQgc2VsZWN0ZWQgY2Fyb3VzZWwgYXMgbmF2aWdhdGlvblxuICAgKiBAcGFyYW0ge09iamVjdH0gbmF2IENhcm91c2VsXG4gICAqL1xuICBhZGRBc1RhcmdldEZvcihuYXYpIHtcbiAgICB0aGlzLnRhcmdldCA9IHRoaXMuY2Fyb3VzZWw7XG4gICAgdGhpcy5uYXYgPSBuYXY7XG5cbiAgICB0aGlzLmF0dGFjaEV2ZW50cygpO1xuICB9XG5cbiAgLyoqXG4gICAqIE1ha2UgdGhpcyBvbmUgYXMgbmF2aWdhdGlvbiBjYXJvdXNlbCBmb3Igc2VsZWN0ZWQgY2Fyb3VzZWxcbiAgICogQHBhcmFtIHtPYmplY3R9IHRhcmdldFxuICAgKi9cbiAgYWRkQXNOYXZGb3IodGFyZ2V0KSB7XG4gICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gICAgdGhpcy5uYXYgPSB0aGlzLmNhcm91c2VsO1xuXG4gICAgdGhpcy5hdHRhY2hFdmVudHMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBdHRhY2ggZXZlbnQgbGlzdGVuZXJzIG9uIGJvdGggY2Fyb3VzZWxzXG4gICAqL1xuICBhdHRhY2hFdmVudHMoKSB7XG4gICAgdGhpcy5uYXYub3B0aW9ucy5pbml0aWFsU2xpZGUgPSB0aGlzLnRhcmdldC5vcHRpb25zLmluaXRpYWxQYWdlO1xuXG4gICAgdGhpcy5uYXYub24oXCJyZWFkeVwiLCB0aGlzLm9uTmF2UmVhZHkpO1xuICAgIHRoaXMubmF2Lm9uKFwiY3JlYXRlU2xpZGVcIiwgdGhpcy5vbk5hdkNyZWF0ZVNsaWRlKTtcbiAgICB0aGlzLm5hdi5vbihcIlBhbnpvb20uY2xpY2tcIiwgdGhpcy5vbk5hdkNsaWNrKTtcblxuICAgIHRoaXMudGFyZ2V0Lm9uKFwiY2hhbmdlXCIsIHRoaXMub25UYXJnZXRDaGFuZ2UpO1xuICAgIHRoaXMudGFyZ2V0Lm9uKFwiUGFuem9vbS5hZnRlclVwZGF0ZVwiLCB0aGlzLm9uVGFyZ2V0Q2hhbmdlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcm9jZXNzIG1haW4gY2Fyb3VzZWwgYHJlYWR5YCBldmVudDsgYmluZCBldmVudHMgYW5kIHNldCBpbml0aWFsIHBhZ2VcbiAgICovXG4gIG9uTmF2UmVhZHkoKSB7XG4gICAgdGhpcy5vblRhcmdldENoYW5nZSh0cnVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcm9jZXNzIG1haW4gY2Fyb3VzZWwgYGNsaWNrYCBldmVudFxuICAgKiBAcGFyYW0ge09iamVjdH0gcGFuem9vbVxuICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnRcbiAgICovXG4gIG9uTmF2Q2xpY2soY2Fyb3VzZWwsIHBhbnpvb20sIGV2ZW50KSB7XG4gICAgY29uc3QgY2xpY2tlZE5hdlNsaWRlID0gZXZlbnQudGFyZ2V0LmNsb3Nlc3QoXCIuY2Fyb3VzZWxfX3NsaWRlXCIpO1xuXG4gICAgaWYgKCFjbGlja2VkTmF2U2xpZGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgIGNvbnN0IHNlbGVjdGVkTmF2SW5kZXggPSBwYXJzZUludChjbGlja2VkTmF2U2xpZGUuZGF0YXNldC5pbmRleCwgMTApO1xuICAgIGNvbnN0IHNlbGVjdGVkU3luY1BhZ2UgPSB0aGlzLnRhcmdldC5maW5kUGFnZUZvclNsaWRlKHNlbGVjdGVkTmF2SW5kZXgpO1xuXG4gICAgaWYgKHRoaXMudGFyZ2V0LnBhZ2UgIT09IHNlbGVjdGVkU3luY1BhZ2UpIHtcbiAgICAgIHRoaXMudGFyZ2V0LnNsaWRlVG8oc2VsZWN0ZWRTeW5jUGFnZSwgeyBmcmljdGlvbjogdGhpcy5mcmljdGlvbiB9KTtcbiAgICB9XG5cbiAgICB0aGlzLm1hcmtTZWxlY3RlZFNsaWRlKHNlbGVjdGVkTmF2SW5kZXgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFByb2Nlc3MgbWFpbiBjYXJvdXNlbCBgY3JlYXRlU2xpZGVgIGV2ZW50XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjYXJvdXNlbFxuICAgKiBAcGFyYW0ge09iamVjdH0gc2xpZGVcbiAgICovXG4gIG9uTmF2Q3JlYXRlU2xpZGUoY2Fyb3VzZWwsIHNsaWRlKSB7XG4gICAgaWYgKHNsaWRlLmluZGV4ID09PSB0aGlzLnNlbGVjdGVkSW5kZXgpIHtcbiAgICAgIHRoaXMubWFya1NlbGVjdGVkU2xpZGUoc2xpZGUuaW5kZXgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBQcm9jZXNzIHRhcmdldCBjYXJvdXNlbCBgY2hhbmdlYCBldmVudFxuICAgKiBAcGFyYW0ge09iamVjdH0gdGFyZ2V0XG4gICAqL1xuICBvblRhcmdldENoYW5nZSgpIHtcbiAgICBjb25zdCB0YXJnZXRJbmRleCA9IHRoaXMudGFyZ2V0LnBhZ2VzW3RoaXMudGFyZ2V0LnBhZ2VdLmluZGV4ZXNbMF07XG4gICAgY29uc3Qgc2VsZWN0ZWROYXZQYWdlID0gdGhpcy5uYXYuZmluZFBhZ2VGb3JTbGlkZSh0YXJnZXRJbmRleCk7XG5cbiAgICB0aGlzLm5hdi5zbGlkZVRvKHNlbGVjdGVkTmF2UGFnZSk7XG5cbiAgICB0aGlzLm1hcmtTZWxlY3RlZFNsaWRlKHRhcmdldEluZGV4KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUb2dnbGUgY2xhc3NuYW1lIGZvciBzbGlkZXMgdGhhdCBtYXJrcyBjdXJyZW50bHkgc2VsZWN0ZWQgc2xpZGVzXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBzZWxlY3RlZEluZGV4XG4gICAqL1xuICBtYXJrU2VsZWN0ZWRTbGlkZShzZWxlY3RlZEluZGV4KSB7XG4gICAgdGhpcy5zZWxlY3RlZEluZGV4ID0gc2VsZWN0ZWRJbmRleDtcblxuICAgIFsuLi50aGlzLm5hdi5zbGlkZXNdLmZpbHRlcigoc2xpZGUpID0+IHNsaWRlLiRlbCAmJiBzbGlkZS4kZWwuY2xhc3NMaXN0LnJlbW92ZShcImlzLW5hdi1zZWxlY3RlZFwiKSk7XG5cbiAgICBjb25zdCBzbGlkZSA9IHRoaXMubmF2LnNsaWRlc1tzZWxlY3RlZEluZGV4XTtcblxuICAgIGlmIChzbGlkZSAmJiBzbGlkZS4kZWwpIHNsaWRlLiRlbC5jbGFzc0xpc3QuYWRkKFwiaXMtbmF2LXNlbGVjdGVkXCIpO1xuICB9XG5cbiAgYXR0YWNoKGNhcm91c2VsKSB7XG4gICAgY29uc3Qgc3luYyA9IGNhcm91c2VsLm9wdGlvbnMuU3luYztcblxuICAgIGlmICghc3luYy50YXJnZXQgJiYgIXN5bmMubmF2KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHN5bmMudGFyZ2V0KSB7XG4gICAgICB0aGlzLmFkZEFzTmF2Rm9yKHN5bmMudGFyZ2V0KTtcbiAgICB9IGVsc2UgaWYgKHN5bmMubmF2KSB7XG4gICAgICB0aGlzLmFkZEFzVGFyZ2V0Rm9yKHN5bmMubmF2KTtcbiAgICB9XG5cbiAgICB0aGlzLmZyaWN0aW9uID0gc3luYy5mcmljdGlvbjtcbiAgfVxuXG4gIGRldGFjaCgpIHtcbiAgICBpZiAodGhpcy5uYXYpIHtcbiAgICAgIHRoaXMubmF2Lm9mZihcInJlYWR5XCIsIHRoaXMub25OYXZSZWFkeSk7XG4gICAgICB0aGlzLm5hdi5vZmYoXCJQYW56b29tLmNsaWNrXCIsIHRoaXMub25OYXZDbGljayk7XG4gICAgICB0aGlzLm5hdi5vZmYoXCJjcmVhdGVTbGlkZVwiLCB0aGlzLm9uTmF2Q3JlYXRlU2xpZGUpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnRhcmdldCkge1xuICAgICAgdGhpcy50YXJnZXQub2ZmKFwiUGFuem9vbS5hZnRlclVwZGF0ZVwiLCB0aGlzLm9uVGFyZ2V0Q2hhbmdlKTtcbiAgICAgIHRoaXMudGFyZ2V0Lm9mZihcImNoYW5nZVwiLCB0aGlzLm9uVGFyZ2V0Q2hhbmdlKTtcbiAgICB9XG4gIH1cbn1cblxuLy8gRXhwb3NlIGRlZmF1bHRzXG5TeW5jLmRlZmF1bHRzID0gZGVmYXVsdHM7XG4iLCJpbXBvcnQgeyBOYXZpZ2F0aW9uIH0gZnJvbSBcIi4vTmF2aWdhdGlvbi9OYXZpZ2F0aW9uLmpzXCI7XG5pbXBvcnQgeyBEb3RzIH0gZnJvbSBcIi4vRG90cy9Eb3RzLmpzXCI7XG5pbXBvcnQgeyBTeW5jIH0gZnJvbSBcIi4vU3luYy9TeW5jLmpzXCI7XG5cbmV4cG9ydCBjb25zdCBQbHVnaW5zID0geyBOYXZpZ2F0aW9uLCBEb3RzLCBTeW5jIH07XG4iLCJpbXBvcnQgeyBleHRlbmQgfSBmcm9tIFwiLi4vc2hhcmVkL3V0aWxzL2V4dGVuZC5qc1wiO1xuaW1wb3J0IHsgY2FuVXNlRE9NIH0gZnJvbSBcIi4uL3NoYXJlZC91dGlscy9jYW5Vc2VET00uanNcIjtcbmltcG9ydCB7IEZPQ1VTQUJMRV9FTEVNRU5UUywgc2V0Rm9jdXNPbiB9IGZyb20gXCIuLi9zaGFyZWQvdXRpbHMvc2V0Rm9jdXNPbi5qc1wiO1xuXG5pbXBvcnQgeyBCYXNlIH0gZnJvbSBcIi4uL3NoYXJlZC9CYXNlL0Jhc2UuanNcIjtcblxuaW1wb3J0IHsgQ2Fyb3VzZWwgfSBmcm9tIFwiLi4vQ2Fyb3VzZWwvQ2Fyb3VzZWwuanNcIjtcblxuaW1wb3J0IHsgUGx1Z2lucyB9IGZyb20gXCIuL3BsdWdpbnMvaW5kZXguanNcIjtcblxuLy8gRGVmYXVsdCBsYW5ndWFnZVxuaW1wb3J0IGVuIGZyb20gXCIuL2wxMG4vZW4uanNcIjtcblxuLy8gRGVmYXVsdCBzZXR0aW5nc1xuY29uc3QgZGVmYXVsdHMgPSB7XG4gIC8vIEluZGV4IG9mIGFjdGl2ZSBzbGlkZSBvbiB0aGUgc3RhcnRcbiAgc3RhcnRJbmRleDogMCxcblxuICAvLyBOdW1iZXIgb2Ygc2xpZGVzIHRvIHByZWxvYWQgYmVmb3JlIGFuZCBhZnRlciBhY3RpdmUgc2xpZGVcbiAgcHJlbG9hZDogMSxcblxuICAvLyBTaG91bGQgbmF2aWdhdGlvbiBiZSBpbmZpbml0ZVxuICBpbmZpbml0ZTogdHJ1ZSxcblxuICAvLyBDbGFzcyBuYW1lIHRvIGJlIGFwcGxpZWQgdG8gdGhlIGNvbnRlbnQgdG8gcmV2ZWFsIGl0XG4gIHNob3dDbGFzczogXCJmYW5jeWJveC16b29tSW5VcFwiLCAvLyBcImZhbmN5Ym94LWZhZGVJblwiIHwgXCJmYW5jeWJveC16b29tSW5VcFwiIHwgZmFsc2VcblxuICAvLyBDbGFzcyBuYW1lIHRvIGJlIGFwcGxpZWQgdG8gdGhlIGNvbnRlbnQgdG8gaGlkZSBpdFxuICBoaWRlQ2xhc3M6IFwiZmFuY3lib3gtZmFkZU91dFwiLCAvLyBcImZhbmN5Ym94LWZhZGVPdXRcIiB8IFwiZmFuY3lib3gtem9vbU91dERvd25cIiB8IGZhbHNlXG5cbiAgLy8gU2hvdWxkIGJhY2tkcm9wIGFuZCBVSSBlbGVtZW50cyBmYWRlIGluL291dCBvbiBzdGFydC9jbG9zZVxuICBhbmltYXRlZDogdHJ1ZSxcblxuICAvLyBJZiBicm93c2VyIHNjcm9sbGJhciBzaG91bGQgYmUgaGlkZGVuXG4gIGhpZGVTY3JvbGxiYXI6IHRydWUsXG5cbiAgLy8gRWxlbWVudCBjb250YWluaW5nIG1haW4gc3RydWN0dXJlXG4gIHBhcmVudEVsOiBudWxsLFxuXG4gIC8vIEN1c3RvbSBjbGFzcyBuYW1lIG9yIG11bHRpcGxlIHNwYWNlLXNlcGFyYXRlZCBjbGFzcyBuYW1lcyBmb3IgdGhlIGNvbnRhaW5lclxuICBtYWluQ2xhc3M6IG51bGwsXG5cbiAgLy8gU2V0IGZvY3VzIG9uIGZpcnN0IGZvY3VzYWJsZSBlbGVtZW50IGFmdGVyIGRpc3BsYXlpbmcgY29udGVudFxuICBhdXRvRm9jdXM6IHRydWUsXG5cbiAgLy8gVHJhcCBmb2N1cyBpbnNpZGUgRmFuY3lib3hcbiAgdHJhcEZvY3VzOiB0cnVlLFxuXG4gIC8vIFNldCBmb2N1cyBiYWNrIHRvIHRyaWdnZXIgZWxlbWVudCBhZnRlciBjbG9zaW5nIEZhbmN5Ym94XG4gIHBsYWNlRm9jdXNCYWNrOiB0cnVlLFxuXG4gIC8vIEFjdGlvbiB0byB0YWtlIHdoZW4gdGhlIHVzZXIgY2xpY2tzIG9uIHRoZSBiYWNrZHJvcFxuICBjbGljazogXCJjbG9zZVwiLCAvLyBcImNsb3NlXCIgfCBcIm5leHRcIiB8IG51bGxcblxuICAvLyBQb3NpdGlvbiBvZiB0aGUgY2xvc2UgYnV0dG9uIC0gb3ZlciB0aGUgY29udGVudCBvciBhdCB0b3AgcmlnaHQgY29ybmVyIG9mIHZpZXdwb3J0XG4gIGNsb3NlQnV0dG9uOiBcImluc2lkZVwiLCAvLyBcImluc2lkZVwiIHwgXCJvdXRzaWRlXCJcblxuICAvLyBBbGxvdyB1c2VyIHRvIGRyYWcgY29udGVudCB1cC9kb3duIHRvIGNsb3NlIGluc3RhbmNlXG4gIGRyYWdUb0Nsb3NlOiB0cnVlLFxuXG4gIC8vIEVuYWJsZSBrZXlib2FyZCBuYXZpZ2F0aW9uXG4gIGtleWJvYXJkOiB7XG4gICAgRXNjYXBlOiBcImNsb3NlXCIsXG4gICAgRGVsZXRlOiBcImNsb3NlXCIsXG4gICAgQmFja3NwYWNlOiBcImNsb3NlXCIsXG4gICAgUGFnZVVwOiBcIm5leHRcIixcbiAgICBQYWdlRG93bjogXCJwcmV2XCIsXG4gICAgQXJyb3dVcDogXCJuZXh0XCIsXG4gICAgQXJyb3dEb3duOiBcInByZXZcIixcbiAgICBBcnJvd1JpZ2h0OiBcIm5leHRcIixcbiAgICBBcnJvd0xlZnQ6IFwicHJldlwiLFxuICB9LFxuXG4gIC8vIEhUTUwgdGVtcGxhdGVzIGZvciB2YXJpb3VzIGVsZW1lbnRzXG4gIHRlbXBsYXRlOiB7XG4gICAgLy8gQ2xvc2UgYnV0dG9uIGljb25cbiAgICBjbG9zZUJ1dHRvbjpcbiAgICAgICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCIgdGFiaW5kZXg9XCItMVwiPjxwYXRoIGQ9XCJNMjAgMjBMNCA0bTE2IDBMNCAyMFwiLz48L3N2Zz4nLFxuICAgIC8vIExvYWRpbmcgaW5kaWNhdG9yIGljb25cbiAgICBzcGlubmVyOlxuICAgICAgJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiNTBcIiBoZWlnaHQ9XCI1MFwiIHZpZXdCb3g9XCIyNSAyNSA1MCA1MFwiIHRhYmluZGV4PVwiLTFcIj48Y2lyY2xlIGN4PVwiNTBcIiBjeT1cIjUwXCIgcj1cIjIwXCIvPjwvc3ZnPicsXG5cbiAgICAvLyBNYWluIGNvbnRhaW5lciBlbGVtZW50XG4gICAgbWFpbjogbnVsbCxcbiAgfSxcblxuICAvKiBOb3RlOiBJZiB0aGUgYHRlbXBsYXRlLm1haW5gIG9wdGlvbiBpcyBub3QgcHJvdmlkZWQsIHRoZSBzdHJ1Y3R1cmUgaXMgZ2VuZXJhdGVkIGFzIGZvbGxvd3MgYnkgZGVmYXVsdDpcbiAgPGRpdiBjbGFzcz1cImZhbmN5Ym94X19jb250YWluZXJcIiByb2xlPVwiZGlhbG9nXCIgYXJpYS1tb2RhbD1cInRydWVcIiBhcmlhLWhpZGRlbj1cInRydWVcIiBhcmlhLWxhYmVsPVwie3tNT0RBTH19XCIgdGFiaW5kZXg9XCItMVwiPlxuICAgIDxkaXYgY2xhc3M9XCJmYW5jeWJveF9fYmFja2Ryb3BcIj48L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiZmFuY3lib3hfX2Nhcm91c2VsXCI+PC9kaXY+XG4gIDwvZGl2PlxuICAqL1xuXG4gIC8vIExvY2FsaXphdGlvbiBvZiBzdHJpbmdzXG4gIGwxMG46IGVuLFxufTtcblxuLy8gT2JqZWN0IHRoYXQgY29udGFpbnMgYWxsIGFjdGl2ZSBpbnN0YW5jZXMgb2YgRmFuY3lib3hcbmNvbnN0IGluc3RhbmNlcyA9IG5ldyBNYXAoKTtcblxuLy8gTnVtYmVyIG9mIEZhbmN5Ym94IGluc3RhbmNlcyBjcmVhdGVkLCBpdCBpcyB1c2VkIHRvIGdlbmVyYXRlIG5ldyBpbnN0YW5jZSBcImlkXCJcbmxldCBjYWxsZWQgPSAwO1xuXG5jbGFzcyBGYW5jeWJveCBleHRlbmRzIEJhc2Uge1xuICAvKipcbiAgICogRmFuY3lib3ggY29uc3RydWN0b3JcbiAgICogQGNvbnN0cnVjdHMgRmFuY3lib3hcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAtIE9wdGlvbnMgZm9yIEZhbmN5Ym94XG4gICAqL1xuICBjb25zdHJ1Y3RvcihpdGVtcywgb3B0aW9ucyA9IHt9KSB7XG4gICAgLy8gUXVpY2sgaGFjayB0byBmaXggdmFyaWFibGUgbmFtaW5nIGNvbGxpc2lvblxuICAgIGl0ZW1zID0gaXRlbXMubWFwKChpdGVtKSA9PiB7XG4gICAgICBpZiAoaXRlbS53aWR0aCkgaXRlbS5fd2lkdGggPSBpdGVtLndpZHRoO1xuICAgICAgaWYgKGl0ZW0uaGVpZ2h0KSBpdGVtLl9oZWlnaHQgPSBpdGVtLmhlaWdodDtcblxuICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfSk7XG5cbiAgICBzdXBlcihleHRlbmQodHJ1ZSwge30sIGRlZmF1bHRzLCBvcHRpb25zKSk7XG5cbiAgICB0aGlzLmJpbmRIYW5kbGVycygpO1xuXG4gICAgdGhpcy5zdGF0ZSA9IFwiaW5pdFwiO1xuXG4gICAgdGhpcy5zZXRJdGVtcyhpdGVtcyk7XG5cbiAgICB0aGlzLmF0dGFjaFBsdWdpbnMoRmFuY3lib3guUGx1Z2lucyk7XG5cbiAgICAvLyBcImluaXRcIiBldmVudCBtYXJrcyB0aGUgc3RhcnQgb2YgaW5pdGlhbGl6YXRpb24gYW5kIGlzIGF2YWlsYWJsZSB0byBwbHVnaW5zXG4gICAgdGhpcy50cmlnZ2VyKFwiaW5pdFwiKTtcblxuICAgIGlmICh0aGlzLm9wdGlvbihcImhpZGVTY3JvbGxiYXJcIikgPT09IHRydWUpIHtcbiAgICAgIHRoaXMuaGlkZVNjcm9sbGJhcigpO1xuICAgIH1cblxuICAgIHRoaXMuaW5pdExheW91dCgpO1xuXG4gICAgdGhpcy5pbml0Q2Fyb3VzZWwoKTtcblxuICAgIHRoaXMuYXR0YWNoRXZlbnRzKCk7XG5cbiAgICBpbnN0YW5jZXMuc2V0KHRoaXMuaWQsIHRoaXMpO1xuXG4gICAgLy8gXCJwcmVwYXJlXCIgZXZlbnQgd2lsbCB0cmlnZ2VyIHRoZSBjcmVhdGlvbiBvZiBhZGRpdGlvbmFsIGxheW91dCBlbGVtZW50cywgc3VjaCBhcyB0aHVtYm5haWxzIGFuZCB0b29sYmFyXG4gICAgdGhpcy50cmlnZ2VyKFwicHJlcGFyZVwiKTtcblxuICAgIHRoaXMuc3RhdGUgPSBcInJlYWR5XCI7XG5cbiAgICAvLyBcInJlYWR5XCIgZXZlbnQgd2lsbCB0cmlnZ2VyIHRoZSBjb250ZW50IHRvIGxvYWRcbiAgICB0aGlzLnRyaWdnZXIoXCJyZWFkeVwiKTtcblxuICAgIC8vIFJldmVhbCBjb250YWluZXJcbiAgICB0aGlzLiRjb250YWluZXIuc2V0QXR0cmlidXRlKFwiYXJpYS1oaWRkZW5cIiwgXCJmYWxzZVwiKTtcblxuICAgIC8vIFNldCBmb2N1cyBvbiB0aGUgZmlyc3QgZm9jdXNhYmxlIGVsZW1lbnQgaW5zaWRlIHRoaXMgaW5zdGFuY2VcbiAgICBpZiAodGhpcy5vcHRpb24oXCJ0cmFwRm9jdXNcIikpIHtcbiAgICAgIHRoaXMuZm9jdXMoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogT3ZlcnJpZGUgYG9wdGlvbmAgbWV0aG9kIHRvIGdldCB2YWx1ZSBmcm9tIHRoZSBjdXJyZW50IHNsaWRlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIG9wdGlvbiBuYW1lXG4gICAqIEBwYXJhbSAgey4uLmFueX0gcmVzdCBvcHRpb25hbCBleHRyYSBwYXJhbWV0ZXJzXG4gICAqIEByZXR1cm5zIHthbnl9XG4gICAqL1xuICBvcHRpb24obmFtZSwgLi4ucmVzdCkge1xuICAgIGNvbnN0IHNsaWRlID0gdGhpcy5nZXRTbGlkZSgpO1xuXG4gICAgbGV0IHZhbHVlID0gc2xpZGUgPyBzbGlkZVtuYW1lXSA6IHVuZGVmaW5lZDtcblxuICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5jYWxsKHRoaXMsIHRoaXMsIC4uLnJlc3QpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN1cGVyLm9wdGlvbihuYW1lLCAuLi5yZXN0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBCaW5kIGV2ZW50IGhhbmRsZXJzIGZvciByZWZlcmVuY2FiaWxpdHlcbiAgICovXG4gIGJpbmRIYW5kbGVycygpIHtcbiAgICBmb3IgKGNvbnN0IG1ldGhvZE5hbWUgb2YgW1xuICAgICAgXCJvbk1vdXNlZG93blwiLFxuICAgICAgXCJvbktleWRvd25cIixcbiAgICAgIFwib25DbGlja1wiLFxuXG4gICAgICBcIm9uRm9jdXNcIixcblxuICAgICAgXCJvbkNyZWF0ZVNsaWRlXCIsXG4gICAgICBcIm9uU2V0dGxlXCIsXG5cbiAgICAgIFwib25Ub3VjaE1vdmVcIixcbiAgICAgIFwib25Ub3VjaEVuZFwiLFxuXG4gICAgICBcIm9uVHJhbnNmb3JtXCIsXG4gICAgXSkge1xuICAgICAgdGhpc1ttZXRob2ROYW1lXSA9IHRoaXNbbWV0aG9kTmFtZV0uYmluZCh0aGlzKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2V0IHVwIGEgZnVuY3Rpb25zIHRoYXQgd2lsbCBiZSBjYWxsZWQgd2hlbmV2ZXIgdGhlIHNwZWNpZmllZCBldmVudCBpcyBkZWxpdmVyZWRcbiAgICovXG4gIGF0dGFjaEV2ZW50cygpIHtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIHRoaXMub25Nb3VzZWRvd24pO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMub25LZXlkb3duLCB0cnVlKTtcblxuICAgIC8vIFRyYXAga2V5Ym9hcmQgZm9jdXMgaW5zaWRlIG9mIHRoZSBtb2RhbFxuICAgIGlmICh0aGlzLm9wdGlvbihcInRyYXBGb2N1c1wiKSkge1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImZvY3VzXCIsIHRoaXMub25Gb2N1cywgdHJ1ZSk7XG4gICAgfVxuXG4gICAgdGhpcy4kY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLm9uQ2xpY2spO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgcHJldmlvdXNseSByZWdpc3RlcmVkIGV2ZW50IGxpc3RlbmVyc1xuICAgKi9cbiAgZGV0YWNoRXZlbnRzKCkge1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgdGhpcy5vbk1vdXNlZG93bik7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5vbktleWRvd24sIHRydWUpO1xuXG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImZvY3VzXCIsIHRoaXMub25Gb2N1cywgdHJ1ZSk7XG5cbiAgICB0aGlzLiRjb250YWluZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMub25DbGljayk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZSBsYXlvdXQ7IGNyZWF0ZSBtYWluIGNvbnRhaW5lciwgYmFja2Ryb3AgbmQgbGF5b3V0IGZvciBtYWluIGNhcm91c2VsXG4gICAqL1xuICBpbml0TGF5b3V0KCkge1xuICAgIHRoaXMuJHJvb3QgPSB0aGlzLm9wdGlvbihcInBhcmVudEVsXCIpIHx8IGRvY3VtZW50LmJvZHk7XG5cbiAgICAvLyBDb250YWluZXJcbiAgICBsZXQgbWFpblRlbXBsYXRlID0gdGhpcy5vcHRpb24oXCJ0ZW1wbGF0ZS5tYWluXCIpO1xuXG4gICAgaWYgKG1haW5UZW1wbGF0ZSkge1xuICAgICAgdGhpcy4kcm9vdC5pbnNlcnRBZGphY2VudEhUTUwoXCJiZWZvcmVlbmRcIiwgdGhpcy5sb2NhbGl6ZShtYWluVGVtcGxhdGUpKTtcblxuICAgICAgdGhpcy4kY29udGFpbmVyID0gdGhpcy4kcm9vdC5xdWVyeVNlbGVjdG9yKFwiLmZhbmN5Ym94X19jb250YWluZXJcIik7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLiRjb250YWluZXIpIHtcbiAgICAgIHRoaXMuJGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICB0aGlzLiRyb290LmFwcGVuZENoaWxkKHRoaXMuJGNvbnRhaW5lcik7XG4gICAgfVxuXG4gICAgLy8gTm9ybWFsbHkgd2Ugd291bGQgbm90IG5lZWQgdGhpcywgYnV0IFNhZmFyaSBkb2VzIG5vdCBzdXBwb3J0IGBwcmV2ZW50U2Nyb2xsOmZhbHNlYCBvcHRpb24gZm9yIGBmb2N1c2AgbWV0aG9kXG4gICAgLy8gYW5kIHRoYXQgY2F1c2VzIGxheW91dCBpc3N1ZXNcbiAgICB0aGlzLiRjb250YWluZXIub25zY3JvbGwgPSAoKSA9PiB7XG4gICAgICB0aGlzLiRjb250YWluZXIuc2Nyb2xsTGVmdCA9IDA7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcblxuICAgIE9iamVjdC5lbnRyaWVzKHtcbiAgICAgIGNsYXNzOiBcImZhbmN5Ym94X19jb250YWluZXJcIixcbiAgICAgIHJvbGU6IFwiZGlhbG9nXCIsXG4gICAgICB0YWJJbmRleDogXCItMVwiLFxuICAgICAgXCJhcmlhLW1vZGFsXCI6IFwidHJ1ZVwiLFxuICAgICAgXCJhcmlhLWhpZGRlblwiOiBcInRydWVcIixcbiAgICAgIFwiYXJpYS1sYWJlbFwiOiB0aGlzLmxvY2FsaXplKFwie3tNT0RBTH19XCIpLFxuICAgIH0pLmZvckVhY2goKGFyZ3MpID0+IHRoaXMuJGNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoLi4uYXJncykpO1xuXG4gICAgaWYgKHRoaXMub3B0aW9uKFwiYW5pbWF0ZWRcIikpIHtcbiAgICAgIHRoaXMuJGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwiaXMtYW5pbWF0ZWRcIik7XG4gICAgfVxuXG4gICAgLy8gQmFja2Ryb3BcbiAgICB0aGlzLiRiYWNrZHJvcCA9IHRoaXMuJGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKFwiLmZhbmN5Ym94X19iYWNrZHJvcFwiKTtcblxuICAgIGlmICghdGhpcy4kYmFja2Ryb3ApIHtcbiAgICAgIHRoaXMuJGJhY2tkcm9wID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgIHRoaXMuJGJhY2tkcm9wLmNsYXNzTGlzdC5hZGQoXCJmYW5jeWJveF9fYmFja2Ryb3BcIik7XG5cbiAgICAgIHRoaXMuJGNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLiRiYWNrZHJvcCk7XG4gICAgfVxuXG4gICAgLy8gQ2Fyb3VzZWxcbiAgICB0aGlzLiRjYXJvdXNlbCA9IHRoaXMuJGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKFwiLmZhbmN5Ym94X19jYXJvdXNlbFwiKTtcblxuICAgIGlmICghdGhpcy4kY2Fyb3VzZWwpIHtcbiAgICAgIHRoaXMuJGNhcm91c2VsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgIHRoaXMuJGNhcm91c2VsLmNsYXNzTGlzdC5hZGQoXCJmYW5jeWJveF9fY2Fyb3VzZWxcIik7XG5cbiAgICAgIHRoaXMuJGNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLiRjYXJvdXNlbCk7XG4gICAgfVxuXG4gICAgLy8gTWFrZSBpbnN0YW5jZSByZWZlcmVuY2UgYWNjZXNzaWJsZVxuICAgIHRoaXMuJGNvbnRhaW5lci5GYW5jeWJveCA9IHRoaXM7XG5cbiAgICAvLyBNYWtlIHN1cmUgdGhlIGNvbnRhaW5lciBoYXMgYW4gSURcbiAgICB0aGlzLmlkID0gdGhpcy4kY29udGFpbmVyLmdldEF0dHJpYnV0ZShcImlkXCIpO1xuXG4gICAgaWYgKCF0aGlzLmlkKSB7XG4gICAgICB0aGlzLmlkID0gdGhpcy5vcHRpb25zLmlkIHx8ICsrY2FsbGVkO1xuICAgICAgdGhpcy4kY29udGFpbmVyLnNldEF0dHJpYnV0ZShcImlkXCIsIFwiZmFuY3lib3gtXCIgKyB0aGlzLmlkKTtcbiAgICB9XG5cbiAgICAvLyBBZGQgY3VzdG9tIGNsYXNzIG5hbWUgdG8gbWFpbiBlbGVtZW50XG4gICAgY29uc3QgbWFpbkNsYXNzID0gdGhpcy5vcHRpb24oXCJtYWluQ2xhc3NcIik7XG5cbiAgICBpZiAobWFpbkNsYXNzKSB7XG4gICAgICB0aGlzLiRjb250YWluZXIuY2xhc3NMaXN0LmFkZCguLi5tYWluQ2xhc3Muc3BsaXQoXCIgXCIpKTtcbiAgICB9XG5cbiAgICAvLyBBZGQgY2xhc3MgbmFtZSBmb3IgPGh0bWw+IGVsZW1lbnRcbiAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcIndpdGgtZmFuY3lib3hcIik7XG5cbiAgICB0aGlzLnRyaWdnZXIoXCJpbml0TGF5b3V0XCIpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogUHJlcGFyZXMgc2xpZGVzIGZvciB0aGUgY29yb3VzZWxcbiAgICogQHJldHVybnMge0FycmF5fSBTbGlkZXNcbiAgICovXG4gIHNldEl0ZW1zKGl0ZW1zKSB7XG4gICAgY29uc3Qgc2xpZGVzID0gW107XG5cbiAgICBmb3IgKGNvbnN0IHNsaWRlIG9mIGl0ZW1zKSB7XG4gICAgICBjb25zdCAkdHJpZ2dlciA9IHNsaWRlLiR0cmlnZ2VyO1xuXG4gICAgICBpZiAoJHRyaWdnZXIpIHtcbiAgICAgICAgY29uc3QgZGF0YXNldCA9ICR0cmlnZ2VyLmRhdGFzZXQgfHwge307XG5cbiAgICAgICAgc2xpZGUuc3JjID0gZGF0YXNldC5zcmMgfHwgJHRyaWdnZXIuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSB8fCBzbGlkZS5zcmM7XG4gICAgICAgIHNsaWRlLnR5cGUgPSBkYXRhc2V0LnR5cGUgfHwgc2xpZGUudHlwZTtcblxuICAgICAgICAvLyBTdXBwb3J0IGl0ZW1zIHdpdGhvdXQgYHNyY2AsIGUuZy4sIHdoZW4gYGRhdGEtZmFuY3lib3hgIGF0dHJpYnV0ZSBhZGRlZCBkaXJlY3RseSB0byBgPGltZz5gIGVsZW1lbnRcbiAgICAgICAgaWYgKCFzbGlkZS5zcmMgJiYgJHRyaWdnZXIgaW5zdGFuY2VvZiBIVE1MSW1hZ2VFbGVtZW50KSB7XG4gICAgICAgICAgc2xpZGUuc3JjID0gJHRyaWdnZXIuY3VycmVudFNyYyB8fCBzbGlkZS4kdHJpZ2dlci5zcmM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gQ2hlY2sgZm9yIHRodW1ibmFpbCBlbGVtZW50XG4gICAgICBsZXQgJHRodW1iID0gc2xpZGUuJHRodW1iO1xuXG4gICAgICBpZiAoISR0aHVtYikge1xuICAgICAgICBsZXQgb3JpZ1RhcmdldCA9IHNsaWRlLiR0cmlnZ2VyICYmIHNsaWRlLiR0cmlnZ2VyLm9yaWdUYXJnZXQ7XG5cbiAgICAgICAgaWYgKG9yaWdUYXJnZXQpIHtcbiAgICAgICAgICBpZiAob3JpZ1RhcmdldCBpbnN0YW5jZW9mIEhUTUxJbWFnZUVsZW1lbnQpIHtcbiAgICAgICAgICAgICR0aHVtYiA9IG9yaWdUYXJnZXQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICR0aHVtYiA9IG9yaWdUYXJnZXQucXVlcnlTZWxlY3RvcihcImltZzpub3QoW2FyaWEtaGlkZGVuXSlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCEkdGh1bWIgJiYgc2xpZGUuJHRyaWdnZXIpIHtcbiAgICAgICAgICAkdGh1bWIgPVxuICAgICAgICAgICAgc2xpZGUuJHRyaWdnZXIgaW5zdGFuY2VvZiBIVE1MSW1hZ2VFbGVtZW50XG4gICAgICAgICAgICAgID8gc2xpZGUuJHRyaWdnZXJcbiAgICAgICAgICAgICAgOiBzbGlkZS4kdHJpZ2dlci5xdWVyeVNlbGVjdG9yKFwiaW1nOm5vdChbYXJpYS1oaWRkZW5dKVwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzbGlkZS4kdGh1bWIgPSAkdGh1bWIgfHwgbnVsbDtcblxuICAgICAgLy8gR2V0IHRodW1ibmFpbCBpbWFnZSBzb3VyY2VcbiAgICAgIGxldCB0aHVtYiA9IHNsaWRlLnRodW1iO1xuXG4gICAgICBpZiAoIXRodW1iICYmICR0aHVtYikge1xuICAgICAgICB0aHVtYiA9ICR0aHVtYi5jdXJyZW50U3JjIHx8ICR0aHVtYi5zcmM7XG5cbiAgICAgICAgaWYgKCF0aHVtYiAmJiAkdGh1bWIuZGF0YXNldCkge1xuICAgICAgICAgIHRodW1iID0gJHRodW1iLmRhdGFzZXQubGF6eVNyYyB8fCAkdGh1bWIuZGF0YXNldC5zcmM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gQXNzdW1lIHdlIGhhdmUgaW1hZ2UsIHRoZW4gdXNlIGl0IGFzIHRodW1ibmFpbFxuICAgICAgaWYgKCF0aHVtYiAmJiBzbGlkZS50eXBlID09PSBcImltYWdlXCIpIHtcbiAgICAgICAgdGh1bWIgPSBzbGlkZS5zcmM7XG4gICAgICB9XG5cbiAgICAgIHNsaWRlLnRodW1iID0gdGh1bWIgfHwgbnVsbDtcblxuICAgICAgLy8gQWRkIGVtcHR5IGNhcHRpb24gdG8gbWFrZSB0aGluZ3Mgc2ltcGxlclxuICAgICAgc2xpZGUuY2FwdGlvbiA9IHNsaWRlLmNhcHRpb24gfHwgXCJcIjtcblxuICAgICAgc2xpZGVzLnB1c2goc2xpZGUpO1xuICAgIH1cblxuICAgIHRoaXMuaXRlbXMgPSBzbGlkZXM7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZSBtYWluIENhcm91c2VsIHRoYXQgd2lsbCBiZSB1c2VkIHRvIGRpc3BsYXkgdGhlIGNvbnRlbnRcbiAgICogQHBhcmFtIHtBcnJheX0gc2xpZGVzXG4gICAqL1xuICBpbml0Q2Fyb3VzZWwoKSB7XG4gICAgdGhpcy5DYXJvdXNlbCA9IG5ldyBDYXJvdXNlbChcbiAgICAgIHRoaXMuJGNhcm91c2VsLFxuICAgICAgZXh0ZW5kKFxuICAgICAgICB0cnVlLFxuICAgICAgICB7fSxcbiAgICAgICAge1xuICAgICAgICAgIHByZWZpeDogXCJcIixcblxuICAgICAgICAgIGNsYXNzTmFtZXM6IHtcbiAgICAgICAgICAgIHZpZXdwb3J0OiBcImZhbmN5Ym94X192aWV3cG9ydFwiLFxuICAgICAgICAgICAgdHJhY2s6IFwiZmFuY3lib3hfX3RyYWNrXCIsXG4gICAgICAgICAgICBzbGlkZTogXCJmYW5jeWJveF9fc2xpZGVcIixcbiAgICAgICAgICB9LFxuXG4gICAgICAgICAgdGV4dFNlbGVjdGlvbjogdHJ1ZSxcbiAgICAgICAgICBwcmVsb2FkOiB0aGlzLm9wdGlvbihcInByZWxvYWRcIiksXG5cbiAgICAgICAgICBmcmljdGlvbjogMC44OCxcblxuICAgICAgICAgIHNsaWRlczogdGhpcy5pdGVtcyxcbiAgICAgICAgICBpbml0aWFsUGFnZTogdGhpcy5vcHRpb25zLnN0YXJ0SW5kZXgsXG4gICAgICAgICAgc2xpZGVzUGVyUGFnZTogMSxcblxuICAgICAgICAgIGluZmluaXRlWDogdGhpcy5vcHRpb24oXCJpbmZpbml0ZVwiKSxcbiAgICAgICAgICBpbmZpbml0ZVk6IHRydWUsXG5cbiAgICAgICAgICBsMTBuOiB0aGlzLm9wdGlvbihcImwxMG5cIiksXG5cbiAgICAgICAgICBEb3RzOiBmYWxzZSxcbiAgICAgICAgICBOYXZpZ2F0aW9uOiB7XG4gICAgICAgICAgICBjbGFzc05hbWVzOiB7XG4gICAgICAgICAgICAgIG1haW46IFwiZmFuY3lib3hfX25hdlwiLFxuICAgICAgICAgICAgICBidXR0b246IFwiY2Fyb3VzZWxfX2J1dHRvblwiLFxuXG4gICAgICAgICAgICAgIG5leHQ6IFwiaXMtbmV4dFwiLFxuICAgICAgICAgICAgICBwcmV2OiBcImlzLXByZXZcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcblxuICAgICAgICAgIFBhbnpvb206IHtcbiAgICAgICAgICAgIHRleHRTZWxlY3Rpb246IHRydWUsXG5cbiAgICAgICAgICAgIHBhbk9ubHlab29tZWQ6ICgpID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICB0aGlzLkNhcm91c2VsICYmIHRoaXMuQ2Fyb3VzZWwucGFnZXMgJiYgdGhpcy5DYXJvdXNlbC5wYWdlcy5sZW5ndGggPCAyICYmICF0aGlzLm9wdGlvbihcImRyYWdUb0Nsb3NlXCIpXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBsb2NrQXhpczogKCkgPT4ge1xuICAgICAgICAgICAgICBpZiAodGhpcy5DYXJvdXNlbCkge1xuICAgICAgICAgICAgICAgIGxldCByZXogPSBcInhcIjtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbihcImRyYWdUb0Nsb3NlXCIpKSB7XG4gICAgICAgICAgICAgICAgICByZXogKz0gXCJ5XCI7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlejtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuXG4gICAgICAgICAgb246IHtcbiAgICAgICAgICAgIFwiKlwiOiAobmFtZSwgLi4uZGV0YWlscykgPT4gdGhpcy50cmlnZ2VyKGBDYXJvdXNlbC4ke25hbWV9YCwgLi4uZGV0YWlscyksXG4gICAgICAgICAgICBpbml0OiAoY2Fyb3VzZWwpID0+ICh0aGlzLkNhcm91c2VsID0gY2Fyb3VzZWwpLFxuICAgICAgICAgICAgY3JlYXRlU2xpZGU6IHRoaXMub25DcmVhdGVTbGlkZSxcbiAgICAgICAgICAgIHNldHRsZTogdGhpcy5vblNldHRsZSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuXG4gICAgICAgIHRoaXMub3B0aW9uKFwiQ2Fyb3VzZWxcIilcbiAgICAgIClcbiAgICApO1xuXG4gICAgaWYgKHRoaXMub3B0aW9uKFwiZHJhZ1RvQ2xvc2VcIikpIHtcbiAgICAgIHRoaXMuQ2Fyb3VzZWwuUGFuem9vbS5vbih7XG4gICAgICAgIC8vIFN0b3AgZnVydGhlciB0b3VjaCBldmVudCBoYW5kbGluZyBpZiBjb250ZW50IGlzIHNjYWxlZFxuICAgICAgICB0b3VjaE1vdmU6IHRoaXMub25Ub3VjaE1vdmUsXG5cbiAgICAgICAgLy8gVXBkYXRlIGJhY2tkcm9wIG9wYWNpdHkgZGVwZW5kaW5nIG9uIHZlcnRpY2FsIGRpc3RhbmNlXG4gICAgICAgIGFmdGVyVHJhbnNmb3JtOiB0aGlzLm9uVHJhbnNmb3JtLFxuXG4gICAgICAgIC8vIENsb3NlIGluc3RhbmNlIGlmIGRyYWcgZGlzdGFuY2UgZXhjZWVkcyBsaW1pdFxuICAgICAgICB0b3VjaEVuZDogdGhpcy5vblRvdWNoRW5kLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy50cmlnZ2VyKFwiaW5pdENhcm91c2VsXCIpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogUHJvY2VzcyBgY3JlYXRlU2xpZGVgIGV2ZW50IHRvIGNyZWF0ZSBjYXB0aW9uIGVsZW1lbnQgaW5zaWRlIG5ldyBzbGlkZVxuICAgKi9cbiAgb25DcmVhdGVTbGlkZShjYXJvdXNlbCwgc2xpZGUpIHtcbiAgICBsZXQgY2FwdGlvbiA9IHNsaWRlLmNhcHRpb24gfHwgXCJcIjtcblxuICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLmNhcHRpb24gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgY2FwdGlvbiA9IHRoaXMub3B0aW9ucy5jYXB0aW9uLmNhbGwodGhpcywgdGhpcywgdGhpcy5DYXJvdXNlbCwgc2xpZGUpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgY2FwdGlvbiA9PT0gXCJzdHJpbmdcIiAmJiBjYXB0aW9uLmxlbmd0aCkge1xuICAgICAgY29uc3QgJGNhcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgY29uc3QgaWQgPSBgZmFuY3lib3hfX2NhcHRpb25fJHt0aGlzLmlkfV8ke3NsaWRlLmluZGV4fWA7XG5cbiAgICAgICRjYXB0aW9uLmNsYXNzTmFtZSA9IFwiZmFuY3lib3hfX2NhcHRpb25cIjtcbiAgICAgICRjYXB0aW9uLmlubmVySFRNTCA9IGNhcHRpb247XG4gICAgICAkY2FwdGlvbi5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBpZCk7XG5cbiAgICAgIHNsaWRlLiRjYXB0aW9uID0gc2xpZGUuJGVsLmFwcGVuZENoaWxkKCRjYXB0aW9uKTtcblxuICAgICAgc2xpZGUuJGVsLmNsYXNzTGlzdC5hZGQoXCJoYXMtY2FwdGlvblwiKTtcbiAgICAgIHNsaWRlLiRlbC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsbGVkYnlcIiwgaWQpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGUgQ2Fyb3VzZWwgYHNldHRsZWAgZXZlbnRcbiAgICovXG4gIG9uU2V0dGxlKCkge1xuICAgIGlmICh0aGlzLm9wdGlvbihcImF1dG9Gb2N1c1wiKSkge1xuICAgICAgdGhpcy5mb2N1cygpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGUgZm9jdXMgZXZlbnRcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgLSBGb2N1cyBldmVudFxuICAgKi9cbiAgb25Gb2N1cyhldmVudCkge1xuICAgIGlmICghdGhpcy5pc1RvcG1vc3QoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuZm9jdXMoZXZlbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZSBjbGljayBldmVudCBvbiB0aGUgY29udGFpbmVyXG4gICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IC0gQ2xpY2sgZXZlbnRcbiAgICovXG4gIG9uQ2xpY2soZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBldmVudFRhcmdldCA9IGV2ZW50LmNvbXBvc2VkUGF0aCgpWzBdO1xuXG4gICAgaWYgKGV2ZW50VGFyZ2V0Lm1hdGNoZXMoXCJbZGF0YS1mYW5jeWJveC1jbG9zZV1cIikpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBGYW5jeWJveC5jbG9zZShmYWxzZSwgZXZlbnQpO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGV2ZW50VGFyZ2V0Lm1hdGNoZXMoXCJbZGF0YS1mYW5jeWJveC1uZXh0XVwiKSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIEZhbmN5Ym94Lm5leHQoKTtcblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChldmVudFRhcmdldC5tYXRjaGVzKFwiW2RhdGEtZmFuY3lib3gtcHJldl1cIikpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBGYW5jeWJveC5wcmV2KCk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBhY3RpdmVFbGVtZW50ID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblxuICAgIGlmIChhY3RpdmVFbGVtZW50KSB7XG4gICAgICBpZiAoYWN0aXZlRWxlbWVudC5jbG9zZXN0KFwiW2NvbnRlbnRlZGl0YWJsZV1cIikpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWV2ZW50VGFyZ2V0Lm1hdGNoZXMoRk9DVVNBQkxFX0VMRU1FTlRTKSkge1xuICAgICAgICBhY3RpdmVFbGVtZW50LmJsdXIoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBTa2lwIGlmIGNsaWNrZWQgaW5zaWRlIGNvbnRlbnQgYXJlYVxuICAgIGlmIChldmVudFRhcmdldC5jbG9zZXN0KFwiLmZhbmN5Ym94X19jb250ZW50XCIpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gU2tpcCBpZiB0ZXh0IGlzIHNlbGVjdGVkXG4gICAgaWYgKGdldFNlbGVjdGlvbigpLnRvU3RyaW5nKCkubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMudHJpZ2dlcihcImNsaWNrXCIsIGV2ZW50KSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBhY3Rpb24gPSB0aGlzLm9wdGlvbihcImNsaWNrXCIpO1xuXG4gICAgc3dpdGNoIChhY3Rpb24pIHtcbiAgICAgIGNhc2UgXCJjbG9zZVwiOlxuICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIm5leHRcIjpcbiAgICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGUgcGFuem9vbSBgdG91Y2hNb3ZlYCBldmVudDsgRGlzYWJsZSBkcmFnZ2luZyBpZiBjb250ZW50IG9mIGN1cnJlbnQgc2xpZGUgaXMgc2NhbGVkXG4gICAqL1xuICBvblRvdWNoTW92ZSgpIHtcbiAgICBjb25zdCBwYW56b29tID0gdGhpcy5nZXRTbGlkZSgpLlBhbnpvb207XG5cbiAgICByZXR1cm4gcGFuem9vbSAmJiBwYW56b29tLmNvbnRlbnQuc2NhbGUgIT09IDEgPyBmYWxzZSA6IHRydWU7XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlIHBhbnpvb20gYHRvdWNoRW5kYCBldmVudDsgY2xvc2Ugd2hlbiBxdWljayBmbGljayB1cC9kb3duIGlzIGRldGVjdGVkXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYW56b29tIC0gUGFuem9vbSBpbnN0YW5jZVxuICAgKi9cbiAgb25Ub3VjaEVuZChwYW56b29tKSB7XG4gICAgY29uc3QgZGlzdGFuY2VZID0gcGFuem9vbS5kcmFnT2Zmc2V0Lnk7XG5cbiAgICBpZiAoTWF0aC5hYnMoZGlzdGFuY2VZKSA+PSAxNTAgfHwgKE1hdGguYWJzKGRpc3RhbmNlWSkgPj0gMzUgJiYgcGFuem9vbS5kcmFnT2Zmc2V0LnRpbWUgPCAzNTApKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb24oXCJoaWRlQ2xhc3NcIikpIHtcbiAgICAgICAgdGhpcy5nZXRTbGlkZSgpLmhpZGVDbGFzcyA9IGBmYW5jeWJveC10aHJvd091dCR7cGFuem9vbS5jb250ZW50LnkgPCAwID8gXCJVcFwiIDogXCJEb3duXCJ9YDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH0gZWxzZSBpZiAocGFuem9vbS5sb2NrQXhpcyA9PT0gXCJ5XCIpIHtcbiAgICAgIHBhbnpvb20ucGFuVG8oeyB5OiAwIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGUgYGFmdGVyVHJhbnNmb3JtYCBldmVudDsgY2hhbmdlIGJhY2tkcm9wIG9wYWNpdHkgYmFzZWQgb24gY3VycmVudCB5IHBvc2l0aW9uIG9mIHBhbnpvb21cbiAgICogQHBhcmFtIHtPYmplY3R9IHBhbnpvb20gLSBQYW56b29tIGluc3RhbmNlXG4gICAqL1xuICBvblRyYW5zZm9ybShwYW56b29tKSB7XG4gICAgY29uc3QgJGJhY2tkcm9wID0gdGhpcy4kYmFja2Ryb3A7XG5cbiAgICBpZiAoJGJhY2tkcm9wKSB7XG4gICAgICBjb25zdCB5UG9zID0gTWF0aC5hYnMocGFuem9vbS5jb250ZW50LnkpO1xuICAgICAgY29uc3Qgb3BhY2l0eSA9IHlQb3MgPCAxID8gXCJcIiA6IE1hdGgubWF4KDAuMzMsIE1hdGgubWluKDEsIDEgLSAoeVBvcyAvIHBhbnpvb20uY29udGVudC5maXRIZWlnaHQpICogMS41KSk7XG5cbiAgICAgIHRoaXMuJGNvbnRhaW5lci5zdHlsZS5zZXRQcm9wZXJ0eShcIi0tZmFuY3lib3gtdHNcIiwgb3BhY2l0eSA/IFwiMHNcIiA6IFwiXCIpO1xuICAgICAgdGhpcy4kY29udGFpbmVyLnN0eWxlLnNldFByb3BlcnR5KFwiLS1mYW5jeWJveC1vcGFjaXR5XCIsIG9wYWNpdHkpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGUgYG1vdXNlZG93bmAgZXZlbnQgdG8gbWFyayB0aGF0IHRoZSBtb3VzZSBpcyBpbiB1c2VcbiAgICovXG4gIG9uTW91c2Vkb3duKCkge1xuICAgIGlmICh0aGlzLnN0YXRlID09PSBcInJlYWR5XCIpIHtcbiAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZChcImlzLXVzaW5nLW1vdXNlXCIpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGUgYGtleWRvd25gIGV2ZW50OyB0cmFwIGZvY3VzXG4gICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IEtleWRvd24gZXZlbnRcbiAgICovXG4gIG9uS2V5ZG93bihldmVudCkge1xuICAgIGlmICghdGhpcy5pc1RvcG1vc3QoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZShcImlzLXVzaW5nLW1vdXNlXCIpO1xuXG4gICAgY29uc3Qga2V5ID0gZXZlbnQua2V5O1xuICAgIGNvbnN0IGtleWJvYXJkID0gdGhpcy5vcHRpb24oXCJrZXlib2FyZFwiKTtcblxuICAgIGlmICgha2V5Ym9hcmQgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5hbHRLZXkgfHwgZXZlbnQuc2hpZnRLZXkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB0YXJnZXQgPSBldmVudC5jb21wb3NlZFBhdGgoKVswXTtcblxuICAgIGNvbnN0IGNsYXNzTGlzdCA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5jbGFzc0xpc3Q7XG4gICAgY29uc3QgaXNVSUVsZW1lbnQgPSBjbGFzc0xpc3QgJiYgY2xhc3NMaXN0LmNvbnRhaW5zKFwiY2Fyb3VzZWxfX2J1dHRvblwiKTtcblxuICAgIC8vIEFsbG93IHRvIGNsb3NlIHVzaW5nIEVzY2FwZSBidXR0b25cbiAgICBpZiAoa2V5ICE9PSBcIkVzY2FwZVwiICYmICFpc1VJRWxlbWVudCkge1xuICAgICAgbGV0IGlnbm9yZUVsZW1lbnRzID1cbiAgICAgICAgZXZlbnQudGFyZ2V0LmlzQ29udGVudEVkaXRhYmxlIHx8XG4gICAgICAgIFtcIkJVVFRPTlwiLCBcIlRFWFRBUkVBXCIsIFwiT1BUSU9OXCIsIFwiSU5QVVRcIiwgXCJTRUxFQ1RcIiwgXCJWSURFT1wiXS5pbmRleE9mKHRhcmdldC5ub2RlTmFtZSkgIT09IC0xO1xuXG4gICAgICBpZiAoaWdub3JlRWxlbWVudHMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLnRyaWdnZXIoXCJrZXlkb3duXCIsIGtleSwgZXZlbnQpID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGFjdGlvbiA9IGtleWJvYXJkW2tleV07XG5cbiAgICBpZiAodHlwZW9mIHRoaXNbYWN0aW9uXSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICB0aGlzW2FjdGlvbl0oKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBhY3RpdmUgc2xpZGUuIFRoaXMgd2lsbCBiZSB0aGUgZmlyc3Qgc2xpZGUgZnJvbSB0aGUgY3VycmVudCBwYWdlIG9mIHRoZSBtYWluIGNhcm91c2VsLlxuICAgKi9cbiAgZ2V0U2xpZGUoKSB7XG4gICAgY29uc3QgY2Fyb3VzZWwgPSB0aGlzLkNhcm91c2VsO1xuXG4gICAgaWYgKCFjYXJvdXNlbCkgcmV0dXJuIG51bGw7XG5cbiAgICBjb25zdCBwYWdlID0gY2Fyb3VzZWwucGFnZSA9PT0gbnVsbCA/IGNhcm91c2VsLm9wdGlvbihcImluaXRpYWxQYWdlXCIpIDogY2Fyb3VzZWwucGFnZTtcbiAgICBjb25zdCBwYWdlcyA9IGNhcm91c2VsLnBhZ2VzIHx8IFtdO1xuXG4gICAgaWYgKHBhZ2VzLmxlbmd0aCAmJiBwYWdlc1twYWdlXSkge1xuICAgICAgcmV0dXJuIHBhZ2VzW3BhZ2VdLnNsaWRlc1swXTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBQbGFjZSBmb2N1cyBvbiB0aGUgZmlyc3QgZm9jdXNhYmxlIGVsZW1lbnQgaW5zaWRlIGN1cnJlbnQgc2xpZGVcbiAgICogQHBhcmFtIHtFdmVudH0gW2V2ZW50XSAtIEZvY3VzIGV2ZW50XG4gICAqL1xuICBmb2N1cyhldmVudCkge1xuICAgIGlmIChGYW5jeWJveC5pZ25vcmVGb2N1c0NoYW5nZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChbXCJpbml0XCIsIFwiY2xvc2luZ1wiLCBcImN1c3RvbUNsb3NpbmdcIiwgXCJkZXN0cm95XCJdLmluZGV4T2YodGhpcy5zdGF0ZSkgPiAtMSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0ICRjb250YWluZXIgPSB0aGlzLiRjb250YWluZXI7XG4gICAgY29uc3QgY3VycmVudFNsaWRlID0gdGhpcy5nZXRTbGlkZSgpO1xuICAgIGNvbnN0ICRjdXJyZW50U2xpZGUgPSBjdXJyZW50U2xpZGUuc3RhdGUgPT09IFwiZG9uZVwiID8gY3VycmVudFNsaWRlLiRlbCA6IG51bGw7XG5cbiAgICAvLyBTa2lwIGlmIHRoZSBET00gZWxlbWVudCB0aGF0IGlzIGN1cnJlbnRseSBpbiBmb2N1cyBpcyBhbHJlYWR5IGluc2lkZSB0aGUgY3VycmVudCBzbGlkZVxuICAgIGlmICgkY3VycmVudFNsaWRlICYmICRjdXJyZW50U2xpZGUuY29udGFpbnMoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZXZlbnQpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgRmFuY3lib3guaWdub3JlRm9jdXNDaGFuZ2UgPSB0cnVlO1xuXG4gICAgY29uc3QgYWxsRm9jdXNhYmxlRWxlbXMgPSBBcnJheS5mcm9tKCRjb250YWluZXIucXVlcnlTZWxlY3RvckFsbChGT0NVU0FCTEVfRUxFTUVOVFMpKTtcblxuICAgIGxldCBlbmFibGVkRWxlbXMgPSBbXTtcbiAgICBsZXQgJGZpcnN0RWw7XG5cbiAgICBmb3IgKGxldCBub2RlIG9mIGFsbEZvY3VzYWJsZUVsZW1zKSB7XG4gICAgICAvLyBFbmFibGUgZWxlbWVudCBpZiBpdCdzIHZpc2libGUgYW5kXG4gICAgICAvLyBpcyBpbnNpZGUgdGhlIGN1cnJlbnQgc2xpZGUgb3IgaXMgb3V0c2lkZSBtYWluIGNhcm91c2VsIChmb3IgZXhhbXBsZSwgaW5zaWRlIHRoZSB0b29sYmFyKVxuICAgICAgY29uc3QgaXNOb2RlVmlzaWJsZSA9IG5vZGUub2Zmc2V0UGFyZW50O1xuICAgICAgY29uc3QgaXNOb2RlSW5zaWRlQ3VycmVudFNsaWRlID0gJGN1cnJlbnRTbGlkZSAmJiAkY3VycmVudFNsaWRlLmNvbnRhaW5zKG5vZGUpO1xuICAgICAgY29uc3QgaXNOb2RlT3V0c2lkZUNhcm91c2VsID0gIXRoaXMuQ2Fyb3VzZWwuJHZpZXdwb3J0LmNvbnRhaW5zKG5vZGUpO1xuXG4gICAgICBpZiAoaXNOb2RlVmlzaWJsZSAmJiAoaXNOb2RlSW5zaWRlQ3VycmVudFNsaWRlIHx8IGlzTm9kZU91dHNpZGVDYXJvdXNlbCkpIHtcbiAgICAgICAgZW5hYmxlZEVsZW1zLnB1c2gobm9kZSk7XG5cbiAgICAgICAgaWYgKG5vZGUuZGF0YXNldC5vcmlnVGFiaW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIG5vZGUudGFiSW5kZXggPSBub2RlLmRhdGFzZXQub3JpZ1RhYmluZGV4O1xuICAgICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKFwiZGF0YS1vcmlnLXRhYmluZGV4XCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgIG5vZGUuaGFzQXR0cmlidXRlKFwiYXV0b0ZvY3VzXCIpIHx8XG4gICAgICAgICAgKCEkZmlyc3RFbCAmJiBpc05vZGVJbnNpZGVDdXJyZW50U2xpZGUgJiYgIW5vZGUuY2xhc3NMaXN0LmNvbnRhaW5zKFwiY2Fyb3VzZWxfX2J1dHRvblwiKSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgJGZpcnN0RWwgPSBub2RlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBFbGVtZW50IGlzIGVpdGhlciBoaWRkZW4gb3IgaXMgaW5zaWRlIHByZWxvYWRlZCBzbGlkZSAoZS5nLiwgbm90IGluc2lkZSBjdXJyZW50IHNsaWRlLCBidXQgbmV4dC9wcmV2KVxuICAgICAgICBub2RlLmRhdGFzZXQub3JpZ1RhYmluZGV4ID1cbiAgICAgICAgICBub2RlLmRhdGFzZXQub3JpZ1RhYmluZGV4ID09PSB1bmRlZmluZWQgPyBub2RlLmdldEF0dHJpYnV0ZShcInRhYmluZGV4XCIpIDogbm9kZS5kYXRhc2V0Lm9yaWdUYWJpbmRleDtcblxuICAgICAgICBub2RlLnRhYkluZGV4ID0gLTE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFldmVudCkge1xuICAgICAgaWYgKHRoaXMub3B0aW9uKFwiYXV0b0ZvY3VzXCIpICYmICRmaXJzdEVsKSB7XG4gICAgICAgIHNldEZvY3VzT24oJGZpcnN0RWwpO1xuICAgICAgfSBlbHNlIGlmIChlbmFibGVkRWxlbXMuaW5kZXhPZihkb2N1bWVudC5hY3RpdmVFbGVtZW50KSA8IDApIHtcbiAgICAgICAgc2V0Rm9jdXNPbigkY29udGFpbmVyKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGVuYWJsZWRFbGVtcy5pbmRleE9mKGV2ZW50LnRhcmdldCkgPiAtMSkge1xuICAgICAgICB0aGlzLmxhc3RGb2N1cyA9IGV2ZW50LnRhcmdldDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLmxhc3RGb2N1cyA9PT0gJGNvbnRhaW5lcikge1xuICAgICAgICAgIHNldEZvY3VzT24oZW5hYmxlZEVsZW1zW2VuYWJsZWRFbGVtcy5sZW5ndGggLSAxXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2V0Rm9jdXNPbigkY29udGFpbmVyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMubGFzdEZvY3VzID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblxuICAgIEZhbmN5Ym94Lmlnbm9yZUZvY3VzQ2hhbmdlID0gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogSGlkZSB2ZXJ0aWNhbCBwYWdlIHNjcm9sbGJhciBhbmQgYWRqdXN0IHJpZ2h0IHBhZGRpbmcgdmFsdWUgb2YgYGJvZHlgIGVsZW1lbnQgdG8gcHJldmVudCBjb250ZW50IGZyb20gc2hpZnRpbmdcbiAgICogKG90aGVyd2lzZSB0aGUgYGJvZHlgIGVsZW1lbnQgbWF5IGJlY29tZSB3aWRlciBhbmQgdGhlIGNvbnRlbnQgbWF5IGV4cGFuZCBob3Jpem9udGFsbHkpLlxuICAgKi9cbiAgaGlkZVNjcm9sbGJhcigpIHtcbiAgICBpZiAoIWNhblVzZURPTSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHNjcm9sbGJhcldpZHRoID0gd2luZG93LmlubmVyV2lkdGggLSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XG4gICAgY29uc3QgaWQgPSBcImZhbmN5Ym94LXN0eWxlLW5vc2Nyb2xsXCI7XG5cbiAgICBsZXQgJHN0eWxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpO1xuXG4gICAgaWYgKCRzdHlsZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChzY3JvbGxiYXJXaWR0aCA+IDApIHtcbiAgICAgICRzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcblxuICAgICAgJHN0eWxlLmlkID0gaWQ7XG4gICAgICAkc3R5bGUudHlwZSA9IFwidGV4dC9jc3NcIjtcbiAgICAgICRzdHlsZS5pbm5lckhUTUwgPSBgLmNvbXBlbnNhdGUtZm9yLXNjcm9sbGJhciB7cGFkZGluZy1yaWdodDogJHtzY3JvbGxiYXJXaWR0aH1weDt9YDtcblxuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJoZWFkXCIpWzBdLmFwcGVuZENoaWxkKCRzdHlsZSk7XG5cbiAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZChcImNvbXBlbnNhdGUtZm9yLXNjcm9sbGJhclwiKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU3RvcCBoaWRpbmcgdmVydGljYWwgcGFnZSBzY3JvbGxiYXJcbiAgICovXG4gIHJldmVhbFNjcm9sbGJhcigpIHtcbiAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoXCJjb21wZW5zYXRlLWZvci1zY3JvbGxiYXJcIik7XG5cbiAgICBjb25zdCBlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZmFuY3lib3gtc3R5bGUtbm9zY3JvbGxcIik7XG5cbiAgICBpZiAoZWwpIHtcbiAgICAgIGVsLnJlbW92ZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgY29udGVudCBmb3IgZ2l2ZW4gc2xpZGVcbiAgICogQHBhcmFtIHtPYmplY3R9IHNsaWRlIC0gQ2Fyb3VzZWwgc2xpZGVcbiAgICovXG4gIGNsZWFyQ29udGVudChzbGlkZSkge1xuICAgIC8vICogQ2xlYXIgcHJldmlvdXNseSBhZGRlZCBjb250ZW50IGFuZCBjbGFzcyBuYW1lXG4gICAgdGhpcy5DYXJvdXNlbC50cmlnZ2VyKFwicmVtb3ZlU2xpZGVcIiwgc2xpZGUpO1xuXG4gICAgaWYgKHNsaWRlLiRjb250ZW50KSB7XG4gICAgICBzbGlkZS4kY29udGVudC5yZW1vdmUoKTtcbiAgICAgIHNsaWRlLiRjb250ZW50ID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoc2xpZGUuJGNsb3NlQnV0dG9uKSB7XG4gICAgICBzbGlkZS4kY2xvc2VCdXR0b24ucmVtb3ZlKCk7XG4gICAgICBzbGlkZS4kY2xvc2VCdXR0b24gPSBudWxsO1xuICAgIH1cblxuICAgIGlmIChzbGlkZS5fY2xhc3NOYW1lKSB7XG4gICAgICBzbGlkZS4kZWwuY2xhc3NMaXN0LnJlbW92ZShzbGlkZS5fY2xhc3NOYW1lKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2V0IG5ldyBjb250ZW50IGZvciBnaXZlbiBzbGlkZVxuICAgKiBAcGFyYW0ge09iamVjdH0gc2xpZGUgLSBDYXJvdXNlbCBzbGlkZVxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fFN0cmluZ30gaHRtbCAtIEhUTUwgZWxlbWVudCBvciBzdHJpbmcgY29udGFpbmluZyBIVE1MIGNvZGVcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRzXSAtIE9wdGlvbnNcbiAgICovXG4gIHNldENvbnRlbnQoc2xpZGUsIGh0bWwsIG9wdHMgPSB7fSkge1xuICAgIGxldCAkY29udGVudDtcblxuICAgIGNvbnN0ICRlbCA9IHNsaWRlLiRlbDtcblxuICAgIGlmIChodG1sIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgIGlmIChbXCJpbWdcIiwgXCJpZnJhbWVcIiwgXCJ2aWRlb1wiLCBcImF1ZGlvXCJdLmluZGV4T2YoaHRtbC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKSA+IC0xKSB7XG4gICAgICAgICRjb250ZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgJGNvbnRlbnQuYXBwZW5kQ2hpbGQoaHRtbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkY29udGVudCA9IGh0bWw7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0ICRmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCkuY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50KGh0bWwpO1xuXG4gICAgICAkY29udGVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAkY29udGVudC5hcHBlbmRDaGlsZCgkZnJhZ21lbnQpO1xuICAgIH1cblxuICAgIGlmIChzbGlkZS5maWx0ZXIgJiYgIXNsaWRlLmVycm9yKSB7XG4gICAgICAkY29udGVudCA9ICRjb250ZW50LnF1ZXJ5U2VsZWN0b3Ioc2xpZGUuZmlsdGVyKTtcbiAgICB9XG5cbiAgICBpZiAoISgkY29udGVudCBpbnN0YW5jZW9mIEVsZW1lbnQpKSB7XG4gICAgICB0aGlzLnNldEVycm9yKHNsaWRlLCBcInt7RUxFTUVOVF9OT1RfRk9VTkR9fVwiKTtcblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vICogQWRkIGNsYXNzIG5hbWUgaW5kaWNhdGluZyBjb250ZW50IHR5cGUsIGZvciBleGFtcGxlIGBoYXMtaW1hZ2VgXG4gICAgc2xpZGUuX2NsYXNzTmFtZSA9IGBoYXMtJHtvcHRzLnN1ZmZpeCB8fCBzbGlkZS50eXBlIHx8IFwidW5rbm93blwifWA7XG5cbiAgICAkZWwuY2xhc3NMaXN0LmFkZChzbGlkZS5fY2xhc3NOYW1lKTtcblxuICAgIC8vICogU2V0IGNvbnRlbnRcbiAgICAkY29udGVudC5jbGFzc0xpc3QuYWRkKFwiZmFuY3lib3hfX2NvbnRlbnRcIik7XG5cbiAgICAvLyBNYWtlIHN1cmUgdGhhdCBjb250ZW50IGlzIG5vdCBoaWRkZW4gYW5kIHdpbGwgYmUgdmlzaWJsZVxuICAgIGlmICgkY29udGVudC5zdHlsZS5kaXNwbGF5ID09PSBcIm5vbmVcIiB8fCBnZXRDb21wdXRlZFN0eWxlKCRjb250ZW50KS5nZXRQcm9wZXJ0eVZhbHVlKFwiZGlzcGxheVwiKSA9PT0gXCJub25lXCIpIHtcbiAgICAgICRjb250ZW50LnN0eWxlLmRpc3BsYXkgPSBzbGlkZS5kaXNwbGF5IHx8IHRoaXMub3B0aW9uKFwiZGVmYXVsdERpc3BsYXlcIikgfHwgXCJmbGV4XCI7XG4gICAgfVxuXG4gICAgaWYgKHNsaWRlLmlkKSB7XG4gICAgICAkY29udGVudC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBzbGlkZS5pZCk7XG4gICAgfVxuXG4gICAgc2xpZGUuJGNvbnRlbnQgPSAkY29udGVudDtcblxuICAgICRlbC5wcmVwZW5kKCRjb250ZW50KTtcblxuICAgIHRoaXMubWFuYWdlQ2xvc2VCdXR0b24oc2xpZGUpO1xuXG4gICAgaWYgKHNsaWRlLnN0YXRlICE9PSBcImxvYWRpbmdcIikge1xuICAgICAgdGhpcy5yZXZlYWxDb250ZW50KHNsaWRlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gJGNvbnRlbnQ7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGNsb3NlIGJ1dHRvbiBpZiBuZWVkZWRcbiAgICogQHBhcmFtIHtPYmplY3R9IHNsaWRlXG4gICAqL1xuICBtYW5hZ2VDbG9zZUJ1dHRvbihzbGlkZSkge1xuICAgIGNvbnN0IHBvc2l0aW9uID0gc2xpZGUuY2xvc2VCdXR0b24gPT09IHVuZGVmaW5lZCA/IHRoaXMub3B0aW9uKFwiY2xvc2VCdXR0b25cIikgOiBzbGlkZS5jbG9zZUJ1dHRvbjtcblxuICAgIGlmICghcG9zaXRpb24gfHwgKHBvc2l0aW9uID09PSBcInRvcFwiICYmIHRoaXMuJGNsb3NlQnV0dG9uKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0ICRidG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuXG4gICAgJGJ0bi5jbGFzc0xpc3QuYWRkKFwiY2Fyb3VzZWxfX2J1dHRvblwiLCBcImlzLWNsb3NlXCIpO1xuICAgICRidG4uc2V0QXR0cmlidXRlKFwidGl0bGVcIiwgdGhpcy5vcHRpb25zLmwxMG4uQ0xPU0UpO1xuICAgICRidG4uaW5uZXJIVE1MID0gdGhpcy5vcHRpb24oXCJ0ZW1wbGF0ZS5jbG9zZUJ1dHRvblwiKTtcblxuICAgICRidG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB0aGlzLmNsb3NlKGUpKTtcblxuICAgIGlmIChwb3NpdGlvbiA9PT0gXCJpbnNpZGVcIikge1xuICAgICAgLy8gUmVtb3ZlIGV4aXN0aW5nIG9uZSB0byBhdm9pZCBzY29wZSBpc3N1ZXNcbiAgICAgIGlmIChzbGlkZS4kY2xvc2VCdXR0b24pIHtcbiAgICAgICAgc2xpZGUuJGNsb3NlQnV0dG9uLnJlbW92ZSgpO1xuICAgICAgfVxuXG4gICAgICBzbGlkZS4kY2xvc2VCdXR0b24gPSBzbGlkZS4kY29udGVudC5hcHBlbmRDaGlsZCgkYnRuKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy4kY2xvc2VCdXR0b24gPSB0aGlzLiRjb250YWluZXIuaW5zZXJ0QmVmb3JlKCRidG4sIHRoaXMuJGNvbnRhaW5lci5maXJzdENoaWxkKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTWFrZSBjb250ZW50IHZpc2libGUgZm9yIGdpdmVuIHNsaWRlIGFuZCBvcHRpb25hbGx5IHN0YXJ0IENTUyBhbmltYXRpb25cbiAgICogQHBhcmFtIHtPYmplY3R9IHNsaWRlIC0gQ2Fyb3VzZWwgc2xpZGVcbiAgICovXG4gIHJldmVhbENvbnRlbnQoc2xpZGUpIHtcbiAgICB0aGlzLnRyaWdnZXIoXCJyZXZlYWxcIiwgc2xpZGUpO1xuXG4gICAgc2xpZGUuJGNvbnRlbnQuc3R5bGUudmlzaWJpbGl0eSA9IFwiXCI7XG5cbiAgICAvLyBBZGQgQ1NTIGNsYXNzIG5hbWUgdGhhdCByZXZlYWxzIGNvbnRlbnQgKGRlZmF1bHQgYW5pbWF0aW9uIGlzIFwiZmFkZUluXCIpXG4gICAgbGV0IHNob3dDbGFzcyA9IGZhbHNlO1xuXG4gICAgaWYgKFxuICAgICAgIShcbiAgICAgICAgc2xpZGUuZXJyb3IgfHxcbiAgICAgICAgc2xpZGUuc3RhdGUgPT09IFwibG9hZGluZ1wiIHx8XG4gICAgICAgIHRoaXMuQ2Fyb3VzZWwucHJldlBhZ2UgIT09IG51bGwgfHxcbiAgICAgICAgc2xpZGUuaW5kZXggIT09IHRoaXMub3B0aW9ucy5zdGFydEluZGV4XG4gICAgICApXG4gICAgKSB7XG4gICAgICBzaG93Q2xhc3MgPSBzbGlkZS5zaG93Q2xhc3MgPT09IHVuZGVmaW5lZCA/IHRoaXMub3B0aW9uKFwic2hvd0NsYXNzXCIpIDogc2xpZGUuc2hvd0NsYXNzO1xuICAgIH1cblxuICAgIGlmICghc2hvd0NsYXNzKSB7XG4gICAgICB0aGlzLmRvbmUoc2xpZGUpO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc2xpZGUuc3RhdGUgPSBcImFuaW1hdGluZ1wiO1xuXG4gICAgdGhpcy5hbmltYXRlQ1NTKHNsaWRlLiRjb250ZW50LCBzaG93Q2xhc3MsICgpID0+IHtcbiAgICAgIHRoaXMuZG9uZShzbGlkZSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQWRkIGNsYXNzIG5hbWUgdG8gZ2l2ZW4gSFRNTCBlbGVtZW50IGFuZCB3YWl0IGZvciBgYW5pbWF0aW9uZW5kYCBldmVudCB0byBleGVjdXRlIGNhbGxiYWNrXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9ICRlbFxuICAgKiBAcGFyYW0ge1N0cmluZ30gY2xhc3NOYW1lXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIC0gQSBjYWxsYmFjayB0byBydW5cbiAgICovXG4gIGFuaW1hdGVDU1MoJGVsZW1lbnQsIGNsYXNzTmFtZSwgY2FsbGJhY2spIHtcbiAgICBpZiAoJGVsZW1lbnQpIHtcbiAgICAgICRlbGVtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KFwiYW5pbWF0aW9uZW5kXCIsIHsgYnViYmxlczogdHJ1ZSwgY2FuY2VsYWJsZTogdHJ1ZSB9KSk7XG4gICAgfVxuXG4gICAgaWYgKCEkZWxlbWVudCB8fCAhY2xhc3NOYW1lKSB7XG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGhhbmRsZUFuaW1hdGlvbkVuZCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKGV2ZW50LmN1cnJlbnRUYXJnZXQgPT09IHRoaXMpIHtcbiAgICAgICAgJGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFuaW1hdGlvbmVuZFwiLCBoYW5kbGVBbmltYXRpb25FbmQpO1xuXG4gICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIH1cblxuICAgICAgICAkZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgICRlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJhbmltYXRpb25lbmRcIiwgaGFuZGxlQW5pbWF0aW9uRW5kKTtcbiAgICAkZWxlbWVudC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XG4gIH1cblxuICAvKipcbiAgICogTWFyayBnaXZlbiBzbGlkZSBhcyBgZG9uZWAsIGUuZy4sIGNvbnRlbnQgaXMgbG9hZGVkIGFuZCBkaXNwbGF5ZWQgY29tcGxldGVseVxuICAgKiBAcGFyYW0ge09iamVjdH0gc2xpZGUgLSBDYXJvdXNlbCBzbGlkZVxuICAgKi9cbiAgZG9uZShzbGlkZSkge1xuICAgIHNsaWRlLnN0YXRlID0gXCJkb25lXCI7XG5cbiAgICB0aGlzLnRyaWdnZXIoXCJkb25lXCIsIHNsaWRlKTtcblxuICAgIC8vIFRyaWdnZXIgZm9jdXMgZm9yIGN1cnJlbnQgc2xpZGUgKGFuZCBpZ25vcmUgcHJlbG9hZGVkIHNsaWRlcylcbiAgICBjb25zdCBjdXJyZW50U2xpZGUgPSB0aGlzLmdldFNsaWRlKCk7XG5cbiAgICBpZiAoY3VycmVudFNsaWRlICYmIHNsaWRlLmluZGV4ID09PSBjdXJyZW50U2xpZGUuaW5kZXggJiYgdGhpcy5vcHRpb24oXCJhdXRvRm9jdXNcIikpIHtcbiAgICAgIHRoaXMuZm9jdXMoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2V0IGVycm9yIG1lc3NhZ2UgYXMgc2xpZGUgY29udGVudFxuICAgKiBAcGFyYW0ge09iamVjdH0gc2xpZGUgLSBDYXJvdXNlbCBzbGlkZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSAtIEVycm9yIG1lc3NhZ2UsIGNhbiBjb250YWluIEhUTUwgY29kZSBhbmQgdGVtcGxhdGUgdmFyaWFibGVzXG4gICAqL1xuICBzZXRFcnJvcihzbGlkZSwgbWVzc2FnZSkge1xuICAgIHNsaWRlLmVycm9yID0gbWVzc2FnZTtcblxuICAgIHRoaXMuaGlkZUxvYWRpbmcoc2xpZGUpO1xuICAgIHRoaXMuY2xlYXJDb250ZW50KHNsaWRlKTtcblxuICAgIC8vIENyZWF0ZSBuZXcgY29udGVudFxuICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgZGl2LmNsYXNzTGlzdC5hZGQoXCJmYW5jeWJveC1lcnJvclwiKTtcbiAgICBkaXYuaW5uZXJIVE1MID0gdGhpcy5sb2NhbGl6ZShtZXNzYWdlIHx8IFwiPHA+e3tFUlJPUn19PC9wPlwiKTtcblxuICAgIHRoaXMuc2V0Q29udGVudChzbGlkZSwgZGl2LCB7IHN1ZmZpeDogXCJlcnJvclwiIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBsb2FkaW5nIGluZGljYXRvciBpbnNpZGUgZ2l2ZW4gc2xpZGVcbiAgICogQHBhcmFtIHtPYmplY3R9IHNsaWRlIC0gQ2Fyb3VzZWwgc2xpZGVcbiAgICovXG4gIHNob3dMb2FkaW5nKHNsaWRlKSB7XG4gICAgc2xpZGUuc3RhdGUgPSBcImxvYWRpbmdcIjtcblxuICAgIHNsaWRlLiRlbC5jbGFzc0xpc3QuYWRkKFwiaXMtbG9hZGluZ1wiKTtcblxuICAgIGxldCAkc3Bpbm5lciA9IHNsaWRlLiRlbC5xdWVyeVNlbGVjdG9yKFwiLmZhbmN5Ym94X19zcGlubmVyXCIpO1xuXG4gICAgaWYgKCRzcGlubmVyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgJHNwaW5uZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXG4gICAgJHNwaW5uZXIuY2xhc3NMaXN0LmFkZChcImZhbmN5Ym94X19zcGlubmVyXCIpO1xuICAgICRzcGlubmVyLmlubmVySFRNTCA9IHRoaXMub3B0aW9uKFwidGVtcGxhdGUuc3Bpbm5lclwiKTtcblxuICAgICRzcGlubmVyLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICBpZiAoIXRoaXMuQ2Fyb3VzZWwuUGFuem9vbS52ZWxvY2l0eSkgdGhpcy5jbG9zZSgpO1xuICAgIH0pO1xuXG4gICAgc2xpZGUuJGVsLnByZXBlbmQoJHNwaW5uZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBsb2FkaW5nIGluZGljYXRvciBmcm9tIGdpdmVuIHNsaWRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzbGlkZSAtIENhcm91c2VsIHNsaWRlXG4gICAqL1xuICBoaWRlTG9hZGluZyhzbGlkZSkge1xuICAgIGNvbnN0ICRzcGlubmVyID0gc2xpZGUuJGVsICYmIHNsaWRlLiRlbC5xdWVyeVNlbGVjdG9yKFwiLmZhbmN5Ym94X19zcGlubmVyXCIpO1xuXG4gICAgaWYgKCRzcGlubmVyKSB7XG4gICAgICAkc3Bpbm5lci5yZW1vdmUoKTtcblxuICAgICAgc2xpZGUuJGVsLmNsYXNzTGlzdC5yZW1vdmUoXCJpcy1sb2FkaW5nXCIpO1xuICAgIH1cblxuICAgIGlmIChzbGlkZS5zdGF0ZSA9PT0gXCJsb2FkaW5nXCIpIHtcbiAgICAgIHRoaXMudHJpZ2dlcihcImxvYWRcIiwgc2xpZGUpO1xuXG4gICAgICBzbGlkZS5zdGF0ZSA9IFwicmVhZHlcIjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2xpZGUgY2Fyb3VzZWwgdG8gbmV4dCBwYWdlXG4gICAqL1xuICBuZXh0KCkge1xuICAgIGNvbnN0IGNhcm91c2VsID0gdGhpcy5DYXJvdXNlbDtcblxuICAgIGlmIChjYXJvdXNlbCAmJiBjYXJvdXNlbC5wYWdlcy5sZW5ndGggPiAxKSB7XG4gICAgICBjYXJvdXNlbC5zbGlkZU5leHQoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2xpZGUgY2Fyb3VzZWwgdG8gcHJldmlvdXMgcGFnZVxuICAgKi9cbiAgcHJldigpIHtcbiAgICBjb25zdCBjYXJvdXNlbCA9IHRoaXMuQ2Fyb3VzZWw7XG5cbiAgICBpZiAoY2Fyb3VzZWwgJiYgY2Fyb3VzZWwucGFnZXMubGVuZ3RoID4gMSkge1xuICAgICAgY2Fyb3VzZWwuc2xpZGVQcmV2KCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNsaWRlIGNhcm91c2VsIHRvIHNlbGVjdGVkIHBhZ2Ugd2l0aCBvcHRpb25hbCBwYXJhbWV0ZXJzXG4gICAqIEV4YW1wbGVzOlxuICAgKiAgICBGYW5jeWJveC5nZXRJbnN0YW5jZSgpLmp1bXBUbygyKTtcbiAgICogICAgRmFuY3lib3guZ2V0SW5zdGFuY2UoKS5qdW1wVG8oMywge2ZyaWN0aW9uOiAwfSlcbiAgICogQHBhcmFtICB7Li4uYW55fSBhcmdzIC0gQXJndW1lbnRzIGZvciBDYXJvdXNlbCBgc2xpZGVUb2AgbWV0aG9kXG4gICAqL1xuICBqdW1wVG8oLi4uYXJncykge1xuICAgIGlmICh0aGlzLkNhcm91c2VsKSB0aGlzLkNhcm91c2VsLnNsaWRlVG8oLi4uYXJncyk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgY3VycmVudCBpbnN0YW5jZSBpcyB0cnlpbmcgdG8gY2xvc2Ugb3IgaXMgYWxyZWFkeSBjbG9zZWRcbiAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAqL1xuICBpc0Nsb3NpbmcoKSB7XG4gICAgcmV0dXJuIFtcImNsb3NpbmdcIiwgXCJjdXN0b21DbG9zaW5nXCIsIFwiZGVzdHJveVwiXS5pbmNsdWRlcyh0aGlzLnN0YXRlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiB0aGUgY3VycmVudCBpbnN0YW5jZSBpcyBub3QgYmxvY2tlZCBieSBhbm90aGVyIGluc3RhbmNlXG4gICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgKi9cbiAgaXNUb3Btb3N0KCkge1xuICAgIHJldHVybiBGYW5jeWJveC5nZXRJbnN0YW5jZSgpLmlkID09IHRoaXMuaWQ7XG4gIH1cblxuICAvKipcbiAgICogU3RhcnQgY2xvc2luZyB0aGUgY3VycmVudCBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge0V2ZW50fSBbZXZlbnRdIC0gT3B0aW9uYWwgY2xpY2sgZXZlbnRcbiAgICovXG4gIGNsb3NlKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50KSBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgLy8gRmlyc3QsIHN0b3AgZnVydGhlciBleGVjdXRpb24gaWYgdGhpcyBpbnN0YW5jZSBpcyBhbHJlYWR5IGNsb3NpbmdcbiAgICAvLyAodGhpcyBjYW4gaGFwcGVuIGlmLCBmb3IgZXhhbXBsZSwgdXNlciBjbGlja3MgY2xvc2UgYnV0dG9uIG11bHRpcGxlIHRpbWVzIHJlYWxseSBmYXN0KVxuICAgIGlmICh0aGlzLmlzQ2xvc2luZygpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gQWxsb3cgY2FsbGJhY2tzIGFuZC9vciBwbHVnaW5zIHRvIHByZXZlbnQgY2xvc2luZ1xuICAgIGlmICh0aGlzLnRyaWdnZXIoXCJzaG91bGRDbG9zZVwiLCBldmVudCkgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5zdGF0ZSA9IFwiY2xvc2luZ1wiO1xuXG4gICAgdGhpcy5DYXJvdXNlbC5QYW56b29tLmRlc3Ryb3koKTtcblxuICAgIHRoaXMuZGV0YWNoRXZlbnRzKCk7XG5cbiAgICB0aGlzLnRyaWdnZXIoXCJjbG9zaW5nXCIsIGV2ZW50KTtcblxuICAgIGlmICh0aGlzLnN0YXRlID09PSBcImRlc3Ryb3lcIikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFRyaWdnZXIgZGVmYXVsdCBDU1MgY2xvc2luZyBhbmltYXRpb24gZm9yIGJhY2tkcm9wIGFuZCBpbnRlcmZhY2UgZWxlbWVudHNcbiAgICB0aGlzLiRjb250YWluZXIuc2V0QXR0cmlidXRlKFwiYXJpYS1oaWRkZW5cIiwgXCJ0cnVlXCIpO1xuXG4gICAgdGhpcy4kY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJpcy1jbG9zaW5nXCIpO1xuXG4gICAgLy8gQ2xlYXIgaW5hY3RpdmUgc2xpZGVzXG4gICAgY29uc3QgY3VycmVudFNsaWRlID0gdGhpcy5nZXRTbGlkZSgpO1xuXG4gICAgdGhpcy5DYXJvdXNlbC5zbGlkZXMuZm9yRWFjaCgoc2xpZGUpID0+IHtcbiAgICAgIGlmIChzbGlkZS4kY29udGVudCAmJiBzbGlkZS5pbmRleCAhPT0gY3VycmVudFNsaWRlLmluZGV4KSB7XG4gICAgICAgIHRoaXMuQ2Fyb3VzZWwudHJpZ2dlcihcInJlbW92ZVNsaWRlXCIsIHNsaWRlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIFN0YXJ0IGRlZmF1bHQgY2xvc2luZyBhbmltYXRpb25cbiAgICBpZiAodGhpcy5zdGF0ZSA9PT0gXCJjbG9zaW5nXCIpIHtcbiAgICAgIGNvbnN0IGhpZGVDbGFzcyA9IGN1cnJlbnRTbGlkZS5oaWRlQ2xhc3MgPT09IHVuZGVmaW5lZCA/IHRoaXMub3B0aW9uKFwiaGlkZUNsYXNzXCIpIDogY3VycmVudFNsaWRlLmhpZGVDbGFzcztcblxuICAgICAgdGhpcy5hbmltYXRlQ1NTKFxuICAgICAgICBjdXJyZW50U2xpZGUuJGNvbnRlbnQsXG4gICAgICAgIGhpZGVDbGFzcyxcbiAgICAgICAgKCkgPT4ge1xuICAgICAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgICAgICB9LFxuICAgICAgICB0cnVlXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhbiB1cCBhZnRlciBjbG9zaW5nIGZhbmN5Ym94XG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIGlmICh0aGlzLnN0YXRlID09PSBcImRlc3Ryb3lcIikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuc3RhdGUgPSBcImRlc3Ryb3lcIjtcblxuICAgIHRoaXMudHJpZ2dlcihcImRlc3Ryb3lcIik7XG5cbiAgICBjb25zdCAkdHJpZ2dlciA9IHRoaXMub3B0aW9uKFwicGxhY2VGb2N1c0JhY2tcIikgPyB0aGlzLm9wdGlvbihcInRyaWdnZXJUYXJnZXRcIiwgdGhpcy5nZXRTbGlkZSgpLiR0cmlnZ2VyKSA6IG51bGw7XG5cbiAgICAvLyBEZXN0cm95IENhcm91c2VsIGFuZCB0aGVuIGRldGFjaCBwbHVnaW5zO1xuICAgIC8vICogTm90ZTogdGhpcyBvcmRlciBhbGxvd3MgcGx1Z2lucyB0byByZWNlaXZlIGByZW1vdmVTbGlkZWAgZXZlbnRcbiAgICB0aGlzLkNhcm91c2VsLmRlc3Ryb3koKTtcblxuICAgIHRoaXMuZGV0YWNoUGx1Z2lucygpO1xuXG4gICAgdGhpcy5DYXJvdXNlbCA9IG51bGw7XG5cbiAgICB0aGlzLm9wdGlvbnMgPSB7fTtcbiAgICB0aGlzLmV2ZW50cyA9IHt9O1xuXG4gICAgdGhpcy4kY29udGFpbmVyLnJlbW92ZSgpO1xuXG4gICAgdGhpcy4kY29udGFpbmVyID0gdGhpcy4kYmFja2Ryb3AgPSB0aGlzLiRjYXJvdXNlbCA9IG51bGw7XG5cbiAgICBpZiAoJHRyaWdnZXIpIHtcbiAgICAgIHNldEZvY3VzT24oJHRyaWdnZXIpO1xuICAgIH1cblxuICAgIGluc3RhbmNlcy5kZWxldGUodGhpcy5pZCk7XG5cbiAgICBjb25zdCBuZXh0SW5zdGFuY2UgPSBGYW5jeWJveC5nZXRJbnN0YW5jZSgpO1xuXG4gICAgaWYgKG5leHRJbnN0YW5jZSkge1xuICAgICAgbmV4dEluc3RhbmNlLmZvY3VzKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJ3aXRoLWZhbmN5Ym94XCIpO1xuICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZShcImlzLXVzaW5nLW1vdXNlXCIpO1xuXG4gICAgdGhpcy5yZXZlYWxTY3JvbGxiYXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgbmV3IEZhbmN5Ym94IGluc3RhbmNlIHdpdGggcHJvdmlkZWQgb3B0aW9uc1xuICAgKiBFeGFtcGxlOlxuICAgKiAgIEZhbmN5Ym94LnNob3coW3sgc3JjIDogJ2h0dHBzOi8vbGlwc3VtLmFwcC9pZC8xLzMwMHgyMjUnIH1dKTtcbiAgICogQHBhcmFtIHtBcnJheX0gaXRlbXMgLSBHYWxsZXJ5IGl0ZW1zXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBPcHRpb25hbCBjdXN0b20gb3B0aW9uc1xuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBGYW5jeWJveCBpbnN0YW5jZVxuICAgKi9cbiAgc3RhdGljIHNob3coaXRlbXMsIG9wdGlvbnMgPSB7fSkge1xuICAgIHJldHVybiBuZXcgRmFuY3lib3goaXRlbXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0cyBGYW5jeWJveCBpZiBldmVudCB0YXJnZXQgbWF0Y2hlcyBhbnkgb3BlbmVyIG9yIHRhcmdldCBpcyBgdHJpZ2dlciBlbGVtZW50YFxuICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCAtIENsaWNrIGV2ZW50XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBPcHRpb25hbCBjdXN0b20gb3B0aW9uc1xuICAgKi9cbiAgc3RhdGljIGZyb21FdmVudChldmVudCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgLy8gIEFsbG93IG90aGVyIHNjcmlwdHMgdG8gcHJldmVudCBzdGFydGluZyBmYW5jeWJveCBvbiBjbGlja1xuICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gRG9uJ3QgcnVuIGlmIHJpZ2h0LWNsaWNrXG4gICAgaWYgKGV2ZW50LmJ1dHRvbiAmJiBldmVudC5idXR0b24gIT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBJZ25vcmUgY29tbWFuZC9jb250cm9sICsgY2xpY2tcbiAgICBpZiAoZXZlbnQuY3RybEtleSB8fCBldmVudC5tZXRhS2V5IHx8IGV2ZW50LnNoaWZ0S2V5KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qgb3JpZ1RhcmdldCA9IGV2ZW50LmNvbXBvc2VkUGF0aCgpWzBdO1xuICAgIGxldCBldmVudFRhcmdldCA9IG9yaWdUYXJnZXQ7XG5cbiAgICAvLyBTdXBwb3J0IGB0cmlnZ2VyYCBlbGVtZW50LCBlLmcuLCBzdGFydCBmYW5jeWJveCBmcm9tIGRpZmZlcmVudCBET00gZWxlbWVudCwgZm9yIGV4YW1wbGUsXG4gICAgLy8gdG8gaGF2ZSBvbmUgcHJldmlldyBpbWFnZSBmb3IgaGlkZGVuIGltYWdlIGdhbGxlcnlcbiAgICBsZXQgdHJpZ2dlckdyb3VwTmFtZTtcblxuICAgIGlmIChcbiAgICAgIGV2ZW50VGFyZ2V0Lm1hdGNoZXMoXCJbZGF0YS1mYW5jeWJveC10cmlnZ2VyXVwiKSB8fFxuICAgICAgKGV2ZW50VGFyZ2V0ID0gZXZlbnRUYXJnZXQuY2xvc2VzdChcIltkYXRhLWZhbmN5Ym94LXRyaWdnZXJdXCIpKVxuICAgICkge1xuICAgICAgb3B0aW9ucy50cmlnZ2VyVGFyZ2V0ID0gZXZlbnRUYXJnZXQ7XG4gICAgICB0cmlnZ2VyR3JvdXBOYW1lID0gZXZlbnRUYXJnZXQgJiYgZXZlbnRUYXJnZXQuZGF0YXNldCAmJiBldmVudFRhcmdldC5kYXRhc2V0LmZhbmN5Ym94VHJpZ2dlcjtcbiAgICB9XG5cbiAgICBpZiAodHJpZ2dlckdyb3VwTmFtZSkge1xuICAgICAgY29uc3QgdHJpZ2dlckl0ZW1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChgW2RhdGEtZmFuY3lib3g9XCIke3RyaWdnZXJHcm91cE5hbWV9XCJdYCk7XG4gICAgICBjb25zdCB0cmlnZ2VySW5kZXggPSBwYXJzZUludChldmVudFRhcmdldC5kYXRhc2V0LmZhbmN5Ym94SW5kZXgsIDEwKSB8fCAwO1xuXG4gICAgICBldmVudFRhcmdldCA9IHRyaWdnZXJJdGVtcy5sZW5ndGggPyB0cmlnZ2VySXRlbXNbdHJpZ2dlckluZGV4XSA6IGV2ZW50VGFyZ2V0O1xuICAgIH1cblxuICAgIC8vICogVHJ5IHRvIGZpbmQgbWF0Y2hpbmcgb3BlbmVuZXJcbiAgICBsZXQgbWF0Y2hpbmdPcGVuZXI7XG4gICAgbGV0IHRhcmdldDtcblxuICAgIEFycmF5LmZyb20oRmFuY3lib3gub3BlbmVycy5rZXlzKCkpXG4gICAgICAucmV2ZXJzZSgpXG4gICAgICAuc29tZSgob3BlbmVyKSA9PiB7XG4gICAgICAgIHRhcmdldCA9IGV2ZW50VGFyZ2V0IHx8IG9yaWdUYXJnZXQ7XG5cbiAgICAgICAgbGV0IGZvdW5kID0gZmFsc2U7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAodGFyZ2V0IGluc3RhbmNlb2YgRWxlbWVudCAmJiAodHlwZW9mIG9wZW5lciA9PT0gXCJzdHJpbmdcIiB8fCBvcGVuZXIgaW5zdGFuY2VvZiBTdHJpbmcpKSB7XG4gICAgICAgICAgICAvLyBDaGFpbiBjbG9zZXN0KCkgdG8gZXZlbnQudGFyZ2V0IHRvIGZpbmQgYW5kIHJldHVybiB0aGUgcGFyZW50IGVsZW1lbnQsXG4gICAgICAgICAgICAvLyByZWdhcmRsZXNzIGlmIGNsaWNraW5nIG9uIHRoZSBjaGlsZCBlbGVtZW50cyAoaWNvbiwgbGFiZWwsIGV0YylcbiAgICAgICAgICAgIGZvdW5kID0gdGFyZ2V0Lm1hdGNoZXMob3BlbmVyKSB8fCAodGFyZ2V0ID0gdGFyZ2V0LmNsb3Nlc3Qob3BlbmVyKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnJvcikge31cblxuICAgICAgICBpZiAoZm91bmQpIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIG1hdGNoaW5nT3BlbmVyID0gb3BlbmVyO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSk7XG5cbiAgICBsZXQgcmV6ID0gZmFsc2U7XG5cbiAgICBpZiAobWF0Y2hpbmdPcGVuZXIpIHtcbiAgICAgIG9wdGlvbnMuZXZlbnQgPSBldmVudDtcbiAgICAgIG9wdGlvbnMudGFyZ2V0ID0gdGFyZ2V0O1xuXG4gICAgICB0YXJnZXQub3JpZ1RhcmdldCA9IG9yaWdUYXJnZXQ7XG5cbiAgICAgIHJleiA9IEZhbmN5Ym94LmZyb21PcGVuZXIobWF0Y2hpbmdPcGVuZXIsIG9wdGlvbnMpO1xuXG4gICAgICAvLyBDaGVjayBpZiB0aGUgbW91c2UgaXMgYmVpbmcgdXNlZFxuICAgICAgLy8gV2FpdGluZyBmb3IgYmV0dGVyIGJyb3dzZXIgc3VwcG9ydCBmb3IgYDpmb2N1cy12aXNpYmxlYCAtXG4gICAgICAvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvc2VsZWN0b3JzLTQvI3RoZS1mb2N1cy12aXNpYmxlLXBzZXVkb1xuICAgICAgY29uc3QgbmV4dEluc3RhbmNlID0gRmFuY3lib3guZ2V0SW5zdGFuY2UoKTtcblxuICAgICAgaWYgKG5leHRJbnN0YW5jZSAmJiBuZXh0SW5zdGFuY2Uuc3RhdGUgPT09IFwicmVhZHlcIiAmJiBldmVudC5kZXRhaWwpIHtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKFwiaXMtdXNpbmctbW91c2VcIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlejtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdGFydHMgRmFuY3lib3ggdXNpbmcgc2VsZWN0b3JcbiAgICogQHBhcmFtIHtTdHJpbmd9IG9wZW5lciAtIFZhbGlkIENTUyBzZWxlY3RvciBzdHJpbmdcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAtIE9wdGlvbmFsIGN1c3RvbSBvcHRpb25zXG4gICAqL1xuICBzdGF0aWMgZnJvbU9wZW5lcihvcGVuZXIsIG9wdGlvbnMgPSB7fSkge1xuICAgIC8vIENhbGxiYWNrIGZ1bmN0aW9uIGNhbGxlZCBvbmNlIGZvciBlYWNoIGdyb3VwIGVsZW1lbnQgdGhhdFxuICAgIC8vIDEpIGNvbnZlcnRzIGRhdGEgYXR0cmlidXRlcyB0byBib29sZWFuIG9yIEpTT05cbiAgICAvLyAyKSByZW1vdmVzIHZhbHVlcyB0aGF0IGNvdWxkIGNhdXNlIGlzc3Vlc1xuICAgIGNvbnN0IG1hcENhbGxiYWNrID0gZnVuY3Rpb24gKGVsKSB7XG4gICAgICBjb25zdCBmYWxzZVZhbHVlcyA9IFtcImZhbHNlXCIsIFwiMFwiLCBcIm5vXCIsIFwibnVsbFwiLCBcInVuZGVmaW5lZFwiXTtcbiAgICAgIGNvbnN0IHRydWVWYWx1ZXMgPSBbXCJ0cnVlXCIsIFwiMVwiLCBcInllc1wiXTtcblxuICAgICAgY29uc3QgZGF0YXNldCA9IE9iamVjdC5hc3NpZ24oe30sIGVsLmRhdGFzZXQpO1xuICAgICAgY29uc3Qgb3B0aW9ucyA9IHt9O1xuXG4gICAgICBmb3IgKGxldCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoZGF0YXNldCkpIHtcbiAgICAgICAgaWYgKGtleSA9PT0gXCJmYW5jeWJveFwiKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoa2V5ID09PSBcIndpZHRoXCIgfHwga2V5ID09PSBcImhlaWdodFwiKSB7XG4gICAgICAgICAgb3B0aW9uc1tgXyR7a2V5fWBdID0gdmFsdWU7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiIHx8IHZhbHVlIGluc3RhbmNlb2YgU3RyaW5nKSB7XG4gICAgICAgICAgaWYgKGZhbHNlVmFsdWVzLmluZGV4T2YodmFsdWUpID4gLTEpIHtcbiAgICAgICAgICAgIG9wdGlvbnNba2V5XSA9IGZhbHNlO1xuICAgICAgICAgIH0gZWxzZSBpZiAodHJ1ZVZhbHVlcy5pbmRleE9mKG9wdGlvbnNba2V5XSkgPiAtMSkge1xuICAgICAgICAgICAgb3B0aW9uc1trZXldID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgb3B0aW9uc1trZXldID0gSlNPTi5wYXJzZSh2YWx1ZSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgIG9wdGlvbnNba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvcHRpb25zW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZWwgaW5zdGFuY2VvZiBFbGVtZW50KSB7XG4gICAgICAgIG9wdGlvbnMuJHRyaWdnZXIgPSBlbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9wdGlvbnM7XG4gICAgfTtcblxuICAgIGxldCBpdGVtcyA9IFtdLFxuICAgICAgaW5kZXggPSBvcHRpb25zLnN0YXJ0SW5kZXggfHwgMCxcbiAgICAgIHRhcmdldCA9IG9wdGlvbnMudGFyZ2V0IHx8IG51bGw7XG5cbiAgICAvLyBHZXQgb3B0aW9uc1xuICAgIC8vID09PVxuICAgIG9wdGlvbnMgPSBleHRlbmQoe30sIG9wdGlvbnMsIEZhbmN5Ym94Lm9wZW5lcnMuZ2V0KG9wZW5lcikpO1xuXG4gICAgLy8gR2V0IG1hdGNoaW5nIG5vZGVzXG4gICAgLy8gPT09XG4gICAgY29uc3QgZ3JvdXBBbGwgPSBvcHRpb25zLmdyb3VwQWxsID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IG9wdGlvbnMuZ3JvdXBBbGw7XG5cbiAgICBjb25zdCBncm91cEF0dHIgPSBvcHRpb25zLmdyb3VwQXR0ciA9PT0gdW5kZWZpbmVkID8gXCJkYXRhLWZhbmN5Ym94XCIgOiBvcHRpb25zLmdyb3VwQXR0cjtcbiAgICBjb25zdCBncm91cFZhbHVlID0gZ3JvdXBBdHRyICYmIHRhcmdldCA/IHRhcmdldC5nZXRBdHRyaWJ1dGUoYCR7Z3JvdXBBdHRyfWApIDogXCJcIjtcblxuICAgIGlmICghdGFyZ2V0IHx8IGdyb3VwVmFsdWUgfHwgZ3JvdXBBbGwpIHtcbiAgICAgIGNvbnN0ICRyb290ID0gb3B0aW9ucy5yb290IHx8ICh0YXJnZXQgPyB0YXJnZXQuZ2V0Um9vdE5vZGUoKSA6IGRvY3VtZW50LmJvZHkpO1xuXG4gICAgICBpdGVtcyA9IFtdLnNsaWNlLmNhbGwoJHJvb3QucXVlcnlTZWxlY3RvckFsbChvcGVuZXIpKTtcbiAgICB9XG5cbiAgICBpZiAodGFyZ2V0ICYmICFncm91cEFsbCkge1xuICAgICAgaWYgKGdyb3VwVmFsdWUpIHtcbiAgICAgICAgaXRlbXMgPSBpdGVtcy5maWx0ZXIoKGVsKSA9PiBlbC5nZXRBdHRyaWJ1dGUoYCR7Z3JvdXBBdHRyfWApID09PSBncm91cFZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGl0ZW1zID0gW3RhcmdldF07XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFpdGVtcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBFeGl0IGlmIGN1cnJlbnQgaW5zdGFuY2UgaXMgdHJpZ2dlcmVkIGZyb20gdGhlIHNhbWUgZWxlbWVudFxuICAgIC8vID09PVxuICAgIGNvbnN0IGN1cnJlbnRJbnN0YW5jZSA9IEZhbmN5Ym94LmdldEluc3RhbmNlKCk7XG5cbiAgICBpZiAoY3VycmVudEluc3RhbmNlICYmIGl0ZW1zLmluZGV4T2YoY3VycmVudEluc3RhbmNlLm9wdGlvbnMuJHRyaWdnZXIpID4gLTEpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBTdGFydCBGYW5jeWJveFxuICAgIC8vID09PVxuXG4gICAgLy8gR2V0IGluZGV4IG9mIGN1cnJlbnQgaXRlbSBpbiB0aGUgZ2FsbGVyeVxuICAgIGluZGV4ID0gdGFyZ2V0ID8gaXRlbXMuaW5kZXhPZih0YXJnZXQpIDogaW5kZXg7XG5cbiAgICAvLyBDb252ZXJ0IGl0ZW1zIGluIGEgZm9ybWF0IHN1cHBvcnRlZCBieSBmYW5jeWJveFxuICAgIGl0ZW1zID0gaXRlbXMubWFwKG1hcENhbGxiYWNrKTtcblxuICAgIC8vICogQ3JlYXRlIG5ldyBmYW5jeWJveCBpbnN0YW5jZVxuICAgIHJldHVybiBuZXcgRmFuY3lib3goXG4gICAgICBpdGVtcyxcbiAgICAgIGV4dGVuZCh7fSwgb3B0aW9ucywge1xuICAgICAgICBzdGFydEluZGV4OiBpbmRleCxcbiAgICAgICAgJHRyaWdnZXI6IHRhcmdldCxcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBdHRhY2ggYSBjbGljayBoYW5kbGVyIGZ1bmN0aW9uIHRoYXQgc3RhcnRzIEZhbmN5Ym94IHRvIHRoZSBzZWxlY3RlZCBpdGVtcywgYXMgd2VsbCBhcyB0byBhbGwgZnV0dXJlIG1hdGNoaW5nIGVsZW1lbnRzLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gc2VsZWN0b3IgLSBTZWxlY3RvciB0aGF0IHNob3VsZCBtYXRjaCB0cmlnZ2VyIGVsZW1lbnRzXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBDdXN0b20gb3B0aW9uc1xuICAgKi9cbiAgc3RhdGljIGJpbmQoc2VsZWN0b3IsIG9wdGlvbnMgPSB7fSkge1xuICAgIGZ1bmN0aW9uIGF0dGFjaENsaWNrRXZlbnQoKSB7XG4gICAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBGYW5jeWJveC5mcm9tRXZlbnQsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBpZiAoIWNhblVzZURPTSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghRmFuY3lib3gub3BlbmVycy5zaXplKSB7XG4gICAgICBpZiAoL2NvbXBsZXRlfGludGVyYWN0aXZlfGxvYWRlZC8udGVzdChkb2N1bWVudC5yZWFkeVN0YXRlKSkge1xuICAgICAgICBhdHRhY2hDbGlja0V2ZW50KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCBhdHRhY2hDbGlja0V2ZW50KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBGYW5jeWJveC5vcGVuZXJzLnNldChzZWxlY3Rvciwgb3B0aW9ucyk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIHRoZSBjbGljayBoYW5kbGVyIHRoYXQgd2FzIGF0dGFjaGVkIHdpdGggYGJpbmQoKWBcbiAgICogQHBhcmFtIHtTdHJpbmd9IHNlbGVjdG9yIC0gQSBzZWxlY3RvciB3aGljaCBzaG91bGQgbWF0Y2ggdGhlIG9uZSBvcmlnaW5hbGx5IHBhc3NlZCB0byAuYmluZCgpXG4gICAqL1xuICBzdGF0aWMgdW5iaW5kKHNlbGVjdG9yKSB7XG4gICAgRmFuY3lib3gub3BlbmVycy5kZWxldGUoc2VsZWN0b3IpO1xuXG4gICAgaWYgKCFGYW5jeWJveC5vcGVuZXJzLnNpemUpIHtcbiAgICAgIEZhbmN5Ym94LmRlc3Ryb3koKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSW1tZWRpYXRlbHkgZGVzdHJveSBhbGwgaW5zdGFuY2VzICh3aXRob3V0IGNsb3NpbmcgYW5pbWF0aW9uKSBhbmQgY2xlYW4gdXAgYWxsIGJpbmRpbmdzLi5cbiAgICovXG4gIHN0YXRpYyBkZXN0cm95KCkge1xuICAgIGxldCBmYjtcblxuICAgIHdoaWxlICgoZmIgPSBGYW5jeWJveC5nZXRJbnN0YW5jZSgpKSkge1xuICAgICAgZmIuZGVzdHJveSgpO1xuICAgIH1cblxuICAgIEZhbmN5Ym94Lm9wZW5lcnMgPSBuZXcgTWFwKCk7XG5cbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBGYW5jeWJveC5mcm9tRXZlbnQsIGZhbHNlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZSBpbnN0YW5jZSBieSBpZGVudGlmaWVyIG9yIHRoZSB0b3AgbW9zdCBpbnN0YW5jZSwgaWYgaWRlbnRpZmllciBpcyBub3QgcHJvdmlkZWRcbiAgICogQHBhcmFtIHtTdHJpbmd8TnVtZXJpY30gW2lkXSAtIE9wdGlvbmFsIGluc3RhbmNlIGlkZW50aWZpZXJcbiAgICovXG4gIHN0YXRpYyBnZXRJbnN0YW5jZShpZCkge1xuICAgIGlmIChpZCkge1xuICAgICAgcmV0dXJuIGluc3RhbmNlcy5nZXQoaWQpO1xuICAgIH1cblxuICAgIGNvbnN0IGluc3RhbmNlID0gQXJyYXkuZnJvbShpbnN0YW5jZXMudmFsdWVzKCkpXG4gICAgICAucmV2ZXJzZSgpXG4gICAgICAuZmluZCgoaW5zdGFuY2UpID0+IHtcbiAgICAgICAgaWYgKCFpbnN0YW5jZS5pc0Nsb3NpbmcoKSkge1xuICAgICAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0pO1xuXG4gICAgcmV0dXJuIGluc3RhbmNlIHx8IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogQ2xvc2UgYWxsIG9yIHRvcG1vc3QgY3VycmVudGx5IGFjdGl2ZSBpbnN0YW5jZS5cbiAgICogQHBhcmFtIHtib29sZWFufSBbYWxsXSAtIEFsbCBvciBvbmx5IHRvcG1vc3QgYWN0aXZlIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7YW55fSBbYXJndW1lbnRzXSAtIE9wdGlvbmFsIGRhdGFcbiAgICovXG4gIHN0YXRpYyBjbG9zZShhbGwgPSB0cnVlLCBhcmdzKSB7XG4gICAgaWYgKGFsbCkge1xuICAgICAgZm9yIChjb25zdCBpbnN0YW5jZSBvZiBpbnN0YW5jZXMudmFsdWVzKCkpIHtcbiAgICAgICAgaW5zdGFuY2UuY2xvc2UoYXJncyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGluc3RhbmNlID0gRmFuY3lib3guZ2V0SW5zdGFuY2UoKTtcblxuICAgICAgaWYgKGluc3RhbmNlKSB7XG4gICAgICAgIGluc3RhbmNlLmNsb3NlKGFyZ3MpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTbGlkZSB0b3Btb3N0IGN1cnJlbnRseSBhY3RpdmUgaW5zdGFuY2UgdG8gbmV4dCBwYWdlXG4gICAqL1xuICBzdGF0aWMgbmV4dCgpIHtcbiAgICBjb25zdCBpbnN0YW5jZSA9IEZhbmN5Ym94LmdldEluc3RhbmNlKCk7XG5cbiAgICBpZiAoaW5zdGFuY2UpIHtcbiAgICAgIGluc3RhbmNlLm5leHQoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2xpZGUgdG9wbW9zdCBjdXJyZW50bHkgYWN0aXZlIGluc3RhbmNlIHRvIHByZXZpb3VzIHBhZ2VcbiAgICovXG4gIHN0YXRpYyBwcmV2KCkge1xuICAgIGNvbnN0IGluc3RhbmNlID0gRmFuY3lib3guZ2V0SW5zdGFuY2UoKTtcblxuICAgIGlmIChpbnN0YW5jZSkge1xuICAgICAgaW5zdGFuY2UucHJldigpO1xuICAgIH1cbiAgfVxufVxuXG4vLyBFeHBvc2UgdmVyc2lvblxuRmFuY3lib3gudmVyc2lvbiA9IFwiX19WRVJTSU9OX19cIjtcblxuLy8gRXhwb3NlIGRlZmF1bHRzXG5GYW5jeWJveC5kZWZhdWx0cyA9IGRlZmF1bHRzO1xuXG4vLyBFeHBvc2Ugb3BlbmVyc1xuRmFuY3lib3gub3BlbmVycyA9IG5ldyBNYXAoKTtcblxuLy8gQWRkIGRlZmF1bHQgcGx1Z2luc1xuRmFuY3lib3guUGx1Z2lucyA9IFBsdWdpbnM7XG5cbi8vIEF1dG8gaW5pdCB3aXRoIGRlZmF1bHQgb3B0aW9uc1xuRmFuY3lib3guYmluZChcIltkYXRhLWZhbmN5Ym94XVwiKTtcblxuLy8gUHJlcGFyZSBwbHVnaW5zXG5mb3IgKGNvbnN0IFtrZXksIFBsdWdpbl0gb2YgT2JqZWN0LmVudHJpZXMoRmFuY3lib3guUGx1Z2lucyB8fCB7fSkpIHtcbiAgaWYgKHR5cGVvZiBQbHVnaW4uY3JlYXRlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBQbHVnaW4uY3JlYXRlKEZhbmN5Ym94KTtcbiAgfVxufVxuXG5leHBvcnQgeyBGYW5jeWJveCB9O1xuIiwiZXhwb3J0IGRlZmF1bHQge1xyXG4gIENMT1NFOiBcIkNsb3NlXCIsXHJcbiAgTkVYVDogXCJOZXh0XCIsXHJcbiAgUFJFVjogXCJQcmV2aW91c1wiLFxyXG4gIE1PREFMOiBcIllvdSBjYW4gY2xvc2UgdGhpcyBtb2RhbCBjb250ZW50IHdpdGggdGhlIEVTQyBrZXlcIixcclxuICBFUlJPUjogXCJTb21ldGhpbmcgV2VudCBXcm9uZywgUGxlYXNlIFRyeSBBZ2FpbiBMYXRlclwiLFxyXG4gIElNQUdFX0VSUk9SOiBcIkltYWdlIE5vdCBGb3VuZFwiLFxyXG4gIEVMRU1FTlRfTk9UX0ZPVU5EOiBcIkhUTUwgRWxlbWVudCBOb3QgRm91bmRcIixcclxuICBBSkFYX05PVF9GT1VORDogXCJFcnJvciBMb2FkaW5nIEFKQVggOiBOb3QgRm91bmRcIixcclxuICBBSkFYX0ZPUkJJRERFTjogXCJFcnJvciBMb2FkaW5nIEFKQVggOiBGb3JiaWRkZW5cIixcclxuICBJRlJBTUVfRVJST1I6IFwiRXJyb3IgTG9hZGluZyBQYWdlXCIsXHJcbiAgVE9HR0xFX1pPT006IFwiVG9nZ2xlIHpvb20gbGV2ZWxcIixcclxuICBUT0dHTEVfVEhVTUJTOiBcIlRvZ2dsZSB0aHVtYm5haWxzXCIsXHJcbiAgVE9HR0xFX1NMSURFU0hPVzogXCJUb2dnbGUgc2xpZGVzaG93XCIsXHJcbiAgVE9HR0xFX0ZVTExTQ1JFRU46IFwiVG9nZ2xlIGZ1bGwtc2NyZWVuIG1vZGVcIixcclxuICBET1dOTE9BRDogXCJEb3dubG9hZFwiLFxyXG59O1xyXG4iLCJpbXBvcnQgeyBjYW5Vc2VET00gfSBmcm9tIFwiLi4vLi4vLi4vc2hhcmVkL3V0aWxzL2NhblVzZURPTS5qc1wiO1xuXG5leHBvcnQgY2xhc3MgSGFzaCB7XG4gIGNvbnN0cnVjdG9yKGZhbmN5Ym94KSB7XG4gICAgdGhpcy5mYW5jeWJveCA9IGZhbmN5Ym94O1xuXG4gICAgZm9yIChjb25zdCBtZXRob2ROYW1lIG9mIFtcIm9uQ2hhbmdlXCIsIFwib25DbG9zaW5nXCJdKSB7XG4gICAgICB0aGlzW21ldGhvZE5hbWVdID0gdGhpc1ttZXRob2ROYW1lXS5iaW5kKHRoaXMpO1xuICAgIH1cblxuICAgIHRoaXMuZXZlbnRzID0ge1xuICAgICAgaW5pdENhcm91c2VsOiB0aGlzLm9uQ2hhbmdlLFxuICAgICAgXCJDYXJvdXNlbC5jaGFuZ2VcIjogdGhpcy5vbkNoYW5nZSxcbiAgICAgIGNsb3Npbmc6IHRoaXMub25DbG9zaW5nLFxuICAgIH07XG5cbiAgICB0aGlzLmhhc0NyZWF0ZWRIaXN0b3J5ID0gZmFsc2U7XG4gICAgdGhpcy5vcmlnSGFzaCA9IFwiXCI7XG4gICAgdGhpcy50aW1lciA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogUHJvY2VzcyBgQ2Fyb3VzZWwucmVhZHlgIGFuZCBgQ2Fyb3VzZWwuY2hhbmdlYCBldmVudHMgdG8gdXBkYXRlIFVSTCBoYXNoXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBmYW5jeWJveFxuICAgKiBAcGFyYW0ge09iamVjdH0gY2Fyb3VzZWxcbiAgICovXG4gIG9uQ2hhbmdlKGZhbmN5Ym94KSB7XG4gICAgY29uc3QgY2Fyb3VzZWwgPSBmYW5jeWJveC5DYXJvdXNlbDtcblxuICAgIGlmICh0aGlzLnRpbWVyKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lcik7XG4gICAgfVxuXG4gICAgY29uc3QgZmlyc3RSdW4gPSBjYXJvdXNlbC5wcmV2UGFnZSA9PT0gbnVsbDtcbiAgICBjb25zdCBjdXJyZW50U2xpZGUgPSBmYW5jeWJveC5nZXRTbGlkZSgpO1xuXG4gICAgY29uc3QgY3VycmVudEhhc2ggPSBuZXcgVVJMKGRvY3VtZW50LlVSTCkuaGFzaDtcblxuICAgIGxldCBuZXdIYXNoID0gZmFsc2U7XG5cbiAgICBpZiAoY3VycmVudFNsaWRlLnNsdWcpIHtcbiAgICAgIG5ld0hhc2ggPSBcIiNcIiArIGN1cnJlbnRTbGlkZS5zbHVnO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBkYXRhc2V0ID0gY3VycmVudFNsaWRlLiR0cmlnZ2VyICYmIGN1cnJlbnRTbGlkZS4kdHJpZ2dlci5kYXRhc2V0O1xuICAgICAgY29uc3Qgc2x1ZyA9IGZhbmN5Ym94Lm9wdGlvbihcInNsdWdcIikgfHwgKGRhdGFzZXQgJiYgZGF0YXNldC5mYW5jeWJveCk7XG5cbiAgICAgIGlmIChzbHVnICYmIHNsdWcubGVuZ3RoICYmIHNsdWcgIT09IFwidHJ1ZVwiKSB7XG4gICAgICAgIG5ld0hhc2ggPSBcIiNcIiArIHNsdWcgKyAoY2Fyb3VzZWwuc2xpZGVzLmxlbmd0aCA+IDEgPyBcIi1cIiArIChjdXJyZW50U2xpZGUuaW5kZXggKyAxKSA6IFwiXCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChmaXJzdFJ1bikge1xuICAgICAgdGhpcy5vcmlnSGFzaCA9IGN1cnJlbnRIYXNoICE9PSBuZXdIYXNoID8gY3VycmVudEhhc2ggOiBcIlwiO1xuICAgIH1cblxuICAgIGlmIChuZXdIYXNoICYmIGN1cnJlbnRIYXNoICE9PSBuZXdIYXNoKSB7XG4gICAgICB0aGlzLnRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgd2luZG93Lmhpc3RvcnlbZmlyc3RSdW4gPyBcInB1c2hTdGF0ZVwiIDogXCJyZXBsYWNlU3RhdGVcIl0oXG4gICAgICAgICAgICB7fSxcbiAgICAgICAgICAgIGRvY3VtZW50LnRpdGxlLFxuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lICsgd2luZG93LmxvY2F0aW9uLnNlYXJjaCArIG5ld0hhc2hcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgaWYgKGZpcnN0UnVuKSB7XG4gICAgICAgICAgICB0aGlzLmhhc0NyZWF0ZWRIaXN0b3J5ID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICB9LCAzMDApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBQcm9jZXNzIGBjbG9zaW5nYCBldmVudCB0byBjbGVhbiB1cFxuICAgKi9cbiAgb25DbG9zaW5nKCkge1xuICAgIGlmICh0aGlzLnRpbWVyKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lcik7XG4gICAgfVxuXG4gICAgLy8gU2tpcCBpZiBjbG9zaW5nIGlzIHRyaWdnZXJlZCBieSBwcmVzc2luZyAgYnJvd3NlciBiYWNrIGJ1dHRvbiBvciBieSBjaGFuZ2luZyBoYXNoIG1hbnVhbGx5XG4gICAgaWYgKHRoaXMuaGFzU2lsZW50Q2xvc2UgPT09IHRydWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBSZXN0b3JlIG9yaWdpbmFsIHVybFxuICAgIHRyeSB7XG4gICAgICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUoXG4gICAgICAgIHt9LFxuICAgICAgICBkb2N1bWVudC50aXRsZSxcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lICsgd2luZG93LmxvY2F0aW9uLnNlYXJjaCArICh0aGlzLm9yaWdIYXNoIHx8IFwiXCIpXG4gICAgICApO1xuXG4gICAgICByZXR1cm47XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuXG4gIGF0dGFjaChmYW5jeWJveCkge1xuICAgIGZhbmN5Ym94Lm9uKHRoaXMuZXZlbnRzKTtcbiAgfVxuXG4gIGRldGFjaChmYW5jeWJveCkge1xuICAgIGZhbmN5Ym94Lm9mZih0aGlzLmV2ZW50cyk7XG4gIH1cblxuICAvKipcbiAgICogU3RhcnQgZmFuY3lib3ggZnJvbSBjdXJyZW50IFVSTCBoYXNoLFxuICAgKiB0aGlzIHdpbGwgYmUgY2FsbGVkIG9uIHBhZ2UgbG9hZCBPUi9BTkQgYWZ0ZXIgY2hhbmdpbmcgVVJMIGhhc2hcbiAgICogQHBhcmFtIHtDbGFzc30gRmFuY3lib3hcbiAgICovXG4gIHN0YXRpYyBzdGFydEZyb21VcmwoKSB7XG4gICAgY29uc3QgRmFuY3lib3ggPSBIYXNoLkZhbmN5Ym94O1xuXG4gICAgaWYgKCFGYW5jeWJveCB8fCBGYW5jeWJveC5nZXRJbnN0YW5jZSgpIHx8IEZhbmN5Ym94LmRlZmF1bHRzLkhhc2ggPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgeyBoYXNoLCBzbHVnLCBpbmRleCB9ID0gSGFzaC5nZXRQYXJzZWRVUkwoKTtcblxuICAgIGlmICghc2x1Zykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFN1cHBvcnQgY3VzdG9tIHNsdWdcbiAgICAvLyA9PT1cbiAgICBsZXQgc2VsZWN0ZWRFbGVtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgW2RhdGEtc2x1Zz1cIiR7aGFzaH1cIl1gKTtcblxuICAgIGlmIChzZWxlY3RlZEVsZW0pIHtcbiAgICAgIHNlbGVjdGVkRWxlbS5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChcImNsaWNrXCIsIHsgYnViYmxlczogdHJ1ZSwgY2FuY2VsYWJsZTogdHJ1ZSB9KSk7XG4gICAgfVxuXG4gICAgaWYgKEZhbmN5Ym94LmdldEluc3RhbmNlKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBJZiBlbGVtZW50cyBhcmUgbm90IGZvdW5kIGJ5IGN1c3RvbSBzbHVnLCB1c2UgVVJMIGhhc2ggdmFsdWUgYXMgZ3JvdXAgbmFtZVxuICAgIC8vID09PVxuICAgIGNvbnN0IGdyb3VwRWxlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGBbZGF0YS1mYW5jeWJveD1cIiR7c2x1Z31cIl1gKTtcblxuICAgIGlmICghZ3JvdXBFbGVtcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaW5kZXggPT09IG51bGwgJiYgZ3JvdXBFbGVtcy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHNlbGVjdGVkRWxlbSA9IGdyb3VwRWxlbXNbMF07XG4gICAgfSBlbHNlIGlmIChpbmRleCkge1xuICAgICAgc2VsZWN0ZWRFbGVtID0gZ3JvdXBFbGVtc1tpbmRleCAtIDFdO1xuICAgIH1cblxuICAgIGlmIChzZWxlY3RlZEVsZW0pIHtcbiAgICAgIHNlbGVjdGVkRWxlbS5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChcImNsaWNrXCIsIHsgYnViYmxlczogdHJ1ZSwgY2FuY2VsYWJsZTogdHJ1ZSB9KSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZSBgaGFzaGAgY2hhbmdlLCBjaGFuZ2UgZ2FsbGVyeSBpdGVtIHRvIGN1cnJlbnQgaW5kZXggb3Igc3RhcnQvY2xvc2UgY3VycmVudCBpbnN0YW5jZVxuICAgKi9cbiAgc3RhdGljIG9uSGFzaENoYW5nZSgpIHtcbiAgICBjb25zdCB7IHNsdWcsIGluZGV4IH0gPSBIYXNoLmdldFBhcnNlZFVSTCgpO1xuXG4gICAgY29uc3QgRmFuY3lib3ggPSBIYXNoLkZhbmN5Ym94O1xuICAgIGNvbnN0IGluc3RhbmNlID0gRmFuY3lib3ggJiYgRmFuY3lib3guZ2V0SW5zdGFuY2UoKTtcblxuICAgIGlmIChpbnN0YW5jZSAmJiBpbnN0YW5jZS5wbHVnaW5zLkhhc2gpIHtcbiAgICAgIC8vIENoZWNrIGlmIGhhc2ggbWF0Y2hlcyBjdXJyZW50bHkgYWN0aXZlIGdhbGxlcnlcbiAgICAgIGlmIChzbHVnKSB7XG4gICAgICAgIGNvbnN0IGNhcm91c2VsID0gaW5zdGFuY2UuQ2Fyb3VzZWw7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFN1cHBvcnQgbWFudWFsbHkgb3BlbmVkIGdhbGxlcnlcbiAgICAgICAgICovXG4gICAgICAgIGlmIChzbHVnID09PSBpbnN0YW5jZS5vcHRpb24oXCJzbHVnXCIpKSB7XG4gICAgICAgICAgcmV0dXJuIGNhcm91c2VsLnNsaWRlVG8oaW5kZXggLSAxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDaGVjayBpZiBVUkwgaGFzaCBtYXRjaGVzIGBkYXRhLXNsdWdgIHZhbHVlIG9mIGFjdGl2ZSBlbGVtZW50XG4gICAgICAgICAqL1xuICAgICAgICBmb3IgKGxldCBzbGlkZSBvZiBjYXJvdXNlbC5zbGlkZXMpIHtcbiAgICAgICAgICBpZiAoc2xpZGUuc2x1ZyAmJiBzbGlkZS5zbHVnID09PSBzbHVnKSB7XG4gICAgICAgICAgICByZXR1cm4gY2Fyb3VzZWwuc2xpZGVUbyhzbGlkZS5pbmRleCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENoZWNrIGlmIFVSTCBoYXNoIG1hdGNoZXMgYGRhdGEtZmFuY3lib3hgIHZhbHVlIG9mIGFjdGl2ZSBlbGVtZW50XG4gICAgICAgICAqL1xuICAgICAgICBjb25zdCBzbGlkZSA9IGluc3RhbmNlLmdldFNsaWRlKCk7XG4gICAgICAgIGNvbnN0IGRhdGFzZXQgPSBzbGlkZS4kdHJpZ2dlciAmJiBzbGlkZS4kdHJpZ2dlci5kYXRhc2V0O1xuXG4gICAgICAgIGlmIChkYXRhc2V0ICYmIGRhdGFzZXQuZmFuY3lib3ggPT09IHNsdWcpIHtcbiAgICAgICAgICByZXR1cm4gY2Fyb3VzZWwuc2xpZGVUbyhpbmRleCAtIDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQ2xvc2UgaWYgbm8gbWF0Y2hpbmcgZWxlbWVudCBmb3VuZFxuICAgICAgICovXG4gICAgICBpbnN0YW5jZS5wbHVnaW5zLkhhc2guaGFzU2lsZW50Q2xvc2UgPSB0cnVlO1xuXG4gICAgICBpbnN0YW5jZS5jbG9zZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEF0dGVtcHQgdG8gc3RhcnRcbiAgICAgKi9cbiAgICBIYXNoLnN0YXJ0RnJvbVVybCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBldmVudCBiaW5kaW5ncyB0aGF0IHdpbGwgc3RhcnQgbmV3IEZhbmN5Ym94IGluc3RhbmNlIGJhc2VkIGluIHRoZSBjdXJyZW50IFVSTFxuICAgKi9cbiAgc3RhdGljIGNyZWF0ZShGYW5jeWJveCkge1xuICAgIEhhc2guRmFuY3lib3ggPSBGYW5jeWJveDtcblxuICAgIGZ1bmN0aW9uIHByb2NlZWQoKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImhhc2hjaGFuZ2VcIiwgSGFzaC5vbkhhc2hDaGFuZ2UsIGZhbHNlKTtcblxuICAgICAgSGFzaC5zdGFydEZyb21VcmwoKTtcbiAgICB9XG5cbiAgICBpZiAoY2FuVXNlRE9NKSB7XG4gICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgaWYgKC9jb21wbGV0ZXxpbnRlcmFjdGl2ZXxsb2FkZWQvLnRlc3QoZG9jdW1lbnQucmVhZHlTdGF0ZSkpIHtcbiAgICAgICAgICBwcm9jZWVkKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgcHJvY2VlZCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBkZXN0cm95KCkge1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwiaGFzaGNoYW5nZVwiLCBIYXNoLm9uSGFzaENoYW5nZSwgZmFsc2UpO1xuICB9XG5cbiAgLyoqXG4gICAqIEhlbHBlciBtZXRob2QgdG8gc3BsaXQgVVJMIGhhc2ggaW50byB1c2VmdWwgcGllY2VzXG4gICAqL1xuICBzdGF0aWMgZ2V0UGFyc2VkVVJMKCkge1xuICAgIGNvbnN0IGhhc2ggPSB3aW5kb3cubG9jYXRpb24uaGFzaC5zdWJzdHIoMSksXG4gICAgICB0bXAgPSBoYXNoLnNwbGl0KFwiLVwiKSxcbiAgICAgIGluZGV4ID0gdG1wLmxlbmd0aCA+IDEgJiYgL15cXCs/XFxkKyQvLnRlc3QodG1wW3RtcC5sZW5ndGggLSAxXSkgPyBwYXJzZUludCh0bXAucG9wKC0xKSwgMTApIHx8IG51bGwgOiBudWxsLFxuICAgICAgc2x1ZyA9IHRtcC5qb2luKFwiLVwiKTtcblxuICAgIHJldHVybiB7XG4gICAgICBoYXNoLFxuICAgICAgc2x1ZyxcbiAgICAgIGluZGV4LFxuICAgIH07XG4gIH1cbn1cbiIsImltcG9ydCB7IGV4dGVuZCB9IGZyb20gXCIuLi8uLi8uLi9zaGFyZWQvdXRpbHMvZXh0ZW5kLmpzXCI7XG5cbmNvbnN0IGJ1aWxkVVJMUXVlcnkgPSAoc3JjLCBvYmopID0+IHtcbiAgY29uc3QgdXJsID0gbmV3IFVSTChzcmMpO1xuICBjb25zdCBwYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHVybC5zZWFyY2gpO1xuXG4gIGxldCByZXogPSBuZXcgVVJMU2VhcmNoUGFyYW1zKCk7XG5cbiAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgWy4uLnBhcmFtcywgLi4uT2JqZWN0LmVudHJpZXMob2JqKV0pIHtcbiAgICAvLyBZb3V0dWJlXG4gICAgaWYgKGtleSA9PT0gXCJ0XCIpIHtcbiAgICAgIHJlei5zZXQoXCJzdGFydFwiLCBwYXJzZUludCh2YWx1ZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXouc2V0KGtleSwgdmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIC8vIENvbnZlcnQgdG8gJ2Zvbz0xJmJhcj0yJmJhej0zJ1xuICByZXogPSByZXoudG9TdHJpbmcoKTtcblxuICAvLyBWaW1lb1xuICAvLyBodHRwczovL3ZpbWVvLnplbmRlc2suY29tL2hjL2VuLXVzL2FydGljbGVzLzM2MDAwMDEyMTY2OC1TdGFydGluZy1wbGF5YmFjay1hdC1hLXNwZWNpZmljLXRpbWVjb2RlXG4gIGxldCBtYXRjaGVzID0gc3JjLm1hdGNoKC8jdD0oKC4qKT9cXGQrcykvKTtcblxuICBpZiAobWF0Y2hlcykge1xuICAgIHJleiArPSBgI3Q9JHttYXRjaGVzWzFdfWA7XG4gIH1cblxuICByZXR1cm4gcmV6O1xufTtcblxuY29uc3QgZGVmYXVsdHMgPSB7XG4gIC8vIEdlbmVyYWwgb3B0aW9ucyBmb3IgYW55IHZpZGVvIGNvbnRlbnQgKFlvdXR1YmUsIFZpbWVvLCBIVE1MNSB2aWRlbylcbiAgdmlkZW86IHtcbiAgICBhdXRvcGxheTogdHJ1ZSxcbiAgICByYXRpbzogMTYgLyA5LFxuICB9LFxuICAvLyBZb3V0dWJlIGVtYmVkIHBhcmFtZXRlcnNcbiAgeW91dHViZToge1xuICAgIGF1dG9oaWRlOiAxLFxuICAgIGZzOiAxLFxuICAgIHJlbDogMCxcbiAgICBoZDogMSxcbiAgICB3bW9kZTogXCJ0cmFuc3BhcmVudFwiLFxuICAgIGVuYWJsZWpzYXBpOiAxLFxuICAgIGh0bWw1OiAxLFxuICB9LFxuICAvLyBWaW1lbyBlbWJlZCBwYXJhbWV0ZXJzXG4gIHZpbWVvOiB7XG4gICAgaGQ6IDEsXG4gICAgc2hvd190aXRsZTogMSxcbiAgICBzaG93X2J5bGluZTogMSxcbiAgICBzaG93X3BvcnRyYWl0OiAwLFxuICAgIGZ1bGxzY3JlZW46IDEsXG4gIH0sXG4gIC8vIEhUTUw1IHZpZGVvIHBhcmFtZXRlcnNcbiAgaHRtbDV2aWRlbzoge1xuICAgIHRwbDogYDx2aWRlbyBjbGFzcz1cImZhbmN5Ym94X19odG1sNXZpZGVvXCIgcGxheXNpbmxpbmUgY29udHJvbHMgY29udHJvbHNMaXN0PVwibm9kb3dubG9hZFwiIHBvc3Rlcj1cInt7cG9zdGVyfX1cIj5cbiAgPHNvdXJjZSBzcmM9XCJ7e3NyY319XCIgdHlwZT1cInt7Zm9ybWF0fX1cIiAvPlNvcnJ5LCB5b3VyIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IGVtYmVkZGVkIHZpZGVvcy48L3ZpZGVvPmAsXG4gICAgZm9ybWF0OiBcIlwiLFxuICB9LFxufTtcblxuZXhwb3J0IGNsYXNzIEh0bWwge1xuICBjb25zdHJ1Y3RvcihmYW5jeWJveCkge1xuICAgIHRoaXMuZmFuY3lib3ggPSBmYW5jeWJveDtcblxuICAgIGZvciAoY29uc3QgbWV0aG9kTmFtZSBvZiBbXG4gICAgICBcIm9uSW5pdFwiLFxuICAgICAgXCJvblJlYWR5XCIsXG5cbiAgICAgIFwib25DcmVhdGVTbGlkZVwiLFxuICAgICAgXCJvblJlbW92ZVNsaWRlXCIsXG5cbiAgICAgIFwib25TZWxlY3RTbGlkZVwiLFxuICAgICAgXCJvblVuc2VsZWN0U2xpZGVcIixcblxuICAgICAgXCJvblJlZnJlc2hcIixcblxuICAgICAgLy8gRm9yIGNvbW11bmljYXRpb24gd2l0aCBpZnJhbWVkIHZpZGVvICh5b3V0dWJlL3ZpbWVvKVxuICAgICAgXCJvbk1lc3NhZ2VcIixcbiAgICBdKSB7XG4gICAgICB0aGlzW21ldGhvZE5hbWVdID0gdGhpc1ttZXRob2ROYW1lXS5iaW5kKHRoaXMpO1xuICAgIH1cblxuICAgIHRoaXMuZXZlbnRzID0ge1xuICAgICAgaW5pdDogdGhpcy5vbkluaXQsXG4gICAgICByZWFkeTogdGhpcy5vblJlYWR5LFxuXG4gICAgICBcIkNhcm91c2VsLmNyZWF0ZVNsaWRlXCI6IHRoaXMub25DcmVhdGVTbGlkZSxcbiAgICAgIFwiQ2Fyb3VzZWwucmVtb3ZlU2xpZGVcIjogdGhpcy5vblJlbW92ZVNsaWRlLFxuXG4gICAgICBcIkNhcm91c2VsLnNlbGVjdFNsaWRlXCI6IHRoaXMub25TZWxlY3RTbGlkZSxcbiAgICAgIFwiQ2Fyb3VzZWwudW5zZWxlY3RTbGlkZVwiOiB0aGlzLm9uVW5zZWxlY3RTbGlkZSxcblxuICAgICAgXCJDYXJvdXNlbC5yZWZyZXNoXCI6IHRoaXMub25SZWZyZXNoLFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgZWFjaCBnYWxsZXJ5IGl0ZW0gaGFzIHR5cGUgd2hlbiBmYW5jeWJveCBzdGFydHNcbiAgICovXG4gIG9uSW5pdCgpIHtcbiAgICBmb3IgKGNvbnN0IHNsaWRlIG9mIHRoaXMuZmFuY3lib3guaXRlbXMpIHtcbiAgICAgIHRoaXMucHJvY2Vzc1R5cGUoc2xpZGUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgY29udGVudCB0eXBlIGZvciB0aGUgc2xpZGVcbiAgICogQHBhcmFtIHtPYmplY3R9IHNsaWRlXG4gICAqL1xuICBwcm9jZXNzVHlwZShzbGlkZSkge1xuICAgIC8vIEFkZCBzdXBwb3J0IGZvciBgbmV3IEZhbmN5Ym94KHtpdGVtcyA6IFt7aHRtbCA6ICdzbXRoJ31dfSk7YFxuICAgIGlmIChzbGlkZS5odG1sKSB7XG4gICAgICBzbGlkZS5zcmMgPSBzbGlkZS5odG1sO1xuICAgICAgc2xpZGUudHlwZSA9IFwiaHRtbFwiO1xuXG4gICAgICBkZWxldGUgc2xpZGUuaHRtbDtcblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHNyYyA9IHNsaWRlLnNyYyB8fCBcIlwiO1xuXG4gICAgbGV0IHR5cGUgPSBzbGlkZS50eXBlIHx8IHRoaXMuZmFuY3lib3gub3B0aW9ucy50eXBlLFxuICAgICAgcmV6ID0gbnVsbDtcblxuICAgIGlmIChzcmMgJiYgdHlwZW9mIHNyYyAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgIChyZXogPSBzcmMubWF0Y2goXG4gICAgICAgIC8oPzp5b3V0dWJlXFwuY29tfHlvdXR1XFwuYmV8eW91dHViZVxcLW5vY29va2llXFwuY29tKVxcLyg/OndhdGNoXFw/KD86LiomKT92PXx2XFwvfHVcXC98ZW1iZWRcXC8/KT8odmlkZW9zZXJpZXNcXD9saXN0PSg/Oi4qKXxbXFx3LV17MTF9fFxcP2xpc3RUeXBlPSg/Oi4qKSZsaXN0PSg/Oi4qKSkoPzouKikvaVxuICAgICAgKSlcbiAgICApIHtcbiAgICAgIGNvbnN0IHBhcmFtcyA9IGJ1aWxkVVJMUXVlcnkoc3JjLCB0aGlzLmZhbmN5Ym94Lm9wdGlvbihcIkh0bWwueW91dHViZVwiKSk7XG4gICAgICBjb25zdCB2aWRlb0lkID0gZW5jb2RlVVJJQ29tcG9uZW50KHJlelsxXSk7XG5cbiAgICAgIHNsaWRlLnZpZGVvSWQgPSB2aWRlb0lkO1xuICAgICAgc2xpZGUuc3JjID0gYGh0dHBzOi8vd3d3LnlvdXR1YmUtbm9jb29raWUuY29tL2VtYmVkLyR7dmlkZW9JZH0/JHtwYXJhbXN9YDtcbiAgICAgIHNsaWRlLnRodW1iID0gc2xpZGUudGh1bWIgfHwgYGh0dHBzOi8vaS55dGltZy5jb20vdmkvJHt2aWRlb0lkfS9tcWRlZmF1bHQuanBnYDtcbiAgICAgIHNsaWRlLnZlbmRvciA9IFwieW91dHViZVwiO1xuXG4gICAgICB0eXBlID0gXCJ2aWRlb1wiO1xuICAgIH0gZWxzZSBpZiAoKHJleiA9IHNyYy5tYXRjaCgvXi4rdmltZW8uY29tXFwvKD86XFwvKT8oW1xcZF0rKSguKik/LykpKSB7XG4gICAgICBjb25zdCBwYXJhbXMgPSBidWlsZFVSTFF1ZXJ5KHNyYywgdGhpcy5mYW5jeWJveC5vcHRpb24oXCJIdG1sLnZpbWVvXCIpKTtcbiAgICAgIGNvbnN0IHZpZGVvSWQgPSBlbmNvZGVVUklDb21wb25lbnQocmV6WzFdKTtcblxuICAgICAgc2xpZGUudmlkZW9JZCA9IHZpZGVvSWQ7XG4gICAgICBzbGlkZS5zcmMgPSBgaHR0cHM6Ly9wbGF5ZXIudmltZW8uY29tL3ZpZGVvLyR7dmlkZW9JZH0/JHtwYXJhbXN9YDtcbiAgICAgIHNsaWRlLnZlbmRvciA9IFwidmltZW9cIjtcblxuICAgICAgdHlwZSA9IFwidmlkZW9cIjtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgKHJleiA9IHNyYy5tYXRjaChcbiAgICAgICAgLyg/Om1hcHNcXC4pP2dvb2dsZVxcLihbYS16XXsyLDN9KD86XFwuW2Etel17Mn0pPylcXC8oPzooPzooPzptYXBzXFwvKD86cGxhY2VcXC8oPzouKilcXC8pP1xcQCguKiksKFxcZCsuP1xcZCs/KXopKXwoPzpcXD9sbD0pKSguKik/L2lcbiAgICAgICkpXG4gICAgKSB7XG4gICAgICBzbGlkZS5zcmMgPSBgLy9tYXBzLmdvb2dsZS4ke3JlelsxXX0vP2xsPSR7KHJlelsyXVxuICAgICAgICA/IHJlelsyXSArIFwiJno9XCIgKyBNYXRoLmZsb29yKHJlelszXSkgKyAocmV6WzRdID8gcmV6WzRdLnJlcGxhY2UoL15cXC8vLCBcIiZcIikgOiBcIlwiKVxuICAgICAgICA6IHJlels0XSArIFwiXCJcbiAgICAgICkucmVwbGFjZSgvXFw/LywgXCImXCIpfSZvdXRwdXQ9JHtyZXpbNF0gJiYgcmV6WzRdLmluZGV4T2YoXCJsYXllcj1jXCIpID4gMCA/IFwic3ZlbWJlZFwiIDogXCJlbWJlZFwifWA7XG5cbiAgICAgIHR5cGUgPSBcIm1hcFwiO1xuICAgIH0gZWxzZSBpZiAoKHJleiA9IHNyYy5tYXRjaCgvKD86bWFwc1xcLik/Z29vZ2xlXFwuKFthLXpdezIsM30oPzpcXC5bYS16XXsyfSk/KVxcLyg/Om1hcHNcXC9zZWFyY2hcXC8pKC4qKS9pKSkpIHtcbiAgICAgIHNsaWRlLnNyYyA9IGAvL21hcHMuZ29vZ2xlLiR7cmV6WzFdfS9tYXBzP3E9JHtyZXpbMl0ucmVwbGFjZShcInF1ZXJ5PVwiLCBcInE9XCIpLnJlcGxhY2UoXCJhcGk9MVwiLCBcIlwiKX0mb3V0cHV0PWVtYmVkYDtcblxuICAgICAgdHlwZSA9IFwibWFwXCI7XG4gICAgfVxuXG4gICAgLy8gR3Vlc3MgY29udGVudCB0eXBlXG4gICAgaWYgKCF0eXBlKSB7XG4gICAgICBpZiAoc3JjLmNoYXJBdCgwKSA9PT0gXCIjXCIpIHtcbiAgICAgICAgdHlwZSA9IFwiaW5saW5lXCI7XG4gICAgICB9IGVsc2UgaWYgKChyZXogPSBzcmMubWF0Y2goL1xcLihtcDR8bW92fG9ndnx3ZWJtKSgoXFw/fCMpLiopPyQvaSkpKSB7XG4gICAgICAgIHR5cGUgPSBcImh0bWw1dmlkZW9cIjtcblxuICAgICAgICBzbGlkZS5mb3JtYXQgPSBzbGlkZS5mb3JtYXQgfHwgXCJ2aWRlby9cIiArIChyZXpbMV0gPT09IFwib2d2XCIgPyBcIm9nZ1wiIDogcmV6WzFdKTtcbiAgICAgIH0gZWxzZSBpZiAoc3JjLm1hdGNoKC8oXmRhdGE6aW1hZ2VcXC9bYS16MC05K1xcLz1dKiwpfChcXC4oanAoZXxnfGVnKXxnaWZ8cG5nfGJtcHx3ZWJwfHN2Z3xpY28pKChcXD98IykuKik/JCkvaSkpIHtcbiAgICAgICAgdHlwZSA9IFwiaW1hZ2VcIjtcbiAgICAgIH0gZWxzZSBpZiAoc3JjLm1hdGNoKC9cXC4ocGRmKSgoXFw/fCMpLiopPyQvaSkpIHtcbiAgICAgICAgdHlwZSA9IFwicGRmXCI7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc2xpZGUudHlwZSA9IHR5cGUgfHwgdGhpcy5mYW5jeWJveC5vcHRpb24oXCJkZWZhdWx0VHlwZVwiLCBcImltYWdlXCIpO1xuXG4gICAgaWYgKHR5cGUgPT09IFwiaHRtbDV2aWRlb1wiIHx8IHR5cGUgPT09IFwidmlkZW9cIikge1xuICAgICAgc2xpZGUudmlkZW8gPSBleHRlbmQoe30sIHRoaXMuZmFuY3lib3gub3B0aW9uKFwiSHRtbC52aWRlb1wiKSwgc2xpZGUudmlkZW8pO1xuXG4gICAgICBpZiAoc2xpZGUuX3dpZHRoICYmIHNsaWRlLl9oZWlnaHQpIHtcbiAgICAgICAgc2xpZGUucmF0aW8gPSBwYXJzZUZsb2F0KHNsaWRlLl93aWR0aCkgLyBwYXJzZUZsb2F0KHNsaWRlLl9oZWlnaHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2xpZGUucmF0aW8gPSBzbGlkZS5yYXRpbyB8fCBzbGlkZS52aWRlby5yYXRpbyB8fCBkZWZhdWx0cy52aWRlby5yYXRpbztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU3RhcnQgbG9hZGluZyBjb250ZW50IHdoZW4gRmFuY3lib3ggaXMgcmVhZHlcbiAgICovXG4gIG9uUmVhZHkoKSB7XG4gICAgdGhpcy5mYW5jeWJveC5DYXJvdXNlbC5zbGlkZXMuZm9yRWFjaCgoc2xpZGUpID0+IHtcbiAgICAgIGlmIChzbGlkZS4kZWwpIHtcbiAgICAgICAgdGhpcy5zZXRDb250ZW50KHNsaWRlKTtcblxuICAgICAgICBpZiAoc2xpZGUuaW5kZXggPT09IHRoaXMuZmFuY3lib3guZ2V0U2xpZGUoKS5pbmRleCkge1xuICAgICAgICAgIHRoaXMucGxheVZpZGVvKHNsaWRlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFByb2Nlc3MgYENhcm91c2VsLmNyZWF0ZVNsaWRlYCBldmVudCB0byBjcmVhdGUgaW1hZ2UgY29udGVudFxuICAgKiBAcGFyYW0ge09iamVjdH0gZmFuY3lib3hcbiAgICogQHBhcmFtIHtPYmplY3R9IGNhcm91c2VsXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzbGlkZVxuICAgKi9cbiAgb25DcmVhdGVTbGlkZShmYW5jeWJveCwgY2Fyb3VzZWwsIHNsaWRlKSB7XG4gICAgaWYgKHRoaXMuZmFuY3lib3guc3RhdGUgIT09IFwicmVhZHlcIikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuc2V0Q29udGVudChzbGlkZSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0cmlldmUgYW5kIHNldCBzbGlkZSBjb250ZW50XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzbGlkZVxuICAgKi9cbiAgbG9hZElubGluZUNvbnRlbnQoc2xpZGUpIHtcbiAgICBsZXQgJGNvbnRlbnQ7XG5cbiAgICBpZiAoc2xpZGUuc3JjIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgICRjb250ZW50ID0gc2xpZGUuc3JjO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHNsaWRlLnNyYyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgY29uc3QgdG1wID0gc2xpZGUuc3JjLnNwbGl0KFwiI1wiLCAyKTtcbiAgICAgIGNvbnN0IGlkID0gdG1wLmxlbmd0aCA9PT0gMiAmJiB0bXBbMF0gPT09IFwiXCIgPyB0bXBbMV0gOiB0bXBbMF07XG5cbiAgICAgICRjb250ZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpO1xuICAgIH1cblxuICAgIGlmICgkY29udGVudCkge1xuICAgICAgaWYgKHNsaWRlLnR5cGUgPT09IFwiY2xvbmVcIiB8fCAkY29udGVudC4kcGxhY2VIb2xkZXIpIHtcbiAgICAgICAgJGNvbnRlbnQgPSAkY29udGVudC5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICAgIGxldCBhdHRySWQgPSAkY29udGVudC5nZXRBdHRyaWJ1dGUoXCJpZFwiKTtcblxuICAgICAgICBhdHRySWQgPSBhdHRySWQgPyBgJHthdHRySWR9LS1jbG9uZWAgOiBgY2xvbmUtJHt0aGlzLmZhbmN5Ym94LmlkfS0ke3NsaWRlLmluZGV4fWA7XG5cbiAgICAgICAgJGNvbnRlbnQuc2V0QXR0cmlidXRlKFwiaWRcIiwgYXR0cklkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0ICRwbGFjZUhvbGRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICRwbGFjZUhvbGRlci5jbGFzc0xpc3QuYWRkKFwiZmFuY3lib3gtcGxhY2Vob2xkZXJcIik7XG4gICAgICAgICRjb250ZW50LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCRwbGFjZUhvbGRlciwgJGNvbnRlbnQpO1xuICAgICAgICAkY29udGVudC4kcGxhY2VIb2xkZXIgPSAkcGxhY2VIb2xkZXI7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZmFuY3lib3guc2V0Q29udGVudChzbGlkZSwgJGNvbnRlbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmZhbmN5Ym94LnNldEVycm9yKHNsaWRlLCBcInt7RUxFTUVOVF9OT1RfRk9VTkR9fVwiKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTWFrZXMgQUpBWCByZXF1ZXN0IGFuZCBzZXRzIHJlc3BvbnNlIGFzIHNsaWRlIGNvbnRlbnRcbiAgICogQHBhcmFtIHtPYmplY3R9IHNsaWRlXG4gICAqL1xuICBsb2FkQWpheENvbnRlbnQoc2xpZGUpIHtcbiAgICBjb25zdCBmYW5jeWJveCA9IHRoaXMuZmFuY3lib3g7XG4gICAgY29uc3QgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICBmYW5jeWJveC5zaG93TG9hZGluZyhzbGlkZSk7XG5cbiAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSBYTUxIdHRwUmVxdWVzdC5ET05FKSB7XG4gICAgICAgIGlmIChmYW5jeWJveC5zdGF0ZSA9PT0gXCJyZWFkeVwiKSB7XG4gICAgICAgICAgZmFuY3lib3guaGlkZUxvYWRpbmcoc2xpZGUpO1xuXG4gICAgICAgICAgaWYgKHhoci5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgZmFuY3lib3guc2V0Q29udGVudChzbGlkZSwgeGhyLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZhbmN5Ym94LnNldEVycm9yKHNsaWRlLCB4aHIuc3RhdHVzID09PSA0MDQgPyBcInt7QUpBWF9OT1RfRk9VTkR9fVwiIDogXCJ7e0FKQVhfRk9SQklEREVOfX1cIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIGNvbnN0IGRhdGEgPSBzbGlkZS5hamF4IHx8IG51bGw7XG5cbiAgICB4aHIub3BlbihkYXRhID8gXCJQT1NUXCIgOiBcIkdFVFwiLCBzbGlkZS5zcmMpO1xuICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIpO1xuICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKFwiWC1SZXF1ZXN0ZWQtV2l0aFwiLCBcIlhNTEh0dHBSZXF1ZXN0XCIpO1xuICAgIHhoci5zZW5kKGRhdGEpO1xuXG4gICAgc2xpZGUueGhyID0geGhyO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgaWZyYW1lIGFzIHNsaWRlIGNvbnRlbnQsIHByZWxvYWRzIGlmIG5lZWRlZCBiZWZvcmUgZGlzcGxheWluZ1xuICAgKiBAcGFyYW0ge09iamVjdH0gc2xpZGVcbiAgICovXG4gIGxvYWRJZnJhbWVDb250ZW50KHNsaWRlKSB7XG4gICAgY29uc3QgZmFuY3lib3ggPSB0aGlzLmZhbmN5Ym94O1xuICAgIGNvbnN0ICRpZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaWZyYW1lXCIpO1xuXG4gICAgJGlmcmFtZS5jbGFzc05hbWUgPSBcImZhbmN5Ym94X19pZnJhbWVcIjtcblxuICAgICRpZnJhbWUuc2V0QXR0cmlidXRlKFwiaWRcIiwgYGZhbmN5Ym94X19pZnJhbWVfJHtmYW5jeWJveC5pZH1fJHtzbGlkZS5pbmRleH1gKTtcblxuICAgICRpZnJhbWUuc2V0QXR0cmlidXRlKFwiYWxsb3dcIiwgXCJhdXRvcGxheTsgZnVsbHNjcmVlblwiKTtcbiAgICAkaWZyYW1lLnNldEF0dHJpYnV0ZShcInNjcm9sbGluZ1wiLCBcImF1dG9cIik7XG5cbiAgICBzbGlkZS4kaWZyYW1lID0gJGlmcmFtZTtcblxuICAgIGlmIChzbGlkZS50eXBlICE9PSBcImlmcmFtZVwiIHx8IHNsaWRlLnByZWxvYWQgPT09IGZhbHNlKSB7XG4gICAgICAkaWZyYW1lLnNldEF0dHJpYnV0ZShcInNyY1wiLCBzbGlkZS5zcmMpO1xuXG4gICAgICB0aGlzLmZhbmN5Ym94LnNldENvbnRlbnQoc2xpZGUsICRpZnJhbWUpO1xuXG4gICAgICB0aGlzLnJlc2l6ZUlmcmFtZShzbGlkZSk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmYW5jeWJveC5zaG93TG9hZGluZyhzbGlkZSk7XG5cbiAgICBjb25zdCAkY29udGVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgJGNvbnRlbnQuc3R5bGUudmlzaWJpbGl0eSA9IFwiaGlkZGVuXCI7XG5cbiAgICB0aGlzLmZhbmN5Ym94LnNldENvbnRlbnQoc2xpZGUsICRjb250ZW50KTtcblxuICAgICRjb250ZW50LmFwcGVuZENoaWxkKCRpZnJhbWUpO1xuXG4gICAgJGlmcmFtZS5vbmVycm9yID0gKCkgPT4ge1xuICAgICAgZmFuY3lib3guc2V0RXJyb3Ioc2xpZGUsIFwie3tJRlJBTUVfRVJST1J9fVwiKTtcbiAgICB9O1xuXG4gICAgJGlmcmFtZS5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICBmYW5jeWJveC5oaWRlTG9hZGluZyhzbGlkZSk7XG5cbiAgICAgIGxldCBpc0ZpcnN0TG9hZCA9IGZhbHNlO1xuXG4gICAgICBpZiAoISRpZnJhbWUuaXNSZWFkeSkge1xuICAgICAgICAkaWZyYW1lLmlzUmVhZHkgPSB0cnVlO1xuICAgICAgICBpc0ZpcnN0TG9hZCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmICghJGlmcmFtZS5zcmMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgJGlmcmFtZS5wYXJlbnROb2RlLnN0eWxlLnZpc2liaWxpdHkgPSBcIlwiO1xuXG4gICAgICB0aGlzLnJlc2l6ZUlmcmFtZShzbGlkZSk7XG5cbiAgICAgIGlmIChpc0ZpcnN0TG9hZCkge1xuICAgICAgICBmYW5jeWJveC5yZXZlYWxDb250ZW50KHNsaWRlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgJGlmcmFtZS5zZXRBdHRyaWJ1dGUoXCJzcmNcIiwgc2xpZGUuc3JjKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgQ1NTIG1heC9taW4gd2lkdGgvaGVpZ2h0IHByb3BlcnRpZXMgb2YgdGhlIGNvbnRlbnQgdG8gaGF2ZSB0aGUgY29ycmVjdCBhc3BlY3QgcmF0aW9cbiAgICogQHBhcmFtIHtPYmplY3R9IHNsaWRlXG4gICAqL1xuICBzZXRBc3BlY3RSYXRpbyhzbGlkZSkge1xuICAgIGNvbnN0ICRjb250ZW50ID0gc2xpZGUuJGNvbnRlbnQ7XG4gICAgY29uc3QgcmF0aW8gPSBzbGlkZS5yYXRpbztcblxuICAgIGlmICghJGNvbnRlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgd2lkdGggPSBzbGlkZS5fd2lkdGg7XG4gICAgbGV0IGhlaWdodCA9IHNsaWRlLl9oZWlnaHQ7XG5cbiAgICBpZiAocmF0aW8gfHwgKHdpZHRoICYmIGhlaWdodCkpIHtcbiAgICAgIE9iamVjdC5hc3NpZ24oJGNvbnRlbnQuc3R5bGUsIHtcbiAgICAgICAgd2lkdGg6IHdpZHRoICYmIGhlaWdodCA/IFwiMTAwJVwiIDogXCJcIixcbiAgICAgICAgaGVpZ2h0OiB3aWR0aCAmJiBoZWlnaHQgPyBcIjEwMCVcIiA6IFwiXCIsXG4gICAgICAgIG1heFdpZHRoOiBcIlwiLFxuICAgICAgICBtYXhIZWlnaHQ6IFwiXCIsXG4gICAgICB9KTtcblxuICAgICAgbGV0IG1heFdpZHRoID0gJGNvbnRlbnQub2Zmc2V0V2lkdGg7XG4gICAgICBsZXQgbWF4SGVpZ2h0ID0gJGNvbnRlbnQub2Zmc2V0SGVpZ2h0O1xuXG4gICAgICB3aWR0aCA9IHdpZHRoIHx8IG1heFdpZHRoO1xuICAgICAgaGVpZ2h0ID0gaGVpZ2h0IHx8IG1heEhlaWdodDtcblxuICAgICAgLy8gUmVzaXplIHRvIGZpdFxuICAgICAgaWYgKHdpZHRoID4gbWF4V2lkdGggfHwgaGVpZ2h0ID4gbWF4SGVpZ2h0KSB7XG4gICAgICAgIGxldCBtYXhSYXRpbyA9IE1hdGgubWluKG1heFdpZHRoIC8gd2lkdGgsIG1heEhlaWdodCAvIGhlaWdodCk7XG5cbiAgICAgICAgd2lkdGggPSB3aWR0aCAqIG1heFJhdGlvO1xuICAgICAgICBoZWlnaHQgPSBoZWlnaHQgKiBtYXhSYXRpbztcbiAgICAgIH1cblxuICAgICAgLy8gUmVjaGVjayByYXRpb1xuICAgICAgaWYgKE1hdGguYWJzKHdpZHRoIC8gaGVpZ2h0IC0gcmF0aW8pID4gMC4wMSkge1xuICAgICAgICBpZiAocmF0aW8gPCB3aWR0aCAvIGhlaWdodCkge1xuICAgICAgICAgIHdpZHRoID0gaGVpZ2h0ICogcmF0aW87XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaGVpZ2h0ID0gd2lkdGggLyByYXRpbztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBPYmplY3QuYXNzaWduKCRjb250ZW50LnN0eWxlLCB7XG4gICAgICAgIHdpZHRoOiBgJHt3aWR0aH1weGAsXG4gICAgICAgIGhlaWdodDogYCR7aGVpZ2h0fXB4YCxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBZGp1c3QgdGhlIHdpZHRoIGFuZCBoZWlnaHQgb2YgdGhlIGlmcmFtZSBhY2NvcmRpbmcgdG8gdGhlIGNvbnRlbnQgZGltZW5zaW9ucywgb3IgZGVmaW5lZCBzaXplc1xuICAgKiBAcGFyYW0ge09iamVjdH0gc2xpZGVcbiAgICovXG4gIHJlc2l6ZUlmcmFtZShzbGlkZSkge1xuICAgIGNvbnN0ICRpZnJhbWUgPSBzbGlkZS4kaWZyYW1lO1xuXG4gICAgaWYgKCEkaWZyYW1lKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IHdpZHRoXyA9IHNsaWRlLl93aWR0aCB8fCAwO1xuICAgIGxldCBoZWlnaHRfID0gc2xpZGUuX2hlaWdodCB8fCAwO1xuXG4gICAgaWYgKHdpZHRoXyAmJiBoZWlnaHRfKSB7XG4gICAgICBzbGlkZS5hdXRvU2l6ZSA9IGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnN0ICRwYXJlbnQgPSAkaWZyYW1lLnBhcmVudE5vZGU7XG4gICAgY29uc3QgcGFyZW50U3R5bGUgPSAkcGFyZW50ICYmICRwYXJlbnQuc3R5bGU7XG5cbiAgICBpZiAoc2xpZGUucHJlbG9hZCAhPT0gZmFsc2UgJiYgc2xpZGUuYXV0b1NpemUgIT09IGZhbHNlICYmIHBhcmVudFN0eWxlKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBjb21wU3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoJHBhcmVudCksXG4gICAgICAgICAgcGFkZGluZ1ggPSBwYXJzZUZsb2F0KGNvbXBTdHlsZXMucGFkZGluZ0xlZnQpICsgcGFyc2VGbG9hdChjb21wU3R5bGVzLnBhZGRpbmdSaWdodCksXG4gICAgICAgICAgcGFkZGluZ1kgPSBwYXJzZUZsb2F0KGNvbXBTdHlsZXMucGFkZGluZ1RvcCkgKyBwYXJzZUZsb2F0KGNvbXBTdHlsZXMucGFkZGluZ0JvdHRvbSk7XG5cbiAgICAgICAgY29uc3QgZG9jdW1lbnQgPSAkaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQsXG4gICAgICAgICAgJGh0bWwgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImh0bWxcIilbMF0sXG4gICAgICAgICAgJGJvZHkgPSBkb2N1bWVudC5ib2R5O1xuXG4gICAgICAgIC8vIEFsbG93IGNvbnRlbnQgdG8gZXhwYW5kIGhvcml6b250YWxseVxuICAgICAgICBwYXJlbnRTdHlsZS53aWR0aCA9IFwiXCI7XG5cbiAgICAgICAgLy8gR2V0IHJpZCBvZiB2ZXJ0aWNhbCBzY3JvbGxiYXJcbiAgICAgICAgJGJvZHkuc3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xuXG4gICAgICAgIHdpZHRoXyA9IHdpZHRoXyB8fCAkaHRtbC5zY3JvbGxXaWR0aCArIHBhZGRpbmdYO1xuXG4gICAgICAgIHBhcmVudFN0eWxlLndpZHRoID0gYCR7d2lkdGhffXB4YDtcblxuICAgICAgICAkYm9keS5zdHlsZS5vdmVyZmxvdyA9IFwiXCI7XG5cbiAgICAgICAgcGFyZW50U3R5bGUuZmxleCA9IFwiMCAwIGF1dG9cIjtcbiAgICAgICAgcGFyZW50U3R5bGUuaGVpZ2h0ID0gYCR7JGJvZHkuc2Nyb2xsSGVpZ2h0fXB4YDtcblxuICAgICAgICBoZWlnaHRfID0gJGh0bWwuc2Nyb2xsSGVpZ2h0ICsgcGFkZGluZ1k7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAvL1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh3aWR0aF8gfHwgaGVpZ2h0Xykge1xuICAgICAgY29uc3QgbmV3U3R5bGUgPSB7XG4gICAgICAgIGZsZXg6IFwiMCAxIGF1dG9cIixcbiAgICAgIH07XG5cbiAgICAgIGlmICh3aWR0aF8pIHtcbiAgICAgICAgbmV3U3R5bGUud2lkdGggPSBgJHt3aWR0aF99cHhgO1xuICAgICAgfVxuXG4gICAgICBpZiAoaGVpZ2h0Xykge1xuICAgICAgICBuZXdTdHlsZS5oZWlnaHQgPSBgJHtoZWlnaHRffXB4YDtcbiAgICAgIH1cblxuICAgICAgT2JqZWN0LmFzc2lnbihwYXJlbnRTdHlsZSwgbmV3U3R5bGUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBQcm9jZXNzIGBDYXJvdXNlbC5vblJlZnJlc2hgIGV2ZW50LFxuICAgKiB0cmlnZ2VyIGlmcmFtZSBhdXRvc2l6aW5nIGFuZCBzZXQgY29udGVudCBhc3BlY3QgcmF0aW8gZm9yIGVhY2ggc2xpZGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGZhbmN5Ym94XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjYXJvdXNlbFxuICAgKi9cbiAgb25SZWZyZXNoKGZhbmN5Ym94LCBjYXJvdXNlbCkge1xuICAgIGNhcm91c2VsLnNsaWRlcy5mb3JFYWNoKChzbGlkZSkgPT4ge1xuICAgICAgaWYgKCFzbGlkZS4kZWwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2xpZGUuJGlmcmFtZSkge1xuICAgICAgICB0aGlzLnJlc2l6ZUlmcmFtZShzbGlkZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzbGlkZS5yYXRpbykge1xuICAgICAgICB0aGlzLnNldEFzcGVjdFJhdGlvKHNsaWRlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcm9jZXNzIGBDYXJvdXNlbC5vbkNyZWF0ZVNsaWRlYCBldmVudCB0byBzZXQgY29udGVudFxuICAgKiBAcGFyYW0ge09iamVjdH0gZmFuY3lib3hcbiAgICogQHBhcmFtIHtPYmplY3R9IGNhcm91c2VsXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzbGlkZVxuICAgKi9cbiAgc2V0Q29udGVudChzbGlkZSkge1xuICAgIGlmICghc2xpZGUgfHwgc2xpZGUuaXNEb20pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHNsaWRlLnR5cGUpIHtcbiAgICAgIGNhc2UgXCJodG1sXCI6XG4gICAgICAgIHRoaXMuZmFuY3lib3guc2V0Q29udGVudChzbGlkZSwgc2xpZGUuc3JjKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgXCJodG1sNXZpZGVvXCI6XG4gICAgICAgIHRoaXMuZmFuY3lib3guc2V0Q29udGVudChcbiAgICAgICAgICBzbGlkZSxcbiAgICAgICAgICB0aGlzLmZhbmN5Ym94XG4gICAgICAgICAgICAub3B0aW9uKFwiSHRtbC5odG1sNXZpZGVvLnRwbFwiKVxuICAgICAgICAgICAgLnJlcGxhY2UoL1xce1xce3NyY1xcfVxcfS9naSwgc2xpZGUuc3JjKVxuICAgICAgICAgICAgLnJlcGxhY2UoXCJ7e2Zvcm1hdH19XCIsIHNsaWRlLmZvcm1hdCB8fCAoc2xpZGUuaHRtbDV2aWRlbyAmJiBzbGlkZS5odG1sNXZpZGVvLmZvcm1hdCkgfHwgXCJcIilcbiAgICAgICAgICAgIC5yZXBsYWNlKFwie3twb3N0ZXJ9fVwiLCBzbGlkZS5wb3N0ZXIgfHwgc2xpZGUudGh1bWIgfHwgXCJcIilcbiAgICAgICAgKTtcblxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBcImlubGluZVwiOlxuICAgICAgY2FzZSBcImNsb25lXCI6XG4gICAgICAgIHRoaXMubG9hZElubGluZUNvbnRlbnQoc2xpZGUpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBcImFqYXhcIjpcbiAgICAgICAgdGhpcy5sb2FkQWpheENvbnRlbnQoc2xpZGUpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBcInBkZlwiOlxuICAgICAgY2FzZSBcInZpZGVvXCI6XG4gICAgICBjYXNlIFwibWFwXCI6XG4gICAgICAgIHNsaWRlLnByZWxvYWQgPSBmYWxzZTtcblxuICAgICAgY2FzZSBcImlmcmFtZVwiOlxuICAgICAgICB0aGlzLmxvYWRJZnJhbWVDb250ZW50KHNsaWRlKTtcblxuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpZiAoc2xpZGUucmF0aW8pIHtcbiAgICAgIHRoaXMuc2V0QXNwZWN0UmF0aW8oc2xpZGUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBQcm9jZXNzIGBDYXJvdXNlbC5vblNlbGVjdFNsaWRlYCBldmVudCB0byBzdGFydCB2aWRlb1xuICAgKiBAcGFyYW0ge09iamVjdH0gZmFuY3lib3hcbiAgICogQHBhcmFtIHtPYmplY3R9IGNhcm91c2VsXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzbGlkZVxuICAgKi9cbiAgb25TZWxlY3RTbGlkZShmYW5jeWJveCwgY2Fyb3VzZWwsIHNsaWRlKSB7XG4gICAgaWYgKGZhbmN5Ym94LnN0YXRlID09PSBcInJlYWR5XCIpIHtcbiAgICAgIHRoaXMucGxheVZpZGVvKHNsaWRlKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQXR0ZW1wdHMgdG8gYmVnaW4gcGxheWJhY2sgb2YgdGhlIG1lZGlhXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzbGlkZVxuICAgKi9cbiAgcGxheVZpZGVvKHNsaWRlKSB7XG4gICAgaWYgKHNsaWRlLnR5cGUgPT09IFwiaHRtbDV2aWRlb1wiICYmIHNsaWRlLnZpZGVvLmF1dG9wbGF5KSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCAkdmlkZW8gPSBzbGlkZS4kZWwucXVlcnlTZWxlY3RvcihcInZpZGVvXCIpO1xuXG4gICAgICAgIGlmICgkdmlkZW8pIHtcbiAgICAgICAgICBjb25zdCBwcm9taXNlID0gJHZpZGVvLnBsYXkoKTtcblxuICAgICAgICAgIGlmIChwcm9taXNlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHByb21pc2VcbiAgICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIEF1dG9wbGF5IHN0YXJ0ZWRcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIC8vIEF1dG9wbGF5IHdhcyBwcmV2ZW50ZWQuXG4gICAgICAgICAgICAgICAgJHZpZGVvLm11dGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAkdmlkZW8ucGxheSgpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge31cbiAgICB9XG5cbiAgICBpZiAoc2xpZGUudHlwZSAhPT0gXCJ2aWRlb1wiIHx8ICEoc2xpZGUuJGlmcmFtZSAmJiBzbGlkZS4kaWZyYW1lLmNvbnRlbnRXaW5kb3cpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIHJlcGVhdGVkbHkgY2FsbGVkIHRvIGNoZWNrXG4gICAgLy8gaWYgdmlkZW8gaWZyYW1lIGhhcyBiZWVuIGxvYWRlZCB0byBzZW5kIG1lc3NhZ2UgdG8gc3RhcnQgdGhlIHZpZGVvXG4gICAgY29uc3QgcG9sbGVyID0gKCkgPT4ge1xuICAgICAgaWYgKHNsaWRlLnN0YXRlID09PSBcImRvbmVcIiAmJiBzbGlkZS4kaWZyYW1lICYmIHNsaWRlLiRpZnJhbWUuY29udGVudFdpbmRvdykge1xuICAgICAgICBsZXQgY29tbWFuZDtcblxuICAgICAgICBpZiAoc2xpZGUuJGlmcmFtZS5pc1JlYWR5KSB7XG4gICAgICAgICAgaWYgKHNsaWRlLnZpZGVvICYmIHNsaWRlLnZpZGVvLmF1dG9wbGF5KSB7XG4gICAgICAgICAgICBpZiAoc2xpZGUudmVuZG9yID09IFwieW91dHViZVwiKSB7XG4gICAgICAgICAgICAgIGNvbW1hbmQgPSB7XG4gICAgICAgICAgICAgICAgZXZlbnQ6IFwiY29tbWFuZFwiLFxuICAgICAgICAgICAgICAgIGZ1bmM6IFwicGxheVZpZGVvXCIsXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjb21tYW5kID0ge1xuICAgICAgICAgICAgICAgIG1ldGhvZDogXCJwbGF5XCIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IFwidHJ1ZVwiLFxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChjb21tYW5kKSB7XG4gICAgICAgICAgICBzbGlkZS4kaWZyYW1lLmNvbnRlbnRXaW5kb3cucG9zdE1lc3NhZ2UoSlNPTi5zdHJpbmdpZnkoY29tbWFuZCksIFwiKlwiKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2xpZGUudmVuZG9yID09PSBcInlvdXR1YmVcIikge1xuICAgICAgICAgIGNvbW1hbmQgPSB7XG4gICAgICAgICAgICBldmVudDogXCJsaXN0ZW5pbmdcIixcbiAgICAgICAgICAgIGlkOiBzbGlkZS4kaWZyYW1lLmdldEF0dHJpYnV0ZShcImlkXCIpLFxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBzbGlkZS4kaWZyYW1lLmNvbnRlbnRXaW5kb3cucG9zdE1lc3NhZ2UoSlNPTi5zdHJpbmdpZnkoY29tbWFuZCksIFwiKlwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzbGlkZS5wb2xsZXIgPSBzZXRUaW1lb3V0KHBvbGxlciwgMjUwKTtcbiAgICB9O1xuXG4gICAgcG9sbGVyKCk7XG4gIH1cblxuICAvKipcbiAgICogUHJvY2VzcyBgQ2Fyb3VzZWwub25VbnNlbGVjdFNsaWRlYCBldmVudCB0byBwYXVzZSB2aWRlb1xuICAgKiBAcGFyYW0ge09iamVjdH0gZmFuY3lib3hcbiAgICogQHBhcmFtIHtPYmplY3R9IGNhcm91c2VsXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzbGlkZVxuICAgKi9cbiAgb25VbnNlbGVjdFNsaWRlKGZhbmN5Ym94LCBjYXJvdXNlbCwgc2xpZGUpIHtcbiAgICBpZiAoc2xpZGUudHlwZSA9PT0gXCJodG1sNXZpZGVvXCIpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHNsaWRlLiRlbC5xdWVyeVNlbGVjdG9yKFwidmlkZW9cIikucGF1c2UoKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7fVxuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IGNvbW1hbmQgPSBmYWxzZTtcblxuICAgIGlmIChzbGlkZS52ZW5kb3IgPT0gXCJ2aW1lb1wiKSB7XG4gICAgICBjb21tYW5kID0ge1xuICAgICAgICBtZXRob2Q6IFwicGF1c2VcIixcbiAgICAgICAgdmFsdWU6IFwidHJ1ZVwiLFxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKHNsaWRlLnZlbmRvciA9PT0gXCJ5b3V0dWJlXCIpIHtcbiAgICAgIGNvbW1hbmQgPSB7XG4gICAgICAgIGV2ZW50OiBcImNvbW1hbmRcIixcbiAgICAgICAgZnVuYzogXCJwYXVzZVZpZGVvXCIsXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmIChjb21tYW5kICYmIHNsaWRlLiRpZnJhbWUgJiYgc2xpZGUuJGlmcmFtZS5jb250ZW50V2luZG93KSB7XG4gICAgICBzbGlkZS4kaWZyYW1lLmNvbnRlbnRXaW5kb3cucG9zdE1lc3NhZ2UoSlNPTi5zdHJpbmdpZnkoY29tbWFuZCksIFwiKlwiKTtcbiAgICB9XG5cbiAgICBjbGVhclRpbWVvdXQoc2xpZGUucG9sbGVyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcm9jZXNzIGBDYXJvdXNlbC5vblJlbW92ZVNsaWRlYCBldmVudCB0byBkbyBjbGVhbiB1cFxuICAgKiBAcGFyYW0ge09iamVjdH0gZmFuY3lib3hcbiAgICogQHBhcmFtIHtPYmplY3R9IGNhcm91c2VsXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzbGlkZVxuICAgKi9cbiAgb25SZW1vdmVTbGlkZShmYW5jeWJveCwgY2Fyb3VzZWwsIHNsaWRlKSB7XG4gICAgLy8gQWJvcnQgYWpheCByZXF1ZXN0IGlmIGV4aXN0c1xuICAgIGlmIChzbGlkZS54aHIpIHtcbiAgICAgIHNsaWRlLnhoci5hYm9ydCgpO1xuICAgICAgc2xpZGUueGhyID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBVbmxvYWQgaWZyYW1lIGNvbnRlbnQgaWYgZXhpc3RzXG4gICAgaWYgKHNsaWRlLiRpZnJhbWUpIHtcbiAgICAgIHNsaWRlLiRpZnJhbWUub25sb2FkID0gc2xpZGUuJGlmcmFtZS5vbmVycm9yID0gbnVsbDtcblxuICAgICAgc2xpZGUuJGlmcmFtZS5zcmMgPSBcIi8vYWJvdXQ6YmxhbmtcIjtcbiAgICAgIHNsaWRlLiRpZnJhbWUgPSBudWxsO1xuICAgIH1cblxuICAgIC8vIENsZWFyIGlubGluZSBjb250ZW50XG4gICAgY29uc3QgJGNvbnRlbnQgPSBzbGlkZS4kY29udGVudDtcblxuICAgIGlmIChzbGlkZS50eXBlID09PSBcImlubGluZVwiICYmICRjb250ZW50KSB7XG4gICAgICAkY29udGVudC5jbGFzc0xpc3QucmVtb3ZlKFwiZmFuY3lib3hfX2NvbnRlbnRcIik7XG5cbiAgICAgIGlmICgkY29udGVudC5zdHlsZS5kaXNwbGF5ICE9PSBcIm5vbmVcIikge1xuICAgICAgICAkY29udGVudC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHNsaWRlLiRjbG9zZUJ1dHRvbikge1xuICAgICAgc2xpZGUuJGNsb3NlQnV0dG9uLnJlbW92ZSgpO1xuICAgICAgc2xpZGUuJGNsb3NlQnV0dG9uID0gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCAkcGxhY2VIb2xkZXIgPSAkY29udGVudCAmJiAkY29udGVudC4kcGxhY2VIb2xkZXI7XG5cbiAgICBpZiAoJHBsYWNlSG9sZGVyKSB7XG4gICAgICAkcGxhY2VIb2xkZXIucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoJGNvbnRlbnQsICRwbGFjZUhvbGRlcik7XG4gICAgICAkcGxhY2VIb2xkZXIucmVtb3ZlKCk7XG4gICAgICAkY29udGVudC4kcGxhY2VIb2xkZXIgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBQcm9jZXNzIGB3aW5kb3cubWVzc2FnZWAgZXZlbnQgdG8gbWFyayB2aWRlbyBpZnJhbWUgZWxlbWVudCBhcyBgcmVhZHlgXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBlIC0gRXZlbnRcbiAgICovXG4gIG9uTWVzc2FnZShlKSB7XG4gICAgdHJ5IHtcbiAgICAgIGxldCBkYXRhID0gSlNPTi5wYXJzZShlLmRhdGEpO1xuXG4gICAgICBpZiAoZS5vcmlnaW4gPT09IFwiaHR0cHM6Ly9wbGF5ZXIudmltZW8uY29tXCIpIHtcbiAgICAgICAgaWYgKGRhdGEuZXZlbnQgPT09IFwicmVhZHlcIikge1xuICAgICAgICAgIGZvciAobGV0ICRpZnJhbWUgb2YgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImZhbmN5Ym94X19pZnJhbWVcIikpIHtcbiAgICAgICAgICAgIGlmICgkaWZyYW1lLmNvbnRlbnRXaW5kb3cgPT09IGUuc291cmNlKSB7XG4gICAgICAgICAgICAgICRpZnJhbWUuaXNSZWFkeSA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGUub3JpZ2luID09PSBcImh0dHBzOi8vd3d3LnlvdXR1YmUtbm9jb29raWUuY29tXCIpIHtcbiAgICAgICAgaWYgKGRhdGEuZXZlbnQgPT09IFwib25SZWFkeVwiKSB7XG4gICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZGF0YS5pZCkuaXNSZWFkeSA9IDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGNhdGNoIChleCkge31cbiAgfVxuXG4gIGF0dGFjaCgpIHtcbiAgICB0aGlzLmZhbmN5Ym94Lm9uKHRoaXMuZXZlbnRzKTtcblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCB0aGlzLm9uTWVzc2FnZSwgZmFsc2UpO1xuICB9XG5cbiAgZGV0YWNoKCkge1xuICAgIHRoaXMuZmFuY3lib3gub2ZmKHRoaXMuZXZlbnRzKTtcblxuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCB0aGlzLm9uTWVzc2FnZSwgZmFsc2UpO1xuICB9XG59XG5cbi8vIEV4cG9zZSBkZWZhdWx0c1xuSHRtbC5kZWZhdWx0cyA9IGRlZmF1bHRzO1xuIiwiaW1wb3J0IHsgZXh0ZW5kIH0gZnJvbSBcIi4uLy4uLy4uL3NoYXJlZC91dGlscy9leHRlbmQuanNcIjtcclxuXHJcbmltcG9ydCB7IFBhbnpvb20gfSBmcm9tIFwiLi4vLi4vLi4vUGFuem9vbS9QYW56b29tLmpzXCI7XHJcblxyXG5jb25zdCBkZWZhdWx0cyA9IHtcclxuICAvLyBDbGFzcyBuYW1lIGZvciBzbGlkZSBlbGVtZW50IGluZGljYXRpbmcgdGhhdCBjb250ZW50IGNhbiBiZSB6b29tZWQgaW5cclxuICBjYW5ab29tSW5DbGFzczogXCJjYW4tem9vbV9pblwiLFxyXG5cclxuICAvLyBDbGFzcyBuYW1lIGZvciBzbGlkZSBlbGVtZW50IGluZGljYXRpbmcgdGhhdCBjb250ZW50IGNhbiBiZSB6b29tZWQgb3V0XHJcbiAgY2FuWm9vbU91dENsYXNzOiBcImNhbi16b29tX291dFwiLFxyXG5cclxuICAvLyBEbyB6b29tIGFuaW1hdGlvbiBmcm9tIHRodW1ibmFpbCBpbWFnZSB3aGVuIHN0YXJ0aW5nIG9yIGNsb3NpbmcgZmFuY3lib3hcclxuICB6b29tOiB0cnVlLFxyXG5cclxuICAvLyBBbmltYXRlIG9wYWNpdHkgd2hpbGUgem9vbWluZ1xyXG4gIHpvb21PcGFjaXR5OiBcImF1dG9cIiwgLy8gXCJhdXRvXCIgfCB0cnVlIHwgZmFsc2UsXHJcblxyXG4gIC8vIFpvb20gYW5pbWF0aW9uIGZyaWN0aW9uXHJcbiAgem9vbUZyaWN0aW9uOiAwLjgyLFxyXG5cclxuICAvLyBEaXNhYmxlIHpvb20gYW5pbWF0aW9uIGlmIHRodW1ibmFpbCBpcyB2aXNpYmxlIG9ubHkgcGFydGx5XHJcbiAgaWdub3JlQ292ZXJlZFRodW1ibmFpbDogZmFsc2UsXHJcblxyXG4gIC8vIEVuYWJsZSBndWVzdHVyZXNcclxuICB0b3VjaDogdHJ1ZSxcclxuXHJcbiAgLy8gQWN0aW9uIHRvIGJlIHBlcmZvcm1lZCB3aGVuIHVzZXIgY2xpY2tzIG9uIHRoZSBpbWFnZVxyXG4gIGNsaWNrOiBcInRvZ2dsZVpvb21cIiwgLy8gXCJ0b2dnbGVab29tXCIgfCBcIm5leHRcIiB8IFwiY2xvc2VcIiB8IG51bGxcclxuXHJcbiAgLy8gQWN0aW9uIHRvIGJlIHBlcmZvcm1lZCB3aGVuIGRvdWJsZS1jbGljayBldmVudCBpcyBkZXRlY3RlZCBvbiB0aGUgaW1hZ2VcclxuICBkb3VibGVDbGljazogbnVsbCwgLy8gXCJ0b2dnbGVab29tXCIgfCBudWxsXHJcblxyXG4gIC8vIEFjdGlvbiB0byBiZSBwZXJmb3JtZWQgd2hlbiB1c2VyIHJvdGF0ZXMgYSB3aGVlbCBidXR0b24gb24gYSBwb2ludGluZyBkZXZpY2VcclxuICB3aGVlbDogXCJ6b29tXCIsIC8vIFwiem9vbVwiIHwgXCJzbGlkZVwiIHwgXCJjbG9zZVwiIHwgbnVsbFxyXG5cclxuICAvLyBIb3cgaW1hZ2Ugc2hvdWxkIGJlIHJlc2l6ZWQgdG8gZml0IGl0cyBjb250YWluZXJcclxuICBmaXQ6IFwiY29udGFpblwiLCAvLyBcImNvbnRhaW5cIiB8IFwiY29udGFpbi13XCIgfCBcImNvdmVyXCJcclxuXHJcbiAgLy8gU2hvdWxkIGNyZWF0ZSB3cmFwcGluZyBlbGVtZW50IGFyb3VuZCB0aGUgaW1hZ2VcclxuICB3cmFwOiBmYWxzZSxcclxuXHJcbiAgLy8gQ3VzdG9tIFBhbnpvb20gb3B0aW9uc1xyXG4gIFBhbnpvb206IHtcclxuICAgIHJhdGlvOiAxLFxyXG4gIH0sXHJcbn07XHJcblxyXG5leHBvcnQgY2xhc3MgSW1hZ2Uge1xyXG4gIGNvbnN0cnVjdG9yKGZhbmN5Ym94KSB7XHJcbiAgICB0aGlzLmZhbmN5Ym94ID0gZmFuY3lib3g7XHJcblxyXG4gICAgZm9yIChjb25zdCBtZXRob2ROYW1lIG9mIFtcclxuICAgICAgLy8gRmFuY3lib3hcclxuICAgICAgXCJvblJlYWR5XCIsXHJcbiAgICAgIFwib25DbG9zaW5nXCIsXHJcbiAgICAgIFwib25Eb25lXCIsXHJcblxyXG4gICAgICAvLyBGYW5jeWJveC5DYXJvdXNlbFxyXG4gICAgICBcIm9uUGFnZUNoYW5nZVwiLFxyXG4gICAgICBcIm9uQ3JlYXRlU2xpZGVcIixcclxuICAgICAgXCJvblJlbW92ZVNsaWRlXCIsXHJcblxyXG4gICAgICAvLyBJbWFnZSBsb2FkL2Vycm9yXHJcbiAgICAgIFwib25JbWFnZVN0YXR1c0NoYW5nZVwiLFxyXG4gICAgXSkge1xyXG4gICAgICB0aGlzW21ldGhvZE5hbWVdID0gdGhpc1ttZXRob2ROYW1lXS5iaW5kKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuZXZlbnRzID0ge1xyXG4gICAgICByZWFkeTogdGhpcy5vblJlYWR5LFxyXG4gICAgICBjbG9zaW5nOiB0aGlzLm9uQ2xvc2luZyxcclxuICAgICAgZG9uZTogdGhpcy5vbkRvbmUsXHJcblxyXG4gICAgICBcIkNhcm91c2VsLmNoYW5nZVwiOiB0aGlzLm9uUGFnZUNoYW5nZSxcclxuICAgICAgXCJDYXJvdXNlbC5jcmVhdGVTbGlkZVwiOiB0aGlzLm9uQ3JlYXRlU2xpZGUsXHJcbiAgICAgIFwiQ2Fyb3VzZWwucmVtb3ZlU2xpZGVcIjogdGhpcy5vblJlbW92ZVNsaWRlLFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEhhbmRsZSBgcmVhZHlgIGV2ZW50IHRvIHN0YXJ0IGxvYWRpbmcgY29udGVudFxyXG4gICAqL1xyXG4gIG9uUmVhZHkoKSB7XHJcbiAgICB0aGlzLmZhbmN5Ym94LkNhcm91c2VsLnNsaWRlcy5mb3JFYWNoKChzbGlkZSkgPT4ge1xyXG4gICAgICBpZiAoc2xpZGUuJGVsKSB7XHJcbiAgICAgICAgdGhpcy5zZXRDb250ZW50KHNsaWRlKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBIYW5kbGUgYGRvbmVgIGV2ZW50IHRvIHVwZGF0ZSBjdXJzb3JcclxuICAgKiBAcGFyYW0ge09iamVjdH0gZmFuY3lib3hcclxuICAgKiBAcGFyYW0ge09iamVjdH0gc2xpZGVcclxuICAgKi9cclxuICBvbkRvbmUoZmFuY3lib3gsIHNsaWRlKSB7XHJcbiAgICB0aGlzLmhhbmRsZUN1cnNvcihzbGlkZSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBIYW5kbGUgYGNsb3NpbmdgIGV2ZW50IHRvIGNsZWFuIHVwIGFsbCBzbGlkZXMgYW5kIHRvIHN0YXJ0IHpvb20tb3V0IGFuaW1hdGlvblxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBmYW5jeWJveFxyXG4gICAqL1xyXG4gIG9uQ2xvc2luZyhmYW5jeWJveCkge1xyXG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuY2xpY2tUaW1lcik7XHJcbiAgICB0aGlzLmNsaWNrVGltZXIgPSBudWxsO1xyXG5cclxuICAgIC8vIFJlbW92ZSBldmVudHNcclxuICAgIGZhbmN5Ym94LkNhcm91c2VsLnNsaWRlcy5mb3JFYWNoKChzbGlkZSkgPT4ge1xyXG4gICAgICBpZiAoc2xpZGUuJGltYWdlKSB7XHJcbiAgICAgICAgc2xpZGUuc3RhdGUgPSBcImRlc3Ryb3lcIjtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHNsaWRlLlBhbnpvb20pIHtcclxuICAgICAgICBzbGlkZS5QYW56b29tLmRldGFjaEV2ZW50cygpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBJZiBwb3NzaWJsZSwgc3RhcnQgdGhlIHpvb20gYW5pbWF0aW9uLCBpdCB3aWxsIGludGVycnVwdCB0aGUgZGVmYXVsdCBjbG9zaW5nIHByb2Nlc3NcclxuICAgIGlmICh0aGlzLmZhbmN5Ym94LnN0YXRlID09PSBcImNsb3NpbmdcIiAmJiB0aGlzLmNhblpvb20oZmFuY3lib3guZ2V0U2xpZGUoKSkpIHtcclxuICAgICAgdGhpcy56b29tT3V0KCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBQcm9jZXNzIGBDYXJvdXNlbC5jcmVhdGVTbGlkZWAgZXZlbnQgdG8gY3JlYXRlIGltYWdlIGNvbnRlbnRcclxuICAgKiBAcGFyYW0ge09iamVjdH0gZmFuY3lib3hcclxuICAgKiBAcGFyYW0ge09iamVjdH0gY2Fyb3VzZWxcclxuICAgKiBAcGFyYW0ge09iamVjdH0gc2xpZGVcclxuICAgKi9cclxuICBvbkNyZWF0ZVNsaWRlKGZhbmN5Ym94LCBjYXJvdXNlbCwgc2xpZGUpIHtcclxuICAgIGlmICh0aGlzLmZhbmN5Ym94LnN0YXRlICE9PSBcInJlYWR5XCIpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuc2V0Q29udGVudChzbGlkZSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBIYW5kbGUgYENhcm91c2VsLnJlbW92ZVNsaWRlYCBldmVudCB0byBkbyBjbGVhbiB1cCB0aGUgc2xpZGVcclxuICAgKiBAcGFyYW0ge09iamVjdH0gZmFuY3lib3hcclxuICAgKiBAcGFyYW0ge09iamVjdH0gY2Fyb3VzZWxcclxuICAgKiBAcGFyYW0ge09iamVjdH0gc2xpZGVcclxuICAgKi9cclxuICBvblJlbW92ZVNsaWRlKGZhbmN5Ym94LCBjYXJvdXNlbCwgc2xpZGUpIHtcclxuICAgIGlmIChzbGlkZS4kaW1hZ2UpIHtcclxuICAgICAgc2xpZGUuJGVsLmNsYXNzTGlzdC5yZW1vdmUoZmFuY3lib3gub3B0aW9uKFwiSW1hZ2UuY2FuWm9vbUluQ2xhc3NcIikpO1xyXG5cclxuICAgICAgc2xpZGUuJGltYWdlLnJlbW92ZSgpO1xyXG4gICAgICBzbGlkZS4kaW1hZ2UgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChzbGlkZS5QYW56b29tKSB7XHJcbiAgICAgIHNsaWRlLlBhbnpvb20uZGVzdHJveSgpO1xyXG4gICAgICBzbGlkZS5QYW56b29tID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoc2xpZGUuJGVsICYmIHNsaWRlLiRlbC5kYXRhc2V0KSB7XHJcbiAgICAgIGRlbGV0ZSBzbGlkZS4kZWwuZGF0YXNldC5pbWFnZUZpdDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEJ1aWxkIERPTSBlbGVtZW50cyBhbmQgYWRkIGV2ZW50IGxpc3RlbmVyc1xyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzbGlkZVxyXG4gICAqL1xyXG4gIHNldENvbnRlbnQoc2xpZGUpIHtcclxuICAgIC8vIENoZWNrIGlmIHRoaXMgc2xpZGUgc2hvdWxkIGNvbnRhaW4gYW4gaW1hZ2VcclxuICAgIGlmIChzbGlkZS5pc0RvbSB8fCBzbGlkZS5odG1sIHx8IChzbGlkZS50eXBlICYmIHNsaWRlLnR5cGUgIT09IFwiaW1hZ2VcIikpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChzbGlkZS4kaW1hZ2UpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHNsaWRlLnR5cGUgPSBcImltYWdlXCI7XHJcbiAgICBzbGlkZS5zdGF0ZSA9IFwibG9hZGluZ1wiO1xyXG5cclxuICAgIC8vICogQnVpbGQgbGF5b3V0XHJcbiAgICAvLyBDb250YWluZXJcclxuICAgIGNvbnN0ICRjb250ZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICRjb250ZW50LnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xyXG5cclxuICAgIC8vIEltYWdlIGVsZW1lbnRcclxuICAgIGNvbnN0ICRpbWFnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7XHJcblxyXG4gICAgJGltYWdlLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIChldmVudCkgPT4ge1xyXG4gICAgICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgIHRoaXMub25JbWFnZVN0YXR1c0NoYW5nZShzbGlkZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAkaW1hZ2UuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsICgpID0+IHtcclxuICAgICAgdGhpcy5vbkltYWdlU3RhdHVzQ2hhbmdlKHNsaWRlKTtcclxuICAgIH0pO1xyXG5cclxuICAgICRpbWFnZS5zcmMgPSBzbGlkZS5zcmM7XHJcbiAgICAkaW1hZ2UuYWx0ID0gXCJcIjtcclxuICAgICRpbWFnZS5kcmFnZ2FibGUgPSBmYWxzZTtcclxuXHJcbiAgICAkaW1hZ2UuY2xhc3NMaXN0LmFkZChcImZhbmN5Ym94X19pbWFnZVwiKTtcclxuXHJcbiAgICBpZiAoc2xpZGUuc3Jjc2V0KSB7XHJcbiAgICAgICRpbWFnZS5zZXRBdHRyaWJ1dGUoXCJzcmNzZXRcIiwgc2xpZGUuc3Jjc2V0KTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoc2xpZGUuc2l6ZXMpIHtcclxuICAgICAgJGltYWdlLnNldEF0dHJpYnV0ZShcInNpemVzXCIsIHNsaWRlLnNpemVzKTtcclxuICAgIH1cclxuXHJcbiAgICBzbGlkZS4kaW1hZ2UgPSAkaW1hZ2U7XHJcblxyXG4gICAgY29uc3Qgc2hvdWxkV3JhcCA9IHRoaXMuZmFuY3lib3gub3B0aW9uKFwiSW1hZ2Uud3JhcFwiKTtcclxuXHJcbiAgICBpZiAoc2hvdWxkV3JhcCkge1xyXG4gICAgICBjb25zdCAkd3JhcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICR3cmFwLmNsYXNzTGlzdC5hZGQodHlwZW9mIHNob3VsZFdyYXAgPT09IFwic3RyaW5nXCIgPyBzaG91bGRXcmFwIDogXCJmYW5jeWJveF9faW1hZ2Utd3JhcFwiKTtcclxuXHJcbiAgICAgICR3cmFwLmFwcGVuZENoaWxkKCRpbWFnZSk7XHJcblxyXG4gICAgICAkY29udGVudC5hcHBlbmRDaGlsZCgkd3JhcCk7XHJcblxyXG4gICAgICBzbGlkZS4kd3JhcCA9ICR3cmFwO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgJGNvbnRlbnQuYXBwZW5kQ2hpbGQoJGltYWdlKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBTZXQgZGF0YSBhdHRyaWJ1dGUgaWYgb3RoZXIgdGhhdCBkZWZhdWx0XHJcbiAgICAvLyBmb3IgZXhhbXBsZSwgc2V0IGBbZGF0YS1pbWFnZS1maXQ9XCJjb250YWluLXdcIl1gXHJcbiAgICBzbGlkZS4kZWwuZGF0YXNldC5pbWFnZUZpdCA9IHRoaXMuZmFuY3lib3gub3B0aW9uKFwiSW1hZ2UuZml0XCIpO1xyXG5cclxuICAgIC8vIEFwcGVuZCBjb250ZW50XHJcbiAgICB0aGlzLmZhbmN5Ym94LnNldENvbnRlbnQoc2xpZGUsICRjb250ZW50KTtcclxuXHJcbiAgICAvLyBEaXNwbGF5IGxvYWRpbmcgaWNvblxyXG4gICAgaWYgKCRpbWFnZS5jb21wbGV0ZSB8fCAkaW1hZ2UuZXJyb3IpIHtcclxuICAgICAgdGhpcy5vbkltYWdlU3RhdHVzQ2hhbmdlKHNsaWRlKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuZmFuY3lib3guc2hvd0xvYWRpbmcoc2xpZGUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSGFuZGxlIGltYWdlIHN0YXRlIGNoYW5nZSwgZGlzcGxheSBlcnJvciBvciBzdGFydCByZXZlYWxpbmcgaW1hZ2VcclxuICAgKiBAcGFyYW0ge09iamVjdH0gc2xpZGVcclxuICAgKi9cclxuICBvbkltYWdlU3RhdHVzQ2hhbmdlKHNsaWRlKSB7XHJcbiAgICBjb25zdCAkaW1hZ2UgPSBzbGlkZS4kaW1hZ2U7XHJcblxyXG4gICAgaWYgKCEkaW1hZ2UgfHwgc2xpZGUuc3RhdGUgIT09IFwibG9hZGluZ1wiKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoISgkaW1hZ2UuY29tcGxldGUgJiYgJGltYWdlLm5hdHVyYWxXaWR0aCAmJiAkaW1hZ2UubmF0dXJhbEhlaWdodCkpIHtcclxuICAgICAgdGhpcy5mYW5jeWJveC5zZXRFcnJvcihzbGlkZSwgXCJ7e0lNQUdFX0VSUk9SfX1cIik7XHJcblxyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5mYW5jeWJveC5oaWRlTG9hZGluZyhzbGlkZSk7XHJcblxyXG4gICAgaWYgKHRoaXMuZmFuY3lib3gub3B0aW9uKFwiSW1hZ2UuZml0XCIpID09PSBcImNvbnRhaW5cIikge1xyXG4gICAgICB0aGlzLmluaXRTbGlkZVBhbnpvb20oc2xpZGUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEFkZCBgd2hlZWxgIGFuZCBgY2xpY2tgIGV2ZW50IGhhbmRsZXJcclxuICAgIHNsaWRlLiRlbC5hZGRFdmVudExpc3RlbmVyKFwid2hlZWxcIiwgKGV2ZW50KSA9PiB0aGlzLm9uV2hlZWwoc2xpZGUsIGV2ZW50KSwgeyBwYXNzaXZlOiBmYWxzZSB9KTtcclxuICAgIHNsaWRlLiRjb250ZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZlbnQpID0+IHRoaXMub25DbGljayhzbGlkZSwgZXZlbnQpLCB7IHBhc3NpdmU6IGZhbHNlIH0pO1xyXG5cclxuICAgIHRoaXMucmV2ZWFsQ29udGVudChzbGlkZSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBNYWtlIGltYWdlIHpvb21hYmxlIGFuZCBkcmFnZ2FibGUgdXNpbmcgUGFuem9vbVxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzbGlkZVxyXG4gICAqL1xyXG4gIGluaXRTbGlkZVBhbnpvb20oc2xpZGUpIHtcclxuICAgIGlmIChzbGlkZS5QYW56b29tKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvLyogSW5pdGlhbGl6ZSBQYW56b29tXHJcbiAgICBzbGlkZS5QYW56b29tID0gbmV3IFBhbnpvb20oXHJcbiAgICAgIHNsaWRlLiRlbCxcclxuICAgICAgZXh0ZW5kKHRydWUsIHRoaXMuZmFuY3lib3gub3B0aW9uKFwiSW1hZ2UuUGFuem9vbVwiLCB7fSksIHtcclxuICAgICAgICB2aWV3cG9ydDogc2xpZGUuJHdyYXAsXHJcbiAgICAgICAgY29udGVudDogc2xpZGUuJGltYWdlLFxyXG5cclxuICAgICAgICB3aWR0aDogc2xpZGUuX3dpZHRoLFxyXG4gICAgICAgIGhlaWdodDogc2xpZGUuX2hlaWdodCxcclxuXHJcbiAgICAgICAgd3JhcElubmVyOiBmYWxzZSxcclxuXHJcbiAgICAgICAgLy8gQWxsb3cgdG8gc2VsZWN0IGNhcHRpb24gdGV4dFxyXG4gICAgICAgIHRleHRTZWxlY3Rpb246IHRydWUsXHJcblxyXG4gICAgICAgIC8vIFRvZ2dsZSBnZXN0dXJlc1xyXG4gICAgICAgIHRvdWNoOiB0aGlzLmZhbmN5Ym94Lm9wdGlvbihcIkltYWdlLnRvdWNoXCIpLFxyXG5cclxuICAgICAgICAvLyBUaGlzIHdpbGwgcHJldmVudCBjbGljayBjb25mbGljdCB3aXRoIGZhbmN5Ym94IG1haW4gY2Fyb3VzZWxcclxuICAgICAgICBwYW5Pbmx5Wm9vbWVkOiB0cnVlLFxyXG5cclxuICAgICAgICAvLyBEaXNhYmxlIGRlZmF1bHQgY2xpY2sgLyB3aGVlbCBldmVudHMgYXMgY3VzdG9tIGV2ZW50IGxpc3RlbmVycyB3aWxsIHJlcGxhY2UgdGhlbSxcclxuICAgICAgICAvLyBiZWNhdXNlIGNsaWNrIGFuZCB3aGVlbCBldmVudHMgc2hvdWxkIHdvcmsgd2l0aG91dCBQYW56b29tXHJcbiAgICAgICAgY2xpY2s6IGZhbHNlLFxyXG4gICAgICAgIHdoZWVsOiBmYWxzZSxcclxuICAgICAgfSlcclxuICAgICk7XHJcblxyXG4gICAgc2xpZGUuUGFuem9vbS5vbihcInN0YXJ0QW5pbWF0aW9uXCIsICgpID0+IHtcclxuICAgICAgdGhpcy5mYW5jeWJveC50cmlnZ2VyKFwiSW1hZ2Uuc3RhcnRBbmltYXRpb25cIiwgc2xpZGUpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgc2xpZGUuUGFuem9vbS5vbihcImVuZEFuaW1hdGlvblwiLCAoKSA9PiB7XHJcbiAgICAgIGlmIChzbGlkZS5zdGF0ZSA9PT0gXCJ6b29tSW5cIikge1xyXG4gICAgICAgIHRoaXMuZmFuY3lib3guZG9uZShzbGlkZSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuaGFuZGxlQ3Vyc29yKHNsaWRlKTtcclxuXHJcbiAgICAgIHRoaXMuZmFuY3lib3gudHJpZ2dlcihcIkltYWdlLmVuZEFuaW1hdGlvblwiLCBzbGlkZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBzbGlkZS5QYW56b29tLm9uKFwiYWZ0ZXJVcGRhdGVcIiwgKCkgPT4ge1xyXG4gICAgICB0aGlzLmhhbmRsZUN1cnNvcihzbGlkZSk7XHJcblxyXG4gICAgICB0aGlzLmZhbmN5Ym94LnRyaWdnZXIoXCJJbWFnZS5hZnRlclVwZGF0ZVwiLCBzbGlkZSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFN0YXJ0IHpvb20taW4gYW5pbWF0aW9uIGlmIHBvc3NpYmxlLCBvciBzaW1wbHkgcmV2ZWFsIGNvbnRlbnRcclxuICAgKiBAcGFyYW0ge09iamVjdH0gc2xpZGVcclxuICAgKi9cclxuICByZXZlYWxDb250ZW50KHNsaWRlKSB7XHJcbiAgICAvLyBBbmltYXRlIG9ubHkgb24gZmlyc3QgcnVuXHJcbiAgICBpZiAoXHJcbiAgICAgIHRoaXMuZmFuY3lib3guQ2Fyb3VzZWwucHJldlBhZ2UgPT09IG51bGwgJiZcclxuICAgICAgc2xpZGUuaW5kZXggPT09IHRoaXMuZmFuY3lib3gub3B0aW9ucy5zdGFydEluZGV4ICYmXHJcbiAgICAgIHRoaXMuY2FuWm9vbShzbGlkZSlcclxuICAgICkge1xyXG4gICAgICB0aGlzLnpvb21JbigpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5mYW5jeWJveC5yZXZlYWxDb250ZW50KHNsaWRlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCB6b29tIGluZm8gZm9yIHNlbGVjdGVkIHNsaWRlXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IHNsaWRlXHJcbiAgICovXHJcbiAgZ2V0Wm9vbUluZm8oc2xpZGUpIHtcclxuICAgIGNvbnN0ICR0aHVtYiA9IHNsaWRlLiR0aHVtYixcclxuICAgICAgdGh1bWJSZWN0ID0gJHRodW1iLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxyXG4gICAgICB0aHVtYldpZHRoID0gdGh1bWJSZWN0LndpZHRoLFxyXG4gICAgICB0aHVtYkhlaWdodCA9IHRodW1iUmVjdC5oZWlnaHQsXHJcbiAgICAgIC8vXHJcbiAgICAgIGNvbnRlbnRSZWN0ID0gc2xpZGUuJGNvbnRlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXHJcbiAgICAgIGNvbnRlbnRXaWR0aCA9IGNvbnRlbnRSZWN0LndpZHRoLFxyXG4gICAgICBjb250ZW50SGVpZ2h0ID0gY29udGVudFJlY3QuaGVpZ2h0LFxyXG4gICAgICAvL1xyXG4gICAgICBzaGlmdGVkVG9wID0gY29udGVudFJlY3QudG9wIC0gdGh1bWJSZWN0LnRvcCxcclxuICAgICAgc2hpZnRlZExlZnQgPSBjb250ZW50UmVjdC5sZWZ0IC0gdGh1bWJSZWN0LmxlZnQ7XHJcblxyXG4gICAgLy8gQ2hlY2sgaWYgbmVlZCB0byB1cGRhdGUgb3BhY2l0eVxyXG4gICAgbGV0IG9wYWNpdHkgPSB0aGlzLmZhbmN5Ym94Lm9wdGlvbihcIkltYWdlLnpvb21PcGFjaXR5XCIpO1xyXG5cclxuICAgIGlmIChvcGFjaXR5ID09PSBcImF1dG9cIikge1xyXG4gICAgICBvcGFjaXR5ID0gTWF0aC5hYnModGh1bWJXaWR0aCAvIHRodW1iSGVpZ2h0IC0gY29udGVudFdpZHRoIC8gY29udGVudEhlaWdodCkgPiAwLjE7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgdG9wOiBzaGlmdGVkVG9wLFxyXG4gICAgICBsZWZ0OiBzaGlmdGVkTGVmdCxcclxuICAgICAgc2NhbGU6IGNvbnRlbnRXaWR0aCAmJiB0aHVtYldpZHRoID8gdGh1bWJXaWR0aCAvIGNvbnRlbnRXaWR0aCA6IDEsXHJcbiAgICAgIG9wYWNpdHk6IG9wYWNpdHksXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRGV0ZXJtaW5lIGlmIGl0IGlzIHBvc3NpYmxlIHRvIGRvIHpvb20taW4gYW5pbWF0aW9uXHJcbiAgICovXHJcbiAgY2FuWm9vbShzbGlkZSkge1xyXG4gICAgY29uc3QgZmFuY3lib3ggPSB0aGlzLmZhbmN5Ym94LFxyXG4gICAgICAkY29udGFpbmVyID0gZmFuY3lib3guJGNvbnRhaW5lcjtcclxuXHJcbiAgICBpZiAod2luZG93LnZpc3VhbFZpZXdwb3J0ICYmIHdpbmRvdy52aXN1YWxWaWV3cG9ydC5zY2FsZSAhPT0gMSkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHNsaWRlLlBhbnpvb20gJiYgIXNsaWRlLlBhbnpvb20uY29udGVudC53aWR0aCkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFmYW5jeWJveC5vcHRpb24oXCJJbWFnZS56b29tXCIpIHx8IGZhbmN5Ym94Lm9wdGlvbihcIkltYWdlLmZpdFwiKSAhPT0gXCJjb250YWluXCIpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0ICR0aHVtYiA9IHNsaWRlLiR0aHVtYjtcclxuXHJcbiAgICBpZiAoISR0aHVtYiB8fCBzbGlkZS5zdGF0ZSA9PT0gXCJsb2FkaW5nXCIpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vICogQ2hlY2sgaWYgdGh1bWJuYWlsIGltYWdlIGlzIHJlYWxseSB2aXNpYmxlXHJcbiAgICAkY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJmYW5jeWJveF9fbm8tY2xpY2tcIik7XHJcblxyXG4gICAgY29uc3QgcmVjdCA9ICR0aHVtYi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuXHJcbiAgICBsZXQgcmV6O1xyXG5cclxuICAgIC8vIENoZWNrIGlmIHRodW1ibmFpbCBpbWFnZSBpcyBhY3R1YWxseSB2aXNpYmxlIG9uIHRoZSBzY3JlZW5cclxuICAgIGlmICh0aGlzLmZhbmN5Ym94Lm9wdGlvbihcIkltYWdlLmlnbm9yZUNvdmVyZWRUaHVtYm5haWxcIikpIHtcclxuICAgICAgY29uc3QgdmlzaWJsZVRvcExlZnQgPSBkb2N1bWVudC5lbGVtZW50RnJvbVBvaW50KHJlY3QubGVmdCArIDEsIHJlY3QudG9wICsgMSkgPT09ICR0aHVtYjtcclxuICAgICAgY29uc3QgdmlzaWJsZUJvdHRvbVJpZ2h0ID0gZG9jdW1lbnQuZWxlbWVudEZyb21Qb2ludChyZWN0LnJpZ2h0IC0gMSwgcmVjdC5ib3R0b20gLSAxKSA9PT0gJHRodW1iO1xyXG5cclxuICAgICAgcmV6ID0gdmlzaWJsZVRvcExlZnQgJiYgdmlzaWJsZUJvdHRvbVJpZ2h0O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV6ID0gZG9jdW1lbnQuZWxlbWVudEZyb21Qb2ludChyZWN0LmxlZnQgKyByZWN0LndpZHRoICogMC41LCByZWN0LnRvcCArIHJlY3QuaGVpZ2h0ICogMC41KSA9PT0gJHRodW1iO1xyXG4gICAgfVxyXG5cclxuICAgICRjb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZShcImZhbmN5Ym94X19uby1jbGlja1wiKTtcclxuXHJcbiAgICByZXR1cm4gcmV6O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUGVyZm9ybSB6b29tLWluIGFuaW1hdGlvblxyXG4gICAqL1xyXG4gIHpvb21JbigpIHtcclxuICAgIGNvbnN0IGZhbmN5Ym94ID0gdGhpcy5mYW5jeWJveCxcclxuICAgICAgc2xpZGUgPSBmYW5jeWJveC5nZXRTbGlkZSgpLFxyXG4gICAgICBQYW56b29tID0gc2xpZGUuUGFuem9vbTtcclxuXHJcbiAgICBjb25zdCB7IHRvcCwgbGVmdCwgc2NhbGUsIG9wYWNpdHkgfSA9IHRoaXMuZ2V0Wm9vbUluZm8oc2xpZGUpO1xyXG5cclxuICAgIGZhbmN5Ym94LnRyaWdnZXIoXCJyZXZlYWxcIiwgc2xpZGUpO1xyXG5cclxuICAgIC8vIFNjYWxlIGFuZCBtb3ZlIHRvIHN0YXJ0IHBvc2l0aW9uXHJcbiAgICBQYW56b29tLnBhblRvKHtcclxuICAgICAgeDogbGVmdCAqIC0xLFxyXG4gICAgICB5OiB0b3AgKiAtMSxcclxuICAgICAgc2NhbGU6IHNjYWxlLFxyXG4gICAgICBmcmljdGlvbjogMCxcclxuICAgICAgaWdub3JlQm91bmRzOiB0cnVlLFxyXG4gICAgfSk7XHJcblxyXG4gICAgc2xpZGUuJGNvbnRlbnQuc3R5bGUudmlzaWJpbGl0eSA9IFwiXCI7XHJcblxyXG4gICAgc2xpZGUuc3RhdGUgPSBcInpvb21JblwiO1xyXG5cclxuICAgIGlmIChvcGFjaXR5ID09PSB0cnVlKSB7XHJcbiAgICAgIFBhbnpvb20ub24oXCJhZnRlclRyYW5zZm9ybVwiLCAocGFuem9vbSkgPT4ge1xyXG4gICAgICAgIGlmIChzbGlkZS5zdGF0ZSA9PT0gXCJ6b29tSW5cIiB8fCBzbGlkZS5zdGF0ZSA9PT0gXCJ6b29tT3V0XCIpIHtcclxuICAgICAgICAgIHBhbnpvb20uJGNvbnRlbnQuc3R5bGUub3BhY2l0eSA9IE1hdGgubWluKDEsIDEgLSAoMSAtIHBhbnpvb20uY29udGVudC5zY2FsZSkgLyAoMSAtIHNjYWxlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBBbmltYXRlIGJhY2sgdG8gb3JpZ2luYWwgcG9zaXRpb25cclxuICAgIFBhbnpvb20ucGFuVG8oe1xyXG4gICAgICB4OiAwLFxyXG4gICAgICB5OiAwLFxyXG4gICAgICBzY2FsZTogMSxcclxuICAgICAgZnJpY3Rpb246IHRoaXMuZmFuY3lib3gub3B0aW9uKFwiSW1hZ2Uuem9vbUZyaWN0aW9uXCIpLFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBQZXJmb3JtIHpvb20tb3V0IGFuaW1hdGlvblxyXG4gICAqL1xyXG4gIHpvb21PdXQoKSB7XHJcbiAgICBjb25zdCBmYW5jeWJveCA9IHRoaXMuZmFuY3lib3gsXHJcbiAgICAgIHNsaWRlID0gZmFuY3lib3guZ2V0U2xpZGUoKSxcclxuICAgICAgUGFuem9vbSA9IHNsaWRlLlBhbnpvb207XHJcblxyXG4gICAgaWYgKCFQYW56b29tKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBzbGlkZS5zdGF0ZSA9IFwiem9vbU91dFwiO1xyXG4gICAgZmFuY3lib3guc3RhdGUgPSBcImN1c3RvbUNsb3NpbmdcIjtcclxuXHJcbiAgICBpZiAoc2xpZGUuJGNhcHRpb24pIHtcclxuICAgICAgc2xpZGUuJGNhcHRpb24uc3R5bGUudmlzaWJpbGl0eSA9IFwiaGlkZGVuXCI7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGZyaWN0aW9uID0gdGhpcy5mYW5jeWJveC5vcHRpb24oXCJJbWFnZS56b29tRnJpY3Rpb25cIik7XHJcblxyXG4gICAgY29uc3QgYW5pbWF0ZVBvc2l0aW9uID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgIGNvbnN0IHsgdG9wLCBsZWZ0LCBzY2FsZSwgb3BhY2l0eSB9ID0gdGhpcy5nZXRab29tSW5mbyhzbGlkZSk7XHJcblxyXG4gICAgICAvLyBJbmNyZWFzZSBzcGVlZCBvbiB0aGUgZmlyc3QgcnVuIGlmIG9wYWNpdHkgaXMgbm90IGFuaW1hdGVkXHJcbiAgICAgIGlmICghZXZlbnQgJiYgIW9wYWNpdHkpIHtcclxuICAgICAgICBmcmljdGlvbiAqPSAwLjgyO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBQYW56b29tLnBhblRvKHtcclxuICAgICAgICB4OiBsZWZ0ICogLTEsXHJcbiAgICAgICAgeTogdG9wICogLTEsXHJcbiAgICAgICAgc2NhbGUsXHJcbiAgICAgICAgZnJpY3Rpb24sXHJcbiAgICAgICAgaWdub3JlQm91bmRzOiB0cnVlLFxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8vIEdyYWR1YWxseSBpbmNyZWFzZSBzcGVlZFxyXG4gICAgICBmcmljdGlvbiAqPSAwLjk4O1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyBQYWdlIHNjcm9sbGluZyB3aWxsIGNhdXNlIHRodW1ibmFpbCB0byBjaGFuZ2UgcG9zaXRpb24gb24gdGhlIGRpc3BsYXksXHJcbiAgICAvLyB0aGVyZWZvcmUgYW5pbWF0aW9uIGVuZCBwb3NpdGlvbiBoYXMgdG8gYmUgcmVjYWxjdWxhdGVkIGFmdGVyIGVhY2ggcGFnZSBzY3JvbGxcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIGFuaW1hdGVQb3NpdGlvbik7XHJcblxyXG4gICAgUGFuem9vbS5vbmNlKFwiZW5kQW5pbWF0aW9uXCIsICgpID0+IHtcclxuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgYW5pbWF0ZVBvc2l0aW9uKTtcclxuICAgICAgZmFuY3lib3guZGVzdHJveSgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgYW5pbWF0ZVBvc2l0aW9uKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXQgdGhlIHR5cGUgb2YgbW91c2UgY3Vyc29yIHRvIGluZGljYXRlIGlmIGNvbnRlbnQgaXMgem9vbWFibGVcclxuICAgKiBAcGFyYW0ge09iamVjdH0gc2xpZGVcclxuICAgKi9cclxuICBoYW5kbGVDdXJzb3Ioc2xpZGUpIHtcclxuICAgIGlmIChzbGlkZS50eXBlICE9PSBcImltYWdlXCIgfHwgIXNsaWRlLiRlbCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgcGFuem9vbSA9IHNsaWRlLlBhbnpvb207XHJcbiAgICBjb25zdCBjbGlja0FjdGlvbiA9IHRoaXMuZmFuY3lib3gub3B0aW9uKFwiSW1hZ2UuY2xpY2tcIiwgZmFsc2UsIHNsaWRlKTtcclxuICAgIGNvbnN0IHRvdWNoSXNFbmFibGVkID0gdGhpcy5mYW5jeWJveC5vcHRpb24oXCJJbWFnZS50b3VjaFwiKTtcclxuXHJcbiAgICBjb25zdCBjbGFzc0xpc3QgPSBzbGlkZS4kZWwuY2xhc3NMaXN0O1xyXG5cclxuICAgIGNvbnN0IHpvb21JbkNsYXNzID0gdGhpcy5mYW5jeWJveC5vcHRpb24oXCJJbWFnZS5jYW5ab29tSW5DbGFzc1wiKTtcclxuICAgIGNvbnN0IHpvb21PdXRDbGFzcyA9IHRoaXMuZmFuY3lib3gub3B0aW9uKFwiSW1hZ2UuY2FuWm9vbU91dENsYXNzXCIpO1xyXG5cclxuICAgIGNsYXNzTGlzdC5yZW1vdmUoem9vbU91dENsYXNzKTtcclxuICAgIGNsYXNzTGlzdC5yZW1vdmUoem9vbUluQ2xhc3MpO1xyXG5cclxuICAgIGlmIChwYW56b29tICYmIGNsaWNrQWN0aW9uID09PSBcInRvZ2dsZVpvb21cIikge1xyXG4gICAgICBjb25zdCBjYW5ab29tSW4gPVxyXG4gICAgICAgIHBhbnpvb20gJiYgcGFuem9vbS5jb250ZW50LnNjYWxlID09PSAxICYmIHBhbnpvb20ub3B0aW9uKFwibWF4U2NhbGVcIikgLSBwYW56b29tLmNvbnRlbnQuc2NhbGUgPiAwLjAxO1xyXG5cclxuICAgICAgaWYgKGNhblpvb21Jbikge1xyXG4gICAgICAgIGNsYXNzTGlzdC5hZGQoem9vbUluQ2xhc3MpO1xyXG4gICAgICB9IGVsc2UgaWYgKHBhbnpvb20uY29udGVudC5zY2FsZSA+IDEgJiYgIXRvdWNoSXNFbmFibGVkKSB7XHJcbiAgICAgICAgY2xhc3NMaXN0LmFkZCh6b29tT3V0Q2xhc3MpO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKGNsaWNrQWN0aW9uID09PSBcImNsb3NlXCIpIHtcclxuICAgICAgY2xhc3NMaXN0LmFkZCh6b29tT3V0Q2xhc3MpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSGFuZGxlIGB3aGVlbGAgZXZlbnRcclxuICAgKiBAcGFyYW0ge09iamVjdH0gc2xpZGVcclxuICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnRcclxuICAgKi9cclxuICBvbldoZWVsKHNsaWRlLCBldmVudCkge1xyXG4gICAgaWYgKHRoaXMuZmFuY3lib3guc3RhdGUgIT09IFwicmVhZHlcIikge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuZmFuY3lib3gudHJpZ2dlcihcIkltYWdlLndoZWVsXCIsIGV2ZW50KSA9PT0gZmFsc2UpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHN3aXRjaCAodGhpcy5mYW5jeWJveC5vcHRpb24oXCJJbWFnZS53aGVlbFwiKSkge1xyXG4gICAgICBjYXNlIFwiem9vbVwiOlxyXG4gICAgICAgIGlmIChzbGlkZS5zdGF0ZSA9PT0gXCJkb25lXCIpIHtcclxuICAgICAgICAgIHNsaWRlLlBhbnpvb20gJiYgc2xpZGUuUGFuem9vbS56b29tV2l0aFdoZWVsKGV2ZW50KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgY2FzZSBcImNsb3NlXCI6XHJcbiAgICAgICAgdGhpcy5mYW5jeWJveC5jbG9zZSgpO1xyXG5cclxuICAgICAgICBicmVhaztcclxuXHJcbiAgICAgIGNhc2UgXCJzbGlkZVwiOlxyXG4gICAgICAgIHRoaXMuZmFuY3lib3hbZXZlbnQuZGVsdGFZIDwgMCA/IFwicHJldlwiIDogXCJuZXh0XCJdKCk7XHJcblxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSGFuZGxlIGBjbGlja2AgYW5kIGBkYmxjbGlja2AgZXZlbnRzXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IHNsaWRlXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50XHJcbiAgICovXHJcbiAgb25DbGljayhzbGlkZSwgZXZlbnQpIHtcclxuICAgIC8vIENoZWNrIHRoYXQgY2xpY2tzIHNob3VsZCBiZSBhbGxvd2VkXHJcbiAgICBpZiAodGhpcy5mYW5jeWJveC5zdGF0ZSAhPT0gXCJyZWFkeVwiKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBwYW56b29tID0gc2xpZGUuUGFuem9vbTtcclxuXHJcbiAgICBpZiAoXHJcbiAgICAgIHBhbnpvb20gJiZcclxuICAgICAgKHBhbnpvb20uZHJhZ1Bvc2l0aW9uLm1pZFBvaW50IHx8XHJcbiAgICAgICAgcGFuem9vbS5kcmFnT2Zmc2V0LnggIT09IDAgfHxcclxuICAgICAgICBwYW56b29tLmRyYWdPZmZzZXQueSAhPT0gMCB8fFxyXG4gICAgICAgIHBhbnpvb20uZHJhZ09mZnNldC5zY2FsZSAhPT0gMSlcclxuICAgICkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuZmFuY3lib3guQ2Fyb3VzZWwuUGFuem9vbS5sb2NrQXhpcykge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgcHJvY2VzcyA9IChhY3Rpb24pID0+IHtcclxuICAgICAgc3dpdGNoIChhY3Rpb24pIHtcclxuICAgICAgICBjYXNlIFwidG9nZ2xlWm9vbVwiOlxyXG4gICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgICAgc2xpZGUuUGFuem9vbSAmJiBzbGlkZS5QYW56b29tLnpvb21XaXRoQ2xpY2soZXZlbnQpO1xyXG5cclxuICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBjYXNlIFwiY2xvc2VcIjpcclxuICAgICAgICAgIHRoaXMuZmFuY3lib3guY2xvc2UoKTtcclxuXHJcbiAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgY2FzZSBcIm5leHRcIjpcclxuICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICAgIHRoaXMuZmFuY3lib3gubmV4dCgpO1xyXG5cclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGNsaWNrQWN0aW9uID0gdGhpcy5mYW5jeWJveC5vcHRpb24oXCJJbWFnZS5jbGlja1wiKTtcclxuICAgIGNvbnN0IGRibGNsaWNrQWN0aW9uID0gdGhpcy5mYW5jeWJveC5vcHRpb24oXCJJbWFnZS5kb3VibGVDbGlja1wiKTtcclxuXHJcbiAgICBpZiAoZGJsY2xpY2tBY3Rpb24pIHtcclxuICAgICAgaWYgKHRoaXMuY2xpY2tUaW1lcikge1xyXG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmNsaWNrVGltZXIpO1xyXG4gICAgICAgIHRoaXMuY2xpY2tUaW1lciA9IG51bGw7XHJcblxyXG4gICAgICAgIHByb2Nlc3MoZGJsY2xpY2tBY3Rpb24pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuY2xpY2tUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgdGhpcy5jbGlja1RpbWVyID0gbnVsbDtcclxuICAgICAgICAgIHByb2Nlc3MoY2xpY2tBY3Rpb24pO1xyXG4gICAgICAgIH0sIDMwMCk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHByb2Nlc3MoY2xpY2tBY3Rpb24pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSGFuZGxlIGBDYXJvdXNlbC5jaGFuZ2VgIGV2ZW50IHRvIHJlc2V0IHpvb20gbGV2ZWwgZm9yIGFueSB6b29tZWQgaW4vb3V0IGNvbnRlbnRcclxuICAgKiBhbmQgdG8gcmV2ZWwgY29udGVudCBvZiB0aGUgY3VycmVudCBwYWdlXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IGZhbmN5Ym94XHJcbiAgICogQHBhcmFtIHtPYmplY3R9IGNhcm91c2VsXHJcbiAgICovXHJcbiAgb25QYWdlQ2hhbmdlKGZhbmN5Ym94LCBjYXJvdXNlbCkge1xyXG4gICAgY29uc3QgY3VyclNsaWRlID0gZmFuY3lib3guZ2V0U2xpZGUoKTtcclxuXHJcbiAgICBjYXJvdXNlbC5zbGlkZXMuZm9yRWFjaCgoc2xpZGUpID0+IHtcclxuICAgICAgaWYgKCFzbGlkZS5QYW56b29tIHx8IHNsaWRlLnN0YXRlICE9PSBcImRvbmVcIikge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHNsaWRlLmluZGV4ICE9PSBjdXJyU2xpZGUuaW5kZXgpIHtcclxuICAgICAgICBzbGlkZS5QYW56b29tLnBhblRvKHtcclxuICAgICAgICAgIHg6IDAsXHJcbiAgICAgICAgICB5OiAwLFxyXG4gICAgICAgICAgc2NhbGU6IDEsXHJcbiAgICAgICAgICBmcmljdGlvbjogMC44LFxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGF0dGFjaCgpIHtcclxuICAgIHRoaXMuZmFuY3lib3gub24odGhpcy5ldmVudHMpO1xyXG4gIH1cclxuXHJcbiAgZGV0YWNoKCkge1xyXG4gICAgdGhpcy5mYW5jeWJveC5vZmYodGhpcy5ldmVudHMpO1xyXG4gIH1cclxufVxyXG5cclxuLy8gRXhwb3NlIGRlZmF1bHRzXHJcbkltYWdlLmRlZmF1bHRzID0gZGVmYXVsdHM7XHJcbiIsImltcG9ydCB7IGlzU2Nyb2xsYWJsZSB9IGZyb20gXCIuLi8uLi8uLi8uLi9zcmMvc2hhcmVkL3V0aWxzL2lzU2Nyb2xsYWJsZS5qc1wiO1xuXG5leHBvcnQgY2xhc3MgU2Nyb2xsTG9jayB7XG4gIGNvbnN0cnVjdG9yKGZhbmN5Ym94KSB7XG4gICAgdGhpcy5mYW5jeWJveCA9IGZhbmN5Ym94O1xuICAgIHRoaXMudmlld3BvcnQgPSBudWxsO1xuXG4gICAgdGhpcy5wZW5kaW5nVXBkYXRlID0gbnVsbDtcblxuICAgIGZvciAoY29uc3QgbWV0aG9kTmFtZSBvZiBbXCJvblJlYWR5XCIsIFwib25SZXNpemVcIiwgXCJvblRvdWNoc3RhcnRcIiwgXCJvblRvdWNobW92ZVwiXSkge1xuICAgICAgdGhpc1ttZXRob2ROYW1lXSA9IHRoaXNbbWV0aG9kTmFtZV0uYmluZCh0aGlzKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUHJvY2VzcyBgaW5pdExheW91dGAgZXZlbnQgdG8gYXR0YWNoIGV2ZW50IGxpc3RlbmVycyBhbmQgcmVzaXplIHZpZXdwb3J0IGlmIG5lZWRlZFxuICAgKi9cbiAgb25SZWFkeSgpIHtcbiAgICAvLyogU3VwcG9ydCBWaXN1YWwgVmlld3BvcnQgQVBJXG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1Zpc3VhbF9WaWV3cG9ydF9BUElcbiAgICBjb25zdCB2aWV3cG9ydCA9IHdpbmRvdy52aXN1YWxWaWV3cG9ydDtcblxuICAgIGlmICh2aWV3cG9ydCkge1xuICAgICAgdGhpcy52aWV3cG9ydCA9IHZpZXdwb3J0O1xuICAgICAgdGhpcy5zdGFydFkgPSAwO1xuXG4gICAgICB2aWV3cG9ydC5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIHRoaXMub25SZXNpemUpO1xuXG4gICAgICB0aGlzLnVwZGF0ZVZpZXdwb3J0KCk7XG4gICAgfVxuXG4gICAgLy8qIFByZXZlbnQgYm91bmNpbmcgd2hpbGUgc2Nyb2xsaW5nIG9uIG1vYmlsZSBkZXZpY2VzXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsIHRoaXMub25Ub3VjaHN0YXJ0LCB7IHBhc3NpdmU6IGZhbHNlIH0pO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsIHRoaXMub25Ub3VjaG1vdmUsIHsgcGFzc2l2ZTogZmFsc2UgfSk7XG5cbiAgICAvLyogUHJldmVudCB3aW5kb3cgc2Nyb2xsaW5nIHdpdGggbW91c2Ugd2hlZWxcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIndoZWVsXCIsIHRoaXMub25XaGVlbCwgeyBwYXNzaXZlOiBmYWxzZSB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGUgYHJlc2l6ZWAgZXZlbnQgdG8gY2FsbCBgdXBkYXRlVmlld3BvcnRgXG4gICAqL1xuICBvblJlc2l6ZSgpIHtcbiAgICB0aGlzLnVwZGF0ZVZpZXdwb3J0KCk7XG4gIH1cblxuICAvKipcbiAgICogU2NhbGUgJGNvbnRhaW5lciBwcm9wb3J0aW9uYWxseSB0byBhY3R1YWxseSBmaXQgaW5zaWRlIGJyb3dzZXIsXG4gICAqIGUuZy4sIGRpc2FibGUgdmlld3BvcnQgem9vbWluZ1xuICAgKi9cbiAgdXBkYXRlVmlld3BvcnQoKSB7XG4gICAgY29uc3QgZmFuY3lib3ggPSB0aGlzLmZhbmN5Ym94LFxuICAgICAgdmlld3BvcnQgPSB0aGlzLnZpZXdwb3J0LFxuICAgICAgc2NhbGUgPSB2aWV3cG9ydC5zY2FsZSB8fCAxLFxuICAgICAgJGNvbnRhaW5lciA9IGZhbmN5Ym94LiRjb250YWluZXI7XG5cbiAgICBpZiAoISRjb250YWluZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgd2lkdGggPSBcIlwiLFxuICAgICAgaGVpZ2h0ID0gXCJcIixcbiAgICAgIHRyYW5zZm9ybSA9IFwiXCI7XG5cbiAgICBpZiAoc2NhbGUgLSAxID4gMC4xKSB7XG4gICAgICB3aWR0aCA9IGAke3ZpZXdwb3J0LndpZHRoICogc2NhbGV9cHhgO1xuICAgICAgaGVpZ2h0ID0gYCR7dmlld3BvcnQuaGVpZ2h0ICogc2NhbGV9cHhgO1xuICAgICAgdHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKCR7dmlld3BvcnQub2Zmc2V0TGVmdH1weCwgJHt2aWV3cG9ydC5vZmZzZXRUb3B9cHgsIDApIHNjYWxlKCR7MSAvIHNjYWxlfSlgO1xuICAgIH1cblxuICAgICRjb250YWluZXIuc3R5bGUud2lkdGggPSB3aWR0aDtcbiAgICAkY29udGFpbmVyLnN0eWxlLmhlaWdodCA9IGhlaWdodDtcbiAgICAkY29udGFpbmVyLnN0eWxlLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGUgYHRvdWNoc3RhcnRgIGV2ZW50IHRvIG1hcmsgZHJhZyBzdGFydCBwb3NpdGlvblxuICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnRcbiAgICovXG4gIG9uVG91Y2hzdGFydChldmVudCkge1xuICAgIHRoaXMuc3RhcnRZID0gZXZlbnQudG91Y2hlcyA/IGV2ZW50LnRvdWNoZXNbMF0uc2NyZWVuWSA6IGV2ZW50LnNjcmVlblk7XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlIGB0b3VjaG1vdmVgIGV2ZW50IHRvIGZpeCBzY3JvbGxpbmcgb24gbW9iaWxlIGRldmljZXMgKGlPUylcbiAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50XG4gICAqL1xuICBvblRvdWNobW92ZShldmVudCkge1xuICAgIGNvbnN0IHN0YXJ0WSA9IHRoaXMuc3RhcnRZO1xuICAgIGNvbnN0IHpvb20gPSB3aW5kb3cuaW5uZXJXaWR0aCAvIHdpbmRvdy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGg7XG5cbiAgICBpZiAoIWV2ZW50LmNhbmNlbGFibGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZXZlbnQudG91Y2hlcy5sZW5ndGggPiAxIHx8IHpvb20gIT09IDEpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBlbCA9IGlzU2Nyb2xsYWJsZShldmVudC5jb21wb3NlZFBhdGgoKVswXSk7XG5cbiAgICBpZiAoIWVsKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpO1xuICAgIGNvbnN0IGhlaWdodCA9IHBhcnNlSW50KHN0eWxlLmdldFByb3BlcnR5VmFsdWUoXCJoZWlnaHRcIiksIDEwKTtcblxuICAgIGNvbnN0IGN1clkgPSBldmVudC50b3VjaGVzID8gZXZlbnQudG91Y2hlc1swXS5zY3JlZW5ZIDogZXZlbnQuc2NyZWVuWTtcblxuICAgIGNvbnN0IGlzQXRUb3AgPSBzdGFydFkgPD0gY3VyWSAmJiBlbC5zY3JvbGxUb3AgPT09IDA7XG4gICAgY29uc3QgaXNBdEJvdHRvbSA9IHN0YXJ0WSA+PSBjdXJZICYmIGVsLnNjcm9sbEhlaWdodCAtIGVsLnNjcm9sbFRvcCA9PT0gaGVpZ2h0O1xuXG4gICAgaWYgKGlzQXRUb3AgfHwgaXNBdEJvdHRvbSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlIGB3aGVlbGAgZXZlbnRcbiAgICovXG4gIG9uV2hlZWwoZXZlbnQpIHtcbiAgICBpZiAoIWlzU2Nyb2xsYWJsZShldmVudC5jb21wb3NlZFBhdGgoKVswXSkpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENsZWFuIGV2ZXJ5dGhpbmcgdXBcbiAgICovXG4gIGNsZWFudXAoKSB7XG4gICAgaWYgKHRoaXMucGVuZGluZ1VwZGF0ZSkge1xuICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5wZW5kaW5nVXBkYXRlKTtcbiAgICAgIHRoaXMucGVuZGluZ1VwZGF0ZSA9IG51bGw7XG4gICAgfVxuXG4gICAgY29uc3Qgdmlld3BvcnQgPSB0aGlzLnZpZXdwb3J0O1xuXG4gICAgaWYgKHZpZXdwb3J0KSB7XG4gICAgICB2aWV3cG9ydC5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIHRoaXMub25SZXNpemUpO1xuICAgICAgdGhpcy52aWV3cG9ydCA9IG51bGw7XG4gICAgfVxuXG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsIHRoaXMub25Ub3VjaHN0YXJ0LCBmYWxzZSk7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIiwgdGhpcy5vblRvdWNobW92ZSwgZmFsc2UpO1xuXG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ3aGVlbFwiLCB0aGlzLm9uV2hlZWwsIHsgcGFzc2l2ZTogZmFsc2UgfSk7XG4gIH1cblxuICBhdHRhY2goKSB7XG4gICAgdGhpcy5mYW5jeWJveC5vbihcImluaXRMYXlvdXRcIiwgdGhpcy5vblJlYWR5KTtcbiAgfVxuXG4gIGRldGFjaCgpIHtcbiAgICB0aGlzLmZhbmN5Ym94Lm9mZihcImluaXRMYXlvdXRcIiwgdGhpcy5vblJlYWR5KTtcblxuICAgIHRoaXMuY2xlYW51cCgpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBleHRlbmQgfSBmcm9tIFwiLi4vLi4vLi4vc2hhcmVkL3V0aWxzL2V4dGVuZC5qc1wiO1xuaW1wb3J0IHsgQ2Fyb3VzZWwgfSBmcm9tIFwiLi4vLi4vLi4vQ2Fyb3VzZWwvQ2Fyb3VzZWwuanNcIjtcblxuY29uc3QgZGVmYXVsdHMgPSB7XG4gIC8vIFRoZSBtaW5pbXVtIG51bWJlciBvZiBpbWFnZXMgaW4gdGhlIGdhbGxlcnkgdG8gZGlzcGxheSB0aHVtYm5haWxzXG4gIG1pblNsaWRlQ291bnQ6IDIsXG5cbiAgLy8gTWluaW11bSBzY3JlZW4gaGVpZ2h0IHRvIGRpc3BsYXkgdGh1bWJuYWlsc1xuICBtaW5TY3JlZW5IZWlnaHQ6IDUwMCxcblxuICAvLyBBdXRvbWF0aWNhbGx5IHNob3cgdGh1bWJuYWlscyB3aGVuIG9wZW5lZFxuICBhdXRvU3RhcnQ6IHRydWUsXG5cbiAgLy8gS2V5Ym9hcmQgc2hvcnRjdXQgdG8gdG9nZ2xlIHRodW1ibmFpbCBjb250YWluZXJcbiAga2V5OiBcInRcIixcblxuICAvLyBDdXN0b21pemUgQ2Fyb3VzZWwgaW5zdGFuY2VcbiAgQ2Fyb3VzZWw6IHt9LFxuXG4gIHRwbDogYDxkaXYgY2xhc3M9XCJmYW5jeWJveF9fdGh1bWJcIiBzdHlsZT1cImJhY2tncm91bmQtaW1hZ2U6dXJsKCd7e3NyY319JylcIj48L2Rpdj5gLFxufTtcblxuZXhwb3J0IGNsYXNzIFRodW1icyB7XG4gIGNvbnN0cnVjdG9yKGZhbmN5Ym94KSB7XG4gICAgdGhpcy5mYW5jeWJveCA9IGZhbmN5Ym94O1xuXG4gICAgdGhpcy4kY29udGFpbmVyID0gbnVsbDtcbiAgICB0aGlzLnN0YXRlID0gXCJpbml0XCI7XG5cbiAgICBmb3IgKGNvbnN0IG1ldGhvZE5hbWUgb2YgW1wib25QcmVwYXJlXCIsIFwib25DbG9zaW5nXCIsIFwib25LZXlkb3duXCJdKSB7XG4gICAgICB0aGlzW21ldGhvZE5hbWVdID0gdGhpc1ttZXRob2ROYW1lXS5iaW5kKHRoaXMpO1xuICAgIH1cblxuICAgIHRoaXMuZXZlbnRzID0ge1xuICAgICAgcHJlcGFyZTogdGhpcy5vblByZXBhcmUsXG4gICAgICBjbG9zaW5nOiB0aGlzLm9uQ2xvc2luZyxcbiAgICAgIGtleWRvd246IHRoaXMub25LZXlkb3duLFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogUHJvY2VzcyBgcHJlcGFyZWAgZXZlbnQgdG8gYnVpbGQgdGhlIGxheW91dFxuICAgKi9cbiAgb25QcmVwYXJlKCkge1xuICAgIC8vIEdldCBzbGlkZXMsIHNraXAgaWYgdGhlIHRvdGFsIG51bWJlciBpcyBsZXNzIHRoYW4gdGhlIG1pbmltdW1cbiAgICBjb25zdCBzbGlkZXMgPSB0aGlzLmdldFNsaWRlcygpO1xuXG4gICAgaWYgKHNsaWRlcy5sZW5ndGggPCB0aGlzLmZhbmN5Ym94Lm9wdGlvbihcIlRodW1icy5taW5TbGlkZUNvdW50XCIpKSB7XG4gICAgICB0aGlzLnN0YXRlID0gXCJkaXNhYmxlZFwiO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgIHRoaXMuZmFuY3lib3gub3B0aW9uKFwiVGh1bWJzLmF1dG9TdGFydFwiKSA9PT0gdHJ1ZSAmJlxuICAgICAgdGhpcy5mYW5jeWJveC5DYXJvdXNlbC5QYW56b29tLmNvbnRlbnQuaGVpZ2h0ID49IHRoaXMuZmFuY3lib3gub3B0aW9uKFwiVGh1bWJzLm1pblNjcmVlbkhlaWdodFwiKVxuICAgICkge1xuICAgICAgdGhpcy5idWlsZCgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBQcm9jZXNzIGBjbG9zaW5nYCBldmVudCB0byBkaXNhYmxlIGFsbCBldmVudHNcbiAgICovXG4gIG9uQ2xvc2luZygpIHtcbiAgICBpZiAodGhpcy5DYXJvdXNlbCkge1xuICAgICAgdGhpcy5DYXJvdXNlbC5QYW56b29tLmRldGFjaEV2ZW50cygpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBQcm9jZXNzIGBrZXlkb3duYCBldmVudCB0byBlbmFibGUgdGh1bWJuYWlsIGxpc3QgdG9nZ2xpbmcgdXNpbmcga2V5Ym9hcmQga2V5XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBmYW5jeWJveFxuICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5XG4gICAqL1xuICBvbktleWRvd24oZmFuY3lib3gsIGtleSkge1xuICAgIGlmIChrZXkgPT09IGZhbmN5Ym94Lm9wdGlvbihcIlRodW1icy5rZXlcIikpIHtcbiAgICAgIHRoaXMudG9nZ2xlKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEJ1aWxkIGxheW91dCBhbmQgaW5pdCB0aHVtYm5haWwgQ2Fyb3VzZWxcbiAgICovXG4gIGJ1aWxkKCkge1xuICAgIGlmICh0aGlzLiRjb250YWluZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBDcmVhdGUgd3JhcHBpbmcgZWxlbWVudCBhbmQgYXBwZW5kIHRvIGxheW91dFxuICAgIGNvbnN0ICRjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXG4gICAgJGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwiZmFuY3lib3hfX3RodW1ic1wiKTtcblxuICAgIHRoaXMuZmFuY3lib3guJGNhcm91c2VsLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCRjb250YWluZXIsIHRoaXMuZmFuY3lib3guJGNhcm91c2VsLm5leHRTaWJsaW5nKTtcblxuICAgIC8vIEluaXRpYWxpc2UgdGh1bWJuYWlsIGNhcm91c2VsIHdpdGggYWxsIHNsaWRlc1xuICAgIHRoaXMuQ2Fyb3VzZWwgPSBuZXcgQ2Fyb3VzZWwoXG4gICAgICAkY29udGFpbmVyLFxuICAgICAgZXh0ZW5kKFxuICAgICAgICB0cnVlLFxuICAgICAgICB7XG4gICAgICAgICAgRG90czogZmFsc2UsXG4gICAgICAgICAgTmF2aWdhdGlvbjogZmFsc2UsXG4gICAgICAgICAgU3luYzoge1xuICAgICAgICAgICAgZnJpY3Rpb246IDAsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBpbmZpbml0ZTogZmFsc2UsXG4gICAgICAgICAgY2VudGVyOiB0cnVlLFxuICAgICAgICAgIGZpbGw6IHRydWUsXG4gICAgICAgICAgZHJhZ0ZyZWU6IHRydWUsXG4gICAgICAgICAgc2xpZGVzUGVyUGFnZTogMSxcbiAgICAgICAgICBwcmVsb2FkOiAxLFxuICAgICAgICB9LFxuICAgICAgICB0aGlzLmZhbmN5Ym94Lm9wdGlvbihcIlRodW1icy5DYXJvdXNlbFwiKSxcbiAgICAgICAge1xuICAgICAgICAgIFN5bmM6IHtcbiAgICAgICAgICAgIHRhcmdldDogdGhpcy5mYW5jeWJveC5DYXJvdXNlbCxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNsaWRlczogdGhpcy5nZXRTbGlkZXMoKSxcbiAgICAgICAgfVxuICAgICAgKVxuICAgICk7XG5cbiAgICAvLyBTbGlkZSBjYXJvdXNlbCBvbiB3aGVlbCBldmVudFxuICAgIHRoaXMuQ2Fyb3VzZWwuUGFuem9vbS5vbihcIndoZWVsXCIsIChwYW56b29tLCBldmVudCkgPT4ge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgdGhpcy5mYW5jeWJveFtldmVudC5kZWx0YVkgPCAwID8gXCJwcmV2XCIgOiBcIm5leHRcIl0oKTtcbiAgICB9KTtcblxuICAgIHRoaXMuJGNvbnRhaW5lciA9ICRjb250YWluZXI7XG5cbiAgICB0aGlzLnN0YXRlID0gXCJ2aXNpYmxlXCI7XG4gIH1cblxuICAvKipcbiAgICogUHJvY2VzcyBhbGwgZmFuY3lib3ggc2xpZGVzIHRvIGdldCBhbGwgdGh1bWJuYWlsIGltYWdlc1xuICAgKi9cbiAgZ2V0U2xpZGVzKCkge1xuICAgIGNvbnN0IHNsaWRlcyA9IFtdO1xuXG4gICAgZm9yIChjb25zdCBzbGlkZSBvZiB0aGlzLmZhbmN5Ym94Lml0ZW1zKSB7XG4gICAgICBjb25zdCB0aHVtYiA9IHNsaWRlLnRodW1iO1xuXG4gICAgICBpZiAodGh1bWIpIHtcbiAgICAgICAgc2xpZGVzLnB1c2goe1xuICAgICAgICAgIGh0bWw6IHRoaXMuZmFuY3lib3gub3B0aW9uKFwiVGh1bWJzLnRwbFwiKS5yZXBsYWNlKC9cXHtcXHtzcmNcXH1cXH0vZ2ksIHRodW1iKSxcbiAgICAgICAgICBjdXN0b21DbGFzczogYGhhcy10aHVtYiBoYXMtJHtzbGlkZS50eXBlIHx8IFwiaW1hZ2VcIn1gLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc2xpZGVzO1xuICB9XG5cbiAgLyoqXG4gICAqIFRvZ2dsZSB2aXNpYmlsaXR5IG9mIHRodW1ibmFpbCBsaXN0XG4gICAqIFRpcDogeW91IGNhbiB1c2UgYEZhbmN5Ym94LmdldEluc3RhbmNlKCkucGx1Z2lucy5UaHVtYnMudG9nZ2xlKClgIGZyb20gYW55d2hlcmUgaW4geW91ciBjb2RlXG4gICAqL1xuICB0b2dnbGUoKSB7XG4gICAgaWYgKHRoaXMuc3RhdGUgPT09IFwidmlzaWJsZVwiKSB7XG4gICAgICB0aGlzLmhpZGUoKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUgPT09IFwiaGlkZGVuXCIpIHtcbiAgICAgIHRoaXMuc2hvdygpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmJ1aWxkKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNob3cgdGh1bWJuYWlsIGxpc3RcbiAgICovXG4gIHNob3coKSB7XG4gICAgaWYgKHRoaXMuc3RhdGUgPT09IFwiaGlkZGVuXCIpIHtcbiAgICAgIHRoaXMuJGNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcblxuICAgICAgdGhpcy5DYXJvdXNlbC5QYW56b29tLmF0dGFjaEV2ZW50cygpO1xuXG4gICAgICB0aGlzLnN0YXRlID0gXCJ2aXNpYmxlXCI7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEhpZGUgdGh1bWJuYWlsIGxpc3RcbiAgICovXG4gIGhpZGUoKSB7XG4gICAgaWYgKHRoaXMuc3RhdGUgPT09IFwidmlzaWJsZVwiKSB7XG4gICAgICB0aGlzLkNhcm91c2VsLlBhbnpvb20uZGV0YWNoRXZlbnRzKCk7XG5cbiAgICAgIHRoaXMuJGNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG5cbiAgICAgIHRoaXMuc3RhdGUgPSBcImhpZGRlblwiO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNldCB0aGUgc3RhdGVcbiAgICovXG4gIGNsZWFudXAoKSB7XG4gICAgaWYgKHRoaXMuQ2Fyb3VzZWwpIHtcbiAgICAgIHRoaXMuQ2Fyb3VzZWwuZGVzdHJveSgpO1xuICAgICAgdGhpcy5DYXJvdXNlbCA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuJGNvbnRhaW5lcikge1xuICAgICAgdGhpcy4kY29udGFpbmVyLnJlbW92ZSgpO1xuICAgICAgdGhpcy4kY29udGFpbmVyID0gbnVsbDtcbiAgICB9XG5cbiAgICB0aGlzLnN0YXRlID0gXCJpbml0XCI7XG4gIH1cblxuICBhdHRhY2goKSB7XG4gICAgdGhpcy5mYW5jeWJveC5vbih0aGlzLmV2ZW50cyk7XG4gIH1cblxuICBkZXRhY2goKSB7XG4gICAgdGhpcy5mYW5jeWJveC5vZmYodGhpcy5ldmVudHMpO1xuXG4gICAgdGhpcy5jbGVhbnVwKCk7XG4gIH1cbn1cblxuLy8gRXhwb3NlIGRlZmF1bHRzXG5UaHVtYnMuZGVmYXVsdHMgPSBkZWZhdWx0cztcbiIsImltcG9ydCB7IGlzUGxhaW5PYmplY3QgfSBmcm9tIFwiLi4vLi4vLi4vc2hhcmVkL3V0aWxzL2lzUGxhaW5PYmplY3QuanNcIjtcclxuaW1wb3J0IHsgZXh0ZW5kIH0gZnJvbSBcIi4uLy4uLy4uL3NoYXJlZC91dGlscy9leHRlbmQuanNcIjtcclxuXHJcbmltcG9ydCB7IEZ1bGxzY3JlZW4gfSBmcm9tIFwiLi4vLi4vLi4vc2hhcmVkL3V0aWxzL0Z1bGxzY3JlZW4uanNcIjtcclxuaW1wb3J0IHsgU2xpZGVzaG93IH0gZnJvbSBcIi4uLy4uLy4uL3NoYXJlZC91dGlscy9TbGlkZXNob3cuanNcIjtcclxuXHJcbmNvbnN0IGRlZmF1bHRzID0ge1xyXG4gIC8vIFdoYXQgdG9vbGJhciBpdGVtcyB0byBkaXNwbGF5XHJcbiAgZGlzcGxheTogW1xyXG4gICAgXCJjb3VudGVyXCIsXHJcbiAgICAvL1wicHJldlwiLFxyXG4gICAgLy9cIm5leHRcIixcclxuICAgIC8vXCJkb3dubG9hZFwiLFxyXG4gICAgXCJ6b29tXCIsXHJcbiAgICBcInNsaWRlc2hvd1wiLFxyXG4gICAgXCJmdWxsc2NyZWVuXCIsXHJcbiAgICBcInRodW1ic1wiLFxyXG4gICAgXCJjbG9zZVwiLFxyXG4gIF0sXHJcblxyXG4gIC8vIE9ubHkgY3JlYXRlIGEgdG9vbGJhciBpdGVtIGlmIHRoZXJlIGlzIGF0IGxlYXN0IG9uZSBpbWFnZSBpbiB0aGUgZ3JvdXBcclxuICBhdXRvRW5hYmxlOiB0cnVlLFxyXG5cclxuICAvLyBUb29sYmFyIGl0ZW1zOyBjYW4gYmUgbGlua3MsIGJ1dHRvbnMgb3IgYGRpdmAgZWxlbWVudHNcclxuICBpdGVtczoge1xyXG4gICAgY291bnRlcjoge1xyXG4gICAgICBwb3NpdGlvbjogXCJsZWZ0XCIsXHJcbiAgICAgIHR5cGU6IFwiZGl2XCIsXHJcbiAgICAgIGNsYXNzOiBcImZhbmN5Ym94X19jb3VudGVyXCIsXHJcbiAgICAgIGh0bWw6ICc8c3BhbiBkYXRhLWZhbmN5Ym94LWluZGV4PVwiXCI+PC9zcGFuPiZuYnNwOy8mbmJzcDs8c3BhbiBkYXRhLWZhbmN5Ym94LWNvdW50PVwiXCI+PC9zcGFuPicsXHJcbiAgICAgIGF0dHI6IHsgdGFiaW5kZXg6IC0xIH0sXHJcbiAgICB9LFxyXG4gICAgcHJldjoge1xyXG4gICAgICB0eXBlOiBcImJ1dHRvblwiLFxyXG4gICAgICBjbGFzczogXCJmYW5jeWJveF9fYnV0dG9uLS1wcmV2XCIsXHJcbiAgICAgIGxhYmVsOiBcIlBSRVZcIixcclxuICAgICAgaHRtbDogJzxzdmcgdmlld0JveD1cIjAgMCAyNCAyNFwiPjxwYXRoIGQ9XCJNMTUgNGwtOCA4IDggOFwiLz48L3N2Zz4nLFxyXG4gICAgICBhdHRyOiB7IFwiZGF0YS1mYW5jeWJveC1wcmV2XCI6IFwiXCIgfSxcclxuICAgIH0sXHJcbiAgICBuZXh0OiB7XHJcbiAgICAgIHR5cGU6IFwiYnV0dG9uXCIsXHJcbiAgICAgIGNsYXNzOiBcImZhbmN5Ym94X19idXR0b24tLW5leHRcIixcclxuICAgICAgbGFiZWw6IFwiTkVYVFwiLFxyXG4gICAgICBodG1sOiAnPHN2ZyB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PHBhdGggZD1cIk04IDRsOCA4LTggOFwiLz48L3N2Zz4nLFxyXG4gICAgICBhdHRyOiB7IFwiZGF0YS1mYW5jeWJveC1uZXh0XCI6IFwiXCIgfSxcclxuICAgIH0sXHJcbiAgICBmdWxsc2NyZWVuOiB7XHJcbiAgICAgIHR5cGU6IFwiYnV0dG9uXCIsXHJcbiAgICAgIGNsYXNzOiBcImZhbmN5Ym94X19idXR0b24tLWZ1bGxzY3JlZW5cIixcclxuICAgICAgbGFiZWw6IFwiVE9HR0xFX0ZVTExTQ1JFRU5cIixcclxuICAgICAgaHRtbDogYDxzdmcgdmlld0JveD1cIjAgMCAyNCAyNFwiPlxyXG4gICAgICAgICAgICAgICAgPGc+PHBhdGggZD1cIk0zIDggVjNoNVwiPjwvcGF0aD48cGF0aCBkPVwiTTIxIDhWM2gtNVwiPjwvcGF0aD48cGF0aCBkPVwiTTggMjFIM3YtNVwiPjwvcGF0aD48cGF0aCBkPVwiTTE2IDIxaDV2LTVcIj48L3BhdGg+PC9nPlxyXG4gICAgICAgICAgICAgICAgPGc+PHBhdGggZD1cIk03IDJ2NUgyTTE3IDJ2NWg1TTIgMTdoNXY1TTIyIDE3aC01djVcIi8+PC9nPlxyXG4gICAgICAgICAgICA8L3N2Zz5gLFxyXG4gICAgICBjbGljazogZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgaWYgKEZ1bGxzY3JlZW4uZWxlbWVudCgpKSB7XHJcbiAgICAgICAgICBGdWxsc2NyZWVuLmRlYWN0aXZhdGUoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgRnVsbHNjcmVlbi5hY3RpdmF0ZSh0aGlzLmZhbmN5Ym94LiRjb250YWluZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgIH0sXHJcbiAgICBzbGlkZXNob3c6IHtcclxuICAgICAgdHlwZTogXCJidXR0b25cIixcclxuICAgICAgY2xhc3M6IFwiZmFuY3lib3hfX2J1dHRvbi0tc2xpZGVzaG93XCIsXHJcbiAgICAgIGxhYmVsOiBcIlRPR0dMRV9TTElERVNIT1dcIixcclxuICAgICAgaHRtbDogYDxzdmcgdmlld0JveD1cIjAgMCAyNCAyNFwiPlxyXG4gICAgICAgICAgICAgICAgPGc+PHBhdGggZD1cIk02IDR2MTZcIi8+PHBhdGggZD1cIk0yMCAxMkw2IDIwXCIvPjxwYXRoIGQ9XCJNMjAgMTJMNiA0XCIvPjwvZz5cclxuICAgICAgICAgICAgICAgIDxnPjxwYXRoIGQ9XCJNNyA0djE1TTE3IDR2MTVcIi8+PC9nPlxyXG4gICAgICAgICAgICA8L3N2Zz5gLFxyXG4gICAgICBjbGljazogZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgdGhpcy5TbGlkZXNob3cudG9nZ2xlKCk7XHJcbiAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAgem9vbToge1xyXG4gICAgICB0eXBlOiBcImJ1dHRvblwiLFxyXG4gICAgICBjbGFzczogXCJmYW5jeWJveF9fYnV0dG9uLS16b29tXCIsXHJcbiAgICAgIGxhYmVsOiBcIlRPR0dMRV9aT09NXCIsXHJcbiAgICAgIGh0bWw6ICc8c3ZnIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48Y2lyY2xlIGN4PVwiMTBcIiBjeT1cIjEwXCIgcj1cIjdcIj48L2NpcmNsZT48cGF0aCBkPVwiTTE2IDE2IEwyMSAyMVwiPjwvc3ZnPicsXHJcbiAgICAgIGNsaWNrOiBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICBjb25zdCBwYW56b29tID0gdGhpcy5mYW5jeWJveC5nZXRTbGlkZSgpLlBhbnpvb207XHJcblxyXG4gICAgICAgIGlmIChwYW56b29tKSB7XHJcbiAgICAgICAgICBwYW56b29tLnRvZ2dsZVpvb20oKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAgZG93bmxvYWQ6IHtcclxuICAgICAgdHlwZTogXCJsaW5rXCIsXHJcbiAgICAgIGxhYmVsOiBcIkRPV05MT0FEXCIsXHJcbiAgICAgIGNsYXNzOiBcImZhbmN5Ym94X19idXR0b24tLWRvd25sb2FkXCIsXHJcbiAgICAgIGh0bWw6ICc8c3ZnIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48cGF0aCBkPVwiTTEyIDE1VjNtMCAxMmwtNC00bTQgNGw0LTRNMiAxN2wuNjIgMi40OEEyIDIgMCAwMDQuNTYgMjFoMTQuODhhMiAyIDAgMDAxLjk0LTEuNTFMMjIgMTdcIi8+PC9zdmc+JyxcclxuICAgICAgY2xpY2s6IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICB9LFxyXG4gICAgfSxcclxuICAgIHRodW1iczoge1xyXG4gICAgICB0eXBlOiBcImJ1dHRvblwiLFxyXG4gICAgICBsYWJlbDogXCJUT0dHTEVfVEhVTUJTXCIsXHJcbiAgICAgIGNsYXNzOiBcImZhbmN5Ym94X19idXR0b24tLXRodW1ic1wiLFxyXG4gICAgICBodG1sOiAnPHN2ZyB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PGNpcmNsZSBjeD1cIjRcIiBjeT1cIjRcIiByPVwiMVwiIC8+PGNpcmNsZSBjeD1cIjEyXCIgY3k9XCI0XCIgcj1cIjFcIiB0cmFuc2Zvcm09XCJyb3RhdGUoOTAgMTIgNClcIi8+PGNpcmNsZSBjeD1cIjIwXCIgY3k9XCI0XCIgcj1cIjFcIiB0cmFuc2Zvcm09XCJyb3RhdGUoOTAgMjAgNClcIi8+PGNpcmNsZSBjeD1cIjRcIiBjeT1cIjEyXCIgcj1cIjFcIiB0cmFuc2Zvcm09XCJyb3RhdGUoOTAgNCAxMilcIi8+PGNpcmNsZSBjeD1cIjEyXCIgY3k9XCIxMlwiIHI9XCIxXCIgdHJhbnNmb3JtPVwicm90YXRlKDkwIDEyIDEyKVwiLz48Y2lyY2xlIGN4PVwiMjBcIiBjeT1cIjEyXCIgcj1cIjFcIiB0cmFuc2Zvcm09XCJyb3RhdGUoOTAgMjAgMTIpXCIvPjxjaXJjbGUgY3g9XCI0XCIgY3k9XCIyMFwiIHI9XCIxXCIgdHJhbnNmb3JtPVwicm90YXRlKDkwIDQgMjApXCIvPjxjaXJjbGUgY3g9XCIxMlwiIGN5PVwiMjBcIiByPVwiMVwiIHRyYW5zZm9ybT1cInJvdGF0ZSg5MCAxMiAyMClcIi8+PGNpcmNsZSBjeD1cIjIwXCIgY3k9XCIyMFwiIHI9XCIxXCIgdHJhbnNmb3JtPVwicm90YXRlKDkwIDIwIDIwKVwiLz48L3N2Zz4nLFxyXG4gICAgICBjbGljazogZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHRodW1icyA9IHRoaXMuZmFuY3lib3gucGx1Z2lucy5UaHVtYnM7XHJcblxyXG4gICAgICAgIGlmICh0aHVtYnMpIHtcclxuICAgICAgICAgIHRodW1icy50b2dnbGUoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAgY2xvc2U6IHtcclxuICAgICAgdHlwZTogXCJidXR0b25cIixcclxuICAgICAgbGFiZWw6IFwiQ0xPU0VcIixcclxuICAgICAgY2xhc3M6IFwiZmFuY3lib3hfX2J1dHRvbi0tY2xvc2VcIixcclxuICAgICAgaHRtbDogJzxzdmcgdmlld0JveD1cIjAgMCAyNCAyNFwiPjxwYXRoIGQ9XCJNMjAgMjBMNCA0bTE2IDBMNCAyMFwiPjwvcGF0aD48L3N2Zz4nLFxyXG4gICAgICBhdHRyOiB7IFwiZGF0YS1mYW5jeWJveC1jbG9zZVwiOiBcIlwiLCB0YWJpbmRleDogMCB9LFxyXG4gICAgfSxcclxuICB9LFxyXG59O1xyXG5cclxuZXhwb3J0IGNsYXNzIFRvb2xiYXIge1xyXG4gIGNvbnN0cnVjdG9yKGZhbmN5Ym94KSB7XHJcbiAgICB0aGlzLmZhbmN5Ym94ID0gZmFuY3lib3g7XHJcblxyXG4gICAgdGhpcy4kY29udGFpbmVyID0gbnVsbDtcclxuICAgIHRoaXMuc3RhdGUgPSBcImluaXRcIjtcclxuXHJcbiAgICBmb3IgKGNvbnN0IG1ldGhvZE5hbWUgb2YgW1xyXG4gICAgICBcIm9uSW5pdFwiLFxyXG4gICAgICBcIm9uUHJlcGFyZVwiLFxyXG4gICAgICBcIm9uRG9uZVwiLFxyXG4gICAgICBcIm9uS2V5ZG93blwiLFxyXG4gICAgICBcIm9uQ2xvc2luZ1wiLFxyXG4gICAgICBcIm9uQ2hhbmdlXCIsXHJcbiAgICAgIFwib25TZXR0bGVcIixcclxuICAgICAgXCJvblJlZnJlc2hcIixcclxuICAgIF0pIHtcclxuICAgICAgdGhpc1ttZXRob2ROYW1lXSA9IHRoaXNbbWV0aG9kTmFtZV0uYmluZCh0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmV2ZW50cyA9IHtcclxuICAgICAgaW5pdDogdGhpcy5vbkluaXQsXHJcbiAgICAgIHByZXBhcmU6IHRoaXMub25QcmVwYXJlLFxyXG4gICAgICBkb25lOiB0aGlzLm9uRG9uZSxcclxuICAgICAga2V5ZG93bjogdGhpcy5vbktleWRvd24sXHJcbiAgICAgIGNsb3Npbmc6IHRoaXMub25DbG9zaW5nLFxyXG5cclxuICAgICAgLy8gQ2xlYXIgU2xpZGVzaG93IHdoZW4gdXNlciBzdHJ0cyB0byBjaGFuZ2UgY3VycmVudCBzbGlkZVxyXG4gICAgICBcIkNhcm91c2VsLmNoYW5nZVwiOiB0aGlzLm9uQ2hhbmdlLFxyXG5cclxuICAgICAgLy8gU2V0IHRpbWVyIGFmdGVyIGNhcm91c2VsIGNoYW5nZXMgY3VycmVudCBzbGlkZTsgZGVhY3RpdmUgaWYgbGFzdCBzbGlkZSBpcyByZWFjaGVkXHJcbiAgICAgIFwiQ2Fyb3VzZWwuc2V0dGxlXCI6IHRoaXMub25TZXR0bGUsXHJcblxyXG4gICAgICAvLyBEZWFjdGl2YXRlIFNsaWRlc2hvdyBvbiB1c2VyIGludGVyYWN0aW9uXHJcbiAgICAgIFwiQ2Fyb3VzZWwuUGFuem9vbS50b3VjaFN0YXJ0XCI6ICgpID0+IHRoaXMub25SZWZyZXNoKCksXHJcblxyXG4gICAgICBcIkltYWdlLnN0YXJ0QW5pbWF0aW9uXCI6IChmYW5jeWJveCwgc2xpZGUpID0+IHRoaXMub25SZWZyZXNoKHNsaWRlKSxcclxuICAgICAgXCJJbWFnZS5hZnRlclVwZGF0ZVwiOiAoZmFuY3lib3gsIHNsaWRlKSA9PiB0aGlzLm9uUmVmcmVzaChzbGlkZSksXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgb25Jbml0KCkge1xyXG4gICAgLy8gRGlzYWJsZSBzZWxmIGlmIGN1cnJlbnQgZ3JvdXAgZG9lcyBub3QgY29udGFpbiBhdCBsZWFzdCBvbmUgaW1hZ2VcclxuICAgIGlmICh0aGlzLmZhbmN5Ym94Lm9wdGlvbihcIlRvb2xiYXIuYXV0b0VuYWJsZVwiKSkge1xyXG4gICAgICBsZXQgaGFzSW1hZ2UgPSBmYWxzZTtcclxuXHJcbiAgICAgIGZvciAoY29uc3QgaXRlbSBvZiB0aGlzLmZhbmN5Ym94Lml0ZW1zKSB7XHJcbiAgICAgICAgaWYgKGl0ZW0udHlwZSA9PT0gXCJpbWFnZVwiKSB7XHJcbiAgICAgICAgICBoYXNJbWFnZSA9IHRydWU7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICghaGFzSW1hZ2UpIHtcclxuICAgICAgICB0aGlzLnN0YXRlID0gXCJkaXNhYmxlZFwiO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIERpc2FibGUgdGhlIGNyZWF0aW9uIG9mIGEgY2xvc2UgYnV0dG9uLCBpZiBvbmUgZXhpc3RzIGluIHRoZSB0b29sYmFyXHJcbiAgICBmb3IgKGNvbnN0IGtleSBvZiB0aGlzLmZhbmN5Ym94Lm9wdGlvbihcIlRvb2xiYXIuZGlzcGxheVwiKSkge1xyXG4gICAgICBjb25zdCBpZCA9IGlzUGxhaW5PYmplY3Qoa2V5KSA/IGtleS5pZCA6IGtleTtcclxuXHJcbiAgICAgIGlmIChpZCA9PT0gXCJjbG9zZVwiKSB7XHJcbiAgICAgICAgdGhpcy5mYW5jeWJveC5vcHRpb25zLmNsb3NlQnV0dG9uID0gZmFsc2U7XHJcblxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvblByZXBhcmUoKSB7XHJcbiAgICBjb25zdCBmYW5jeWJveCA9IHRoaXMuZmFuY3lib3g7XHJcbiAgICAvLyBTa2lwIGlmIGRpc2FibGVkXHJcbiAgICBpZiAodGhpcy5zdGF0ZSAhPT0gXCJpbml0XCIpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuYnVpbGQoKTtcclxuXHJcbiAgICB0aGlzLnVwZGF0ZSgpO1xyXG5cclxuICAgIHRoaXMuU2xpZGVzaG93ID0gbmV3IFNsaWRlc2hvdyhmYW5jeWJveCk7XHJcblxyXG4gICAgaWYgKCFmYW5jeWJveC5DYXJvdXNlbC5wcmV2UGFnZSkge1xyXG4gICAgICBpZiAoZmFuY3lib3gub3B0aW9uKFwic2xpZGVzaG93LmF1dG9TdGFydFwiKSkge1xyXG4gICAgICAgIHRoaXMuU2xpZGVzaG93LmFjdGl2YXRlKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChmYW5jeWJveC5vcHRpb24oXCJmdWxsc2NyZWVuLmF1dG9TdGFydFwiKSAmJiAhRnVsbHNjcmVlbi5lbGVtZW50KCkpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgRnVsbHNjcmVlbi5hY3RpdmF0ZShmYW5jeWJveC4kY29udGFpbmVyKTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge31cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgb25Gc0NoYW5nZSgpIHtcclxuICAgIHdpbmRvdy5zY3JvbGxUbyhGdWxsc2NyZWVuLnBhZ2VYT2Zmc2V0LCBGdWxsc2NyZWVuLnBhZ2VZT2Zmc2V0KTtcclxuICB9XHJcblxyXG4gIG9uU2V0dGxlKCkge1xyXG4gICAgY29uc3QgZmFuY3lib3ggPSB0aGlzLmZhbmN5Ym94O1xyXG4gICAgY29uc3Qgc2xpZGVzaG93ID0gdGhpcy5TbGlkZXNob3c7XHJcblxyXG4gICAgaWYgKHNsaWRlc2hvdyAmJiBzbGlkZXNob3cuaXNBY3RpdmUoKSkge1xyXG4gICAgICBpZiAoZmFuY3lib3guZ2V0U2xpZGUoKS5pbmRleCA9PT0gZmFuY3lib3guQ2Fyb3VzZWwuc2xpZGVzLmxlbmd0aCAtIDEgJiYgIWZhbmN5Ym94Lm9wdGlvbihcImluZmluaXRlXCIpKSB7XHJcbiAgICAgICAgc2xpZGVzaG93LmRlYWN0aXZhdGUoKTtcclxuICAgICAgfSBlbHNlIGlmIChmYW5jeWJveC5nZXRTbGlkZSgpLnN0YXRlID09PSBcImRvbmVcIikge1xyXG4gICAgICAgIHNsaWRlc2hvdy5zZXRUaW1lcigpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvbkNoYW5nZSgpIHtcclxuICAgIHRoaXMudXBkYXRlKCk7XHJcblxyXG4gICAgaWYgKHRoaXMuU2xpZGVzaG93ICYmIHRoaXMuU2xpZGVzaG93LmlzQWN0aXZlKCkpIHtcclxuICAgICAgdGhpcy5TbGlkZXNob3cuY2xlYXJUaW1lcigpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgb25Eb25lKGZhbmN5Ym94LCBzbGlkZSkge1xyXG4gICAgY29uc3Qgc2xpZGVzaG93ID0gdGhpcy5TbGlkZXNob3c7XHJcblxyXG4gICAgaWYgKHNsaWRlLmluZGV4ID09PSBmYW5jeWJveC5nZXRTbGlkZSgpLmluZGV4KSB7XHJcbiAgICAgIHRoaXMudXBkYXRlKCk7XHJcblxyXG4gICAgICBpZiAoc2xpZGVzaG93ICYmIHNsaWRlc2hvdy5pc0FjdGl2ZSgpKSB7XHJcbiAgICAgICAgaWYgKCFmYW5jeWJveC5vcHRpb24oXCJpbmZpbml0ZVwiKSAmJiBzbGlkZS5pbmRleCA9PT0gZmFuY3lib3guQ2Fyb3VzZWwuc2xpZGVzLmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgIHNsaWRlc2hvdy5kZWFjdGl2YXRlKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHNsaWRlc2hvdy5zZXRUaW1lcigpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgb25SZWZyZXNoKHNsaWRlKSB7XHJcbiAgICBpZiAoIXNsaWRlIHx8IHNsaWRlLmluZGV4ID09PSB0aGlzLmZhbmN5Ym94LmdldFNsaWRlKCkuaW5kZXgpIHtcclxuICAgICAgdGhpcy51cGRhdGUoKTtcclxuXHJcbiAgICAgIGlmICh0aGlzLlNsaWRlc2hvdyAmJiB0aGlzLlNsaWRlc2hvdy5pc0FjdGl2ZSgpICYmICghc2xpZGUgfHwgc2xpZGUuc3RhdGUgPT09IFwiZG9uZVwiKSkge1xyXG4gICAgICAgIHRoaXMuU2xpZGVzaG93LmRlYWN0aXZhdGUoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgb25LZXlkb3duKGZhbmN5Ym94LCBrZXksIGV2ZW50KSB7XHJcbiAgICBpZiAoa2V5ID09PSBcIiBcIiAmJiB0aGlzLlNsaWRlc2hvdykge1xyXG4gICAgICB0aGlzLlNsaWRlc2hvdy50b2dnbGUoKTtcclxuXHJcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvbkNsb3NpbmcoKSB7XHJcbiAgICBpZiAodGhpcy5TbGlkZXNob3cpIHtcclxuICAgICAgdGhpcy5TbGlkZXNob3cuZGVhY3RpdmF0ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJmdWxsc2NyZWVuY2hhbmdlXCIsIHRoaXMub25Gc0NoYW5nZSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGUgbGluaywgYnV0dG9uIG9yIGBkaXZgIGVsZW1lbnQgZm9yIHRoZSB0b29sYmFyXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IG9ialxyXG4gICAqIEByZXR1cm5zIEhUTUxFbGVtZW50XHJcbiAgICovXHJcbiAgY3JlYXRlRWxlbWVudChvYmopIHtcclxuICAgIGxldCAkZWw7XHJcblxyXG4gICAgaWYgKG9iai50eXBlID09PSBcImRpdlwiKSB7XHJcbiAgICAgICRlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAkZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG9iai50eXBlID09PSBcImxpbmtcIiA/IFwiYVwiIDogXCJidXR0b25cIik7XHJcbiAgICAgICRlbC5jbGFzc0xpc3QuYWRkKFwiY2Fyb3VzZWxfX2J1dHRvblwiKTtcclxuICAgIH1cclxuXHJcbiAgICAkZWwuaW5uZXJIVE1MID0gb2JqLmh0bWw7XHJcblxyXG4gICAgJGVsLnNldEF0dHJpYnV0ZShcInRhYmluZGV4XCIsIG9iai50YWJpbmRleCB8fCAwKTtcclxuXHJcbiAgICBpZiAob2JqLmNsYXNzKSB7XHJcbiAgICAgICRlbC5jbGFzc0xpc3QuYWRkKC4uLm9iai5jbGFzcy5zcGxpdChcIiBcIikpO1xyXG4gICAgfVxyXG5cclxuICAgIGZvciAoY29uc3QgcHJvcCBpbiBvYmouYXR0cikge1xyXG4gICAgICAkZWwuc2V0QXR0cmlidXRlKHByb3AsIG9iai5hdHRyW3Byb3BdKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAob2JqLmxhYmVsKSB7XHJcbiAgICAgICRlbC5zZXRBdHRyaWJ1dGUoXCJ0aXRsZVwiLCB0aGlzLmZhbmN5Ym94LmxvY2FsaXplKGB7eyR7b2JqLmxhYmVsfX19YCkpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChvYmouY2xpY2spIHtcclxuICAgICAgJGVsLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBvYmouY2xpY2suYmluZCh0aGlzKSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG9iai5pZCA9PT0gXCJwcmV2XCIpIHtcclxuICAgICAgJGVsLnNldEF0dHJpYnV0ZShcImRhdGEtZmFuY3lib3gtcHJldlwiLCBcIlwiKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAob2JqLmlkID09PSBcIm5leHRcIikge1xyXG4gICAgICAkZWwuc2V0QXR0cmlidXRlKFwiZGF0YS1mYW5jeWJveC1uZXh0XCIsIFwiXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0ICRzdmcgPSAkZWwucXVlcnlTZWxlY3RvcihcInN2Z1wiKTtcclxuXHJcbiAgICBpZiAoJHN2Zykge1xyXG4gICAgICAkc3ZnLnNldEF0dHJpYnV0ZShcInJvbGVcIiwgXCJpbWdcIik7XHJcbiAgICAgICRzdmcuc2V0QXR0cmlidXRlKFwidGFiaW5kZXhcIiwgXCItMVwiKTtcclxuICAgICAgJHN2Zy5zZXRBdHRyaWJ1dGUoXCJ4bWxuc1wiLCBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiAkZWw7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGUgYWxsIERPTSBlbGVtZW50c1xyXG4gICAqL1xyXG4gIGJ1aWxkKCkge1xyXG4gICAgdGhpcy5jbGVhbnVwKCk7XHJcblxyXG4gICAgY29uc3QgYWxsX2l0ZW1zID0gdGhpcy5mYW5jeWJveC5vcHRpb24oXCJUb29sYmFyLml0ZW1zXCIpO1xyXG4gICAgY29uc3QgYWxsX2dyb3VwcyA9IFtcclxuICAgICAge1xyXG4gICAgICAgIHBvc2l0aW9uOiBcImxlZnRcIixcclxuICAgICAgICBpdGVtczogW10sXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICBwb3NpdGlvbjogXCJjZW50ZXJcIixcclxuICAgICAgICBpdGVtczogW10sXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICBwb3NpdGlvbjogXCJyaWdodFwiLFxyXG4gICAgICAgIGl0ZW1zOiBbXSxcclxuICAgICAgfSxcclxuICAgIF07XHJcblxyXG4gICAgY29uc3QgdGh1bWJzID0gdGhpcy5mYW5jeWJveC5wbHVnaW5zLlRodW1icztcclxuXHJcbiAgICAvLyAxc3Qgc3RlcCAtIGdyb3VwIHRvb2xiYXIgZWxlbWVudHMgYnkgcG9zaXRpb25cclxuICAgIGZvciAoY29uc3Qga2V5IG9mIHRoaXMuZmFuY3lib3gub3B0aW9uKFwiVG9vbGJhci5kaXNwbGF5XCIpKSB7XHJcbiAgICAgIGxldCBpZCwgaXRlbTtcclxuXHJcbiAgICAgIGlmIChpc1BsYWluT2JqZWN0KGtleSkpIHtcclxuICAgICAgICBpZCA9IGtleS5pZDtcclxuICAgICAgICBpdGVtID0gZXh0ZW5kKHt9LCBhbGxfaXRlbXNbaWRdLCBrZXkpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlkID0ga2V5O1xyXG4gICAgICAgIGl0ZW0gPSBhbGxfaXRlbXNbaWRdO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoW1wiY291bnRlclwiLCBcIm5leHRcIiwgXCJwcmV2XCIsIFwic2xpZGVzaG93XCJdLmluY2x1ZGVzKGlkKSAmJiB0aGlzLmZhbmN5Ym94Lml0ZW1zLmxlbmd0aCA8IDIpIHtcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGlkID09PSBcImZ1bGxzY3JlZW5cIikge1xyXG4gICAgICAgIGlmICghZG9jdW1lbnQuZnVsbHNjcmVlbkVuYWJsZWQgfHwgd2luZG93LmZ1bGxTY3JlZW4pIHtcclxuICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImZ1bGxzY3JlZW5jaGFuZ2VcIiwgdGhpcy5vbkZzQ2hhbmdlKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGlkID09PSBcInRodW1ic1wiICYmICghdGh1bWJzIHx8IHRodW1icy5zdGF0ZSA9PT0gXCJkaXNhYmxlZFwiKSkge1xyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoIWl0ZW0pIHtcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgbGV0IHBvc2l0aW9uID0gaXRlbS5wb3NpdGlvbiB8fCBcInJpZ2h0XCI7XHJcblxyXG4gICAgICBsZXQgZ3JvdXAgPSBhbGxfZ3JvdXBzLmZpbmQoKG9iaikgPT4gb2JqLnBvc2l0aW9uID09PSBwb3NpdGlvbik7XHJcblxyXG4gICAgICBpZiAoZ3JvdXApIHtcclxuICAgICAgICBncm91cC5pdGVtcy5wdXNoKGl0ZW0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gMnN0IHN0ZXAgLSBjcmVhdGUgRE9NIGVsZW1lbnRzXHJcbiAgICBjb25zdCAkY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICRjb250YWluZXIuY2xhc3NMaXN0LmFkZChcImZhbmN5Ym94X190b29sYmFyXCIpO1xyXG5cclxuICAgIGZvciAoY29uc3QgZ3JvdXAgb2YgYWxsX2dyb3Vwcykge1xyXG4gICAgICBpZiAoZ3JvdXAuaXRlbXMubGVuZ3RoKSB7XHJcbiAgICAgICAgY29uc3QgJHdyYXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgICR3cmFwLmNsYXNzTGlzdC5hZGQoXCJmYW5jeWJveF9fdG9vbGJhcl9faXRlbXNcIik7XHJcbiAgICAgICAgJHdyYXAuY2xhc3NMaXN0LmFkZChgZmFuY3lib3hfX3Rvb2xiYXJfX2l0ZW1zLS0ke2dyb3VwLnBvc2l0aW9ufWApO1xyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IG9iaiBvZiBncm91cC5pdGVtcykge1xyXG4gICAgICAgICAgJHdyYXAuYXBwZW5kQ2hpbGQodGhpcy5jcmVhdGVFbGVtZW50KG9iaikpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJGNvbnRhaW5lci5hcHBlbmRDaGlsZCgkd3JhcCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBBZGQgdG9vbGJhciBjb250YWluZXIgdG8gRE9NXHJcbiAgICB0aGlzLmZhbmN5Ym94LiRjYXJvdXNlbC5wYXJlbnROb2RlLmluc2VydEJlZm9yZSgkY29udGFpbmVyLCB0aGlzLmZhbmN5Ym94LiRjYXJvdXNlbCk7XHJcblxyXG4gICAgdGhpcy4kY29udGFpbmVyID0gJGNvbnRhaW5lcjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFVwZGF0ZSBlbGVtZW50IHN0YXRlIGRlcGVuZGluZyBvbiBpbmRleCBvZiBjdXJyZW50IHNsaWRlXHJcbiAgICovXHJcbiAgdXBkYXRlKCkge1xyXG4gICAgY29uc3Qgc2xpZGUgPSB0aGlzLmZhbmN5Ym94LmdldFNsaWRlKCk7XHJcbiAgICBjb25zdCBpZHggPSBzbGlkZS5pbmRleDtcclxuICAgIGNvbnN0IGNudCA9IHRoaXMuZmFuY3lib3guaXRlbXMubGVuZ3RoO1xyXG5cclxuICAgIC8vIERvd25sb2FkIGxpbmtzXHJcbiAgICAvLyA9PT09XHJcbiAgICBjb25zdCBzcmMgPSBzbGlkZS5kb3dubG9hZFNyYyB8fCAoc2xpZGUudHlwZSA9PT0gXCJpbWFnZVwiICYmICFzbGlkZS5lcnJvciA/IHNsaWRlLnNyYyA6IG51bGwpO1xyXG5cclxuICAgIGZvciAoY29uc3QgJGVsIG9mIHRoaXMuZmFuY3lib3guJGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKFwiYS5mYW5jeWJveF9fYnV0dG9uLS1kb3dubG9hZFwiKSkge1xyXG4gICAgICBpZiAoc3JjKSB7XHJcbiAgICAgICAgJGVsLnJlbW92ZUF0dHJpYnV0ZShcImRpc2FibGVkXCIpO1xyXG4gICAgICAgICRlbC5yZW1vdmVBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiKTtcclxuXHJcbiAgICAgICAgJGVsLnNldEF0dHJpYnV0ZShcImhyZWZcIiwgc3JjKTtcclxuICAgICAgICAkZWwuc2V0QXR0cmlidXRlKFwiZG93bmxvYWRcIiwgc3JjKTtcclxuICAgICAgICAkZWwuc2V0QXR0cmlidXRlKFwidGFyZ2V0XCIsIFwiX2JsYW5rXCIpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgICRlbC5zZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiLCBcIlwiKTtcclxuICAgICAgICAkZWwuc2V0QXR0cmlidXRlKFwidGFiaW5kZXhcIiwgLTEpO1xyXG5cclxuICAgICAgICAkZWwucmVtb3ZlQXR0cmlidXRlKFwiaHJlZlwiKTtcclxuICAgICAgICAkZWwucmVtb3ZlQXR0cmlidXRlKFwiZG93bmxvYWRcIik7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBab29tIGJ1dHRvblxyXG4gICAgLy8gPT09XHJcbiAgICBjb25zdCBwYW56b29tID0gc2xpZGUuUGFuem9vbTtcclxuICAgIGNvbnN0IGNhblpvb20gPSBwYW56b29tICYmIHBhbnpvb20ub3B0aW9uKFwibWF4U2NhbGVcIikgPiBwYW56b29tLm9wdGlvbihcImJhc2VTY2FsZVwiKTtcclxuXHJcbiAgICBmb3IgKGNvbnN0ICRlbCBvZiB0aGlzLmZhbmN5Ym94LiRjb250YWluZXIucXVlcnlTZWxlY3RvckFsbChcIi5mYW5jeWJveF9fYnV0dG9uLS16b29tXCIpKSB7XHJcbiAgICAgIGlmIChjYW5ab29tKSB7XHJcbiAgICAgICAgJGVsLnJlbW92ZUF0dHJpYnV0ZShcImRpc2FibGVkXCIpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgICRlbC5zZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiLCBcIlwiKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIENvdW50ZXJcclxuICAgIC8vID09PT1cclxuICAgIGZvciAoY29uc3QgJGVsIG9mIHRoaXMuZmFuY3lib3guJGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKFwiW2RhdGEtZmFuY3lib3gtaW5kZXhdXCIpKSB7XHJcbiAgICAgICRlbC5pbm5lckhUTUwgPSBzbGlkZS5pbmRleCArIDE7XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChjb25zdCAkZWwgb2YgdGhpcy5mYW5jeWJveC4kY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbZGF0YS1mYW5jeWJveC1jb3VudF1cIikpIHtcclxuICAgICAgJGVsLmlubmVySFRNTCA9IGNudDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBEaXNhYmxlIHByZXZpb3VzL25leHQgbGlua3MgaWYgZ2FsbGVyeSBpcyBub3QgaW5maW5pdGUgYW5kIGhhcyByZWFjaGVkIHN0YXJ0L2VuZFxyXG4gICAgLy8gPT09XHJcbiAgICBpZiAoIXRoaXMuZmFuY3lib3gub3B0aW9uKFwiaW5maW5pdGVcIikpIHtcclxuICAgICAgZm9yIChjb25zdCAkZWwgb2YgdGhpcy5mYW5jeWJveC4kY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbZGF0YS1mYW5jeWJveC1wcmV2XVwiKSkge1xyXG4gICAgICAgIGlmIChpZHggPT09IDApIHtcclxuICAgICAgICAgICRlbC5zZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiLCBcIlwiKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgJGVsLnJlbW92ZUF0dHJpYnV0ZShcImRpc2FibGVkXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgZm9yIChjb25zdCAkZWwgb2YgdGhpcy5mYW5jeWJveC4kY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbZGF0YS1mYW5jeWJveC1uZXh0XVwiKSkge1xyXG4gICAgICAgIGlmIChpZHggPT09IGNudCAtIDEpIHtcclxuICAgICAgICAgICRlbC5zZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiLCBcIlwiKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgJGVsLnJlbW92ZUF0dHJpYnV0ZShcImRpc2FibGVkXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY2xlYW51cCgpIHtcclxuICAgIGlmICh0aGlzLlNsaWRlc2hvdyAmJiB0aGlzLlNsaWRlc2hvdy5pc0FjdGl2ZSgpKSB7XHJcbiAgICAgIHRoaXMuU2xpZGVzaG93LmNsZWFyVGltZXIoKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy4kY29udGFpbmVyKSB7XHJcbiAgICAgIHRoaXMuJGNvbnRhaW5lci5yZW1vdmUoKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLiRjb250YWluZXIgPSBudWxsO1xyXG4gIH1cclxuXHJcbiAgYXR0YWNoKCkge1xyXG4gICAgdGhpcy5mYW5jeWJveC5vbih0aGlzLmV2ZW50cyk7XHJcbiAgfVxyXG5cclxuICBkZXRhY2goKSB7XHJcbiAgICB0aGlzLmZhbmN5Ym94Lm9mZih0aGlzLmV2ZW50cyk7XHJcblxyXG4gICAgdGhpcy5jbGVhbnVwKCk7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBFeHBvc2UgZGVmYXVsdHNcclxuVG9vbGJhci5kZWZhdWx0cyA9IGRlZmF1bHRzO1xyXG4iLCJpbXBvcnQgeyBTY3JvbGxMb2NrIH0gZnJvbSBcIi4vU2Nyb2xsTG9jay9TY3JvbGxMb2NrLmpzXCI7XG5pbXBvcnQgeyBUaHVtYnMgfSBmcm9tIFwiLi9UaHVtYnMvVGh1bWJzLmpzXCI7XG5pbXBvcnQgeyBIdG1sIH0gZnJvbSBcIi4vSHRtbC9IdG1sLmpzXCI7XG5pbXBvcnQgeyBJbWFnZSB9IGZyb20gXCIuL0ltYWdlL0ltYWdlLmpzXCI7XG5pbXBvcnQgeyBIYXNoIH0gZnJvbSBcIi4vSGFzaC9IYXNoLmpzXCI7XG5pbXBvcnQgeyBUb29sYmFyIH0gZnJvbSBcIi4vVG9vbGJhci9Ub29sYmFyLmpzXCI7XG5cbmV4cG9ydCBjb25zdCBQbHVnaW5zID0ge1xuICBTY3JvbGxMb2NrLFxuICBUaHVtYnMsXG4gIEh0bWwsXG4gIFRvb2xiYXIsXG4gIEltYWdlLFxuICBIYXNoLFxufTtcbiIsImltcG9ydCB7IGV4dGVuZCB9IGZyb20gXCIuLi9zaGFyZWQvdXRpbHMvZXh0ZW5kLmpzXCI7XG5pbXBvcnQgeyByb3VuZCB9IGZyb20gXCIuLi9zaGFyZWQvdXRpbHMvcm91bmQuanNcIjtcbmltcG9ydCB7IGlzU2Nyb2xsYWJsZSB9IGZyb20gXCIuLi9zaGFyZWQvdXRpbHMvaXNTY3JvbGxhYmxlLmpzXCI7XG5cbmltcG9ydCB7IFJlc2l6ZU9ic2VydmVyIH0gZnJvbSBcIi4uL3NoYXJlZC91dGlscy9SZXNpemVPYnNlcnZlci5qc1wiO1xuaW1wb3J0IHsgUG9pbnRlclRyYWNrZXIsIGdldE1pZHBvaW50LCBnZXREaXN0YW5jZSB9IGZyb20gXCIuLi9zaGFyZWQvdXRpbHMvUG9pbnRlclRyYWNrZXIuanNcIjtcblxuaW1wb3J0IHsgZ2V0VGV4dE5vZGVGcm9tUG9pbnQgfSBmcm9tIFwiLi4vc2hhcmVkL3V0aWxzL2dldFRleHROb2RlRnJvbVBvaW50LmpzXCI7XG5cbmltcG9ydCB7IGdldEZ1bGxXaWR0aCwgZ2V0RnVsbEhlaWdodCwgY2FsY3VsYXRlQXNwZWN0UmF0aW9GaXQgfSBmcm9tIFwiLi4vc2hhcmVkL3V0aWxzL2dldERpbWVuc2lvbnMuanNcIjtcblxuaW1wb3J0IHsgQmFzZSB9IGZyb20gXCIuLi9zaGFyZWQvQmFzZS9CYXNlLmpzXCI7XG5cbmltcG9ydCB7IFBsdWdpbnMgfSBmcm9tIFwiLi9wbHVnaW5zL2luZGV4LmpzXCI7XG5cbmNvbnN0IGRlZmF1bHRzID0ge1xuICAvLyBFbmFibGUgdG91Y2ggZ3Vlc3R1cmVzXG4gIHRvdWNoOiB0cnVlLFxuXG4gIC8vIEVuYWJsZSB6b29taW5nXG4gIHpvb206IHRydWUsXG5cbiAgLy8gRW5hYmxlIHBpbmNoIGdlc3R1cmUgdG8gem9vbSBpbi9vdXQgdXNpbmcgdHdvIGZpbmdlcnNcbiAgcGluY2hUb1pvb206IHRydWUsXG5cbiAgLy8gRGlzYWJsZSBkcmFnZ2luZyBpZiBzY2FsZSBsZXZlbCBpcyBlcXVhbCB0byB2YWx1ZSBvZiBgYmFzZVNjYWxlYCBvcHRpb25cbiAgcGFuT25seVpvb21lZDogZmFsc2UsXG5cbiAgLy8gTG9jayBheGlzIHdoaWxlIGRyYWdnaW5nLFxuICAvLyBwb3NzaWJsZSB2YWx1ZXM6IGZhbHNlIHwgXCJ4XCIgfCBcInlcIiB8IFwieHlcIlxuICBsb2NrQXhpczogZmFsc2UsXG5cbiAgLy8gKiBBbGwgZnJpY3Rpb24gdmFsdWVzIGFyZSBpbnNpZGUgWzAsIDEpIGludGVydmFsLFxuICAvLyAqIHdoZXJlIDAgd291bGQgY2hhbmdlIGluc3RhbnRseSwgYnV0IDAuOTkgd291bGQgdXBkYXRlIGV4dHJlbWVseSBzbG93bHlcblxuICAvLyBGcmljdGlvbiB3aGlsZSBwYW5uaW5nL2RyYWdnaW5nXG4gIGZyaWN0aW9uOiAwLjY0LFxuXG4gIC8vIEZyaWN0aW9uIHdoaWxlIGRlY2VsZXJhdGluZyBhZnRlciBkcmFnIGVuZFxuICBkZWNlbEZyaWN0aW9uOiAwLjg4LFxuXG4gIC8vIEZyaWN0aW9uIHdoaWxlIHNjYWxpbmdcbiAgem9vbUZyaWN0aW9uOiAwLjc0LFxuXG4gIC8vIEJvdW5jaW5lc3MgYWZ0ZXIgaGl0dGluZyB0aGUgZWRnZVxuICBib3VuY2VGb3JjZTogMC4yLFxuXG4gIC8vIEluaXRpYWwgc2NhbGUgbGV2ZWxcbiAgYmFzZVNjYWxlOiAxLFxuXG4gIC8vIE1pbmltdW0gc2NhbGUgbGV2ZWxcbiAgbWluU2NhbGU6IDEsXG5cbiAgLy8gTWF4aW11bSBzY2FsZSBsZXZlbFxuICBtYXhTY2FsZTogMixcblxuICAvLyBEZWZhdWx0IHNjYWxlIHN0ZXAgd2hpbGUgem9vbWluZ1xuICBzdGVwOiAwLjUsXG5cbiAgLy8gQWxsb3cgdG8gc2VsZWN0IHRleHQsXG4gIC8vIGlmIGVuYWJsZWQsIGRyYWdnaW5nIHdpbGwgYmUgZGlzYWJsZWQgd2hlbiB0ZXh0IHNlbGVjdGlvbiBpcyBkZXRlY3RlZFxuICB0ZXh0U2VsZWN0aW9uOiBmYWxzZSxcblxuICAvLyBBZGQgYGNsaWNrYCBldmVudCBsaXN0ZW5lcixcbiAgLy8gcG9zc2libGUgdmFsdWVzOiB0cnVlIHwgZmFsc2UgfCBmdW5jdGlvbiB8IFwidG9nZ2xlWm9vbVwiXG4gIGNsaWNrOiBcInRvZ2dsZVpvb21cIixcblxuICAvLyBBZGQgYHdoZWVsYCBldmVudCBsaXN0ZW5lcixcbiAgLy8gcG9zc2libGUgdmFsdWVzOiB0cnVlIHwgZmFsc2UgfCBmdW5jdGlvbiB8ICBcInpvb21cIlxuICB3aGVlbDogXCJ6b29tXCIsXG5cbiAgLy8gVmFsdWUgZm9yIHpvb20gb24gbW91c2Ugd2hlZWxcbiAgd2hlZWxGYWN0b3I6IDQyLFxuXG4gIC8vIE51bWJlciBvZiB3aGVlbCBldmVudHMgYWZ0ZXIgd2hpY2ggaXQgc2hvdWxkIHN0b3AgcHJldmVudGluZyBkZWZhdWx0IGJlaGF2aW91ciBvZiBtb3VzZSB3aGVlbFxuICB3aGVlbExpbWl0OiA1LFxuXG4gIC8vIENsYXNzIG5hbWUgYWRkZWQgdG8gYCR2aWV3cG9ydGAgZWxlbWVudCB0byBpbmRpY2F0ZSBpZiBjb250ZW50IGlzIGRyYWdnYWJsZVxuICBkcmFnZ2FibGVDbGFzczogXCJpcy1kcmFnZ2FibGVcIixcblxuICAvLyBDbGFzcyBuYW1lIGFkZGVkIHRvIGAkdmlld3BvcnRgIGVsZW1lbnQgdG8gaW5kaWNhdGUgdGhhdCB1c2VyIGlzIGN1cnJlbnRseSBkcmFnZ2luZ1xuICBkcmFnZ2luZ0NsYXNzOiBcImlzLWRyYWdnaW5nXCIsXG5cbiAgLy8gQ29udGVudCB3aWxsIGJlIHNjYWxlZCBieSB0aGlzIG51bWJlcixcbiAgLy8gdGhpcyBjYW4gYWxzbyBiZSBhIGZ1bmN0aW9uIHdoaWNoIHNob3VsZCByZXR1cm4gYSBudW1iZXIsIGZvciBleGFtcGxlOlxuICAvLyByYXRpbzogZnVuY3Rpb24oKSB7IHJldHVybiAxIC8gKHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIHx8IDEpIH1cbiAgcmF0aW86IDEsXG59O1xuXG5leHBvcnQgY2xhc3MgUGFuem9vbSBleHRlbmRzIEJhc2Uge1xuICAvKipcbiAgICogUGFuem9vbSBjb25zdHJ1Y3RvclxuICAgKiBAY29uc3RydWN0cyBQYW56b29tXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9ICR2aWV3cG9ydCBQYW56b29tIGNvbnRhaW5lclxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIE9wdGlvbnMgZm9yIFBhbnpvb21cbiAgICovXG4gIGNvbnN0cnVjdG9yKCRjb250YWluZXIsIG9wdGlvbnMgPSB7fSkge1xuICAgIHN1cGVyKGV4dGVuZCh0cnVlLCB7fSwgZGVmYXVsdHMsIG9wdGlvbnMpKTtcblxuICAgIHRoaXMuc3RhdGUgPSBcImluaXRcIjtcblxuICAgIHRoaXMuJGNvbnRhaW5lciA9ICRjb250YWluZXI7XG5cbiAgICAvLyBCaW5kIGV2ZW50IGhhbmRsZXJzIGZvciByZWZlcmVuY2FiaWxpdHlcbiAgICBmb3IgKGNvbnN0IG1ldGhvZE5hbWUgb2YgW1wib25Mb2FkXCIsIFwib25XaGVlbFwiLCBcIm9uQ2xpY2tcIl0pIHtcbiAgICAgIHRoaXNbbWV0aG9kTmFtZV0gPSB0aGlzW21ldGhvZE5hbWVdLmJpbmQodGhpcyk7XG4gICAgfVxuXG4gICAgdGhpcy5pbml0TGF5b3V0KCk7XG5cbiAgICB0aGlzLnJlc2V0VmFsdWVzKCk7XG5cbiAgICB0aGlzLmF0dGFjaFBsdWdpbnMoUGFuem9vbS5QbHVnaW5zKTtcblxuICAgIHRoaXMudHJpZ2dlcihcImluaXRcIik7XG5cbiAgICB0aGlzLnVwZGF0ZU1ldHJpY3MoKTtcblxuICAgIHRoaXMuYXR0YWNoRXZlbnRzKCk7XG5cbiAgICB0aGlzLnRyaWdnZXIoXCJyZWFkeVwiKTtcblxuICAgIGlmICh0aGlzLm9wdGlvbihcImNlbnRlck9uU3RhcnRcIikgPT09IGZhbHNlKSB7XG4gICAgICB0aGlzLnN0YXRlID0gXCJyZWFkeVwiO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnBhblRvKHtcbiAgICAgICAgZnJpY3Rpb246IDAsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAkY29udGFpbmVyLl9fUGFuem9vbSA9IHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIHJlZmVyZW5jZXMgdG8gY29udGFpbmVyLCB2aWV3cG9ydCBhbmQgY29udGVudCBlbGVtZW50c1xuICAgKi9cbiAgaW5pdExheW91dCgpIHtcbiAgICBjb25zdCAkY29udGFpbmVyID0gdGhpcy4kY29udGFpbmVyO1xuXG4gICAgLy8gTWFrZSBzdXJlIGNvbnRlbnQgZWxlbWVudCBleGlzdHNcbiAgICBpZiAoISgkY29udGFpbmVyIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQYW56b29tOiBDb250YWluZXIgbm90IGZvdW5kXCIpO1xuICAgIH1cblxuICAgIGNvbnN0ICRjb250ZW50ID0gdGhpcy5vcHRpb24oXCJjb250ZW50XCIpIHx8ICRjb250YWluZXIucXVlcnlTZWxlY3RvcihcIi5wYW56b29tX19jb250ZW50XCIpO1xuXG4gICAgLy8gTWFrZSBzdXJlIGNvbnRlbnQgZWxlbWVudCBleGlzdHNcbiAgICBpZiAoISRjb250ZW50KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQYW56b29tOiBDb250ZW50IG5vdCBmb3VuZFwiKTtcbiAgICB9XG5cbiAgICB0aGlzLiRjb250ZW50ID0gJGNvbnRlbnQ7XG5cbiAgICBsZXQgJHZpZXdwb3J0ID0gdGhpcy5vcHRpb24oXCJ2aWV3cG9ydFwiKSB8fCAkY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoXCIucGFuem9vbV9fdmlld3BvcnRcIik7XG5cbiAgICBpZiAoISR2aWV3cG9ydCAmJiB0aGlzLm9wdGlvbihcIndyYXBJbm5lclwiKSAhPT0gZmFsc2UpIHtcbiAgICAgICR2aWV3cG9ydCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAkdmlld3BvcnQuY2xhc3NMaXN0LmFkZChcInBhbnpvb21fX3ZpZXdwb3J0XCIpO1xuXG4gICAgICAkdmlld3BvcnQuYXBwZW5kKC4uLiRjb250YWluZXIuY2hpbGROb2Rlcyk7XG5cbiAgICAgICRjb250YWluZXIuYXBwZW5kQ2hpbGQoJHZpZXdwb3J0KTtcbiAgICB9XG5cbiAgICB0aGlzLiR2aWV3cG9ydCA9ICR2aWV3cG9ydCB8fCAkY29udGVudC5wYXJlbnROb2RlO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlc3RvcmUgaW5zdGFuY2UgdmFyaWFibGVzIHRvIGRlZmF1bHQgdmFsdWVzXG4gICAqL1xuICByZXNldFZhbHVlcygpIHtcbiAgICB0aGlzLnVwZGF0ZVJhdGUgPSB0aGlzLm9wdGlvbihcInVwZGF0ZVJhdGVcIiwgL2lQaG9uZXxpUGFkfGlQb2R8QW5kcm9pZC9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkgPyAyNTAgOiAyNCk7XG5cbiAgICB0aGlzLmNvbnRhaW5lciA9IHtcbiAgICAgIHdpZHRoOiAwLFxuICAgICAgaGVpZ2h0OiAwLFxuICAgIH07XG5cbiAgICB0aGlzLnZpZXdwb3J0ID0ge1xuICAgICAgd2lkdGg6IDAsXG4gICAgICBoZWlnaHQ6IDAsXG4gICAgfTtcblxuICAgIHRoaXMuY29udGVudCA9IHtcbiAgICAgIC8vIEZ1bGwgY29udGVudCBkaW1lbnNpb25zIChuYXR1cmFsV2lkdGgvbmF0dXJhbEhlaWdodCBmb3IgaW1hZ2VzKVxuICAgICAgb3JpZ1dpZHRoOiAwLFxuICAgICAgb3JpZ0hlaWdodDogMCxcblxuICAgICAgLy8gQ3VycmVudCBkaW1lbnNpb25zIG9mIHRoZSBjb250ZW50XG4gICAgICB3aWR0aDogMCxcbiAgICAgIGhlaWdodDogMCxcblxuICAgICAgLy8gQ3VycmVudCBwb3NpdGlvbjsgdGhlc2UgdmFsdWVzIHJlZmxlY3QgQ1NTIGB0cmFuc2Zvcm1gIHZhbHVlXG4gICAgICB4OiB0aGlzLm9wdGlvbihcInhcIiwgMCksXG4gICAgICB5OiB0aGlzLm9wdGlvbihcInlcIiwgMCksXG5cbiAgICAgIC8vIEN1cnJlbnQgc2NhbGU7IGRvZXMgbm90IHJlZmxlY3QgQ1NTIGB0cmFuc2Zvcm1gIHZhbHVlXG4gICAgICBzY2FsZTogdGhpcy5vcHRpb24oXCJiYXNlU2NhbGVcIiksXG4gICAgfTtcblxuICAgIC8vIEVuZCB2YWx1ZXMgb2YgY3VycmVudCBwYW4gLyB6b29tIGFuaW1hdGlvblxuICAgIHRoaXMudHJhbnNmb3JtID0ge1xuICAgICAgeDogMCxcbiAgICAgIHk6IDAsXG4gICAgICBzY2FsZTogMSxcbiAgICB9O1xuXG4gICAgdGhpcy5yZXNldERyYWdQb3NpdGlvbigpO1xuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZSBgbG9hZGAgZXZlbnRcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnRcbiAgICovXG4gIG9uTG9hZChldmVudCkge1xuICAgIHRoaXMudXBkYXRlTWV0cmljcygpO1xuXG4gICAgdGhpcy5wYW5Ubyh7IHNjYWxlOiB0aGlzLm9wdGlvbihcImJhc2VTY2FsZVwiKSwgZnJpY3Rpb246IDAgfSk7XG5cbiAgICB0aGlzLnRyaWdnZXIoXCJsb2FkXCIsIGV2ZW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGUgYGNsaWNrYCBldmVudFxuICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudFxuICAgKi9cbiAgb25DbGljayhldmVudCkge1xuICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5jbG9zZXN0KFwiW2NvbnRlbnRlZGl0YWJsZV1cIikpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBTa2lwIGlmIHRleHQgaXMgc2VsZWN0ZWRcbiAgICBpZiAoXG4gICAgICB0aGlzLm9wdGlvbihcInRleHRTZWxlY3Rpb25cIikgJiZcbiAgICAgIHdpbmRvdy5nZXRTZWxlY3Rpb24oKS50b1N0cmluZygpLmxlbmd0aCAmJlxuICAgICAgIShldmVudC50YXJnZXQgJiYgZXZlbnQudGFyZ2V0Lmhhc0F0dHJpYnV0ZShcImRhdGEtZmFuY3lib3gtY2xvc2VcIikpXG4gICAgKSB7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCByZWN0ID0gdGhpcy4kY29udGVudC5nZXRDbGllbnRSZWN0cygpWzBdO1xuXG4gICAgLy8gQ2hlY2sgaWYgY29udGFpbmVyIGhhcyBjaGFuZ2VkIHBvc2l0aW9uIChmb3IgZXhhbXBsZSwgd2hlbiBjdXJyZW50IGluc3RhbmNlIGlzIGluc2lkZSBhbm90aGVyIG9uZSlcbiAgICBpZiAodGhpcy5zdGF0ZSAhPT0gXCJyZWFkeVwiKSB7XG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMuZHJhZ1Bvc2l0aW9uLm1pZFBvaW50IHx8XG4gICAgICAgIE1hdGguYWJzKHJlY3QudG9wIC0gdGhpcy5kcmFnU3RhcnQucmVjdC50b3ApID4gMSB8fFxuICAgICAgICBNYXRoLmFicyhyZWN0LmxlZnQgLSB0aGlzLmRyYWdTdGFydC5yZWN0LmxlZnQpID4gMVxuICAgICAgKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy50cmlnZ2VyKFwiY2xpY2tcIiwgZXZlbnQpID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm9wdGlvbihcInpvb21cIikgJiYgdGhpcy5vcHRpb24oXCJjbGlja1wiKSA9PT0gXCJ0b2dnbGVab29tXCIpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgdGhpcy56b29tV2l0aENsaWNrKGV2ZW50KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlIGB3aGVlbGAgZXZlbnRcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnRcbiAgICovXG4gIG9uV2hlZWwoZXZlbnQpIHtcbiAgICBpZiAodGhpcy50cmlnZ2VyKFwid2hlZWxcIiwgZXZlbnQpID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm9wdGlvbihcInpvb21cIikgJiYgdGhpcy5vcHRpb24oXCJ3aGVlbFwiKSkge1xuICAgICAgdGhpcy56b29tV2l0aFdoZWVsKGV2ZW50KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2hhbmdlIHpvb20gbGV2ZWwgZGVwZW5kaW5nIG9uIHNjcm9sbCBkaXJlY3Rpb25cbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgYHdoZWVsYCBldmVudFxuICAgKi9cbiAgem9vbVdpdGhXaGVlbChldmVudCkge1xuICAgIGlmICh0aGlzLmNoYW5nZWREZWx0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLmNoYW5nZWREZWx0YSA9IDA7XG4gICAgfVxuXG4gICAgY29uc3QgZGVsdGEgPSBNYXRoLm1heCgtMSwgTWF0aC5taW4oMSwgLWV2ZW50LmRlbHRhWSB8fCAtZXZlbnQuZGVsdGFYIHx8IGV2ZW50LndoZWVsRGVsdGEgfHwgLWV2ZW50LmRldGFpbCkpO1xuICAgIGNvbnN0IHNjYWxlID0gdGhpcy5jb250ZW50LnNjYWxlO1xuXG4gICAgbGV0IG5ld1NjYWxlID0gKHNjYWxlICogKDEwMCArIGRlbHRhICogdGhpcy5vcHRpb24oXCJ3aGVlbEZhY3RvclwiKSkpIC8gMTAwO1xuXG4gICAgaWYgKFxuICAgICAgKGRlbHRhIDwgMCAmJiBNYXRoLmFicyhzY2FsZSAtIHRoaXMub3B0aW9uKFwibWluU2NhbGVcIikpIDwgMC4wMSkgfHxcbiAgICAgIChkZWx0YSA+IDAgJiYgTWF0aC5hYnMoc2NhbGUgLSB0aGlzLm9wdGlvbihcIm1heFNjYWxlXCIpKSA8IDAuMDEpXG4gICAgKSB7XG4gICAgICB0aGlzLmNoYW5nZWREZWx0YSArPSBNYXRoLmFicyhkZWx0YSk7XG4gICAgICBuZXdTY2FsZSA9IHNjYWxlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNoYW5nZWREZWx0YSA9IDA7XG4gICAgICBuZXdTY2FsZSA9IE1hdGgubWF4KE1hdGgubWluKG5ld1NjYWxlLCB0aGlzLm9wdGlvbihcIm1heFNjYWxlXCIpKSwgdGhpcy5vcHRpb24oXCJtaW5TY2FsZVwiKSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuY2hhbmdlZERlbHRhID4gdGhpcy5vcHRpb24oXCJ3aGVlbExpbWl0XCIpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgIGlmIChuZXdTY2FsZSA9PT0gc2NhbGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCByZWN0ID0gdGhpcy4kY29udGVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgIGNvbnN0IHggPSBldmVudC5jbGllbnRYIC0gcmVjdC5sZWZ0O1xuICAgIGNvbnN0IHkgPSBldmVudC5jbGllbnRZIC0gcmVjdC50b3A7XG5cbiAgICB0aGlzLnpvb21UbyhuZXdTY2FsZSwgeyB4LCB5IH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENoYW5nZSB6b29tIGxldmVsIGRlcGVuZGluZyBvbiBjbGljayBjb29yZGluYXRlc1xuICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCBgY2xpY2tgIGV2ZW50XG4gICAqL1xuICB6b29tV2l0aENsaWNrKGV2ZW50KSB7XG4gICAgY29uc3QgcmVjdCA9IHRoaXMuJGNvbnRlbnQuZ2V0Q2xpZW50UmVjdHMoKVswXTtcblxuICAgIGNvbnN0IHggPSBldmVudC5jbGllbnRYIC0gcmVjdC5sZWZ0O1xuICAgIGNvbnN0IHkgPSBldmVudC5jbGllbnRZIC0gcmVjdC50b3A7XG5cbiAgICB0aGlzLnRvZ2dsZVpvb20oeyB4LCB5IH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEF0dGFjaCBsb2FkLCB3aGVlbCBhbmQgY2xpY2sgZXZlbnQgbGlzdGVuZXJzLCBpbml0aWFsaXplIGByZXNpemVPYnNlcnZlcmAgYW5kIGBQb2ludGVyVHJhY2tlcmBcbiAgICovXG4gIGF0dGFjaEV2ZW50cygpIHtcbiAgICB0aGlzLiRjb250ZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIHRoaXMub25Mb2FkKTtcblxuICAgIHRoaXMuJGNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKFwid2hlZWxcIiwgdGhpcy5vbldoZWVsLCB7IHBhc3NpdmU6IGZhbHNlIH0pO1xuICAgIHRoaXMuJGNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5vbkNsaWNrLCB7IHBhc3NpdmU6IGZhbHNlIH0pO1xuXG4gICAgdGhpcy5pbml0T2JzZXJ2ZXIoKTtcblxuICAgIGNvbnN0IHBvaW50ZXJUcmFja2VyID0gbmV3IFBvaW50ZXJUcmFja2VyKHRoaXMuJGNvbnRhaW5lciwge1xuICAgICAgc3RhcnQ6IChwb2ludGVyLCBldmVudCkgPT4ge1xuICAgICAgICBpZiAoIXRoaXMub3B0aW9uKFwidG91Y2hcIikpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy52ZWxvY2l0eS5zY2FsZSA8IDApIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB0YXJnZXQgPSBldmVudC5jb21wb3NlZFBhdGgoKVswXTtcblxuICAgICAgICBpZiAoIXBvaW50ZXJUcmFja2VyLmN1cnJlbnRQb2ludGVycy5sZW5ndGgpIHtcbiAgICAgICAgICBjb25zdCBpZ25vcmVDbGlja2VkRWxlbWVudCA9XG4gICAgICAgICAgICBbXCJCVVRUT05cIiwgXCJURVhUQVJFQVwiLCBcIk9QVElPTlwiLCBcIklOUFVUXCIsIFwiU0VMRUNUXCIsIFwiVklERU9cIl0uaW5kZXhPZih0YXJnZXQubm9kZU5hbWUpICE9PSAtMTtcblxuICAgICAgICAgIGlmIChpZ25vcmVDbGlja2VkRWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIEFsbG93IHRleHQgc2VsZWN0aW9uXG4gICAgICAgICAgaWYgKHRoaXMub3B0aW9uKFwidGV4dFNlbGVjdGlvblwiKSAmJiBnZXRUZXh0Tm9kZUZyb21Qb2ludCh0YXJnZXQsIHBvaW50ZXIuY2xpZW50WCwgcG9pbnRlci5jbGllbnRZKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc1Njcm9sbGFibGUodGFyZ2V0KSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnRyaWdnZXIoXCJ0b3VjaFN0YXJ0XCIsIGV2ZW50KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXZlbnQudHlwZSA9PT0gXCJtb3VzZWRvd25cIikge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnN0YXRlID0gXCJwb2ludGVyZG93blwiO1xuXG4gICAgICAgIHRoaXMucmVzZXREcmFnUG9zaXRpb24oKTtcblxuICAgICAgICB0aGlzLmRyYWdQb3NpdGlvbi5taWRQb2ludCA9IG51bGw7XG4gICAgICAgIHRoaXMuZHJhZ1Bvc2l0aW9uLnRpbWUgPSBEYXRlLm5vdygpO1xuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSxcbiAgICAgIG1vdmU6IChwcmV2aW91c1BvaW50ZXJzLCBjdXJyZW50UG9pbnRlcnMsIGV2ZW50KSA9PiB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlICE9PSBcInBvaW50ZXJkb3duXCIpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy50cmlnZ2VyKFwidG91Y2hNb3ZlXCIsIGV2ZW50KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERpc2FibGUgdG91Y2ggYWN0aW9uIGlmIGN1cnJlbnQgem9vbSBsZXZlbCBpcyBiZWxvdyBiYXNlIGxldmVsXG4gICAgICAgIGlmIChcbiAgICAgICAgICBjdXJyZW50UG9pbnRlcnMubGVuZ3RoIDwgMiAmJlxuICAgICAgICAgIHRoaXMub3B0aW9uKFwicGFuT25seVpvb21lZFwiKSA9PT0gdHJ1ZSAmJlxuICAgICAgICAgIHRoaXMuY29udGVudC53aWR0aCA8PSB0aGlzLnZpZXdwb3J0LndpZHRoICYmXG4gICAgICAgICAgdGhpcy5jb250ZW50LmhlaWdodCA8PSB0aGlzLnZpZXdwb3J0LmhlaWdodCAmJlxuICAgICAgICAgIHRoaXMudHJhbnNmb3JtLnNjYWxlIDw9IHRoaXMub3B0aW9uKFwiYmFzZVNjYWxlXCIpXG4gICAgICAgICkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjdXJyZW50UG9pbnRlcnMubGVuZ3RoID4gMSAmJiAoIXRoaXMub3B0aW9uKFwiem9vbVwiKSB8fCB0aGlzLm9wdGlvbihcInBpbmNoVG9ab29tXCIpID09PSBmYWxzZSkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwcmV2TWlkcG9pbnQgPSBnZXRNaWRwb2ludChwcmV2aW91c1BvaW50ZXJzWzBdLCBwcmV2aW91c1BvaW50ZXJzWzFdKTtcbiAgICAgICAgY29uc3QgbmV3TWlkcG9pbnQgPSBnZXRNaWRwb2ludChjdXJyZW50UG9pbnRlcnNbMF0sIGN1cnJlbnRQb2ludGVyc1sxXSk7XG5cbiAgICAgICAgY29uc3QgcGFuWCA9IG5ld01pZHBvaW50LmNsaWVudFggLSBwcmV2TWlkcG9pbnQuY2xpZW50WDtcbiAgICAgICAgY29uc3QgcGFuWSA9IG5ld01pZHBvaW50LmNsaWVudFkgLSBwcmV2TWlkcG9pbnQuY2xpZW50WTtcblxuICAgICAgICBjb25zdCBwcmV2RGlzdGFuY2UgPSBnZXREaXN0YW5jZShwcmV2aW91c1BvaW50ZXJzWzBdLCBwcmV2aW91c1BvaW50ZXJzWzFdKTtcbiAgICAgICAgY29uc3QgbmV3RGlzdGFuY2UgPSBnZXREaXN0YW5jZShjdXJyZW50UG9pbnRlcnNbMF0sIGN1cnJlbnRQb2ludGVyc1sxXSk7XG5cbiAgICAgICAgY29uc3Qgc2NhbGVEaWZmID0gcHJldkRpc3RhbmNlICYmIG5ld0Rpc3RhbmNlID8gbmV3RGlzdGFuY2UgLyBwcmV2RGlzdGFuY2UgOiAxO1xuXG4gICAgICAgIHRoaXMuZHJhZ09mZnNldC54ICs9IHBhblg7XG4gICAgICAgIHRoaXMuZHJhZ09mZnNldC55ICs9IHBhblk7XG5cbiAgICAgICAgdGhpcy5kcmFnT2Zmc2V0LnNjYWxlICo9IHNjYWxlRGlmZjtcblxuICAgICAgICB0aGlzLmRyYWdPZmZzZXQudGltZSA9IERhdGUubm93KCkgLSB0aGlzLmRyYWdQb3NpdGlvbi50aW1lO1xuXG4gICAgICAgIGNvbnN0IGF4aXNUb0xvY2sgPSB0aGlzLmRyYWdTdGFydC5zY2FsZSA9PT0gMSAmJiB0aGlzLm9wdGlvbihcImxvY2tBeGlzXCIpO1xuXG4gICAgICAgIGlmIChheGlzVG9Mb2NrICYmICF0aGlzLmxvY2tBeGlzKSB7XG4gICAgICAgICAgaWYgKE1hdGguYWJzKHRoaXMuZHJhZ09mZnNldC54KSA8IDYgJiYgTWF0aC5hYnModGhpcy5kcmFnT2Zmc2V0LnkpIDwgNikge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBhbmdsZSA9IE1hdGguYWJzKChNYXRoLmF0YW4yKHRoaXMuZHJhZ09mZnNldC55LCB0aGlzLmRyYWdPZmZzZXQueCkgKiAxODApIC8gTWF0aC5QSSk7XG5cbiAgICAgICAgICB0aGlzLmxvY2tBeGlzID0gYW5nbGUgPiA0NSAmJiBhbmdsZSA8IDEzNSA/IFwieVwiIDogXCJ4XCI7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYXhpc1RvTG9jayAhPT0gXCJ4eVwiICYmIHRoaXMubG9ja0F4aXMgPT09IFwieVwiKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgICAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cbiAgICAgICAgaWYgKHRoaXMubG9ja0F4aXMpIHtcbiAgICAgICAgICB0aGlzLmRyYWdPZmZzZXRbdGhpcy5sb2NrQXhpcyA9PT0gXCJ4XCIgPyBcInlcIiA6IFwieFwiXSA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLiRjb250YWluZXIuY2xhc3NMaXN0LmFkZCh0aGlzLm9wdGlvbihcImRyYWdnaW5nQ2xhc3NcIikpO1xuXG4gICAgICAgIGlmICghKHRoaXMudHJhbnNmb3JtLnNjYWxlID09PSB0aGlzLm9wdGlvbihcImJhc2VTY2FsZVwiKSAmJiB0aGlzLmxvY2tBeGlzID09PSBcInlcIikpIHtcbiAgICAgICAgICB0aGlzLmRyYWdQb3NpdGlvbi54ID0gdGhpcy5kcmFnU3RhcnQueCArIHRoaXMuZHJhZ09mZnNldC54O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCEodGhpcy50cmFuc2Zvcm0uc2NhbGUgPT09IHRoaXMub3B0aW9uKFwiYmFzZVNjYWxlXCIpICYmIHRoaXMubG9ja0F4aXMgPT09IFwieFwiKSkge1xuICAgICAgICAgIHRoaXMuZHJhZ1Bvc2l0aW9uLnkgPSB0aGlzLmRyYWdTdGFydC55ICsgdGhpcy5kcmFnT2Zmc2V0Lnk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmRyYWdQb3NpdGlvbi5zY2FsZSA9IHRoaXMuZHJhZ1N0YXJ0LnNjYWxlICogdGhpcy5kcmFnT2Zmc2V0LnNjYWxlO1xuXG4gICAgICAgIGlmIChjdXJyZW50UG9pbnRlcnMubGVuZ3RoID4gMSkge1xuICAgICAgICAgIGNvbnN0IHN0YXJ0UG9pbnQgPSBnZXRNaWRwb2ludChwb2ludGVyVHJhY2tlci5zdGFydFBvaW50ZXJzWzBdLCBwb2ludGVyVHJhY2tlci5zdGFydFBvaW50ZXJzWzFdKTtcblxuICAgICAgICAgIGNvbnN0IHhQb3MgPSBzdGFydFBvaW50LmNsaWVudFggLSB0aGlzLmRyYWdTdGFydC5yZWN0Lng7XG4gICAgICAgICAgY29uc3QgeVBvcyA9IHN0YXJ0UG9pbnQuY2xpZW50WSAtIHRoaXMuZHJhZ1N0YXJ0LnJlY3QueTtcblxuICAgICAgICAgIGNvbnN0IHsgZGVsdGFYLCBkZWx0YVkgfSA9IHRoaXMuZ2V0Wm9vbURlbHRhKHRoaXMuY29udGVudC5zY2FsZSAqIHRoaXMuZHJhZ09mZnNldC5zY2FsZSwgeFBvcywgeVBvcyk7XG5cbiAgICAgICAgICB0aGlzLmRyYWdQb3NpdGlvbi54IC09IGRlbHRhWDtcbiAgICAgICAgICB0aGlzLmRyYWdQb3NpdGlvbi55IC09IGRlbHRhWTtcblxuICAgICAgICAgIHRoaXMuZHJhZ1Bvc2l0aW9uLm1pZFBvaW50ID0gbmV3TWlkcG9pbnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5zZXREcmFnUmVzaXN0YW5jZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVXBkYXRlIGZpbmFsIHBvc2l0aW9uXG4gICAgICAgIHRoaXMudHJhbnNmb3JtID0ge1xuICAgICAgICAgIHg6IHRoaXMuZHJhZ1Bvc2l0aW9uLngsXG4gICAgICAgICAgeTogdGhpcy5kcmFnUG9zaXRpb24ueSxcbiAgICAgICAgICBzY2FsZTogdGhpcy5kcmFnUG9zaXRpb24uc2NhbGUsXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5zdGFydEFuaW1hdGlvbigpO1xuICAgICAgfSxcbiAgICAgIGVuZDogKHBvaW50ZXIsIGV2ZW50KSA9PiB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlICE9PSBcInBvaW50ZXJkb3duXCIpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9kcmFnT2Zmc2V0ID0geyAuLi50aGlzLmRyYWdPZmZzZXQgfTtcblxuICAgICAgICBpZiAocG9pbnRlclRyYWNrZXIuY3VycmVudFBvaW50ZXJzLmxlbmd0aCkge1xuICAgICAgICAgIHRoaXMucmVzZXREcmFnUG9zaXRpb24oKTtcblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc3RhdGUgPSBcImRlY2VsXCI7XG4gICAgICAgIHRoaXMuZnJpY3Rpb24gPSB0aGlzLm9wdGlvbihcImRlY2VsRnJpY3Rpb25cIik7XG5cbiAgICAgICAgdGhpcy5yZWNhbGN1bGF0ZVRyYW5zZm9ybSgpO1xuXG4gICAgICAgIHRoaXMuJGNvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKHRoaXMub3B0aW9uKFwiZHJhZ2dpbmdDbGFzc1wiKSk7XG5cbiAgICAgICAgaWYgKHRoaXMudHJpZ2dlcihcInRvdWNoRW5kXCIsIGV2ZW50KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5zdGF0ZSAhPT0gXCJkZWNlbFwiKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gKiBDaGVjayBpZiBzY2FsZWQgY29udGVudCBwYXN0IGxpbWl0c1xuXG4gICAgICAgIC8vIEJlbG93IG1pbmltdW1cbiAgICAgICAgY29uc3QgbWluU2NhbGUgPSB0aGlzLm9wdGlvbihcIm1pblNjYWxlXCIpO1xuXG4gICAgICAgIGlmICh0aGlzLnRyYW5zZm9ybS5zY2FsZSA8IG1pblNjYWxlKSB7XG4gICAgICAgICAgdGhpcy56b29tVG8obWluU2NhbGUsIHsgZnJpY3Rpb246IDAuNjQgfSk7XG5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBFeGNlZWQgbWF4aW11bVxuICAgICAgICBjb25zdCBtYXhTY2FsZSA9IHRoaXMub3B0aW9uKFwibWF4U2NhbGVcIik7XG5cbiAgICAgICAgaWYgKHRoaXMudHJhbnNmb3JtLnNjYWxlIC0gbWF4U2NhbGUgPiAwLjAxKSB7XG4gICAgICAgICAgY29uc3QgbGFzdCA9IHRoaXMuZHJhZ1Bvc2l0aW9uLm1pZFBvaW50IHx8IHBvaW50ZXI7XG4gICAgICAgICAgY29uc3QgcmVjdCA9IHRoaXMuJGNvbnRlbnQuZ2V0Q2xpZW50UmVjdHMoKVswXTtcblxuICAgICAgICAgIHRoaXMuem9vbVRvKG1heFNjYWxlLCB7XG4gICAgICAgICAgICBmcmljdGlvbjogMC42NCxcbiAgICAgICAgICAgIHg6IGxhc3QuY2xpZW50WCAtIHJlY3QubGVmdCxcbiAgICAgICAgICAgIHk6IGxhc3QuY2xpZW50WSAtIHJlY3QudG9wLFxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgdGhpcy5wb2ludGVyVHJhY2tlciA9IHBvaW50ZXJUcmFja2VyO1xuICB9XG5cbiAgaW5pdE9ic2VydmVyKCkge1xuICAgIGlmICh0aGlzLnJlc2l6ZU9ic2VydmVyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5yZXNpemVPYnNlcnZlciA9IG5ldyBSZXNpemVPYnNlcnZlcigoKSA9PiB7XG4gICAgICBpZiAodGhpcy51cGRhdGVUaW1lcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMudXBkYXRlVGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgY29uc3QgcmVjdCA9IHRoaXMuJGNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgICBpZiAoIShyZWN0LndpZHRoICYmIHJlY3QuaGVpZ2h0KSkge1xuICAgICAgICAgIHRoaXMudXBkYXRlVGltZXIgPSBudWxsO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENoZWNrIHRvIHNlZSBpZiB0aGVyZSBhcmUgYW55IGNoYW5nZXNcbiAgICAgICAgaWYgKE1hdGguYWJzKHJlY3Qud2lkdGggLSB0aGlzLmNvbnRhaW5lci53aWR0aCkgPiAxIHx8IE1hdGguYWJzKHJlY3QuaGVpZ2h0IC0gdGhpcy5jb250YWluZXIuaGVpZ2h0KSA+IDEpIHtcbiAgICAgICAgICBpZiAodGhpcy5pc0FuaW1hdGluZygpKSB7XG4gICAgICAgICAgICB0aGlzLmVuZEFuaW1hdGlvbih0cnVlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLnVwZGF0ZU1ldHJpY3MoKTtcblxuICAgICAgICAgIHRoaXMucGFuVG8oe1xuICAgICAgICAgICAgeDogdGhpcy5jb250ZW50LngsXG4gICAgICAgICAgICB5OiB0aGlzLmNvbnRlbnQueSxcbiAgICAgICAgICAgIHNjYWxlOiB0aGlzLm9wdGlvbihcImJhc2VTY2FsZVwiKSxcbiAgICAgICAgICAgIGZyaWN0aW9uOiAwLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy51cGRhdGVUaW1lciA9IG51bGw7XG4gICAgICB9LCB0aGlzLnVwZGF0ZVJhdGUpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5yZXNpemVPYnNlcnZlci5vYnNlcnZlKHRoaXMuJGNvbnRhaW5lcik7XG4gIH1cblxuICAvKipcbiAgICogUmVzdG9yZSBkcmFnIHJlbGF0ZWQgdmFyaWFibGVzIHRvIGRlZmF1bHQgdmFsdWVzXG4gICAqL1xuICByZXNldERyYWdQb3NpdGlvbigpIHtcbiAgICB0aGlzLmxvY2tBeGlzID0gbnVsbDtcbiAgICB0aGlzLmZyaWN0aW9uID0gdGhpcy5vcHRpb24oXCJmcmljdGlvblwiKTtcblxuICAgIHRoaXMudmVsb2NpdHkgPSB7XG4gICAgICB4OiAwLFxuICAgICAgeTogMCxcbiAgICAgIHNjYWxlOiAwLFxuICAgIH07XG5cbiAgICBjb25zdCB7IHgsIHksIHNjYWxlIH0gPSB0aGlzLmNvbnRlbnQ7XG5cbiAgICB0aGlzLmRyYWdTdGFydCA9IHtcbiAgICAgIHJlY3Q6IHRoaXMuJGNvbnRlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICB4LFxuICAgICAgeSxcbiAgICAgIHNjYWxlLFxuICAgIH07XG5cbiAgICB0aGlzLmRyYWdQb3NpdGlvbiA9IHtcbiAgICAgIC4uLnRoaXMuZHJhZ1Bvc2l0aW9uLFxuICAgICAgeCxcbiAgICAgIHksXG4gICAgICBzY2FsZSxcbiAgICB9O1xuXG4gICAgdGhpcy5kcmFnT2Zmc2V0ID0ge1xuICAgICAgeDogMCxcbiAgICAgIHk6IDAsXG4gICAgICBzY2FsZTogMSxcbiAgICAgIHRpbWU6IDAsXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmlnZ2VyIHVwZGF0ZSBldmVudHMgYmVmb3JlL2FmdGVyIHJlc2l6aW5nIGNvbnRlbnQgYW5kIHZpZXdwb3J0XG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gc2lsZW50bHkgU2hvdWxkIHRyaWdnZXIgYGFmdGVyVXBkYXRlYCBldmVudCBhdCB0aGUgZW5kXG4gICAqL1xuICB1cGRhdGVNZXRyaWNzKHNpbGVudGx5KSB7XG4gICAgaWYgKHNpbGVudGx5ICE9PSB0cnVlKSB7XG4gICAgICB0aGlzLnRyaWdnZXIoXCJiZWZvcmVVcGRhdGVcIik7XG4gICAgfVxuXG4gICAgY29uc3QgJGNvbnRhaW5lciA9IHRoaXMuJGNvbnRhaW5lcjtcbiAgICBjb25zdCAkY29udGVudCA9IHRoaXMuJGNvbnRlbnQ7XG4gICAgY29uc3QgJHZpZXdwb3J0ID0gdGhpcy4kdmlld3BvcnQ7XG5cbiAgICBjb25zdCBjb250ZW50SXNJbWFnZSA9ICRjb250ZW50IGluc3RhbmNlb2YgSFRNTEltYWdlRWxlbWVudDtcbiAgICBjb25zdCBjb250ZW50SXNab29tYWJsZSA9IHRoaXMub3B0aW9uKFwiem9vbVwiKTtcbiAgICBjb25zdCBzaG91bGRSZXNpemVQYXJlbnQgPSB0aGlzLm9wdGlvbihcInJlc2l6ZVBhcmVudFwiLCBjb250ZW50SXNab29tYWJsZSk7XG5cbiAgICBsZXQgd2lkdGggPSB0aGlzLm9wdGlvbihcIndpZHRoXCIpO1xuICAgIGxldCBoZWlnaHQgPSB0aGlzLm9wdGlvbihcImhlaWdodFwiKTtcblxuICAgIGxldCBvcmlnV2lkdGggPSB3aWR0aCB8fCBnZXRGdWxsV2lkdGgoJGNvbnRlbnQpO1xuICAgIGxldCBvcmlnSGVpZ2h0ID0gaGVpZ2h0IHx8IGdldEZ1bGxIZWlnaHQoJGNvbnRlbnQpO1xuXG4gICAgT2JqZWN0LmFzc2lnbigkY29udGVudC5zdHlsZSwge1xuICAgICAgd2lkdGg6IHdpZHRoID8gYCR7d2lkdGh9cHhgIDogXCJcIixcbiAgICAgIGhlaWdodDogaGVpZ2h0ID8gYCR7aGVpZ2h0fXB4YCA6IFwiXCIsXG4gICAgICBtYXhXaWR0aDogXCJcIixcbiAgICAgIG1heEhlaWdodDogXCJcIixcbiAgICB9KTtcblxuICAgIGlmIChzaG91bGRSZXNpemVQYXJlbnQpIHtcbiAgICAgIE9iamVjdC5hc3NpZ24oJHZpZXdwb3J0LnN0eWxlLCB7IHdpZHRoOiBcIlwiLCBoZWlnaHQ6IFwiXCIgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgcmF0aW8gPSB0aGlzLm9wdGlvbihcInJhdGlvXCIpO1xuXG4gICAgb3JpZ1dpZHRoID0gcm91bmQob3JpZ1dpZHRoICogcmF0aW8pO1xuICAgIG9yaWdIZWlnaHQgPSByb3VuZChvcmlnSGVpZ2h0ICogcmF0aW8pO1xuXG4gICAgd2lkdGggPSBvcmlnV2lkdGg7XG4gICAgaGVpZ2h0ID0gb3JpZ0hlaWdodDtcblxuICAgIGNvbnN0IGNvbnRlbnRSZWN0ID0gJGNvbnRlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgY29uc3Qgdmlld3BvcnRSZWN0ID0gJHZpZXdwb3J0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgY29uc3QgY29udGFpbmVyUmVjdCA9ICR2aWV3cG9ydCA9PSAkY29udGFpbmVyID8gdmlld3BvcnRSZWN0IDogJGNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgIGxldCB2aWV3cG9ydFdpZHRoID0gTWF0aC5tYXgoJHZpZXdwb3J0Lm9mZnNldFdpZHRoLCByb3VuZCh2aWV3cG9ydFJlY3Qud2lkdGgpKTtcbiAgICBsZXQgdmlld3BvcnRIZWlnaHQgPSBNYXRoLm1heCgkdmlld3BvcnQub2Zmc2V0SGVpZ2h0LCByb3VuZCh2aWV3cG9ydFJlY3QuaGVpZ2h0KSk7XG5cbiAgICBsZXQgdmlld3BvcnRTdHlsZXMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSgkdmlld3BvcnQpO1xuICAgIHZpZXdwb3J0V2lkdGggLT0gcGFyc2VGbG9hdCh2aWV3cG9ydFN0eWxlcy5wYWRkaW5nTGVmdCkgKyBwYXJzZUZsb2F0KHZpZXdwb3J0U3R5bGVzLnBhZGRpbmdSaWdodCk7XG4gICAgdmlld3BvcnRIZWlnaHQgLT0gcGFyc2VGbG9hdCh2aWV3cG9ydFN0eWxlcy5wYWRkaW5nVG9wKSArIHBhcnNlRmxvYXQodmlld3BvcnRTdHlsZXMucGFkZGluZ0JvdHRvbSk7XG5cbiAgICB0aGlzLnZpZXdwb3J0LndpZHRoID0gdmlld3BvcnRXaWR0aDtcbiAgICB0aGlzLnZpZXdwb3J0LmhlaWdodCA9IHZpZXdwb3J0SGVpZ2h0O1xuXG4gICAgaWYgKGNvbnRlbnRJc1pvb21hYmxlKSB7XG4gICAgICBpZiAoTWF0aC5hYnMob3JpZ1dpZHRoIC0gY29udGVudFJlY3Qud2lkdGgpID4gMC4xIHx8IE1hdGguYWJzKG9yaWdIZWlnaHQgLSBjb250ZW50UmVjdC5oZWlnaHQpID4gMC4xKSB7XG4gICAgICAgIGNvbnN0IHJleiA9IGNhbGN1bGF0ZUFzcGVjdFJhdGlvRml0KFxuICAgICAgICAgIG9yaWdXaWR0aCxcbiAgICAgICAgICBvcmlnSGVpZ2h0LFxuICAgICAgICAgIE1hdGgubWluKG9yaWdXaWR0aCwgY29udGVudFJlY3Qud2lkdGgpLFxuICAgICAgICAgIE1hdGgubWluKG9yaWdIZWlnaHQsIGNvbnRlbnRSZWN0LmhlaWdodClcbiAgICAgICAgKTtcblxuICAgICAgICB3aWR0aCA9IHJvdW5kKHJlei53aWR0aCk7XG4gICAgICAgIGhlaWdodCA9IHJvdW5kKHJlei5oZWlnaHQpO1xuICAgICAgfVxuXG4gICAgICBPYmplY3QuYXNzaWduKCRjb250ZW50LnN0eWxlLCB7XG4gICAgICAgIHdpZHRoOiBgJHt3aWR0aH1weGAsXG4gICAgICAgIGhlaWdodDogYCR7aGVpZ2h0fXB4YCxcbiAgICAgICAgdHJhbnNmb3JtOiBcIlwiLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHNob3VsZFJlc2l6ZVBhcmVudCkge1xuICAgICAgT2JqZWN0LmFzc2lnbigkdmlld3BvcnQuc3R5bGUsIHsgd2lkdGg6IGAke3dpZHRofXB4YCwgaGVpZ2h0OiBgJHtoZWlnaHR9cHhgIH0pO1xuXG4gICAgICB0aGlzLnZpZXdwb3J0ID0geyAuLi50aGlzLnZpZXdwb3J0LCB3aWR0aCwgaGVpZ2h0IH07XG4gICAgfVxuXG4gICAgaWYgKGNvbnRlbnRJc0ltYWdlICYmIGNvbnRlbnRJc1pvb21hYmxlICYmIHR5cGVvZiB0aGlzLm9wdGlvbnMubWF4U2NhbGUgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgY29uc3QgbWF4U2NhbGUgPSB0aGlzLm9wdGlvbihcIm1heFNjYWxlXCIpO1xuXG4gICAgICB0aGlzLm9wdGlvbnMubWF4U2NhbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRlbnQub3JpZ1dpZHRoID4gMCAmJiB0aGlzLmNvbnRlbnQuZml0V2lkdGggPiAwXG4gICAgICAgICAgPyB0aGlzLmNvbnRlbnQub3JpZ1dpZHRoIC8gdGhpcy5jb250ZW50LmZpdFdpZHRoXG4gICAgICAgICAgOiBtYXhTY2FsZTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdGhpcy5jb250ZW50ID0ge1xuICAgICAgLi4udGhpcy5jb250ZW50LFxuICAgICAgb3JpZ1dpZHRoLFxuICAgICAgb3JpZ0hlaWdodCxcbiAgICAgIGZpdFdpZHRoOiB3aWR0aCxcbiAgICAgIGZpdEhlaWdodDogaGVpZ2h0LFxuICAgICAgd2lkdGgsXG4gICAgICBoZWlnaHQsXG4gICAgICBzY2FsZTogMSxcbiAgICAgIGlzWm9vbWFibGU6IGNvbnRlbnRJc1pvb21hYmxlLFxuICAgIH07XG5cbiAgICB0aGlzLmNvbnRhaW5lciA9IHsgd2lkdGg6IGNvbnRhaW5lclJlY3Qud2lkdGgsIGhlaWdodDogY29udGFpbmVyUmVjdC5oZWlnaHQgfTtcblxuICAgIGlmIChzaWxlbnRseSAhPT0gdHJ1ZSkge1xuICAgICAgdGhpcy50cmlnZ2VyKFwiYWZ0ZXJVcGRhdGVcIik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEluY3JlYXNlIHpvb20gbGV2ZWxcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtzdGVwXSBab29tIHJhdGlvOyBgMC41YCB3b3VsZCBpbmNyZWFzZSBzY2FsZSBmcm9tIDEgdG8gMS41XG4gICAqL1xuICB6b29tSW4oc3RlcCkge1xuICAgIHRoaXMuem9vbVRvKHRoaXMuY29udGVudC5zY2FsZSArIChzdGVwIHx8IHRoaXMub3B0aW9uKFwic3RlcFwiKSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIERlY3JlYXNlIHpvb20gbGV2ZWxcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtzdGVwXSBab29tIHJhdGlvOyBgMC41YCB3b3VsZCBkZWNyZWFzZSBzY2FsZSBmcm9tIDEuNSB0byAxXG4gICAqL1xuICB6b29tT3V0KHN0ZXApIHtcbiAgICB0aGlzLnpvb21Ubyh0aGlzLmNvbnRlbnQuc2NhbGUgLSAoc3RlcCB8fCB0aGlzLm9wdGlvbihcInN0ZXBcIikpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUb2dnbGVzIHpvb20gbGV2ZWwgYmV0d2VlbiBtYXggYW5kIGJhc2UgbGV2ZWxzXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gQWRkaXRpb25hbCBvcHRpb25zXG4gICAqL1xuICB0b2dnbGVab29tKHByb3BzID0ge30pIHtcbiAgICBjb25zdCBtYXhTY2FsZSA9IHRoaXMub3B0aW9uKFwibWF4U2NhbGVcIik7XG4gICAgY29uc3QgYmFzZVNjYWxlID0gdGhpcy5vcHRpb24oXCJiYXNlU2NhbGVcIik7XG5cbiAgICBjb25zdCBzY2FsZSA9IHRoaXMuY29udGVudC5zY2FsZSA+IGJhc2VTY2FsZSArIChtYXhTY2FsZSAtIGJhc2VTY2FsZSkgKiAwLjUgPyBiYXNlU2NhbGUgOiBtYXhTY2FsZTtcblxuICAgIHRoaXMuem9vbVRvKHNjYWxlLCBwcm9wcyk7XG4gIH1cblxuICAvKipcbiAgICogQW5pbWF0ZSB0byBnaXZlbiB6b29tIGxldmVsXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBzY2FsZSBOZXcgem9vbSBsZXZlbFxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIEFkZGl0aW9uYWwgb3B0aW9uc1xuICAgKi9cbiAgem9vbVRvKHNjYWxlID0gdGhpcy5vcHRpb24oXCJiYXNlU2NhbGVcIiksIHsgeCA9IG51bGwsIHkgPSBudWxsIH0gPSB7fSkge1xuICAgIHNjYWxlID0gTWF0aC5tYXgoTWF0aC5taW4oc2NhbGUsIHRoaXMub3B0aW9uKFwibWF4U2NhbGVcIikpLCB0aGlzLm9wdGlvbihcIm1pblNjYWxlXCIpKTtcblxuICAgIC8vIEFkanVzdCB6b29tIHBvc2l0aW9uXG4gICAgY29uc3QgY3VycmVudFNjYWxlID0gcm91bmQodGhpcy5jb250ZW50LnNjYWxlIC8gKHRoaXMuY29udGVudC53aWR0aCAvIHRoaXMuY29udGVudC5maXRXaWR0aCksIDEwMDAwMDAwKTtcblxuICAgIGlmICh4ID09PSBudWxsKSB7XG4gICAgICB4ID0gdGhpcy5jb250ZW50LndpZHRoICogY3VycmVudFNjYWxlICogMC41O1xuICAgIH1cblxuICAgIGlmICh5ID09PSBudWxsKSB7XG4gICAgICB5ID0gdGhpcy5jb250ZW50LmhlaWdodCAqIGN1cnJlbnRTY2FsZSAqIDAuNTtcbiAgICB9XG5cbiAgICBjb25zdCB7IGRlbHRhWCwgZGVsdGFZIH0gPSB0aGlzLmdldFpvb21EZWx0YShzY2FsZSwgeCwgeSk7XG5cbiAgICB4ID0gdGhpcy5jb250ZW50LnggLSBkZWx0YVg7XG4gICAgeSA9IHRoaXMuY29udGVudC55IC0gZGVsdGFZO1xuXG4gICAgdGhpcy5wYW5Ubyh7IHgsIHksIHNjYWxlLCBmcmljdGlvbjogdGhpcy5vcHRpb24oXCJ6b29tRnJpY3Rpb25cIikgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlIGRpZmZlcmVuY2UgZm9yIHRvcC9sZWZ0IHZhbHVlcyBpZiBjb250ZW50IHdvdWxkIHNjYWxlIGF0IGdpdmVuIGNvb3JkaW5hdGVzXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBzY2FsZVxuICAgKiBAcGFyYW0ge051bWJlcn0geFxuICAgKiBAcGFyYW0ge051bWJlcn0geVxuICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgKi9cbiAgZ2V0Wm9vbURlbHRhKHNjYWxlLCB4ID0gMCwgeSA9IDApIHtcbiAgICBjb25zdCBjdXJyZW50V2lkdGggPSB0aGlzLmNvbnRlbnQuZml0V2lkdGggKiB0aGlzLmNvbnRlbnQuc2NhbGU7XG4gICAgY29uc3QgY3VycmVudEhlaWdodCA9IHRoaXMuY29udGVudC5maXRIZWlnaHQgKiB0aGlzLmNvbnRlbnQuc2NhbGU7XG5cbiAgICBjb25zdCBwZXJjZW50WEluQ3VycmVudEJveCA9IHggPiAwICYmIGN1cnJlbnRXaWR0aCA/IHggLyBjdXJyZW50V2lkdGggOiAwO1xuICAgIGNvbnN0IHBlcmNlbnRZSW5DdXJyZW50Qm94ID0geSA+IDAgJiYgY3VycmVudEhlaWdodCA/IHkgLyBjdXJyZW50SGVpZ2h0IDogMDtcblxuICAgIGNvbnN0IG5leHRXaWR0aCA9IHRoaXMuY29udGVudC5maXRXaWR0aCAqIHNjYWxlO1xuICAgIGNvbnN0IG5leHRIZWlnaHQgPSB0aGlzLmNvbnRlbnQuZml0SGVpZ2h0ICogc2NhbGU7XG5cbiAgICBjb25zdCBkZWx0YVggPSAobmV4dFdpZHRoIC0gY3VycmVudFdpZHRoKSAqIHBlcmNlbnRYSW5DdXJyZW50Qm94O1xuICAgIGNvbnN0IGRlbHRhWSA9IChuZXh0SGVpZ2h0IC0gY3VycmVudEhlaWdodCkgKiBwZXJjZW50WUluQ3VycmVudEJveDtcblxuICAgIHJldHVybiB7IGRlbHRhWCwgZGVsdGFZIH07XG4gIH1cblxuICAvKipcbiAgICogQW5pbWF0ZSB0byBnaXZlbiBwb3NpdG9uIGFuZC9vciB6b29tIGxldmVsXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gQWRkaXRpb25hbCBvcHRpb25zXG4gICAqL1xuICBwYW5Ubyh7XG4gICAgeCA9IHRoaXMuY29udGVudC54LFxuICAgIHkgPSB0aGlzLmNvbnRlbnQueSxcbiAgICBzY2FsZSxcbiAgICBmcmljdGlvbiA9IHRoaXMub3B0aW9uKFwiZnJpY3Rpb25cIiksXG4gICAgaWdub3JlQm91bmRzID0gZmFsc2UsXG4gIH0gPSB7fSkge1xuICAgIHNjYWxlID0gc2NhbGUgfHwgdGhpcy5jb250ZW50LnNjYWxlIHx8IDE7XG5cbiAgICBpZiAoIWlnbm9yZUJvdW5kcykge1xuICAgICAgY29uc3QgeyBib3VuZFgsIGJvdW5kWSB9ID0gdGhpcy5nZXRCb3VuZHMoc2NhbGUpO1xuXG4gICAgICBpZiAoYm91bmRYKSB7XG4gICAgICAgIHggPSBNYXRoLm1heChNYXRoLm1pbih4LCBib3VuZFgudG8pLCBib3VuZFguZnJvbSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChib3VuZFkpIHtcbiAgICAgICAgeSA9IE1hdGgubWF4KE1hdGgubWluKHksIGJvdW5kWS50byksIGJvdW5kWS5mcm9tKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmZyaWN0aW9uID0gZnJpY3Rpb247XG5cbiAgICB0aGlzLnRyYW5zZm9ybSA9IHtcbiAgICAgIC4uLnRoaXMudHJhbnNmb3JtLFxuICAgICAgeCxcbiAgICAgIHksXG4gICAgICBzY2FsZSxcbiAgICB9O1xuXG4gICAgaWYgKGZyaWN0aW9uKSB7XG4gICAgICB0aGlzLnN0YXRlID0gXCJwYW5uaW5nXCI7XG5cbiAgICAgIHRoaXMudmVsb2NpdHkgPSB7XG4gICAgICAgIHg6ICgxIC8gdGhpcy5mcmljdGlvbiAtIDEpICogKHggLSB0aGlzLmNvbnRlbnQueCksXG4gICAgICAgIHk6ICgxIC8gdGhpcy5mcmljdGlvbiAtIDEpICogKHkgLSB0aGlzLmNvbnRlbnQueSksXG4gICAgICAgIHNjYWxlOiAoMSAvIHRoaXMuZnJpY3Rpb24gLSAxKSAqIChzY2FsZSAtIHRoaXMuY29udGVudC5zY2FsZSksXG4gICAgICB9O1xuXG4gICAgICB0aGlzLnN0YXJ0QW5pbWF0aW9uKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZW5kQW5pbWF0aW9uKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0IGFuaW1hdGlvbiBsb29wXG4gICAqL1xuICBzdGFydEFuaW1hdGlvbigpIHtcbiAgICBpZiAoIXRoaXMuckFGKSB7XG4gICAgICB0aGlzLnRyaWdnZXIoXCJzdGFydEFuaW1hdGlvblwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5yQUYpO1xuICAgIH1cblxuICAgIHRoaXMuckFGID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHRoaXMuYW5pbWF0ZSgpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcm9jZXNzIGFuaW1hdGlvbiBmcmFtZVxuICAgKi9cbiAgYW5pbWF0ZSgpIHtcbiAgICB0aGlzLnNldEVkZ2VGb3JjZSgpO1xuICAgIHRoaXMuc2V0RHJhZ0ZvcmNlKCk7XG5cbiAgICB0aGlzLnZlbG9jaXR5LnggKj0gdGhpcy5mcmljdGlvbjtcbiAgICB0aGlzLnZlbG9jaXR5LnkgKj0gdGhpcy5mcmljdGlvbjtcblxuICAgIHRoaXMudmVsb2NpdHkuc2NhbGUgKj0gdGhpcy5mcmljdGlvbjtcblxuICAgIHRoaXMuY29udGVudC54ICs9IHRoaXMudmVsb2NpdHkueDtcbiAgICB0aGlzLmNvbnRlbnQueSArPSB0aGlzLnZlbG9jaXR5Lnk7XG5cbiAgICB0aGlzLmNvbnRlbnQuc2NhbGUgKz0gdGhpcy52ZWxvY2l0eS5zY2FsZTtcblxuICAgIGlmICh0aGlzLmlzQW5pbWF0aW5nKCkpIHtcbiAgICAgIHRoaXMuc2V0VHJhbnNmb3JtKCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnN0YXRlICE9PSBcInBvaW50ZXJkb3duXCIpIHtcbiAgICAgIHRoaXMuZW5kQW5pbWF0aW9uKCk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnJBRiA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB0aGlzLmFuaW1hdGUoKSk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlIGJvdW5kYXJpZXNcbiAgICovXG4gIGdldEJvdW5kcyhzY2FsZSkge1xuICAgIGxldCBib3VuZFggPSB0aGlzLmJvdW5kWDtcbiAgICBsZXQgYm91bmRZID0gdGhpcy5ib3VuZFk7XG5cbiAgICBpZiAoYm91bmRYICE9PSB1bmRlZmluZWQgJiYgYm91bmRZICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB7IGJvdW5kWCwgYm91bmRZIH07XG4gICAgfVxuXG4gICAgYm91bmRYID0geyBmcm9tOiAwLCB0bzogMCB9O1xuICAgIGJvdW5kWSA9IHsgZnJvbTogMCwgdG86IDAgfTtcblxuICAgIHNjYWxlID0gc2NhbGUgfHwgdGhpcy50cmFuc2Zvcm0uc2NhbGU7XG5cbiAgICBjb25zdCB3aWR0aCA9IHRoaXMuY29udGVudC5maXRXaWR0aCAqIHNjYWxlO1xuICAgIGNvbnN0IGhlaWdodCA9IHRoaXMuY29udGVudC5maXRIZWlnaHQgKiBzY2FsZTtcblxuICAgIGNvbnN0IHZpZXdwb3J0V2lkdGggPSB0aGlzLnZpZXdwb3J0LndpZHRoO1xuICAgIGNvbnN0IHZpZXdwb3J0SGVpZ2h0ID0gdGhpcy52aWV3cG9ydC5oZWlnaHQ7XG5cbiAgICBpZiAod2lkdGggPCB2aWV3cG9ydFdpZHRoKSB7XG4gICAgICBjb25zdCBkZWx0YVggPSByb3VuZCgodmlld3BvcnRXaWR0aCAtIHdpZHRoKSAqIDAuNSk7XG5cbiAgICAgIGJvdW5kWC5mcm9tID0gZGVsdGFYO1xuICAgICAgYm91bmRYLnRvID0gZGVsdGFYO1xuICAgIH0gZWxzZSB7XG4gICAgICBib3VuZFguZnJvbSA9IHJvdW5kKHZpZXdwb3J0V2lkdGggLSB3aWR0aCk7XG4gICAgfVxuXG4gICAgaWYgKGhlaWdodCA8IHZpZXdwb3J0SGVpZ2h0KSB7XG4gICAgICBjb25zdCBkZWx0YVkgPSAodmlld3BvcnRIZWlnaHQgLSBoZWlnaHQpICogMC41O1xuXG4gICAgICBib3VuZFkuZnJvbSA9IGRlbHRhWTtcbiAgICAgIGJvdW5kWS50byA9IGRlbHRhWTtcbiAgICB9IGVsc2Uge1xuICAgICAgYm91bmRZLmZyb20gPSByb3VuZCh2aWV3cG9ydEhlaWdodCAtIGhlaWdodCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgYm91bmRYLCBib3VuZFkgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGFuZ2UgYW5pbWF0aW9uIHZlbG9jaXR5IGlmIGJvdW5kYXJ5IGlzIHJlYWNoZWRcbiAgICovXG4gIHNldEVkZ2VGb3JjZSgpIHtcbiAgICBpZiAodGhpcy5zdGF0ZSAhPT0gXCJkZWNlbFwiKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgYm91bmNlRm9yY2UgPSB0aGlzLm9wdGlvbihcImJvdW5jZUZvcmNlXCIpO1xuXG4gICAgY29uc3QgeyBib3VuZFgsIGJvdW5kWSB9ID0gdGhpcy5nZXRCb3VuZHMoTWF0aC5tYXgodGhpcy50cmFuc2Zvcm0uc2NhbGUsIHRoaXMuY29udGVudC5zY2FsZSkpO1xuXG4gICAgbGV0IHBhc3RMZWZ0LCBwYXN0UmlnaHQsIHBhc3RUb3AsIHBhc3RCb3R0b207XG5cbiAgICBpZiAoYm91bmRYKSB7XG4gICAgICBwYXN0TGVmdCA9IHRoaXMuY29udGVudC54IDwgYm91bmRYLmZyb207XG4gICAgICBwYXN0UmlnaHQgPSB0aGlzLmNvbnRlbnQueCA+IGJvdW5kWC50bztcbiAgICB9XG5cbiAgICBpZiAoYm91bmRZKSB7XG4gICAgICBwYXN0VG9wID0gdGhpcy5jb250ZW50LnkgPCBib3VuZFkuZnJvbTtcbiAgICAgIHBhc3RCb3R0b20gPSB0aGlzLmNvbnRlbnQueSA+IGJvdW5kWS50bztcbiAgICB9XG5cbiAgICBpZiAocGFzdExlZnQgfHwgcGFzdFJpZ2h0KSB7XG4gICAgICBjb25zdCBib3VuZCA9IHBhc3RMZWZ0ID8gYm91bmRYLmZyb20gOiBib3VuZFgudG87XG4gICAgICBjb25zdCBkaXN0YW5jZSA9IGJvdW5kIC0gdGhpcy5jb250ZW50Lng7XG5cbiAgICAgIGxldCBmb3JjZSA9IGRpc3RhbmNlICogYm91bmNlRm9yY2U7XG5cbiAgICAgIGNvbnN0IHJlc3RYID0gdGhpcy5jb250ZW50LnggKyAodGhpcy52ZWxvY2l0eS54ICsgZm9yY2UpIC8gdGhpcy5mcmljdGlvbjtcblxuICAgICAgaWYgKHJlc3RYID49IGJvdW5kWC5mcm9tICYmIHJlc3RYIDw9IGJvdW5kWC50bykge1xuICAgICAgICBmb3JjZSArPSB0aGlzLnZlbG9jaXR5Lng7XG4gICAgICB9XG5cbiAgICAgIHRoaXMudmVsb2NpdHkueCA9IGZvcmNlO1xuXG4gICAgICB0aGlzLnJlY2FsY3VsYXRlVHJhbnNmb3JtKCk7XG4gICAgfVxuXG4gICAgaWYgKHBhc3RUb3AgfHwgcGFzdEJvdHRvbSkge1xuICAgICAgY29uc3QgYm91bmQgPSBwYXN0VG9wID8gYm91bmRZLmZyb20gOiBib3VuZFkudG87XG4gICAgICBjb25zdCBkaXN0YW5jZSA9IGJvdW5kIC0gdGhpcy5jb250ZW50Lnk7XG5cbiAgICAgIGxldCBmb3JjZSA9IGRpc3RhbmNlICogYm91bmNlRm9yY2U7XG5cbiAgICAgIGNvbnN0IHJlc3RZID0gdGhpcy5jb250ZW50LnkgKyAoZm9yY2UgKyB0aGlzLnZlbG9jaXR5LnkpIC8gdGhpcy5mcmljdGlvbjtcblxuICAgICAgaWYgKHJlc3RZID49IGJvdW5kWS5mcm9tICYmIHJlc3RZIDw9IGJvdW5kWS50bykge1xuICAgICAgICBmb3JjZSArPSB0aGlzLnZlbG9jaXR5Lnk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMudmVsb2NpdHkueSA9IGZvcmNlO1xuXG4gICAgICB0aGlzLnJlY2FsY3VsYXRlVHJhbnNmb3JtKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENoYW5nZSBkcmFnZ2luZyBwb3NpdGlvbiBpZiBib3VuZGFyeSBpcyByZWFjaGVkXG4gICAqL1xuICBzZXREcmFnUmVzaXN0YW5jZSgpIHtcbiAgICBpZiAodGhpcy5zdGF0ZSAhPT0gXCJwb2ludGVyZG93blwiKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgeyBib3VuZFgsIGJvdW5kWSB9ID0gdGhpcy5nZXRCb3VuZHModGhpcy5kcmFnUG9zaXRpb24uc2NhbGUpO1xuXG4gICAgbGV0IHBhc3RMZWZ0LCBwYXN0UmlnaHQsIHBhc3RUb3AsIHBhc3RCb3R0b207XG5cbiAgICBpZiAoYm91bmRYKSB7XG4gICAgICBwYXN0TGVmdCA9IHRoaXMuZHJhZ1Bvc2l0aW9uLnggPCBib3VuZFguZnJvbTtcbiAgICAgIHBhc3RSaWdodCA9IHRoaXMuZHJhZ1Bvc2l0aW9uLnggPiBib3VuZFgudG87XG4gICAgfVxuXG4gICAgaWYgKGJvdW5kWSkge1xuICAgICAgcGFzdFRvcCA9IHRoaXMuZHJhZ1Bvc2l0aW9uLnkgPCBib3VuZFkuZnJvbTtcbiAgICAgIHBhc3RCb3R0b20gPSB0aGlzLmRyYWdQb3NpdGlvbi55ID4gYm91bmRZLnRvO1xuICAgIH1cblxuICAgIGlmICgocGFzdExlZnQgfHwgcGFzdFJpZ2h0KSAmJiAhKHBhc3RMZWZ0ICYmIHBhc3RSaWdodCkpIHtcbiAgICAgIGNvbnN0IGJvdW5kID0gcGFzdExlZnQgPyBib3VuZFguZnJvbSA6IGJvdW5kWC50bztcbiAgICAgIGNvbnN0IGRpc3RhbmNlID0gYm91bmQgLSB0aGlzLmRyYWdQb3NpdGlvbi54O1xuXG4gICAgICB0aGlzLmRyYWdQb3NpdGlvbi54ID0gYm91bmQgLSBkaXN0YW5jZSAqIDAuMztcbiAgICB9XG5cbiAgICBpZiAoKHBhc3RUb3AgfHwgcGFzdEJvdHRvbSkgJiYgIShwYXN0VG9wICYmIHBhc3RCb3R0b20pKSB7XG4gICAgICBjb25zdCBib3VuZCA9IHBhc3RUb3AgPyBib3VuZFkuZnJvbSA6IGJvdW5kWS50bztcbiAgICAgIGNvbnN0IGRpc3RhbmNlID0gYm91bmQgLSB0aGlzLmRyYWdQb3NpdGlvbi55O1xuXG4gICAgICB0aGlzLmRyYWdQb3NpdGlvbi55ID0gYm91bmQgLSBkaXN0YW5jZSAqIDAuMztcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2V0IHZlbG9jaXR5IHRvIG1vdmUgY29udGVudCB0byBkcmFnIHBvc2l0aW9uXG4gICAqL1xuICBzZXREcmFnRm9yY2UoKSB7XG4gICAgaWYgKHRoaXMuc3RhdGUgPT09IFwicG9pbnRlcmRvd25cIikge1xuICAgICAgdGhpcy52ZWxvY2l0eS54ID0gdGhpcy5kcmFnUG9zaXRpb24ueCAtIHRoaXMuY29udGVudC54O1xuICAgICAgdGhpcy52ZWxvY2l0eS55ID0gdGhpcy5kcmFnUG9zaXRpb24ueSAtIHRoaXMuY29udGVudC55O1xuICAgICAgdGhpcy52ZWxvY2l0eS5zY2FsZSA9IHRoaXMuZHJhZ1Bvc2l0aW9uLnNjYWxlIC0gdGhpcy5jb250ZW50LnNjYWxlO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgZW5kIHZhbHVlcyBiYXNlZCBvbiBjdXJyZW50IHZlbG9jaXR5IGFuZCBmcmljdGlvbjtcbiAgICovXG4gIHJlY2FsY3VsYXRlVHJhbnNmb3JtKCkge1xuICAgIHRoaXMudHJhbnNmb3JtLnggPSB0aGlzLmNvbnRlbnQueCArIHRoaXMudmVsb2NpdHkueCAvICgxIC8gdGhpcy5mcmljdGlvbiAtIDEpO1xuICAgIHRoaXMudHJhbnNmb3JtLnkgPSB0aGlzLmNvbnRlbnQueSArIHRoaXMudmVsb2NpdHkueSAvICgxIC8gdGhpcy5mcmljdGlvbiAtIDEpO1xuICAgIHRoaXMudHJhbnNmb3JtLnNjYWxlID0gdGhpcy5jb250ZW50LnNjYWxlICsgdGhpcy52ZWxvY2l0eS5zY2FsZSAvICgxIC8gdGhpcy5mcmljdGlvbiAtIDEpO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGNvbnRlbnQgaXMgY3VycmVudGx5IGFuaW1hdGluZ1xuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICovXG4gIGlzQW5pbWF0aW5nKCkge1xuICAgIHJldHVybiAhIShcbiAgICAgIHRoaXMuZnJpY3Rpb24gJiZcbiAgICAgIChNYXRoLmFicyh0aGlzLnZlbG9jaXR5LngpID4gMC4wNSB8fCBNYXRoLmFicyh0aGlzLnZlbG9jaXR5LnkpID4gMC4wNSB8fCBNYXRoLmFicyh0aGlzLnZlbG9jaXR5LnNjYWxlKSA+IDAuMDUpXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgY29udGVudCBgc3R5bGUudHJhbnNmb3JtYCB2YWx1ZSBiYXNlZCBvbiBjdXJyZW50IGFuaW1hdGlvbiBmcmFtZVxuICAgKi9cbiAgc2V0VHJhbnNmb3JtKGZpbmFsKSB7XG4gICAgbGV0IHgsIHksIHNjYWxlO1xuXG4gICAgaWYgKGZpbmFsKSB7XG4gICAgICB4ID0gcm91bmQodGhpcy50cmFuc2Zvcm0ueCk7XG4gICAgICB5ID0gcm91bmQodGhpcy50cmFuc2Zvcm0ueSk7XG5cbiAgICAgIHNjYWxlID0gdGhpcy50cmFuc2Zvcm0uc2NhbGU7XG5cbiAgICAgIHRoaXMuY29udGVudCA9IHsgLi4udGhpcy5jb250ZW50LCB4LCB5LCBzY2FsZSB9O1xuICAgIH0gZWxzZSB7XG4gICAgICB4ID0gcm91bmQodGhpcy5jb250ZW50LngpO1xuICAgICAgeSA9IHJvdW5kKHRoaXMuY29udGVudC55KTtcblxuICAgICAgc2NhbGUgPSB0aGlzLmNvbnRlbnQuc2NhbGUgLyAodGhpcy5jb250ZW50LndpZHRoIC8gdGhpcy5jb250ZW50LmZpdFdpZHRoKTtcblxuICAgICAgdGhpcy5jb250ZW50ID0geyAuLi50aGlzLmNvbnRlbnQsIHgsIHkgfTtcbiAgICB9XG5cbiAgICB0aGlzLnRyaWdnZXIoXCJiZWZvcmVUcmFuc2Zvcm1cIik7XG5cbiAgICB4ID0gcm91bmQodGhpcy5jb250ZW50LngpO1xuICAgIHkgPSByb3VuZCh0aGlzLmNvbnRlbnQueSk7XG5cbiAgICBpZiAoZmluYWwgJiYgdGhpcy5vcHRpb24oXCJ6b29tXCIpKSB7XG4gICAgICBsZXQgd2lkdGg7XG4gICAgICBsZXQgaGVpZ2h0O1xuXG4gICAgICB3aWR0aCA9IHJvdW5kKHRoaXMuY29udGVudC5maXRXaWR0aCAqIHNjYWxlKTtcbiAgICAgIGhlaWdodCA9IHJvdW5kKHRoaXMuY29udGVudC5maXRIZWlnaHQgKiBzY2FsZSk7XG5cbiAgICAgIHRoaXMuY29udGVudC53aWR0aCA9IHdpZHRoO1xuICAgICAgdGhpcy5jb250ZW50LmhlaWdodCA9IGhlaWdodDtcblxuICAgICAgdGhpcy50cmFuc2Zvcm0gPSB7IC4uLnRoaXMudHJhbnNmb3JtLCB3aWR0aCwgaGVpZ2h0LCBzY2FsZSB9O1xuXG4gICAgICBPYmplY3QuYXNzaWduKHRoaXMuJGNvbnRlbnQuc3R5bGUsIHtcbiAgICAgICAgd2lkdGg6IGAke3dpZHRofXB4YCxcbiAgICAgICAgaGVpZ2h0OiBgJHtoZWlnaHR9cHhgLFxuICAgICAgICBtYXhXaWR0aDogXCJub25lXCIsXG4gICAgICAgIG1heEhlaWdodDogXCJub25lXCIsXG4gICAgICAgIHRyYW5zZm9ybTogYHRyYW5zbGF0ZTNkKCR7eH1weCwgJHt5fXB4LCAwKSBzY2FsZSgxKWAsXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy4kY29udGVudC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoJHt4fXB4LCAke3l9cHgsIDApIHNjYWxlKCR7c2NhbGV9KWA7XG4gICAgfVxuXG4gICAgdGhpcy50cmlnZ2VyKFwiYWZ0ZXJUcmFuc2Zvcm1cIik7XG4gIH1cblxuICAvKipcbiAgICogU3RvcCBhbmltYXRpb24gbG9vcFxuICAgKi9cbiAgZW5kQW5pbWF0aW9uKHNpbGVudGx5KSB7XG4gICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5yQUYpO1xuICAgIHRoaXMuckFGID0gbnVsbDtcblxuICAgIHRoaXMudmVsb2NpdHkgPSB7XG4gICAgICB4OiAwLFxuICAgICAgeTogMCxcbiAgICAgIHNjYWxlOiAwLFxuICAgIH07XG5cbiAgICB0aGlzLnNldFRyYW5zZm9ybSh0cnVlKTtcblxuICAgIHRoaXMuc3RhdGUgPSBcInJlYWR5XCI7XG5cbiAgICB0aGlzLmhhbmRsZUN1cnNvcigpO1xuXG4gICAgaWYgKHNpbGVudGx5ICE9PSB0cnVlKSB7XG4gICAgICB0aGlzLnRyaWdnZXIoXCJlbmRBbmltYXRpb25cIik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSB0aGUgY2xhc3MgbmFtZSBkZXBlbmRpbmcgb24gd2hldGhlciB0aGUgY29udGVudCBpcyBzY2FsZWRcbiAgICovXG4gIGhhbmRsZUN1cnNvcigpIHtcbiAgICBjb25zdCBkcmFnZ2FibGVDbGFzcyA9IHRoaXMub3B0aW9uKFwiZHJhZ2dhYmxlQ2xhc3NcIik7XG5cbiAgICBpZiAoIWRyYWdnYWJsZUNsYXNzIHx8ICF0aGlzLm9wdGlvbihcInRvdWNoXCIpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgdGhpcy5vcHRpb24oXCJwYW5Pbmx5Wm9vbWVkXCIpID09IHRydWUgJiZcbiAgICAgIHRoaXMuY29udGVudC53aWR0aCA8PSB0aGlzLnZpZXdwb3J0LndpZHRoICYmXG4gICAgICB0aGlzLmNvbnRlbnQuaGVpZ2h0IDw9IHRoaXMudmlld3BvcnQuaGVpZ2h0ICYmXG4gICAgICB0aGlzLnRyYW5zZm9ybS5zY2FsZSA8PSB0aGlzLm9wdGlvbihcImJhc2VTY2FsZVwiKVxuICAgICkge1xuICAgICAgdGhpcy4kY29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoZHJhZ2dhYmxlQ2xhc3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLiRjb250YWluZXIuY2xhc3NMaXN0LmFkZChkcmFnZ2FibGVDbGFzcyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBvYnNlcnZhdGlvbiBhbmQgZGV0YWNoIGV2ZW50IGxpc3RlbmVyc1xuICAgKi9cbiAgZGV0YWNoRXZlbnRzKCkge1xuICAgIHRoaXMuJGNvbnRlbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgdGhpcy5vbkxvYWQpO1xuXG4gICAgdGhpcy4kY29udGFpbmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ3aGVlbFwiLCB0aGlzLm9uV2hlZWwsIHsgcGFzc2l2ZTogZmFsc2UgfSk7XG4gICAgdGhpcy4kY29udGFpbmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLm9uQ2xpY2ssIHsgcGFzc2l2ZTogZmFsc2UgfSk7XG5cbiAgICBpZiAodGhpcy5wb2ludGVyVHJhY2tlcikge1xuICAgICAgdGhpcy5wb2ludGVyVHJhY2tlci5zdG9wKCk7XG4gICAgICB0aGlzLnBvaW50ZXJUcmFja2VyID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5yZXNpemVPYnNlcnZlcikge1xuICAgICAgdGhpcy5yZXNpemVPYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgICB0aGlzLnJlc2l6ZU9ic2VydmVyID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2xlYW4gdXBcbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMuc3RhdGUgPT09IFwiZGVzdHJveVwiKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5zdGF0ZSA9IFwiZGVzdHJveVwiO1xuXG4gICAgY2xlYXJUaW1lb3V0KHRoaXMudXBkYXRlVGltZXIpO1xuICAgIHRoaXMudXBkYXRlVGltZXIgPSBudWxsO1xuXG4gICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5yQUYpO1xuICAgIHRoaXMuckFGID0gbnVsbDtcblxuICAgIHRoaXMuZGV0YWNoRXZlbnRzKCk7XG5cbiAgICB0aGlzLmRldGFjaFBsdWdpbnMoKTtcblxuICAgIHRoaXMucmVzZXREcmFnUG9zaXRpb24oKTtcbiAgfVxufVxuXG4vLyBFeHBvc2UgdmVyc2lvblxuUGFuem9vbS52ZXJzaW9uID0gXCJfX1ZFUlNJT05fX1wiO1xuXG4vLyBTdGF0aWMgcHJvcGVydGllcyBhcmUgYSByZWNlbnQgYWRkaXRpb24gdGhhdCBkb250IHdvcmsgaW4gYWxsIGJyb3dzZXJzIHlldFxuUGFuem9vbS5QbHVnaW5zID0gUGx1Z2lucztcbiIsImV4cG9ydCBjb25zdCBQbHVnaW5zID0ge307XG4iLCJpbXBvcnQgeyBleHRlbmQgfSBmcm9tIFwiLi4vdXRpbHMvZXh0ZW5kLmpzXCI7XG5pbXBvcnQgeyByZXNvbHZlIH0gZnJvbSBcIi4uL3V0aWxzL3Jlc29sdmUuanNcIjtcbmltcG9ydCB7IGlzUGxhaW5PYmplY3QgfSBmcm9tIFwiLi4vdXRpbHMvaXNQbGFpbk9iamVjdC5qc1wiO1xuXG4vKipcbiAqIEJhc2UgY2xhc3MsIGFsbCBjb21wb25lbnRzIGluaGVyaXQgZnJvbSB0aGlzIGNsYXNzXG4gKi9cbmV4cG9ydCBjbGFzcyBCYXNlIHtcbiAgLyoqXG4gICAqIEJhc2UgY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAtIE9wdGlvbnMgYXMgYGtleTogdmFsdWVgIHBhaXJzXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pIHtcbiAgICB0aGlzLm9wdGlvbnMgPSBleHRlbmQodHJ1ZSwge30sIG9wdGlvbnMpO1xuXG4gICAgdGhpcy5wbHVnaW5zID0gW107XG4gICAgdGhpcy5ldmVudHMgPSB7fTtcblxuICAgIC8vICogUHJlZmlsbCB3aXRoIGluaXRpYWwgZXZlbnRzXG4gICAgZm9yIChjb25zdCB0eXBlIG9mIFtcIm9uXCIsIFwib25jZVwiXSkge1xuICAgICAgZm9yIChjb25zdCBhcmdzIG9mIE9iamVjdC5lbnRyaWVzKHRoaXMub3B0aW9uc1t0eXBlXSB8fCB7fSkpIHtcbiAgICAgICAgdGhpc1t0eXBlXSguLi5hcmdzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0cmlldmUgb3B0aW9uIHZhbHVlIGJ5IGtleSwgc3VwcG9ydHMgc3Via2V5c1xuICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5IE9wdGlvbiBuYW1lXG4gICAqIEBwYXJhbSB7Kn0gW2ZhbGxiYWNrXSBGYWxsYmFjayB2YWx1ZSBmb3Igbm9uLWV4aXN0aW5nIGtleVxuICAgKiBAcmV0dXJucyB7Kn1cbiAgICovXG4gIG9wdGlvbihrZXksIGZhbGxiYWNrLCAuLi5yZXN0KSB7XG4gICAgLy8gTWFrZSBzdXJlIGl0IGlzIHN0cmluZ1xuICAgIGtleSA9IFN0cmluZyhrZXkpO1xuXG4gICAgbGV0IHZhbHVlID0gcmVzb2x2ZShrZXksIHRoaXMub3B0aW9ucyk7XG5cbiAgICAvLyBBbGxvdyB0byBoYXZlIGZ1bmN0aW9ucyBhcyBvcHRpb25zXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICB2YWx1ZSA9IHZhbHVlLmNhbGwodGhpcywgdGhpcywgLi4ucmVzdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyBmYWxsYmFjayA6IHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFNpbXBsZSBsMTBuIHN1cHBvcnQgLSByZXBsYWNlcyBvYmplY3Qga2V5c1xuICAgKiBmb3VuZCBpbiB0ZW1wbGF0ZSB3aXRoIGNvcnJlc3BvbmRpbmcgdmFsdWVzXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgU3RyaW5nIGNvbnRhaW5pbmcgdmFsdWVzIHRvIGxvY2FsaXplXG4gICAqIEBwYXJhbSB7QXJyYXl9IHBhcmFtcyBTdWJzdGl0dXRlIHBhcmFtZXRlcnNcbiAgICogQHJldHVybnMge1N0cmluZ31cbiAgICovXG4gIGxvY2FsaXplKHN0ciwgcGFyYW1zID0gW10pIHtcbiAgICBzdHIgPSBTdHJpbmcoc3RyKS5yZXBsYWNlKC9cXHtcXHsoXFx3KykuPyhcXHcrKT9cXH1cXH0vZywgKG1hdGNoLCBrZXksIHN1YmtleSkgPT4ge1xuICAgICAgbGV0IHJleiA9IFwiXCI7XG5cbiAgICAgIC8vIFBsdWdpbnMgaGF2ZSBgUGx1Z2luLmwxMG4uS0VZYFxuICAgICAgaWYgKHN1YmtleSkge1xuICAgICAgICByZXogPSB0aGlzLm9wdGlvbihgJHtrZXlbMF0gKyBrZXkudG9Mb3dlckNhc2UoKS5zdWJzdHJpbmcoMSl9LmwxMG4uJHtzdWJrZXl9YCk7XG4gICAgICB9IGVsc2UgaWYgKGtleSkge1xuICAgICAgICByZXogPSB0aGlzLm9wdGlvbihgbDEwbi4ke2tleX1gKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFyZXopIHtcbiAgICAgICAgcmV6ID0gbWF0Y2g7XG4gICAgICB9XG5cbiAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBwYXJhbXMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIHJleiA9IHJlei5zcGxpdChwYXJhbXNbaW5kZXhdWzBdKS5qb2luKHBhcmFtc1tpbmRleF1bMV0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmV6O1xuICAgIH0pO1xuXG4gICAgc3RyID0gc3RyLnJlcGxhY2UoL1xce1xceyguKilcXH1cXH0vLCAobWF0Y2gsIGtleSkgPT4ge1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9KTtcblxuICAgIHJldHVybiBzdHI7XG4gIH1cblxuICAvKipcbiAgICogU3Vic2NyaWJlIHRvIGFuIGV2ZW50XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAqL1xuICBvbihuYW1lLCBjYWxsYmFjaykge1xuICAgIGlmIChpc1BsYWluT2JqZWN0KG5hbWUpKSB7XG4gICAgICBmb3IgKGNvbnN0IGFyZ3Mgb2YgT2JqZWN0LmVudHJpZXMobmFtZSkpIHtcbiAgICAgICAgdGhpcy5vbiguLi5hcmdzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgU3RyaW5nKG5hbWUpXG4gICAgICAuc3BsaXQoXCIgXCIpXG4gICAgICAuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICBjb25zdCBsaXN0ZW5lcnMgPSAodGhpcy5ldmVudHNbaXRlbV0gPSB0aGlzLmV2ZW50c1tpdGVtXSB8fCBbXSk7XG5cbiAgICAgICAgaWYgKGxpc3RlbmVycy5pbmRleE9mKGNhbGxiYWNrKSA9PSAtMSkge1xuICAgICAgICAgIGxpc3RlbmVycy5wdXNoKGNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBTdWJzY3JpYmUgdG8gYW4gZXZlbnQgb25seSBvbmNlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAqL1xuICBvbmNlKG5hbWUsIGNhbGxiYWNrKSB7XG4gICAgaWYgKGlzUGxhaW5PYmplY3QobmFtZSkpIHtcbiAgICAgIGZvciAoY29uc3QgYXJncyBvZiBPYmplY3QuZW50cmllcyhuYW1lKSkge1xuICAgICAgICB0aGlzLm9uY2UoLi4uYXJncyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIFN0cmluZyhuYW1lKVxuICAgICAgLnNwbGl0KFwiIFwiKVxuICAgICAgLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgY29uc3QgbGlzdGVuZXIgPSAoLi4uZGV0YWlscykgPT4ge1xuICAgICAgICAgIHRoaXMub2ZmKGl0ZW0sIGxpc3RlbmVyKTtcbiAgICAgICAgICBjYWxsYmFjay5jYWxsKHRoaXMsIHRoaXMsIC4uLmRldGFpbHMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGxpc3RlbmVyLl8gPSBjYWxsYmFjaztcblxuICAgICAgICB0aGlzLm9uKGl0ZW0sIGxpc3RlbmVyKTtcbiAgICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogVW5zdWJzY3JpYmUgZXZlbnQgd2l0aCBuYW1lIGFuZCBjYWxsYmFja1xuICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgKi9cbiAgb2ZmKG5hbWUsIGNhbGxiYWNrKSB7XG4gICAgaWYgKGlzUGxhaW5PYmplY3QobmFtZSkpIHtcbiAgICAgIGZvciAoY29uc3QgYXJncyBvZiBPYmplY3QuZW50cmllcyhuYW1lKSkge1xuICAgICAgICB0aGlzLm9mZiguLi5hcmdzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG5hbWUuc3BsaXQoXCIgXCIpLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgIGNvbnN0IGxpc3RlbmVycyA9IHRoaXMuZXZlbnRzW2l0ZW1dO1xuXG4gICAgICBpZiAoIWxpc3RlbmVycyB8fCAhbGlzdGVuZXJzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgbGV0IGluZGV4ID0gLTE7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBsaXN0ZW5lcnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgY29uc3QgbGlzdGVuZXIgPSBsaXN0ZW5lcnNbaV07XG5cbiAgICAgICAgaWYgKGxpc3RlbmVyICYmIChsaXN0ZW5lciA9PT0gY2FsbGJhY2sgfHwgbGlzdGVuZXIuXyA9PT0gY2FsbGJhY2spKSB7XG4gICAgICAgICAgaW5kZXggPSBpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChpbmRleCAhPSAtMSkge1xuICAgICAgICBsaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEVtaXQgYW4gZXZlbnQuXG4gICAqIElmIHByZXNlbnQsIGBcIipcImAgaGFuZGxlcnMgYXJlIGludm9rZWQgYWZ0ZXIgbmFtZS1tYXRjaGVkIGhhbmRsZXJzLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICAgKiBAcGFyYW0gIHsuLi5hbnl9IGRldGFpbHNcbiAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAqL1xuICB0cmlnZ2VyKG5hbWUsIC4uLmRldGFpbHMpIHtcbiAgICBmb3IgKGNvbnN0IGxpc3RlbmVyIG9mIFsuLi4odGhpcy5ldmVudHNbbmFtZV0gfHwgW10pXS5zbGljZSgpKSB7XG4gICAgICBpZiAobGlzdGVuZXIgJiYgbGlzdGVuZXIuY2FsbCh0aGlzLCB0aGlzLCAuLi5kZXRhaWxzKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEEgd2lsZGNhcmQgXCIqXCIgZXZlbnQgdHlwZVxuICAgIGZvciAoY29uc3QgbGlzdGVuZXIgb2YgWy4uLih0aGlzLmV2ZW50c1tcIipcIl0gfHwgW10pXS5zbGljZSgpKSB7XG4gICAgICBpZiAobGlzdGVuZXIgJiYgbGlzdGVuZXIuY2FsbCh0aGlzLCBuYW1lLCB0aGlzLCAuLi5kZXRhaWxzKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBnaXZlbiBwbHVnaW5zIHRvIHRoaXMgaW5zdGFuY2UsXG4gICAqIHRoaXMgd2lsbCBlbmQgdXAgY2FsbGluZyBgYXR0YWNoYCBtZXRob2Qgb2YgZWFjaCBwbHVnaW5cbiAgICogQHBhcmFtIHtPYmplY3R9IFBsdWdpbnNcbiAgICogQHJldHVybnMge09iamVjdH1cbiAgICovXG4gIGF0dGFjaFBsdWdpbnMocGx1Z2lucykge1xuICAgIGNvbnN0IG5ld1BsdWdpbnMgPSB7fTtcblxuICAgIGZvciAoY29uc3QgW2tleSwgUGx1Z2luXSBvZiBPYmplY3QuZW50cmllcyhwbHVnaW5zIHx8IHt9KSkge1xuICAgICAgLy8gQ2hlY2sgaWYgdGhpcyBwbHVnaW4gaXMgbm90IGRpc2FibGVkIGJ5IG9wdGlvblxuICAgICAgaWYgKHRoaXMub3B0aW9uc1trZXldICE9PSBmYWxzZSAmJiAhdGhpcy5wbHVnaW5zW2tleV0pIHtcbiAgICAgICAgLy8gUG9wdWxhdGUgb3B0aW9ucyB3aXRoIGRlZmF1bHRzIGZyb20gdGhlIHBsdWdpblxuICAgICAgICB0aGlzLm9wdGlvbnNba2V5XSA9IGV4dGVuZCh7fSwgUGx1Z2luLmRlZmF1bHRzIHx8IHt9LCB0aGlzLm9wdGlvbnNba2V5XSk7XG5cbiAgICAgICAgLy8gSW5pdGlhbGlzZSBwbHVnaW5cbiAgICAgICAgbmV3UGx1Z2luc1trZXldID0gbmV3IFBsdWdpbih0aGlzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IFtrZXksIHBsdWdpbl0gb2YgT2JqZWN0LmVudHJpZXMobmV3UGx1Z2lucykpIHtcbiAgICAgIHBsdWdpbi5hdHRhY2godGhpcyk7XG4gICAgfVxuXG4gICAgdGhpcy5wbHVnaW5zID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5wbHVnaW5zLCBuZXdQbHVnaW5zKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhbGwgcGx1Z2luIGluc3RhbmNlcyBmcm9tIHRoaXMgaW5zdGFuY2UsXG4gICAqIHRoaXMgd2lsbCBlbmQgdXAgY2FsbGluZyBgZGV0YWNoYCBtZXRob2Qgb2YgZWFjaCBwbHVnaW5cbiAgICogQHJldHVybnMge09iamVjdH1cbiAgICovXG4gIGRldGFjaFBsdWdpbnMoKSB7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5wbHVnaW5zKSB7XG4gICAgICBsZXQgcGx1Z2luO1xuXG4gICAgICBpZiAoKHBsdWdpbiA9IHRoaXMucGx1Z2luc1trZXldKSAmJiB0eXBlb2YgcGx1Z2luLmRldGFjaCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHBsdWdpbi5kZXRhY2godGhpcyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5wbHVnaW5zID0ge307XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuIiwiZXhwb3J0IGNvbnN0IEZ1bGxzY3JlZW4gPSB7XHJcbiAgcGFnZVhPZmZzZXQ6IDAsXHJcbiAgcGFnZVlPZmZzZXQ6IDAsXHJcblxyXG4gIGVsZW1lbnQoKSB7XHJcbiAgICByZXR1cm4gZG9jdW1lbnQuZnVsbHNjcmVlbkVsZW1lbnQgfHwgZG9jdW1lbnQubW96RnVsbFNjcmVlbkVsZW1lbnQgfHwgZG9jdW1lbnQud2Via2l0RnVsbHNjcmVlbkVsZW1lbnQ7XHJcbiAgfSxcclxuXHJcbiAgYWN0aXZhdGUoZWxlbWVudCkge1xyXG4gICAgRnVsbHNjcmVlbi5wYWdlWE9mZnNldCA9IHdpbmRvdy5wYWdlWE9mZnNldDtcclxuICAgIEZ1bGxzY3JlZW4ucGFnZVlPZmZzZXQgPSB3aW5kb3cucGFnZVlPZmZzZXQ7XHJcblxyXG4gICAgaWYgKGVsZW1lbnQucmVxdWVzdEZ1bGxzY3JlZW4pIHtcclxuICAgICAgZWxlbWVudC5yZXF1ZXN0RnVsbHNjcmVlbigpOyAvLyBXM0Mgc3BlY1xyXG4gICAgfSBlbHNlIGlmIChlbGVtZW50Lm1velJlcXVlc3RGdWxsU2NyZWVuKSB7XHJcbiAgICAgIGVsZW1lbnQubW96UmVxdWVzdEZ1bGxTY3JlZW4oKTsgLy8gRmlyZWZveFxyXG4gICAgfSBlbHNlIGlmIChlbGVtZW50LndlYmtpdFJlcXVlc3RGdWxsc2NyZWVuKSB7XHJcbiAgICAgIGVsZW1lbnQud2Via2l0UmVxdWVzdEZ1bGxzY3JlZW4oKTsgLy8gU2FmYXJpXHJcbiAgICB9IGVsc2UgaWYgKGVsZW1lbnQubXNSZXF1ZXN0RnVsbHNjcmVlbikge1xyXG4gICAgICBlbGVtZW50Lm1zUmVxdWVzdEZ1bGxzY3JlZW4oKTsgLy8gSUUvRWRnZVxyXG4gICAgfVxyXG4gIH0sXHJcblxyXG4gIGRlYWN0aXZhdGUoKSB7XHJcbiAgICBpZiAoZG9jdW1lbnQuZXhpdEZ1bGxzY3JlZW4pIHtcclxuICAgICAgZG9jdW1lbnQuZXhpdEZ1bGxzY3JlZW4oKTtcclxuICAgIH0gZWxzZSBpZiAoZG9jdW1lbnQubW96Q2FuY2VsRnVsbFNjcmVlbikge1xyXG4gICAgICBkb2N1bWVudC5tb3pDYW5jZWxGdWxsU2NyZWVuKCk7XHJcbiAgICB9IGVsc2UgaWYgKGRvY3VtZW50LndlYmtpdEV4aXRGdWxsc2NyZWVuKSB7XHJcbiAgICAgIGRvY3VtZW50LndlYmtpdEV4aXRGdWxsc2NyZWVuKCk7XHJcbiAgICB9XHJcbiAgfSxcclxufTtcclxuIiwiY2xhc3MgUG9pbnRlciB7XHJcbiAgY29uc3RydWN0b3IobmF0aXZlUG9pbnRlcikge1xyXG4gICAgdGhpcy5pZCA9IHNlbGYuVG91Y2ggJiYgbmF0aXZlUG9pbnRlciBpbnN0YW5jZW9mIFRvdWNoID8gbmF0aXZlUG9pbnRlci5pZGVudGlmaWVyIDogLTE7XHJcblxyXG4gICAgdGhpcy5wYWdlWCA9IG5hdGl2ZVBvaW50ZXIucGFnZVg7XHJcbiAgICB0aGlzLnBhZ2VZID0gbmF0aXZlUG9pbnRlci5wYWdlWTtcclxuXHJcbiAgICB0aGlzLmNsaWVudFggPSBuYXRpdmVQb2ludGVyLmNsaWVudFg7XHJcbiAgICB0aGlzLmNsaWVudFkgPSBuYXRpdmVQb2ludGVyLmNsaWVudFk7XHJcbiAgfVxyXG59XHJcblxyXG5jb25zdCBnZXREaXN0YW5jZSA9IChhLCBiKSA9PiB7XHJcbiAgaWYgKCFiKSB7XHJcbiAgICByZXR1cm4gMDtcclxuICB9XHJcblxyXG4gIHJldHVybiBNYXRoLnNxcnQoKGIuY2xpZW50WCAtIGEuY2xpZW50WCkgKiogMiArIChiLmNsaWVudFkgLSBhLmNsaWVudFkpICoqIDIpO1xyXG59O1xyXG5cclxuY29uc3QgZ2V0TWlkcG9pbnQgPSAoYSwgYikgPT4ge1xyXG4gIGlmICghYikge1xyXG4gICAgcmV0dXJuIGE7XHJcbiAgfVxyXG5cclxuICByZXR1cm4ge1xyXG4gICAgY2xpZW50WDogKGEuY2xpZW50WCArIGIuY2xpZW50WCkgLyAyLFxyXG4gICAgY2xpZW50WTogKGEuY2xpZW50WSArIGIuY2xpZW50WSkgLyAyLFxyXG4gIH07XHJcbn07XHJcblxyXG5jb25zdCBpc1RvdWNoRXZlbnQgPSAoZXZlbnQpID0+IFwiY2hhbmdlZFRvdWNoZXNcIiBpbiBldmVudDtcclxuXHJcbmNsYXNzIFBvaW50ZXJUcmFja2VyIHtcclxuICBjb25zdHJ1Y3RvcihfZWxlbWVudCwgeyBzdGFydCA9ICgpID0+IHRydWUsIG1vdmUgPSAoKSA9PiB7fSwgZW5kID0gKCkgPT4ge30gfSA9IHt9KSB7XHJcbiAgICB0aGlzLl9lbGVtZW50ID0gX2VsZW1lbnQ7XHJcblxyXG4gICAgdGhpcy5zdGFydFBvaW50ZXJzID0gW107XHJcbiAgICB0aGlzLmN1cnJlbnRQb2ludGVycyA9IFtdO1xyXG5cclxuICAgIHRoaXMuX3BvaW50ZXJTdGFydCA9IChldmVudCkgPT4ge1xyXG4gICAgICBpZiAoZXZlbnQuYnV0dG9ucyA+IDAgJiYgZXZlbnQuYnV0dG9uICE9PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCBwb2ludGVyID0gbmV3IFBvaW50ZXIoZXZlbnQpO1xyXG5cclxuICAgICAgaWYgKHRoaXMuY3VycmVudFBvaW50ZXJzLnNvbWUoKHApID0+IHAuaWQgPT09IHBvaW50ZXIuaWQpKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoIXRoaXMuX3RyaWdnZXJQb2ludGVyU3RhcnQocG9pbnRlciwgZXZlbnQpKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCB0aGlzLl9tb3ZlKTtcclxuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIHRoaXMuX3BvaW50ZXJFbmQpO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLl90b3VjaFN0YXJ0ID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgIGZvciAoY29uc3QgdG91Y2ggb2YgQXJyYXkuZnJvbShldmVudC5jaGFuZ2VkVG91Y2hlcyB8fCBbXSkpIHtcclxuICAgICAgICB0aGlzLl90cmlnZ2VyUG9pbnRlclN0YXJ0KG5ldyBQb2ludGVyKHRvdWNoKSwgZXZlbnQpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuX21vdmUgPSAoZXZlbnQpID0+IHtcclxuICAgICAgY29uc3QgcHJldmlvdXNQb2ludGVycyA9IHRoaXMuY3VycmVudFBvaW50ZXJzLnNsaWNlKCk7XHJcbiAgICAgIGNvbnN0IGNoYW5nZWRQb2ludGVycyA9IGlzVG91Y2hFdmVudChldmVudClcclxuICAgICAgICA/IEFycmF5LmZyb20oZXZlbnQuY2hhbmdlZFRvdWNoZXMpLm1hcCgodCkgPT4gbmV3IFBvaW50ZXIodCkpXHJcbiAgICAgICAgOiBbbmV3IFBvaW50ZXIoZXZlbnQpXTtcclxuXHJcbiAgICAgIGNvbnN0IHRyYWNrZWRDaGFuZ2VkUG9pbnRlcnMgPSBbXTtcclxuXHJcbiAgICAgIGZvciAoY29uc3QgcG9pbnRlciBvZiBjaGFuZ2VkUG9pbnRlcnMpIHtcclxuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuY3VycmVudFBvaW50ZXJzLmZpbmRJbmRleCgocCkgPT4gcC5pZCA9PT0gcG9pbnRlci5pZCk7XHJcblxyXG4gICAgICAgIGlmIChpbmRleCA8IDApIHtcclxuICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdHJhY2tlZENoYW5nZWRQb2ludGVycy5wdXNoKHBvaW50ZXIpO1xyXG5cclxuICAgICAgICB0aGlzLmN1cnJlbnRQb2ludGVyc1tpbmRleF0gPSBwb2ludGVyO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLl9tb3ZlQ2FsbGJhY2socHJldmlvdXNQb2ludGVycywgdGhpcy5jdXJyZW50UG9pbnRlcnMuc2xpY2UoKSwgZXZlbnQpO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLl90cmlnZ2VyUG9pbnRlckVuZCA9IChwb2ludGVyLCBldmVudCkgPT4ge1xyXG4gICAgICBjb25zdCBpbmRleCA9IHRoaXMuY3VycmVudFBvaW50ZXJzLmZpbmRJbmRleCgocCkgPT4gcC5pZCA9PT0gcG9pbnRlci5pZCk7XHJcblxyXG4gICAgICBpZiAoaW5kZXggPCAwKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLmN1cnJlbnRQb2ludGVycy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICB0aGlzLnN0YXJ0UG9pbnRlcnMuc3BsaWNlKGluZGV4LCAxKTtcclxuXHJcbiAgICAgIHRoaXMuX2VuZENhbGxiYWNrKHBvaW50ZXIsIGV2ZW50KTtcclxuXHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLl9wb2ludGVyRW5kID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgIGlmIChldmVudC5idXR0b25zID4gMCAmJiBldmVudC5idXR0b24gIT09IDApIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICghdGhpcy5fdHJpZ2dlclBvaW50ZXJFbmQobmV3IFBvaW50ZXIoZXZlbnQpLCBldmVudCkpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIHRoaXMuX21vdmUsIHsgcGFzc2l2ZTogZmFsc2UgfSk7XHJcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCB0aGlzLl9wb2ludGVyRW5kLCB7IHBhc3NpdmU6IGZhbHNlIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLl90b3VjaEVuZCA9IChldmVudCkgPT4ge1xyXG4gICAgICBmb3IgKGNvbnN0IHRvdWNoIG9mIEFycmF5LmZyb20oZXZlbnQuY2hhbmdlZFRvdWNoZXMgfHwgW10pKSB7XHJcbiAgICAgICAgdGhpcy5fdHJpZ2dlclBvaW50ZXJFbmQobmV3IFBvaW50ZXIodG91Y2gpLCBldmVudCk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5fc3RhcnRDYWxsYmFjayA9IHN0YXJ0O1xyXG4gICAgdGhpcy5fbW92ZUNhbGxiYWNrID0gbW92ZTtcclxuICAgIHRoaXMuX2VuZENhbGxiYWNrID0gZW5kO1xyXG5cclxuICAgIHRoaXMuX2VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCB0aGlzLl9wb2ludGVyU3RhcnQsIHsgcGFzc2l2ZTogZmFsc2UgfSk7XHJcbiAgICB0aGlzLl9lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsIHRoaXMuX3RvdWNoU3RhcnQsIHsgcGFzc2l2ZTogZmFsc2UgfSk7XHJcbiAgICB0aGlzLl9lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIiwgdGhpcy5fbW92ZSwgeyBwYXNzaXZlOiBmYWxzZSB9KTtcclxuICAgIHRoaXMuX2VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoZW5kXCIsIHRoaXMuX3RvdWNoRW5kKTtcclxuICAgIHRoaXMuX2VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoY2FuY2VsXCIsIHRoaXMuX3RvdWNoRW5kKTtcclxuICB9XHJcblxyXG4gIHN0b3AoKSB7XHJcbiAgICB0aGlzLl9lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgdGhpcy5fcG9pbnRlclN0YXJ0LCB7IHBhc3NpdmU6IGZhbHNlIH0pO1xyXG4gICAgdGhpcy5fZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLCB0aGlzLl90b3VjaFN0YXJ0LCB7IHBhc3NpdmU6IGZhbHNlIH0pO1xyXG4gICAgdGhpcy5fZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsIHRoaXMuX21vdmUsIHsgcGFzc2l2ZTogZmFsc2UgfSk7XHJcbiAgICB0aGlzLl9lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLCB0aGlzLl90b3VjaEVuZCk7XHJcbiAgICB0aGlzLl9lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaGNhbmNlbFwiLCB0aGlzLl90b3VjaEVuZCk7XHJcblxyXG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgdGhpcy5fbW92ZSk7XHJcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgdGhpcy5fcG9pbnRlckVuZCk7XHJcbiAgfVxyXG5cclxuICBfdHJpZ2dlclBvaW50ZXJTdGFydChwb2ludGVyLCBldmVudCkge1xyXG4gICAgaWYgKCF0aGlzLl9zdGFydENhbGxiYWNrKHBvaW50ZXIsIGV2ZW50KSkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5jdXJyZW50UG9pbnRlcnMucHVzaChwb2ludGVyKTtcclxuICAgIHRoaXMuc3RhcnRQb2ludGVycy5wdXNoKHBvaW50ZXIpO1xyXG5cclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IHsgUG9pbnRlclRyYWNrZXIsIGdldERpc3RhbmNlLCBnZXRNaWRwb2ludCB9O1xyXG4iLCIvKipcbiAqIFJlc2l6ZU9ic2VydmVyIFBvbHlmaWxsXG4gKi9cbmV4cG9ydCBjb25zdCBSZXNpemVPYnNlcnZlciA9XG4gICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5SZXNpemVPYnNlcnZlcikgfHxcbiAgY2xhc3Mge1xuICAgIGNvbnN0cnVjdG9yKGNhbGxiYWNrKSB7XG4gICAgICB0aGlzLm9ic2VydmFibGVzID0gW107XG4gICAgICAvLyBBcnJheSBvZiBvYnNlcnZlZCBlbGVtZW50cyB0aGF0IGxvb2tzIGxpa2UgdGhpczpcbiAgICAgIC8vIFt7XG4gICAgICAvLyAgIGVsOiBkb21Ob2RlLFxuICAgICAgLy8gICBzaXplOiB7aGVpZ2h0OiB4LCB3aWR0aDogeX1cbiAgICAgIC8vIH1dXG4gICAgICB0aGlzLmJvdW5kQ2hlY2sgPSB0aGlzLmNoZWNrLmJpbmQodGhpcyk7XG4gICAgICB0aGlzLmJvdW5kQ2hlY2soKTtcbiAgICAgIHRoaXMuY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICB9XG5cbiAgICBvYnNlcnZlKGVsKSB7XG4gICAgICBpZiAodGhpcy5vYnNlcnZhYmxlcy5zb21lKChvYnNlcnZhYmxlKSA9PiBvYnNlcnZhYmxlLmVsID09PSBlbCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBuZXdPYnNlcnZhYmxlID0ge1xuICAgICAgICBlbDogZWwsXG4gICAgICAgIHNpemU6IHtcbiAgICAgICAgICBoZWlnaHQ6IGVsLmNsaWVudEhlaWdodCxcbiAgICAgICAgICB3aWR0aDogZWwuY2xpZW50V2lkdGgsXG4gICAgICAgIH0sXG4gICAgICB9O1xuXG4gICAgICB0aGlzLm9ic2VydmFibGVzLnB1c2gobmV3T2JzZXJ2YWJsZSk7XG4gICAgfVxuXG4gICAgdW5vYnNlcnZlKGVsKSB7XG4gICAgICB0aGlzLm9ic2VydmFibGVzID0gdGhpcy5vYnNlcnZhYmxlcy5maWx0ZXIoKG9iaikgPT4gb2JqLmVsICE9PSBlbCk7XG4gICAgfVxuXG4gICAgZGlzY29ubmVjdCgpIHtcbiAgICAgIHRoaXMub2JzZXJ2YWJsZXMgPSBbXTtcbiAgICB9XG5cbiAgICBjaGVjaygpIHtcbiAgICAgIGNvbnN0IGNoYW5nZWRFbnRyaWVzID0gdGhpcy5vYnNlcnZhYmxlc1xuICAgICAgICAuZmlsdGVyKChvYmopID0+IHtcbiAgICAgICAgICBjb25zdCBjdXJyZW50SGVpZ2h0ID0gb2JqLmVsLmNsaWVudEhlaWdodDtcbiAgICAgICAgICBjb25zdCBjdXJyZW50V2lkdGggPSBvYmouZWwuY2xpZW50V2lkdGg7XG4gICAgICAgICAgaWYgKG9iai5zaXplLmhlaWdodCAhPT0gY3VycmVudEhlaWdodCB8fCBvYmouc2l6ZS53aWR0aCAhPT0gY3VycmVudFdpZHRoKSB7XG4gICAgICAgICAgICBvYmouc2l6ZS5oZWlnaHQgPSBjdXJyZW50SGVpZ2h0O1xuICAgICAgICAgICAgb2JqLnNpemUud2lkdGggPSBjdXJyZW50V2lkdGg7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIC5tYXAoKG9iaikgPT4gb2JqLmVsKTtcblxuICAgICAgaWYgKGNoYW5nZWRFbnRyaWVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdGhpcy5jYWxsYmFjayhjaGFuZ2VkRW50cmllcyk7XG4gICAgICB9XG5cbiAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5ib3VuZENoZWNrKTtcbiAgICB9XG4gIH07XG4iLCJleHBvcnQgY2xhc3MgU2xpZGVzaG93IHtcclxuICBjb25zdHJ1Y3RvcihmYW5jeWJveCkge1xyXG4gICAgdGhpcy5mYW5jeWJveCA9IGZhbmN5Ym94O1xyXG4gICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcclxuXHJcbiAgICB0aGlzLmhhbmRsZVZpc2liaWxpdHlDaGFuZ2UgPSB0aGlzLmhhbmRsZVZpc2liaWxpdHlDaGFuZ2UuYmluZCh0aGlzKTtcclxuICB9XHJcblxyXG4gIGlzQWN0aXZlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuYWN0aXZlO1xyXG4gIH1cclxuXHJcbiAgc2V0VGltZXIoKSB7XHJcbiAgICBpZiAoIXRoaXMuYWN0aXZlIHx8IHRoaXMudGltZXIpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGRlbGF5ID0gdGhpcy5mYW5jeWJveC5vcHRpb24oXCJzbGlkZXNob3cuZGVsYXlcIiwgMzAwMCk7XHJcblxyXG4gICAgdGhpcy50aW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICB0aGlzLnRpbWVyID0gbnVsbDtcclxuXHJcbiAgICAgIGlmIChcclxuICAgICAgICAhdGhpcy5mYW5jeWJveC5vcHRpb24oXCJpbmZpbml0ZVwiKSAmJlxyXG4gICAgICAgIHRoaXMuZmFuY3lib3guZ2V0U2xpZGUoKS5pbmRleCA9PT0gdGhpcy5mYW5jeWJveC5DYXJvdXNlbC5zbGlkZXMubGVuZ3RoIC0gMVxyXG4gICAgICApIHtcclxuICAgICAgICB0aGlzLmZhbmN5Ym94Lmp1bXBUbygwLCB7IGZyaWN0aW9uOiAwIH0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuZmFuY3lib3gubmV4dCgpO1xyXG4gICAgICB9XHJcbiAgICB9LCBkZWxheSk7XHJcblxyXG4gICAgbGV0ICRwcm9ncmVzcyA9IHRoaXMuJHByb2dyZXNzO1xyXG5cclxuICAgIGlmICghJHByb2dyZXNzKSB7XHJcbiAgICAgICRwcm9ncmVzcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICRwcm9ncmVzcy5jbGFzc0xpc3QuYWRkKFwiZmFuY3lib3hfX3Byb2dyZXNzXCIpO1xyXG5cclxuICAgICAgdGhpcy5mYW5jeWJveC4kY2Fyb3VzZWwucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoJHByb2dyZXNzLCB0aGlzLmZhbmN5Ym94LiRjYXJvdXNlbCk7XHJcblxyXG4gICAgICB0aGlzLiRwcm9ncmVzcyA9ICRwcm9ncmVzcztcclxuXHJcbiAgICAgICRwcm9ncmVzcy5vZmZzZXRIZWlnaHQ7IC8qIHRyaWdnZXIgcmVmbG93ICovXHJcbiAgICB9XHJcblxyXG4gICAgJHByb2dyZXNzLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGAke2RlbGF5fW1zYDtcclxuICAgICRwcm9ncmVzcy5zdHlsZS50cmFuc2Zvcm0gPSBcInNjYWxlWCgxKVwiO1xyXG4gIH1cclxuXHJcbiAgY2xlYXJUaW1lcigpIHtcclxuICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVyKTtcclxuICAgIHRoaXMudGltZXIgPSBudWxsO1xyXG5cclxuICAgIGlmICh0aGlzLiRwcm9ncmVzcykge1xyXG4gICAgICB0aGlzLiRwcm9ncmVzcy5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBcIlwiO1xyXG4gICAgICB0aGlzLiRwcm9ncmVzcy5zdHlsZS50cmFuc2Zvcm0gPSBcIlwiO1xyXG5cclxuICAgICAgdGhpcy4kcHJvZ3Jlc3Mub2Zmc2V0SGVpZ2h0OyAvKiB0cmlnZ2VyIHJlZmxvdyAqL1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYWN0aXZhdGUoKSB7XHJcbiAgICBpZiAodGhpcy5hY3RpdmUpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuYWN0aXZlID0gdHJ1ZTtcclxuICAgIHRoaXMuZmFuY3lib3guJGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwiaGFzLXNsaWRlc2hvd1wiKTtcclxuXHJcbiAgICBpZiAodGhpcy5mYW5jeWJveC5nZXRTbGlkZSgpLnN0YXRlID09PSBcImRvbmVcIikge1xyXG4gICAgICB0aGlzLnNldFRpbWVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInZpc2liaWxpdHljaGFuZ2VcIiwgdGhpcy5oYW5kbGVWaXNpYmlsaXR5Q2hhbmdlLCBmYWxzZSk7XHJcbiAgfVxyXG5cclxuICBoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlKCkge1xyXG4gICAgdGhpcy5kZWFjdGl2YXRlKCk7XHJcbiAgfVxyXG5cclxuICBkZWFjdGl2YXRlKCkge1xyXG4gICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcclxuXHJcbiAgICB0aGlzLmNsZWFyVGltZXIoKTtcclxuXHJcbiAgICB0aGlzLmZhbmN5Ym94LiRjb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZShcImhhcy1zbGlkZXNob3dcIik7XHJcblxyXG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInZpc2liaWxpdHljaGFuZ2VcIiwgdGhpcy5oYW5kbGVWaXNpYmlsaXR5Q2hhbmdlLCBmYWxzZSk7XHJcbiAgfVxyXG5cclxuICB0b2dnbGUoKSB7XHJcbiAgICBpZiAodGhpcy5hY3RpdmUpIHtcclxuICAgICAgdGhpcy5kZWFjdGl2YXRlKCk7XHJcbiAgICB9IGVsc2UgaWYgKHRoaXMuZmFuY3lib3guQ2Fyb3VzZWwuc2xpZGVzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgdGhpcy5hY3RpdmF0ZSgpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCIvKipcclxuICogRGV0ZWN0IGlmIHJlbmRlcmluZyBmcm9tIHRoZSBjbGllbnQgb3IgdGhlIHNlcnZlclxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcclxuIiwiaW1wb3J0IHsgaXNQbGFpbk9iamVjdCB9IGZyb20gXCIuL2lzUGxhaW5PYmplY3QuanNcIjtcblxuLyoqXG4gKiBNZXJnZSB0aGUgY29udGVudHMgb2YgdHdvIG9yIG1vcmUgb2JqZWN0cyB0b2dldGhlciBpbnRvIHRoZSBmaXJzdCBvYmplY3QuXG4gKiBJZiBwYXNzaW5nIFwidHJ1ZVwiIGZvciBmaXJzdCBhcmd1bWVudCwgdGhlIG1lcmdlIGJlY29tZXMgcmVjdXJzaXZlIChha2EuIGRlZXAgY29weSkuXG4gKiBAcGFyYW0gIHsuLi5hbnl9IGFyZ3NcbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKi9cbmV4cG9ydCBjb25zdCBleHRlbmQgPSAoLi4uYXJncykgPT4ge1xuICBsZXQgZGVlcCA9IGZhbHNlO1xuXG4gIGlmICh0eXBlb2YgYXJnc1swXSA9PSBcImJvb2xlYW5cIikge1xuICAgIGRlZXAgPSBhcmdzLnNoaWZ0KCk7XG4gIH1cblxuICBsZXQgcmVzdWx0ID0gYXJnc1swXTtcblxuICBpZiAoIXJlc3VsdCB8fCB0eXBlb2YgcmVzdWx0ICE9PSBcIm9iamVjdFwiKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZXh0ZW5kZWUgbXVzdCBiZSBhbiBvYmplY3RcIik7XG4gIH1cblxuICBjb25zdCBleHRlbmRlcnMgPSBhcmdzLnNsaWNlKDEpO1xuICBjb25zdCBsZW4gPSBleHRlbmRlcnMubGVuZ3RoO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBjb25zdCBleHRlbmRlciA9IGV4dGVuZGVyc1tpXTtcblxuICAgIGZvciAobGV0IGtleSBpbiBleHRlbmRlcikge1xuICAgICAgaWYgKGV4dGVuZGVyLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBleHRlbmRlcltrZXldO1xuXG4gICAgICAgIGlmIChkZWVwICYmIChBcnJheS5pc0FycmF5KHZhbHVlKSB8fCBpc1BsYWluT2JqZWN0KHZhbHVlKSkpIHtcbiAgICAgICAgICBjb25zdCBiYXNlID0gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyBbXSA6IHt9O1xuXG4gICAgICAgICAgcmVzdWx0W2tleV0gPSBleHRlbmQodHJ1ZSwgcmVzdWx0Lmhhc093blByb3BlcnR5KGtleSkgPyByZXN1bHRba2V5XSA6IGJhc2UsIHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHRba2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIvKipcbiAqIEdldCBhY3R1YWwgd2lkdGggb2YgdGhlIGVsZW1lbnQsIHJlZ2FyZGxlc3Mgb2YgaG93IG11Y2ggb2YgY29udGVudCBpcyBjdXJyZW50bHkgdmlzaWJsZVxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtXG4gKiBAcmV0dXJucyB7SW50ZWdlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IGdldEZ1bGxXaWR0aCA9IChlbGVtKSA9PiB7XG4gIHJldHVybiBNYXRoLm1heChcbiAgICBwYXJzZUZsb2F0KGVsZW0ubmF0dXJhbFdpZHRoIHx8IDApLFxuICAgIHBhcnNlRmxvYXQoKGVsZW0ud2lkdGggJiYgZWxlbS53aWR0aC5iYXNlVmFsICYmIGVsZW0ud2lkdGguYmFzZVZhbC52YWx1ZSkgfHwgMCksXG4gICAgcGFyc2VGbG9hdChlbGVtLm9mZnNldFdpZHRoIHx8IDApLFxuICAgIHBhcnNlRmxvYXQoZWxlbS5zY3JvbGxXaWR0aCB8fCAwKVxuICApO1xufTtcblxuLyoqXG4gKiBHZXQgYWN0dWFsIGhlaWdodCBvZiB0aGUgZWxlbWVudCwgcmVnYXJkbGVzcyBvZiBob3cgbXVjaCBvZiBjb250ZW50IGlzIGN1cnJlbnRseSB2aXNpYmxlXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1cbiAqIEByZXR1cm5zIHtJbnRlZ2VyfVxuICovXG5leHBvcnQgY29uc3QgZ2V0RnVsbEhlaWdodCA9IChlbGVtKSA9PiB7XG4gIHJldHVybiBNYXRoLm1heChcbiAgICBwYXJzZUZsb2F0KGVsZW0ubmF0dXJhbEhlaWdodCB8fCAwKSxcbiAgICBwYXJzZUZsb2F0KChlbGVtLmhlaWdodCAmJiBlbGVtLmhlaWdodC5iYXNlVmFsICYmIGVsZW0uaGVpZ2h0LmJhc2VWYWwudmFsdWUpIHx8IDApLFxuICAgIHBhcnNlRmxvYXQoZWxlbS5vZmZzZXRIZWlnaHQgfHwgMCksXG4gICAgcGFyc2VGbG9hdChlbGVtLnNjcm9sbEhlaWdodCB8fCAwKVxuICApO1xufTtcblxuLyoqXG4gKiBDYWxjdWxhdGUgYm91bmRpbmcgc2l6ZSB0byBmaXQgZGltZW5zaW9ucyB3aGlsZSBwcmVzZXJ2aW5nIGFzcGVjdCByYXRpb1xuICogQHBhcmFtIHtOdW1iZXJ9IHNyY1dpZHRoXG4gKiBAcGFyYW0ge051bWJlcn0gc3JjSGVpZ2h0XG4gKiBAcGFyYW0ge051bWJlcn0gbWF4V2lkdGhcbiAqIEBwYXJhbSB7TnVtYmVyfSBtYXhIZWlnaHRcbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKi9cbmV4cG9ydCBjb25zdCBjYWxjdWxhdGVBc3BlY3RSYXRpb0ZpdCA9IChzcmNXaWR0aCwgc3JjSGVpZ2h0LCBtYXhXaWR0aCwgbWF4SGVpZ2h0KSA9PiB7XG4gIGNvbnN0IHJhdGlvID0gTWF0aC5taW4obWF4V2lkdGggLyBzcmNXaWR0aCB8fCAwLCBtYXhIZWlnaHQgLyBzcmNIZWlnaHQpO1xuXG4gIHJldHVybiB7IHdpZHRoOiBzcmNXaWR0aCAqIHJhdGlvIHx8IDAsIGhlaWdodDogc3JjSGVpZ2h0ICogcmF0aW8gfHwgMCB9O1xufTtcbiIsIi8qKlxuICogR2V0IGVsZW1lbnQgY2hpbGQgbm9kZSBhdCB0aGUgZ2l2ZW4gY29vcmRpbmF0ZXNcbiAqIEBwYXJhbSB7RWxlbWVudH0gSFRNTCBlbGVtZW50XG4gKiBAcGFyYW0ge0Zsb2F0fEludGVnZXJ9IHhcbiAqIEBwYXJhbSB7RmxvYXR8SW50ZWdlcn0geVxuICogQHJldHVybnMge05vZGV8Qm9vbGVhbn19XG4gKi9cbmV4cG9ydCBjb25zdCBnZXRUZXh0Tm9kZUZyb21Qb2ludCA9IChlbGVtZW50LCB4LCB5KSA9PiB7XG4gIGNvbnN0IG5vZGVzID0gZWxlbWVudC5jaGlsZE5vZGVzO1xuICBjb25zdCByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IG5vZGUgPSBub2Rlc1tpXTtcblxuICAgIGlmIChub2RlLm5vZGVUeXBlICE9PSBOb2RlLlRFWFRfTk9ERSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgcmFuZ2Uuc2VsZWN0Tm9kZUNvbnRlbnRzKG5vZGUpO1xuXG4gICAgY29uc3QgcmVjdCA9IHJhbmdlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgaWYgKHggPj0gcmVjdC5sZWZ0ICYmIHkgPj0gcmVjdC50b3AgJiYgeCA8PSByZWN0LnJpZ2h0ICYmIHkgPD0gcmVjdC5ib3R0b20pIHtcbiAgICAgIHJldHVybiBub2RlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn07XG4iLCIvKipcbiAqIENoZWNrIHRvIHNlZSBpZiBhbiBvYmplY3QgaXMgYSBwbGFpbiBvYmplY3QgKGNyZWF0ZWQgdXNpbmcgXCJ7fVwiIG9yIFwibmV3IE9iamVjdFwiKS5cbiAqIEBwYXJhbSB7Kn0gb2JqIFZhcmlhYmxlIG9mIGFueSB0eXBlXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqL1xuZXhwb3J0IGNvbnN0IGlzUGxhaW5PYmplY3QgPSAob2JqKSA9PiB7XG4gIHJldHVybiAoXG4gICAgLy8gc2VwYXJhdGUgZnJvbSBwcmltaXRpdmVzXG4gICAgdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiAmJlxuICAgIC8vIGlzIG9idmlvdXNcbiAgICBvYmogIT09IG51bGwgJiZcbiAgICAvLyBzZXBhcmF0ZSBpbnN0YW5jZXMgKEFycmF5LCBET00sIC4uLilcbiAgICBvYmouY29uc3RydWN0b3IgPT09IE9iamVjdCAmJlxuICAgIC8vIHNlcGFyYXRlIGJ1aWxkLWluIGxpa2UgTWF0aFxuICAgIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopID09PSBcIltvYmplY3QgT2JqZWN0XVwiXG4gICk7XG59O1xuIiwiLyoqXG4gKiBDaGVjayBpZiAgZWxlbWVudCBoYXMgc2Nyb2xsYWJsZSBjb250ZW50XG4gKiBAcGFyYW0ge05vZGV9IG5vZGVcbiAqIEByZXR1cm5zIHtCb29sZWFufVxuICovXG5leHBvcnQgY29uc3QgaGFzU2Nyb2xsYmFycyA9IGZ1bmN0aW9uIChub2RlKSB7XG4gIGNvbnN0IG92ZXJmbG93WSA9IGdldENvbXB1dGVkU3R5bGUobm9kZSlbXCJvdmVyZmxvdy15XCJdLFxuICAgIG92ZXJmbG93WCA9IGdldENvbXB1dGVkU3R5bGUobm9kZSlbXCJvdmVyZmxvdy14XCJdLFxuICAgIHZlcnRpY2FsID0gKG92ZXJmbG93WSA9PT0gXCJzY3JvbGxcIiB8fCBvdmVyZmxvd1kgPT09IFwiYXV0b1wiKSAmJiBNYXRoLmFicyhub2RlLnNjcm9sbEhlaWdodCAtIG5vZGUuY2xpZW50SGVpZ2h0KSA+IDEsXG4gICAgaG9yaXpvbnRhbCA9IChvdmVyZmxvd1ggPT09IFwic2Nyb2xsXCIgfHwgb3ZlcmZsb3dYID09PSBcImF1dG9cIikgJiYgTWF0aC5hYnMobm9kZS5zY3JvbGxXaWR0aCAtIG5vZGUuY2xpZW50V2lkdGgpID4gMTtcblxuICByZXR1cm4gdmVydGljYWwgfHwgaG9yaXpvbnRhbDtcbn07XG5cbi8qKlxuICogQ2hlY2sgaWYgZWxlbWVudCBvciBvbmUgb2YgdGhlIHBhcmVudHMgaXMgc2Nyb2xsYWJsZVxuICogQHBhcmFtIHtOb2RlfSBub2RlICBET00gTm9kZSBlbGVtZW50XG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqL1xuZXhwb3J0IGNvbnN0IGlzU2Nyb2xsYWJsZSA9IGZ1bmN0aW9uIChub2RlKSB7XG4gIGlmICghbm9kZSB8fCAhKHR5cGVvZiBub2RlID09PSBcIm9iamVjdFwiICYmIG5vZGUgaW5zdGFuY2VvZiBFbGVtZW50KSB8fCBub2RlID09PSBkb2N1bWVudC5ib2R5KSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKG5vZGUuX19QYW56b29tKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKGhhc1Njcm9sbGJhcnMobm9kZSkpIHtcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuXG4gIHJldHVybiBpc1Njcm9sbGFibGUobm9kZS5wYXJlbnROb2RlKTtcbn07XG4iLCIvKipcbiAqIEFjY2VzcyBuZXN0ZWQgSmF2YVNjcmlwdCBvYmplY3RzIGJ5IHN0cmluZyBwYXRoLlxuICogRXhhbXBsZTogYHJlc29sdmUoXCJhLmIuY1wiLCB7YTp7Yjp7YzpcImRcIn19KWAgd291bGQgcmV0dXJuIGBkYFxuICogQHBhcmFtIHtTdHJpbmd9IHBhdGhcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEByZXR1cm5zIHsqfVxuICovXG5leHBvcnQgY29uc3QgcmVzb2x2ZSA9IGZ1bmN0aW9uIChwYXRoLCBvYmopIHtcbiAgcmV0dXJuIHBhdGguc3BsaXQoXCIuXCIpLnJlZHVjZShmdW5jdGlvbiAocHJldiwgY3Vycikge1xuICAgIHJldHVybiBwcmV2ICYmIHByZXZbY3Vycl07XG4gIH0sIG9iaik7XG59O1xuIiwiLyoqXG4gKiBSb3VuZCBoYWxmIHVwOyB0byBiZSBtb3JlIHNwZWNpZmljIGFuZCB0byBlbnN1cmUgdGhpbmdzIGxpa2UgMS4wMDUgcm91bmQgY29ycmVjdGx5XG4gKiBAcGFyYW0ge0Zsb2F0fSB2YWx1ZVxuICogQHBhcmFtIHtJbnRlZ2VyfSBwcmVjaXNpb25cbiAqIEByZXR1cm5zIHtGbG9hdH1cbiAqL1xuZXhwb3J0IGNvbnN0IHJvdW5kID0gKHZhbHVlLCBwcmVjaXNpb24gPSAxMDAwMCkgPT4ge1xuICB2YWx1ZSA9IHBhcnNlRmxvYXQodmFsdWUpIHx8IDA7XG5cbiAgcmV0dXJuIE1hdGgucm91bmQoKHZhbHVlICsgTnVtYmVyLkVQU0lMT04pICogcHJlY2lzaW9uKSAvIHByZWNpc2lvbjtcbn07XG4iLCJpbXBvcnQgeyBjYW5Vc2VET00gfSBmcm9tIFwiLi9jYW5Vc2VET00uanNcIjtcclxuXHJcbmxldCBwcmV2ZW50U2Nyb2xsU3VwcG9ydGVkID0gbnVsbDtcclxuXHJcbmV4cG9ydCBjb25zdCBGT0NVU0FCTEVfRUxFTUVOVFMgPSBbXHJcbiAgXCJhW2hyZWZdXCIsXHJcbiAgXCJhcmVhW2hyZWZdXCIsXHJcbiAgJ2lucHV0Om5vdChbZGlzYWJsZWRdKTpub3QoW3R5cGU9XCJoaWRkZW5cIl0pOm5vdChbYXJpYS1oaWRkZW5dKScsXHJcbiAgXCJzZWxlY3Q6bm90KFtkaXNhYmxlZF0pOm5vdChbYXJpYS1oaWRkZW5dKVwiLFxyXG4gIFwidGV4dGFyZWE6bm90KFtkaXNhYmxlZF0pOm5vdChbYXJpYS1oaWRkZW5dKVwiLFxyXG4gIFwiYnV0dG9uOm5vdChbZGlzYWJsZWRdKTpub3QoW2FyaWEtaGlkZGVuXSlcIixcclxuICBcImlmcmFtZVwiLFxyXG4gIFwib2JqZWN0XCIsXHJcbiAgXCJlbWJlZFwiLFxyXG4gIFwidmlkZW9cIixcclxuICBcImF1ZGlvXCIsXHJcbiAgXCJbY29udGVudGVkaXRhYmxlXVwiLFxyXG4gICdbdGFiaW5kZXhdOm5vdChbdGFiaW5kZXhePVwiLVwiXSk6bm90KFtkaXNhYmxlZF0pOm5vdChbYXJpYS1oaWRkZW5dKScsXHJcbl07XHJcblxyXG5leHBvcnQgY29uc3Qgc2V0Rm9jdXNPbiA9IChub2RlKSA9PiB7XHJcbiAgaWYgKCFub2RlIHx8ICFjYW5Vc2VET00pIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIGlmIChwcmV2ZW50U2Nyb2xsU3VwcG9ydGVkID09PSBudWxsKSB7XHJcbiAgICBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLmZvY3VzKHtcclxuICAgICAgZ2V0IHByZXZlbnRTY3JvbGwoKSB7XHJcbiAgICAgICAgcHJldmVudFNjcm9sbFN1cHBvcnRlZCA9IHRydWU7XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfSxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgdHJ5IHtcclxuICAgIGlmIChub2RlLnNldEFjdGl2ZSkge1xyXG4gICAgICAvLyBJRS9FZGdlXHJcbiAgICAgIG5vZGUuc2V0QWN0aXZlKCk7XHJcbiAgICB9IGVsc2UgaWYgKHByZXZlbnRTY3JvbGxTdXBwb3J0ZWQpIHtcclxuICAgICAgLy8gTW9kZXJuIGJyb3dzZXJzXHJcbiAgICAgIG5vZGUuZm9jdXMoeyBwcmV2ZW50U2Nyb2xsOiB0cnVlIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gU2FmYXJpIGRvZXMgbm90IHN1cHBvcnQgYHByZXZlbnRTY3JvbGxgIG9wdGlvblxyXG4gICAgICAvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTc4NTgzXHJcblxyXG4gICAgICAvLyBTYXZlIHBvc2l0aW9uXHJcbiAgICAgIGNvbnN0IHNjcm9sbFRvcCA9IHdpbmRvdy5wYWdlWE9mZnNldCB8fCBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcDtcclxuICAgICAgY29uc3Qgc2Nyb2xsTGVmdCA9IHdpbmRvdy5wYWdlWU9mZnNldCB8fCBkb2N1bWVudC5ib2R5LnNjcm9sbExlZnQ7XHJcblxyXG4gICAgICBub2RlLmZvY3VzKCk7XHJcblxyXG4gICAgICBkb2N1bWVudC5ib2R5LnNjcm9sbFRvKHtcclxuICAgICAgICB0b3A6IHNjcm9sbFRvcCxcclxuICAgICAgICBsZWZ0OiBzY3JvbGxMZWZ0LFxyXG4gICAgICAgIGJlaGF2aW9yOiBcImF1dG9cIixcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfSBjYXRjaCAoZSkge31cclxufTtcclxuIiwiLyoqXG4gKiBUaHJvdHRsaW5nIGVuZm9yY2VzIGEgbWF4aW11bSBudW1iZXIgb2YgdGltZXMgYSBmdW5jdGlvbiBjYW4gYmUgY2FsbGVkIG92ZXIgdGltZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBDYWxsYmFjayBmdW5jdGlvblxuICogQHBhcmFtIHtJbnRlZ2VyfSBsaW1pdCBNaWxsaXNlY29uZHNcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xuZXhwb3J0IGNvbnN0IHRocm90dGxlID0gKGZ1bmMsIGxpbWl0KSA9PiB7XG4gIGxldCBsYXN0Q2FsbCA9IDA7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG5cbiAgICBpZiAobm93IC0gbGFzdENhbGwgPCBsaW1pdCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxhc3RDYWxsID0gbm93O1xuXG4gICAgcmV0dXJuIGZ1bmMoLi4uYXJncyk7XG4gIH07XG59O1xuIiwiJChkb2N1bWVudCkub24oJ2NsaWNrIHRvdWNoc3RhcnQnLCAnLmdldG1lYyBsYWJlbCcsIGZ1bmN0aW9uIChlKXtcclxuXHJcblxyXG4gIGNvbnNvbGUubG9nKFwibGFiZWxjbGljay4uXCIpXHJcbiAgJCh0aGlzKS5jbG9zZXN0KFwiLmdldG1lY1wiKS5maW5kKFwibGFiZWxcIikucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgJCh0aGlzKS5hZGRDbGFzcyhcImFjdGl2ZVwiKTtcclxudmFyIGdpZD0kKHRoaXMpLmF0dHIoXCJpZFwiKTtcclxuICAgIGNvbnNvbGUubG9nKGdpZCk7XHJcbiAgICAkKHRoaXMpLmNsb3Nlc3QoXCIuZ2V0Y3JpXCIpLmZpbmQoXCIuZ2V0bWVjb24gLmdldGNjXCIpLmhpZGUoKTtcclxuICAgICQodGhpcykuY2xvc2VzdChcIi5nZXRjcmlcIikuZmluZChcIi5cIitnaWQpLmZhZGVJbig1MDApO1xyXG59KVxyXG5cclxuXHJcblxyXG5cclxuXHJcbmlmICgkKHdpbmRvdykud2lkdGgoKSA8PSAxMDI0KSB7XHJcbiAgJChcIi5leHBsb3JlIC5leHBhYVwiKS5jbGljayhmdW5jdGlvbigpe1xyXG4gICAgLy9ldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAvLyAkKFwiLnQ0cy1wdXNoLW1lbnUtYnRuXCIpLmNsaWNrKCk7XHJcbiAgICAgICAgXHJcbiAgICB9KVxyXG4gICQoJy5leHBsb3JlJykuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgICBjb25zb2xlLmxvZyhcInRlc3RcIik7XHJcbiAgICAgIC8vICQoXCIubXNtZW51MVwiKS5oaWRlKCk7XHJcbiAgICAgICQoJy5leHBsb3JlJykubm90KHRoaXMpLmZpbmQoXCIubXNtZW51MVwiKS5oaWRlKCk7XHJcbiAgICAgICAkKHRoaXMpLmZpbmQoJy5tc21lbnUxJykuZmFkZVRvZ2dsZSg1MDApO1xyXG4gICAgICBcclxuICAgICB9KTtcclxuXHJcbiQod2luZG93KS5jbGljayhmdW5jdGlvbigpIHtcclxuICQoXCIubXNtZW51MVwiKS5oaWRlKCk7XHJcbn0pO1xyXG5cclxuJCgnLmV4cGxvcmUnKS5jbGljayhmdW5jdGlvbihldmVudCl7XHJcbiAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbn0pO1xyXG5cclxuXHJcbiAgXHJcbn1lbHNle1xyXG4kKCcuZXhwbG9yZScpLm1vdXNlZW50ZXIoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgJCh0aGlzKS5maW5kKCcubXNtZW51MScpLmZhZGVJbig1MDApO1xyXG4gICAgICBcclxuICAgICB9KTtcclxuXHJcbiAkKCcuZXhwbG9yZScpLm1vdXNlbGVhdmUoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICQodGhpcykuZmluZCgnLm1zbWVudTEnKS5oaWRlKCk7XHJcbiAgICAgfVxyXG4gKS5tb3VzZWxlYXZlKCk7XHJcblxyXG5cclxufVxyXG5cclxuc2V0VGltZW91dChmdW5jdGlvbigpe1xyXG4gIHZhciBzd2lwZXIgPSBuZXcgU3dpcGVyKCcuc3dpcGVyMScsIHtcclxuICAvLyBEZWZhdWx0IHBhcmFtZXRlcnNcclxuICBzbGlkZXNQZXJWaWV3OiA2LFxyXG4gIHNwYWNlQmV0d2VlbjogMTAsXHJcbiAgYXV0b3BsYXk6IHtcclxuICAgIGRlbGF5OiAyMDAwLFxyXG4gIH0sXHJcbiAgLy8gUmVzcG9uc2l2ZSBicmVha3BvaW50c1xyXG4gIGJyZWFrcG9pbnRzOiB7XHJcbiAgICAvLyB3aGVuIHdpbmRvdyB3aWR0aCBpcyA+PSAzMjBweFxyXG4gICAgMzIwOiB7XHJcbiAgICAgIHNsaWRlc1BlclZpZXc6IDIsXHJcbiAgICAgIHNwYWNlQmV0d2VlbjogMjBcclxuICAgIH0sXHJcbiAgICAvLyB3aGVuIHdpbmRvdyB3aWR0aCBpcyA+PSA0ODBweFxyXG4gICAgNDgwOiB7XHJcbiAgICAgIHNsaWRlc1BlclZpZXc6IDIsXHJcbiAgICAgIHNwYWNlQmV0d2VlbjogMzBcclxuICAgIH0sXHJcbiAgICAvLyB3aGVuIHdpbmRvdyB3aWR0aCBpcyA+PSA2NDBweFxyXG4gICAgNjQwOiB7XHJcbiAgICAgIHNsaWRlc1BlclZpZXc6IDYsXHJcbiAgICAgIHNwYWNlQmV0d2VlbjogNDBcclxuICAgIH1cclxuICB9XHJcbn0pXHJcbn0sIDEwMDApO1xyXG4gIFxyXG5cclxualF1ZXJ5KFwiLmFjY29yZGlvbl9oZWFkXCIpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICBqUXVlcnkoXCIuYWNjb3JkaW9uX2JvZHlcIikuaXMoXCI6dmlzaWJsZVwiKSAmJiAoalF1ZXJ5KFwiLmFjY29yZGlvbl9ib2R5XCIpLnNsaWRlVXAoMzAwKSxcclxuICAgIGpRdWVyeShcIi5wbHVzbWludXNcIikudGV4dChcIitcIikpLFxyXG4gICAgalF1ZXJ5KHRoaXMpLm5leHQoXCIuYWNjb3JkaW9uX2JvZHlcIikuaXMoXCI6dmlzaWJsZVwiKSA/IChqUXVlcnkodGhpcykubmV4dChcIi5hY2NvcmRpb25fYm9keVwiKS5zbGlkZVVwKDMwMCksXHJcbiAgICBqUXVlcnkodGhpcykuY2hpbGRyZW4oXCIucGx1c21pbnVzXCIpLnRleHQoXCIrXCIpLFxyXG4gICAgalF1ZXJ5KHRoaXMpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpKSA6IChqUXVlcnkodGhpcykubmV4dChcIi5hY2NvcmRpb25fYm9keVwiKS5zbGlkZURvd24oMzAwKSxcclxuICAgIGpRdWVyeSh0aGlzKS5jaGlsZHJlbihcIi5wbHVzbWludXNcIikudGV4dChcIi1cIiksXHJcbiAgICBqUXVlcnkodGhpcykuYWRkQ2xhc3MoXCJhY3RpdmVcIikpXHJcbn0pXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbmZ1bmN0aW9uIGdldF9jb2xsKGlkKXtcclxuICAgIHZhciB4eD0ne3twcm9kdWN0LmlkfX0nO1xyXG4gICAgdmFyIHF1ZXJ5PWBxdWVyeSBNeUZpcnN0UXVlcnkge1xyXG4gICAgICAgIHNpdGUge1xyXG4gICAgICAgICAgcHJvZHVjdChlbnRpdHlJZDpgK2lkK2ApeyBcclxuICAgICAgICBcclxuICAgICAgbWV0YWZpZWxkcyhuYW1lc3BhY2U6IFwiY3RfbWV0YWZpZWxkc1wiLCBrZXlzOiBbXCJjb2xwZ1wiXSkge1xyXG4gICAgICAgIGVkZ2VzIHtcclxuICAgICAgICAgIG5vZGUge1xyXG4gICAgICAgICAgICBpZFxyXG4gICAgICAgICAgICBrZXlcclxuICAgICAgICAgICAgdmFsdWVcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaWRcclxuICAgIH1cclxuICB9XHJcbiAgICAgIH1gO1xyXG4gICAgY29uc29sZS5sb2coeHgpO1xyXG4gICAgICBmZXRjaCgnL2dyYXBocWwnLCB7XHJcbiAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgIGNyZWRlbnRpYWxzOiAnc2FtZS1vcmlnaW4nLFxyXG4gICAgaGVhZGVyczoge1xyXG4gICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICAnQXV0aG9yaXphdGlvbic6ICdCZWFyZXIge3sgc2V0dGluZ3Muc3RvcmVmcm9udF9hcGkudG9rZW4gfX0nIC8vIHVzZSBhdXRvLWdlbmVyYXRlZCB0b2tlblxyXG4gICAgfSxcclxuICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgcXVlcnk6IHF1ZXJ5XHJcbiAgICB9KVxyXG4gIH0pXHJcblxyXG4gIC50aGVuKHJlcyA9PiByZXMuanNvbigpKVxyXG4gIC50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgZGF0YSA9PiBkYXRhLmpzb24oKTtcclxuICAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xyXG4gICAgICAgY29uc29sZS5sb2coZGF0YS5kYXRhLnNpdGUucHJvZHVjdC5tZXRhZmllbGRzLmVkZ2VzWzBdLm5vZGUudmFsdWUpXHJcbiAgICAgIHZhciBlZGc9ZGF0YS5kYXRhLnNpdGUucHJvZHVjdC5tZXRhZmllbGRzLmVkZ2VzWzBdLm5vZGUudmFsdWU7XHJcbiAgICAgICB0dD0kLnBhcnNlSlNPTihlZGcpO1xyXG4gICAgICB2YXIgdGl0bGU9dHQuYnVidDtcclxuICAgICAgdmFyIHRjb2xvcj10dC5idWJmYztcclxuICAgICAgdmFyIGJjb2xvcj10dC5idWJiZztcclxuIGNvbnNvbGUubG9nKHRoaXMpO1xyXG5cclxuICB9KSAvLyB3aWxsIGxvZyBKU09OIHJlc3VsdCB0byBicm93c2VyIGNvbnNvbGVcclxuICAuY2F0Y2goZXJyb3IgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xyXG5cclxufVxyXG5cclxuXHJcblxyXG4iLCJpbXBvcnQgc3RhdGVDb3VudHJ5IGZyb20gJy4uL2NvbW1vbi9zdGF0ZS1jb3VudHJ5JztcbmltcG9ydCBub2QgZnJvbSAnLi4vY29tbW9uL25vZCc7XG5pbXBvcnQgdXRpbHMgZnJvbSAnQGJpZ2NvbW1lcmNlL3N0ZW5jaWwtdXRpbHMnO1xuaW1wb3J0IHsgVmFsaWRhdG9ycywgYW5ub3VuY2VJbnB1dEVycm9yTWVzc2FnZSB9IGZyb20gJy4uL2NvbW1vbi91dGlscy9mb3JtLXV0aWxzJztcbmltcG9ydCBjb2xsYXBzaWJsZUZhY3RvcnkgZnJvbSAnLi4vY29tbW9uL2NvbGxhcHNpYmxlJztcbmltcG9ydCB7IHNob3dBbGVydE1vZGFsIH0gZnJvbSAnLi4vZ2xvYmFsL21vZGFsJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2hpcHBpbmdFc3RpbWF0b3Ige1xuICAgIGNvbnN0cnVjdG9yKCRlbGVtZW50LCBzaGlwcGluZ0Vycm9yTWVzc2FnZXMpIHtcbiAgICAgICAgdGhpcy4kZWxlbWVudCA9ICRlbGVtZW50O1xuXG4gICAgICAgIHRoaXMuJHN0YXRlID0gJCgnW2RhdGEtZmllbGQtdHlwZT1cIlN0YXRlXCJdJywgdGhpcy4kZWxlbWVudCk7XG4gICAgICAgIHRoaXMuaXNFc3RpbWF0b3JGb3JtT3BlbmVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc2hpcHBpbmdFcnJvck1lc3NhZ2VzID0gc2hpcHBpbmdFcnJvck1lc3NhZ2VzO1xuICAgICAgICB0aGlzLmluaXRGb3JtVmFsaWRhdGlvbigpO1xuICAgICAgICB0aGlzLmJpbmRTdGF0ZUNvdW50cnlDaGFuZ2UoKTtcbiAgICAgICAgdGhpcy5iaW5kRXN0aW1hdG9yRXZlbnRzKCk7XG4gICAgfVxuXG4gICAgaW5pdEZvcm1WYWxpZGF0aW9uKCkge1xuICAgICAgICBjb25zdCBzaGlwcGluZ0VzdGltYXRvckFsZXJ0ID0gJCgnLnNoaXBwaW5nLXF1b3RlcycpO1xuXG4gICAgICAgIHRoaXMuc2hpcHBpbmdFc3RpbWF0b3IgPSAnZm9ybVtkYXRhLXNoaXBwaW5nLWVzdGltYXRvcl0nO1xuICAgICAgICB0aGlzLnNoaXBwaW5nVmFsaWRhdG9yID0gbm9kKHtcbiAgICAgICAgICAgIHN1Ym1pdDogYCR7dGhpcy5zaGlwcGluZ0VzdGltYXRvcn0gLnNoaXBwaW5nLWVzdGltYXRlLXN1Ym1pdGAsXG4gICAgICAgICAgICB0YXA6IGFubm91bmNlSW5wdXRFcnJvck1lc3NhZ2UsXG4gICAgICAgIH0pO1xuXG4gICAgICAgICQoJy5zaGlwcGluZy1lc3RpbWF0ZS1zdWJtaXQnLCB0aGlzLiRlbGVtZW50KS5vbignY2xpY2snLCBldmVudCA9PiB7XG4gICAgICAgICAgICAvLyBlc3RpbWF0b3IgZXJyb3IgbWVzc2FnZXMgYXJlIGJlaW5nIGluamVjdGVkIGluIGh0bWwgYXMgYSByZXN1bHRcbiAgICAgICAgICAgIC8vIG9mIHVzZXIgc3VibWl0OyBjbGVhcmluZyBhbmQgYWRkaW5nIHJvbGUgb24gc3VibWl0IHByb3ZpZGVzXG4gICAgICAgICAgICAvLyByZWd1bGFyIGFubm91bmNlbWVudCBvZiB0aGVzZSBlcnJvciBtZXNzYWdlc1xuICAgICAgICAgICAgaWYgKHNoaXBwaW5nRXN0aW1hdG9yQWxlcnQuYXR0cigncm9sZScpKSB7XG4gICAgICAgICAgICAgICAgc2hpcHBpbmdFc3RpbWF0b3JBbGVydC5yZW1vdmVBdHRyKCdyb2xlJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNoaXBwaW5nRXN0aW1hdG9yQWxlcnQuYXR0cigncm9sZScsICdhbGVydCcpO1xuICAgICAgICAgICAgLy8gV2hlbiBzd2l0Y2hpbmcgYmV0d2VlbiBjb3VudHJpZXMsIHRoZSBzdGF0ZS9yZWdpb24gaXMgZHluYW1pY1xuICAgICAgICAgICAgLy8gT25seSBwZXJmb3JtIGEgY2hlY2sgZm9yIGFsbCBmaWVsZHMgd2hlbiBjb3VudHJ5IGhhcyBhIHZhbHVlXG4gICAgICAgICAgICAvLyBPdGhlcndpc2UgYXJlQWxsKCd2YWxpZCcpIHdpbGwgY2hlY2sgY291bnRyeSBmb3IgdmFsaWRpdHlcbiAgICAgICAgICAgIGlmICgkKGAke3RoaXMuc2hpcHBpbmdFc3RpbWF0b3J9IHNlbGVjdFtuYW1lPVwic2hpcHBpbmctY291bnRyeVwiXWApLnZhbCgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zaGlwcGluZ1ZhbGlkYXRvci5wZXJmb3JtQ2hlY2soKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMuc2hpcHBpbmdWYWxpZGF0b3IuYXJlQWxsKCd2YWxpZCcpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmJpbmRWYWxpZGF0aW9uKCk7XG4gICAgICAgIHRoaXMuYmluZFN0YXRlVmFsaWRhdGlvbigpO1xuICAgICAgICB0aGlzLmJpbmRVUFNSYXRlcygpO1xuICAgIH1cblxuICAgIGJpbmRWYWxpZGF0aW9uKCkge1xuICAgICAgICB0aGlzLnNoaXBwaW5nVmFsaWRhdG9yLmFkZChbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3I6IGAke3RoaXMuc2hpcHBpbmdFc3RpbWF0b3J9IHNlbGVjdFtuYW1lPVwic2hpcHBpbmctY291bnRyeVwiXWAsXG4gICAgICAgICAgICAgICAgdmFsaWRhdGU6IChjYiwgdmFsKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvdW50cnlJZCA9IE51bWJlcih2YWwpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBjb3VudHJ5SWQgIT09IDAgJiYgIU51bWJlci5pc05hTihjb3VudHJ5SWQpO1xuXG4gICAgICAgICAgICAgICAgICAgIGNiKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2U6IHRoaXMuc2hpcHBpbmdFcnJvck1lc3NhZ2VzLmNvdW50cnksXG4gICAgICAgICAgICB9LFxuICAgICAgICBdKTtcbiAgICB9XG5cbiAgICBiaW5kU3RhdGVWYWxpZGF0aW9uKCkge1xuICAgICAgICB0aGlzLnNoaXBwaW5nVmFsaWRhdG9yLmFkZChbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3I6ICQoYCR7dGhpcy5zaGlwcGluZ0VzdGltYXRvcn0gc2VsZWN0W25hbWU9XCJzaGlwcGluZy1zdGF0ZVwiXWApLFxuICAgICAgICAgICAgICAgIHZhbGlkYXRlOiAoY2IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlc3VsdDtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCAkZWxlID0gJChgJHt0aGlzLnNoaXBwaW5nRXN0aW1hdG9yfSBzZWxlY3RbbmFtZT1cInNoaXBwaW5nLXN0YXRlXCJdYCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCRlbGUubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlbGVWYWwgPSAkZWxlLnZhbCgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBlbGVWYWwgJiYgZWxlVmFsLmxlbmd0aCAmJiBlbGVWYWwgIT09ICdTdGF0ZS9wcm92aW5jZSc7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBjYihyZXN1bHQpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiB0aGlzLnNoaXBwaW5nRXJyb3JNZXNzYWdlcy5wcm92aW5jZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRvZ2dsZSBiZXR3ZWVuIGRlZmF1bHQgc2hpcHBpbmcgYW5kIHVwcyBzaGlwcGluZyByYXRlc1xuICAgICAqL1xuICAgIGJpbmRVUFNSYXRlcygpIHtcbiAgICAgICAgY29uc3QgVVBTUmF0ZVRvZ2dsZSA9ICcuZXN0aW1hdG9yLWZvcm0tdG9nZ2xlVVBTUmF0ZSc7XG5cbiAgICAgICAgJCgnYm9keScpLm9uKCdjbGljaycsIFVQU1JhdGVUb2dnbGUsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgJGVzdGltYXRvckZvcm1VcHMgPSAkKCcuZXN0aW1hdG9yLWZvcm0tLXVwcycpO1xuICAgICAgICAgICAgY29uc3QgJGVzdGltYXRvckZvcm1EZWZhdWx0ID0gJCgnLmVzdGltYXRvci1mb3JtLS1kZWZhdWx0Jyk7XG5cbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgICRlc3RpbWF0b3JGb3JtVXBzLnRvZ2dsZUNsYXNzKCd1LWhpZGRlblZpc3VhbGx5Jyk7XG4gICAgICAgICAgICAkZXN0aW1hdG9yRm9ybURlZmF1bHQudG9nZ2xlQ2xhc3MoJ3UtaGlkZGVuVmlzdWFsbHknKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgYmluZFN0YXRlQ291bnRyeUNoYW5nZSgpIHtcbiAgICAgICAgbGV0ICRsYXN0O1xuXG4gICAgICAgIC8vIFJlcXVlc3RzIHRoZSBzdGF0ZXMgZm9yIGEgY291bnRyeSB3aXRoIEFKQVhcbiAgICAgICAgc3RhdGVDb3VudHJ5KHRoaXMuJHN0YXRlLCB0aGlzLmNvbnRleHQsIHsgdXNlSWRGb3JTdGF0ZXM6IHRydWUgfSwgKGVyciwgZmllbGQpID0+IHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICBzaG93QWxlcnRNb2RhbChlcnIpO1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCAkZmllbGQgPSAkKGZpZWxkKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuc2hpcHBpbmdWYWxpZGF0b3IuZ2V0U3RhdHVzKHRoaXMuJHN0YXRlKSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNoaXBwaW5nVmFsaWRhdG9yLnJlbW92ZSh0aGlzLiRzdGF0ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICgkbGFzdCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2hpcHBpbmdWYWxpZGF0b3IucmVtb3ZlKCRsYXN0KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCRmaWVsZC5pcygnc2VsZWN0JykpIHtcbiAgICAgICAgICAgICAgICAkbGFzdCA9IGZpZWxkO1xuICAgICAgICAgICAgICAgIHRoaXMuYmluZFN0YXRlVmFsaWRhdGlvbigpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkZmllbGQuYXR0cigncGxhY2Vob2xkZXInLCAnU3RhdGUvcHJvdmluY2UnKTtcbiAgICAgICAgICAgICAgICBWYWxpZGF0b3JzLmNsZWFuVXBTdGF0ZVZhbGlkYXRpb24oZmllbGQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBXaGVuIHlvdSBjaGFuZ2UgYSBjb3VudHJ5LCB5b3Ugc3dhcCB0aGUgc3RhdGUvcHJvdmluY2UgYmV0d2VlbiBhbiBpbnB1dCBhbmQgYSBzZWxlY3QgZHJvcGRvd25cbiAgICAgICAgICAgIC8vIE5vdCBhbGwgY291bnRyaWVzIHJlcXVpcmUgdGhlIHByb3ZpbmNlIHRvIGJlIGZpbGxlZFxuICAgICAgICAgICAgLy8gV2UgaGF2ZSB0byByZW1vdmUgdGhpcyBjbGFzcyB3aGVuIHdlIHN3YXAgc2luY2Ugbm9kIHZhbGlkYXRpb24gZG9lc24ndCBjbGVhbnVwIGZvciB1c1xuICAgICAgICAgICAgJCh0aGlzLnNoaXBwaW5nRXN0aW1hdG9yKS5maW5kKCcuZm9ybS1maWVsZC0tc3VjY2VzcycpLnJlbW92ZUNsYXNzKCdmb3JtLWZpZWxkLS1zdWNjZXNzJyk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHRvZ2dsZUVzdGltYXRvckZvcm1TdGF0ZSh0b2dnbGVCdXR0b24sIGJ1dHRvblNlbGVjdG9yLCAkdG9nZ2xlQ29udGFpbmVyKSB7XG4gICAgICAgIGNvbnN0IGNoYW5nZUF0dHJpYnV0ZXNPblRvZ2dsZSA9IChzZWxlY3RvclRvQWN0aXZhdGUpID0+IHtcbiAgICAgICAgICAgICQodG9nZ2xlQnV0dG9uKS5hdHRyKCdhcmlhLWxhYmVsbGVkYnknLCBzZWxlY3RvclRvQWN0aXZhdGUpO1xuICAgICAgICAgICAgJChidXR0b25TZWxlY3RvcikudGV4dCgkKGAjJHtzZWxlY3RvclRvQWN0aXZhdGV9YCkudGV4dCgpKTtcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoIXRoaXMuaXNFc3RpbWF0b3JGb3JtT3BlbmVkKSB7XG4gICAgICAgICAgICBjaGFuZ2VBdHRyaWJ1dGVzT25Ub2dnbGUoJ2VzdGltYXRvci1jbG9zZScpO1xuICAgICAgICAgICAgJHRvZ2dsZUNvbnRhaW5lci5yZW1vdmVDbGFzcygndS1oaWRkZW4nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNoYW5nZUF0dHJpYnV0ZXNPblRvZ2dsZSgnZXN0aW1hdG9yLWFkZCcpO1xuICAgICAgICAgICAgJHRvZ2dsZUNvbnRhaW5lci5hZGRDbGFzcygndS1oaWRkZW4nKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmlzRXN0aW1hdG9yRm9ybU9wZW5lZCA9ICF0aGlzLmlzRXN0aW1hdG9yRm9ybU9wZW5lZDtcbiAgICB9XG5cbiAgICBiaW5kRXN0aW1hdG9yRXZlbnRzKCkge1xuICAgICAgICBjb25zdCAkZXN0aW1hdG9yQ29udGFpbmVyID0gJCgnLnNoaXBwaW5nLWVzdGltYXRvcicpO1xuICAgICAgICBjb25zdCAkZXN0aW1hdG9yRm9ybSA9ICQoJy5lc3RpbWF0b3ItZm9ybScpO1xuICAgICAgICBjb2xsYXBzaWJsZUZhY3RvcnkoKTtcbiAgICAgICAgJGVzdGltYXRvckZvcm0ub24oJ3N1Ym1pdCcsIGV2ZW50ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICBjb3VudHJ5X2lkOiAkKCdbbmFtZT1cInNoaXBwaW5nLWNvdW50cnlcIl0nLCAkZXN0aW1hdG9yRm9ybSkudmFsKCksXG4gICAgICAgICAgICAgICAgc3RhdGVfaWQ6ICQoJ1tuYW1lPVwic2hpcHBpbmctc3RhdGVcIl0nLCAkZXN0aW1hdG9yRm9ybSkudmFsKCksXG4gICAgICAgICAgICAgICAgY2l0eTogJCgnW25hbWU9XCJzaGlwcGluZy1jaXR5XCJdJywgJGVzdGltYXRvckZvcm0pLnZhbCgpLFxuICAgICAgICAgICAgICAgIHppcF9jb2RlOiAkKCdbbmFtZT1cInNoaXBwaW5nLXppcFwiXScsICRlc3RpbWF0b3JGb3JtKS52YWwoKSxcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgIHV0aWxzLmFwaS5jYXJ0LmdldFNoaXBwaW5nUXVvdGVzKHBhcmFtcywgJ2NhcnQvc2hpcHBpbmctcXVvdGVzJywgKGVyciwgcmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgICAgICAkKCcuc2hpcHBpbmctcXVvdGVzJykuaHRtbChyZXNwb25zZS5jb250ZW50KTtcblxuICAgICAgICAgICAgICAgIC8vIGJpbmQgdGhlIHNlbGVjdCBidXR0b25cbiAgICAgICAgICAgICAgICAkKCcuc2VsZWN0LXNoaXBwaW5nLXF1b3RlJykub24oJ2NsaWNrJywgY2xpY2tFdmVudCA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHF1b3RlSWQgPSAkKCcuc2hpcHBpbmctcXVvdGU6Y2hlY2tlZCcpLnZhbCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIGNsaWNrRXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgICAgICAgICB1dGlscy5hcGkuY2FydC5zdWJtaXRTaGlwcGluZ1F1b3RlKHF1b3RlSWQsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJCgnLnNoaXBwaW5nLWVzdGltYXRlLXNob3cnKS5vbignY2xpY2snLCBldmVudCA9PiB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgdGhpcy50b2dnbGVFc3RpbWF0b3JGb3JtU3RhdGUoZXZlbnQuY3VycmVudFRhcmdldCwgJy5zaGlwcGluZy1lc3RpbWF0ZS1zaG93X19idG4tbmFtZScsICRlc3RpbWF0b3JDb250YWluZXIpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4iLCJleHBvcnQgY29uc3QgYXJpYUtleUNvZGVzID0ge1xuICAgIFJFVFVSTjogMTMsXG4gICAgU1BBQ0U6IDMyLFxuICAgIExFRlQ6IDM3LFxuICAgIFVQOiAzOCxcbiAgICBSSUdIVDogMzksXG4gICAgRE9XTjogNDAsXG59O1xuIiwiZXhwb3J0IHsgZGVmYXVsdCBhcyBpbml0UmFkaW9PcHRpb25zIH0gZnJvbSAnLi9yYWRpb09wdGlvbnMnO1xuIiwiaW1wb3J0IHsgYXJpYUtleUNvZGVzIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuXG5jb25zdCBzZXRDaGVja2VkUmFkaW9JdGVtID0gKGl0ZW1Db2xsZWN0aW9uLCBpdGVtSWR4KSA9PiB7XG4gICAgaXRlbUNvbGxlY3Rpb24uZWFjaCgoaWR4LCBpdGVtKSA9PiB7XG4gICAgICAgIGNvbnN0ICRpdGVtID0gJChpdGVtKTtcbiAgICAgICAgaWYgKGlkeCAhPT0gaXRlbUlkeCkge1xuICAgICAgICAgICAgJGl0ZW0uYXR0cignYXJpYS1jaGVja2VkJywgZmFsc2UpLnByb3AoJ2NoZWNrZWQnLCBmYWxzZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAkaXRlbS5hdHRyKCdhcmlhLWNoZWNrZWQnLCB0cnVlKS5wcm9wKCdjaGVja2VkJywgdHJ1ZSkuZm9jdXMoKTtcbiAgICAgICAgJGl0ZW0udHJpZ2dlcignY2hhbmdlJyk7XG4gICAgfSk7XG59O1xuXG5jb25zdCBjYWxjdWxhdGVUYXJnZXRJdGVtUG9zaXRpb24gPSAobGFzdEl0ZW1JZHgsIGN1cnJlbnRJZHgpID0+IHtcbiAgICBzd2l0Y2ggKHRydWUpIHtcbiAgICBjYXNlIGN1cnJlbnRJZHggPiBsYXN0SXRlbUlkeDogcmV0dXJuIDA7XG4gICAgY2FzZSBjdXJyZW50SWR4IDwgMDogcmV0dXJuIGxhc3RJdGVtSWR4O1xuICAgIGRlZmF1bHQ6IHJldHVybiBjdXJyZW50SWR4O1xuICAgIH1cbn07XG5cbmNvbnN0IGhhbmRsZUl0ZW1LZXlEb3duID0gaXRlbUNvbGxlY3Rpb24gPT4gZSA9PiB7XG4gICAgY29uc3QgeyBrZXlDb2RlIH0gPSBlO1xuICAgIGNvbnN0IGl0ZW1JZHggPSBpdGVtQ29sbGVjdGlvbi5pbmRleChlLmN1cnJlbnRUYXJnZXQpO1xuICAgIGNvbnN0IGxhc3RDb2xsZWN0aW9uSXRlbUlkeCA9IGl0ZW1Db2xsZWN0aW9uLmxlbmd0aCAtIDE7XG5cbiAgICBpZiAoT2JqZWN0LnZhbHVlcyhhcmlhS2V5Q29kZXMpLmluY2x1ZGVzKGtleUNvZGUpKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKGtleUNvZGUpIHtcbiAgICBjYXNlIGFyaWFLZXlDb2Rlcy5MRUZUOlxuICAgIGNhc2UgYXJpYUtleUNvZGVzLlVQOiB7XG4gICAgICAgIGNvbnN0IHByZXZJdGVtSWR4ID0gY2FsY3VsYXRlVGFyZ2V0SXRlbVBvc2l0aW9uKGxhc3RDb2xsZWN0aW9uSXRlbUlkeCwgaXRlbUlkeCAtIDEpO1xuICAgICAgICBpdGVtQ29sbGVjdGlvbi5nZXQocHJldkl0ZW1JZHgpLmZvY3VzKCk7XG4gICAgICAgIHNldENoZWNrZWRSYWRpb0l0ZW0oaXRlbUNvbGxlY3Rpb24sIGl0ZW1JZHggLSAxKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgYXJpYUtleUNvZGVzLlJJR0hUOlxuICAgIGNhc2UgYXJpYUtleUNvZGVzLkRPV046IHtcbiAgICAgICAgY29uc3QgbmV4dEl0ZW1JZHggPSBjYWxjdWxhdGVUYXJnZXRJdGVtUG9zaXRpb24obGFzdENvbGxlY3Rpb25JdGVtSWR4LCBpdGVtSWR4ICsgMSk7XG4gICAgICAgIGl0ZW1Db2xsZWN0aW9uLmdldChuZXh0SXRlbUlkeCkuZm9jdXMoKTtcbiAgICAgICAgc2V0Q2hlY2tlZFJhZGlvSXRlbShpdGVtQ29sbGVjdGlvbiwgaXRlbUlkeCArIDEpO1xuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICBkZWZhdWx0OiBicmVhaztcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCAoJGNvbnRhaW5lciwgaXRlbVNlbGVjdG9yKSA9PiB7XG4gICAgY29uc3QgJGl0ZW1Db2xsZWN0aW9uID0gJGNvbnRhaW5lci5maW5kKGl0ZW1TZWxlY3Rvcik7XG5cbiAgICAkY29udGFpbmVyLm9uKCdrZXlkb3duJywgaXRlbVNlbGVjdG9yLCBoYW5kbGVJdGVtS2V5RG93bigkaXRlbUNvbGxlY3Rpb24pKTtcbn07XG4iLCJleHBvcnQgY29uc3QgRk9DVVNBQkxFX0VMRU1FTlRTX1NFTEVDVE9SID0gJ1tocmVmXSwgYnV0dG9uLCBpbnB1dCwgdGV4dGFyZWEsIHNlbGVjdCwgZGV0YWlscywgW2NvbnRlbnRlZGl0YWJsZT1cInRydWVcIl0sIFt0YWJpbmRleF0nO1xuIiwiaW1wb3J0ICdzbGljay1jYXJvdXNlbCc7XG5cbmltcG9ydCB7XG4gICAgYWN0aXZhdGVQbGF5UGF1c2VCdXR0b24sXG4gICAgYW5hbGl6ZVNsaWRlcyxcbiAgICBhcnJvd0FyaWFMYWJsaW5nLFxuICAgIGRvdHNTZXR1cCxcbiAgICBnZXRBY3RpdmVTbGlkZUlkeEFuZFNsaWRlc1F1YW50aXR5LFxuICAgIGhhbmRsZUltYWdlQXNwZWN0UmF0aW8sXG4gICAgaGFuZGxlSW1hZ2VMb2FkLFxuICAgIHJlZnJlc2hGb2N1cyxcbiAgICB1cGRhdGVUZXh0V2l0aExpdmVEYXRhLFxufSBmcm9tICcuL3V0aWxzJztcblxuZXhwb3J0IGNvbnN0IHNldENhcm91c2VsU3RhdGUgPSAoeyBkZWxlZ2F0ZVRhcmdldCB9LCBjYXJvdXNlbE9iaikgPT4ge1xuICAgIGNvbnN0IGNhcm91c2VsT2JqQ3VycmVudCA9IGNhcm91c2VsT2JqIHx8IGRlbGVnYXRlVGFyZ2V0LnNsaWNrO1xuICAgIGNvbnN0IHsgJHNsaWRlciB9ID0gY2Fyb3VzZWxPYmpDdXJyZW50O1xuXG4gICAgJHNsaWRlci5kYXRhKCdzdGF0ZScsIGdldEFjdGl2ZVNsaWRlSWR4QW5kU2xpZGVzUXVhbnRpdHkoY2Fyb3VzZWxPYmpDdXJyZW50KSk7XG59O1xuXG5leHBvcnQgY29uc3Qgb25Vc2VyQ2Fyb3VzZWxDaGFuZ2UgPSAoeyBkYXRhIH0sIGNvbnRleHQsICRzbGlkZXIpID0+IHtcbiAgICBjb25zdCAkYWN0aXZlU2xpZGVyID0gJHNsaWRlciB8fCBkYXRhO1xuICAgIGNvbnN0ICRwYXJlbnRDb250YWluZXIgPSAkYWN0aXZlU2xpZGVyLmhhc0NsYXNzKCdwcm9kdWN0Vmlldy10aHVtYm5haWxzJykgPyAkYWN0aXZlU2xpZGVyLnBhcmVudCgnLnByb2R1Y3RWaWV3LWltYWdlcycpIDogJGFjdGl2ZVNsaWRlcjtcbiAgICBjb25zdCB7IGFjdGl2ZVNsaWRlSWR4LCBzbGlkZXNRdWFudGl0eSB9ID0gJGFjdGl2ZVNsaWRlci5kYXRhKCdzdGF0ZScpO1xuICAgIGNvbnN0ICRjYXJvdXNlbENvbnRlbnRFbGVtZW50ID0gJCgnW2RhdGEtY2Fyb3VzZWwtY29udGVudC1jaGFuZ2UtbWVzc2FnZV0nLCAkcGFyZW50Q29udGFpbmVyKTtcbiAgICBjb25zdCBjYXJvdXNlbENvbnRlbnRBbm5vdW5jZU1lc3NhZ2UgPSB1cGRhdGVUZXh0V2l0aExpdmVEYXRhKGNvbnRleHQuY2Fyb3VzZWxDb250ZW50QW5ub3VuY2VNZXNzYWdlLCAoYWN0aXZlU2xpZGVJZHggKyAxKSwgc2xpZGVzUXVhbnRpdHkpO1xuXG4gICAgJGNhcm91c2VsQ29udGVudEVsZW1lbnQudGV4dChjYXJvdXNlbENvbnRlbnRBbm5vdW5jZU1lc3NhZ2UpO1xufTtcblxuZXhwb3J0IGNvbnN0IG9uU2xpY2tDYXJvdXNlbENoYW5nZSA9IChlLCBjYXJvdXNlbE9iaiwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgICAgJGRvdHMsXG4gICAgICAgICRzbGlkZXIsXG4gICAgICAgICRwcmV2QXJyb3csXG4gICAgICAgICRuZXh0QXJyb3csXG4gICAgICAgIG9wdGlvbnM6IHsgaW5maW5pdGUgfSxcbiAgICB9ID0gY2Fyb3VzZWxPYmo7XG5cbiAgICBjb25zdCB7IGFjdGl2ZVNsaWRlSWR4LCBzbGlkZXNRdWFudGl0eSB9ID0gJHNsaWRlci5kYXRhKCdzdGF0ZScpIHx8IGdldEFjdGl2ZVNsaWRlSWR4QW5kU2xpZGVzUXVhbnRpdHkoY2Fyb3VzZWxPYmopO1xuXG4gICAgZG90c1NldHVwKCRkb3RzLCBhY3RpdmVTbGlkZUlkeCwgc2xpZGVzUXVhbnRpdHksIGNvbnRleHQpO1xuICAgIGFycm93QXJpYUxhYmxpbmcoJHByZXZBcnJvdywgJG5leHRBcnJvdywgYWN0aXZlU2xpZGVJZHgsIHNsaWRlc1F1YW50aXR5LCBpbmZpbml0ZSwgY29udGV4dC5jYXJvdXNlbEFycm93QW5kRG90QXJpYUxhYmVsKTtcbiAgICBhbmFsaXplU2xpZGVzKCRzbGlkZXIuZmluZCgnLnNsaWNrLXNsaWRlJykpO1xuICAgIHJlZnJlc2hGb2N1cygkcHJldkFycm93LCAkbmV4dEFycm93LCAkZG90cywgJHNsaWRlciwgYWN0aXZlU2xpZGVJZHgsIHNsaWRlc1F1YW50aXR5LCBpbmZpbml0ZSk7XG5cbiAgICAkc2xpZGVyLmRhdGEoJ3N0YXRlJywgbnVsbCk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICQoJ1tkYXRhLXNsaWNrXScpLmVhY2goKGlkeCwgY2Fyb3VzZWwpID0+IHtcbiAgICAgICAgLy8gZ2V0dGluZyBlbGVtZW50IHVzaW5nIGZpbmQgdG8gcGFzcyBqZXN0IHRlc3RcbiAgICAgICAgY29uc3QgJGNhcm91c2VsID0gJChkb2N1bWVudCkuZmluZChjYXJvdXNlbCk7XG5cbiAgICAgICAgJGNhcm91c2VsLm9uKCdpbml0IGJyZWFrcG9pbnQgc3dpcGUnLCBzZXRDYXJvdXNlbFN0YXRlKTtcbiAgICAgICAgJGNhcm91c2VsLm9uKCdjbGljaycsICcuc2xpY2stYXJyb3csIC5zbGljay1kb3RzJywgc2V0Q2Fyb3VzZWxTdGF0ZSk7XG5cbiAgICAgICAgJGNhcm91c2VsLm9uKCdpbml0IGJyZWFrcG9pbnQnLCAoZSwgY2Fyb3VzZWxPYmopID0+IGFjdGl2YXRlUGxheVBhdXNlQnV0dG9uKGUsIGNhcm91c2VsT2JqLCBjb250ZXh0KSk7XG4gICAgICAgICRjYXJvdXNlbC5vbignaW5pdCBhZnRlckNoYW5nZScsIChlLCBjYXJvdXNlbE9iaikgPT4gb25TbGlja0Nhcm91c2VsQ2hhbmdlKGUsIGNhcm91c2VsT2JqLCBjb250ZXh0KSk7XG4gICAgICAgICRjYXJvdXNlbC5vbignY2xpY2snLCAnLnNsaWNrLWFycm93LCAuc2xpY2stZG90cycsICRjYXJvdXNlbCwgZSA9PiBvblVzZXJDYXJvdXNlbENoYW5nZShlLCBjb250ZXh0KSk7XG4gICAgICAgICRjYXJvdXNlbC5vbignc3dpcGUnLCAoZSwgY2Fyb3VzZWxPYmopID0+IG9uVXNlckNhcm91c2VsQ2hhbmdlKGUsIGNvbnRleHQsIGNhcm91c2VsT2JqLiRzbGlkZXIpKTtcblxuICAgICAgICBpZiAoJGNhcm91c2VsLmhhc0NsYXNzKCdoZXJvQ2Fyb3VzZWwnKSkge1xuICAgICAgICAgICAgJGNhcm91c2VsLm9uKCdpbml0IGFmdGVyQ2hhbmdlJywgaGFuZGxlSW1hZ2VMb2FkKTtcbiAgICAgICAgICAgICRjYXJvdXNlbC5vbignc3dpcGUnLCBoYW5kbGVJbWFnZUFzcGVjdFJhdGlvKTtcbiAgICAgICAgICAgICRjYXJvdXNlbC5vbignY2xpY2snLCAnLnNsaWNrLWFycm93LCAuc2xpY2stZG90cycsIGhhbmRsZUltYWdlQXNwZWN0UmF0aW8pO1xuXG4gICAgICAgICAgICAvLyBBbHRlcm5hdGl2ZSBpbWFnZSBzdHlsaW5nIGZvciBJRSwgd2hpY2ggZG9lc24ndCBzdXBwb3J0IG9iamVjdGZpdFxuICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUub2JqZWN0Rml0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICRjYXJvdXNlbC5maW5kKCcuaGVyb0Nhcm91c2VsLXNsaWRlJykuZWFjaCgoaW5kZXgsIHNsaWRlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICQoc2xpZGUpLmFkZENsYXNzKCdjb21wYXQtb2JqZWN0LWZpdCcpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgaXNNdWx0aXBsZVNsaWRlcyA9ICRjYXJvdXNlbC5jaGlsZHJlbigpLmxlbmd0aCA+IDE7XG5cbiAgICAgICAgaWYgKCRjYXJvdXNlbC5oYXNDbGFzcygnaGVyb0Nhcm91c2VsJykgfHwgJGNhcm91c2VsLmhhc0NsYXNzKCdwcm9kdWN0Vmlldy1uYXYtbW9iaWxlJykpIHtcbiAgICAgICAgICAgIGNvbnN0IGN1c3RvbVBhZ2luZyA9IGlzTXVsdGlwbGVTbGlkZXNcbiAgICAgICAgICAgICAgICA/IChzbGljaywgaW5kZXgpID0+IChcbiAgICAgICAgICAgICAgICAgICAgJzxidXR0b24gZGF0YS1jYXJvdXNlbC1kb3QgdHlwZT1cImJ1dHRvblwiPjxzcGFuPicrIChpbmRleCArIDEpKyAnPC9zcGFuPjxzcGFuIGRhdGEtZG90cy10b3RhbHM+fDwvc3Bhbj48c3Bhbj4nKyBzbGljay5zbGlkZUNvdW50ICsnPC9zcGFuPjwvYnV0dG9uPidcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgOiAoKSA9PiB7fTtcblxuICAgICAgICAgICAgJGNhcm91c2VsLnNsaWNrKHtcbiAgICAgICAgICAgICAgICBhY2Nlc3NpYmlsaXR5OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBhcnJvd3M6IGlzTXVsdGlwbGVTbGlkZXMsXG4gICAgICAgICAgICAgICAgY3VzdG9tUGFnaW5nLFxuICAgICAgICAgICAgICAgIGRvdHM6IGlzTXVsdGlwbGVTbGlkZXMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNle1xuICAgICAgICAgICAgY29uc3QgY3VzdG9tUGFnaW5nID0gaXNNdWx0aXBsZVNsaWRlc1xuICAgICAgICAgICAgICAgID8gKCkgPT4gKFxuICAgICAgICAgICAgICAgICAgICAnPGJ1dHRvbiBkYXRhLWNhcm91c2VsLWRvdCB0eXBlPVwiYnV0dG9uXCI+PC9idXR0b24+J1xuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICA6ICgpID0+IHt9O1xuXG4gICAgICAgICAgICAkY2Fyb3VzZWwuc2xpY2soe1xuICAgICAgICAgICAgICAgIGFjY2Vzc2liaWxpdHk6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGFycm93czogaXNNdWx0aXBsZVNsaWRlcyxcbiAgICAgICAgICAgICAgICBjdXN0b21QYWdpbmcsXG4gICAgICAgICAgICAgICAgZG90czogaXNNdWx0aXBsZVNsaWRlcyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG59XG4iLCJpbXBvcnQgeyB0aHJvdHRsZSB9IGZyb20gJ2xvZGFzaCc7XG5cbmNvbnN0IFBMQVlfQUNUSU9OID0gJ3NsaWNrUGxheSc7XG5jb25zdCBQQVVTRV9BQ1RJT04gPSAnc2xpY2tQYXVzZSc7XG5jb25zdCB1cGRhdGVCdXR0b25MYWJlbHMgPSAoY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgICAgY2Fyb3VzZWxQbGF5UGF1c2VCdXR0b25QbGF5LFxuICAgICAgICBjYXJvdXNlbFBsYXlQYXVzZUJ1dHRvblBhdXNlLFxuICAgICAgICBjYXJvdXNlbFBsYXlQYXVzZUJ1dHRvbkFyaWFQbGF5LFxuICAgICAgICBjYXJvdXNlbFBsYXlQYXVzZUJ1dHRvbkFyaWFQYXVzZSxcbiAgICB9ID0gY29udGV4dDtcblxuICAgIHJldHVybiAoJGJ1dHRvbiwgYWN0aW9uKSA9PiB7XG4gICAgICAgICRidXR0b25cbiAgICAgICAgICAgIC50ZXh0KGFjdGlvbiA9PT0gUExBWV9BQ1RJT05cbiAgICAgICAgICAgICAgICA/IGNhcm91c2VsUGxheVBhdXNlQnV0dG9uUGF1c2UgOiBjYXJvdXNlbFBsYXlQYXVzZUJ1dHRvblBsYXkpXG4gICAgICAgICAgICAuYXR0cignYXJpYS1sYWJlbCcsIGFjdGlvbiA9PT0gUExBWV9BQ1RJT05cbiAgICAgICAgICAgICAgICA/IGNhcm91c2VsUGxheVBhdXNlQnV0dG9uQXJpYVBhdXNlIDogY2Fyb3VzZWxQbGF5UGF1c2VCdXR0b25BcmlhUGxheSk7XG4gICAgfTtcbn07XG5sZXQgdXBkYXRlQnV0dG9uTGFiZWxzV2l0aENvbnRleHQ7XG5cbmV4cG9ydCBkZWZhdWx0IChlLCBjYXJvdXNlbE9iaiwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHsgJHNsaWRlciwgJGRvdHMsIG9wdGlvbnM6IHsgc3BlZWQgfSB9ID0gY2Fyb3VzZWxPYmo7XG4gICAgY29uc3QgJHBsYXlQYXVzZUJ1dHRvbiA9ICRzbGlkZXIuZmluZCgnW2RhdGEtcGxheS1wYXVzZS1idXR0b25dJyk7XG5cbiAgICBpZiAoJHBsYXlQYXVzZUJ1dHRvbi5sZW5ndGggPT09IDApIHJldHVybjtcblxuICAgIC8vIGZvciBjb3JyZWN0IGNhcm91c2VsIGNvbnRyb2xzIGZvY3VzIG9yZGVyXG4gICAgaWYgKCRkb3RzKSB7XG4gICAgICAgICRwbGF5UGF1c2VCdXR0b24uaW5zZXJ0QmVmb3JlKCRkb3RzKTtcbiAgICB9IGVsc2UgJHNsaWRlci5hcHBlbmQoJHBsYXlQYXVzZUJ1dHRvbik7XG5cbiAgICBjb25zdCB7IHNsaWRlc1F1YW50aXR5IH0gPSAkc2xpZGVyLmRhdGEoJ3N0YXRlJyk7XG4gICAgJHBsYXlQYXVzZUJ1dHRvbi5jc3MoJ2Rpc3BsYXknLCBzbGlkZXNRdWFudGl0eSA+IDEgPyAnYmxvY2snIDogJ25vbmUnKTtcblxuICAgIGlmIChlLnR5cGUgPT09ICdpbml0JykgdXBkYXRlQnV0dG9uTGFiZWxzV2l0aENvbnRleHQgPSB1cGRhdGVCdXR0b25MYWJlbHMoY29udGV4dCk7XG5cbiAgICBpZiAoZS50eXBlID09PSAnYnJlYWtwb2ludCcpIHtcbiAgICAgICAgdXBkYXRlQnV0dG9uTGFiZWxzV2l0aENvbnRleHQoJHBsYXlQYXVzZUJ1dHRvbiwgUExBWV9BQ1RJT04pO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qgb25QbGF5UGF1c2VDbGljayA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgYWN0aW9uID0gY2Fyb3VzZWxPYmoucGF1c2VkID8gUExBWV9BQ1RJT04gOiBQQVVTRV9BQ1RJT047XG5cbiAgICAgICAgJHNsaWRlci5zbGljayhhY3Rpb24pO1xuICAgICAgICB1cGRhdGVCdXR0b25MYWJlbHNXaXRoQ29udGV4dCgkcGxheVBhdXNlQnV0dG9uLCBhY3Rpb24pO1xuICAgIH07XG5cbiAgICAkcGxheVBhdXNlQnV0dG9uLm9uKCdjbGljaycsIHRocm90dGxlKG9uUGxheVBhdXNlQ2xpY2ssIHNwZWVkLCB7IHRyYWlsaW5nOiBmYWxzZSB9KSk7XG59O1xuIiwiaW1wb3J0IHsgRk9DVVNBQkxFX0VMRU1FTlRTX1NFTEVDVE9SIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcblxuZXhwb3J0IGRlZmF1bHQgKCRzbGlkZXMpID0+IHtcbiAgICAkc2xpZGVzLmVhY2goKGlkeCwgc2xpZGUpID0+IHtcbiAgICAgICAgY29uc3QgJHNsaWRlID0gJChzbGlkZSk7XG4gICAgICAgIGNvbnN0IHRhYkluZGV4ID0gJHNsaWRlLmhhc0NsYXNzKCdzbGljay1hY3RpdmUnKSA/IDAgOiAtMTtcblxuICAgICAgICBpZiAoJHNsaWRlLmlzKEZPQ1VTQUJMRV9FTEVNRU5UU19TRUxFQ1RPUikpICRzbGlkZS5hdHRyKCd0YWJpbmRleCcsIHRhYkluZGV4KTtcblxuICAgICAgICAkc2xpZGUuZmluZChGT0NVU0FCTEVfRUxFTUVOVFNfU0VMRUNUT1IpLmVhY2goKGluZGV4LCBjaGlsZCkgPT4ge1xuICAgICAgICAgICAgJChjaGlsZCkuYXR0cigndGFiaW5kZXgnLCB0YWJJbmRleCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufTtcbiIsImltcG9ydCB1cGRhdGVUZXh0V2l0aExpdmVEYXRhIGZyb20gJy4vdXBkYXRlVGV4dFdpdGhMaXZlRGF0YSc7XG5pbXBvcnQgdG9vbHRpcFNldHVwIGZyb20gJy4vdG9vbHRpcFNldHVwJztcblxuZXhwb3J0IGRlZmF1bHQgKCRwcmV2QXJyb3csICRuZXh0QXJyb3csIGFjdGl2ZVNsaWRlSWR4LCBzbGlkZXNRdWFudGl0eSwgaXNJbmZpbml0ZSwgYXJpYUxhYmVsKSA9PiB7XG4gICAgaWYgKHNsaWRlc1F1YW50aXR5IDwgMiB8fCAhJHByZXZBcnJvdyB8fCAhJG5leHRBcnJvdykgcmV0dXJuO1xuXG4gICAgY29uc3QgYWN0aXZlU2xpZGVOdW1iZXIgPSBhY3RpdmVTbGlkZUlkeCArIDE7XG5cbiAgICBjb25zdCBwcmV2U2xpZGVOdW1iZXIgPSBhY3RpdmVTbGlkZUlkeCA9PT0gMCA/IHNsaWRlc1F1YW50aXR5IDogYWN0aXZlU2xpZGVOdW1iZXIgLSAxO1xuICAgIGNvbnN0IGFycm93TGVmdFRleHQgPSB1cGRhdGVUZXh0V2l0aExpdmVEYXRhKGFyaWFMYWJlbCwgcHJldlNsaWRlTnVtYmVyLCBzbGlkZXNRdWFudGl0eSk7XG5cbiAgICAkcHJldkFycm93LmF0dHIoe1xuICAgICAgICAnYXJpYS1sYWJlbCc6IGFycm93TGVmdFRleHQsXG4gICAgICAgIHRhYmluZGV4OiAhaXNJbmZpbml0ZSAmJiBhY3RpdmVTbGlkZUlkeCA9PT0gMCA/IC0xIDogMCxcbiAgICB9KTtcbiAgICB0b29sdGlwU2V0dXAoJHByZXZBcnJvdyk7XG5cbiAgICBjb25zdCBuZXh0U2xpZGVOdW1iZXIgPSBhY3RpdmVTbGlkZUlkeCA9PT0gc2xpZGVzUXVhbnRpdHkgLSAxID8gMSA6IGFjdGl2ZVNsaWRlTnVtYmVyICsgMTtcbiAgICBjb25zdCBhcnJvd1JpZ2h0VGV4dCA9IHVwZGF0ZVRleHRXaXRoTGl2ZURhdGEoYXJpYUxhYmVsLCBuZXh0U2xpZGVOdW1iZXIsIHNsaWRlc1F1YW50aXR5KTtcblxuICAgICRuZXh0QXJyb3cuYXR0cih7XG4gICAgICAgICdhcmlhLWxhYmVsJzogYXJyb3dSaWdodFRleHQsXG4gICAgICAgIHRhYmluZGV4OiAhaXNJbmZpbml0ZSAmJiBhY3RpdmVTbGlkZUlkeCA9PT0gc2xpZGVzUXVhbnRpdHkgLSAxID8gLTEgOiAwLFxuICAgIH0pO1xuICAgIHRvb2x0aXBTZXR1cCgkbmV4dEFycm93KTtcbn07XG4iLCJpbXBvcnQgdXBkYXRlVGV4dFdpdGhMaXZlRGF0YSBmcm9tICcuL3VwZGF0ZVRleHRXaXRoTGl2ZURhdGEnO1xuaW1wb3J0IHRvb2x0aXBTZXR1cCBmcm9tICcuL3Rvb2x0aXBTZXR1cCc7XG5cbmV4cG9ydCBkZWZhdWx0ICgkZG90cywgYWN0aXZlU2xpZGVJZHgsIHNsaWRlc1F1YW50aXR5LCB7IGNhcm91c2VsQXJyb3dBbmREb3RBcmlhTGFiZWwsIGNhcm91c2VsQWN0aXZlRG90QXJpYUxhYmVsIH0pID0+IHtcbiAgICBpZiAoISRkb3RzKSByZXR1cm47XG5cbiAgICBpZiAoc2xpZGVzUXVhbnRpdHkgPCAyKSB7XG4gICAgICAgICRkb3RzLmNzcygnZGlzcGxheScsICdub25lJyk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAkZG90cy5jc3MoJ2Rpc3BsYXknLCAnYmxvY2snKTtcblxuICAgICRkb3RzLmNoaWxkcmVuKCkuZWFjaCgoaWR4LCBkb3QpID0+IHtcbiAgICAgICAgY29uc3QgZG90TGFiZWxUZXh0ID0gdXBkYXRlVGV4dFdpdGhMaXZlRGF0YShjYXJvdXNlbEFycm93QW5kRG90QXJpYUxhYmVsLCBpZHggKyAxLCBzbGlkZXNRdWFudGl0eSk7XG4gICAgICAgIGNvbnN0IGRvdFNsaWRlU3RhdHVzVGV4dCA9IGlkeCA9PT0gYWN0aXZlU2xpZGVJZHggPyBgLCAke2Nhcm91c2VsQWN0aXZlRG90QXJpYUxhYmVsfWAgOiAnJztcbiAgICAgICAgY29uc3QgZG90QXJpYUxhYmVsID0gYCR7ZG90TGFiZWxUZXh0fSR7ZG90U2xpZGVTdGF0dXNUZXh0fWA7XG4gICAgICAgIGNvbnN0ICRkb3RCdXR0b24gPSAkKGRvdCkuZmluZCgnW2RhdGEtY2Fyb3VzZWwtZG90XScpO1xuXG4gICAgICAgICQoZG90KS5hdHRyKCdkYXRhLWluZGV4JywgaWR4ICsgMSk7XG4gICAgICAgIHRvb2x0aXBTZXR1cCgkZG90QnV0dG9uLmF0dHIoJ2FyaWEtbGFiZWwnLCBkb3RBcmlhTGFiZWwpKTtcbiAgICB9KTtcbn07XG4iLCJleHBvcnQgZGVmYXVsdCAoeyBzbGlkZUNvdW50LCAkc2xpZGVzLCBvcHRpb25zOiB7IHNsaWRlc1RvU2hvdywgc2xpZGVzVG9TY3JvbGwgfSB9KSA9PiB7XG4gICAgY29uc3QgbGFzdFZpc2libGVJZHggPSAkc2xpZGVzLmdldCgpLnJlZHVjZSgoYWNjLCBjdXJyLCBpZHgpID0+IHtcbiAgICAgICAgaWYgKCQoY3VycikuaGFzQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpKSByZXR1cm4gaWR4O1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgIH0sIC0xKTtcblxuICAgIGNvbnN0IGFjdGl2ZVNsaWRlSWR4ID0gbGFzdFZpc2libGVJZHggPCBzbGlkZXNUb1Nob3dcbiAgICAgICAgPyAwXG4gICAgICAgIDogTWF0aC5jZWlsKChsYXN0VmlzaWJsZUlkeCArIDEgLSBzbGlkZXNUb1Nob3cpIC8gc2xpZGVzVG9TY3JvbGwpO1xuXG4gICAgbGV0IHNsaWRlc1F1YW50aXR5O1xuICAgIGlmIChzbGlkZUNvdW50ID09PSAwKSB7XG4gICAgICAgIHNsaWRlc1F1YW50aXR5ID0gMDtcbiAgICB9IGVsc2UgaWYgKHNsaWRlQ291bnQgPD0gc2xpZGVzVG9TaG93KSB7XG4gICAgICAgIHNsaWRlc1F1YW50aXR5ID0gMTtcbiAgICB9IGVsc2Ugc2xpZGVzUXVhbnRpdHkgPSBNYXRoLmNlaWwoKHNsaWRlQ291bnQgLSBzbGlkZXNUb1Nob3cpIC8gc2xpZGVzVG9TY3JvbGwpICsgMTtcblxuICAgIC8vIEZZSSAtIG9uZSBzbGlkZSBjYW4gY29udGFpbiBzZXZlcmFsIGNhcmQgaXRlbXMgZm9yIHByb2R1Y3QgY2Fyb3VzZWxcbiAgICByZXR1cm4ge1xuICAgICAgICBhY3RpdmVTbGlkZUlkeCxcbiAgICAgICAgc2xpZGVzUXVhbnRpdHksXG4gICAgfTtcbn07XG4iLCJleHBvcnQgZGVmYXVsdCAoeyAkc2xpZGVyIH0sIGlzQW5hbHl6ZWREYXRhQXR0cikgPT4ge1xuICAgIGNvbnN0ICRhY3RpdmVTbGlkZSA9ICRzbGlkZXIuZmluZCgnLnNsaWNrLWN1cnJlbnQnKTtcbiAgICBjb25zdCBpc0FuYWx5emVkU2xpZGUgPSAkYWN0aXZlU2xpZGUuZGF0YShpc0FuYWx5emVkRGF0YUF0dHIpO1xuXG4gICAgaWYgKGlzQW5hbHl6ZWRTbGlkZSkgcmV0dXJuIHsgaXNBbmFseXplZFNsaWRlIH07XG5cbiAgICBjb25zdCAkYWN0aXZlU2xpZGVJbWcgPSAkYWN0aXZlU2xpZGUuZmluZCgnLmhlcm9DYXJvdXNlbC1pbWFnZScpO1xuICAgIGNvbnN0IGFjdGl2ZVNsaWRlSW1nTm9kZSA9ICRhY3RpdmVTbGlkZUltZ1swXTtcblxuICAgIHJldHVybiB7XG4gICAgICAgICRzbGlkZXIsXG4gICAgICAgICRhY3RpdmVTbGlkZSxcbiAgICAgICAgJGFjdGl2ZVNsaWRlSW1nLFxuICAgICAgICBhY3RpdmVTbGlkZUltZ05vZGUsXG4gICAgfTtcbn07XG4iLCJpbXBvcnQgZ2V0QWN0aXZlU2xpZGVJbmZvIGZyb20gJy4vZ2V0QWN0aXZlU2xpZGVJbmZvJztcblxuY29uc3QgSU1BR0VfQ0xBU1NFUyA9IHtcbiAgICB2ZXJ0aWNhbDogJ2lzLXZlcnRpY2FsLWltYWdlLXR5cGUnLFxuICAgIHNxdWFyZTogJ2lzLXNxdWFyZS1pbWFnZS10eXBlJyxcbn07XG5jb25zdCBJU19BTkFMWVpFRF9EQVRBX0FUVFIgPSAnaW1hZ2UtcmF0aW8tYW5hbHl6ZWQnO1xuXG5jb25zdCBkZWZpbmVBc3BlY3RSYXRpb0NsYXNzID0gKGltYWdlQXNwZWN0UmF0aW8pID0+IHtcbiAgICBzd2l0Y2ggKHRydWUpIHtcbiAgICBjYXNlIGltYWdlQXNwZWN0UmF0aW8gPiAwLjggJiYgaW1hZ2VBc3BlY3RSYXRpbyA8PSAxLjI6XG4gICAgICAgIHJldHVybiBJTUFHRV9DTEFTU0VTLnNxdWFyZTtcbiAgICBjYXNlIGltYWdlQXNwZWN0UmF0aW8gPiAxLjI6XG4gICAgICAgIHJldHVybiBJTUFHRV9DTEFTU0VTLnZlcnRpY2FsO1xuICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG59O1xuXG5jb25zdCBzZXRBc3BlY3RSYXRpb0NsYXNzID0gKGltYWdlTm9kZSwgJHNsaWRlcykgPT4ge1xuICAgIGlmIChpbWFnZU5vZGUubmF0dXJhbEhlaWdodCA8PSAxKSByZXR1cm47XG5cbiAgICBjb25zdCBpbWFnZUFzcGVjdFJhdGlvID0gaW1hZ2VOb2RlLm5hdHVyYWxIZWlnaHQgLyBpbWFnZU5vZGUubmF0dXJhbFdpZHRoO1xuICAgICRzbGlkZXMuZWFjaCgoaWR4LCBzbGlkZSkgPT4gJChzbGlkZSkuYWRkQ2xhc3MoZGVmaW5lQXNwZWN0UmF0aW9DbGFzcyhpbWFnZUFzcGVjdFJhdGlvKSkpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgKHsgZGVsZWdhdGVUYXJnZXQgfSwgY2Fyb3VzZWxPYmopID0+IHtcbiAgICBjb25zdCB7XG4gICAgICAgIGlzQW5hbHl6ZWRTbGlkZSxcbiAgICAgICAgJHNsaWRlcixcbiAgICAgICAgJGFjdGl2ZVNsaWRlLFxuICAgICAgICAkYWN0aXZlU2xpZGVJbWcsXG4gICAgICAgIGFjdGl2ZVNsaWRlSW1nTm9kZSxcbiAgICB9ID0gZ2V0QWN0aXZlU2xpZGVJbmZvKGNhcm91c2VsT2JqIHx8IGRlbGVnYXRlVGFyZ2V0LnNsaWNrLCBJU19BTkFMWVpFRF9EQVRBX0FUVFIpO1xuXG4gICAgaWYgKGlzQW5hbHl6ZWRTbGlkZSkgcmV0dXJuO1xuXG4gICAgY29uc3QgJGFjdGl2ZVNsaWRlQW5kQ2xvbmVzID0gJHNsaWRlci5maW5kKGBbZGF0YS1oZXJvLXNsaWRlPSR7JGFjdGl2ZVNsaWRlLmRhdGEoJ2hlcm8tc2xpZGUnKX1dYCk7XG4gICAgJGFjdGl2ZVNsaWRlQW5kQ2xvbmVzLmVhY2goKGlkeCwgc2xpZGUpID0+ICQoc2xpZGUpLmRhdGEoSVNfQU5BTFlaRURfREFUQV9BVFRSLCB0cnVlKSk7XG5cbiAgICBpZiAoJGFjdGl2ZVNsaWRlLmZpbmQoJy5oZXJvQ2Fyb3VzZWwtY29udGVudCcpLmxlbmd0aCkgcmV0dXJuO1xuXG4gICAgaWYgKGFjdGl2ZVNsaWRlSW1nTm9kZS5jb21wbGV0ZSkge1xuICAgICAgICBpZiAoYWN0aXZlU2xpZGVJbWdOb2RlLm5hdHVyYWxIZWlnaHQgPT09IDEpIHtcbiAgICAgICAgICAgIC8vIG9ubHkgYmFzZTY0IGltYWdlIGZyb20gc3Jjc2V0IHdhcyBsb2FkZWRcbiAgICAgICAgICAgICRhY3RpdmVTbGlkZUltZy5vbignbG9hZCcsICgpID0+IHNldEFzcGVjdFJhdGlvQ2xhc3MoYWN0aXZlU2xpZGVJbWdOb2RlLCAkYWN0aXZlU2xpZGVBbmRDbG9uZXMpKTtcbiAgICAgICAgfSBlbHNlIGlmIChhY3RpdmVTbGlkZUltZ05vZGUubmF0dXJhbEhlaWdodCA+IDEpIHtcbiAgICAgICAgICAgIHNldEFzcGVjdFJhdGlvQ2xhc3MoYWN0aXZlU2xpZGVJbWdOb2RlLCAkYWN0aXZlU2xpZGVBbmRDbG9uZXMpO1xuICAgICAgICB9XG4gICAgfSBlbHNlICRhY3RpdmVTbGlkZUltZy5vbignbG9hZCcsICgpID0+IHNldEFzcGVjdFJhdGlvQ2xhc3MoYWN0aXZlU2xpZGVJbWdOb2RlLCAkYWN0aXZlU2xpZGVBbmRDbG9uZXMpKTtcbn07XG4iLCJpbXBvcnQgeyBpc0Jyb3dzZXJJRSB9IGZyb20gJy4uLy4uL3V0aWxzL2llLWhlbHBlcnMnO1xuaW1wb3J0IGdldEFjdGl2ZVNsaWRlSW5mbyBmcm9tICcuL2dldEFjdGl2ZVNsaWRlSW5mbyc7XG5cbmNvbnN0IElNQUdFX0VSUk9SX0NMQVNTID0gJ2lzLWltYWdlLWVycm9yJztcbmNvbnN0IElTX0FOQUxZWkVEX0RBVEFfQVRUUiA9ICdpbWFnZS1sb2FkLWFuYWx5emVkJztcblxuY29uc3QgZ2VuZXJhdGVJbWFnZSA9ICgkc2xpZGUsICRpbWFnZSkgPT4ge1xuICAgICQoJzxpbWcgLz4nKVxuICAgICAgICAub24oJ2Vycm9yJywgKCkgPT4gJHNsaWRlLmFkZENsYXNzKElNQUdFX0VSUk9SX0NMQVNTKSlcbiAgICAgICAgLmF0dHIoJ3NyYycsICRpbWFnZS5hdHRyKCdzcmMnKSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCAoZSwgY2Fyb3VzZWxPYmopID0+IHtcbiAgICBjb25zdCB7XG4gICAgICAgIGlzQW5hbHl6ZWRTbGlkZSxcbiAgICAgICAgJGFjdGl2ZVNsaWRlLFxuICAgICAgICAkYWN0aXZlU2xpZGVJbWcsXG4gICAgICAgIGFjdGl2ZVNsaWRlSW1nTm9kZSxcbiAgICB9ID0gZ2V0QWN0aXZlU2xpZGVJbmZvKGNhcm91c2VsT2JqLCBJU19BTkFMWVpFRF9EQVRBX0FUVFIpO1xuXG4gICAgaWYgKGlzQW5hbHl6ZWRTbGlkZSkgcmV0dXJuO1xuXG4gICAgJGFjdGl2ZVNsaWRlLmRhdGEoSVNfQU5BTFlaRURfREFUQV9BVFRSLCB0cnVlKTtcblxuICAgIGlmIChhY3RpdmVTbGlkZUltZ05vZGUuY29tcGxldGUpIHtcbiAgICAgICAgaWYgKGFjdGl2ZVNsaWRlSW1nTm9kZS5uYXR1cmFsSGVpZ2h0ID09PSAwKSB7XG4gICAgICAgICAgICAkYWN0aXZlU2xpZGUuYWRkQ2xhc3MoSU1BR0VfRVJST1JfQ0xBU1MpO1xuICAgICAgICB9IGVsc2UgaWYgKGFjdGl2ZVNsaWRlSW1nTm9kZS5uYXR1cmFsSGVpZ2h0ID09PSAxKSB7XG4gICAgICAgICAgICAvLyBvbmx5IGJhc2U2NCBpbWFnZSBmcm9tIHNyY3NldCB3YXMgbG9hZGVkXG4gICAgICAgICAgICAkYWN0aXZlU2xpZGVJbWcub24oJ2Vycm9yJywgKCkgPT4gJGFjdGl2ZVNsaWRlLmFkZENsYXNzKElNQUdFX0VSUk9SX0NMQVNTKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCEkYWN0aXZlU2xpZGVJbWcuYXR0cignc3JjJykpIHtcbiAgICAgICAgJGFjdGl2ZVNsaWRlLmFkZENsYXNzKElNQUdFX0VSUk9SX0NMQVNTKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpc0Jyb3dzZXJJRSkge1xuICAgICAgICBnZW5lcmF0ZUltYWdlKCRhY3RpdmVTbGlkZSwgJGFjdGl2ZVNsaWRlSW1nKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgICRhY3RpdmVTbGlkZUltZy5vbignZXJyb3InLCAoKSA9PiAkYWN0aXZlU2xpZGUuYWRkQ2xhc3MoSU1BR0VfRVJST1JfQ0xBU1MpKTtcbn07XG4iLCJleHBvcnQgeyBkZWZhdWx0IGFzIGFjdGl2YXRlUGxheVBhdXNlQnV0dG9uIH0gZnJvbSAnLi9hY3RpdmF0ZVBsYXlQYXVzZUJ1dHRvbic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGFuYWxpemVTbGlkZXMgfSBmcm9tICcuL2FuYWxpemVTbGlkZXMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBhcnJvd0FyaWFMYWJsaW5nIH0gZnJvbSAnLi9hcnJvd0FyaWFMYWJsaW5nJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZG90c1NldHVwIH0gZnJvbSAnLi9kb3RzU2V0dXAnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBnZXRBY3RpdmVTbGlkZUlkeEFuZFNsaWRlc1F1YW50aXR5IH0gZnJvbSAnLi9nZXRBY3RpdmVTbGlkZUlkeEFuZFNsaWRlc1F1YW50aXR5JztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaGFuZGxlSW1hZ2VBc3BlY3RSYXRpbyB9IGZyb20gJy4vaGFuZGxlSW1hZ2VBc3BlY3RSYXRpbyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGhhbmRsZUltYWdlTG9hZCB9IGZyb20gJy4vaGFuZGxlSW1hZ2VMb2FkJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcmVmcmVzaEZvY3VzIH0gZnJvbSAnLi9yZWZyZXNoRm9jdXMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB1cGRhdGVUZXh0V2l0aExpdmVEYXRhIH0gZnJvbSAnLi91cGRhdGVUZXh0V2l0aExpdmVEYXRhJztcbiIsImltcG9ydCB7IEZPQ1VTQUJMRV9FTEVNRU5UU19TRUxFQ1RPUiB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5cbmV4cG9ydCBkZWZhdWx0ICgkcHJldkFycm93LCAkbmV4dEFycm93LCAkZG90cywgJHNsaWRlciwgYWN0aXZlU2xpZGVJZHgsIHNsaWRlc1F1YW50aXR5LCBpc0luZmluaXRlKSA9PiB7XG4gICAgaWYgKGlzSW5maW5pdGUgfHwgISRwcmV2QXJyb3cgfHwgISRuZXh0QXJyb3cpIHJldHVybjtcblxuICAgIGlmIChhY3RpdmVTbGlkZUlkeCA9PT0gMCAmJiAkcHJldkFycm93LmlzKCc6Zm9jdXMnKSkge1xuICAgICAgICAkbmV4dEFycm93LmZvY3VzKCk7XG4gICAgfSBlbHNlIGlmIChhY3RpdmVTbGlkZUlkeCA9PT0gc2xpZGVzUXVhbnRpdHkgLSAxICYmICRuZXh0QXJyb3cuaXMoJzpmb2N1cycpKSB7XG4gICAgICAgIGlmICgkZG90cykge1xuICAgICAgICAgICAgJGRvdHMuY2hpbGRyZW4oKS5maXJzdCgpLmZpbmQoJ1tkYXRhLWNhcm91c2VsLWRvdF0nKS5mb2N1cygpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgJGZpcnN0QWN0aXZlU2xpZGUgPSAkc2xpZGVyLmZpbmQoJy5zbGljay1hY3RpdmUnKS5maXJzdCgpO1xuXG4gICAgICAgIGlmICgkZmlyc3RBY3RpdmVTbGlkZS5pcyhGT0NVU0FCTEVfRUxFTUVOVFNfU0VMRUNUT1IpKSB7XG4gICAgICAgICAgICAkZmlyc3RBY3RpdmVTbGlkZS5mb2N1cygpO1xuICAgICAgICB9IGVsc2UgJGZpcnN0QWN0aXZlU2xpZGUuZmluZChGT0NVU0FCTEVfRUxFTUVOVFNfU0VMRUNUT1IpLmZpcnN0KCkuZm9jdXMoKTtcbiAgICB9XG59O1xuIiwiY29uc3QgVE9PTFRJUF9EQVRBX1NFTEVDVE9SID0gJ2RhdGEtY2Fyb3VzZWwtdG9vbHRpcCc7XG5jb25zdCBUT09MVElQX0NMQVNTID0gJ2Nhcm91c2VsLXRvb2x0aXAnO1xuY29uc3QgVE9PTFRJUF9OT0RFID0gYDxzcGFuICR7VE9PTFRJUF9EQVRBX1NFTEVDVE9SfSBjbGFzcz1cIiR7VE9PTFRJUF9DTEFTU31cIj48L3NwYW4+YDtcblxuZXhwb3J0IGRlZmF1bHQgKCRub2RlKSA9PiB7XG4gICAgY29uc3QgJGV4aXN0ZWRUb29sdGlwID0gJG5vZGUuZmluZChgWyR7VE9PTFRJUF9EQVRBX1NFTEVDVE9SfV1gKTtcbiAgICBpZiAoJGV4aXN0ZWRUb29sdGlwLmxlbmd0aCkge1xuICAgICAgICAkZXhpc3RlZFRvb2x0aXAuYXR0cignYXJpYS1sYWJlbCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0ICR0b29sdGlwID0gJChUT09MVElQX05PREUpLmF0dHIoJ2FyaWEtbGFiZWwnKTtcbiAgICAgICAgJG5vZGUuYXBwZW5kKCR0b29sdGlwKTtcbiAgICB9XG59O1xuIiwiY29uc3QgU0xJREVfTlVNQkVSID0gJ1tTTElERV9OVU1CRVJdJztcbmNvbnN0IFNMSURFU19RVUFOVElUWSA9ICdbU0xJREVTX1FVQU5USVRZXSc7XG5cbmV4cG9ydCBkZWZhdWx0ICh0ZXh0Rm9yQ2hhbmdlLCBzbGlkZU51bWJlciwgc2xpZGVzUXVhbnRpdHkpID0+IChcbiAgICB0ZXh0Rm9yQ2hhbmdlXG4gICAgICAgIC5yZXBsYWNlKFNMSURFX05VTUJFUiwgc2xpZGVOdW1iZXIpXG4gICAgICAgIC5yZXBsYWNlKFNMSURFU19RVUFOVElUWSwgc2xpZGVzUXVhbnRpdHkpXG4pO1xuIiwiaW1wb3J0IHsgQ29sbGFwc2libGVFdmVudHMgfSBmcm9tICcuLi9jb21tb24vY29sbGFwc2libGUnO1xuXG5jb25zdCBQTFVHSU5fS0VZID0gJ2NvbGxhcHNpYmxlLWdyb3VwJztcblxuLypcbiAqIE1hbmFnZSBtdWx0aXBsZSBpbnN0YW5jZXMgb2YgY29sbGFwc2libGVzLiBGb3IgZXhhbXBsZSwgaWYgYSBjb2xsYXBzaWJsZSBpc1xuICogYWJvdXQgdG8gb3BlbiBhbmQgdGhlcmUncyBvbmUgYWxyZWFkeSBvcGVuLCBjbG9zZSB0aGUgbGF0dGVyIGZpcnN0LlxuICogQHBhcmFtIHtqUXVlcnl9ICRjb21wb25lbnRcbiAqL1xuZXhwb3J0IGNsYXNzIENvbGxhcHNpYmxlR3JvdXAge1xuICAgIGNvbnN0cnVjdG9yKCRjb21wb25lbnQpIHtcbiAgICAgICAgdGhpcy4kY29tcG9uZW50ID0gJGNvbXBvbmVudDtcbiAgICAgICAgdGhpcy5vcGVuQ29sbGFwc2libGUgPSBudWxsO1xuXG4gICAgICAgIC8vIEF1dG8gYmluZFxuICAgICAgICB0aGlzLm9uQ29sbGFwc2libGVPcGVuID0gdGhpcy5vbkNvbGxhcHNpYmxlT3Blbi5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLm9uQ29sbGFwc2libGVDbG9zZSA9IHRoaXMub25Db2xsYXBzaWJsZUNsb3NlLmJpbmQodGhpcyk7XG5cbiAgICAgICAgLy8gTGlzdGVuXG4gICAgICAgIHRoaXMuYmluZEV2ZW50cygpO1xuICAgIH1cblxuICAgIGNsb3NlKCkge1xuICAgICAgICBpZiAodGhpcy5vcGVuQ29sbGFwc2libGUgJiYgIXRoaXMub3BlbkNvbGxhcHNpYmxlLmRpc2FibGVkKSB7XG4gICAgICAgICAgICB0aGlzLm9wZW5Db2xsYXBzaWJsZS5jbG9zZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYmluZEV2ZW50cygpIHtcbiAgICAgICAgdGhpcy4kY29tcG9uZW50Lm9uKENvbGxhcHNpYmxlRXZlbnRzLm9wZW4sIHRoaXMub25Db2xsYXBzaWJsZU9wZW4pO1xuICAgICAgICB0aGlzLiRjb21wb25lbnQub24oQ29sbGFwc2libGVFdmVudHMuY2xvc2UsIHRoaXMub25Db2xsYXBzaWJsZUNsb3NlKTtcbiAgICB9XG5cbiAgICB1bmJpbmRFdmVudHMoKSB7XG4gICAgICAgIHRoaXMuJGNvbXBvbmVudC5vZmYoQ29sbGFwc2libGVFdmVudHMub3BlbiwgdGhpcy5vbkNvbGxhcHNpYmxlT3Blbik7XG4gICAgICAgIHRoaXMuJGNvbXBvbmVudC5vZmYoQ29sbGFwc2libGVFdmVudHMuY2xvc2UsIHRoaXMub25Db2xsYXBzaWJsZUNsb3NlKTtcbiAgICB9XG5cbiAgICBvbkNvbGxhcHNpYmxlT3BlbihldmVudCwgY29sbGFwc2libGVJbnN0YW5jZSkge1xuICAgICAgICBpZiAodGhpcy5vcGVuQ29sbGFwc2libGUgJiYgdGhpcy5vcGVuQ29sbGFwc2libGUuaGFzQ29sbGFwc2libGUoY29sbGFwc2libGVJbnN0YW5jZSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY2xvc2UoKTtcblxuICAgICAgICB0aGlzLm9wZW5Db2xsYXBzaWJsZSA9IGNvbGxhcHNpYmxlSW5zdGFuY2U7XG4gICAgfVxuXG4gICAgb25Db2xsYXBzaWJsZUNsb3NlKGV2ZW50LCBjb2xsYXBzaWJsZUluc3RhbmNlKSB7XG4gICAgICAgIGlmICh0aGlzLm9wZW5Db2xsYXBzaWJsZSAmJiB0aGlzLm9wZW5Db2xsYXBzaWJsZS5oYXNDb2xsYXBzaWJsZShjb2xsYXBzaWJsZUluc3RhbmNlKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5vcGVuQ29sbGFwc2libGUgPSBudWxsO1xuICAgIH1cbn1cblxuLyoqXG4gKiBDcmVhdGUgbmV3IENvbGxhcHNpYmxlR3JvdXAgaW5zdGFuY2VzXG4gKiBAcGFyYW0ge3N0cmluZ30gW3NlbGVjdG9yXVxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLiRjb250ZXh0XVxuICogQHJldHVybiB7QXJyYXl9IGFycmF5IG9mIENvbGxhcHNpYmxlR3JvdXAgaW5zdGFuY2VzXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbGxhcHNpYmxlR3JvdXBGYWN0b3J5KHNlbGVjdG9yID0gYFtkYXRhLSR7UExVR0lOX0tFWX1dYCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgJGdyb3VwcyA9ICQoc2VsZWN0b3IsIG9wdGlvbnMuJGNvbnRleHQpO1xuICAgIGNvbnN0IGluc3RhbmNlS2V5ID0gYCR7UExVR0lOX0tFWX1JbnN0YW5jZWA7XG5cbiAgICByZXR1cm4gJGdyb3Vwcy5tYXAoKGluZGV4LCBlbGVtZW50KSA9PiB7XG4gICAgICAgIGNvbnN0ICRncm91cCA9ICQoZWxlbWVudCk7XG4gICAgICAgIGNvbnN0IGNhY2hlZEdyb3VwID0gJGdyb3VwLmRhdGEoaW5zdGFuY2VLZXkpO1xuXG4gICAgICAgIGlmIChjYWNoZWRHcm91cCBpbnN0YW5jZW9mIENvbGxhcHNpYmxlR3JvdXApIHtcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRHcm91cDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGdyb3VwID0gbmV3IENvbGxhcHNpYmxlR3JvdXAoJGdyb3VwKTtcblxuICAgICAgICAkZ3JvdXAuZGF0YShpbnN0YW5jZUtleSwgZ3JvdXApO1xuXG4gICAgICAgIHJldHVybiBncm91cDtcbiAgICB9KS50b0FycmF5KCk7XG59XG4iLCJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IG1lZGlhUXVlcnlMaXN0RmFjdG9yeSBmcm9tICcuL21lZGlhLXF1ZXJ5LWxpc3QnO1xuXG5jb25zdCBQTFVHSU5fS0VZID0gJ2NvbGxhcHNpYmxlJztcblxuZXhwb3J0IGNvbnN0IENvbGxhcHNpYmxlRXZlbnRzID0ge1xuICAgIG9wZW46ICdvcGVuLmNvbGxhcHNpYmxlJyxcbiAgICBjbG9zZTogJ2Nsb3NlLmNvbGxhcHNpYmxlJyxcbiAgICB0b2dnbGU6ICd0b2dnbGUuY29sbGFwc2libGUnLFxuICAgIGNsaWNrOiAnY2xpY2suY29sbGFwc2libGUnLFxufTtcblxuY29uc3QgQ29sbGFwc2libGVTdGF0ZSA9IHtcbiAgICBjbG9zZWQ6ICdjbG9zZWQnLFxuICAgIG9wZW46ICdvcGVuJyxcbn07XG5cbmZ1bmN0aW9uIHByZXBlbmRIYXNoKGlkKSB7XG4gICAgaWYgKGlkICYmIGlkLmluZGV4T2YoJyMnKSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gaWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGAjJHtpZH1gO1xufVxuXG5mdW5jdGlvbiBvcHRpb25zRnJvbURhdGEoJGVsZW1lbnQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBkaXNhYmxlZEJyZWFrcG9pbnQ6ICRlbGVtZW50LmRhdGEoYCR7UExVR0lOX0tFWX1EaXNhYmxlZEJyZWFrcG9pbnRgKSxcbiAgICAgICAgZGlzYWJsZWRTdGF0ZTogJGVsZW1lbnQuZGF0YShgJHtQTFVHSU5fS0VZfURpc2FibGVkU3RhdGVgKSxcbiAgICAgICAgZW5hYmxlZFN0YXRlOiAkZWxlbWVudC5kYXRhKGAke1BMVUdJTl9LRVl9RW5hYmxlZFN0YXRlYCksXG4gICAgICAgIG9wZW5DbGFzc05hbWU6ICRlbGVtZW50LmRhdGEoYCR7UExVR0lOX0tFWX1PcGVuQ2xhc3NOYW1lYCksXG4gICAgfTtcbn1cblxuLyoqXG4gKiBDb2xsYXBzZS9FeHBhbmQgdG9nZ2xlXG4gKi9cbmV4cG9ydCBjbGFzcyBDb2xsYXBzaWJsZSB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtqUXVlcnl9ICR0b2dnbGUgLSBUcmlnZ2VyIGJ1dHRvblxuICAgICAqIEBwYXJhbSB7alF1ZXJ5fSAkdGFyZ2V0IC0gQ29udGVudCB0byBjb2xsYXBzZSAvIGV4cGFuZFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBDb25maWd1cmFibGUgb3B0aW9uc1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucy4kY29udGV4dF1cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW29wdGlvbnMuZGlzYWJsZWRCcmVha3BvaW50XVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucy5kaXNhYmxlZFN0YXRlXVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucy5lbmFibGVkU3RhdGVdXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtvcHRpb25zLm9wZW5DbGFzc05hbWVdXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIDxidXR0b24gaWQ9XCIjbW9yZVwiPkNvbGxhcHNlPC9idXR0b24+XG4gICAgICogPGRpdiBpZD1cImNvbnRlbnRcIj4uLi48L2Rpdj5cbiAgICAgKlxuICAgICAqIG5ldyBDb2xsYXBzaWJsZSgkKCcjbW9yZScpLCAkKCcjY29udGVudCcpKTtcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcigkdG9nZ2xlLCAkdGFyZ2V0LCB7XG4gICAgICAgIGRpc2FibGVkQnJlYWtwb2ludCxcbiAgICAgICAgZGlzYWJsZWRTdGF0ZSxcbiAgICAgICAgZW5hYmxlZFN0YXRlLFxuICAgICAgICBvcGVuQ2xhc3NOYW1lID0gJ2lzLW9wZW4nLFxuICAgIH0gPSB7fSkge1xuICAgICAgICB0aGlzLiR0b2dnbGUgPSAkdG9nZ2xlO1xuICAgICAgICB0aGlzLiR0YXJnZXQgPSAkdGFyZ2V0O1xuICAgICAgICB0aGlzLnRhcmdldElkID0gJHRhcmdldC5hdHRyKCdpZCcpO1xuICAgICAgICB0aGlzLm9wZW5DbGFzc05hbWUgPSBvcGVuQ2xhc3NOYW1lO1xuICAgICAgICB0aGlzLmRpc2FibGVkU3RhdGUgPSBkaXNhYmxlZFN0YXRlO1xuICAgICAgICB0aGlzLmVuYWJsZWRTdGF0ZSA9IGVuYWJsZWRTdGF0ZTtcblxuICAgICAgICBpZiAoZGlzYWJsZWRCcmVha3BvaW50KSB7XG4gICAgICAgICAgICB0aGlzLmRpc2FibGVkTWVkaWFRdWVyeUxpc3QgPSBtZWRpYVF1ZXJ5TGlzdEZhY3RvcnkoZGlzYWJsZWRCcmVha3BvaW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmRpc2FibGVkTWVkaWFRdWVyeUxpc3QpIHtcbiAgICAgICAgICAgIHRoaXMuZGlzYWJsZWQgPSB0aGlzLmRpc2FibGVkTWVkaWFRdWVyeUxpc3QubWF0Y2hlcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEF1dG8tYmluZFxuICAgICAgICB0aGlzLm9uQ2xpY2tlZCA9IHRoaXMub25DbGlja2VkLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMub25EaXNhYmxlZE1lZGlhUXVlcnlMaXN0TWF0Y2ggPSB0aGlzLm9uRGlzYWJsZWRNZWRpYVF1ZXJ5TGlzdE1hdGNoLmJpbmQodGhpcyk7XG5cbiAgICAgICAgLy8gQXNzaWduIERPTSBhdHRyaWJ1dGVzXG4gICAgICAgIHRoaXMuJHRhcmdldC5hdHRyKCdhcmlhLWhpZGRlbicsIHRoaXMuaXNDb2xsYXBzZWQpO1xuICAgICAgICB0aGlzLiR0b2dnbGVcbiAgICAgICAgICAgIC5hdHRyKCdhcmlhLWxhYmVsJywgdGhpcy5fZ2V0VG9nZ2xlQXJpYUxhYmVsVGV4dCgkdG9nZ2xlKSlcbiAgICAgICAgICAgIC5hdHRyKCdhcmlhLWNvbnRyb2xzJywgJHRhcmdldC5hdHRyKCdpZCcpKVxuICAgICAgICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCB0aGlzLmlzT3Blbik7XG5cbiAgICAgICAgLy8gTGlzdGVuXG4gICAgICAgIHRoaXMuYmluZEV2ZW50cygpO1xuICAgIH1cblxuICAgIGdldCBpc0NvbGxhcHNlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuJHRhcmdldC5pcygnOmhpZGRlbicpICYmICF0aGlzLiR0YXJnZXQuaGFzQ2xhc3ModGhpcy5vcGVuQ2xhc3NOYW1lKTtcbiAgICB9XG5cbiAgICBnZXQgaXNPcGVuKCkge1xuICAgICAgICByZXR1cm4gIXRoaXMuaXNDb2xsYXBzZWQ7XG4gICAgfVxuXG4gICAgc2V0IGRpc2FibGVkKGRpc2FibGVkKSB7XG4gICAgICAgIHRoaXMuX2Rpc2FibGVkID0gZGlzYWJsZWQ7XG5cbiAgICAgICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICAgICAgICB0aGlzLnRvZ2dsZUJ5U3RhdGUodGhpcy5kaXNhYmxlZFN0YXRlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudG9nZ2xlQnlTdGF0ZSh0aGlzLmVuYWJsZWRTdGF0ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgZGlzYWJsZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kaXNhYmxlZDtcbiAgICB9XG5cbiAgICBfZ2V0VG9nZ2xlQXJpYUxhYmVsVGV4dCgkdG9nZ2xlKSB7XG4gICAgICAgIGNvbnN0ICR0ZXh0VG9nZ2xlQ2hpbGRyZW4gPSAkdG9nZ2xlLmNoaWxkcmVuKCkuZmlsdGVyKChfXywgY2hpbGQpID0+ICQoY2hpbGQpLnRleHQoKS50cmltKCkpO1xuICAgICAgICBjb25zdCAkYXJpYUxhYmVsVGFyZ2V0ID0gJHRleHRUb2dnbGVDaGlsZHJlbi5sZW5ndGggPyAkdGV4dFRvZ2dsZUNoaWxkcmVuLmZpcnN0KCkgOiAkdG9nZ2xlO1xuXG4gICAgICAgIHJldHVybiAkKCRhcmlhTGFiZWxUYXJnZXQpLnRleHQoKS50cmltKCk7XG4gICAgfVxuXG4gICAgb3Blbih7IG5vdGlmeSA9IHRydWUgfSA9IHt9KSB7XG4gICAgICAgIHRoaXMuJHRvZ2dsZVxuICAgICAgICAgICAgLmFkZENsYXNzKHRoaXMub3BlbkNsYXNzTmFtZSlcbiAgICAgICAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSk7XG5cbiAgICAgICAgdGhpcy4kdGFyZ2V0XG4gICAgICAgICAgICAuYWRkQ2xhc3ModGhpcy5vcGVuQ2xhc3NOYW1lKVxuICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgZmFsc2UpO1xuXG4gICAgICAgIGlmIChub3RpZnkpIHtcbiAgICAgICAgICAgIHRoaXMuJHRvZ2dsZS50cmlnZ2VyKENvbGxhcHNpYmxlRXZlbnRzLm9wZW4sIFt0aGlzXSk7XG4gICAgICAgICAgICB0aGlzLiR0b2dnbGUudHJpZ2dlcihDb2xsYXBzaWJsZUV2ZW50cy50b2dnbGUsIFt0aGlzXSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjbG9zZSh7IG5vdGlmeSA9IHRydWUgfSA9IHt9KSB7XG4gICAgICAgIHRoaXMuJHRvZ2dsZVxuICAgICAgICAgICAgLnJlbW92ZUNsYXNzKHRoaXMub3BlbkNsYXNzTmFtZSlcbiAgICAgICAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgZmFsc2UpO1xuXG4gICAgICAgIHRoaXMuJHRhcmdldFxuICAgICAgICAgICAgLnJlbW92ZUNsYXNzKHRoaXMub3BlbkNsYXNzTmFtZSlcbiAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsIHRydWUpO1xuXG4gICAgICAgIGlmIChub3RpZnkpIHtcbiAgICAgICAgICAgIHRoaXMuJHRvZ2dsZS50cmlnZ2VyKENvbGxhcHNpYmxlRXZlbnRzLmNsb3NlLCBbdGhpc10pO1xuICAgICAgICAgICAgdGhpcy4kdG9nZ2xlLnRyaWdnZXIoQ29sbGFwc2libGVFdmVudHMudG9nZ2xlLCBbdGhpc10pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdG9nZ2xlKCkge1xuICAgICAgICBpZiAodGhpcy5pc0NvbGxhcHNlZCkge1xuICAgICAgICAgICAgdGhpcy5vcGVuKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0b2dnbGVCeVN0YXRlKHN0YXRlLCAuLi5hcmdzKSB7XG4gICAgICAgIHN3aXRjaCAoc3RhdGUpIHtcbiAgICAgICAgY2FzZSBDb2xsYXBzaWJsZVN0YXRlLm9wZW46XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vcGVuLmFwcGx5KHRoaXMsIGFyZ3MpO1xuXG4gICAgICAgIGNhc2UgQ29sbGFwc2libGVTdGF0ZS5jbG9zZWQ6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jbG9zZS5hcHBseSh0aGlzLCBhcmdzKTtcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhhc0NvbGxhcHNpYmxlKGNvbGxhcHNpYmxlSW5zdGFuY2UpIHtcbiAgICAgICAgcmV0dXJuICQuY29udGFpbnModGhpcy4kdGFyZ2V0LmdldCgwKSwgY29sbGFwc2libGVJbnN0YW5jZS4kdGFyZ2V0LmdldCgwKSk7XG4gICAgfVxuXG4gICAgYmluZEV2ZW50cygpIHtcbiAgICAgICAgdGhpcy4kdG9nZ2xlLm9uKENvbGxhcHNpYmxlRXZlbnRzLmNsaWNrLCB0aGlzLm9uQ2xpY2tlZCk7XG5cbiAgICAgICAgaWYgKHRoaXMuZGlzYWJsZWRNZWRpYVF1ZXJ5TGlzdCAmJiB0aGlzLmRpc2FibGVkTWVkaWFRdWVyeUxpc3QuYWRkTGlzdGVuZXIpIHtcbiAgICAgICAgICAgIHRoaXMuZGlzYWJsZWRNZWRpYVF1ZXJ5TGlzdC5hZGRMaXN0ZW5lcih0aGlzLm9uRGlzYWJsZWRNZWRpYVF1ZXJ5TGlzdE1hdGNoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHVuYmluZEV2ZW50cygpIHtcbiAgICAgICAgdGhpcy4kdG9nZ2xlLm9mZihDb2xsYXBzaWJsZUV2ZW50cy5jbGljaywgdGhpcy5vbkNsaWNrZWQpO1xuXG4gICAgICAgIGlmICh0aGlzLmRpc2FibGVkTWVkaWFRdWVyeUxpc3QgJiYgdGhpcy5kaXNhYmxlZE1lZGlhUXVlcnlMaXN0LnJlbW92ZUxpc3RlbmVyKSB7XG4gICAgICAgICAgICB0aGlzLmRpc2FibGVkTWVkaWFRdWVyeUxpc3QucmVtb3ZlTGlzdGVuZXIodGhpcy5vbkRpc2FibGVkTWVkaWFRdWVyeUxpc3RNYXRjaCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbkNsaWNrZWQoZXZlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuZGlzYWJsZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgdGhpcy50b2dnbGUoKTtcbiAgICB9XG5cbiAgICBvbkRpc2FibGVkTWVkaWFRdWVyeUxpc3RNYXRjaChtZWRpYSkge1xuICAgICAgICB0aGlzLmRpc2FibGVkID0gbWVkaWEubWF0Y2hlcztcbiAgICB9XG59XG5cbi8qKlxuICogQ29udmVuaWVuY2UgbWV0aG9kIGZvciBjb25zdHJ1Y3RpbmcgQ29sbGFwc2libGUgaW5zdGFuY2VcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gW3NlbGVjdG9yXVxuICogQHBhcmFtIHtPYmplY3R9IFtvdmVycmlkZU9wdGlvbnNdXG4gKiBAcGFyYW0ge09iamVjdH0gW292ZXJyaWRlT3B0aW9ucy4kY29udGV4dF1cbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3ZlcnJpZGVPcHRpb25zLmRpc2FibGVkQnJlYWtwb2ludF1cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3ZlcnJpZGVPcHRpb25zLmRpc2FibGVkU3RhdGVdXG4gKiBAcGFyYW0ge09iamVjdH0gW292ZXJyaWRlT3B0aW9ucy5lbmFibGVkU3RhdGVdXG4gKiBAcGFyYW0ge1N0cmluZ30gW292ZXJyaWRlT3B0aW9ucy5vcGVuQ2xhc3NOYW1lXVxuICogQHJldHVybiB7QXJyYXl9IGFycmF5IG9mIENvbGxhcHNpYmxlIGluc3RhbmNlc1xuICpcbiAqIEBleGFtcGxlXG4gKiA8YSBocmVmPVwiI2NvbnRlbnRcIiBkYXRhLWNvbGxhcHNpYmxlPkNvbGxhcHNlPC9hPlxuICogPGRpdiBpZD1cImNvbnRlbnRcIj4uLi48L2Rpdj5cbiAqXG4gKiBjb2xsYXBzaWJsZUZhY3RvcnkoKTtcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29sbGFwc2libGVGYWN0b3J5KHNlbGVjdG9yID0gYFtkYXRhLSR7UExVR0lOX0tFWX1dYCwgb3ZlcnJpZGVPcHRpb25zID0ge30pIHtcbiAgICBjb25zdCAkY29sbGFwc2libGVzID0gJChzZWxlY3Rvciwgb3ZlcnJpZGVPcHRpb25zLiRjb250ZXh0KTtcblxuICAgIHJldHVybiAkY29sbGFwc2libGVzLm1hcCgoaW5kZXgsIGVsZW1lbnQpID0+IHtcbiAgICAgICAgY29uc3QgJHRvZ2dsZSA9ICQoZWxlbWVudCk7XG4gICAgICAgIGNvbnN0IGluc3RhbmNlS2V5ID0gYCR7UExVR0lOX0tFWX1JbnN0YW5jZWA7XG4gICAgICAgIGNvbnN0IGNhY2hlZENvbGxhcHNpYmxlID0gJHRvZ2dsZS5kYXRhKGluc3RhbmNlS2V5KTtcblxuICAgICAgICBpZiAoY2FjaGVkQ29sbGFwc2libGUgaW5zdGFuY2VvZiBDb2xsYXBzaWJsZSkge1xuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENvbGxhcHNpYmxlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdGFyZ2V0SWQgPSBwcmVwZW5kSGFzaCgkdG9nZ2xlLmRhdGEoUExVR0lOX0tFWSkgfHxcbiAgICAgICAgICAgICR0b2dnbGUuZGF0YShgJHtQTFVHSU5fS0VZfVRhcmdldGApIHx8XG4gICAgICAgICAgICAkdG9nZ2xlLmF0dHIoJ2hyZWYnKSk7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSBfLmV4dGVuZChvcHRpb25zRnJvbURhdGEoJHRvZ2dsZSksIG92ZXJyaWRlT3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IGNvbGxhcHNpYmxlID0gbmV3IENvbGxhcHNpYmxlKCR0b2dnbGUsICQodGFyZ2V0SWQsIG92ZXJyaWRlT3B0aW9ucy4kY29udGV4dCksIG9wdGlvbnMpO1xuXG4gICAgICAgICR0b2dnbGUuZGF0YShpbnN0YW5jZUtleSwgY29sbGFwc2libGUpO1xuXG4gICAgICAgIHJldHVybiBjb2xsYXBzaWJsZTtcbiAgICB9KS50b0FycmF5KCk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoY2VydCkge1xuICAgIGlmICh0eXBlb2YgY2VydCAhPT0gJ3N0cmluZycgfHwgY2VydC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIEFkZCBhbnkgY3VzdG9tIGdpZnQgY2VydGlmaWNhdGUgdmFsaWRhdGlvbiBsb2dpYyBoZXJlXG4gICAgcmV0dXJuIHRydWU7XG59XG4iLCIvKlxuICogUmVtZW1iZXIgdG8gdXBkYXRlIC9hc3NldHMvc2Nzcy9zZXR0aW5ncy9nbG9iYWwvc2NyZWVuc2l6ZXMvc2NyZWVuc2l6ZXMuc2Nzc1xuICogaWYgeW91IGRlY2lkZSB0byBjaGFuZ2UgYnJlYWtwb2ludCB2YWx1ZXNcbiAqL1xuY29uc3QgYnJlYWtwb2ludFNpemVzID0ge1xuICAgIGxhcmdlOiAxMjYxLFxuICAgIG1lZGl1bTogODAxLFxuICAgIHNtYWxsOiA1NTEsXG59O1xuXG4vKipcbiAqIENyZWF0ZSBNZWRpYVF1ZXJ5TGlzdCB1c2luZyBicmVha3BvaW50IG5hbWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBicmVha3BvaW50TmFtZVxuICogQHJldHVybiB7TWVkaWFRdWVyeUxpc3R8bnVsbH1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVkaWFRdWVyeUxpc3RGYWN0b3J5KGJyZWFrcG9pbnROYW1lKSB7XG4gICAgaWYgKCFicmVha3BvaW50TmFtZSB8fCAhd2luZG93Lm1hdGNoTWVkaWEpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgYnJlYWtwb2ludCA9IGJyZWFrcG9pbnRTaXplc1ticmVha3BvaW50TmFtZV07XG4gICAgY29uc3QgbWVkaWFRdWVyeSA9IGAobWluLXdpZHRoOiAke2JyZWFrcG9pbnR9cHgpYDtcbiAgICBjb25zdCBtZWRpYVF1ZXJ5TGlzdCA9IHdpbmRvdy5tYXRjaE1lZGlhKG1lZGlhUXVlcnkpO1xuXG4gICAgcmV0dXJuIG1lZGlhUXVlcnlMaXN0O1xufVxuIiwiY29uc3QgZm9ybXMgPSB7XG4gICAgZW1haWwodmFsdWUpIHtcbiAgICAgICAgY29uc3QgcmUgPSAvXlxcUytAXFxTK1xcLlxcUysvO1xuICAgICAgICByZXR1cm4gcmUudGVzdCh2YWx1ZSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFZhbGlkYXRlcyBhIHBhc3N3b3JkIGZpZWxkXG4gICAgICogQHBhcmFtIHZhbHVlXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICovXG4gICAgcGFzc3dvcmQodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubm90RW1wdHkodmFsdWUpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiB2YWxpZGF0ZXMgaWYgYSBmaWVsZCBpcyBlbXB0eVxuICAgICAqIEBwYXJhbSB2YWx1ZVxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqXG4gICAgICovXG4gICAgbm90RW1wdHkodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlLmxlbmd0aCA+IDA7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHZhbGlkYXRlcyBhIGZpZWxkIGxpa2UgcHJvZHVjdCBxdWFudGl0eVxuICAgICAqIEBwYXJhbSB2YWx1ZVxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqXG4gICAgICovXG4gICAgbnVtYmVyc09ubHkodmFsdWUpIHtcbiAgICAgICAgY29uc3QgcmUgPSAvXlxcZCskLztcbiAgICAgICAgcmV0dXJuIHJlLnRlc3QodmFsdWUpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiB2YWxpZGF0ZXMgaW5jcmVhc2UgaW4gdmFsdWUgZG9lcyBub3QgZXhjZWVkIG1heFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtYXhcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgICAqXG4gICAgICovXG4gICAgdmFsaWRhdGVJbmNyZWFzZUFnYWluc3RNYXhCb3VuZGFyeSh2YWx1ZSwgbWF4KSB7XG4gICAgICAgIGNvbnN0IHJhaXNlID0gdmFsdWUgKyAxO1xuXG4gICAgICAgIGlmICghbWF4IHx8IHJhaXNlIDw9IG1heCkgcmV0dXJuIHJhaXNlO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHZhbGlkYXRlcyBkZWNyZWFzZSBpbiB2YWx1ZSBkb2VzIG5vdCBmYWxsIGJlbG93IG1pblxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtaW5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgICAqXG4gICAgICovXG4gICAgdmFsaWRhdGVEZWNyZWFzZUFnYWluc3RNaW5Cb3VuZGFyeSh2YWx1ZSwgbWluKSB7XG4gICAgICAgIGNvbnN0IGRlY2xpbmUgPSB2YWx1ZSAtIDE7XG5cbiAgICAgICAgaWYgKCFtaW4gfHwgZGVjbGluZSA+PSBtaW4pIHJldHVybiBkZWNsaW5lO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZvcm1zO1xuIiwiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcblxuZnVuY3Rpb24gbWluTWF4VmFsaWRhdGUobWluSW5wdXRTZWxlY3RvciwgbWF4SW5wdXRTZWxlY3Rvcikge1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKGNiKSB7XG4gICAgICAgIGNvbnN0IG1pblZhbHVlID0gcGFyc2VGbG9hdCgkKG1pbklucHV0U2VsZWN0b3IpLnZhbCgpKTtcbiAgICAgICAgY29uc3QgbWF4VmFsdWUgPSBwYXJzZUZsb2F0KCQobWF4SW5wdXRTZWxlY3RvcikudmFsKCkpO1xuXG4gICAgICAgIGlmIChtYXhWYWx1ZSA+IG1pblZhbHVlIHx8IF8uaXNOYU4obWF4VmFsdWUpIHx8IF8uaXNOYU4obWluVmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gY2IodHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2IoZmFsc2UpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWxpZGF0ZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWluTWF4VmFsaWRhdGU7XG4iLCJpbXBvcnQgbm9kIGZyb20gJ25vZC12YWxpZGF0ZSc7XG5pbXBvcnQgbWluTWF4VmFsaWRhdGUgZnJvbSAnLi9ub2QtZnVuY3Rpb25zL21pbi1tYXgtdmFsaWRhdGUnO1xuXG4vLyBIb29rIG91ciBTQ1NTIGZyYW1ld29yayBmb3JtIGZpZWxkIHN0YXR1cyBjbGFzc2VzIGludG8gdGhlIG5vZCB2YWxpZGF0aW9uIHN5c3RlbSBiZWZvcmUgdXNlXG5ub2QuY2xhc3Nlcy5lcnJvckNsYXNzID0gJ2Zvcm0tZmllbGQtLWVycm9yJztcbm5vZC5jbGFzc2VzLnN1Y2Nlc3NDbGFzcyA9ICdmb3JtLWZpZWxkLS1zdWNjZXNzJztcbm5vZC5jbGFzc2VzLmVycm9yTWVzc2FnZUNsYXNzID0gJ2Zvcm0taW5saW5lTWVzc2FnZSc7XG5cbi8vIFJlZ2lzdGVyIHZhbGlkYXRlIGZ1bmN0aW9uc1xubm9kLmNoZWNrRnVuY3Rpb25zWydtaW4tbWF4J10gPSBtaW5NYXhWYWxpZGF0ZTtcblxuZXhwb3J0IGRlZmF1bHQgbm9kO1xuIiwiaW1wb3J0IFdpc2hsaXN0IGZyb20gJy4uL3dpc2hsaXN0JztcbmltcG9ydCB7IGluaXRSYWRpb09wdGlvbnMgfSBmcm9tICcuL2FyaWEnO1xuaW1wb3J0IHsgaXNPYmplY3QsIGlzTnVtYmVyIH0gZnJvbSAnbG9kYXNoJztcblxuY29uc3Qgb3B0aW9uc1R5cGVzTWFwID0ge1xuICAgIElOUFVUX0ZJTEU6ICdpbnB1dC1maWxlJyxcbiAgICBJTlBVVF9URVhUOiAnaW5wdXQtdGV4dCcsXG4gICAgSU5QVVRfTlVNQkVSOiAnaW5wdXQtbnVtYmVyJyxcbiAgICBJTlBVVF9DSEVDS0JPWDogJ2lucHV0LWNoZWNrYm94JyxcbiAgICBURVhUQVJFQTogJ3RleHRhcmVhJyxcbiAgICBEQVRFOiAnZGF0ZScsXG4gICAgU0VUX1NFTEVDVDogJ3NldC1zZWxlY3QnLFxuICAgIFNFVF9SRUNUQU5HTEU6ICdzZXQtcmVjdGFuZ2xlJyxcbiAgICBTRVRfUkFESU86ICdzZXQtcmFkaW8nLFxuICAgIFNXQVRDSDogJ3N3YXRjaCcsXG4gICAgUFJPRFVDVF9MSVNUOiAncHJvZHVjdC1saXN0Jyxcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBvcHRpb25DaGFuZ2VEZWNvcmF0b3IoYXJlRGVmYXVsdE90aW9uc1NldCkge1xuICAgIHJldHVybiAoZXJyLCByZXNwb25zZSkgPT4ge1xuICAgICAgICBjb25zdCBhdHRyaWJ1dGVzRGF0YSA9IHJlc3BvbnNlLmRhdGEgfHwge307XG4gICAgICAgIGNvbnN0IGF0dHJpYnV0ZXNDb250ZW50ID0gcmVzcG9uc2UuY29udGVudCB8fCB7fTtcblxuICAgICAgICB0aGlzLnVwZGF0ZVByb2R1Y3RBdHRyaWJ1dGVzKGF0dHJpYnV0ZXNEYXRhKTtcbiAgICAgICAgaWYgKGFyZURlZmF1bHRPdGlvbnNTZXQpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlVmlldyhhdHRyaWJ1dGVzRGF0YSwgYXR0cmlidXRlc0NvbnRlbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVEZWZhdWx0QXR0cmlidXRlc0Zvck9PUyhhdHRyaWJ1dGVzRGF0YSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQcm9kdWN0RGV0YWlsc0Jhc2Uge1xuICAgIGNvbnN0cnVjdG9yKCRzY29wZSwgY29udGV4dCkge1xuICAgICAgICB0aGlzLiRzY29wZSA9ICRzY29wZTtcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgICAgICAgdGhpcy5pbml0UmFkaW9BdHRyaWJ1dGVzKCk7XG4gICAgICAgIFdpc2hsaXN0LmxvYWQodGhpcy5jb250ZXh0KTtcbiAgICAgICAgdGhpcy5nZXRUYWJSZXF1ZXN0cygpO1xuXG4gICAgICAgICQoJ1tkYXRhLXByb2R1Y3QtYXR0cmlidXRlXScpLmVhY2goKF9fLCB2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdHlwZSA9IHZhbHVlLmdldEF0dHJpYnV0ZSgnZGF0YS1wcm9kdWN0LWF0dHJpYnV0ZScpO1xuXG4gICAgICAgICAgICB0aGlzLl9tYWtlUHJvZHVjdFZhcmlhbnRBY2Nlc3NpYmxlKHZhbHVlLCB0eXBlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgX21ha2VQcm9kdWN0VmFyaWFudEFjY2Vzc2libGUodmFyaWFudERvbU5vZGUsIHZhcmlhbnRUeXBlKSB7XG4gICAgICAgIHN3aXRjaCAodmFyaWFudFR5cGUpIHtcbiAgICAgICAgY2FzZSBvcHRpb25zVHlwZXNNYXAuU0VUX1JBRElPOlxuICAgICAgICBjYXNlIG9wdGlvbnNUeXBlc01hcC5TV0FUQ0g6IHtcbiAgICAgICAgICAgIGluaXRSYWRpb09wdGlvbnMoJCh2YXJpYW50RG9tTm9kZSksICdbdHlwZT1yYWRpb10nKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgZGVmYXVsdDogYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBbGxvdyByYWRpbyBidXR0b25zIHRvIGdldCBkZXNlbGVjdGVkXG4gICAgICovXG4gICAgaW5pdFJhZGlvQXR0cmlidXRlcygpIHtcbiAgICAgICAgJCgnW2RhdGEtcHJvZHVjdC1hdHRyaWJ1dGVdIGlucHV0W3R5cGU9XCJyYWRpb1wiXScsIHRoaXMuJHNjb3BlKS5lYWNoKChpLCByYWRpbykgPT4ge1xuICAgICAgICAgICAgY29uc3QgJHJhZGlvID0gJChyYWRpbyk7XG5cbiAgICAgICAgICAgIC8vIE9ubHkgYmluZCB0byBjbGljayBvbmNlXG4gICAgICAgICAgICBpZiAoJHJhZGlvLmF0dHIoJ2RhdGEtc3RhdGUnKSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgJHJhZGlvLm9uKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRyYWRpby5kYXRhKCdzdGF0ZScpID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkcmFkaW8ucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRyYWRpby5kYXRhKCdzdGF0ZScsIGZhbHNlKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgJHJhZGlvLnRyaWdnZXIoJ2NoYW5nZScpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHJhZGlvLmRhdGEoJ3N0YXRlJywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmluaXRSYWRpb0F0dHJpYnV0ZXMoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgJHJhZGlvLmF0dHIoJ2RhdGEtc3RhdGUnLCAkcmFkaW8ucHJvcCgnY2hlY2tlZCcpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGlkZSBvciBtYXJrIGFzIHVuYXZhaWxhYmxlIG91dCBvZiBzdG9jayBhdHRyaWJ1dGVzIGlmIGVuYWJsZWRcbiAgICAgKiBAcGFyYW0gIHtPYmplY3R9IGRhdGEgUHJvZHVjdCBhdHRyaWJ1dGUgZGF0YVxuICAgICAqL1xuICAgIHVwZGF0ZVByb2R1Y3RBdHRyaWJ1dGVzKGRhdGEpIHtcbiAgICAgICAgY29uc3QgYmVoYXZpb3IgPSBkYXRhLm91dF9vZl9zdG9ja19iZWhhdmlvcjtcbiAgICAgICAgY29uc3QgaW5TdG9ja0lkcyA9IGRhdGEuaW5fc3RvY2tfYXR0cmlidXRlcztcbiAgICAgICAgY29uc3Qgb3V0T2ZTdG9ja01lc3NhZ2UgPSBgICgke2RhdGEub3V0X29mX3N0b2NrX21lc3NhZ2V9KWA7XG5cbiAgICAgICAgaWYgKGJlaGF2aW9yICE9PSAnaGlkZV9vcHRpb24nICYmIGJlaGF2aW9yICE9PSAnbGFiZWxfb3B0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgJCgnW2RhdGEtcHJvZHVjdC1hdHRyaWJ1dGUtdmFsdWVdJywgdGhpcy4kc2NvcGUpLmVhY2goKGksIGF0dHJpYnV0ZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgJGF0dHJpYnV0ZSA9ICQoYXR0cmlidXRlKTtcblxuICAgICAgICAgICAgY29uc3QgYXR0cklkID0gcGFyc2VJbnQoJGF0dHJpYnV0ZS5kYXRhKCdwcm9kdWN0QXR0cmlidXRlVmFsdWUnKSwgMTApO1xuXG5cbiAgICAgICAgICAgIGlmIChpblN0b2NrSWRzLmluZGV4T2YoYXR0cklkKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVuYWJsZUF0dHJpYnV0ZSgkYXR0cmlidXRlLCBiZWhhdmlvciwgb3V0T2ZTdG9ja01lc3NhZ2UpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRpc2FibGVBdHRyaWJ1dGUoJGF0dHJpYnV0ZSwgYmVoYXZpb3IsIG91dE9mU3RvY2tNZXNzYWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2sgZm9yIGZyYWdtZW50IGlkZW50aWZpZXIgaW4gVVJMIHJlcXVlc3RpbmcgYSBzcGVjaWZpYyB0YWJcbiAgICAgKi9cbiAgICBnZXRUYWJSZXF1ZXN0cygpIHtcbiAgICAgICAgaWYgKHdpbmRvdy5sb2NhdGlvbi5oYXNoICYmIHdpbmRvdy5sb2NhdGlvbi5oYXNoLmluZGV4T2YoJyN0YWItJykgPT09IDApIHtcbiAgICAgICAgICAgIGNvbnN0ICRhY3RpdmVUYWIgPSAkKCcudGFicycpLmhhcyhgW2hyZWY9JyR7d2luZG93LmxvY2F0aW9uLmhhc2h9J11gKTtcbiAgICAgICAgICAgIGNvbnN0ICR0YWJDb250ZW50ID0gJChgJHt3aW5kb3cubG9jYXRpb24uaGFzaH1gKTtcblxuICAgICAgICAgICAgaWYgKCRhY3RpdmVUYWIubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICRhY3RpdmVUYWIuZmluZCgnLnRhYicpXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnaXMtYWN0aXZlJylcbiAgICAgICAgICAgICAgICAgICAgLmhhcyhgW2hyZWY9JyR7d2luZG93LmxvY2F0aW9uLmhhc2h9J11gKVxuICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ2lzLWFjdGl2ZScpO1xuXG4gICAgICAgICAgICAgICAgJHRhYkNvbnRlbnQuYWRkQ2xhc3MoJ2lzLWFjdGl2ZScpXG4gICAgICAgICAgICAgICAgICAgIC5zaWJsaW5ncygpXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnaXMtYWN0aXZlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTaW5jZSAkcHJvZHVjdFZpZXcgY2FuIGJlIGR5bmFtaWNhbGx5IGluc2VydGVkIHVzaW5nIHJlbmRlcl93aXRoLFxuICAgICAqIFdlIGhhdmUgdG8gcmV0cmlldmUgdGhlIHJlc3BlY3RpdmUgZWxlbWVudHNcbiAgICAgKlxuICAgICAqIEBwYXJhbSAkc2NvcGVcbiAgICAgKi9cbiAgICBnZXRWaWV3TW9kZWwoJHNjb3BlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAkcHJpY2VXaXRoVGF4OiAkKCdbZGF0YS1wcm9kdWN0LXByaWNlLXdpdGgtdGF4XScsICRzY29wZSksXG4gICAgICAgICAgICAkcHJpY2VXaXRob3V0VGF4OiAkKCdbZGF0YS1wcm9kdWN0LXByaWNlLXdpdGhvdXQtdGF4XScsICRzY29wZSksXG4gICAgICAgICAgICBycnBXaXRoVGF4OiB7XG4gICAgICAgICAgICAgICAgJGRpdjogJCgnLnJycC1wcmljZS0td2l0aFRheCcsICRzY29wZSksXG4gICAgICAgICAgICAgICAgJHNwYW46ICQoJ1tkYXRhLXByb2R1Y3QtcnJwLXdpdGgtdGF4XScsICRzY29wZSksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcnJwV2l0aG91dFRheDoge1xuICAgICAgICAgICAgICAgICRkaXY6ICQoJy5ycnAtcHJpY2UtLXdpdGhvdXRUYXgnLCAkc2NvcGUpLFxuICAgICAgICAgICAgICAgICRzcGFuOiAkKCdbZGF0YS1wcm9kdWN0LXJycC1wcmljZS13aXRob3V0LXRheF0nLCAkc2NvcGUpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5vblNhbGVXaXRoVGF4OiB7XG4gICAgICAgICAgICAgICAgJGRpdjogJCgnLm5vbi1zYWxlLXByaWNlLS13aXRoVGF4JywgJHNjb3BlKSxcbiAgICAgICAgICAgICAgICAkc3BhbjogJCgnW2RhdGEtcHJvZHVjdC1ub24tc2FsZS1wcmljZS13aXRoLXRheF0nLCAkc2NvcGUpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5vblNhbGVXaXRob3V0VGF4OiB7XG4gICAgICAgICAgICAgICAgJGRpdjogJCgnLm5vbi1zYWxlLXByaWNlLS13aXRob3V0VGF4JywgJHNjb3BlKSxcbiAgICAgICAgICAgICAgICAkc3BhbjogJCgnW2RhdGEtcHJvZHVjdC1ub24tc2FsZS1wcmljZS13aXRob3V0LXRheF0nLCAkc2NvcGUpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHByaWNlU2F2ZWQ6IHtcbiAgICAgICAgICAgICAgICAkZGl2OiAkKCcucHJpY2Utc2VjdGlvbi0tc2F2aW5nJywgJHNjb3BlKSxcbiAgICAgICAgICAgICAgICAkc3BhbjogJCgnW2RhdGEtcHJvZHVjdC1wcmljZS1zYXZlZF0nLCAkc2NvcGUpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHByaWNlTm93TGFiZWw6IHtcbiAgICAgICAgICAgICAgICAkc3BhbjogJCgnLnByaWNlLW5vdy1sYWJlbCcsICRzY29wZSksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHJpY2VMYWJlbDoge1xuICAgICAgICAgICAgICAgICRzcGFuOiAkKCcucHJpY2UtbGFiZWwnLCAkc2NvcGUpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICR3ZWlnaHQ6ICQoJy5wcm9kdWN0Vmlldy1pbmZvIFtkYXRhLXByb2R1Y3Qtd2VpZ2h0XScsICRzY29wZSksXG4gICAgICAgICAgICAkaW5jcmVtZW50czogJCgnLmZvcm0tZmllbGQtLWluY3JlbWVudHMgOmlucHV0JywgJHNjb3BlKSxcbiAgICAgICAgICAgICRhZGRUb0NhcnQ6ICQoJyNmb3JtLWFjdGlvbi1hZGRUb0NhcnQnLCAkc2NvcGUpLFxuICAgICAgICAgICAgJGFkZFRvQ2FydDI6ICQoJyNoYWxvX3N0aWNreV9hZGRUb0NhcnQgI2Zvcm0tYWN0aW9uLWFkZFRvQ2FydDInLCAkc2NvcGUpLFxuICAgICAgICAgICAgJGJ1eUl0Tm93OiAkKCcjZm9ybS1hY3Rpb24tYnV5SXROb3cnLCAkc2NvcGUpLFxuICAgICAgICAgICAgJHN0b2NrTGVmdDogJCgnW2RhdGEtc3RvY2stbGVmdF0nLCAkc2NvcGUpLFxuICAgICAgICAgICAgJHN0b2NrTGVmdFdyYXBwZXI6ICQoJy5wcm9kdWN0Vmlldy1vcHRpb25zU3RvY2snLCAkc2NvcGUpLCAgXG4gICAgICAgICAgICAkd2lzaGxpc3RWYXJpYXRpb246ICQoJ1tkYXRhLXdpc2hsaXN0LWFkZF0gW25hbWU9XCJ2YXJpYXRpb25faWRcIl0nLCAkc2NvcGUpLFxuICAgICAgICAgICAgc3RvY2s6IHtcbiAgICAgICAgICAgICAgICAkY29udGFpbmVyOiAkKCcuZm9ybS1maWVsZC0tc3RvY2snLCAkc2NvcGUpLFxuICAgICAgICAgICAgICAgICRpbnB1dDogJCgnW2RhdGEtcHJvZHVjdC1zdG9ja10nLCAkc2NvcGUpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNrdToge1xuICAgICAgICAgICAgICAgICRsYWJlbDogJCgnZHQuc2t1LWxhYmVsJywgJHNjb3BlKSxcbiAgICAgICAgICAgICAgICAkdmFsdWU6ICQoJ1tkYXRhLXByb2R1Y3Qtc2t1XScsICRzY29wZSksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdXBjOiB7XG4gICAgICAgICAgICAgICAgJGxhYmVsOiAkKCdkdC51cGMtbGFiZWwnLCAkc2NvcGUpLFxuICAgICAgICAgICAgICAgICR2YWx1ZTogJCgnW2RhdGEtcHJvZHVjdC11cGNdJywgJHNjb3BlKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBxdWFudGl0eToge1xuICAgICAgICAgICAgICAgICR0ZXh0OiAkKCcuaW5jcmVtZW50VG90YWwnLCAkc2NvcGUpLFxuICAgICAgICAgICAgICAgICRpbnB1dDogJCgnW25hbWU9cXR5XFxcXFtcXFxcXV0nLCAkc2NvcGUpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICRidWxrUHJpY2luZzogJCgnLnByb2R1Y3RWaWV3LWluZm8tYnVsa1ByaWNpbmcnLCAkc2NvcGUpLFxuICAgICAgICAgICAgJHdhbGxldEJ1dHRvbnM6ICQoJ1tkYXRhLWFkZC10by1jYXJ0LXdhbGxldC1idXR0b25zXScsICRzY29wZSksXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGlkZSB0aGUgcHJpY2luZyBlbGVtZW50cyB0aGF0IHdpbGwgc2hvdyB1cCBvbmx5IHdoZW4gdGhlIHByaWNlIGV4aXN0cyBpbiBBUElcbiAgICAgKiBAcGFyYW0gdmlld01vZGVsXG4gICAgICovXG4gICAgY2xlYXJQcmljaW5nTm90Rm91bmQodmlld01vZGVsKSB7XG4gICAgICAgIHZpZXdNb2RlbC5ycnBXaXRoVGF4LiRkaXYuaGlkZSgpO1xuICAgICAgICB2aWV3TW9kZWwucnJwV2l0aG91dFRheC4kZGl2LmhpZGUoKTtcbiAgICAgICAgdmlld01vZGVsLm5vblNhbGVXaXRoVGF4LiRkaXYuaGlkZSgpO1xuICAgICAgICB2aWV3TW9kZWwubm9uU2FsZVdpdGhvdXRUYXguJGRpdi5oaWRlKCk7XG4gICAgICAgIHZpZXdNb2RlbC5wcmljZVNhdmVkLiRkaXYuaGlkZSgpO1xuICAgICAgICB2aWV3TW9kZWwucHJpY2VOb3dMYWJlbC4kc3Bhbi5oaWRlKCk7XG4gICAgICAgIHZpZXdNb2RlbC5wcmljZUxhYmVsLiRzcGFuLmhpZGUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgdGhlIHZpZXcgb2YgcHJpY2UsIG1lc3NhZ2VzLCBTS1UgYW5kIHN0b2NrIG9wdGlvbnMgd2hlbiBhIHByb2R1Y3Qgb3B0aW9uIGNoYW5nZXNcbiAgICAgKiBAcGFyYW0gIHtPYmplY3R9IGRhdGEgUHJvZHVjdCBhdHRyaWJ1dGUgZGF0YVxuICAgICAqL1xuICAgIHVwZGF0ZVZpZXcoZGF0YSwgY29udGVudCA9IG51bGwpIHtcbiAgICAgICAgY29uc3Qgdmlld01vZGVsID0gdGhpcy5nZXRWaWV3TW9kZWwodGhpcy4kc2NvcGUpO1xuXG4gICAgICAgIGlmIChpc051bWJlcihkYXRhLnN0b2NrKSkge1xuICAgICAgICAgICBpZigoZGF0YS5zdG9jayA8PSBwYXJzZUludCh0aGlzLmNvbnRleHQudGhlbWVTZXR0aW5ncy5oYWxvX3N0b2NrX2xldmVsX2xpbWl0KSkgJiYgKGRhdGEuc3RvY2sgPiAwKSkge1xuICAgICAgICAgICAgICAgIHZpZXdNb2RlbC4kc3RvY2tMZWZ0V3JhcHBlci5yZW1vdmVDbGFzcygndS1oaWRkZW5WaXN1YWxseScpO1xuICAgICAgICAgICAgICAgIHZpZXdNb2RlbC4kc3RvY2tMZWZ0LnRleHQoZGF0YS5zdG9jayk7XG4gICAgICAgICAgICB9IGVsc2V7XG4gICAgICAgICAgICAgICAgdmlld01vZGVsLiRzdG9ja0xlZnRXcmFwcGVyLmFkZENsYXNzKCd1LWhpZGRlblZpc3VhbGx5Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNob3dNZXNzYWdlQm94KGRhdGEuc3RvY2tfbWVzc2FnZSB8fCBkYXRhLnB1cmNoYXNpbmdfbWVzc2FnZSk7XG5cbiAgICAgICAgaWYgKGlzT2JqZWN0KGRhdGEucHJpY2UpKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVByaWNlVmlldyh2aWV3TW9kZWwsIGRhdGEucHJpY2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzT2JqZWN0KGRhdGEud2VpZ2h0KSkge1xuICAgICAgICAgICAgdmlld01vZGVsLiR3ZWlnaHQuaHRtbChkYXRhLndlaWdodC5mb3JtYXR0ZWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2V0IHZhcmlhdGlvbl9pZCBpZiBpdCBleGlzdHMgZm9yIGFkZGluZyB0byB3aXNobGlzdFxuICAgICAgICBpZiAoZGF0YS52YXJpYW50SWQpIHtcbiAgICAgICAgICAgIHZpZXdNb2RlbC4kd2lzaGxpc3RWYXJpYXRpb24udmFsKGRhdGEudmFyaWFudElkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIFNLVSBpcyBhdmFpbGFibGVcbiAgICAgICAgaWYgKGRhdGEuc2t1KSB7XG4gICAgICAgICAgICB2aWV3TW9kZWwuc2t1LiR2YWx1ZS50ZXh0KGRhdGEuc2t1KTtcbiAgICAgICAgICAgIHZpZXdNb2RlbC5za3UuJGxhYmVsLnNob3coKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZpZXdNb2RlbC5za3UuJGxhYmVsLmhpZGUoKTtcbiAgICAgICAgICAgIHZpZXdNb2RlbC5za3UuJHZhbHVlLnRleHQoJycpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgVVBDIGlzIGF2YWlsYWJsZVxuICAgICAgICBpZiAoZGF0YS51cGMpIHtcbiAgICAgICAgICAgIHZpZXdNb2RlbC51cGMuJHZhbHVlLnRleHQoZGF0YS51cGMpO1xuICAgICAgICAgICAgdmlld01vZGVsLnVwYy4kbGFiZWwuc2hvdygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmlld01vZGVsLnVwYy4kbGFiZWwuaGlkZSgpO1xuICAgICAgICAgICAgdmlld01vZGVsLnVwYy4kdmFsdWUudGV4dCgnJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpZiBzdG9jayB2aWV3IGlzIG9uIChDUCBzZXR0aW5ncylcbiAgICAgICAgaWYgKHZpZXdNb2RlbC5zdG9jay4kY29udGFpbmVyLmxlbmd0aCAmJiBpc051bWJlcihkYXRhLnN0b2NrKSkge1xuICAgICAgICAgICAgLy8gaWYgdGhlIHN0b2NrIGNvbnRhaW5lciBpcyBoaWRkZW4sIHNob3dcbiAgICAgICAgICAgIHZpZXdNb2RlbC5zdG9jay4kY29udGFpbmVyLnJlbW92ZUNsYXNzKCd1LWhpZGRlblZpc3VhbGx5Jyk7XG5cbiAgICAgICAgICAgIHZpZXdNb2RlbC5zdG9jay4kaW5wdXQudGV4dChkYXRhLnN0b2NrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZpZXdNb2RlbC5zdG9jay4kY29udGFpbmVyLmFkZENsYXNzKCd1LWhpZGRlblZpc3VhbGx5Jyk7XG4gICAgICAgICAgICB2aWV3TW9kZWwuc3RvY2suJGlucHV0LnRleHQoZGF0YS5zdG9jayk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnVwZGF0ZURlZmF1bHRBdHRyaWJ1dGVzRm9yT09TKGRhdGEpO1xuICAgICAgICB0aGlzLnVwZGF0ZVdhbGxldEJ1dHRvbnNWaWV3KGRhdGEpO1xuXG4gICAgICAgIC8vIElmIEJ1bGsgUHJpY2luZyByZW5kZXJlZCBIVE1MIGlzIGF2YWlsYWJsZVxuICAgICAgICBpZiAoZGF0YS5idWxrX2Rpc2NvdW50X3JhdGVzICYmIGNvbnRlbnQpIHtcbiAgICAgICAgICAgIHZpZXdNb2RlbC4kYnVsa1ByaWNpbmcuaHRtbChjb250ZW50KTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgKGRhdGEuYnVsa19kaXNjb3VudF9yYXRlcykgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB2aWV3TW9kZWwuJGJ1bGtQcmljaW5nLmh0bWwoJycpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgYWRkVG9DYXJ0V3JhcHBlciA9ICQoJyNhZGQtdG8tY2FydC13cmFwcGVyJyk7XG5cbiAgICAgICAgaWYgKGFkZFRvQ2FydFdyYXBwZXIuaXMoJzpoaWRkZW4nKSAmJiBkYXRhLnB1cmNoYXNhYmxlKSB7XG4gICAgICAgICAgICBhZGRUb0NhcnRXcmFwcGVyLnNob3coKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGZvcm1XaXNobGlzdCA9ICQoJy5mb3JtLXdpc2hsaXN0Jyk7XG5cbiAgICAgICAgaWYgKGZvcm1XaXNobGlzdC5pcygnOmhpZGRlbicpICYmIGRhdGEucHVyY2hhc2FibGUpIHtcbiAgICAgICAgICAgIGZvcm1XaXNobGlzdC5zaG93KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgdGhlIHZpZXcgb2YgcHJpY2UsIG1lc3NhZ2VzLCBTS1UgYW5kIHN0b2NrIG9wdGlvbnMgd2hlbiBhIHByb2R1Y3Qgb3B0aW9uIGNoYW5nZXNcbiAgICAgKiBAcGFyYW0gIHtPYmplY3R9IGRhdGEgUHJvZHVjdCBhdHRyaWJ1dGUgZGF0YVxuICAgICAqL1xuICAgIHVwZGF0ZVByaWNlVmlldyh2aWV3TW9kZWwsIHByaWNlKSB7XG4gICAgICAgIHRoaXMuY2xlYXJQcmljaW5nTm90Rm91bmQodmlld01vZGVsKTtcblxuICAgICAgICBpZiAocHJpY2Uud2l0aF90YXgpIHtcbiAgICAgICAgICAgIGNvbnN0IHVwZGF0ZWRQcmljZSA9IHByaWNlLnByaWNlX3JhbmdlID9cbiAgICAgICAgICAgICAgICBgJHtwcmljZS5wcmljZV9yYW5nZS5taW4ud2l0aF90YXguZm9ybWF0dGVkfSAtICR7cHJpY2UucHJpY2VfcmFuZ2UubWF4LndpdGhfdGF4LmZvcm1hdHRlZH1gXG4gICAgICAgICAgICAgICAgOiBwcmljZS53aXRoX3RheC5mb3JtYXR0ZWQ7XG4gICAgICAgICAgICB2aWV3TW9kZWwucHJpY2VMYWJlbC4kc3Bhbi5zaG93KCk7XG4gICAgICAgICAgICB2aWV3TW9kZWwuJHByaWNlV2l0aFRheC5odG1sKHVwZGF0ZWRQcmljZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocHJpY2Uud2l0aG91dF90YXgpIHtcbiAgICAgICAgICAgIGNvbnN0IHVwZGF0ZWRQcmljZSA9IHByaWNlLnByaWNlX3JhbmdlID9cbiAgICAgICAgICAgICAgICBgJHtwcmljZS5wcmljZV9yYW5nZS5taW4ud2l0aG91dF90YXguZm9ybWF0dGVkfSAtICR7cHJpY2UucHJpY2VfcmFuZ2UubWF4LndpdGhvdXRfdGF4LmZvcm1hdHRlZH1gXG4gICAgICAgICAgICAgICAgOiBwcmljZS53aXRob3V0X3RheC5mb3JtYXR0ZWQ7XG4gICAgICAgICAgICB2aWV3TW9kZWwucHJpY2VMYWJlbC4kc3Bhbi5zaG93KCk7XG4gICAgICAgICAgICB2aWV3TW9kZWwuJHByaWNlV2l0aG91dFRheC5odG1sKHVwZGF0ZWRQcmljZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocHJpY2UucnJwX3dpdGhfdGF4KSB7XG4gICAgICAgICAgICB2aWV3TW9kZWwucnJwV2l0aFRheC4kZGl2LnNob3coKTtcbiAgICAgICAgICAgIHZpZXdNb2RlbC5ycnBXaXRoVGF4LiRzcGFuLmh0bWwocHJpY2UucnJwX3dpdGhfdGF4LmZvcm1hdHRlZCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocHJpY2UucnJwX3dpdGhvdXRfdGF4KSB7XG4gICAgICAgICAgICB2aWV3TW9kZWwucnJwV2l0aG91dFRheC4kZGl2LnNob3coKTtcbiAgICAgICAgICAgIHZpZXdNb2RlbC5ycnBXaXRob3V0VGF4LiRzcGFuLmh0bWwocHJpY2UucnJwX3dpdGhvdXRfdGF4LmZvcm1hdHRlZCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocHJpY2Uuc2F2ZWQpIHtcbiAgICAgICAgICAgIHZpZXdNb2RlbC5wcmljZVNhdmVkLiRkaXYuc2hvdygpO1xuICAgICAgICAgICAgdmlld01vZGVsLnByaWNlU2F2ZWQuJHNwYW4uaHRtbChwcmljZS5zYXZlZC5mb3JtYXR0ZWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHByaWNlLm5vbl9zYWxlX3ByaWNlX3dpdGhfdGF4KSB7XG4gICAgICAgICAgICB2aWV3TW9kZWwucHJpY2VMYWJlbC4kc3Bhbi5oaWRlKCk7XG4gICAgICAgICAgICB2aWV3TW9kZWwubm9uU2FsZVdpdGhUYXguJGRpdi5zaG93KCk7XG4gICAgICAgICAgICB2aWV3TW9kZWwucHJpY2VOb3dMYWJlbC4kc3Bhbi5zaG93KCk7XG4gICAgICAgICAgICB2aWV3TW9kZWwubm9uU2FsZVdpdGhUYXguJHNwYW4uaHRtbChwcmljZS5ub25fc2FsZV9wcmljZV93aXRoX3RheC5mb3JtYXR0ZWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHByaWNlLm5vbl9zYWxlX3ByaWNlX3dpdGhvdXRfdGF4KSB7XG4gICAgICAgICAgICB2aWV3TW9kZWwucHJpY2VMYWJlbC4kc3Bhbi5oaWRlKCk7XG4gICAgICAgICAgICB2aWV3TW9kZWwubm9uU2FsZVdpdGhvdXRUYXguJGRpdi5zaG93KCk7XG4gICAgICAgICAgICB2aWV3TW9kZWwucHJpY2VOb3dMYWJlbC4kc3Bhbi5zaG93KCk7XG4gICAgICAgICAgICB2aWV3TW9kZWwubm9uU2FsZVdpdGhvdXRUYXguJHNwYW4uaHRtbChwcmljZS5ub25fc2FsZV9wcmljZV93aXRob3V0X3RheC5mb3JtYXR0ZWQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2hvdyBhbiBtZXNzYWdlIGJveCBpZiBhIG1lc3NhZ2UgaXMgcGFzc2VkXG4gICAgICogSGlkZSB0aGUgYm94IGlmIHRoZSBtZXNzYWdlIGlzIGVtcHR5XG4gICAgICogQHBhcmFtICB7U3RyaW5nfSBtZXNzYWdlXG4gICAgICovXG4gICAgc2hvd01lc3NhZ2VCb3gobWVzc2FnZSwgJHNjb3BlKSB7XG4gICAgICAgIGNvbnN0ICRtZXNzYWdlQm94ID0gJCgnLnByb2R1Y3RBdHRyaWJ1dGVzLW1lc3NhZ2UnKTtcblxuICAgICAgICBpZiAobWVzc2FnZSkge1xuICAgICAgICAgICAgJCgnLmFsZXJ0Qm94LW1lc3NhZ2UnLCAkbWVzc2FnZUJveCkudGV4dChtZXNzYWdlKTtcbiAgICAgICAgICAgICRtZXNzYWdlQm94LnNob3coKTtcbiAgICAgICAgICAgICQoJy5wcm9kdWN0Vmlldy1ub3RpZnlNZScsICRzY29wZSkuc2hvdygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJG1lc3NhZ2VCb3guaGlkZSgpO1xuICAgICAgICAgICAgJCgnLnByb2R1Y3RWaWV3LW5vdGlmeU1lJywgJHNjb3BlKS5oaWRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB1cGRhdGVEZWZhdWx0QXR0cmlidXRlc0Zvck9PUyhkYXRhKSB7XG4gICAgICAgIGNvbnN0IHZpZXdNb2RlbCA9IHRoaXMuZ2V0Vmlld01vZGVsKHRoaXMuJHNjb3BlKTtcbiAgICAgICAgaWYgKCFkYXRhLnB1cmNoYXNhYmxlIHx8ICFkYXRhLmluc3RvY2spIHtcbiAgICAgICAgICAgIHZpZXdNb2RlbC4kYWRkVG9DYXJ0LnByb3AoJ2Rpc2FibGVkJywgdHJ1ZSk7XG4gICAgICAgICAgICB2aWV3TW9kZWwuJGFkZFRvQ2FydDIucHJvcCgnZGlzYWJsZWQnLCB0cnVlKTtcbiAgICAgICAgICAgIHZpZXdNb2RlbC4kYnV5SXROb3cucHJvcCgnZGlzYWJsZWQnLCB0cnVlKTtcbiAgICAgICAgICAgIHZpZXdNb2RlbC4kaW5jcmVtZW50cy5wcm9wKCdkaXNhYmxlZCcsIHRydWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmlld01vZGVsLiRhZGRUb0NhcnQucHJvcCgnZGlzYWJsZWQnLCBmYWxzZSk7XG4gICAgICAgICAgICB2aWV3TW9kZWwuJGFkZFRvQ2FydDIucHJvcCgnZGlzYWJsZWQnLCBmYWxzZSk7XG4gICAgICAgICAgICB2aWV3TW9kZWwuJGJ1eUl0Tm93LnByb3AoJ2Rpc2FibGVkJywgZmFsc2UpO1xuICAgICAgICAgICAgdmlld01vZGVsLiRpbmNyZW1lbnRzLnByb3AoJ2Rpc2FibGVkJywgZmFsc2UpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdXBkYXRlV2FsbGV0QnV0dG9uc1ZpZXcoZGF0YSkge1xuICAgICAgICB0aGlzLnRvZ2dsZVdhbGxldEJ1dHRvbnNWaXNpYmlsaXR5KGRhdGEucHVyY2hhc2FibGUgJiYgZGF0YS5pbnN0b2NrKTtcbiAgICB9XG5cbiAgICB0b2dnbGVXYWxsZXRCdXR0b25zVmlzaWJpbGl0eShzaG91bGRTaG93KSB7XG4gICAgICAgIGNvbnN0IHZpZXdNb2RlbCA9IHRoaXMuZ2V0Vmlld01vZGVsKHRoaXMuJHNjb3BlKTtcblxuICAgICAgICBpZiAoc2hvdWxkU2hvdykge1xuICAgICAgICAgICAgdmlld01vZGVsLiR3YWxsZXRCdXR0b25zLnNob3coKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZpZXdNb2RlbC4kd2FsbGV0QnV0dG9ucy5oaWRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBlbmFibGVBdHRyaWJ1dGUoJGF0dHJpYnV0ZSwgYmVoYXZpb3IsIG91dE9mU3RvY2tNZXNzYWdlKSB7XG4gICAgICAgIGlmICh0aGlzLmdldEF0dHJpYnV0ZVR5cGUoJGF0dHJpYnV0ZSkgPT09ICdzZXQtc2VsZWN0Jykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW5hYmxlU2VsZWN0T3B0aW9uQXR0cmlidXRlKCRhdHRyaWJ1dGUsIGJlaGF2aW9yLCBvdXRPZlN0b2NrTWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYmVoYXZpb3IgPT09ICdoaWRlX29wdGlvbicpIHtcbiAgICAgICAgICAgICRhdHRyaWJ1dGUuc2hvdygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJGF0dHJpYnV0ZS5yZW1vdmVDbGFzcygndW5hdmFpbGFibGUnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRpc2FibGVBdHRyaWJ1dGUoJGF0dHJpYnV0ZSwgYmVoYXZpb3IsIG91dE9mU3RvY2tNZXNzYWdlKSB7XG4gICAgICAgIGlmICh0aGlzLmdldEF0dHJpYnV0ZVR5cGUoJGF0dHJpYnV0ZSkgPT09ICdzZXQtc2VsZWN0Jykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGlzYWJsZVNlbGVjdE9wdGlvbkF0dHJpYnV0ZSgkYXR0cmlidXRlLCBiZWhhdmlvciwgb3V0T2ZTdG9ja01lc3NhZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJlaGF2aW9yID09PSAnaGlkZV9vcHRpb24nKSB7XG4gICAgICAgICAgICAkYXR0cmlidXRlLmhpZGUoMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkYXR0cmlidXRlLmFkZENsYXNzKCd1bmF2YWlsYWJsZScpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0QXR0cmlidXRlVHlwZSgkYXR0cmlidXRlKSB7XG4gICAgICAgIGNvbnN0ICRwYXJlbnQgPSAkYXR0cmlidXRlLmNsb3Nlc3QoJ1tkYXRhLXByb2R1Y3QtYXR0cmlidXRlXScpO1xuXG4gICAgICAgIHJldHVybiAkcGFyZW50ID8gJHBhcmVudC5kYXRhKCdwcm9kdWN0QXR0cmlidXRlJykgOiBudWxsO1xuICAgIH1cblxuICAgIGRpc2FibGVTZWxlY3RPcHRpb25BdHRyaWJ1dGUoJGF0dHJpYnV0ZSwgYmVoYXZpb3IsIG91dE9mU3RvY2tNZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0ICRzZWxlY3QgPSAkYXR0cmlidXRlLnBhcmVudCgpO1xuXG4gICAgICAgIGlmIChiZWhhdmlvciA9PT0gJ2hpZGVfb3B0aW9uJykge1xuICAgICAgICAgICAgJGF0dHJpYnV0ZS50b2dnbGVPcHRpb24oZmFsc2UpO1xuICAgICAgICAgICAgLy8gSWYgdGhlIGF0dHJpYnV0ZSBpcyB0aGUgc2VsZWN0ZWQgb3B0aW9uIGluIGEgc2VsZWN0IGRyb3Bkb3duLCBzZWxlY3QgdGhlIGZpcnN0IG9wdGlvbiAoTUVSQy02MzkpXG4gICAgICAgICAgICBpZiAoJHNlbGVjdC52YWwoKSA9PT0gJGF0dHJpYnV0ZS5hdHRyKCd2YWx1ZScpKSB7XG4gICAgICAgICAgICAgICAgJHNlbGVjdFswXS5zZWxlY3RlZEluZGV4ID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICRhdHRyaWJ1dGUuYXR0cignZGlzYWJsZWQnLCAnZGlzYWJsZWQnKTtcbiAgICAgICAgICAgICRhdHRyaWJ1dGUuaHRtbCgkYXR0cmlidXRlLmh0bWwoKS5yZXBsYWNlKG91dE9mU3RvY2tNZXNzYWdlLCAnJykgKyBvdXRPZlN0b2NrTWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBlbmFibGVTZWxlY3RPcHRpb25BdHRyaWJ1dGUoJGF0dHJpYnV0ZSwgYmVoYXZpb3IsIG91dE9mU3RvY2tNZXNzYWdlKSB7XG4gICAgICAgIGlmIChiZWhhdmlvciA9PT0gJ2hpZGVfb3B0aW9uJykge1xuICAgICAgICAgICAgJGF0dHJpYnV0ZS50b2dnbGVPcHRpb24odHJ1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkYXR0cmlidXRlLnByb3AoJ2Rpc2FibGVkJywgZmFsc2UpO1xuICAgICAgICAgICAgJGF0dHJpYnV0ZS5odG1sKCRhdHRyaWJ1dGUuaHRtbCgpLnJlcGxhY2Uob3V0T2ZTdG9ja01lc3NhZ2UsICcnKSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgdXRpbHMgZnJvbSAnQGJpZ2NvbW1lcmNlL3N0ZW5jaWwtdXRpbHMnO1xuaW1wb3J0IFByb2R1Y3REZXRhaWxzQmFzZSwgeyBvcHRpb25DaGFuZ2VEZWNvcmF0b3IgfSBmcm9tICcuL3Byb2R1Y3QtZGV0YWlscy1iYXNlJztcbmltcG9ydCAnZm91bmRhdGlvbi1zaXRlcy9qcy9mb3VuZGF0aW9uL2ZvdW5kYXRpb24nO1xuaW1wb3J0ICdmb3VuZGF0aW9uLXNpdGVzL2pzL2ZvdW5kYXRpb24vZm91bmRhdGlvbi5yZXZlYWwnO1xuaW1wb3J0IEltYWdlR2FsbGVyeSBmcm9tICcuLi9wcm9kdWN0L2ltYWdlLWdhbGxlcnknO1xuaW1wb3J0IG1vZGFsRmFjdG9yeSwgeyBhbGVydE1vZGFsLCBzaG93QWxlcnRNb2RhbCB9IGZyb20gJy4uL2dsb2JhbC9tb2RhbCc7XG5pbXBvcnQgeyBpc0VtcHR5LCBpc1BsYWluT2JqZWN0IH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBub2QgZnJvbSAnLi4vY29tbW9uL25vZCc7XG5pbXBvcnQgeyBhbm5vdW5jZUlucHV0RXJyb3JNZXNzYWdlIH0gZnJvbSAnLi4vY29tbW9uL3V0aWxzL2Zvcm0tdXRpbHMnO1xuaW1wb3J0IGZvcm1zIGZyb20gJy4uL2NvbW1vbi9tb2RlbHMvZm9ybXMnO1xuaW1wb3J0IHsgbm9ybWFsaXplRm9ybURhdGEgfSBmcm9tICcuL3V0aWxzL2FwaSc7XG5pbXBvcnQgeyBpc0Jyb3dzZXJJRSwgY29udmVydEludG9BcnJheSB9IGZyb20gJy4vdXRpbHMvaWUtaGVscGVycyc7XG5pbXBvcnQgYmFubmVyVXRpbHMgZnJvbSAnLi91dGlscy9iYW5uZXItdXRpbHMnO1xuaW1wb3J0IGhhbG9DYWxjdWxhdGVGcmVlU2hpcHBpbmcgZnJvbSAnLi4vaGFsb3RoZW1lcy9oYWxvQ2FsY3VsYXRlRnJlZVNoaXBwaW5nJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJvZHVjdERldGFpbHMgZXh0ZW5kcyBQcm9kdWN0RGV0YWlsc0Jhc2Uge1xuICAgIGNvbnN0cnVjdG9yKCRzY29wZSwgY29udGV4dCwgcHJvZHVjdEF0dHJpYnV0ZXNEYXRhID0ge30pIHtcbiAgICAgICAgc3VwZXIoJHNjb3BlLCBjb250ZXh0KTtcblxuICAgICAgICB0aGlzLiRvdmVybGF5ID0gJCgnW2RhdGEtY2FydC1pdGVtLWFkZF0gLmxvYWRpbmdPdmVybGF5Jyk7XG4gICAgICAgIHRoaXMuaW1hZ2VHYWxsZXJ5ID0gbmV3IEltYWdlR2FsbGVyeSgkKCdbZGF0YS1pbWFnZS1nYWxsZXJ5XScsIHRoaXMuJHNjb3BlKSk7XG4gICAgICAgIHRoaXMuaW1hZ2VHYWxsZXJ5LmluaXQoKTtcbiAgICAgICAgdGhpcy5saXN0ZW5RdWFudGl0eUNoYW5nZSgpO1xuICAgICAgICB0aGlzLmxpc3RlblF1YW50aXR5Q2hhbmdlU3RpY2t5QVRDKCQoJyNoYWxvX3N0aWNreV9hZGRUb0NhcnQnKSk7XG4gICAgICAgIHRoaXMuJHN3YXRjaE9wdGlvbk1lc3NhZ2UgPSAkKCcuc3dhdGNoLW9wdGlvbi1tZXNzYWdlJyk7XG4gICAgICAgIHRoaXMuc3dhdGNoSW5pdE1lc3NhZ2VTdG9yYWdlID0ge307XG4gICAgICAgIHRoaXMuc3dhdGNoR3JvdXBJZExpc3QgPSAkKCdbaWRePVwic3dhdGNoR3JvdXBcIl0nKS5tYXAoKF8sIGdyb3VwKSA9PiAkKGdyb3VwKS5hdHRyKCdpZCcpKTtcbiAgICAgICAgdGhpcy5zdG9yZUluaXRNZXNzYWdlc0ZvclN3YXRjaGVzKCk7XG5cbiAgICAgICAgY29uc3QgJGZvcm0gPSAkKCdmb3JtW2RhdGEtY2FydC1pdGVtLWFkZF0nLCAkc2NvcGUpO1xuXG4gICAgICAgIHRoaXMuYWRkVG9DYXJ0VmFsaWRhdG9yID0gbm9kKHtcbiAgICAgICAgICAgIHN1Ym1pdDogJGZvcm0uZmluZCgnaW5wdXQjZm9ybS1hY3Rpb24tYWRkVG9DYXJ0JyksXG4gICAgICAgICAgICB0YXA6IGFubm91bmNlSW5wdXRFcnJvck1lc3NhZ2UsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0ICRwcm9kdWN0T3B0aW9uc0VsZW1lbnQgPSAkKCdbZGF0YS1wcm9kdWN0LW9wdGlvbi1jaGFuZ2VdJywgJGZvcm0pO1xuICAgICAgICBjb25zdCBoYXNPcHRpb25zID0gJHByb2R1Y3RPcHRpb25zRWxlbWVudC5odG1sKCkudHJpbSgpLmxlbmd0aDtcbiAgICAgICAgY29uc3QgaGFzRGVmYXVsdE9wdGlvbnMgPSAkcHJvZHVjdE9wdGlvbnNFbGVtZW50LmZpbmQoJ1tkYXRhLWRlZmF1bHRdJykubGVuZ3RoO1xuICAgICAgICBjb25zdCAkcHJvZHVjdFN3YXRjaEdyb3VwID0gJCgnW2lkKj1cImF0dHJpYnV0ZV9zd2F0Y2hcIl0nLCAkZm9ybSk7XG4gICAgICAgIGNvbnN0ICRwcm9kdWN0U3dhdGNoTGFiZWxzID0gJCgnLmZvcm0tb3B0aW9uLXN3YXRjaCcsICRmb3JtKTtcbiAgICAgICAgY29uc3QgcGxhY2VTd2F0Y2hMYWJlbEltYWdlID0gKF8sIGxhYmVsKSA9PiB7XG4gICAgICAgICAgICBjb25zdCAkb3B0aW9uSW1hZ2UgPSAkKCcuZm9ybS1vcHRpb24tZXhwYW5kZWQnLCAkKGxhYmVsKSk7XG4gICAgICAgICAgICBjb25zdCBvcHRpb25JbWFnZVdpZHRoID0gJG9wdGlvbkltYWdlLm91dGVyV2lkdGgoKTtcbiAgICAgICAgICAgIGNvbnN0IGV4dGVuZGVkT3B0aW9uSW1hZ2VPZmZzZXRMZWZ0ID0gNTU7XG4gICAgICAgICAgICBjb25zdCB7IHJpZ2h0IH0gPSBsYWJlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgIGNvbnN0IGVtcHR5U3BhY2VUb1NjcmVlblJpZ2h0Qm9yZGVyID0gd2luZG93LnNjcmVlbi53aWR0aCAtIHJpZ2h0O1xuICAgICAgICAgICAgY29uc3Qgc2hpZnRWYWx1ZSA9IG9wdGlvbkltYWdlV2lkdGggLSBlbXB0eVNwYWNlVG9TY3JlZW5SaWdodEJvcmRlcjtcblxuICAgICAgICAgICAgaWYgKGVtcHR5U3BhY2VUb1NjcmVlblJpZ2h0Qm9yZGVyIDwgKG9wdGlvbkltYWdlV2lkdGggKyBleHRlbmRlZE9wdGlvbkltYWdlT2Zmc2V0TGVmdCkpIHtcbiAgICAgICAgICAgICAgICAkb3B0aW9uSW1hZ2UuY3NzKCdsZWZ0JywgYCR7c2hpZnRWYWx1ZSA+IDAgPyAtc2hpZnRWYWx1ZSA6IHNoaWZ0VmFsdWV9cHhgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAkKHdpbmRvdykub24oJ2xvYWQnLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnJlZ2lzdGVyQWRkVG9DYXJ0VmFsaWRhdGlvbigpO1xuICAgICAgICAgICAgJC5lYWNoKCRwcm9kdWN0U3dhdGNoTGFiZWxzLCBwbGFjZVN3YXRjaExhYmVsSW1hZ2UpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoY29udGV4dC5zaG93U3dhdGNoTmFtZXMpIHtcbiAgICAgICAgICAgIHRoaXMuJHN3YXRjaE9wdGlvbk1lc3NhZ2UucmVtb3ZlQ2xhc3MoJ3UtaGlkZGVuJyk7XG5cbiAgICAgICAgICAgICRwcm9kdWN0U3dhdGNoR3JvdXAub24oJ2NoYW5nZScsICh7IHRhcmdldCB9KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3dhdGNoR3JvdXBFbGVtZW50ID0gdGFyZ2V0LnBhcmVudE5vZGUucGFyZW50Tm9kZTtcblxuICAgICAgICAgICAgICAgIHRoaXMuc2hvd1N3YXRjaE5hbWVPbk9wdGlvbigkKHRhcmdldCksICQoc3dhdGNoR3JvdXBFbGVtZW50KSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgJC5lYWNoKCRwcm9kdWN0U3dhdGNoR3JvdXAsIChfLCBlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3dhdGNoR3JvdXBFbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlLnBhcmVudE5vZGU7XG5cbiAgICAgICAgICAgICAgICBpZiAoJChlbGVtZW50KS5pcygnOmNoZWNrZWQnKSkgdGhpcy5zaG93U3dhdGNoTmFtZU9uT3B0aW9uKCQoZWxlbWVudCksICQoc3dhdGNoR3JvdXBFbGVtZW50KSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgICRwcm9kdWN0T3B0aW9uc0VsZW1lbnQub24oJ2NoYW5nZScsIGV2ZW50ID0+IHtcbiAgICAgICAgICAgIHRoaXMucHJvZHVjdE9wdGlvbnNDaGFuZ2VkKGV2ZW50KTtcbiAgICAgICAgICAgIHRoaXMuc2V0UHJvZHVjdFZhcmlhbnQoKTtcbiAgICAgICAgICAgIHRoaXMuc2V0UHJvZHVjdFZhcmlhbnQyKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgICRmb3JtLm9uKCdzdWJtaXQnLCBldmVudCA9PiB7XG4gICAgICAgICAgICB0aGlzLmFkZFRvQ2FydFZhbGlkYXRvci5wZXJmb3JtQ2hlY2soKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuYWRkVG9DYXJ0VmFsaWRhdG9yLmFyZUFsbCgndmFsaWQnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkUHJvZHVjdFRvQ2FydChldmVudCwgJGZvcm1bMF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBpZih0aGlzLmNvbnRleHQudGhlbWVTZXR0aW5ncy5oYWxvX2J1eV9pdF9ub3cgPT0gdHJ1ZSl7XG4gICAgICAgICAgICAkKCcjZm9ybS1hY3Rpb24tYnV5SXROb3cnLCAkc2NvcGUpLm9uKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgICAgICAkZm9ybS5maW5kKCdpbnB1dFtuYW1lPWFjdGlvbl0nKS52YWwoJ2J1eScpO1xuICAgICAgICAgICAgICAgIHRoaXMuZm9jdXNhYmxlRWxlbWVudHMoJGZvcm0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICQoJyNmb3JtLWFjdGlvbi1hZGRUb0NhcnQnLCAkc2NvcGUpLm9uKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgICAgICAkZm9ybS5maW5kKCdpbnB1dFtuYW1lPWFjdGlvbl0nKS52YWwoJ2FkZCcpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBhZGQgdG8gY2FydCAyXG4gICAgICAgIGNvbnN0ICRmb3JtMiA9ICQoJ2Zvcm1bZGF0YS1jYXJ0LWl0ZW0tYWRkLTJdJywgJHNjb3BlKTtcbiAgICAgICAgY29uc3QgJHByb2R1Y3RPcHRpb25zRWxlbWVudDIgPSAkKCdbZGF0YS1wcm9kdWN0LW9wdGlvbi1jaGFuZ2UtMl0nLCAkZm9ybTIpO1xuXG4gICAgICAgICRwcm9kdWN0T3B0aW9uc0VsZW1lbnQyLm9uKCdjaGFuZ2UnLCBldmVudCA9PiB7XG4gICAgICAgICAgICB0aGlzLnByb2R1Y3RPcHRpb25zQ2hhbmdlZDIoZXZlbnQpO1xuICAgICAgICAgICAgdGhpcy5zZXRQcm9kdWN0VmFyaWFudCgpO1xuICAgICAgICAgICAgdGhpcy5zZXRQcm9kdWN0VmFyaWFudDIoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJGZvcm0yLm9uKCdzdWJtaXQnLCBldmVudCA9PiB7XG4gICAgICAgICAgICB0aGlzLmFkZFRvQ2FydFZhbGlkYXRvci5wZXJmb3JtQ2hlY2soKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuYWRkVG9DYXJ0VmFsaWRhdG9yLmFyZUFsbCgndmFsaWQnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkUHJvZHVjdFRvQ2FydChldmVudCwgJGZvcm0yWzBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gVXBkYXRlIHByb2R1Y3QgYXR0cmlidXRlcy4gQWxzbyB1cGRhdGUgdGhlIGluaXRpYWwgdmlldyBpbiBjYXNlIGl0ZW1zIGFyZSBvb3NcbiAgICAgICAgLy8gb3IgaGF2ZSBkZWZhdWx0IHZhcmlhbnQgcHJvcGVydGllcyB0aGF0IGNoYW5nZSB0aGUgdmlld1xuICAgICAgICBpZiAoKGlzRW1wdHkocHJvZHVjdEF0dHJpYnV0ZXNEYXRhKSB8fCBoYXNEZWZhdWx0T3B0aW9ucykgJiYgaGFzT3B0aW9ucykge1xuICAgICAgICAgICAgY29uc3QgJHByb2R1Y3RJZCA9ICQoJ1tuYW1lPVwicHJvZHVjdF9pZFwiXScsICRmb3JtKS52YWwoKTtcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbkNoYW5nZUNhbGxiYWNrID0gb3B0aW9uQ2hhbmdlRGVjb3JhdG9yLmNhbGwodGhpcywgaGFzRGVmYXVsdE9wdGlvbnMpO1xuXG4gICAgICAgICAgICB1dGlscy5hcGkucHJvZHVjdEF0dHJpYnV0ZXMub3B0aW9uQ2hhbmdlKCRwcm9kdWN0SWQsICRmb3JtLnNlcmlhbGl6ZSgpLCAncHJvZHVjdHMvYnVsay1kaXNjb3VudC1yYXRlcycsIG9wdGlvbkNoYW5nZUNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlUHJvZHVjdEF0dHJpYnV0ZXMocHJvZHVjdEF0dHJpYnV0ZXNEYXRhKTtcbiAgICAgICAgICAgIGJhbm5lclV0aWxzLmRpc3BhdGNoUHJvZHVjdEJhbm5lckV2ZW50KHByb2R1Y3RBdHRyaWJ1dGVzRGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICAkcHJvZHVjdE9wdGlvbnNFbGVtZW50LnNob3coKTtcblxuICAgICAgICB0aGlzLnByZXZpZXdNb2RhbCA9IG1vZGFsRmFjdG9yeSgnI3ByZXZpZXdNb2RhbCcpWzBdO1xuICAgIH1cblxuICAgIHJlZ2lzdGVyQWRkVG9DYXJ0VmFsaWRhdGlvbigpIHtcbiAgICAgICAgdGhpcy5hZGRUb0NhcnRWYWxpZGF0b3IuYWRkKFt7XG4gICAgICAgICAgICBzZWxlY3RvcjogJ1tkYXRhLXF1YW50aXR5LWNoYW5nZV0gPiAuZm9ybS1pbnB1dC0taW5jcmVtZW50VG90YWwnLFxuICAgICAgICAgICAgdmFsaWRhdGU6IChjYiwgdmFsKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gZm9ybXMubnVtYmVyc09ubHkodmFsKTtcbiAgICAgICAgICAgICAgICBjYihyZXN1bHQpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZTogdGhpcy5jb250ZXh0LnByb2R1Y3RRdWFudGl0eUVycm9yTWVzc2FnZSxcbiAgICAgICAgfV0pO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmFkZFRvQ2FydFZhbGlkYXRvcjtcbiAgICB9XG5cbiAgICBzdG9yZUluaXRNZXNzYWdlc0ZvclN3YXRjaGVzKCkge1xuICAgICAgICBpZiAodGhpcy5zd2F0Y2hHcm91cElkTGlzdC5sZW5ndGggJiYgaXNFbXB0eSh0aGlzLnN3YXRjaEluaXRNZXNzYWdlU3RvcmFnZSkpIHtcbiAgICAgICAgICAgIHRoaXMuc3dhdGNoR3JvdXBJZExpc3QuZWFjaCgoXywgc3dhdGNoR3JvdXBJZCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5zd2F0Y2hJbml0TWVzc2FnZVN0b3JhZ2Vbc3dhdGNoR3JvdXBJZF0pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zd2F0Y2hJbml0TWVzc2FnZVN0b3JhZ2Vbc3dhdGNoR3JvdXBJZF0gPSAkKGAjJHtzd2F0Y2hHcm91cElkfSB+IC5zd2F0Y2gtb3B0aW9uLW1lc3NhZ2VgKS50ZXh0KCkudHJpbSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZm9jdXNhYmxlRWxlbWVudHMoZm9ybSl7XG4gICAgICAgIHZhciBsaXN0ID0gW107XG5cbiAgICAgICAgZm9ybS5maW5kKCdpbnB1dFt0eXBlPVwicmFkaW9cIl0sIGlucHV0W3R5cGU9XCJ0ZXh0XCJdLCBpbnB1dFt0eXBlPVwiY2hlY2tib3hcIl0sIHRleHRhcmVhLCBzZWxlY3QnKS5vbignaW52YWxpZCcsIGV2ZW50ID0+IHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZvcm0uZmluZCgnaW5wdXRbdHlwZT1cInJhZGlvXCJdLCBpbnB1dFt0eXBlPVwidGV4dFwiXSwgaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdLCB0ZXh0YXJlYSwgc2VsZWN0JykuZWFjaCgoaW5kZXgsIGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgIGlmKCQoZWxlbWVudCkuaXMoJzppbnZhbGlkJykpe1xuICAgICAgICAgICAgICAgIGxpc3QucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIGluZGV4OiBpbmRleCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogZWxlbWVudFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBpZihsaXN0Lmxlbmd0aCA+IDApe1xuICAgICAgICAgICAgdmFyIGhlaWdodCA9ICQod2luZG93KS5zY3JvbGxUb3AoKSxcbiAgICAgICAgICAgICAgICBmb3JtSGVpZ2h0ID0gZm9ybS5vZmZzZXQoKS50b3AgKyBmb3JtLmhlaWdodCgpLzI7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmKGhlaWdodCA+IGZvcm1IZWlnaHQpe1xuICAgICAgICAgICAgICAgICQoJ2JvZHksaHRtbCcpLmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgICAgICBzY3JvbGxUb3A6IGZvcm0ub2Zmc2V0KCkudG9wIC0gNTBcbiAgICAgICAgICAgICAgICB9LCA3MDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0UHJvZHVjdFZhcmlhbnQoKSB7XG4gICAgICAgIGNvbnN0IHVuc2F0aXNmaWVkUmVxdWlyZWRGaWVsZHMgPSBbXTtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IFtdO1xuXG4gICAgICAgICQuZWFjaCgkKCdbZGF0YS1wcm9kdWN0LW9wdGlvbi1jaGFuZ2VdIFtkYXRhLXByb2R1Y3QtYXR0cmlidXRlXScpLCAoaW5kZXgsIHZhbHVlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBvcHRpb25MYWJlbCA9IHZhbHVlLmNoaWxkcmVuWzBdLmlubmVyVGV4dDtcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvblRpdGxlID0gb3B0aW9uTGFiZWwuc3BsaXQoJzonKVswXS50cmltKCk7XG4gICAgICAgICAgICBjb25zdCByZXF1aXJlZCA9IG9wdGlvbkxhYmVsLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ3JlcXVpcmVkJyk7XG4gICAgICAgICAgICBjb25zdCB0eXBlID0gdmFsdWUuZ2V0QXR0cmlidXRlKCdkYXRhLXByb2R1Y3QtYXR0cmlidXRlJyk7XG5cbiAgICAgICAgICAgIGlmICgodHlwZSA9PT0gJ2lucHV0LWZpbGUnIHx8IHR5cGUgPT09ICdpbnB1dC10ZXh0JyB8fCB0eXBlID09PSAnaW5wdXQtbnVtYmVyJykgJiYgdmFsdWUucXVlcnlTZWxlY3RvcignaW5wdXQnKS52YWx1ZSA9PT0gJycgJiYgcmVxdWlyZWQpIHtcbiAgICAgICAgICAgICAgICB1bnNhdGlzZmllZFJlcXVpcmVkRmllbGRzLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gJ3RleHRhcmVhJyAmJiB2YWx1ZS5xdWVyeVNlbGVjdG9yKCd0ZXh0YXJlYScpLnZhbHVlID09PSAnJyAmJiByZXF1aXJlZCkge1xuICAgICAgICAgICAgICAgIHVuc2F0aXNmaWVkUmVxdWlyZWRGaWVsZHMucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0eXBlID09PSAnZGF0ZScpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpc1NhdGlzZmllZCA9IEFycmF5LmZyb20odmFsdWUucXVlcnlTZWxlY3RvckFsbCgnc2VsZWN0JykpLmV2ZXJ5KChzZWxlY3QpID0+IHNlbGVjdC5zZWxlY3RlZEluZGV4ICE9PSAwKTtcblxuICAgICAgICAgICAgICAgIGlmIChpc1NhdGlzZmllZCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRlU3RyaW5nID0gQXJyYXkuZnJvbSh2YWx1ZS5xdWVyeVNlbGVjdG9yQWxsKCdzZWxlY3QnKSkubWFwKCh4KSA9PiB4LnZhbHVlKS5qb2luKCctJyk7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMucHVzaChgJHtvcHRpb25UaXRsZX06JHtkYXRlU3RyaW5nfWApO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAocmVxdWlyZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdW5zYXRpc2ZpZWRSZXF1aXJlZEZpZWxkcy5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0eXBlID09PSAnc2V0LXNlbGVjdCcpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3QgPSB2YWx1ZS5xdWVyeVNlbGVjdG9yKCdzZWxlY3QnKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RlZEluZGV4ID0gc2VsZWN0LnNlbGVjdGVkSW5kZXg7XG5cbiAgICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWRJbmRleCAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnB1c2goYCR7b3B0aW9uVGl0bGV9OiR7c2VsZWN0Lm9wdGlvbnNbc2VsZWN0ZWRJbmRleF0uaW5uZXJUZXh0fWApO1xuICAgICAgICAgICAgICAgICAgICAkKHZhbHVlLmNoaWxkcmVuWzBdKS5maW5kKCdbZGF0YS1vcHRpb24tdmFsdWVdJykudGV4dChzZWxlY3Qub3B0aW9uc1tzZWxlY3RlZEluZGV4XS5pbm5lclRleHQpO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAocmVxdWlyZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdW5zYXRpc2ZpZWRSZXF1aXJlZEZpZWxkcy5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0eXBlID09PSAnc2V0LXJlY3RhbmdsZScgfHwgdHlwZSA9PT0gJ3NldC1yYWRpbycgfHwgdHlwZSA9PT0gJ3N3YXRjaCcgfHwgdHlwZSA9PT0gJ2lucHV0LWNoZWNrYm94JyB8fCB0eXBlID09PSAncHJvZHVjdC1saXN0Jykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoZWNrZWQgPSB2YWx1ZS5xdWVyeVNlbGVjdG9yKCc6Y2hlY2tlZCcpO1xuICAgICAgICAgICAgICAgIGlmIChjaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGdldFNlbGVjdGVkT3B0aW9uTGFiZWwgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwcm9kdWN0VmFyaWFudHNsaXN0ID0gY29udmVydEludG9BcnJheSh2YWx1ZS5jaGlsZHJlbik7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXRjaExhYmVsRm9yQ2hlY2tlZElucHV0ID0gaW5wdCA9PiBpbnB0LmRhdGFzZXQucHJvZHVjdEF0dHJpYnV0ZVZhbHVlID09PSBjaGVja2VkLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByb2R1Y3RWYXJpYW50c2xpc3QuZmlsdGVyKG1hdGNoTGFiZWxGb3JDaGVja2VkSW5wdXQpWzBdO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gJ3NldC1yZWN0YW5nbGUnIHx8IHR5cGUgPT09ICdzZXQtcmFkaW8nIHx8IHR5cGUgPT09ICdwcm9kdWN0LWxpc3QnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsYWJlbCA9IGlzQnJvd3NlcklFID8gZ2V0U2VsZWN0ZWRPcHRpb25MYWJlbCgpLmlubmVyVGV4dC50cmltKCkgOiBjaGVja2VkLmxhYmVsc1swXS5pbm5lclRleHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnB1c2goYCR7b3B0aW9uVGl0bGV9OiR7bGFiZWx9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICQodmFsdWUuY2hpbGRyZW5bMF0pLmZpbmQoJ1tkYXRhLW9wdGlvbi12YWx1ZV0nKS50ZXh0KGxhYmVsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSAnc3dhdGNoJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGFiZWwgPSBpc0Jyb3dzZXJJRSA/IGdldFNlbGVjdGVkT3B0aW9uTGFiZWwoKS5jaGlsZHJlblswXSA6IGNoZWNrZWQubGFiZWxzWzBdLmNoaWxkcmVuWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5wdXNoKGAke29wdGlvblRpdGxlfToke2xhYmVsLnRpdGxlfWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQodmFsdWUuY2hpbGRyZW5bMF0pLmZpbmQoJ1tkYXRhLW9wdGlvbi12YWx1ZV0nKS50ZXh0KGxhYmVsLnRpdGxlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSAnaW5wdXQtY2hlY2tib3gnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnB1c2goYCR7b3B0aW9uVGl0bGV9Olllc2ApO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSAnaW5wdXQtY2hlY2tib3gnKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMucHVzaChgJHtvcHRpb25UaXRsZX06Tm9gKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAocmVxdWlyZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdW5zYXRpc2ZpZWRSZXF1aXJlZEZpZWxkcy5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGxldCBwcm9kdWN0VmFyaWFudCA9IHVuc2F0aXNmaWVkUmVxdWlyZWRGaWVsZHMubGVuZ3RoID09PSAwID8gb3B0aW9ucy5zb3J0KCkuam9pbignLCAnKSA6ICd1bnNhdGlzZmllZCc7XG4gICAgICAgIGNvbnN0IHZpZXcgPSAkKCcucHJvZHVjdFZpZXcnKTtcblxuICAgICAgICBpZiAocHJvZHVjdFZhcmlhbnQpIHtcbiAgICAgICAgICAgIHByb2R1Y3RWYXJpYW50ID0gcHJvZHVjdFZhcmlhbnQgPT09ICd1bnNhdGlzZmllZCcgPyAnJyA6IHByb2R1Y3RWYXJpYW50O1xuICAgICAgICAgICAgaWYgKHZpZXcuYXR0cignZGF0YS1ldmVudC10eXBlJykpIHtcbiAgICAgICAgICAgICAgICB2aWV3LmF0dHIoJ2RhdGEtcHJvZHVjdC12YXJpYW50JywgcHJvZHVjdFZhcmlhbnQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9kdWN0TmFtZSA9IHZpZXcuZmluZCgnLnByb2R1Y3RWaWV3LXRpdGxlJylbMF0gPyB2aWV3LmZpbmQoJy5wcm9kdWN0Vmlldy10aXRsZScpWzBdLmlubmVyVGV4dC5yZXBsYWNlKC9cIi9nLCAnXFxcXCQmJykgOiB0aGlzLiRzY29wZS5maW5kKCcucHJvZHVjdFZpZXctdGl0bGUnKS50ZXh0KCkucmVwbGFjZSgvXCIvZywgJ1xcXFwkJicpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNhcmQgPSAkKGBbZGF0YS1uYW1lPVwiJHtwcm9kdWN0TmFtZX1cIl1gKTtcbiAgICAgICAgICAgICAgICBjYXJkLmF0dHIoJ2RhdGEtcHJvZHVjdC12YXJpYW50JywgcHJvZHVjdFZhcmlhbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCBwcm9kdWN0VmFyaWFudDIgPSB1bnNhdGlzZmllZFJlcXVpcmVkRmllbGRzLmxlbmd0aCA9PT0gMCA/IG9wdGlvbnMuc29ydCgpIDogJ3Vuc2F0aXNmaWVkJztcblxuICAgICAgICBpZiAocHJvZHVjdFZhcmlhbnQyKSB7XG4gICAgICAgICAgICB2YXIgbGlzdFZhcmlhbnQgPSAnJztcblxuICAgICAgICAgICAgJC5lYWNoKHByb2R1Y3RWYXJpYW50MiwgKGluZGV4LCB2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmKGluZGV4ID4gMCl7XG4gICAgICAgICAgICAgICAgICAgIGxpc3RWYXJpYW50ICs9ICcgLyAnICsgcHJvZHVjdFZhcmlhbnQyW2luZGV4XS50b1N0cmluZygpLnNwbGl0KCc6JykucG9wKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpbmRleCA9PSAwKXtcbiAgICAgICAgICAgICAgICAgICAgbGlzdFZhcmlhbnQgKz0gcHJvZHVjdFZhcmlhbnQyW2luZGV4XS50b1N0cmluZygpLnNwbGl0KCc6JykucG9wKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMuJHNjb3BlLmZpbmQoJy5wcm9kdWN0Vmlldy1ub3RpZnlNZScpLmF0dHIoJ2RhdGEtcHJvZHVjdC12YXJpYW50JywgbGlzdFZhcmlhbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0UHJvZHVjdFZhcmlhbnQyKCkge1xuICAgICAgICBjb25zdCB1bnNhdGlzZmllZFJlcXVpcmVkRmllbGRzID0gW107XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSBbXTtcblxuICAgICAgICAkLmVhY2goJCgnW2RhdGEtcHJvZHVjdC1vcHRpb24tY2hhbmdlLTJdIFtkYXRhLXByb2R1Y3QtYXR0cmlidXRlXScpLCAoaW5kZXgsIHZhbHVlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBvcHRpb25MYWJlbCA9IHZhbHVlLmNoaWxkcmVuWzBdLmlubmVyVGV4dDtcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvblRpdGxlID0gb3B0aW9uTGFiZWwuc3BsaXQoJzonKVswXS50cmltKCk7XG4gICAgICAgICAgICBjb25zdCByZXF1aXJlZCA9IG9wdGlvbkxhYmVsLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ3JlcXVpcmVkJyk7XG4gICAgICAgICAgICBjb25zdCB0eXBlID0gdmFsdWUuZ2V0QXR0cmlidXRlKCdkYXRhLXByb2R1Y3QtYXR0cmlidXRlJyk7XG5cbiAgICAgICAgICAgIGlmICgodHlwZSA9PT0gJ2lucHV0LWZpbGUnIHx8IHR5cGUgPT09ICdpbnB1dC10ZXh0JyB8fCB0eXBlID09PSAnaW5wdXQtbnVtYmVyJykgJiYgdmFsdWUucXVlcnlTZWxlY3RvcignaW5wdXQnKS52YWx1ZSA9PT0gJycgJiYgcmVxdWlyZWQpIHtcbiAgICAgICAgICAgICAgICB1bnNhdGlzZmllZFJlcXVpcmVkRmllbGRzLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gJ3RleHRhcmVhJyAmJiB2YWx1ZS5xdWVyeVNlbGVjdG9yKCd0ZXh0YXJlYScpLnZhbHVlID09PSAnJyAmJiByZXF1aXJlZCkge1xuICAgICAgICAgICAgICAgIHVuc2F0aXNmaWVkUmVxdWlyZWRGaWVsZHMucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0eXBlID09PSAnZGF0ZScpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpc1NhdGlzZmllZCA9IEFycmF5LmZyb20odmFsdWUucXVlcnlTZWxlY3RvckFsbCgnc2VsZWN0JykpLmV2ZXJ5KChzZWxlY3QpID0+IHNlbGVjdC5zZWxlY3RlZEluZGV4ICE9PSAwKTtcblxuICAgICAgICAgICAgICAgIGlmIChpc1NhdGlzZmllZCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRlU3RyaW5nID0gQXJyYXkuZnJvbSh2YWx1ZS5xdWVyeVNlbGVjdG9yQWxsKCdzZWxlY3QnKSkubWFwKCh4KSA9PiB4LnZhbHVlKS5qb2luKCctJyk7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMucHVzaChgJHtvcHRpb25UaXRsZX06JHtkYXRlU3RyaW5nfWApO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAocmVxdWlyZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdW5zYXRpc2ZpZWRSZXF1aXJlZEZpZWxkcy5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0eXBlID09PSAnc2V0LXNlbGVjdCcpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3QgPSB2YWx1ZS5xdWVyeVNlbGVjdG9yKCdzZWxlY3QnKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RlZEluZGV4ID0gc2VsZWN0LnNlbGVjdGVkSW5kZXg7XG5cbiAgICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWRJbmRleCAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnB1c2goYCR7b3B0aW9uVGl0bGV9OiR7c2VsZWN0Lm9wdGlvbnNbc2VsZWN0ZWRJbmRleF0uaW5uZXJUZXh0fWApO1xuICAgICAgICAgICAgICAgICAgICAkKHZhbHVlLmNoaWxkcmVuWzBdKS5maW5kKCdbZGF0YS1vcHRpb24tdmFsdWVdJykudGV4dChzZWxlY3Qub3B0aW9uc1tzZWxlY3RlZEluZGV4XS5pbm5lclRleHQpO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAocmVxdWlyZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdW5zYXRpc2ZpZWRSZXF1aXJlZEZpZWxkcy5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0eXBlID09PSAnc2V0LXJlY3RhbmdsZScgfHwgdHlwZSA9PT0gJ3NldC1yYWRpbycgfHwgdHlwZSA9PT0gJ3N3YXRjaCcgfHwgdHlwZSA9PT0gJ2lucHV0LWNoZWNrYm94JyB8fCB0eXBlID09PSAncHJvZHVjdC1saXN0Jykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoZWNrZWQgPSB2YWx1ZS5xdWVyeVNlbGVjdG9yKCc6Y2hlY2tlZCcpO1xuICAgICAgICAgICAgICAgIGlmIChjaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGdldFNlbGVjdGVkT3B0aW9uTGFiZWwgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwcm9kdWN0VmFyaWFudHNsaXN0ID0gY29udmVydEludG9BcnJheSh2YWx1ZS5jaGlsZHJlbik7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXRjaExhYmVsRm9yQ2hlY2tlZElucHV0ID0gaW5wdCA9PiBpbnB0LmRhdGFzZXQucHJvZHVjdEF0dHJpYnV0ZVZhbHVlID09PSBjaGVja2VkLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByb2R1Y3RWYXJpYW50c2xpc3QuZmlsdGVyKG1hdGNoTGFiZWxGb3JDaGVja2VkSW5wdXQpWzBdO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gJ3NldC1yZWN0YW5nbGUnIHx8IHR5cGUgPT09ICdzZXQtcmFkaW8nIHx8IHR5cGUgPT09ICdwcm9kdWN0LWxpc3QnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsYWJlbCA9IGlzQnJvd3NlcklFID8gZ2V0U2VsZWN0ZWRPcHRpb25MYWJlbCgpLmlubmVyVGV4dC50cmltKCkgOiBjaGVja2VkLmxhYmVsc1swXS5pbm5lclRleHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnB1c2goYCR7b3B0aW9uVGl0bGV9OiR7bGFiZWx9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICQodmFsdWUuY2hpbGRyZW5bMF0pLmZpbmQoJ1tkYXRhLW9wdGlvbi12YWx1ZV0nKS50ZXh0KGxhYmVsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSAnc3dhdGNoJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGFiZWwgPSBpc0Jyb3dzZXJJRSA/IGdldFNlbGVjdGVkT3B0aW9uTGFiZWwoKS5jaGlsZHJlblswXSA6IGNoZWNrZWQubGFiZWxzWzBdLmNoaWxkcmVuWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5wdXNoKGAke29wdGlvblRpdGxlfToke2xhYmVsLnRpdGxlfWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQodmFsdWUuY2hpbGRyZW5bMF0pLmZpbmQoJ1tkYXRhLW9wdGlvbi12YWx1ZV0nKS50ZXh0KGxhYmVsLnRpdGxlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSAnaW5wdXQtY2hlY2tib3gnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnB1c2goYCR7b3B0aW9uVGl0bGV9Olllc2ApO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSAnaW5wdXQtY2hlY2tib3gnKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMucHVzaChgJHtvcHRpb25UaXRsZX06Tm9gKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAocmVxdWlyZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdW5zYXRpc2ZpZWRSZXF1aXJlZEZpZWxkcy5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGxldCBwcm9kdWN0VmFyaWFudCA9IHVuc2F0aXNmaWVkUmVxdWlyZWRGaWVsZHMubGVuZ3RoID09PSAwID8gb3B0aW9ucy5zb3J0KCkuam9pbignLCAnKSA6ICd1bnNhdGlzZmllZCc7XG4gICAgICAgIGNvbnN0IHZpZXcgPSAkKCcucHJvZHVjdFZpZXcnKTtcblxuICAgICAgICBpZiAocHJvZHVjdFZhcmlhbnQpIHtcbiAgICAgICAgICAgIHByb2R1Y3RWYXJpYW50ID0gcHJvZHVjdFZhcmlhbnQgPT09ICd1bnNhdGlzZmllZCcgPyAnJyA6IHByb2R1Y3RWYXJpYW50O1xuICAgICAgICAgICAgaWYgKHZpZXcuYXR0cignZGF0YS1ldmVudC10eXBlJykpIHtcbiAgICAgICAgICAgICAgICB2aWV3LmF0dHIoJ2RhdGEtcHJvZHVjdC12YXJpYW50JywgcHJvZHVjdFZhcmlhbnQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9kdWN0TmFtZSA9IHZpZXcuZmluZCgnLnByb2R1Y3RWaWV3LXRpdGxlJylbMF0gPyB2aWV3LmZpbmQoJy5wcm9kdWN0Vmlldy10aXRsZScpWzBdLmlubmVyVGV4dC5yZXBsYWNlKC9cIi9nLCAnXFxcXCQmJykgOiB0aGlzLiRzY29wZS5maW5kKCcucHJvZHVjdFZpZXctdGl0bGUnKS50ZXh0KCkucmVwbGFjZSgvXCIvZywgJ1xcXFwkJicpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNhcmQgPSAkKGBbZGF0YS1uYW1lPVwiJHtwcm9kdWN0TmFtZX1cIl1gKTtcbiAgICAgICAgICAgICAgICBjYXJkLmF0dHIoJ2RhdGEtcHJvZHVjdC12YXJpYW50JywgcHJvZHVjdFZhcmlhbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCBwcm9kdWN0VmFyaWFudDIgPSB1bnNhdGlzZmllZFJlcXVpcmVkRmllbGRzLmxlbmd0aCA9PT0gMCA/IG9wdGlvbnMuc29ydCgpIDogJ3Vuc2F0aXNmaWVkJztcblxuICAgICAgICBpZiAocHJvZHVjdFZhcmlhbnQyKSB7XG4gICAgICAgICAgICB2YXIgbGlzdFZhcmlhbnQgPSAnJztcblxuICAgICAgICAgICAgJC5lYWNoKHByb2R1Y3RWYXJpYW50MiwgKGluZGV4LCB2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmKGluZGV4ID4gMCl7XG4gICAgICAgICAgICAgICAgICAgIGxpc3RWYXJpYW50ICs9ICcgLyAnICsgcHJvZHVjdFZhcmlhbnQyW2luZGV4XS50b1N0cmluZygpLnNwbGl0KCc6JykucG9wKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpbmRleCA9PSAwKXtcbiAgICAgICAgICAgICAgICAgICAgbGlzdFZhcmlhbnQgKz0gcHJvZHVjdFZhcmlhbnQyW2luZGV4XS50b1N0cmluZygpLnNwbGl0KCc6JykucG9wKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMuJHNjb3BlLmZpbmQoJy5wcm9kdWN0Vmlldy1ub3RpZnlNZScpLmF0dHIoJ2RhdGEtcHJvZHVjdC12YXJpYW50JywgbGlzdFZhcmlhbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIHRoZSBjdXJyZW50IHdpbmRvdyBpcyBiZWluZyBydW4gaW5zaWRlIGFuIGlmcmFtZVxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqL1xuICAgIGlzUnVubmluZ0luSWZyYW1lKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5zZWxmICE9PSB3aW5kb3cudG9wO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogSGFuZGxlIHByb2R1Y3Qgb3B0aW9ucyBjaGFuZ2VzXG4gICAgICpcbiAgICAgKi9cbiAgICBwcm9kdWN0T3B0aW9uc0NoYW5nZWQoZXZlbnQpIHtcbiAgICAgICAgY29uc3QgJGNoYW5nZWRPcHRpb24gPSAkKGV2ZW50LnRhcmdldCk7XG4gICAgICAgIGNvbnN0ICRmb3JtID0gJGNoYW5nZWRPcHRpb24ucGFyZW50cygnZm9ybScpO1xuICAgICAgICBjb25zdCBwcm9kdWN0SWQgPSAkKCdbbmFtZT1cInByb2R1Y3RfaWRcIl0nLCAkZm9ybSkudmFsKCk7XG5cbiAgICAgICAgLy8gRG8gbm90IHRyaWdnZXIgYW4gYWpheCByZXF1ZXN0IGlmIGl0J3MgYSBmaWxlIG9yIGlmIHRoZSBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBGb3JtRGF0YVxuICAgICAgICBpZiAoJGNoYW5nZWRPcHRpb24uYXR0cigndHlwZScpID09PSAnZmlsZScgfHwgd2luZG93LkZvcm1EYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHV0aWxzLmFwaS5wcm9kdWN0QXR0cmlidXRlcy5vcHRpb25DaGFuZ2UocHJvZHVjdElkLCAkZm9ybS5zZXJpYWxpemUoKSwgJ3Byb2R1Y3RzL2J1bGstZGlzY291bnQtcmF0ZXMnLCAoZXJyLCByZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcHJvZHVjdEF0dHJpYnV0ZXNEYXRhID0gcmVzcG9uc2UuZGF0YSB8fCB7fTtcbiAgICAgICAgICAgIGNvbnN0IHByb2R1Y3RBdHRyaWJ1dGVzQ29udGVudCA9IHJlc3BvbnNlLmNvbnRlbnQgfHwge307XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVByb2R1Y3RBdHRyaWJ1dGVzKHByb2R1Y3RBdHRyaWJ1dGVzRGF0YSk7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVZpZXcocHJvZHVjdEF0dHJpYnV0ZXNEYXRhLCBwcm9kdWN0QXR0cmlidXRlc0NvbnRlbnQpO1xuICAgICAgICAgICAgYmFubmVyVXRpbHMuZGlzcGF0Y2hQcm9kdWN0QmFubmVyRXZlbnQocHJvZHVjdEF0dHJpYnV0ZXNEYXRhKTtcblxuICAgICAgICAgICAgaWYgKCF0aGlzLmNoZWNrSXNRdWlja1ZpZXdDaGlsZCgkZm9ybSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCAkY29udGV4dCA9ICRmb3JtLnBhcmVudHMoJy5wcm9kdWN0VmlldycpLmZpbmQoJy5wcm9kdWN0Vmlldy1pbmZvJyk7XG4gICAgICAgICAgICAgICAgbW9kYWxGYWN0b3J5KCdbZGF0YS1yZXZlYWxdJywgeyAkY29udGV4dCB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ29uUHJvZHVjdE9wdGlvbnNDaGFuZ2VkJywge1xuICAgICAgICAgICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgICAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IHByb2R1Y3RBdHRyaWJ1dGVzRGF0YSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogcHJvZHVjdEF0dHJpYnV0ZXNDb250ZW50LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgIC8vIENoYW5nZSBTdGlja3kgQWRkIHRvIGNhcnRcbiAgICAgICAgICAgICQuZWFjaChwcm9kdWN0QXR0cmlidXRlc0RhdGEuc2VsZWN0ZWRfYXR0cmlidXRlcywgZnVuY3Rpb24oaSxlbCl7XG4gICAgICAgICAgICAgICAgJC5lYWNoKCQoJ1tkYXRhLXByb2R1Y3Qtb3B0aW9uLWNoYW5nZS0yXSBbZGF0YS1wcm9kdWN0LWF0dHJpYnV0ZV0gaW5wdXQnKSwgZnVuY3Rpb24oaSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgb3AgPSAkKHRoaXMpLmF0dHIoJ3ZhbHVlJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmKGVsID09IG9wKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykucHJvcCgnY2hlY2tlZCcsIHRydWUpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJCh0aGlzKS5uZXh0KCkuaGFzQ2xhc3MoJ2Zvcm0tb3B0aW9uLXN3YXRjaCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9wVGl0bGUgPSAkKHRoaXMpLm5leHQoKS5jaGlsZHJlbignLmZvcm0tb3B0aW9uLXZhcmlhbnQnKS5hdHRyKCd0aXRsZScpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5wYXJlbnRzKCcuaXRlbS13cmFwJykuZmluZCgnLmNvbG9yLW5hbWUnKS50ZXh0KGAgLSAke29wVGl0bGV9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByb2R1Y3RPcHRpb25zQ2hhbmdlZDIoZXZlbnQpIHtcbiAgICAgICAgY29uc3QgJGNoYW5nZWRPcHRpb24gPSAkKGV2ZW50LnRhcmdldCk7XG4gICAgICAgIGNvbnN0ICRmb3JtID0gJGNoYW5nZWRPcHRpb24ucGFyZW50cygnZm9ybScpO1xuICAgICAgICBjb25zdCBwcm9kdWN0SWQgPSAkKCdbbmFtZT1cInByb2R1Y3RfaWRcIl0nLCAkZm9ybSkudmFsKCk7XG5cbiAgICAgICAgLy8gRG8gbm90IHRyaWdnZXIgYW4gYWpheCByZXF1ZXN0IGlmIGl0J3MgYSBmaWxlIG9yIGlmIHRoZSBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBGb3JtRGF0YVxuICAgICAgICBpZiAoJGNoYW5nZWRPcHRpb24uYXR0cigndHlwZScpID09PSAnZmlsZScgfHwgd2luZG93LkZvcm1EYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB1dGlscy5hcGkucHJvZHVjdEF0dHJpYnV0ZXMub3B0aW9uQ2hhbmdlKHByb2R1Y3RJZCwgJGZvcm0uc2VyaWFsaXplKCksICdwcm9kdWN0cy9idWxrLWRpc2NvdW50LXJhdGVzJywgKGVyciwgcmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHByb2R1Y3RBdHRyaWJ1dGVzRGF0YSA9IHJlc3BvbnNlLmRhdGEgfHwge307XG4gICAgICAgICAgICBjb25zdCBwcm9kdWN0QXR0cmlidXRlc0NvbnRlbnQgPSByZXNwb25zZS5jb250ZW50IHx8IHt9O1xuICAgICAgICAgICAgdGhpcy51cGRhdGVQcm9kdWN0QXR0cmlidXRlcyhwcm9kdWN0QXR0cmlidXRlc0RhdGEpO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVWaWV3KHByb2R1Y3RBdHRyaWJ1dGVzRGF0YSwgcHJvZHVjdEF0dHJpYnV0ZXNDb250ZW50KTtcbiAgICAgICAgICAgIGJhbm5lclV0aWxzLmRpc3BhdGNoUHJvZHVjdEJhbm5lckV2ZW50KHByb2R1Y3RBdHRyaWJ1dGVzRGF0YSk7XG5cbiAgICAgICAgICAgIGlmICghdGhpcy5jaGVja0lzUXVpY2tWaWV3Q2hpbGQoJGZvcm0pKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgJGNvbnRleHQgPSAkZm9ybS5wYXJlbnRzKCcucHJvZHVjdFZpZXcnKS5maW5kKCcucHJvZHVjdFZpZXctaW5mbycpO1xuICAgICAgICAgICAgICAgIG1vZGFsRmFjdG9yeSgnW2RhdGEtcmV2ZWFsXScsIHsgJGNvbnRleHQgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdvblByb2R1Y3RPcHRpb25zQ2hhbmdlZCcsIHtcbiAgICAgICAgICAgICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgICAgICAgICAgIGRldGFpbDoge1xuICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBwcm9kdWN0QXR0cmlidXRlc0RhdGEsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHByb2R1Y3RBdHRyaWJ1dGVzQ29udGVudCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICAkLmVhY2gocHJvZHVjdEF0dHJpYnV0ZXNEYXRhLnNlbGVjdGVkX2F0dHJpYnV0ZXMsIGZ1bmN0aW9uKGksZWwpe1xuICAgICAgICAgICAgICAgICQuZWFjaCgkKCdbZGF0YS1wcm9kdWN0LW9wdGlvbi1jaGFuZ2UtMl0gW2RhdGEtcHJvZHVjdC1hdHRyaWJ1dGVdIGlucHV0JyksIGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9wID0gJCh0aGlzKS5hdHRyKCd2YWx1ZScpO1xuICAgICAgICAgICAgICAgICAgICBpZihlbCA9PSBvcCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnByb3AoJ2NoZWNrZWQnLCB0cnVlKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCQodGhpcykubmV4dCgpLmhhc0NsYXNzKCdmb3JtLW9wdGlvbi1zd2F0Y2gnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvcFRpdGxlID0gJCh0aGlzKS5uZXh0KCkuY2hpbGRyZW4oJy5mb3JtLW9wdGlvbi12YXJpYW50JykuYXR0cigndGl0bGUnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykucGFyZW50cygnLml0ZW0td3JhcCcpLmZpbmQoJy5jb2xvci1uYW1lJykudGV4dChgIC0gJHtvcFRpdGxlfWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAkLmVhY2goJCgnW2RhdGEtcHJvZHVjdC1vcHRpb24tY2hhbmdlLTJdIFtkYXRhLXByb2R1Y3QtYXR0cmlidXRlXScpLCBmdW5jdGlvbihpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVsID0gJCh0aGlzKS5maW5kKCcuZm9ybS1yYWRpbzpjaGVja2VkJykuYXR0cigndmFsdWUnKTtcbiAgICAgICAgICAgICAgICAkLmVhY2goJCgnLnByb2R1Y3RWaWV3LW9wdGlvbnMgW2RhdGEtcHJvZHVjdC1vcHRpb24tY2hhbmdlXSBbZGF0YS1wcm9kdWN0LWF0dHJpYnV0ZV0gaW5wdXQnKSwgZnVuY3Rpb24oaSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgb3AgPSAkKHRoaXMpLmF0dHIoJ3ZhbHVlJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmICgkKHRoaXMpLm5leHQoKS5oYXNDbGFzcygnZm9ybS1vcHRpb24tc3dhdGNoJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvcFRpdGxlID0gJCh0aGlzKS5uZXh0KCkuY2hpbGRyZW4oJy5mb3JtLW9wdGlvbi12YXJpYW50JykuYXR0cigndGl0bGUnKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgkKHRoaXMpLm5leHQoKS5jaGlsZHJlbignLmZvcm0tb3B0aW9uLXZhcmlhbnQnKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvcFRpdGxlID0gJCh0aGlzKS5uZXh0KCkuY2hpbGRyZW4oJy5mb3JtLW9wdGlvbi12YXJpYW50JykudGV4dCgpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9wVGl0bGUgPSAkKHRoaXMpLm5leHQoJy5mb3JtLWxhYmVsJykudGV4dCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYoZWwgPT0gb3Ape1xuICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5wcm9wKCdjaGVja2VkJywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnBhcmVudHMoJ1tkYXRhLXByb2R1Y3QtYXR0cmlidXRlXScpLmZpbmQoJ1tkYXRhLW9wdGlvbi12YWx1ZV0nKS50ZXh0KG9wVGl0bGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB2YXIgY29sb3IgPSAkKCdbZGF0YS1wcm9kdWN0LW9wdGlvbi1jaGFuZ2UtMl0gW2RhdGEtcHJvZHVjdC1hdHRyaWJ1dGU9XCJzd2F0Y2hcIl0nKS5maW5kKCcuZm9ybS1yYWRpbzpjaGVja2VkJykubmV4dCgpLmZpbmQoJz4gc3BhbicpLmF0dHIoJ3RpdGxlJyk7XG4gICAgICAgICAgICAkKCcjaGFsb19zdGlja3lfYWRkVG9DYXJ0IC5vcHRpb24tdmFsdWUgLmNvbG9yLW5hbWUnKS50ZXh0KGAgLSAke2NvbG9yfWApO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBpZiB0aGlzIHNldHRpbmcgaXMgZW5hYmxlZCBpbiBQYWdlIEJ1aWxkZXJcbiAgICAgKiBzaG93IG5hbWUgZm9yIHN3YXRjaCBvcHRpb25cbiAgICAgKi9cbiAgICBzaG93U3dhdGNoTmFtZU9uT3B0aW9uKCRzd2F0Y2gsICRzd2F0Y2hHcm91cCkge1xuICAgICAgICBjb25zdCBzd2F0Y2hOYW1lID0gJHN3YXRjaC5hdHRyKCdhcmlhLWxhYmVsJyk7XG4gICAgICAgIGNvbnN0IGFjdGl2ZVN3YXRjaEdyb3VwSWQgPSAkc3dhdGNoR3JvdXAuYXR0cignYXJpYS1sYWJlbGxlZGJ5Jyk7XG4gICAgICAgIGNvbnN0ICRzd2F0Y2hPcHRpb25NZXNzYWdlID0gJChgIyR7YWN0aXZlU3dhdGNoR3JvdXBJZH0gfiAuc3dhdGNoLW9wdGlvbi1tZXNzYWdlYCk7XG5cbiAgICAgICAgJCgnW2RhdGEtb3B0aW9uLXZhbHVlXScsICRzd2F0Y2hHcm91cCkudGV4dChzd2F0Y2hOYW1lKTtcbiAgICAgICAgJHN3YXRjaE9wdGlvbk1lc3NhZ2UudGV4dChgJHt0aGlzLnN3YXRjaEluaXRNZXNzYWdlU3RvcmFnZVthY3RpdmVTd2F0Y2hHcm91cElkXX0gJHtzd2F0Y2hOYW1lfWApO1xuICAgICAgICB0aGlzLnNldExpdmVSZWdpb25BdHRyaWJ1dGVzKCRzd2F0Y2hPcHRpb25NZXNzYWdlLCAnc3RhdHVzJywgJ2Fzc2VydGl2ZScpO1xuICAgIH1cblxuICAgIHNldExpdmVSZWdpb25BdHRyaWJ1dGVzKCRlbGVtZW50LCByb2xlVHlwZSwgYXJpYUxpdmVTdGF0dXMpIHtcbiAgICAgICAgJGVsZW1lbnQuYXR0cih7XG4gICAgICAgICAgICByb2xlOiByb2xlVHlwZSxcbiAgICAgICAgICAgICdhcmlhLWxpdmUnOiBhcmlhTGl2ZVN0YXR1cyxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgY2hlY2tJc1F1aWNrVmlld0NoaWxkKCRlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiAhISRlbGVtZW50LnBhcmVudHMoJy5xdWlja1ZpZXcnKS5sZW5ndGg7XG4gICAgfVxuXG4gICAgc2hvd1Byb2R1Y3RJbWFnZShpbWFnZSkge1xuICAgICAgICBpZiAoaXNQbGFpbk9iamVjdChpbWFnZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IHpvb21JbWFnZVVybCA9IHV0aWxzLnRvb2xzLmltYWdlU3Jjc2V0LmdldFNyY3NldChcbiAgICAgICAgICAgICAgICBpbWFnZS5kYXRhLFxuICAgICAgICAgICAgICAgIHsgJzF4JzogdGhpcy5jb250ZXh0Lnpvb21TaXplIH0sXG4gICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgICAgU2hvdWxkIG1hdGNoIHpvb20gc2l6ZSB1c2VkIGZvciBkYXRhLXpvb20taW1hZ2UgaW5cbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50cy9wcm9kdWN0cy9wcm9kdWN0LXZpZXcuaHRtbFxuXG4gICAgICAgICAgICAgICAgICAgIE5vdGUgdGhhdCB0aGlzIHdpbGwgb25seSBiZSB1c2VkIGFzIGEgZmFsbGJhY2sgaW1hZ2UgZm9yIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgc3Jjc2V0XG5cbiAgICAgICAgICAgICAgICAgICAgQWxzbyBub3RlIHRoYXQgZ2V0U3Jjc2V0IHJldHVybnMgYSBzaW1wbGUgc3JjIHN0cmluZyB3aGVuIGV4YWN0bHkgb25lIHNpemUgaXMgcHJvdmlkZWRcbiAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgY29uc3QgbWFpbkltYWdlVXJsID0gdXRpbHMudG9vbHMuaW1hZ2VTcmNzZXQuZ2V0U3Jjc2V0KFxuICAgICAgICAgICAgICAgIGltYWdlLmRhdGEsXG4gICAgICAgICAgICAgICAgeyAnMXgnOiB0aGlzLmNvbnRleHQucHJvZHVjdFNpemUgfSxcbiAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAgICBTaG91bGQgbWF0Y2ggZmFsbGJhY2sgaW1hZ2Ugc2l6ZSB1c2VkIGZvciB0aGUgbWFpbiBwcm9kdWN0IGltYWdlIGluXG4gICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudHMvcHJvZHVjdHMvcHJvZHVjdC12aWV3Lmh0bWxcblxuICAgICAgICAgICAgICAgICAgICBOb3RlIHRoYXQgdGhpcyB3aWxsIG9ubHkgYmUgdXNlZCBhcyBhIGZhbGxiYWNrIGltYWdlIGZvciBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IHNyY3NldFxuXG4gICAgICAgICAgICAgICAgICAgIEFsc28gbm90ZSB0aGF0IGdldFNyY3NldCByZXR1cm5zIGEgc2ltcGxlIHNyYyBzdHJpbmcgd2hlbiBleGFjdGx5IG9uZSBzaXplIGlzIHByb3ZpZGVkXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGNvbnN0IG1haW5JbWFnZVNyY3NldCA9IHV0aWxzLnRvb2xzLmltYWdlU3Jjc2V0LmdldFNyY3NldChpbWFnZS5kYXRhKTtcblxuICAgICAgICAgICAgdGhpcy5pbWFnZUdhbGxlcnkuc2V0QWx0ZXJuYXRlSW1hZ2Uoe1xuICAgICAgICAgICAgICAgIG1haW5JbWFnZVVybCxcbiAgICAgICAgICAgICAgICB6b29tSW1hZ2VVcmwsXG4gICAgICAgICAgICAgICAgbWFpbkltYWdlU3Jjc2V0LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmltYWdlR2FsbGVyeS5yZXN0b3JlSW1hZ2UoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogSGFuZGxlIGFjdGlvbiB3aGVuIHRoZSBzaG9wcGVyIGNsaWNrcyBvbiArIC8gLSBmb3IgcXVhbnRpdHlcbiAgICAgKlxuICAgICAqL1xuICAgIGxpc3RlblF1YW50aXR5Q2hhbmdlKCkge1xuICAgICAgICB0aGlzLiRzY29wZS5vbignY2xpY2snLCAnW2RhdGEtcXVhbnRpdHktY2hhbmdlXSBidXR0b24nLCBldmVudCA9PiB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgY29uc3QgJHRhcmdldCA9ICQoZXZlbnQuY3VycmVudFRhcmdldCk7XG4gICAgICAgICAgICBjb25zdCB2aWV3TW9kZWwgPSB0aGlzLmdldFZpZXdNb2RlbCh0aGlzLiRzY29wZSk7XG4gICAgICAgICAgICBjb25zdCAkaW5wdXQgPSB2aWV3TW9kZWwucXVhbnRpdHkuJGlucHV0O1xuICAgICAgICAgICAgY29uc3QgcXVhbnRpdHlNaW4gPSBwYXJzZUludCgkaW5wdXQuZGF0YSgncXVhbnRpdHlNaW4nKSwgMTApO1xuICAgICAgICAgICAgY29uc3QgcXVhbnRpdHlNYXggPSBwYXJzZUludCgkaW5wdXQuZGF0YSgncXVhbnRpdHlNYXgnKSwgMTApO1xuXG4gICAgICAgICAgICBsZXQgcXR5ID0gZm9ybXMubnVtYmVyc09ubHkoJGlucHV0LnZhbCgpKSA/IHBhcnNlSW50KCRpbnB1dC52YWwoKSwgMTApIDogcXVhbnRpdHlNaW47XG4gICAgICAgICAgICAvLyBJZiBhY3Rpb24gaXMgaW5jcmVtZW50aW5nXG4gICAgICAgICAgICBpZiAoJHRhcmdldC5kYXRhKCdhY3Rpb24nKSA9PT0gJ2luYycpIHtcbiAgICAgICAgICAgICAgICBxdHkgPSBmb3Jtcy52YWxpZGF0ZUluY3JlYXNlQWdhaW5zdE1heEJvdW5kYXJ5KHF0eSwgcXVhbnRpdHlNYXgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChxdHkgPiAxKSB7XG4gICAgICAgICAgICAgICAgcXR5ID0gZm9ybXMudmFsaWRhdGVEZWNyZWFzZUFnYWluc3RNaW5Cb3VuZGFyeShxdHksIHF1YW50aXR5TWluKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gdXBkYXRlIGhpZGRlbiBpbnB1dFxuICAgICAgICAgICAgdmlld01vZGVsLnF1YW50aXR5LiRpbnB1dC52YWwocXR5KTtcbiAgICAgICAgICAgIC8vIHVwZGF0ZSB0ZXh0XG4gICAgICAgICAgICB2aWV3TW9kZWwucXVhbnRpdHkuJHRleHQudGV4dChxdHkpO1xuICAgICAgICAgICAgLy8gcGVyZm9ybSB2YWxpZGF0aW9uIGFmdGVyIHVwZGF0aW5nIHByb2R1Y3QgcXVhbnRpdHlcbiAgICAgICAgICAgIHRoaXMuYWRkVG9DYXJ0VmFsaWRhdG9yLnBlcmZvcm1DaGVjaygpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBQcmV2ZW50IHRyaWdnZXJpbmcgcXVhbnRpdHkgY2hhbmdlIHdoZW4gcHJlc3NpbmcgZW50ZXJcbiAgICAgICAgdGhpcy4kc2NvcGUub24oJ2tleXByZXNzJywgJy5mb3JtLWlucHV0LS1pbmNyZW1lbnRUb3RhbCcsIGV2ZW50ID0+IHtcbiAgICAgICAgICAgIC8vIElmIHRoZSBicm93c2VyIHN1cHBvcnRzIGV2ZW50LndoaWNoLCB0aGVuIHVzZSBldmVudC53aGljaCwgb3RoZXJ3aXNlIHVzZSBldmVudC5rZXlDb2RlXG4gICAgICAgICAgICBjb25zdCB4ID0gZXZlbnQud2hpY2ggfHwgZXZlbnQua2V5Q29kZTtcbiAgICAgICAgICAgIGlmICh4ID09PSAxMykge1xuICAgICAgICAgICAgICAgIC8vIFByZXZlbnQgZGVmYXVsdFxuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGxpc3RlblF1YW50aXR5Q2hhbmdlU3RpY2t5QVRDKCRzY29wZSkge1xuICAgICAgICAkc2NvcGUub24oJ2NsaWNrJywgJ1tkYXRhLXF1YW50aXR5LWNoYW5nZS0yXSBidXR0b24nLCBldmVudCA9PiB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgY29uc3QgJHRhcmdldCA9ICQoZXZlbnQuY3VycmVudFRhcmdldCk7XG4gICAgICAgICAgICBjb25zdCB2aWV3TW9kZWwgPSB0aGlzLmdldFZpZXdNb2RlbCgkc2NvcGUpO1xuICAgICAgICAgICAgY29uc3QgJGlucHV0ID0gdmlld01vZGVsLnF1YW50aXR5LiRpbnB1dDtcbiAgICAgICAgICAgIGNvbnN0IHF1YW50aXR5TWluID0gcGFyc2VJbnQoJGlucHV0LmRhdGEoJ3F1YW50aXR5TWluJyksIDEwKTtcbiAgICAgICAgICAgIGNvbnN0IHF1YW50aXR5TWF4ID0gcGFyc2VJbnQoJGlucHV0LmRhdGEoJ3F1YW50aXR5TWF4JyksIDEwKTtcblxuICAgICAgICAgICAgbGV0IHF0eSA9IGZvcm1zLm51bWJlcnNPbmx5KCRpbnB1dC52YWwoKSkgPyBwYXJzZUludCgkaW5wdXQudmFsKCksIDEwKSA6IHF1YW50aXR5TWluO1xuICAgICAgICAgICAgLy8gSWYgYWN0aW9uIGlzIGluY3JlbWVudGluZ1xuICAgICAgICAgICAgaWYgKCR0YXJnZXQuZGF0YSgnYWN0aW9uJykgPT09ICdpbmMnKSB7XG4gICAgICAgICAgICAgICAgcXR5ID0gZm9ybXMudmFsaWRhdGVJbmNyZWFzZUFnYWluc3RNYXhCb3VuZGFyeShxdHksIHF1YW50aXR5TWF4KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocXR5ID4gMSkge1xuICAgICAgICAgICAgICAgIHF0eSA9IGZvcm1zLnZhbGlkYXRlRGVjcmVhc2VBZ2FpbnN0TWluQm91bmRhcnkocXR5LCBxdWFudGl0eU1pbik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHVwZGF0ZSBoaWRkZW4gaW5wdXRcbiAgICAgICAgICAgIHZpZXdNb2RlbC5xdWFudGl0eS4kaW5wdXQudmFsKHF0eSk7XG4gICAgICAgICAgICAvLyB1cGRhdGUgdGV4dFxuICAgICAgICAgICAgdmlld01vZGVsLnF1YW50aXR5LiR0ZXh0LnRleHQocXR5KTtcbiAgICAgICAgICAgIC8vIHBlcmZvcm0gdmFsaWRhdGlvbiBhZnRlciB1cGRhdGluZyBwcm9kdWN0IHF1YW50aXR5XG4gICAgICAgICAgICB0aGlzLmFkZFRvQ2FydFZhbGlkYXRvci5wZXJmb3JtQ2hlY2soKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gUHJldmVudCB0cmlnZ2VyaW5nIHF1YW50aXR5IGNoYW5nZSB3aGVuIHByZXNzaW5nIGVudGVyXG4gICAgICAgICRzY29wZS5vbigna2V5cHJlc3MnLCAnI2hhbG9fc3RpY2t5X2FkZFRvQ2FydCAuZm9ybS1pbnB1dC0taW5jcmVtZW50VG90YWwnLCBldmVudCA9PiB7XG4gICAgICAgICAgICAvLyBJZiB0aGUgYnJvd3NlciBzdXBwb3J0cyBldmVudC53aGljaCwgdGhlbiB1c2UgZXZlbnQud2hpY2gsIG90aGVyd2lzZSB1c2UgZXZlbnQua2V5Q29kZVxuICAgICAgICAgICAgY29uc3QgeCA9IGV2ZW50LndoaWNoIHx8IGV2ZW50LmtleUNvZGU7XG4gICAgICAgICAgICBpZiAoeCA9PT0gMTMpIHtcbiAgICAgICAgICAgICAgICAvLyBQcmV2ZW50IGRlZmF1bHRcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEFkZCBhIHByb2R1Y3QgdG8gY2FydFxuICAgICAqXG4gICAgICovXG4gICAgYWRkUHJvZHVjdFRvQ2FydChldmVudCwgZm9ybSwgY29udGV4dCkge1xuICAgICAgICBjb25zdCAkYWRkVG9DYXJ0QnRuID0gJCgnI2Zvcm0tYWN0aW9uLWFkZFRvQ2FydCcsICQoZXZlbnQudGFyZ2V0KSk7XG4gICAgICAgIGNvbnN0IG9yaWdpbmFsQnRuVmFsID0gJGFkZFRvQ2FydEJ0bi52YWwoKTtcbiAgICAgICAgY29uc3Qgd2FpdE1lc3NhZ2UgPSAkYWRkVG9DYXJ0QnRuLmRhdGEoJ3dhaXRNZXNzYWdlJyk7XG5cbiAgICAgICAgLy8gRG8gbm90IGRvIEFKQVggaWYgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgRm9ybURhdGFcbiAgICAgICAgaWYgKHdpbmRvdy5Gb3JtRGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBQcmV2ZW50IGRlZmF1bHRcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAkYWRkVG9DYXJ0QnRuXG4gICAgICAgICAgICAudmFsKHdhaXRNZXNzYWdlKVxuICAgICAgICAgICAgLnByb3AoJ2Rpc2FibGVkJywgdHJ1ZSk7XG5cbiAgICAgICAgdGhpcy4kb3ZlcmxheS5zaG93KCk7XG5cbiAgICAgICAgLy8gQWRkIGl0ZW0gdG8gY2FydFxuICAgICAgICB1dGlscy5hcGkuY2FydC5pdGVtQWRkKG5vcm1hbGl6ZUZvcm1EYXRhKG5ldyBGb3JtRGF0YShmb3JtKSksIChlcnIsIHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBlcnIgfHwgcmVzcG9uc2UuZGF0YS5lcnJvcjtcblxuICAgICAgICAgICAgJGFkZFRvQ2FydEJ0blxuICAgICAgICAgICAgICAgIC52YWwob3JpZ2luYWxCdG5WYWwpXG4gICAgICAgICAgICAgICAgLnByb3AoJ2Rpc2FibGVkJywgZmFsc2UpO1xuXG4gICAgICAgICAgICB0aGlzLiRvdmVybGF5LmhpZGUoKTtcblxuICAgICAgICAgICAgLy8gR3VhcmQgc3RhdGVtZW50XG4gICAgICAgICAgICBpZiAoZXJyb3JNZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgLy8gU3RyaXAgdGhlIEhUTUwgZnJvbSB0aGUgZXJyb3IgbWVzc2FnZVxuICAgICAgICAgICAgICAgIGNvbnN0IHRtcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xuICAgICAgICAgICAgICAgIHRtcC5pbm5lckhUTUwgPSBlcnJvck1lc3NhZ2U7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gc2hvd0FsZXJ0TW9kYWwodG1wLnRleHRDb250ZW50IHx8IHRtcC5pbm5lclRleHQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoJCgnYm9keVtkYXRhLXBhZ2UtdHlwZT1cImNhcnRcIl0nKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBsb2NhdGlvbi5yZWxvYWQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChmb3JtLmFjdGlvbi52YWx1ZSA9PT0gJ2J1eScpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlZGlyZWN0VG8odGhpcy5jb250ZXh0LnVybHMuY2hlY2tvdXQuc2luZ2xlX2FkZHJlc3MpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gT3BlbiBwcmV2aWV3IG1vZGFsIGFuZCB1cGRhdGUgY29udGVudFxuICAgICAgICAgICAgaWYgKHRoaXMuY29udGV4dC50aGVtZVNldHRpbmdzLmhhbG9BZGRUb0NhcnRBY3Rpb24gPT09ICdzaWRlYmFyJyl7XG4gICAgICAgICAgICAgICAgJCgnLm1vZGFsLWJhY2tncm91bmQnKS50cmlnZ2VyKCdjbGljaycpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnY29tbW9uL2NhcnQtcHJldmlldydcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvYWRpbmdDbGFzcyA9ICdpcy1sb2FkaW5nJztcbiAgICAgICAgICAgICAgICBjb25zdCAkYm9keSA9ICQoJ2JvZHknKTtcbiAgICAgICAgICAgICAgICBjb25zdCAkY2FydERyb3Bkb3duID0gJCgnI2hhbG8tY2FydC1zaWRlYmFyIC5oYWxvLXNpZGViYXItd3JhcHBlcicpO1xuICAgICAgICAgICAgICAgIGNvbnN0ICRjYXJ0TG9hZGluZyA9ICQoJzxkaXYgY2xhc3M9XCJsb2FkaW5nT3ZlcmxheVwiPjwvZGl2PicpO1xuXG4gICAgICAgICAgICAgICAgJGJvZHkudG9nZ2xlQ2xhc3MoJ29wZW5DYXJ0U2lkZWJhcicpO1xuXG4gICAgICAgICAgICAgICAgJGNhcnREcm9wZG93blxuICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MobG9hZGluZ0NsYXNzKVxuICAgICAgICAgICAgICAgICAgICAuaHRtbCgkY2FydExvYWRpbmcpO1xuICAgICAgICAgICAgICAgICRjYXJ0TG9hZGluZ1xuICAgICAgICAgICAgICAgICAgICAuc2hvdygpO1xuXG4gICAgICAgICAgICAgICAgdXRpbHMuYXBpLmNhcnQuZ2V0Q29udGVudChvcHRpb25zLCAoZXJyLCByZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAkY2FydERyb3Bkb3duXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MobG9hZGluZ0NsYXNzKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmh0bWwocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICAkY2FydExvYWRpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIC5oaWRlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcXVhbnRpdHkgPSAkKHJlc3BvbnNlKS5maW5kKCdbZGF0YS1jYXJ0LXF1YW50aXR5XScpLmRhdGEoJ2NhcnRRdWFudGl0eScpIHx8IDA7XG5cbiAgICAgICAgICAgICAgICAgICAgJGJvZHkudHJpZ2dlcignY2FydC1xdWFudGl0eS11cGRhdGUnLCBxdWFudGl0eSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaGFsb0NhbGN1bGF0ZUZyZWVTaGlwcGluZyh0aGlzLmNvbnRleHQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRvdmVybGF5LnNob3coKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlZGlyZWN0VG8ocmVzcG9uc2UuZGF0YS5jYXJ0X2l0ZW0uY2FydF91cmwgfHwgdGhpcy5jb250ZXh0LnVybHMuY2FydCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBjYXJ0IGNvbnRlbnRzXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gY2FydEl0ZW1JZFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IG9uQ29tcGxldGVcbiAgICAgKi9cbiAgICBnZXRDYXJ0Q29udGVudChjYXJ0SXRlbUlkLCBvbkNvbXBsZXRlKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICB0ZW1wbGF0ZTogJ2NhcnQvcHJldmlldycsXG4gICAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgICAgICBzdWdnZXN0OiBjYXJ0SXRlbUlkLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbmZpZzoge1xuICAgICAgICAgICAgICAgIGNhcnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgc3VnZ2VzdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbWl0OiA0LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuXG4gICAgICAgIHV0aWxzLmFwaS5jYXJ0LmdldENvbnRlbnQob3B0aW9ucywgb25Db21wbGV0ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVkaXJlY3QgdG8gdXJsXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsXG4gICAgICovXG4gICAgcmVkaXJlY3RUbyh1cmwpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNSdW5uaW5nSW5JZnJhbWUoKSAmJiAhd2luZG93LmlmcmFtZVNkaykge1xuICAgICAgICAgICAgd2luZG93LnRvcC5sb2NhdGlvbiA9IHVybDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbiA9IHVybDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSBjYXJ0IGNvbnRlbnRcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7TW9kYWx9IG1vZGFsXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGNhcnRJdGVtSWRcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvbkNvbXBsZXRlXG4gICAgICovXG4gICAgdXBkYXRlQ2FydENvbnRlbnQobW9kYWwsIGNhcnRJdGVtSWQsIG9uQ29tcGxldGUpIHtcbiAgICAgICAgdGhpcy5nZXRDYXJ0Q29udGVudChjYXJ0SXRlbUlkLCAoZXJyLCByZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbW9kYWwudXBkYXRlQ29udGVudChyZXNwb25zZSk7XG5cbiAgICAgICAgICAgIC8vIFVwZGF0ZSBjYXJ0IGNvdW50ZXJcbiAgICAgICAgICAgIGNvbnN0ICRib2R5ID0gJCgnYm9keScpO1xuICAgICAgICAgICAgY29uc3QgJGNhcnRRdWFudGl0eSA9ICQoJ1tkYXRhLWNhcnQtcXVhbnRpdHldJywgbW9kYWwuJGNvbnRlbnQpO1xuICAgICAgICAgICAgY29uc3QgJGNhcnRDb3VudGVyID0gJCgnLm5hdlVzZXItYWN0aW9uIC5jYXJ0LWNvdW50Jyk7XG4gICAgICAgICAgICBjb25zdCBxdWFudGl0eSA9ICRjYXJ0UXVhbnRpdHkuZGF0YSgnY2FydFF1YW50aXR5JykgfHwgMDtcbiAgICAgICAgICAgIGNvbnN0ICRwcm9tb3Rpb25CYW5uZXIgPSAkKCdbZGF0YS1wcm9tb3Rpb24tYmFubmVyXScpO1xuICAgICAgICAgICAgY29uc3QgJGJhY2tUb1Nob3BwcGluZ0J0biA9ICQoJy5wcmV2aWV3Q2FydENoZWNrb3V0ID4gW2RhdGEtcmV2ZWFsLWNsb3NlXScpO1xuICAgICAgICAgICAgY29uc3QgJG1vZGFsQ2xvc2VCdG4gPSAkKCcjcHJldmlld01vZGFsID4gLm1vZGFsLWNsb3NlJyk7XG4gICAgICAgICAgICBjb25zdCBiYW5uZXJVcGRhdGVIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0ICRwcm9kdWN0Q29udGFpbmVyID0gJCgnI21haW4tY29udGVudCA+IC5jb250YWluZXInKTtcblxuICAgICAgICAgICAgICAgICRwcm9kdWN0Q29udGFpbmVyLmFwcGVuZCgnPGRpdiBjbGFzcz1cImxvYWRpbmdPdmVybGF5IHBkcC11cGRhdGVcIj48L2Rpdj4nKTtcbiAgICAgICAgICAgICAgICAkKCcubG9hZGluZ092ZXJsYXkucGRwLXVwZGF0ZScsICRwcm9kdWN0Q29udGFpbmVyKS5zaG93KCk7XG4gICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgJGNhcnRDb3VudGVyLmFkZENsYXNzKCdjYXJ0LWNvdW50LS1wb3NpdGl2ZScpO1xuICAgICAgICAgICAgJGJvZHkudHJpZ2dlcignY2FydC1xdWFudGl0eS11cGRhdGUnLCBxdWFudGl0eSk7XG5cbiAgICAgICAgICAgIGlmIChvbkNvbXBsZXRlKSB7XG4gICAgICAgICAgICAgICAgb25Db21wbGV0ZShyZXNwb25zZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICgkcHJvbW90aW9uQmFubmVyLmxlbmd0aCAmJiAkYmFja1RvU2hvcHBwaW5nQnRuLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICRiYWNrVG9TaG9wcHBpbmdCdG4ub24oJ2NsaWNrJywgYmFubmVyVXBkYXRlSGFuZGxlcik7XG4gICAgICAgICAgICAgICAgJG1vZGFsQ2xvc2VCdG4ub24oJ2NsaWNrJywgYmFubmVyVXBkYXRlSGFuZGxlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhpZGUgb3IgbWFyayBhcyB1bmF2YWlsYWJsZSBvdXQgb2Ygc3RvY2sgYXR0cmlidXRlcyBpZiBlbmFibGVkXG4gICAgICogQHBhcmFtICB7T2JqZWN0fSBkYXRhIFByb2R1Y3QgYXR0cmlidXRlIGRhdGFcbiAgICAgKi9cbiAgICB1cGRhdGVQcm9kdWN0QXR0cmlidXRlcyhkYXRhKSB7XG4gICAgICAgIHN1cGVyLnVwZGF0ZVByb2R1Y3RBdHRyaWJ1dGVzKGRhdGEpO1xuICAgICAgICB0aGlzLnNob3dQcm9kdWN0SW1hZ2UoZGF0YS5pbWFnZSk7XG4gICAgfVxufVxuIiwiLyoqXG4gKiBWaXN1YWxseSBoaWRlcyB0aGUgb3B0aW9uIGZyb20gdXNlciBieSBtb3Zpbmcgb3B0aW9uIHRvIGFuIGludmlzaWJsZVxuICogYW5kIGRpc2FibGVkIHNlbGVjdCBwbGFjZWhvbGRlciBlbGVtZW50LlxuICpcbiAqIFRoaXMgYXBwcm9hY2ggaXMgcmVxdWlyZWQgcmF0aGVyIHRoYW4gc2ltcGx5IGhpZGluZyB0aGUgb3B0aW9uIGJlY2F1c2VcbiAqIGhpZGRlbiBvcHRpb24gY2FuIHN0aWxsIGJlIGluY2x1ZGVkIHdoZW4gc2VyaWFsaXplQXJyYXkoKSBpcyBjYWxsZWQgYW5kXG4gKiBjYXVzZSB3cm9uZyB2YWx1ZSB0byBiZSBzdWJtaXR0ZWQuXG4gKiAoZWcuIGlmIHlvdSBoYXZlIG9wdGlvbiAxLCAyLCAzIGFuZCAyIGlzIGhpZGRlbiwgd2hlbiB5b3Ugc2VsZWN0IDMsXG4gKiBzZXJpYWxpemVBcnJheSgpIHdpbGwgdXNlIHRoZSB2YWx1ZSBvZiAyIGluc3RlYWQgb2YgMylcbiAqL1xuZnVuY3Rpb24gdG9nZ2xlT3B0aW9uKHNob3cpIHtcbiAgICBjb25zdCBjdXJyZW50U2VsZWN0RWxlbWVudCA9ICQodGhpcykuY2xvc2VzdCgnc2VsZWN0Jyk7IC8vIHRoZSBzZWxlY3QgY29udGFpbmluZyB0aGlzXG4gICAgbGV0IGRpc2FibGVkU2VsZWN0RWxlbWVudDsgLy8gdGhlIGRpc2FibGVkIHNlbGVjdCBlbGVtZW50XG4gICAgbGV0IHNlbGVjdEVsZW1lbnQ7IC8vIHRoZSByZWFsIHNlbGVjdCBlbGVtZW50XG5cbiAgICBpZiAoY3VycmVudFNlbGVjdEVsZW1lbnQuaXMoJzpkaXNhYmxlZCcpKSB7XG4gICAgICAgIGRpc2FibGVkU2VsZWN0RWxlbWVudCA9IGN1cnJlbnRTZWxlY3RFbGVtZW50O1xuICAgICAgICBzZWxlY3RFbGVtZW50ID0gZGlzYWJsZWRTZWxlY3RFbGVtZW50LmRhdGEoJ2xpbmtlZFNlbGVjdEVsZW1lbnQnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBzZWxlY3RFbGVtZW50ID0gY3VycmVudFNlbGVjdEVsZW1lbnQ7XG4gICAgICAgIGRpc2FibGVkU2VsZWN0RWxlbWVudCA9IGN1cnJlbnRTZWxlY3RFbGVtZW50LmRhdGEoJ2xpbmtlZFNlbGVjdEVsZW1lbnQnKTtcbiAgICAgICAgaWYgKCFkaXNhYmxlZFNlbGVjdEVsZW1lbnQpIHtcbiAgICAgICAgICAgIC8vIGNyZWF0ZSB0aGUgZGlzYWJsZWQgcGxhY2Vob2xkZXIgc2VsZWN0IGVsZW1lbnRcbiAgICAgICAgICAgIGRpc2FibGVkU2VsZWN0RWxlbWVudCA9ICQoJzxzZWxlY3Q+JylcbiAgICAgICAgICAgICAgICAucHJvcCgnZGlzYWJsZWQnLCB0cnVlKVxuICAgICAgICAgICAgICAgIC5oaWRlKClcbiAgICAgICAgICAgICAgICAuYXR0cignbmFtZScsIGN1cnJlbnRTZWxlY3RFbGVtZW50LmF0dHIoJ25hbWUnKSlcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoY3VycmVudFNlbGVjdEVsZW1lbnQuYXR0cignY2xhc3MnKSlcbiAgICAgICAgICAgICAgICAuZGF0YSgnbGlua2VkU2VsZWN0RWxlbWVudCcsIHNlbGVjdEVsZW1lbnQpXG4gICAgICAgICAgICAgICAgLmluc2VydEFmdGVyKHNlbGVjdEVsZW1lbnQpO1xuXG4gICAgICAgICAgICBzZWxlY3RFbGVtZW50LmRhdGEoJ2xpbmtlZFNlbGVjdEVsZW1lbnQnLCBkaXNhYmxlZFNlbGVjdEVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gc2F2ZSB0aGUgc2VsZWN0ZWQgb3B0aW9uXG4gICAgY29uc3Qgc2VsZWN0ZWRPcHRpb24gPSBzZWxlY3RFbGVtZW50LmZpbmQoJ29wdGlvbjpzZWxlY3RlZCcpO1xuXG4gICAgLy8gbW92ZSB0aGUgb3B0aW9uIHRvIHRoZSBjb3JyZWN0IHNlbGVjdCBlbGVtZW50IGlmIHJlcXVpcmVkXG4gICAgaWYgKGN1cnJlbnRTZWxlY3RFbGVtZW50LmlzKCc6ZGlzYWJsZWQnKSAmJiBzaG93KSB7XG4gICAgICAgIGNvbnN0IHByZXZpb3VzSW5kZXggPSB0aGlzLmRhdGEoJ2luZGV4Jyk7XG4gICAgICAgIGNvbnN0ICRlbGVtZW50Tm93QXRQcmV2aW91c0luZGV4ID0gc2VsZWN0RWxlbWVudC5maW5kKCdvcHRpb24nKS5lcShwcmV2aW91c0luZGV4KTtcblxuICAgICAgICBpZiAoJGVsZW1lbnROb3dBdFByZXZpb3VzSW5kZXgubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLmluc2VydEJlZm9yZSgkZWxlbWVudE5vd0F0UHJldmlvdXNJbmRleCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkKHRoaXMpLmFwcGVuZFRvKHNlbGVjdEVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIGlmICghY3VycmVudFNlbGVjdEVsZW1lbnQuaXMoJzpkaXNhYmxlZCcpICYmICFzaG93KSB7XG4gICAgICAgIHRoaXMuZGF0YSgnaW5kZXgnLCBjdXJyZW50U2VsZWN0RWxlbWVudC5maW5kKCdvcHRpb24nKS5pbmRleCh0aGlzKSk7XG4gICAgICAgICQodGhpcykucHJlcGVuZFRvKGRpc2FibGVkU2VsZWN0RWxlbWVudCk7XG4gICAgfVxuXG4gICAgLy8gbWFrZSBzdXJlIHRoZSBvcHRpb24gaXMgc3RpbGwgc2VsZWN0ZWRcbiAgICBzZWxlY3RlZE9wdGlvbi5wcm9wKCdzZWxlY3RlZCcsIHRydWUpO1xufVxuXG4kLmZuLnRvZ2dsZU9wdGlvbiA9IHRvZ2dsZU9wdGlvbjtcbiIsImltcG9ydCB1dGlscyBmcm9tICdAYmlnY29tbWVyY2Uvc3RlbmNpbC11dGlscyc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgaW5zZXJ0U3RhdGVIaWRkZW5GaWVsZCB9IGZyb20gJy4vdXRpbHMvZm9ybS11dGlscyc7XG5pbXBvcnQgeyBzaG93QWxlcnRNb2RhbCB9IGZyb20gJy4uL2dsb2JhbC9tb2RhbCc7XG5cbi8qKlxuICogSWYgdGhlcmUgYXJlIG5vIG9wdGlvbnMgZnJvbSBiY2FwcCwgYSB0ZXh0IGZpZWxkIHdpbGwgYmUgc2VudC4gVGhpcyB3aWxsIGNyZWF0ZSBhIHNlbGVjdCBlbGVtZW50IHRvIGhvbGQgb3B0aW9ucyBhZnRlciB0aGUgcmVtb3RlIHJlcXVlc3QuXG4gKiBAcmV0dXJucyB7alF1ZXJ5fEhUTUxFbGVtZW50fVxuICovXG5mdW5jdGlvbiBtYWtlU3RhdGVSZXF1aXJlZChzdGF0ZUVsZW1lbnQsIGNvbnRleHQpIHtcbiAgICBjb25zdCBhdHRycyA9IF8udHJhbnNmb3JtKHN0YXRlRWxlbWVudC5wcm9wKCdhdHRyaWJ1dGVzJyksIChyZXN1bHQsIGl0ZW0pID0+IHtcbiAgICAgICAgY29uc3QgcmV0ID0gcmVzdWx0O1xuICAgICAgICByZXRbaXRlbS5uYW1lXSA9IGl0ZW0udmFsdWU7XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfSk7XG5cbiAgICBjb25zdCByZXBsYWNlbWVudEF0dHJpYnV0ZXMgPSB7XG4gICAgICAgIGlkOiBhdHRycy5pZCxcbiAgICAgICAgJ2RhdGEtbGFiZWwnOiBhdHRyc1snZGF0YS1sYWJlbCddLFxuICAgICAgICBjbGFzczogJ2Zvcm0tc2VsZWN0JyxcbiAgICAgICAgbmFtZTogYXR0cnMubmFtZSxcbiAgICAgICAgJ2RhdGEtZmllbGQtdHlwZSc6IGF0dHJzWydkYXRhLWZpZWxkLXR5cGUnXSxcbiAgICB9O1xuXG4gICAgc3RhdGVFbGVtZW50LnJlcGxhY2VXaXRoKCQoJzxzZWxlY3Q+PC9zZWxlY3Q+JywgcmVwbGFjZW1lbnRBdHRyaWJ1dGVzKSk7XG5cbiAgICBjb25zdCAkbmV3RWxlbWVudCA9ICQoJ1tkYXRhLWZpZWxkLXR5cGU9XCJTdGF0ZVwiXScpO1xuICAgIGNvbnN0ICRoaWRkZW5JbnB1dCA9ICQoJ1tuYW1lKj1cIkZvcm1GaWVsZElzVGV4dFwiXScpO1xuXG4gICAgaWYgKCRoaWRkZW5JbnB1dC5sZW5ndGggIT09IDApIHtcbiAgICAgICAgJGhpZGRlbklucHV0LnJlbW92ZSgpO1xuICAgIH1cblxuICAgIGlmICgkbmV3RWxlbWVudC5wcmV2KCkuZmluZCgnc21hbGwnKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgLy8gU3RyaW5nIGlzIGluamVjdGVkIGZyb20gbG9jYWxpemVyXG4gICAgICAgICRuZXdFbGVtZW50LnByZXYoKS5hcHBlbmQoYDxzbWFsbD4ke2NvbnRleHQucmVxdWlyZWR9PC9zbWFsbD5gKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAkbmV3RWxlbWVudC5wcmV2KCkuZmluZCgnc21hbGwnKS5zaG93KCk7XG4gICAgfVxuXG4gICAgcmV0dXJuICRuZXdFbGVtZW50O1xufVxuXG4vKipcbiAqIElmIGEgY291bnRyeSB3aXRoIHN0YXRlcyBpcyB0aGUgZGVmYXVsdCwgYSBzZWxlY3Qgd2lsbCBiZSBzZW50LFxuICogSW4gdGhpcyBjYXNlIHdlIG5lZWQgdG8gYmUgYWJsZSB0byBzd2l0Y2ggdG8gYW4gaW5wdXQgZmllbGQgYW5kIGhpZGUgdGhlIHJlcXVpcmVkIGZpZWxkXG4gKi9cbmZ1bmN0aW9uIG1ha2VTdGF0ZU9wdGlvbmFsKHN0YXRlRWxlbWVudCkge1xuICAgIGNvbnN0IGF0dHJzID0gXy50cmFuc2Zvcm0oc3RhdGVFbGVtZW50LnByb3AoJ2F0dHJpYnV0ZXMnKSwgKHJlc3VsdCwgaXRlbSkgPT4ge1xuICAgICAgICBjb25zdCByZXQgPSByZXN1bHQ7XG4gICAgICAgIHJldFtpdGVtLm5hbWVdID0gaXRlbS52YWx1ZTtcblxuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH0pO1xuXG4gICAgY29uc3QgcmVwbGFjZW1lbnRBdHRyaWJ1dGVzID0ge1xuICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgIGlkOiBhdHRycy5pZCxcbiAgICAgICAgJ2RhdGEtbGFiZWwnOiBhdHRyc1snZGF0YS1sYWJlbCddLFxuICAgICAgICBjbGFzczogJ2Zvcm0taW5wdXQnLFxuICAgICAgICBuYW1lOiBhdHRycy5uYW1lLFxuICAgICAgICAnZGF0YS1maWVsZC10eXBlJzogYXR0cnNbJ2RhdGEtZmllbGQtdHlwZSddLFxuICAgIH07XG5cbiAgICBzdGF0ZUVsZW1lbnQucmVwbGFjZVdpdGgoJCgnPGlucHV0IC8+JywgcmVwbGFjZW1lbnRBdHRyaWJ1dGVzKSk7XG5cbiAgICBjb25zdCAkbmV3RWxlbWVudCA9ICQoJ1tkYXRhLWZpZWxkLXR5cGU9XCJTdGF0ZVwiXScpO1xuXG4gICAgaWYgKCRuZXdFbGVtZW50Lmxlbmd0aCAhPT0gMCkge1xuICAgICAgICBpbnNlcnRTdGF0ZUhpZGRlbkZpZWxkKCRuZXdFbGVtZW50KTtcbiAgICAgICAgJG5ld0VsZW1lbnQucHJldigpLmZpbmQoJ3NtYWxsJykuaGlkZSgpO1xuICAgIH1cblxuICAgIHJldHVybiAkbmV3RWxlbWVudDtcbn1cblxuLyoqXG4gKiBBZGRzIHRoZSBhcnJheSBvZiBvcHRpb25zIGZyb20gdGhlIHJlbW90ZSByZXF1ZXN0IHRvIHRoZSBuZXdseSBjcmVhdGVkIHNlbGVjdCBib3guXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhdGVzQXJyYXlcbiAqIEBwYXJhbSB7alF1ZXJ5fSAkc2VsZWN0RWxlbWVudFxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqL1xuZnVuY3Rpb24gYWRkT3B0aW9ucyhzdGF0ZXNBcnJheSwgJHNlbGVjdEVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBjb250YWluZXIgPSBbXTtcblxuICAgIGNvbnRhaW5lci5wdXNoKGA8b3B0aW9uIHZhbHVlPVwiXCI+JHtzdGF0ZXNBcnJheS5wcmVmaXh9PC9vcHRpb24+YCk7XG5cbiAgICBpZiAoIV8uaXNFbXB0eSgkc2VsZWN0RWxlbWVudCkpIHtcbiAgICAgICAgXy5lYWNoKHN0YXRlc0FycmF5LnN0YXRlcywgKHN0YXRlT2JqKSA9PiB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy51c2VJZEZvclN0YXRlcykge1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5wdXNoKGA8b3B0aW9uIHZhbHVlPVwiJHtzdGF0ZU9iai5pZH1cIj4ke3N0YXRlT2JqLm5hbWV9PC9vcHRpb24+YCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5wdXNoKGA8b3B0aW9uIHZhbHVlPVwiJHtzdGF0ZU9iai5uYW1lfVwiPiR7c3RhdGVPYmoubmFtZX08L29wdGlvbj5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgJHNlbGVjdEVsZW1lbnQuaHRtbChjb250YWluZXIuam9pbignICcpKTtcbiAgICB9XG59XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7alF1ZXJ5fSBzdGF0ZUVsZW1lbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb250ZXh0XG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKHN0YXRlRWxlbWVudCwgY29udGV4dCA9IHt9LCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgIC8qKlxuICAgICAqIEJhY2t3YXJkcyBjb21wYXRpYmxlIGZvciB0aHJlZSBwYXJhbWV0ZXJzIGluc3RlYWQgb2YgZm91clxuICAgICAqXG4gICAgICogQXZhaWxhYmxlIG9wdGlvbnM6XG4gICAgICpcbiAgICAgKiB1c2VJZEZvclN0YXRlcyB7Qm9vbH0gLSBHZW5lcmF0ZXMgc3RhdGVzIGRyb3Bkb3duIHVzaW5nIGlkIGZvciB2YWx1ZXMgaW5zdGVhZCBvZiBzdHJpbmdzXG4gICAgICovXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXBhcmFtLXJlYXNzaWduICovXG4gICAgICAgIGNhbGxiYWNrID0gb3B0aW9ucztcbiAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXBhcmFtLXJlYXNzaWduICovXG4gICAgfVxuXG4gICAgJCgnc2VsZWN0W2RhdGEtZmllbGQtdHlwZT1cIkNvdW50cnlcIl0nKS5vbignY2hhbmdlJywgZXZlbnQgPT4ge1xuICAgICAgICBjb25zdCBjb3VudHJ5TmFtZSA9ICQoZXZlbnQuY3VycmVudFRhcmdldCkudmFsKCk7XG5cbiAgICAgICAgaWYgKGNvdW50cnlOYW1lID09PSAnJykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdXRpbHMuYXBpLmNvdW50cnkuZ2V0QnlOYW1lKGNvdW50cnlOYW1lLCAoZXJyLCByZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIHNob3dBbGVydE1vZGFsKGNvbnRleHQuc3RhdGVfZXJyb3IpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCAkY3VycmVudElucHV0ID0gJCgnW2RhdGEtZmllbGQtdHlwZT1cIlN0YXRlXCJdJyk7XG5cbiAgICAgICAgICAgIGlmICghXy5pc0VtcHR5KHJlc3BvbnNlLmRhdGEuc3RhdGVzKSkge1xuICAgICAgICAgICAgICAgIC8vIFRoZSBlbGVtZW50IG1heSBoYXZlIGJlZW4gcmVwbGFjZWQgd2l0aCBhIHNlbGVjdCwgcmVzZWxlY3QgaXRcbiAgICAgICAgICAgICAgICBjb25zdCAkc2VsZWN0RWxlbWVudCA9IG1ha2VTdGF0ZVJlcXVpcmVkKCRjdXJyZW50SW5wdXQsIGNvbnRleHQpO1xuXG4gICAgICAgICAgICAgICAgYWRkT3B0aW9ucyhyZXNwb25zZS5kYXRhLCAkc2VsZWN0RWxlbWVudCwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgJHNlbGVjdEVsZW1lbnQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdFbGVtZW50ID0gbWFrZVN0YXRlT3B0aW9uYWwoJGN1cnJlbnRJbnB1dCwgY29udGV4dCk7XG5cbiAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCBuZXdFbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG4iLCIvKipcbiAqIFRoaXMgZnVuY3Rpb24gcmVtb3ZlcyBhbnkgZW1wdHkgc3RyaW5nIHZhbHVlcyBmcm9tIHRoZSBmb3JtRGF0YVxuICogQHBhcmFtIGZvcm1EYXRhOiBGb3JtRGF0YSBvYmplY3RcbiAqIEByZXR1cm5zIEZvcm1EYXRhIG9iamVjdFxuKi9cbmV4cG9ydCBjb25zdCBmaWx0ZXJFbXB0eVZhbHVlc0Zyb21Gb3JtID0gZm9ybURhdGEgPT4ge1xuICAgIGNvbnN0IHJlcyA9IG5ldyBGb3JtRGF0YSgpO1xuXG4gICAgdHJ5IHtcbiAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWxdIG9mIGZvcm1EYXRhKSB7XG4gICAgICAgICAgICBpZiAodmFsICE9PSAnJykge1xuICAgICAgICAgICAgICAgIHJlcy5hcHBlbmQoa2V5LCB2YWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLmxvZyhlKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbn07XG5cbi8qKlxuICogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNDk2NzI5OTIvYWpheC1yZXF1ZXN0LWZhaWxzLXdoZW4tc2VuZGluZy1mb3JtZGF0YS1pbmNsdWRpbmctZW1wdHktZmlsZS1pbnB1dC1pbi1zYWZhcmlcbiAqIFNhZmFyaSBicm93c2VyIHdpdGgganF1ZXJ5IDMuMy4xIGhhcyBhbiBpc3N1ZSB1cGxvYWRpbmcgZW1wdHkgZmlsZSBwYXJhbWV0ZXJzLiBUaGlzIGZ1bmN0aW9uIHJlbW92ZXMgYW55IGVtcHR5IGZpbGVzIGZyb20gdGhlIGZvcm0gcGFyYW1zXG4gKiBAcGFyYW0gZm9ybURhdGE6IEZvcm1EYXRhIG9iamVjdFxuICogQHJldHVybnMgRm9ybURhdGEgb2JqZWN0XG4gKi9cbmV4cG9ydCBjb25zdCBmaWx0ZXJFbXB0eUZpbGVzRnJvbUZvcm0gPSBmb3JtRGF0YSA9PiB7XG4gICAgY29uc3QgcmVzID0gbmV3IEZvcm1EYXRhKCk7XG5cbiAgICB0cnkge1xuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbF0gb2YgZm9ybURhdGEpIHtcbiAgICAgICAgICAgIGlmICghKHZhbCBpbnN0YW5jZW9mIEZpbGUpIHx8IHZhbC5uYW1lIHx8IHZhbC5zaXplKSB7XG4gICAgICAgICAgICAgICAgcmVzLmFwcGVuZChrZXksIHZhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgIH1cblxuICAgIHJldHVybiByZXM7XG59O1xuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gcmVtb3ZlcyBlbXB0eSBzdHJpbmcgdmFsdWVzIGFuZCBlbXB0eSBmaWxlcyBmcm9tIHRoZSBmb3JtRGF0YVxuICogQHBhcmFtIGZvcm1EYXRhOiBGb3JtRGF0YSBvYmplY3RcbiAqIEByZXR1cm5zIEZvcm1EYXRhIG9iamVjdFxuICovXG5leHBvcnQgY29uc3Qgbm9ybWFsaXplRm9ybURhdGEgPSBmb3JtRGF0YSA9PiBmaWx0ZXJFbXB0eVZhbHVlc0Zyb21Gb3JtKGZpbHRlckVtcHR5RmlsZXNGcm9tRm9ybShmb3JtRGF0YSkpO1xuIiwiaW1wb3J0IHsgaXNCcm93c2VySUUgfSBmcm9tICcuL2llLWhlbHBlcnMnO1xuXG5jb25zdCBiYW5uZXJVdGlscyA9IHtcbiAgICBkaXNwYXRjaFByb2R1Y3RCYW5uZXJFdmVudDogKHByb2R1Y3RBdHRyaWJ1dGVzKSA9PiB7XG4gICAgICAgIGlmICghcHJvZHVjdEF0dHJpYnV0ZXMucHJpY2UgfHwgaXNCcm93c2VySUUpIHJldHVybjtcblxuICAgICAgICBsZXQgcHJpY2UgPSAwO1xuXG4gICAgICAgIGlmICghcHJvZHVjdEF0dHJpYnV0ZXMucHJpY2UucHJpY2VfcmFuZ2UpIHtcbiAgICAgICAgICAgIGlmIChwcm9kdWN0QXR0cmlidXRlcy5wcmljZS53aXRob3V0X3RheCkge1xuICAgICAgICAgICAgICAgIHByaWNlID0gcHJvZHVjdEF0dHJpYnV0ZXMucHJpY2Uud2l0aG91dF90YXgudmFsdWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChwcm9kdWN0QXR0cmlidXRlcy5wcmljZS53aXRoX3RheCkge1xuICAgICAgICAgICAgICAgIHByaWNlID0gcHJvZHVjdEF0dHJpYnV0ZXMucHJpY2Uud2l0aF90YXgudmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBldnQgPSBuZXcgQ3VzdG9tRXZlbnQoJ2JpZ2NvbW1lcmNlLnByb2R1Y3RwcmljZWNoYW5nZScsIHtcbiAgICAgICAgICAgIGRldGFpbDoge1xuICAgICAgICAgICAgICAgIGFtb3VudDogcHJpY2UsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcblxuICAgICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChldnQpO1xuICAgIH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBiYW5uZXJVdGlscztcbiIsImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgbm9kIGZyb20gJy4uL25vZCc7XG5pbXBvcnQgZm9ybXMgZnJvbSAnLi4vbW9kZWxzL2Zvcm1zJztcblxuY29uc3QgaW5wdXRUYWdOYW1lcyA9IFtcbiAgICAnaW5wdXQnLFxuICAgICdzZWxlY3QnLFxuICAgICd0ZXh0YXJlYScsXG5dO1xuLyoqXG4gKiBTZXQgdXAgT2JqZWN0IHdpdGggRXJyb3IgTWVzc2FnZXMgb24gUGFzc3dvcmQgVmFsaWRhdGlvbi4gUGxlYXNlIHVzZSBtZXNzYWdlcyBpbiBtZW50aW9uZWQgb3JkZXJcbiAqIEBwYXJhbSB7c3RyaW5nfSBlbXB0eSBkZWZpbmVzIGVycm9yIHRleHQgZm9yIGVtcHR5IGZpZWxkXG4gKiBAcGFyYW0ge3N0cmluZ30gY29uZmlybSBkZWZpbmVzIGVycm9yIHRleHQgZm9yIGVtcHR5IGNvbmZpcm1hdGlvbiBmaWVsZFxuICogQHBhcmFtIHtzdHJpbmd9IG1pc21hdGNoIGRlZmluZXMgZXJyb3IgdGV4dCBpZiBjb25maXJtIHBhc3Nmb3JkIG1pc21hdGNoZXMgcGFzc2ZvcmQgZmllbGRcbiAqIEBwYXJhbSB7c3RyaW5nfSBpbnZhbGlkIGRlZmluZXMgZXJyb3IgdGV4dCBmb3IgaW52YWxpZCBwYXNzd29yZCBjaGFyYXRlcnMgc2VxdWVuY2VcbiAqIEByZXR1cm4ge29iamVjdH0gbWVzc2FnZXMgb3IgZGVmYXVsdCB0ZXh0cyBpZiBub3RoaW5nIGlzIHByb3ZpZGluZ1xuICovXG5leHBvcnQgY29uc3QgY3JlYXRlUGFzc3dvcmRWYWxpZGF0aW9uRXJyb3JUZXh0T2JqZWN0ID0gKGVtcHR5LCBjb25maXJtLCBtaXNtYXRjaCwgaW52YWxpZCkgPT4gKHtcbiAgICBvbkVtcHR5UGFzc3dvcmRFcnJvclRleHQ6IGVtcHR5LFxuICAgIG9uQ29uZmlybVBhc3N3b3JkRXJyb3JUZXh0OiBjb25maXJtLFxuICAgIG9uTWlzbWF0Y2hQYXNzd29yZEVycm9yVGV4dDogbWlzbWF0Y2gsXG4gICAgb25Ob3RWYWxpZFBhc3N3b3JkRXJyb3JUZXh0OiBpbnZhbGlkLFxufSk7XG5cblxuLyoqXG4gKiBBcHBseSBjbGFzcyBuYW1lIHRvIGFuIGlucHV0IGVsZW1lbnQgb24gaXRzIHR5cGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBpbnB1dFxuICogQHBhcmFtIHtzdHJpbmd9IGZvcm1GaWVsZENsYXNzXG4gKiBAcmV0dXJuIHtvYmplY3R9IEVsZW1lbnQgaXRzZWxmXG4gKi9cbmZ1bmN0aW9uIGNsYXNzaWZ5SW5wdXQoaW5wdXQsIGZvcm1GaWVsZENsYXNzKSB7XG4gICAgY29uc3QgJGlucHV0ID0gJChpbnB1dCk7XG4gICAgY29uc3QgJGZvcm1GaWVsZCA9ICRpbnB1dC5wYXJlbnQoYC4ke2Zvcm1GaWVsZENsYXNzfWApO1xuICAgIGNvbnN0IHRhZ05hbWUgPSAkaW5wdXQucHJvcCgndGFnTmFtZScpLnRvTG93ZXJDYXNlKCk7XG5cbiAgICBsZXQgY2xhc3NOYW1lID0gYCR7Zm9ybUZpZWxkQ2xhc3N9LS0ke3RhZ05hbWV9YDtcbiAgICBsZXQgc3BlY2lmaWNDbGFzc05hbWU7XG5cbiAgICAvLyBJbnB1dCBjYW4gYmUgdGV4dC9jaGVja2JveC9yYWRpbyBldGMuLi5cbiAgICBpZiAodGFnTmFtZSA9PT0gJ2lucHV0Jykge1xuICAgICAgICBjb25zdCBpbnB1dFR5cGUgPSAkaW5wdXQucHJvcCgndHlwZScpO1xuXG4gICAgICAgIGlmIChfLmluY2x1ZGVzKFsncmFkaW8nLCAnY2hlY2tib3gnLCAnc3VibWl0J10sIGlucHV0VHlwZSkpIHtcbiAgICAgICAgICAgIC8vIGllOiAuZm9ybS1maWVsZC0tY2hlY2tib3gsIC5mb3JtLWZpZWxkLS1yYWRpb1xuICAgICAgICAgICAgY2xhc3NOYW1lID0gYCR7Zm9ybUZpZWxkQ2xhc3N9LS0ke18uY2FtZWxDYXNlKGlucHV0VHlwZSl9YDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGllOiAuZm9ybS1maWVsZC0taW5wdXQgLmZvcm0tZmllbGQtLWlucHV0VGV4dFxuICAgICAgICAgICAgc3BlY2lmaWNDbGFzc05hbWUgPSBgJHtjbGFzc05hbWV9JHtfLmNhcGl0YWxpemUoaW5wdXRUeXBlKX1gO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gQXBwbHkgY2xhc3MgbW9kaWZpZXJcbiAgICByZXR1cm4gJGZvcm1GaWVsZFxuICAgICAgICAuYWRkQ2xhc3MoY2xhc3NOYW1lKVxuICAgICAgICAuYWRkQ2xhc3Moc3BlY2lmaWNDbGFzc05hbWUpO1xufVxuXG4vKipcbiAqIEFwcGx5IGNsYXNzIG5hbWUgdG8gZWFjaCBpbnB1dCBlbGVtZW50IGluIGEgZm9ybSBiYXNlZCBvbiBpdHMgdHlwZVxuICogQGV4YW1wbGVcbiAqIC8vIEJlZm9yZVxuICogPGZvcm0gaWQ9XCJmb3JtXCI+XG4gKiAgICAgPGRpdiBjbGFzcz1cImZvcm0tZmllbGRcIj5cbiAqICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCI+XG4gKiAgICAgPC9kaXY+XG4gKiAgICAgPGRpdiBjbGFzcz1cImZvcm0tZmllbGRcIj5cbiAqICAgICAgICAgPHNlbGVjdD4uLi48L3NlbGVjdD5cbiAqICAgICA8L2Rpdj5cbiAqIDwvZm9ybT5cbiAqXG4gKiBjbGFzc2lmeUZvcm0oJyNmb3JtJywgeyBmb3JtRmllbGRDbGFzczogJ2Zvcm0tZmllbGQnIH0pO1xuICpcbiAqIC8vIEFmdGVyXG4gKiA8ZGl2IGNsYXNzPVwiZm9ybS1maWVsZCBmb3JtLWZpZWxkLS1pbnB1dCBmb3JtLWZpZWxkLS1pbnB1dFRleHRcIj4uLi48L2Rpdj5cbiAqIDxkaXYgY2xhc3M9XCJmb3JtLWZpZWxkIGZvcm0tZmllbGQtLXNlbGVjdFwiPi4uLjwvZGl2PlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfG9iamVjdH0gZm9ybVNlbGVjdG9yIC0gc2VsZWN0b3Igb3IgZWxlbWVudFxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4ge2pRdWVyeX0gRWxlbWVudCBpdHNlbGZcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNsYXNzaWZ5Rm9ybShmb3JtU2VsZWN0b3IsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0ICRmb3JtID0gJChmb3JtU2VsZWN0b3IpO1xuICAgIGNvbnN0ICRpbnB1dHMgPSAkZm9ybS5maW5kKGlucHV0VGFnTmFtZXMuam9pbignLCAnKSk7XG5cbiAgICAvLyBPYnRhaW4gb3B0aW9uc1xuICAgIGNvbnN0IHsgZm9ybUZpZWxkQ2xhc3MgPSAnZm9ybS1maWVsZCcgfSA9IG9wdGlvbnM7XG5cbiAgICAvLyBDbGFzc2lmeSBlYWNoIGlucHV0IGluIGEgZm9ybVxuICAgICRpbnB1dHMuZWFjaCgoX18sIGlucHV0KSA9PiB7XG4gICAgICAgIGNsYXNzaWZ5SW5wdXQoaW5wdXQsIGZvcm1GaWVsZENsYXNzKTtcbiAgICB9KTtcblxuICAgIHJldHVybiAkZm9ybTtcbn1cblxuLyoqXG4gKiBHZXQgaWQgZnJvbSBnaXZlbiBmaWVsZFxuICogQHBhcmFtIHtvYmplY3R9ICRmaWVsZCBKUXVlcnkgZmllbGQgb2JqZWN0XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGdldEZpZWxkSWQoJGZpZWxkKSB7XG4gICAgY29uc3QgZmllbGRJZCA9ICRmaWVsZC5wcm9wKCduYW1lJykubWF0Y2goLyhcXFsuKlxcXSkvKTtcblxuICAgIGlmIChmaWVsZElkICYmIGZpZWxkSWQubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIHJldHVybiBmaWVsZElkWzBdO1xuICAgIH1cblxuICAgIHJldHVybiAnJztcbn1cblxuLyoqXG4gKiBJbnNlcnQgaGlkZGVuIGZpZWxkIGFmdGVyIFN0YXRlL1Byb3ZpbmNlIGZpZWxkXG4gKiBAcGFyYW0ge29iamVjdH0gJHN0YXRlRmllbGQgSlF1ZXJ5IGZpZWxkIG9iamVjdFxuICovXG5mdW5jdGlvbiBpbnNlcnRTdGF0ZUhpZGRlbkZpZWxkKCRzdGF0ZUZpZWxkKSB7XG4gICAgY29uc3QgZmllbGRJZCA9IGdldEZpZWxkSWQoJHN0YXRlRmllbGQpO1xuICAgIGNvbnN0IHN0YXRlRmllbGRBdHRycyA9IHtcbiAgICAgICAgdHlwZTogJ2hpZGRlbicsXG4gICAgICAgIG5hbWU6IGBGb3JtRmllbGRJc1RleHQke2ZpZWxkSWR9YCxcbiAgICAgICAgdmFsdWU6ICcxJyxcbiAgICB9O1xuXG4gICAgJHN0YXRlRmllbGQuYWZ0ZXIoJCgnPGlucHV0IC8+Jywgc3RhdGVGaWVsZEF0dHJzKSk7XG59XG5cbi8qKlxuICogQW5ub3VuY2UgZm9ybSBpbnB1dCBlcnJvciBtZXNzYWdlIGJ5IHNjcmVlbiByZWFkZXJcbiAqIEBwYXJhbSB7cGFyYW1zLmVsZW1lbnR9IGRvbSBpbnB1dCBlbGVtZW50IHdoZXJlIGNoZWNraW5nIGlzIGhhcHBlbmVkXG4gKiBAcGFyYW0ge3BhcmFtcy5yZXN1bHR9IHJlc3VsdCBvZiB2YWxpZGF0aW9uIGNoZWNrXG4gKi9cbmZ1bmN0aW9uIGFubm91bmNlSW5wdXRFcnJvck1lc3NhZ2UoeyBlbGVtZW50LCByZXN1bHQgfSkge1xuICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBhY3RpdmVJbnB1dENvbnRhaW5lciA9ICQoZWxlbWVudCkucGFyZW50KCk7XG4gICAgLy8gdGhlIHJlYXNvbiBmb3IgdXNpbmcgc3BhbiB0YWcgaXMgbm9kLXZhbGlkYXRlIGxpYlxuICAgIC8vIHdoaWNoIGRvZXMgbm90IGFkZCBlcnJvciBtZXNzYWdlIGNsYXNzIHdoaWxlIGluaXRpYWxpc2luZyBmb3JtXG4gICAgY29uc3QgZXJyb3JNZXNzYWdlID0gJChhY3RpdmVJbnB1dENvbnRhaW5lcikuZmluZCgnc3BhbicpO1xuXG4gICAgaWYgKGVycm9yTWVzc2FnZS5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgJGVyck1lc3NhZ2UgPSAkKGVycm9yTWVzc2FnZVswXSk7XG5cbiAgICAgICAgaWYgKCEkZXJyTWVzc2FnZS5hdHRyKCdyb2xlJykpIHtcbiAgICAgICAgICAgICRlcnJNZXNzYWdlLmF0dHIoJ3JvbGUnLCAnYWxlcnQnKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuY29uc3QgVmFsaWRhdG9ycyA9IHtcbiAgICAvKipcbiAgICAgKiBTZXRzIHVwIGEgbmV3IHZhbGlkYXRpb24gd2hlbiB0aGUgZm9ybSBpcyBkaXJ0eVxuICAgICAqIEBwYXJhbSB2YWxpZGF0b3JcbiAgICAgKiBAcGFyYW0gZmllbGRcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXJyb3JUZXh0IGRlc2NyaWJlcyBlcnJvck1hc3NhZ2Ugb24gZW1haWwgdmFsaWRhdGlvblxuICAgICAqL1xuICAgIHNldEVtYWlsVmFsaWRhdGlvbjogKHZhbGlkYXRvciwgZmllbGQsIGVycm9yVGV4dCkgPT4ge1xuICAgICAgICBpZiAoZmllbGQpIHtcbiAgICAgICAgICAgIHZhbGlkYXRvci5hZGQoe1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yOiBmaWVsZCxcbiAgICAgICAgICAgICAgICB2YWxpZGF0ZTogKGNiLCB2YWwpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gZm9ybXMuZW1haWwodmFsKTtcblxuICAgICAgICAgICAgICAgICAgICBjYihyZXN1bHQpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBlcnJvclRleHQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBWYWxpZGF0ZSBwYXNzd29yZCBmaWVsZHNcbiAgICAgKiBAcGFyYW0gdmFsaWRhdG9yXG4gICAgICogQHBhcmFtIHBhc3N3b3JkU2VsZWN0b3JcbiAgICAgKiBAcGFyYW0gcGFzc3dvcmQyU2VsZWN0b3JcbiAgICAgKiBAcGFyYW0gcmVxdWlyZW1lbnRzXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGVycm9yVGV4dHNPYmplY3RcbiAgICAgKiBAcGFyYW0gaXNPcHRpb25hbFxuICAgICAqL1xuICAgIHNldFBhc3N3b3JkVmFsaWRhdGlvbjogKHZhbGlkYXRvciwgcGFzc3dvcmRTZWxlY3RvciwgcGFzc3dvcmQyU2VsZWN0b3IsIHJlcXVpcmVtZW50cywge1xuICAgICAgICBvbkVtcHR5UGFzc3dvcmRFcnJvclRleHQsIG9uQ29uZmlybVBhc3N3b3JkRXJyb3JUZXh0LCBvbk1pc21hdGNoUGFzc3dvcmRFcnJvclRleHQsIG9uTm90VmFsaWRQYXNzd29yZEVycm9yVGV4dCxcbiAgICB9LCBpc09wdGlvbmFsKSA9PiB7XG4gICAgICAgIGNvbnN0ICRwYXNzd29yZCA9ICQocGFzc3dvcmRTZWxlY3Rvcik7XG4gICAgICAgIGNvbnN0IHBhc3N3b3JkVmFsaWRhdGlvbnMgPSBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3I6IHBhc3N3b3JkU2VsZWN0b3IsXG4gICAgICAgICAgICAgICAgdmFsaWRhdGU6IChjYiwgdmFsKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHZhbC5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzT3B0aW9uYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjYih0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGNiKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2U6IG9uRW1wdHlQYXNzd29yZEVycm9yVGV4dCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3I6IHBhc3N3b3JkU2VsZWN0b3IsXG4gICAgICAgICAgICAgICAgdmFsaWRhdGU6IChjYiwgdmFsKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHZhbC5tYXRjaChuZXcgUmVnRXhwKHJlcXVpcmVtZW50cy5hbHBoYSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAmJiB2YWwubWF0Y2gobmV3IFJlZ0V4cChyZXF1aXJlbWVudHMubnVtZXJpYykpXG4gICAgICAgICAgICAgICAgICAgICAgICAmJiB2YWwubGVuZ3RoID49IHJlcXVpcmVtZW50cy5taW5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgb3B0aW9uYWwgYW5kIG5vdGhpbmcgZW50ZXJlZCwgaXQgaXMgdmFsaWRcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzT3B0aW9uYWwgJiYgdmFsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNiKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgY2IocmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZTogb25Ob3RWYWxpZFBhc3N3b3JkRXJyb3JUZXh0LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzZWxlY3RvcjogcGFzc3dvcmQyU2VsZWN0b3IsXG4gICAgICAgICAgICAgICAgdmFsaWRhdGU6IChjYiwgdmFsKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHZhbC5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzT3B0aW9uYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjYih0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGNiKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2U6IG9uQ29uZmlybVBhc3N3b3JkRXJyb3JUZXh0LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzZWxlY3RvcjogcGFzc3dvcmQyU2VsZWN0b3IsXG4gICAgICAgICAgICAgICAgdmFsaWRhdGU6IChjYiwgdmFsKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHZhbCA9PT0gJHBhc3N3b3JkLnZhbCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIGNiKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2U6IG9uTWlzbWF0Y2hQYXNzd29yZEVycm9yVGV4dCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF07XG5cbiAgICAgICAgdmFsaWRhdG9yLmFkZChwYXNzd29yZFZhbGlkYXRpb25zKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVmFsaWRhdGUgcGFzc3dvcmQgZmllbGRzXG4gICAgICogQHBhcmFtIHtOb2R9IHZhbGlkYXRvclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzZWxlY3RvcnNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc2VsZWN0b3JzLmVycm9yU2VsZWN0b3JcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc2VsZWN0b3JzLmZpZWxkc2V0U2VsZWN0b3JcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc2VsZWN0b3JzLmZvcm1TZWxlY3RvclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlY3RvcnMubWF4UHJpY2VTZWxlY3RvclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlY3RvcnMubWluUHJpY2VTZWxlY3RvclxuICAgICAqL1xuICAgIHNldE1pbk1heFByaWNlVmFsaWRhdGlvbjogKHZhbGlkYXRvciwgc2VsZWN0b3JzLCBwcmljZVZhbGlkYXRpb25FcnJvclRleHRzID0ge30pID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgZXJyb3JTZWxlY3RvcixcbiAgICAgICAgICAgIGZpZWxkc2V0U2VsZWN0b3IsXG4gICAgICAgICAgICBmb3JtU2VsZWN0b3IsXG4gICAgICAgICAgICBtYXhQcmljZVNlbGVjdG9yLFxuICAgICAgICAgICAgbWluUHJpY2VTZWxlY3RvcixcbiAgICAgICAgfSA9IHNlbGVjdG9ycztcblxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgb2JqZWN0LWN1cmx5LW5ld2xpbmVcbiAgICAgICAgY29uc3QgeyBvbk1pblByaWNlRXJyb3IsIG9uTWF4UHJpY2VFcnJvciwgbWluUHJpY2VOb3RFbnRlcmVkLCBtYXhQcmljZU5vdEVudGVyZWQsIG9uSW52YWxpZFByaWNlIH0gPSBwcmljZVZhbGlkYXRpb25FcnJvclRleHRzO1xuXG4gICAgICAgIHZhbGlkYXRvci5jb25maWd1cmUoe1xuICAgICAgICAgICAgZm9ybTogZm9ybVNlbGVjdG9yLFxuICAgICAgICAgICAgcHJldmVudFN1Ym1pdDogdHJ1ZSxcbiAgICAgICAgICAgIHN1Y2Nlc3NDbGFzczogJ18nLCAvLyBLTFVER0U6IERvbid0IGFwcGx5IHN1Y2Nlc3MgY2xhc3NcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFsaWRhdG9yLmFkZCh7XG4gICAgICAgICAgICBlcnJvck1lc3NhZ2U6IG9uTWluUHJpY2VFcnJvcixcbiAgICAgICAgICAgIHNlbGVjdG9yOiBtaW5QcmljZVNlbGVjdG9yLFxuICAgICAgICAgICAgdmFsaWRhdGU6IGBtaW4tbWF4OiR7bWluUHJpY2VTZWxlY3Rvcn06JHttYXhQcmljZVNlbGVjdG9yfWAsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhbGlkYXRvci5hZGQoe1xuICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBvbk1heFByaWNlRXJyb3IsXG4gICAgICAgICAgICBzZWxlY3RvcjogbWF4UHJpY2VTZWxlY3RvcixcbiAgICAgICAgICAgIHZhbGlkYXRlOiBgbWluLW1heDoke21pblByaWNlU2VsZWN0b3J9OiR7bWF4UHJpY2VTZWxlY3Rvcn1gLFxuICAgICAgICB9KTtcblxuICAgICAgICB2YWxpZGF0b3IuYWRkKHtcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZTogbWF4UHJpY2VOb3RFbnRlcmVkLFxuICAgICAgICAgICAgc2VsZWN0b3I6IG1heFByaWNlU2VsZWN0b3IsXG4gICAgICAgICAgICB2YWxpZGF0ZTogJ3ByZXNlbmNlJyxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFsaWRhdG9yLmFkZCh7XG4gICAgICAgICAgICBlcnJvck1lc3NhZ2U6IG1pblByaWNlTm90RW50ZXJlZCxcbiAgICAgICAgICAgIHNlbGVjdG9yOiBtaW5QcmljZVNlbGVjdG9yLFxuICAgICAgICAgICAgdmFsaWRhdGU6ICdwcmVzZW5jZScsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhbGlkYXRvci5hZGQoe1xuICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBvbkludmFsaWRQcmljZSxcbiAgICAgICAgICAgIHNlbGVjdG9yOiBbbWluUHJpY2VTZWxlY3RvciwgbWF4UHJpY2VTZWxlY3Rvcl0sXG4gICAgICAgICAgICB2YWxpZGF0ZTogJ21pbi1udW1iZXI6MCcsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhbGlkYXRvci5zZXRNZXNzYWdlT3B0aW9ucyh7XG4gICAgICAgICAgICBzZWxlY3RvcjogW21pblByaWNlU2VsZWN0b3IsIG1heFByaWNlU2VsZWN0b3JdLFxuICAgICAgICAgICAgcGFyZW50OiBmaWVsZHNldFNlbGVjdG9yLFxuICAgICAgICAgICAgZXJyb3JTcGFuOiBlcnJvclNlbGVjdG9yLFxuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2V0cyB1cCBhIG5ldyB2YWxpZGF0aW9uIHdoZW4gdGhlIGZvcm0gaXMgZGlydHlcbiAgICAgKiBAcGFyYW0gdmFsaWRhdG9yXG4gICAgICogQHBhcmFtIGZpZWxkXG4gICAgICovXG4gICAgc2V0U3RhdGVDb3VudHJ5VmFsaWRhdGlvbjogKHZhbGlkYXRvciwgZmllbGQsIGVycm9yVGV4dCkgPT4ge1xuICAgICAgICBpZiAoZmllbGQpIHtcbiAgICAgICAgICAgIHZhbGlkYXRvci5hZGQoe1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yOiBmaWVsZCxcbiAgICAgICAgICAgICAgICB2YWxpZGF0ZTogJ3ByZXNlbmNlJyxcbiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2U6IGVycm9yVGV4dCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgY2xhc3NlcyBmcm9tIGRpcnR5IGZvcm0gaWYgcHJldmlvdXNseSBjaGVja2VkXG4gICAgICogQHBhcmFtIGZpZWxkXG4gICAgICovXG4gICAgY2xlYW5VcFN0YXRlVmFsaWRhdGlvbjogKGZpZWxkKSA9PiB7XG4gICAgICAgIGNvbnN0ICRmaWVsZENsYXNzRWxlbWVudCA9ICQoKGBbZGF0YS10eXBlPVwiJHtmaWVsZC5kYXRhKCdmaWVsZFR5cGUnKX1cIl1gKSk7XG5cbiAgICAgICAgT2JqZWN0LmtleXMobm9kLmNsYXNzZXMpLmZvckVhY2goKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICBpZiAoJGZpZWxkQ2xhc3NFbGVtZW50Lmhhc0NsYXNzKG5vZC5jbGFzc2VzW3ZhbHVlXSkpIHtcbiAgICAgICAgICAgICAgICAkZmllbGRDbGFzc0VsZW1lbnQucmVtb3ZlQ2xhc3Mobm9kLmNsYXNzZXNbdmFsdWVdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSxcbn07XG5cbmV4cG9ydCB7IFZhbGlkYXRvcnMsIGluc2VydFN0YXRlSGlkZGVuRmllbGQsIGFubm91bmNlSW5wdXRFcnJvck1lc3NhZ2UgfTtcbiIsImV4cG9ydCBjb25zdCBpc0Jyb3dzZXJJRSA9ICEhZG9jdW1lbnQuZG9jdW1lbnRNb2RlO1xuXG5leHBvcnQgY29uc3QgY29udmVydEludG9BcnJheSA9IGNvbGxlY3Rpb24gPT4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoY29sbGVjdGlvbik7XG4iLCJjb25zdCBjaGFuZ2VXaXNobGlzdFBhZ2luYXRpb25MaW5rcyA9ICh3aXNobGlzdFVybCwgLi4ucGFnaW5hdGlvbkl0ZW1zKSA9PiAkLmVhY2gocGFnaW5hdGlvbkl0ZW1zLCAoXywgJGl0ZW0pID0+IHtcbiAgICBjb25zdCBwYWdpbmF0aW9uTGluayA9ICRpdGVtLmNoaWxkcmVuKCcucGFnaW5hdGlvbi1saW5rJyk7XG5cbiAgICBpZiAoJGl0ZW0ubGVuZ3RoICYmICFwYWdpbmF0aW9uTGluay5hdHRyKCdocmVmJykuaW5jbHVkZXMoJ3BhZ2U9JykpIHtcbiAgICAgICAgY29uc3QgcGFnZU51bWJlciA9IHBhZ2luYXRpb25MaW5rLmF0dHIoJ2hyZWYnKTtcbiAgICAgICAgcGFnaW5hdGlvbkxpbmsuYXR0cignaHJlZicsIGAke3dpc2hsaXN0VXJsfXBhZ2U9JHtwYWdlTnVtYmVyfWApO1xuICAgIH1cbn0pO1xuXG4vKipcbiAqIGhlbHBzIHRvIHdpdGhkcmF3IGRpZmZlcmVuY2VzIGluIHN0cnVjdHVyZXMgYXJvdW5kIHRoZSBzdGVuY2lsIHJlc291cmNlIHBhZ2luYXRpb25cbiAqL1xuZXhwb3J0IGNvbnN0IHdpc2hsaXN0UGFnaW5hdG9ySGVscGVyID0gKCkgPT4ge1xuICAgIGNvbnN0ICRwYWdpbmF0aW9uTGlzdCA9ICQoJy5wYWdpbmF0aW9uLWxpc3QnKTtcblxuICAgIGlmICghJHBhZ2luYXRpb25MaXN0Lmxlbmd0aCkgcmV0dXJuO1xuXG4gICAgY29uc3QgJG5leHRJdGVtID0gJCgnLnBhZ2luYXRpb24taXRlbS0tbmV4dCcsICRwYWdpbmF0aW9uTGlzdCk7XG4gICAgY29uc3QgJHByZXZJdGVtID0gJCgnLnBhZ2luYXRpb24taXRlbS0tcHJldmlvdXMnLCAkcGFnaW5hdGlvbkxpc3QpO1xuICAgIGNvbnN0IGN1cnJlbnRIcmVmID0gJCgnW2RhdGEtcGFnaW5hdGlvbi1jdXJyZW50LXBhZ2UtbGlua10nKS5hdHRyKCdocmVmJyk7XG4gICAgY29uc3QgcGFydGlhbFBhZ2luYXRpb25VcmwgPSBjdXJyZW50SHJlZi5zcGxpdCgncGFnZT0nKS5zaGlmdCgpO1xuXG4gICAgY2hhbmdlV2lzaGxpc3RQYWdpbmF0aW9uTGlua3MocGFydGlhbFBhZ2luYXRpb25VcmwsICRwcmV2SXRlbSwgJG5leHRJdGVtKTtcbn07XG4iLCJjb25zdCBUUkFOU0xBVElPTlMgPSAndHJhbnNsYXRpb25zJztcbmNvbnN0IGlzVHJhbnNsYXRpb25EaWN0aW9uYXJ5Tm90RW1wdHkgPSAoZGljdGlvbmFyeSkgPT4gISFPYmplY3Qua2V5cyhkaWN0aW9uYXJ5W1RSQU5TTEFUSU9OU10pLmxlbmd0aDtcbmNvbnN0IGNob29zZUFjdGl2ZURpY3Rpb25hcnkgPSAoLi4uZGljdGlvbmFyeUpzb25MaXN0KSA9PiB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkaWN0aW9uYXJ5SnNvbkxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgZGljdGlvbmFyeSA9IEpTT04ucGFyc2UoZGljdGlvbmFyeUpzb25MaXN0W2ldKTtcbiAgICAgICAgaWYgKGlzVHJhbnNsYXRpb25EaWN0aW9uYXJ5Tm90RW1wdHkoZGljdGlvbmFyeSkpIHtcbiAgICAgICAgICAgIHJldHVybiBkaWN0aW9uYXJ5O1xuICAgICAgICB9XG4gICAgfVxufTtcblxuLyoqXG4gKiBkZWZpbmVzIFRyYW5zbGF0aW9uIERpY3Rpb25hcnkgdG8gdXNlXG4gKiBAcGFyYW0gY29udGV4dCBwcm92aWRlcyBhY2Nlc3MgdG8gMyB2YWxpZGF0aW9uIEpTT05zIGZyb20gZW4uanNvbjpcbiAqIHZhbGlkYXRpb25fbWVzc2FnZXMsIHZhbGlkYXRpb25fZmFsbGJhY2tfbWVzc2FnZXMgYW5kIGRlZmF1bHRfbWVzc2FnZXNcbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGVUcmFuc2xhdGlvbkRpY3Rpb25hcnkgPSAoY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHsgdmFsaWRhdGlvbkRpY3Rpb25hcnlKU09OLCB2YWxpZGF0aW9uRmFsbGJhY2tEaWN0aW9uYXJ5SlNPTiwgdmFsaWRhdGlvbkRlZmF1bHREaWN0aW9uYXJ5SlNPTiB9ID0gY29udGV4dDtcbiAgICBjb25zdCBhY3RpdmVEaWN0aW9uYXJ5ID0gY2hvb3NlQWN0aXZlRGljdGlvbmFyeSh2YWxpZGF0aW9uRGljdGlvbmFyeUpTT04sIHZhbGlkYXRpb25GYWxsYmFja0RpY3Rpb25hcnlKU09OLCB2YWxpZGF0aW9uRGVmYXVsdERpY3Rpb25hcnlKU09OKTtcbiAgICBjb25zdCBsb2NhbGl6YXRpb25zID0gT2JqZWN0LnZhbHVlcyhhY3RpdmVEaWN0aW9uYXJ5W1RSQU5TTEFUSU9OU10pO1xuICAgIGNvbnN0IHRyYW5zbGF0aW9uS2V5cyA9IE9iamVjdC5rZXlzKGFjdGl2ZURpY3Rpb25hcnlbVFJBTlNMQVRJT05TXSkubWFwKGtleSA9PiBrZXkuc3BsaXQoJy4nKS5wb3AoKSk7XG5cbiAgICByZXR1cm4gdHJhbnNsYXRpb25LZXlzLnJlZHVjZSgoYWNjLCBrZXksIGkpID0+IHtcbiAgICAgICAgYWNjW2tleV0gPSBsb2NhbGl6YXRpb25zW2ldO1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbn07XG5cbmNvbnN0IGRlZmF1bHRQYWdlQnVpbGRlclZhbHVlcyA9IHtcbiAgICBwZHBfc2FsZV9iYWRnZV9sYWJlbDogJ09uIFNhbGUhJyxcbiAgICBwZHBfc29sZF9vdXRfbGFiZWw6ICdTb2xkIE91dCcsXG4gICAgJ3BkcC1zYWxlLXByaWNlLWxhYmVsJzogJ05vdzonLFxuICAgICdwZHAtbm9uLXNhbGUtcHJpY2UtbGFiZWwnOiAnV2FzOicsXG4gICAgJ3BkcC1yZXRhaWwtcHJpY2UtbGFiZWwnOiAnTVNSUDonLFxuICAgICdwZHAtY3VzdG9tLWZpZWxkcy10YWItbGFiZWwnOiAnQWRkaXRpb25hbCBJbmZvcm1hdGlvbicsXG59O1xuXG4vKipcbiAqIGRlZmluZXMgVHJhbnNsYXRpb24gZm9yIHZhbHVlcyBmcm9tIHBhZ2UgYnVpbGRlciAobG9jYWxseSBjb3VsZCBiZSBmb3VuZCBpbiBjb25maWcuanNvbilcbiAqL1xuZXhwb3J0IGNvbnN0IHRyYW5zbGF0ZVBhZ2VCdWlsZGVyVmFsdWVzID0gKCkgPT4ge1xuICAgICQoJ1tkYXRhLXBhZ2UtYnVpbGRlci1rZXldJykuZWFjaCgoXywgc2VsZWN0b3IpID0+IHtcbiAgICAgICAgY29uc3QgJGl0ZW0gPSAkKHNlbGVjdG9yKTtcbiAgICAgICAgY29uc3QgaXRlbVRleHQgPSAkaXRlbS50ZXh0KCkudHJpbSgpO1xuICAgICAgICBjb25zdCBpdGVtRGVmYXVsdFRyYW5zbGF0aW9uID0gJGl0ZW0uZGF0YSgnZGVmYXVsdC10cmFuc2xhdGlvbicpO1xuXG4gICAgICAgIGlmIChpdGVtVGV4dCA9PT0gZGVmYXVsdFBhZ2VCdWlsZGVyVmFsdWVzWyRpdGVtLmRhdGEoJ3BhZ2UtYnVpbGRlci1rZXknKV0gJiYgaXRlbVRleHQgIT09IGl0ZW1EZWZhdWx0VHJhbnNsYXRpb24pIHtcbiAgICAgICAgICAgICRpdGVtLnRleHQoaXRlbURlZmF1bHRUcmFuc2xhdGlvbik7XG4gICAgICAgIH1cbiAgICB9KTtcbn07XG4iLCJpbXBvcnQgVXJsIGZyb20gJ3VybCc7XG5cbmNvbnN0IHVybFV0aWxzID0ge1xuICAgIGdldFVybDogKCkgPT4gYCR7d2luZG93LmxvY2F0aW9uLnBhdGhuYW1lfSR7d2luZG93LmxvY2F0aW9uLnNlYXJjaH1gLFxuXG4gICAgZ29Ub1VybDogKHVybCkgPT4ge1xuICAgICAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoe30sIGRvY3VtZW50LnRpdGxlLCB1cmwpO1xuICAgICAgICAkKHdpbmRvdykudHJpZ2dlcignc3RhdGVjaGFuZ2UnKTtcbiAgICB9LFxuXG4gICAgcmVwbGFjZVBhcmFtczogKHVybCwgcGFyYW1zKSA9PiB7XG4gICAgICAgIGNvbnN0IHBhcnNlZCA9IFVybC5wYXJzZSh1cmwsIHRydWUpO1xuICAgICAgICBsZXQgcGFyYW07XG5cbiAgICAgICAgLy8gTGV0IHRoZSBmb3JtYXR0ZXIgdXNlIHRoZSBxdWVyeSBvYmplY3QgdG8gYnVpbGQgdGhlIG5ldyB1cmxcbiAgICAgICAgcGFyc2VkLnNlYXJjaCA9IG51bGw7XG5cbiAgICAgICAgZm9yIChwYXJhbSBpbiBwYXJhbXMpIHtcbiAgICAgICAgICAgIGlmIChwYXJhbXMuaGFzT3duUHJvcGVydHkocGFyYW0pKSB7XG4gICAgICAgICAgICAgICAgcGFyc2VkLnF1ZXJ5W3BhcmFtXSA9IHBhcmFtc1twYXJhbV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gVXJsLmZvcm1hdChwYXJzZWQpO1xuICAgIH0sXG5cbiAgICBidWlsZFF1ZXJ5U3RyaW5nOiAocXVlcnlEYXRhKSA9PiB7XG4gICAgICAgIGxldCBvdXQgPSAnJztcbiAgICAgICAgbGV0IGtleTtcbiAgICAgICAgZm9yIChrZXkgaW4gcXVlcnlEYXRhKSB7XG4gICAgICAgICAgICBpZiAocXVlcnlEYXRhLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShxdWVyeURhdGFba2V5XSkpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5keDtcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKG5keCBpbiBxdWVyeURhdGFba2V5XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHF1ZXJ5RGF0YVtrZXldLmhhc093blByb3BlcnR5KG5keCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXQgKz0gYCYke2tleX09JHtxdWVyeURhdGFba2V5XVtuZHhdfWA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBvdXQgKz0gYCYke2tleX09JHtxdWVyeURhdGFba2V5XX1gO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvdXQuc3Vic3RyaW5nKDEpO1xuICAgIH0sXG5cbiAgICBwYXJzZVF1ZXJ5UGFyYW1zOiAocXVlcnlEYXRhKSA9PiB7XG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IHt9O1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcXVlcnlEYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCB0ZW1wID0gcXVlcnlEYXRhW2ldLnNwbGl0KCc9Jyk7XG5cbiAgICAgICAgICAgIGlmICh0ZW1wWzBdIGluIHBhcmFtcykge1xuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHBhcmFtc1t0ZW1wWzBdXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zW3RlbXBbMF1dLnB1c2godGVtcFsxXSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zW3RlbXBbMF1dID0gW3BhcmFtc1t0ZW1wWzBdXSwgdGVtcFsxXV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwYXJhbXNbdGVtcFswXV0gPSB0ZW1wWzFdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBhcmFtcztcbiAgICB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgdXJsVXRpbHM7XG4iLCJpbXBvcnQgJ2ZvY3VzLXdpdGhpbi1wb2x5ZmlsbCc7XG5cbmltcG9ydCAnLi9nbG9iYWwvanF1ZXJ5LW1pZ3JhdGUnO1xuaW1wb3J0ICcuL2NvbW1vbi9zZWxlY3Qtb3B0aW9uLXBsdWdpbic7XG5pbXBvcnQgUGFnZU1hbmFnZXIgZnJvbSAnLi9wYWdlLW1hbmFnZXInO1xuaW1wb3J0IGN1cnJlbmN5U2VsZWN0b3IgZnJvbSAnLi9nbG9iYWwvY3VycmVuY3ktc2VsZWN0b3InO1xuaW1wb3J0IGZvdW5kYXRpb24gZnJvbSAnLi9nbG9iYWwvZm91bmRhdGlvbic7XG5pbXBvcnQgY2FydFByZXZpZXcgZnJvbSAnLi9nbG9iYWwvY2FydC1wcmV2aWV3JztcbmltcG9ydCBhZG1pbkJhciBmcm9tICcuL2dsb2JhbC9hZG1pbkJhcic7XG5pbXBvcnQgeyB0cmFuc2xhdGVQYWdlQnVpbGRlclZhbHVlcyB9IGZyb20gJy4vY29tbW9uL3V0aWxzL3RyYW5zbGF0aW9ucy11dGlscyc7XG5pbXBvcnQgc3ZnSW5qZWN0b3IgZnJvbSAnLi9nbG9iYWwvc3ZnLWluamVjdG9yJztcbmltcG9ydCBjYXJvdXNlbCBmcm9tICcuL2NvbW1vbi9jYXJvdXNlbCc7XG5pbXBvcnQgaGFsb0dsb2JhbCBmcm9tICcuL2hhbG90aGVtZXMvaGFsb0dsb2JhbCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdsb2JhbCBleHRlbmRzIFBhZ2VNYW5hZ2VyIHtcbiAgICBvblJlYWR5KCkge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBjaGFubmVsSWQsXG4gICAgICAgICAgICBjYXJ0SWQsXG4gICAgICAgICAgICBwcm9kdWN0SWQsXG4gICAgICAgICAgICBjYXRlZ29yeUlkLFxuICAgICAgICAgICAgc2VjdXJlQmFzZVVybCxcbiAgICAgICAgICAgIG1haW50ZW5hbmNlTW9kZVNldHRpbmdzLFxuICAgICAgICAgICAgYWRtaW5CYXJMYW5ndWFnZSxcbiAgICAgICAgICAgIHNob3dBZG1pbkJhcixcbiAgICAgICAgICAgIGlzUHJvZHVjdENhcmRQcmVzZW50ZWQsXG4gICAgICAgICAgICBpc1Byb2R1Y3RMaXN0UHJlc2VudGVkLFxuICAgICAgICB9ID0gdGhpcy5jb250ZXh0O1xuXG4gICAgICAgIGlmICghJCgnYm9keScpLmhhc0NsYXNzKCdwYWdlLXR5cGUtY2FydCcpKSB7XG4gICAgICAgICAgICBjYXJ0UHJldmlldyhzZWN1cmVCYXNlVXJsLCBjYXJ0SWQsIHRoaXMuY29udGV4dCk7XG4gICAgICAgIH1cblxuICAgICAgICBjdXJyZW5jeVNlbGVjdG9yKGNhcnRJZCk7XG4gICAgICAgIGZvdW5kYXRpb24oJChkb2N1bWVudCkpO1xuXG4gICAgICAgIGlmIChzaG93QWRtaW5CYXIpIHtcbiAgICAgICAgICAgIGFkbWluQmFyKHNlY3VyZUJhc2VVcmwsIGNoYW5uZWxJZCwgbWFpbnRlbmFuY2VNb2RlU2V0dGluZ3MsIEpTT04ucGFyc2UoYWRtaW5CYXJMYW5ndWFnZSksIHByb2R1Y3RJZCwgY2F0ZWdvcnlJZCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNQcm9kdWN0TGlzdFByZXNlbnRlZCB8fCBpc1Byb2R1Y3RDYXJkUHJlc2VudGVkKSB7XG4gICAgICAgICAgICB0cmFuc2xhdGVQYWdlQnVpbGRlclZhbHVlcygpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3ZnSW5qZWN0b3IoKTtcbiAgICAgICAgY2Fyb3VzZWwodGhpcy5jb250ZXh0KTtcbiAgICAgICAgaGFsb0dsb2JhbCh0aGlzLmNvbnRleHQpO1xuICAgIH1cbn1cbiIsIi8qKlxuICogUGVyc2lzdGVudCBhZG1pbiBiYXIgZm9yIHN0b3JlIGFkbWluaXN0cmF0b3JzIHZpZXdpbmcgdGhlIHN0b3JlZnJvbnRcbiAqIEBwYXJhbSBtYWludGVuYW5jZU1vZGVcbiAqIEBwYXJhbSBzZWN1cmVCYXNlVXJsXG4gKiBAcGFyYW0gY2hhbm5lbElkXG4gKiBAcGFyYW0gYWRtaW5CYXJMYW5ndWFnZVxuICogQHBhcmFtIHByb2R1Y3RJZFxuICogQHBhcmFtIGNhdGVnb3J5SWRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKHNlY3VyZUJhc2VVcmwsIGNoYW5uZWxJZCA9IDEsIG1haW50ZW5hbmNlTW9kZSA9IHt9LCBhZG1pbkJhckxhbmd1YWdlLCBwcm9kdWN0SWQsIGNhdGVnb3J5SWQpIHtcbiAgICBjb25zdCBsYW5nID0gYWRtaW5CYXJMYW5ndWFnZS50cmFuc2xhdGlvbnM7XG4gICAgY29uc3QgcGFzc3dvcmQgPSBtYWludGVuYW5jZU1vZGUucGFzc3dvcmQgfHwgZmFsc2U7XG4gICAgY29uc3QgaXNNYWludGVuYW5jZU1vZGUgPSAobWFpbnRlbmFuY2VNb2RlLmhlYWRlciAmJiAhcGFzc3dvcmQpIHx8IGZhbHNlO1xuXG4gICAgZnVuY3Rpb24gaXNJbklmcmFtZSgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiB3aW5kb3cubG9jYXRpb24gIT09IHdpbmRvdy5wYXJlbnQubG9jYXRpb247XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNoYWRvd1xuICAgIGZ1bmN0aW9uIGdldENvbnRleHR1YWxNYXRjaChwcm9kdWN0SWQsIGNhdGVnb3J5SWQpIHtcbiAgICAgICAgaWYgKHByb2R1Y3RJZCAmJiBwYXJzZUludChwcm9kdWN0SWQsIDEwKSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiAncHJvZHVjdCcsXG4gICAgICAgICAgICAgICAgdXJsOiBgL21hbmFnZS9wcm9kdWN0cy8ke3Byb2R1Y3RJZH0vZWRpdGAsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYgKGNhdGVnb3J5SWQgJiYgcGFyc2VJbnQoY2F0ZWdvcnlJZCwgMTApKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdjYXRlZ29yeScsXG4gICAgICAgICAgICAgICAgdXJsOiBgL21hbmFnZS9wcm9kdWN0cy9jYXRlZ29yaWVzLyR7Y2F0ZWdvcnlJZH0vZWRpdGAsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZG9lc05vdEhhdmVBZG1pbkNvb2tpZSgpIHtcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50LmNvb2tpZS5pbmRleE9mKCdBRE1JTl9CQVI9MScpID09PSAtMTtcbiAgICB9XG5cbiAgICAvLyBTZXQgYWRtaW4gY29va2llIGlmIGFwcHJvcHJpYXRlXG4gICAgaWYgKHdpbmRvdy5VUkxTZWFyY2hQYXJhbXMgJiYgd2luZG93LlVSTCAmJiAobmV3IFVSTChkb2N1bWVudC5sb2NhdGlvbikpLnNlYXJjaFBhcmFtcy5nZXQoJ2N0aycpKSB7XG4gICAgICAgIGRvY3VtZW50LmNvb2tpZSA9ICdBRE1JTl9CQVI9MTsgcGF0aD0vJztcbiAgICB9XG5cblxuICAgIC8vIFJldHVybiBpZiBpc0luSWZyYW1lIGlzIHRydWUgKGluc2lkZSBwYWdlIGJ1aWxkZXIpIG9yIGlmIHRoZXJlIGlzIG5vIGFkbWluIGNvb2tpZVxuICAgIGlmIChkb2VzTm90SGF2ZUFkbWluQ29va2llKCkgfHwgaXNJbklmcmFtZSgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB1cmwgPSBlbmNvZGVVUklDb21wb25lbnQoKG5ldyBVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpLnBhdGhuYW1lICsgd2luZG93LmxvY2F0aW9uLnNlYXJjaCkucmVwbGFjZSgvXlxcL3xcXC8kL2csICcnKSk7XG4gICAgY29uc3QgY29udGV4dHVhbE1hdGNoID0gZ2V0Q29udGV4dHVhbE1hdGNoKHByb2R1Y3RJZCwgY2F0ZWdvcnlJZCk7XG5cbiAgICBjb25zdCAkZWxlbWVudCA9ICQoJzxkaXY+Jywge1xuICAgICAgICBjbGFzczogJ2FkbWluQmFyJyxcbiAgICB9KTtcblxuICAgICRlbGVtZW50Lmh0bWwoYDxkaXYgY2xhc3M9XCJhZG1pbkJhci1sb2dvXCI+XG4gICAgICAgIDxhIGhyZWY9XCIke3NlY3VyZUJhc2VVcmx9L21hbmFnZS9kYXNoYm9hcmRcIj48c3ZnPjx1c2UgeGxpbms6aHJlZj1cIiNpY29uLWxvZ28tc21hbGxcIj48L3VzZT48L3N2Zz48L2E+PC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJhZG1pbkJhci1jb250ZW50XCI+XG4gICAgICAgICR7cGFzc3dvcmQgP1xuICAgICAgICBgPGRpdiBjbGFzcz1cImFkbWluQmFyLXByaXZhdGVcIj5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJwcmV2aWV3XCI+JHtsYW5nWydhZG1pbi5wcmVsYXVuY2hfaGVhZGVyJ119IDxzdHJvbmc+JHtwYXNzd29yZH08L3N0cm9uZz48L3NwYW4+XG4gICAgICAgICAgICAgICAgPC9kaXY+YCA6ICcnfVxuICAgICAgICAke2lzTWFpbnRlbmFuY2VNb2RlID9cbiAgICAgICAgYDxkaXYgY2xhc3M9XCJhZG1pbkJhci1wcml2YXRlXCI+XG4gICAgICAgICAgICAgICAgPHNwYW4+JHtsYW5nWydhZG1pbi5tYWludGVuYW5jZV9oZWFkZXInXX08L3NwYW4+XG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzdmctaWNvbiBzdmctYmFzZWxpbmUgYWRtaW5CYXItbGFyZ2UgdG9vbHRpcFwiPlxuICAgICAgICAgICAgICAgICAgICA8c3ZnPjx1c2UgeGxpbms6aHJlZj1cIiNpY29uLWFkbWluLXRvb2x0aXBcIj48L3VzZT48L3N2Zz5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0b29sdGlwdGV4dCB0b29sdGlwLWJvdHRvbVwiPiR7bGFuZ1snYWRtaW4ubWFpbnRlbmFuY2VfdG9vbHRpcCddfTwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgPGEgaHJlZj1cIj9zaG93U3RvcmU9bm9cIiBjbGFzcz1cImFkbWluQmFyLWxhcmdlXCI+JHtsYW5nWydhZG1pbi5tYWludGVuYW5jZV9zaG93c3RvcmVfbGluayddfSA8c3BhbiBjbGFzcz1cInN2Zy1pY29uIHN2Zy1iYXNlbGluZVwiPlxuICAgICAgICAgICAgICAgICAgICA8c3ZnIHN0eWxlPVwiaGVpZ2h0OiAwLjhlbTtcIj48dXNlIHhsaW5rOmhyZWY9XCIjaWNvbi1hZG1pbi1saW5rXCI+PC91c2U+PC9zdmc+XG4gICAgICAgICAgICAgICAgPC9zcGFuPjwvYT5cbiAgICAgICAgIDwvZGl2PmAgOiAnJ31cbiAgICAgICAgIDxkaXYgY2xhc3M9XCJhZG1pbkJhci1saW5rc1wiPlxuICAgICAgICAgICAgJHtjb250ZXh0dWFsTWF0Y2ggPyBgPGEgaHJlZj0nJHtzZWN1cmVCYXNlVXJsfSR7Y29udGV4dHVhbE1hdGNoLnVybH0nIHRhcmdldD1cIl9ibGFua1wiPlxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic3ZnLWljb24gc3ZnLWJhc2VsaW5lXCI+XG4gICAgICAgICAgICAgICAgICAgIDxzdmc+PHVzZSB4bGluazpocmVmPVwiI2ljb24tYWRtaW4tZWRpdFwiPjwvdXNlPjwvc3ZnPlxuICAgICAgICAgICAgICAgIDwvc3Bhbj48c3BhbiBjbGFzcz1cImFkbWluQmFyLWxhcmdlXCI+IEVkaXQgJHtjb250ZXh0dWFsTWF0Y2gudHlwZX0gaW5mb3JtYXRpb248L3NwYW4+PC9hPmAgOiAnJ31cbiAgICAgICAgICAgIDxhIGhyZWY9XCIke3NlY3VyZUJhc2VVcmx9L21hbmFnZS9wYWdlLWJ1aWxkZXI/Y2hhbm5lbElkPSR7Y2hhbm5lbElkfSZyZWRpcmVjdElmcmFtZVVybD0ke3VybH1cIiB0YXJnZXQ9XCJfYmxhbmtcIj5cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInN2Zy1pY29uIHN2Zy1iYXNlbGluZVwiPlxuICAgICAgICAgICAgICAgICAgICA8c3ZnPjx1c2UgeGxpbms6aHJlZj1cIiNpY29uLWFkbWluLWJydXNoXCI+PC91c2U+PC9zdmc+XG4gICAgICAgICAgICAgICAgPC9zcGFuPjxzcGFuIGNsYXNzPVwiYWRtaW5CYXItbGFyZ2VcIj4gJHtsYW5nWydhZG1pbi5wYWdlX2J1aWxkZXJfbGluayddfTwvc3Bhbj5cbiAgICAgICAgICAgIDwvYT5cbiAgICAgICAgIDwvZGl2PlxuICAgICAgICAgPGRpdiBjbGFzcz1cImFkbWluQmFyLWNsb3NlXCIgaWQ9XCJjbG9zZS1hZG1pbi1iYXJcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic3ZnLWljb24gc3ZnLWJhc2VsaW5lXCI+XG4gICAgICAgICAgICAgICAgPHN2Zz48dXNlIHhsaW5rOmhyZWY9XCIjaWNvbi1hZG1pbi1jbG9zZVwiPjwvdXNlPjwvc3ZnPlxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PmApO1xuXG4gICAgJCgnYm9keScpLmFkZENsYXNzKCdoYXNBZG1pbkJhcicpO1xuICAgICQoJ2JvZHknKS5hcHBlbmQoJGVsZW1lbnQpO1xuXG4gICAgJCgnI2Nsb3NlLWFkbWluLWJhcicpLmNsaWNrKCgpID0+IHtcbiAgICAgICAgJCgnYm9keScpLnJlbW92ZUNsYXNzKCdoYXNBZG1pbkJhcicpO1xuICAgICAgICAkKCcuYWRtaW5CYXInKS5yZW1vdmUoKTtcbiAgICAgICAgZG9jdW1lbnQuY29va2llID0gJ0FETUlOX0JBUj0wOyBwYXRoPS8nO1xuICAgIH0pO1xufVxuIiwiaW1wb3J0ICdmb3VuZGF0aW9uLXNpdGVzL2pzL2ZvdW5kYXRpb24vZm91bmRhdGlvbic7XG5pbXBvcnQgJ2ZvdW5kYXRpb24tc2l0ZXMvanMvZm91bmRhdGlvbi9mb3VuZGF0aW9uLmRyb3Bkb3duJztcbmltcG9ydCB1dGlscyBmcm9tICdAYmlnY29tbWVyY2Uvc3RlbmNpbC11dGlscyc7XG5pbXBvcnQgc3dhbCBmcm9tICcuL3N3ZWV0LWFsZXJ0JztcbmltcG9ydCBoYWxvUXVpY2tFZGl0Q2FydCBmcm9tICcuLi9oYWxvdGhlbWVzL2hhbG9RdWlja0VkaXRDYXJ0JztcbmltcG9ydCBoYWxvQ2FsY3VsYXRlRnJlZVNoaXBwaW5nIGZyb20gJy4uL2hhbG90aGVtZXMvaGFsb0NhbGN1bGF0ZUZyZWVTaGlwcGluZyc7XG5cbmV4cG9ydCBjb25zdCBDYXJ0UHJldmlld0V2ZW50cyA9IHtcbiAgICBjbG9zZTogJ2Nsb3NlZC5mbmR0bi5kcm9wZG93bicsXG4gICAgb3BlbjogJ29wZW5lZC5mbmR0bi5kcm9wZG93bicsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoc2VjdXJlQmFzZVVybCwgY2FydElkLCBjb250ZXh0KSB7XG4gICAgY29uc3QgbG9hZGluZ0NsYXNzID0gJ2lzLWxvYWRpbmcnO1xuICAgIGNvbnN0ICRjYXJ0ID0gJCgnW2RhdGEtY2FydC1wcmV2aWV3XScpO1xuICAgIGNvbnN0ICRjYXJ0RHJvcGRvd24gPSAkKCcjaGFsby1jYXJ0LXNpZGViYXIgLmhhbG8tc2lkZWJhci13cmFwcGVyJyk7XG4gICAgY29uc3QgJGNhcnRMb2FkaW5nID0gJCgnPGRpdiBjbGFzcz1cImxvYWRpbmdPdmVybGF5XCI+PC9kaXY+Jyk7XG4gICAgY29uc3QgJGJvZHkgPSAkKCdib2R5Jyk7XG5cbiAgICBpZiAod2luZG93LkFwcGxlUGF5U2Vzc2lvbikge1xuICAgICAgICAkY2FydERyb3Bkb3duLmFkZENsYXNzKCdhcHBsZS1wYXktc3VwcG9ydGVkJyk7XG4gICAgfVxuXG4gICAgaWYgKCEkKCdib2R5JykuaGFzQ2xhc3MoJ3BhZ2UtdHlwZS1jYXJ0JykpIHtcbiAgICAgICAgaGFsb1F1aWNrRWRpdENhcnQoY29udGV4dCk7XG4gICAgfVxuXG4gICAgJGJvZHkub24oJ2NhcnQtcXVhbnRpdHktdXBkYXRlJywgKGV2ZW50LCBxdWFudGl0eSkgPT4ge1xuICAgICAgICAkKCcuY2FydC1xdWFudGl0eScpXG4gICAgICAgICAgICAudGV4dChxdWFudGl0eSlcbiAgICAgICAgICAgIC50b2dnbGVDbGFzcygnY291bnRQaWxsLS1wb3NpdGl2ZScsIHF1YW50aXR5ID4gMCk7XG4gICAgICAgIGlmICh1dGlscy50b29scy5zdG9yYWdlLmxvY2FsU3RvcmFnZUF2YWlsYWJsZSgpKSB7XG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnY2FydC1xdWFudGl0eScsIHF1YW50aXR5KTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgJGNhcnQub24oJ2NsaWNrJywgZXZlbnQgPT4ge1xuICAgICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAgICAgdGVtcGxhdGU6ICdjb21tb24vY2FydC1wcmV2aWV3JyxcbiAgICAgICAgfTtcblxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgIGlmICghJCgnLnBhZ2UtdHlwZS1jYXJ0JykubGVuZ3RoKSB7XG4gICAgICAgICAgICAkYm9keS50b2dnbGVDbGFzcygnb3BlbkNhcnRTaWRlYmFyJyk7XG4gICAgICAgIH1cblxuICAgICAgICAkY2FydERyb3Bkb3duXG4gICAgICAgICAgICAuYWRkQ2xhc3MobG9hZGluZ0NsYXNzKVxuICAgICAgICAgICAgLmh0bWwoJGNhcnRMb2FkaW5nKTtcbiAgICAgICAgJGNhcnRMb2FkaW5nXG4gICAgICAgICAgICAuc2hvdygpO1xuXG4gICAgICAgIHV0aWxzLmFwaS5jYXJ0LmdldENvbnRlbnQob3B0aW9ucywgKGVyciwgcmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgICRjYXJ0RHJvcGRvd25cbiAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MobG9hZGluZ0NsYXNzKVxuICAgICAgICAgICAgICAgIC5odG1sKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICRjYXJ0TG9hZGluZ1xuICAgICAgICAgICAgICAgIC5oaWRlKCk7XG5cbiAgICAgICAgICAgIGhhbG9DYWxjdWxhdGVGcmVlU2hpcHBpbmcoY29udGV4dCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgbGV0IHF1YW50aXR5ID0gMDtcblxuICAgIGlmIChjYXJ0SWQpIHtcbiAgICAgICAgLy8gR2V0IGV4aXN0aW5nIHF1YW50aXR5IGZyb20gbG9jYWxTdG9yYWdlIGlmIGZvdW5kXG4gICAgICAgIGlmICh1dGlscy50b29scy5zdG9yYWdlLmxvY2FsU3RvcmFnZUF2YWlsYWJsZSgpKSB7XG4gICAgICAgICAgICBpZiAobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2NhcnQtcXVhbnRpdHknKSkge1xuICAgICAgICAgICAgICAgIHF1YW50aXR5ID0gTnVtYmVyKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdjYXJ0LXF1YW50aXR5JykpO1xuICAgICAgICAgICAgICAgICRib2R5LnRyaWdnZXIoJ2NhcnQtcXVhbnRpdHktdXBkYXRlJywgcXVhbnRpdHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gR2V0IHVwZGF0ZWQgY2FydCBxdWFudGl0eSBmcm9tIHRoZSBDYXJ0IEFQSVxuICAgICAgICBjb25zdCBjYXJ0UXR5UHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHV0aWxzLmFwaS5jYXJ0LmdldENhcnRRdWFudGl0eSh7IGJhc2VVcmw6IHNlY3VyZUJhc2VVcmwsIGNhcnRJZCB9LCAoZXJyLCBxdHkpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHRoaXMgYXBwZWFycyB0byBiZSBhIDQwNCBmb3IgdGhlIGNhcnQgSUQsIHNldCBjYXJ0IHF1YW50aXR5IHRvIDBcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVyciA9PT0gJ05vdCBGb3VuZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoMCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXNvbHZlKHF0eSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gSWYgdGhlIENhcnQgQVBJIGdpdmVzIHVzIGEgZGlmZmVyZW50IHF1YW50aXR5IG51bWJlciwgdXBkYXRlIGl0XG4gICAgICAgIGNhcnRRdHlQcm9taXNlLnRoZW4ocXR5ID0+IHtcbiAgICAgICAgICAgIHF1YW50aXR5ID0gcXR5O1xuICAgICAgICAgICAgJGJvZHkudHJpZ2dlcignY2FydC1xdWFudGl0eS11cGRhdGUnLCBxdWFudGl0eSk7XG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgICRib2R5LnRyaWdnZXIoJ2NhcnQtcXVhbnRpdHktdXBkYXRlJywgcXVhbnRpdHkpO1xuICAgIH1cblxuICAgICQoZG9jdW1lbnQpLm9uKCdjbGljaycsIGV2ZW50ID0+IHtcbiAgICAgICAgaWYgKCgkKGV2ZW50LnRhcmdldCkuY2xvc2VzdCgnW2RhdGEtY2FydC1wcmV2aWV3XScpLmxlbmd0aCA9PT0gMCkgJiYgKCQoZXZlbnQudGFyZ2V0KS5jbG9zZXN0KCcjaGFsby1jYXJ0LXNpZGViYXInKS5sZW5ndGggPT09IDApICYmICgkKGV2ZW50LnRhcmdldCkuY2xvc2VzdCgnI21vZGFsJykubGVuZ3RoID09PSAwKSAmJiAoJChldmVudC50YXJnZXQpLmNsb3Nlc3QoJ1tkYXRhLWNhcnQtZWRpdC1pdGVtLXJlbW92ZV0nKS5sZW5ndGggPT09IDApICYmICgkKGV2ZW50LnRhcmdldCkuY2xvc2VzdCgnLnF1aWNrU2hvcFBvcHVwJykubGVuZ3RoID09PSAwKSl7XG4gICAgICAgICAgICAkKCdib2R5JykucmVtb3ZlQ2xhc3MoJ29wZW5DYXJ0U2lkZWJhcicpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAkKGRvY3VtZW50KS5vbignY2xpY2snLCcuaGFsby1jYXJ0LXNpZGViYXIgLmhhbG8tc2lkZWJhci1oZWFkZXIgLmNsb3NlJywgKGV2ZW50KSA9PiB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgJCgnYm9keScpLnJlbW92ZUNsYXNzKCdvcGVuQ2FydFNpZGViYXInKTtcbiAgICB9KTtcblxuICAgICQoZG9jdW1lbnQpLm9uKCdjbGljaycsJy5wcmV2aWV3Q2FydCAucHJldmlld0NhcnRJdGVtLXJlbW92ZScsIChldmVudCkgPT4ge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBjb25zdCBpdGVtSWQgPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLmRhdGEoJ2NhcnRJdGVtaWQnKTtcblxuICAgICAgICBjYXJ0UmVtb3ZlSXRlbShpdGVtSWQpO1xuICAgIH0pO1xuXG4gICAgJChkb2N1bWVudCkub24oJ2ZvY3VzJywnLnByZXZpZXdDYXJ0IC5mb3JtLWlucHV0LS1pbmNyZW1lbnRUb3RhbCcsIChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCAkdGFyZ2V0ID0gJChldmVudC5jdXJyZW50VGFyZ2V0KTtcbiAgICAgICAgJHRhcmdldC5kYXRhKCdwcmVWYWwnLCAkdGFyZ2V0LnZhbCgpKTtcbiAgICB9KTtcblxuICAgICQoZG9jdW1lbnQpLm9uKCdjaGFuZ2UnLCcucHJldmlld0NhcnQgLmZvcm0taW5wdXQtLWluY3JlbWVudFRvdGFsJywgKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0ICR0YXJnZXQgPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpO1xuICAgICAgICB2YXIgcHJlVmFsPSAkdGFyZ2V0LmRhdGEoJ3ByZVZhbCcpO1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgIGNhcnRVcGRhdGVRdHlUZXh0Q2hhbmdlKCR0YXJnZXQsIHByZVZhbCk7XG4gICAgfSk7XG5cbiAgICAkKGRvY3VtZW50KS5vbignY2xpY2snLCcucHJldmlld0NhcnRJdGVtLXF0eSBbZGF0YS1jYXJ0LXVwZGF0ZV0nLCAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgJHRhcmdldCA9ICQoZXZlbnQuY3VycmVudFRhcmdldCk7XG5cbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAvLyB1cGRhdGUgY2FydCBxdWFudGl0eVxuICAgICAgICBjYXJ0VXBkYXRlKCR0YXJnZXQpO1xuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gY2FydFVwZGF0ZSgkdGFyZ2V0KSB7XG4gICAgICAgICAgIFxuICAgICAgICBjb25zdCBpdGVtSWQgPSAkdGFyZ2V0LmRhdGEoJ2NhcnQtaXRlbWlkJyk7XG4gICAgICAgIGNvbnN0ICRlbCA9ICQoYCNxdHktJHtpdGVtSWR9YCk7XG4gICAgICAgIGNvbnN0IG9sZFF0eSA9IHBhcnNlSW50KCRlbC52YWwoKSwgMTApO1xuICAgICAgICBjb25zdCBtYXhRdHkgPSBwYXJzZUludCgkZWwuZGF0YSgncXVhbnRpdHlNYXgnKSwgMTApO1xuICAgICAgICBjb25zdCBtaW5RdHkgPSBwYXJzZUludCgkZWwuZGF0YSgncXVhbnRpdHlNaW4nKSwgMTApO1xuICAgICAgICBjb25zdCBtaW5FcnJvciA9ICRlbC5kYXRhKCdxdWFudGl0eU1pbkVycm9yJyk7XG4gICAgICAgIGNvbnN0IG1heEVycm9yID0gJGVsLmRhdGEoJ3F1YW50aXR5TWF4RXJyb3InKTtcbiAgICAgICAgY29uc3QgbmV3UXR5ID0gJHRhcmdldC5kYXRhKCdhY3Rpb24nKSA9PT0gJ2luYycgPyBvbGRRdHkgKyAxIDogb2xkUXR5IC0gMTtcbiAgICAgICAgbGV0IGludmFsaWRFbnRyeTtcblxuICAgICAgICAvLyBEb2VzIG5vdCBxdWFsaXR5IGZvciBtaW4vbWF4IHF1YW50aXR5XG4gICAgICAgIGlmICghbmV3UXR5KSB7XG4gICAgICAgICAgICBpbnZhbGlkRW50cnkgPSBuZXdRdHk7XG4gICAgICAgICAgICAkZWwudmFsKG9sZFF0eSk7XG4gICAgICAgICAgICByZXR1cm4gc3dhbC5maXJlKHtcbiAgICAgICAgICAgICAgICB0ZXh0OiBgJHtpbnZhbGlkRW50cnl9IGlzIG5vdCBhIHZhbGlkIGVudHJ5YCxcbiAgICAgICAgICAgICAgICBpY29uOiAnZXJyb3InLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAobmV3UXR5IDwgbWluUXR5KSB7XG4gICAgICAgICAgICByZXR1cm4gc3dhbC5maXJlKHtcbiAgICAgICAgICAgICAgICB0ZXh0OiBtaW5FcnJvcixcbiAgICAgICAgICAgICAgICBpY29uOiAnZXJyb3InLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAobWF4UXR5ID4gMCAmJiBuZXdRdHkgPiBtYXhRdHkpIHtcbiAgICAgICAgICAgIHJldHVybiBzd2FsLmZpcmUoe1xuICAgICAgICAgICAgICAgIHRleHQ6IG1heEVycm9yLFxuICAgICAgICAgICAgICAgIGljb246ICdlcnJvcicsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHV0aWxzLmFwaS5jYXJ0Lml0ZW1VcGRhdGUoaXRlbUlkLCBuZXdRdHksIChlcnIsIHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuc3RhdHVzID09PSAnc3VjY2VlZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlIHF1YW50aXR5IGlzIGNoYW5nZWQgXCIxXCIgZnJvbSBcIjBcIiwgd2UgaGF2ZSB0byByZW1vdmUgdGhlIHJvdy5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVtb3ZlID0gKG5ld1F0eSA9PT0gMCk7XG5cbiAgICAgICAgICAgICAgICAgICAgcmVmcmVzaENvbnRlbnQocmVtb3ZlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAkZWwudmFsKG9sZFF0eSk7XG4gICAgICAgICAgICAgICAgICAgIHN3YWwuZmlyZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiByZXNwb25zZS5kYXRhLmVycm9ycy5qb2luKCdcXG4nKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb246ICdlcnJvcicsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9ICAgICAgICBcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYXJ0VXBkYXRlUXR5VGV4dENoYW5nZSgkdGFyZ2V0LCBwcmVWYWwgPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IGl0ZW1JZCA9ICR0YXJnZXQuZGF0YSgnY2FydC1pdGVtaWQnKTtcbiAgICAgICAgY29uc3QgJGVsID0gJChgI3F0eS0ke2l0ZW1JZH1gKTtcbiAgICAgICAgY29uc3QgbWF4UXR5ID0gcGFyc2VJbnQoJGVsLmRhdGEoJ3F1YW50aXR5TWF4JyksIDEwKTtcbiAgICAgICAgY29uc3QgbWluUXR5ID0gcGFyc2VJbnQoJGVsLmRhdGEoJ3F1YW50aXR5TWluJyksIDEwKTtcbiAgICAgICAgY29uc3Qgb2xkUXR5ID0gcHJlVmFsICE9PSBudWxsID8gcHJlVmFsIDogbWluUXR5O1xuICAgICAgICBjb25zdCBtaW5FcnJvciA9ICRlbC5kYXRhKCdxdWFudGl0eU1pbkVycm9yJyk7XG4gICAgICAgIGNvbnN0IG1heEVycm9yID0gJGVsLmRhdGEoJ3F1YW50aXR5TWF4RXJyb3InKTtcbiAgICAgICAgY29uc3QgbmV3UXR5ID0gcGFyc2VJbnQoTnVtYmVyKCRlbC52YWwoKSksIDEwKTtcbiAgICAgICAgbGV0IGludmFsaWRFbnRyeTtcblxuICAgICAgICAvLyBEb2VzIG5vdCBxdWFsaXR5IGZvciBtaW4vbWF4IHF1YW50aXR5XG4gICAgICAgIGlmICghbmV3UXR5KSB7XG4gICAgICAgICAgICBpbnZhbGlkRW50cnkgPSAkZWwudmFsKCk7XG4gICAgICAgICAgICAkZWwudmFsKG9sZFF0eSk7XG5cbiAgICAgICAgICAgIHJldHVybiBzd2FsLmZpcmUoe1xuICAgICAgICAgICAgICAgIHRleHQ6IGAke2ludmFsaWRFbnRyeX0gaXMgbm90IGEgdmFsaWQgZW50cnlgLFxuICAgICAgICAgICAgICAgIGljb246ICdlcnJvcicsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmIChuZXdRdHkgPCBtaW5RdHkpIHtcbiAgICAgICAgICAgICRlbC52YWwob2xkUXR5KTtcblxuICAgICAgICAgICAgcmV0dXJuIHN3YWwuZmlyZSh7XG4gICAgICAgICAgICAgICAgdGV4dDogbWluRXJyb3IsXG4gICAgICAgICAgICAgICAgaWNvbjogJ2Vycm9yJyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKG1heFF0eSA+IDAgJiYgbmV3UXR5ID4gbWF4UXR5KSB7XG4gICAgICAgICAgICAkZWwudmFsKG9sZFF0eSk7XG5cbiAgICAgICAgICAgIHJldHVybiBzd2FsLmZpcmUoe1xuICAgICAgICAgICAgICAgIHRleHQ6IG1heEVycm9yLFxuICAgICAgICAgICAgICAgIGljb246ICdlcnJvcicsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHV0aWxzLmFwaS5jYXJ0Lml0ZW1VcGRhdGUoaXRlbUlkLCBuZXdRdHksIChlcnIsIHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5zdGF0dXMgPT09ICdzdWNjZWVkJykge1xuICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBxdWFudGl0eSBpcyBjaGFuZ2VkIFwiMVwiIGZyb20gXCIwXCIsIHdlIGhhdmUgdG8gcmVtb3ZlIHRoZSByb3cuXG4gICAgICAgICAgICAgICAgY29uc3QgcmVtb3ZlID0gKG5ld1F0eSA9PT0gMCk7XG4gICAgICAgICAgICAgICAgcmVmcmVzaENvbnRlbnQocmVtb3ZlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJGVsLnZhbChvbGRRdHkpO1xuICAgICAgICAgICAgICAgIHN3YWwuZmlyZSh7XG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IHJlc3BvbnNlLmRhdGEuZXJyb3JzLmpvaW4oJ1xcbicpLFxuICAgICAgICAgICAgICAgICAgICBpY29uOiAnZXJyb3InLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYXJ0UmVtb3ZlSXRlbShpdGVtSWQpIHtcbiAgICAgICAgdXRpbHMuYXBpLmNhcnQuaXRlbVJlbW92ZShpdGVtSWQsIChlcnIsIHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5zdGF0dXMgPT09ICdzdWNjZWVkJykge1xuICAgICAgICAgICAgICAgIHJlZnJlc2hDb250ZW50KHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzd2FsLmZpcmUoe1xuICAgICAgICAgICAgICAgICAgICB0ZXh0OiByZXNwb25zZS5kYXRhLmVycm9ycy5qb2luKCdcXG4nKSxcbiAgICAgICAgICAgICAgICAgICAgaWNvbjogJ2Vycm9yJyxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXBkYXRlQ2FydENvbnRlbnQoKXtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHRlbXBsYXRlOiAnY29tbW9uL2NhcnQtcHJldmlldycsXG4gICAgICAgIH07XG5cbiAgICAgICAgJGNhcnREcm9wZG93blxuICAgICAgICAgICAgLmFkZENsYXNzKGxvYWRpbmdDbGFzcylcbiAgICAgICAgICAgIC5wcmVwZW5kKCRjYXJ0TG9hZGluZyk7XG4gICAgICAgICRjYXJ0TG9hZGluZ1xuICAgICAgICAgICAgLnNob3coKTtcblxuICAgICAgICB1dGlscy5hcGkuY2FydC5nZXRDb250ZW50KG9wdGlvbnMsIChlcnIsIHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAkY2FydERyb3Bkb3duXG4gICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKGxvYWRpbmdDbGFzcylcbiAgICAgICAgICAgICAgICAuaHRtbChyZXNwb25zZSk7XG4gICAgICAgICAgICAkY2FydExvYWRpbmdcbiAgICAgICAgICAgICAgICAuaGlkZSgpO1xuXG4gICAgICAgICAgICBjb25zdCBxdWFudGl0eSA9ICQocmVzcG9uc2UpLmZpbmQoJ1tkYXRhLWNhcnQtcXVhbnRpdHldJykuZGF0YSgnY2FydFF1YW50aXR5JykgfHwgJCgnW2RhdGEtY2FydC1xdWFudGl0eV0nKS5kYXRhKCdjYXJ0UXVhbnRpdHknKSB8fCAwO1xuXG4gICAgICAgICAgICAkYm9keS50cmlnZ2VyKCdjYXJ0LXF1YW50aXR5LXVwZGF0ZScsIHF1YW50aXR5KTtcblxuICAgICAgICAgICAgaGFsb0NhbGN1bGF0ZUZyZWVTaGlwcGluZyhjb250ZXh0KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVmcmVzaENvbnRlbnQocmVtb3ZlKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICB0ZW1wbGF0ZTogJ2NvbW1vbi9jYXJ0LXByZXZpZXcnLFxuICAgICAgICB9O1xuXG4gICAgICAgICRjYXJ0RHJvcGRvd25cbiAgICAgICAgICAgIC5hZGRDbGFzcyhsb2FkaW5nQ2xhc3MpXG4gICAgICAgICAgICAucHJlcGVuZCgkY2FydExvYWRpbmcpO1xuICAgICAgICAkY2FydExvYWRpbmdcbiAgICAgICAgICAgIC5zaG93KCk7XG5cbiAgICAgICAgdXRpbHMuYXBpLmNhcnQuZ2V0Q29udGVudChvcHRpb25zLCAoZXJyLCByZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgJGNhcnREcm9wZG93blxuICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcyhsb2FkaW5nQ2xhc3MpXG4gICAgICAgICAgICAgICAgLmh0bWwocmVzcG9uc2UpO1xuICAgICAgICAgICAgJGNhcnRMb2FkaW5nXG4gICAgICAgICAgICAgICAgLmhpZGUoKTtcblxuICAgICAgICAgICAgY29uc3QgcXVhbnRpdHkgPSAkKHJlc3BvbnNlKS5maW5kKCdbZGF0YS1jYXJ0LXF1YW50aXR5XScpLmRhdGEoJ2NhcnRRdWFudGl0eScpIHx8ICQoJ1tkYXRhLWNhcnQtcXVhbnRpdHldJykuZGF0YSgnY2FydFF1YW50aXR5JykgfHwgMDtcblxuICAgICAgICAgICAgJGJvZHkudHJpZ2dlcignY2FydC1xdWFudGl0eS11cGRhdGUnLCBxdWFudGl0eSk7XG5cbiAgICAgICAgICAgIGhhbG9DYWxjdWxhdGVGcmVlU2hpcHBpbmcoY29udGV4dCk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiIsImltcG9ydCB1dGlscyBmcm9tICdAYmlnY29tbWVyY2Uvc3RlbmNpbC11dGlscyc7XG5cbi8qKlxuICogRXVyb3BlYW4gd2Vic2l0ZXMgbXVzdCBub3RpZnkgdXNlcnMgb2YgY29va2llcyB0byBjb21wbHkgd2l0aCBFdXJvcGVhbiBVbmlvbiBsYXcuXG4gKiBUaGlzIHdpbGwgYWxlcnQgc2hvcHBlcnMgdGhhdCB0aGlzIHdlYnNpdGUgdXNlcyBjb29raWVzLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoKSB7XG4gICAgLypcbiAgICAvLyBIZXJlIHlvdSBjYW4gb3ZlcnJpZGUgdGhlIGRlZmF1bHQgYnJvd3NlciBhbGVydCBib3ggYnkgaG9va2luZyB0byB0aGUgJ2Nvb2tpZS1wcml2YWN5LW5vdGlmaWNhdGlvbicgaG9vay5cbiAgICB1dGlscy5ob29rcy5vbignY29va2llLXByaXZhY3ktbm90aWZpY2F0aW9uJywgKGV2ZW50LCBwcml2YWN5TWVzc2FnZSkgPT4ge1xuICAgICAgICAvLyBZb3UgY2FuIG1ha2UgeW91ciBvd24gY3VzdG9tIG1vZGFsIG9yIGFsZXJ0IGJveCBhcHBlYXIgaW4geW91ciB0aGVtZSB1c2luZyB0aGUgcHJpdmFjeU1lc3NhZ2UgcHJvdmlkZWRcbiAgICAgICAgbXlDdXN0b21BbGVydChwcml2YWN5TWVzc2FnZSk7XG5cbiAgICAgICAgLy8gQ2FsbCBldmVudC5wcmV2ZW50RGVmYXVsdCgpIHRvIHByZXZlbnQgdGhlIGRlZmF1bHQgYnJvd3NlciBhbGVydCBmcm9tIG9jY3VycmluZyBpbiBzdGVuY2lsLXV0aWxzXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfSk7XG4gICAgKi9cblxuICAgIGNvbnN0ICRwcml2YWN5RGlhbG9nID0gJCgnLmNvb2tpZU1lc3NhZ2UnKTtcblxuICAgIGlmIChkb2N1bWVudC5jb29raWUuaW5kZXhPZignQUNDRVBUX0NPT0tJRV9VU0FHRScpID09PSAtMSkge1xuICAgICAgICAkcHJpdmFjeURpYWxvZy5zaG93KCk7XG4gICAgfVxuXG4gICAgJCgnYm9keScpLm9uKCdjbGljaycsICdbZGF0YS1wcml2YWN5LWFjY2VwdF0nLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyAzNjUpO1xuICAgICAgICBkb2N1bWVudC5jb29raWUgPSBgQUNDRVBUX0NPT0tJRV9VU0FHRT0xO2V4cGlyZXM9JHtkYXRlLnRvR01UU3RyaW5nKCl9OyBwYXRoPS9gO1xuXG4gICAgICAgIHV0aWxzLmhvb2tzLmVtaXQoJ2Nvb2tpZS1wcml2YWN5LWFjY2VwdGVkJyk7XG4gICAgICAgICRwcml2YWN5RGlhbG9nLmhpZGUoKTtcbiAgICB9KTtcbn1cbiIsImltcG9ydCBzd2FsIGZyb20gJy4vc3dlZXQtYWxlcnQnO1xuaW1wb3J0IHV0aWxzIGZyb20gJ0BiaWdjb21tZXJjZS9zdGVuY2lsLXV0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKGNhcnRJZCkge1xuICAgIGZ1bmN0aW9uIGNoYW5nZUN1cnJlbmN5KHVybCwgY3VycmVuY3lDb2RlKSB7XG4gICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICB1cmwsXG4gICAgICAgICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeSh7IGN1cnJlbmN5Q29kZSB9KSxcbiAgICAgICAgfSkuZG9uZSgoKSA9PiB7XG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG4gICAgICAgIH0pLmZhaWwoKGUpID0+IHtcbiAgICAgICAgICAgIHN3YWwuZmlyZSh7XG4gICAgICAgICAgICAgICAgdGV4dDogSlNPTi5wYXJzZShlLnJlc3BvbnNlVGV4dCkuZXJyb3IsXG4gICAgICAgICAgICAgICAgaWNvbjogJ3dhcm5pbmcnLFxuICAgICAgICAgICAgICAgIHNob3dDYW5jZWxCdXR0b246IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgJCgnW2RhdGEtY2FydC1jdXJyZW5jeS1zd2l0Y2gtdXJsXScpLm9uKCdjbGljaycsIGV2ZW50ID0+IHtcbiAgICAgICAgY29uc3QgY3VycmVuY3lTZXNzaW9uU3dpdGNoZXIgPSBldmVudC5jdXJyZW50VGFyZ2V0LmhyZWY7XG4gICAgICAgIGlmICghY2FydElkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdXRpbHMuYXBpLmNhcnQuZ2V0Q2FydCh7IGNhcnRJZCB9LCAoZXJyLCByZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgaWYgKGVyciB8fCByZXNwb25zZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBjdXJyZW5jeVNlc3Npb25Td2l0Y2hlcjtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHNob3dXYXJuaW5nID0gcmVzcG9uc2UuZGlzY291bnRzLnNvbWUoZGlzY291bnQgPT4gZGlzY291bnQuZGlzY291bnRlZEFtb3VudCA+IDApIHx8XG4gICAgICAgICAgICAgICAgcmVzcG9uc2UuY291cG9ucy5sZW5ndGggPiAwIHx8XG4gICAgICAgICAgICAgICAgcmVzcG9uc2UubGluZUl0ZW1zLmdpZnRDZXJ0aWZpY2F0ZXMubGVuZ3RoID4gMDtcblxuICAgICAgICAgICAgaWYgKHNob3dXYXJuaW5nKSB7XG4gICAgICAgICAgICAgICAgc3dhbC5maXJlKHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogJChldmVudC50YXJnZXQpLmRhdGEoJ3dhcm5pbmcnKSxcbiAgICAgICAgICAgICAgICAgICAgaWNvbjogJ3dhcm5pbmcnLFxuICAgICAgICAgICAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0pLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC52YWx1ZSAmJiByZXN1bHQudmFsdWUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZUN1cnJlbmN5KCQoZXZlbnQudGFyZ2V0KS5kYXRhKCdjYXJ0LWN1cnJlbmN5LXN3aXRjaC11cmwnKSwgJChldmVudC50YXJnZXQpLmRhdGEoJ2N1cnJlbmN5LWNvZGUnKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2hhbmdlQ3VycmVuY3koJChldmVudC50YXJnZXQpLmRhdGEoJ2NhcnQtY3VycmVuY3ktc3dpdGNoLXVybCcpLCAkKGV2ZW50LnRhcmdldCkuZGF0YSgnY3VycmVuY3ktY29kZScpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG4iLCJpbXBvcnQgJ2ZvdW5kYXRpb24tc2l0ZXMvanMvZm91bmRhdGlvbi9mb3VuZGF0aW9uJztcbmltcG9ydCAnZm91bmRhdGlvbi1zaXRlcy9qcy9mb3VuZGF0aW9uL2ZvdW5kYXRpb24uZHJvcGRvd24nO1xuaW1wb3J0ICdmb3VuZGF0aW9uLXNpdGVzL2pzL2ZvdW5kYXRpb24vZm91bmRhdGlvbi5yZXZlYWwnO1xuaW1wb3J0ICdmb3VuZGF0aW9uLXNpdGVzL2pzL2ZvdW5kYXRpb24vZm91bmRhdGlvbi50YWInO1xuaW1wb3J0IG1vZGFsRmFjdG9yeSBmcm9tICcuL21vZGFsJztcbmltcG9ydCByZXZlYWxDbG9zZUZhY3RvcnkgZnJvbSAnLi9yZXZlYWwtY2xvc2UnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoJGVsZW1lbnQpIHtcbiAgICAkZWxlbWVudC5mb3VuZGF0aW9uKHtcbiAgICAgICAgZHJvcGRvd246IHtcbiAgICAgICAgICAgIC8vIHNwZWNpZnkgdGhlIGNsYXNzIHVzZWQgZm9yIGFjdGl2ZSBkcm9wZG93bnNcbiAgICAgICAgICAgIGFjdGl2ZV9jbGFzczogJ2lzLW9wZW4nLFxuICAgICAgICB9LFxuICAgICAgICByZXZlYWw6IHtcbiAgICAgICAgICAgIGJnX2NsYXNzOiAnbW9kYWwtYmFja2dyb3VuZCcsXG4gICAgICAgICAgICBkaXNtaXNzX21vZGFsX2NsYXNzOiAnbW9kYWwtY2xvc2UnLFxuICAgICAgICAgICAgY2xvc2Vfb25fYmFja2dyb3VuZF9jbGljazogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICAgICAgdGFiOiB7XG4gICAgICAgICAgICBhY3RpdmVfY2xhc3M6ICdpcy1hY3RpdmUnLFxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgbW9kYWxGYWN0b3J5KCdbZGF0YS1yZXZlYWxdJywgeyAkY29udGV4dDogJGVsZW1lbnQgfSk7XG4gICAgcmV2ZWFsQ2xvc2VGYWN0b3J5KCdbZGF0YS1yZXZlYWwtY2xvc2VdJywgeyAkY29udGV4dDogJGVsZW1lbnQgfSk7XG59XG4iLCIvLyBOZWVkZWQgYmVjYXVzZSB3ZSB1c2UgRm91bmRhdGlvbiA1LjUsIHdoaWNoIGV4cGVjdHMgalF1ZXJ5IDIueC4gSG93ZXZlcixcbi8vIHJhdGhlciB0aGFuIGJyaW5naW5nIGluIGFsbCBvZiBqcXVlcnktbWlncmF0ZSwgd2UncmUgY2hlcnJ5IHBpY2tpbmcgaW5kaXZpZHVhbFxuLy8gZml4ZXMgbmVlZGVkIGZvciBGb3VuZGF0aW9uLlxuaW1wb3J0IGluaXQgZnJvbSAnLi9qcXVlcnktbWlncmF0ZS9pbml0JztcbmltcG9ydCB0cmF2ZXJzaW5nIGZyb20gJy4vanF1ZXJ5LW1pZ3JhdGUvdHJhdmVyc2luZyc7XG5pbXBvcnQgZGF0YSBmcm9tICcuL2pxdWVyeS1taWdyYXRlL2RhdGEnO1xuaW1wb3J0IGV2ZW50cyBmcm9tICcuL2pxdWVyeS1taWdyYXRlL2V2ZW50JztcblxuaW5pdCgpO1xudHJhdmVyc2luZygpO1xuZGF0YSgpO1xuZXZlbnRzKCk7XG4iLCIvLyBGcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5LW1pZ3JhdGUvYmxvYi9tYXN0ZXIvc3JjL2RhdGEuanNcbi8vXG4vLyBodHRwczovL2pxdWVyeS5jb20vdXBncmFkZS1ndWlkZS8zLjAvI2RhdGFcblxuLyogZXNsaW50LWRpc2FibGUgcHJlZmVyLXJlc3QtcGFyYW1zLCBmdW5jLW5hbWVzICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3Qgb2xkRGF0YSA9IGpRdWVyeS5kYXRhO1xuICAgIGpRdWVyeS5kYXRhID0gZnVuY3Rpb24gKGVsZW0sIG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIGxldCBjdXJEYXRhO1xuXG4gICAgICAgIC8vIE5hbWUgY2FuIGJlIGFuIG9iamVjdCwgYW5kIGVhY2ggZW50cnkgaW4gdGhlIG9iamVjdCBpcyBtZWFudCB0byBiZSBzZXQgYXMgZGF0YVxuICAgICAgICBpZiAobmFtZSAmJiB0eXBlb2YgbmFtZSA9PT0gJ29iamVjdCcgJiYgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgY3VyRGF0YSA9IGpRdWVyeS5oYXNEYXRhKGVsZW0pICYmIG9sZERhdGEuY2FsbCh0aGlzLCBlbGVtKTtcbiAgICAgICAgICAgIGNvbnN0IHNhbWVLZXlzID0ge307XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBuYW1lKSB7XG4gICAgICAgICAgICAgICAgaWYgKGtleSAhPT0galF1ZXJ5LmNhbWVsQ2FzZShrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1ckRhdGFba2V5XSA9IG5hbWVba2V5XTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzYW1lS2V5c1trZXldID0gbmFtZVtrZXldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgb2xkRGF0YS5jYWxsKHRoaXMsIGVsZW0sIHNhbWVLZXlzKTtcbiAgICAgICAgICAgIHJldHVybiBuYW1lO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgdGhlIG5hbWUgaXMgdHJhbnNmb3JtZWQsIGxvb2sgZm9yIHRoZSB1bi10cmFuc2Zvcm1lZCBuYW1lIGluIHRoZSBkYXRhIG9iamVjdFxuICAgICAgICBpZiAobmFtZSAmJiB0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycgJiYgbmFtZSAhPT0galF1ZXJ5LmNhbWVsQ2FzZShuYW1lKSkge1xuICAgICAgICAgICAgY3VyRGF0YSA9IGpRdWVyeS5oYXNEYXRhKGVsZW0pICYmIG9sZERhdGEuY2FsbCh0aGlzLCBlbGVtKTtcbiAgICAgICAgICAgIGlmIChjdXJEYXRhICYmIG5hbWUgaW4gY3VyRGF0YSkge1xuICAgICAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMikge1xuICAgICAgICAgICAgICAgICAgICBjdXJEYXRhW25hbWVdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBjdXJEYXRhW25hbWVdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG9sZERhdGEuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xufVxuLyogZXNsaW50LWVuYWJsZSBwcmVmZXItcmVzdC1wYXJhbXMgKi9cbiIsIi8vIEZyb20gaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnktbWlncmF0ZS9ibG9iL21hc3Rlci9zcmMvZXZlbnQuanNcbi8vXG4vLyBodHRwczovL2pxdWVyeS5jb20vdXBncmFkZS1ndWlkZS8zLjAvI2JyZWFraW5nLWNoYW5nZS1sb2FkLXVubG9hZC1hbmQtZXJyb3ItcmVtb3ZlZFxuXG4vKiBlc2xpbnQtZGlzYWJsZSBwcmVmZXItcmVzdC1wYXJhbXMgKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uICgpIHtcbiAgICBqUXVlcnkuZWFjaChbJ2xvYWQnLCAndW5sb2FkJywgJ2Vycm9yJ10sIChfLCBuYW1lKSA9PiB7XG4gICAgICAgIGNvbnN0IG9sZExvYWQgPSBqUXVlcnkuZm4ubG9hZDtcblxuICAgICAgICBqUXVlcnkuZm5bbmFtZV0gPSBmdW5jdGlvbiBoYW5kbGVyKCkge1xuICAgICAgICAgICAgY29uc3QgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG5cbiAgICAgICAgICAgIC8vIElmIHRoaXMgaXMgYW4gYWpheCBsb2FkKCkgdGhlIGZpcnN0IGFyZyBzaG91bGQgYmUgdGhlIHN0cmluZyBVUkw7XG4gICAgICAgICAgICAvLyB0ZWNobmljYWxseSB0aGlzIGNvdWxkIGFsc28gYmUgdGhlIFwiQW55dGhpbmdcIiBhcmcgb2YgdGhlIGV2ZW50IC5sb2FkKClcbiAgICAgICAgICAgIC8vIHdoaWNoIGp1c3QgZ29lcyB0byBzaG93IHdoeSB0aGlzIGR1bWIgc2lnbmF0dXJlIGhhcyBiZWVuIGRlcHJlY2F0ZWQhXG4gICAgICAgICAgICAvLyBqUXVlcnkgY3VzdG9tIGJ1aWxkcyB0aGF0IGV4Y2x1ZGUgdGhlIEFqYXggbW9kdWxlIGp1c3RpZmlhYmx5IGRpZSBoZXJlLlxuICAgICAgICAgICAgaWYgKG5hbWUgPT09ICdsb2FkJyAmJiB0eXBlb2YgYXJnc1swXSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb2xkTG9hZC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYXJncy5zcGxpY2UoMCwgMCwgbmFtZSk7XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm9uLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBVc2UgLnRyaWdnZXJIYW5kbGVyIGhlcmUgYmVjYXVzZTpcbiAgICAgICAgICAgIC8vIC0gbG9hZCBhbmQgdW5sb2FkIGV2ZW50cyBkb24ndCBuZWVkIHRvIGJ1YmJsZSwgb25seSBhcHBsaWVkIHRvIHdpbmRvdyBvciBpbWFnZVxuICAgICAgICAgICAgLy8gLSBlcnJvciBldmVudCBzaG91bGQgbm90IGJ1YmJsZSB0byB3aW5kb3csIGFsdGhvdWdoIGl0IGRvZXMgcHJlLTEuN1xuICAgICAgICAgICAgLy8gU2VlIGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzExODIwXG4gICAgICAgICAgICB0aGlzLnRyaWdnZXJIYW5kbGVyLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH07XG4gICAgfSk7XG59XG4vKiBlc2xpbnQtZW5hYmxlIHByZWZlci1yZXN0LXBhcmFtcyAqL1xuIiwiLy8gRnJvbSBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS1taWdyYXRlL2Jsb2IvMS54LXN0YWJsZS9zcmMvY29yZS5qc1xuLy9cbi8vIGh0dHBzOi8vanF1ZXJ5LmNvbS91cGdyYWRlLWd1aWRlLzMuMC8jYnJlYWtpbmctY2hhbmdlLWRlcHJlY2F0ZWQtY29udGV4dC1hbmQtc2VsZWN0b3ItcHJvcGVydGllcy1yZW1vdmVkXG5cbi8qIGVzbGludC1kaXNhYmxlIHByZWZlci1yZXN0LXBhcmFtcywgZnVuYy1uYW1lcyAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IG9sZEluaXQgPSBqUXVlcnkuZm4uaW5pdDtcblxuICAgIGpRdWVyeS5mbi5pbml0ID0gZnVuY3Rpb24gKHNlbGVjdG9yLCBjb250ZXh0KSB7XG4gICAgICAgIGNvbnN0IHJldCA9IG9sZEluaXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICAgICAgICAvLyBGaWxsIGluIHNlbGVjdG9yIGFuZCBjb250ZXh0IHByb3BlcnRpZXMgc28gLmxpdmUoKSB3b3Jrc1xuICAgICAgICBpZiAoc2VsZWN0b3IgJiYgc2VsZWN0b3Iuc2VsZWN0b3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gQSBqUXVlcnkgb2JqZWN0LCBjb3B5IGl0cyBwcm9wZXJ0aWVzXG4gICAgICAgICAgICByZXQuc2VsZWN0b3IgPSBzZWxlY3Rvci5zZWxlY3RvcjtcbiAgICAgICAgICAgIHJldC5jb250ZXh0ID0gc2VsZWN0b3IuY29udGV4dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldC5zZWxlY3RvciA9IHR5cGVvZiBzZWxlY3RvciA9PT0gJ3N0cmluZycgPyBzZWxlY3RvciA6ICcnO1xuICAgICAgICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgICAgICAgICAgcmV0LmNvbnRleHQgPSBzZWxlY3Rvci5ub2RlVHlwZSA/IHNlbGVjdG9yIDogY29udGV4dCB8fCBkb2N1bWVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfTtcblxuICAgIGpRdWVyeS5mbi5pbml0LnByb3RvdHlwZSA9IGpRdWVyeS5mbjtcbn1cbi8qIGVzbGludC1lbmFibGUgcHJlZmVyLXJlc3QtcGFyYW1zICovXG4iLCIvLyBGcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5LW1pZ3JhdGUvYmxvYi8xLngtc3RhYmxlL3NyYy90cmF2ZXJzaW5nLmpzXG4vL1xuLy8gaHR0cHM6Ly9qcXVlcnkuY29tL3VwZ3JhZGUtZ3VpZGUvMy4wLyNicmVha2luZy1jaGFuZ2UtZGVwcmVjYXRlZC1jb250ZXh0LWFuZC1zZWxlY3Rvci1wcm9wZXJ0aWVzLXJlbW92ZWRcblxuLyogZXNsaW50LWRpc2FibGUgcHJlZmVyLXJlc3QtcGFyYW1zLCBmdW5jLW5hbWVzICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3Qgb2xkRm5GaW5kID0galF1ZXJ5LmZuLmZpbmQ7XG5cbiAgICBqUXVlcnkuZm4uZmluZCA9IGZ1bmN0aW9uIChzZWxlY3Rvcikge1xuICAgICAgICBjb25zdCByZXQgPSBvbGRGbkZpbmQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgcmV0LmNvbnRleHQgPSB0aGlzLmNvbnRleHQ7XG4gICAgICAgIHJldC5zZWxlY3RvciA9IHRoaXMuc2VsZWN0b3IgPyBgJHt0aGlzLnNlbGVjdG9yfSAke3NlbGVjdG9yfWAgOiBzZWxlY3RvcjtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9O1xufVxuLyogZXNsaW50LWVuYWJsZSBwcmVmZXItcmVzdC1wYXJhbXMgKi9cbiIsImltcG9ydCBOYW5vYmFyIGZyb20gJ25hbm9iYXInO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoKSB7XG4gICAgLy8gQ3JlYXRlIHRoZSBuYW5vYmFyIGluc3RhbmNlXG4gICAgY29uc3QgbmFub2JhciA9IG5ldyBOYW5vYmFyKCk7XG5cbiAgICAvLyBUaW1lciBmb3IgbW92aW5nIHByb2dyZXNzIGJhciBkdXJpbmcgYWpheCBjYWxsc1xuICAgIGxldCB0aW1lciA9IG51bGw7XG4gICAgbGV0IGN1cnJlbnQgPSAwO1xuXG4gICAgZnVuY3Rpb24gY2xlYXJUaW1lcigpIHtcbiAgICAgICAgaWYgKHRpbWVyKSB7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKHRpbWVyKTtcbiAgICAgICAgICAgIHRpbWVyID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldFRpbWVyKCkge1xuICAgICAgICBjbGVhclRpbWVyKCk7XG5cbiAgICAgICAgY3VycmVudCA9IDA7XG4gICAgICAgIHRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgICAgY3VycmVudCArPSAzO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnQgPD0gMTAwKSB7XG4gICAgICAgICAgICAgICAgbmFub2Jhci5nbyhjdXJyZW50KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCA1MCk7XG4gICAgfVxuXG4gICAgLy8gQXR0YWNoIGdsb2JhbCBqcXVlcnkgaGFuZGxlcnMgdG8gbGlzdGVuIGZvciBhamF4IHN0YXJ0XG4gICAgJChkb2N1bWVudCkuYWpheFNlbmQoKCkgPT4ge1xuICAgICAgICBzZXRUaW1lcigpO1xuICAgIH0pO1xuXG4gICAgJChkb2N1bWVudCkuYWpheENvbXBsZXRlKCgpID0+IHtcbiAgICAgICAgbmFub2Jhci5nbygxMDApO1xuICAgICAgICBjbGVhclRpbWVyKCk7XG4gICAgfSk7XG59XG4iLCJpbXBvcnQgY29sbGFwc2libGVGYWN0b3J5IGZyb20gJy4uL2NvbW1vbi9jb2xsYXBzaWJsZSc7XG5pbXBvcnQgY29sbGFwc2libGVHcm91cEZhY3RvcnkgZnJvbSAnLi4vY29tbW9uL2NvbGxhcHNpYmxlLWdyb3VwJztcblxuY29uc3QgUExVR0lOX0tFWSA9ICdtZW51JztcblxuLypcbiAqIE1hbmFnZSB0aGUgYmVoYXZpb3VyIG9mIGEgbWVudVxuICogQHBhcmFtIHtqUXVlcnl9ICRtZW51XG4gKi9cbmNsYXNzIE1lbnUge1xuICAgIGNvbnN0cnVjdG9yKCRtZW51KSB7XG4gICAgICAgIHRoaXMuJG1lbnUgPSAkbWVudTtcbiAgICAgICAgdGhpcy4kYm9keSA9ICQoJ2JvZHknKTtcbiAgICAgICAgdGhpcy5oYXNNYXhNZW51RGlzcGxheURlcHRoID0gdGhpcy4kYm9keS5maW5kKCcubmF2UGFnZXMtbGlzdCcpLmhhc0NsYXNzKCduYXZQYWdlcy1saXN0LWRlcHRoLW1heCcpO1xuXG4gICAgICAgIC8vIEluaXQgY29sbGFwc2libGVcbiAgICAgICAgdGhpcy5jb2xsYXBzaWJsZXMgPSBjb2xsYXBzaWJsZUZhY3RvcnkoJ1tkYXRhLWNvbGxhcHNpYmxlXScsIHsgJGNvbnRleHQ6IHRoaXMuJG1lbnUgfSk7XG4gICAgICAgIHRoaXMuY29sbGFwc2libGVHcm91cHMgPSBjb2xsYXBzaWJsZUdyb3VwRmFjdG9yeSgkbWVudSk7XG5cbiAgICAgICAgLy8gQXV0by1iaW5kXG4gICAgICAgIHRoaXMub25NZW51Q2xpY2sgPSB0aGlzLm9uTWVudUNsaWNrLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMub25Eb2N1bWVudENsaWNrID0gdGhpcy5vbkRvY3VtZW50Q2xpY2suYmluZCh0aGlzKTtcblxuICAgICAgICAvLyBMaXN0ZW5cbiAgICAgICAgdGhpcy5iaW5kRXZlbnRzKCk7XG4gICAgfVxuXG4gICAgY29sbGFwc2VBbGwoKSB7XG4gICAgICAgIHRoaXMuY29sbGFwc2libGVzLmZvckVhY2goY29sbGFwc2libGUgPT4gY29sbGFwc2libGUuY2xvc2UoKSk7XG4gICAgICAgIHRoaXMuY29sbGFwc2libGVHcm91cHMuZm9yRWFjaChncm91cCA9PiBncm91cC5jbG9zZSgpKTtcbiAgICB9XG5cbiAgICBjb2xsYXBzZU5laWdoYm9ycygkbmVpZ2hib3JzKSB7XG4gICAgICAgIGNvbnN0ICRjb2xsYXBzaWJsZXMgPSBjb2xsYXBzaWJsZUZhY3RvcnkoJ1tkYXRhLWNvbGxhcHNpYmxlXScsIHsgJGNvbnRleHQ6ICRuZWlnaGJvcnMgfSk7XG5cbiAgICAgICAgJGNvbGxhcHNpYmxlcy5mb3JFYWNoKCRjb2xsYXBzaWJsZSA9PiAkY29sbGFwc2libGUuY2xvc2UoKSk7XG4gICAgfVxuXG4gICAgYmluZEV2ZW50cygpIHtcbiAgICAgICAgdGhpcy4kbWVudS5vbignY2xpY2snLCB0aGlzLm9uTWVudUNsaWNrKTtcbiAgICAgICAgdGhpcy4kYm9keS5vbignY2xpY2snLCB0aGlzLm9uRG9jdW1lbnRDbGljayk7XG4gICAgfVxuXG4gICAgdW5iaW5kRXZlbnRzKCkge1xuICAgICAgICB0aGlzLiRtZW51Lm9mZignY2xpY2snLCB0aGlzLm9uTWVudUNsaWNrKTtcbiAgICAgICAgdGhpcy4kYm9keS5vZmYoJ2NsaWNrJywgdGhpcy5vbkRvY3VtZW50Q2xpY2spO1xuICAgIH1cblxuICAgIG9uTWVudUNsaWNrKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgIGlmICh0aGlzLmhhc01heE1lbnVEaXNwbGF5RGVwdGgpIHtcbiAgICAgICAgICAgIGNvbnN0ICRuZWlnaGJvcnMgPSAkKGV2ZW50LnRhcmdldCkucGFyZW50KCkuc2libGluZ3MoKTtcblxuICAgICAgICAgICAgdGhpcy5jb2xsYXBzZU5laWdoYm9ycygkbmVpZ2hib3JzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uRG9jdW1lbnRDbGljaygpIHtcbiAgICAgICAgdGhpcy5jb2xsYXBzZUFsbCgpO1xuICAgIH1cbn1cblxuLypcbiAqIENyZWF0ZSBhIG5ldyBNZW51IGluc3RhbmNlXG4gKiBAcGFyYW0ge3N0cmluZ30gW3NlbGVjdG9yXVxuICogQHJldHVybiB7TWVudX1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVudUZhY3Rvcnkoc2VsZWN0b3IgPSBgW2RhdGEtJHtQTFVHSU5fS0VZfV1gKSB7XG4gICAgY29uc3QgJG1lbnUgPSAkKHNlbGVjdG9yKS5lcSgwKTtcbiAgICBjb25zdCBpbnN0YW5jZUtleSA9IGAke1BMVUdJTl9LRVl9SW5zdGFuY2VgO1xuICAgIGNvbnN0IGNhY2hlZE1lbnUgPSAkbWVudS5kYXRhKGluc3RhbmNlS2V5KTtcblxuICAgIGlmIChjYWNoZWRNZW51IGluc3RhbmNlb2YgTWVudSkge1xuICAgICAgICByZXR1cm4gY2FjaGVkTWVudTtcbiAgICB9XG5cbiAgICBjb25zdCBtZW51ID0gbmV3IE1lbnUoJG1lbnUpO1xuXG4gICAgJG1lbnUuZGF0YShpbnN0YW5jZUtleSwgbWVudSk7XG5cbiAgICByZXR1cm4gbWVudTtcbn1cbiIsImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgbWVkaWFRdWVyeUxpc3RGYWN0b3J5IGZyb20gJy4uL2NvbW1vbi9tZWRpYS1xdWVyeS1saXN0JztcbmltcG9ydCB7IENhcnRQcmV2aWV3RXZlbnRzIH0gZnJvbSAnLi9jYXJ0LXByZXZpZXcnO1xuXG5jb25zdCBQTFVHSU5fS0VZID0ge1xuICAgIENBTUVMOiAnbW9iaWxlTWVudVRvZ2dsZScsXG4gICAgU05BS0U6ICdtb2JpbGUtbWVudS10b2dnbGUnLFxufTtcblxuZnVuY3Rpb24gb3B0aW9uc0Zyb21EYXRhKCRlbGVtZW50KSB7XG4gICAgY29uc3QgbW9iaWxlTWVudUlkID0gJGVsZW1lbnQuZGF0YShQTFVHSU5fS0VZLkNBTUVMKTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIG1lbnVTZWxlY3RvcjogbW9iaWxlTWVudUlkICYmIGAjJHttb2JpbGVNZW51SWR9YCxcbiAgICB9O1xufVxuXG4vKlxuICogTWFuYWdlIHRoZSBiZWhhdmlvdXIgb2YgYSBtb2JpbGUgbWVudVxuICogQHBhcmFtIHtqUXVlcnl9ICR0b2dnbGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucy5oZWFkZXJTZWxlY3Rvcl1cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucy5tZW51U2VsZWN0b3JdXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnMuc2Nyb2xsVmlld1NlbGVjdG9yXVxuICovXG5leHBvcnQgY2xhc3MgTW9iaWxlTWVudVRvZ2dsZSB7XG4gICAgY29uc3RydWN0b3IoJHRvZ2dsZSwge1xuICAgICAgICBoZWFkZXJTZWxlY3RvciA9ICdoZWFkZXInLFxuICAgICAgICBtZW51U2VsZWN0b3IgPSAnI21lbnUnLFxuICAgICAgICBzY3JvbGxWaWV3U2VsZWN0b3IgPSAnLm5hdlBhZ2VzJyxcbiAgICB9ID0ge30pIHtcbiAgICAgICAgdGhpcy4kYm9keSA9ICQoJ2JvZHknKTtcbiAgICAgICAgdGhpcy4kbWVudSA9ICQobWVudVNlbGVjdG9yKTtcbiAgICAgICAgdGhpcy4kaGVhZGVyTWVudSA9ICQoJy5oYWxvLXNpZGViYXItaGVhZGVyJyk7XG4gICAgICAgIHRoaXMuJG5hdkxpc3QgPSAkKCcubmF2UGFnZXMtbGlzdDpub3QoLm5hdlBhZ2VzLWxpc3QtLXVzZXIpJyk7XG4gICAgICAgIHRoaXMuJGhlYWRlciA9ICQoaGVhZGVyU2VsZWN0b3IpO1xuICAgICAgICB0aGlzLiRzY3JvbGxWaWV3ID0gJChzY3JvbGxWaWV3U2VsZWN0b3IsIHRoaXMuJG1lbnUpO1xuICAgICAgICB0aGlzLiRzdWJNZW51cyA9IHRoaXMuJG5hdkxpc3QuZmluZCgnLm5hdlBhZ2VzLWFjdGlvbjpub3QoLm5vLXN1Yk1lbnUpJyk7XG4gICAgICAgIHRoaXMuJHRvZ2dsZSA9ICR0b2dnbGU7XG4gICAgICAgIHRoaXMubWVkaXVtTWVkaWFRdWVyeUxpc3QgPSBtZWRpYVF1ZXJ5TGlzdEZhY3RvcnkoJ21lZGl1bScpO1xuXG4gICAgICAgIC8vIEF1dG8tYmluZFxuICAgICAgICB0aGlzLm9uVG9nZ2xlQ2xpY2sgPSB0aGlzLm9uVG9nZ2xlQ2xpY2suYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5vbkNhcnRQcmV2aWV3T3BlbiA9IHRoaXMub25DYXJ0UHJldmlld09wZW4uYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5vbk1lZGl1bU1lZGlhUXVlcnlNYXRjaCA9IHRoaXMub25NZWRpdW1NZWRpYVF1ZXJ5TWF0Y2guYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5vblN1Yk1lbnVDbGljayA9IHRoaXMub25TdWJNZW51Q2xpY2suYmluZCh0aGlzKTtcblxuICAgICAgICAvLyBMaXN0ZW5cbiAgICAgICAgdGhpcy5iaW5kRXZlbnRzKCk7XG5cbiAgICAgICAgLy8gQXNzaWduIERPTSBhdHRyaWJ1dGVzXG4gICAgICAgIHRoaXMuJHRvZ2dsZS5hdHRyKCdhcmlhLWNvbnRyb2xzJywgdGhpcy4kbWVudS5hdHRyKCdpZCcpKTtcblxuICAgICAgICAvLyBIaWRlIGJ5IGRlZmF1bHRcbiAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgfVxuXG4gICAgZ2V0IGlzT3BlbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuJG1lbnUuaGFzQ2xhc3MoJ2lzLW9wZW4nKTtcbiAgICB9XG5cbiAgICBiaW5kRXZlbnRzKCkge1xuICAgICAgICB0aGlzLiR0b2dnbGUub24oJ2NsaWNrJywgdGhpcy5vblRvZ2dsZUNsaWNrKTtcbiAgICAgICAgdGhpcy4kaGVhZGVyLm9uKENhcnRQcmV2aWV3RXZlbnRzLm9wZW4sIHRoaXMub25DYXJ0UHJldmlld09wZW4pO1xuICAgICAgICB0aGlzLiRzdWJNZW51cy5vbignY2xpY2snLCB0aGlzLm9uU3ViTWVudUNsaWNrKTtcblxuICAgICAgICBpZiAodGhpcy5tZWRpdW1NZWRpYVF1ZXJ5TGlzdCAmJiB0aGlzLm1lZGl1bU1lZGlhUXVlcnlMaXN0LmFkZExpc3RlbmVyKSB7XG4gICAgICAgICAgICB0aGlzLm1lZGl1bU1lZGlhUXVlcnlMaXN0LmFkZExpc3RlbmVyKHRoaXMub25NZWRpdW1NZWRpYVF1ZXJ5TWF0Y2gpO1xuICAgICAgICB9XG5cbiAgICAgICAgJCgnLm5hdlBhZ2VzLWxpc3QtLXVzZXIgLmN1cnJlbmNpZXMgI2N1cnJlbmN5X3NlbGVjdG9yJykub24oJ2NsaWNrJywgZnVuY3Rpb24oZXYpe1xuICAgICAgICAgICAgY29uc3QgJGNsb3Nlc3RBY3Rpb25QYXJlbnQgPSAkKGV2ZW50LnRhcmdldCkucGFyZW50KCk7XG4gICAgICAgICAgICBjb25zdCAkcGFyZW50U2libGluZ3MgPSAkY2xvc2VzdEFjdGlvblBhcmVudC5zaWJsaW5ncygpO1xuICAgICAgICAgICAgY29uc3QgJGNsb3Nlc3RBY3Rpb25MZXZlbCA9ICRjbG9zZXN0QWN0aW9uUGFyZW50LmRhdGEoJ2xldmVsJyk7XG4gICAgICAgICAgICBjb25zdCAkYmVmb3JlTWVudUhlaWdodCA9ICQoJy5uYXZQYWdlcy1saXN0LS11c2VyJykuaGVpZ2h0KCk7XG4gICAgICAgICAgICBjb25zdCAkY3VycmVudG1lbnVIZWlnaHQgPSAkcGFyZW50U2libGluZ3MuaGVpZ2h0KCk7XG4gICAgICAgICAgICAkY2xvc2VzdEFjdGlvblBhcmVudC5hZGRDbGFzcygnaXMtb3BlbicpO1xuICAgICAgICAgICAgJHBhcmVudFNpYmxpbmdzLmFkZENsYXNzKCdpcy1oaWRkZW4nKTtcbiAgICAgICAgICAgICQoJy5uYXZQYWdlcy1saXN0LS11c2VyJykuYXR0cignZGF0YS1sZXZlbC1saXN0JywgJGNsb3Nlc3RBY3Rpb25MZXZlbCk7XG4gICAgICAgICAgICAkKCcubmF2UGFnZXMtbGlzdC0tdXNlcicpLmF0dHIoJ2RhdGEtYmVmb3JlJywkYmVmb3JlTWVudUhlaWdodCk7XG4gICAgICAgICAgICAkKCcubmF2UGFnZXMtbGlzdC0tdXNlcicpLmNzcygnbWluLWhlaWdodCcsJGN1cnJlbnRtZW51SGVpZ2h0KTtcbiAgICAgICAgfSk7XG4gICAgICAgICQoJy5uYXZQYWdlcy1saXN0LS11c2VyIC5jdXJyZW5jaWVzIC5uYXZQYWdlLXN1Yk1lbnUtdGl0bGUnKS5vbignY2xpY2snLCBmdW5jdGlvbihldil7XG4gICAgICAgICAgICBjb25zdCAkY2xvc2VzdEFjdGlvbiA9ICQoZXZlbnQudGFyZ2V0KS5jbG9zZXN0KCcuY3VycmVuY2llcycpO1xuICAgICAgICAgICAgY29uc3QgJHBhcmVudFNpYmxpbmdzID0gJGNsb3Nlc3RBY3Rpb24uc2libGluZ3MoKTtcbiAgICAgICAgICAgIGNvbnN0ICRiZWZvcmVNZW51SGVpZ2h0ID0gJCgnLm5hdlBhZ2VzLWxpc3QtLXVzZXInKS5kYXRhKCdiZWZvcmUnKTtcbiAgICAgICAgICAgICRjbG9zZXN0QWN0aW9uLnJlbW92ZUNsYXNzKCdpcy1vcGVuJyk7XG4gICAgICAgICAgICAkcGFyZW50U2libGluZ3MucmVtb3ZlQ2xhc3MoJ2lzLWhpZGRlbicpO1xuICAgICAgICAgICAgJCgnLm5hdlBhZ2VzLWxpc3QtLXVzZXInKS5hdHRyKCdkYXRhLWxldmVsLWxpc3QnLCAxKTtcbiAgICAgICAgICAgICQoJy5uYXZQYWdlcy1saXN0LS11c2VyJykuY3NzKCdtaW4taGVpZ2h0JywkYmVmb3JlTWVudUhlaWdodCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHVuYmluZEV2ZW50cygpIHtcbiAgICAgICAgdGhpcy4kdG9nZ2xlLm9mZignY2xpY2snLCB0aGlzLm9uVG9nZ2xlQ2xpY2spO1xuICAgICAgICB0aGlzLiRoZWFkZXIub2ZmKENhcnRQcmV2aWV3RXZlbnRzLm9wZW4sIHRoaXMub25DYXJ0UHJldmlld09wZW4pO1xuXG4gICAgICAgIGlmICh0aGlzLm1lZGl1bU1lZGlhUXVlcnlMaXN0ICYmIHRoaXMubWVkaXVtTWVkaWFRdWVyeUxpc3QuYWRkTGlzdGVuZXIpIHtcbiAgICAgICAgICAgIHRoaXMubWVkaXVtTWVkaWFRdWVyeUxpc3QucmVtb3ZlTGlzdGVuZXIodGhpcy5vbk1lZGl1bU1lZGlhUXVlcnlNYXRjaCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0b2dnbGUoKSB7XG4gICAgICAgIGlmICh0aGlzLmlzT3Blbikge1xuICAgICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNob3coKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNob3coKSB7XG4gICAgICAgIHRoaXMuJGJvZHkuYWRkQ2xhc3MoJ2hhcy1hY3RpdmVOYXZQYWdlcycpO1xuXG4gICAgICAgIHRoaXMuJHRvZ2dsZVxuICAgICAgICAgICAgLmFkZENsYXNzKCdpcy1vcGVuJylcbiAgICAgICAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSk7XG5cbiAgICAgICAgdGhpcy4kbWVudVxuICAgICAgICAgICAgLmFkZENsYXNzKCdpcy1vcGVuJylcbiAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsIGZhbHNlKTtcblxuICAgICAgICB0aGlzLiRoZWFkZXIuYWRkQ2xhc3MoJ2lzLW9wZW4nKTtcbiAgICAgICAgdGhpcy4kc2Nyb2xsVmlldy5zY3JvbGxUb3AoMCk7XG5cbiAgICAgICAgaWYgKCQod2luZG93KS53aWR0aCgpID4gMTAyNCkge1xuICAgICAgICAgICAgaWYgKCgkKCcucGFnZS10eXBlLWNhdGVnb3J5JykubGVuZ3RoID4gMCkgfHwgKCQoJy5wYWdlLXR5cGUtc2VhcmNoJykubGVuZ3RoID4gMCkgfHwgKCQoJy5wYWdlLXR5cGUtYnJhbmQnKS5sZW5ndGggPiAwKSB8fCAoJCgnLnBhZ2UtdHlwZS1wcm9kdWN0JykubGVuZ3RoID4gMCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoJCgnaGVhZGVyOm5vdCguaXMtc3RpY2t5KScpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoJCgnLmhhbG8tdG9wSGVhZGVyLXZpc2libGUnKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0ID0gdGhpcy4kaGVhZGVyLm91dGVySGVpZ2h0KCkgKyA0MDtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJy5oYWxvLW1lbnUtc2lkZWJhcicpLmNzcyh7J3RvcCc6IGhlaWdodH0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhlaWdodCA9IHRoaXMuJGhlYWRlci5vdXRlckhlaWdodCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJCgnLmhhbG8tbWVudS1zaWRlYmFyJykuY3NzKHsndG9wJzogaGVpZ2h0fSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0ID0gdGhpcy4kaGVhZGVyLm91dGVySGVpZ2h0KCk7XG4gICAgICAgICAgICAgICAgICAgICQoJy5oYWxvLW1lbnUtc2lkZWJhcicpLmNzcyh7J3RvcCc6IGhlaWdodH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIGhlaWdodCA9IHRoaXMuJGhlYWRlci5vdXRlckhlaWdodCgpO1xuICAgICAgICAgICAgICAgICQoJy5oYWxvLW1lbnUtc2lkZWJhcicpLmNzcyh7J3RvcCc6IGhlaWdodH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJCgnLmhhbG8tbWVudS1zaWRlYmFyJykuY3NzKCd0b3AnLCAwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucmVzZXRTdWJNZW51cygpO1xuICAgIH1cblxuICAgIGhpZGUoKSB7XG4gICAgICAgIHRoaXMuJGJvZHkucmVtb3ZlQ2xhc3MoJ2hhcy1hY3RpdmVOYXZQYWdlcycpO1xuXG4gICAgICAgIHRoaXMuJHRvZ2dsZVxuICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdpcy1vcGVuJylcbiAgICAgICAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgZmFsc2UpO1xuXG4gICAgICAgIHRoaXMuJG1lbnVcbiAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnaXMtb3BlbicpXG4gICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCB0cnVlKTtcblxuICAgICAgICB0aGlzLiRoZWFkZXIucmVtb3ZlQ2xhc3MoJ2lzLW9wZW4nKTtcblxuICAgICAgICB0aGlzLnJlc2V0U3ViTWVudXMoKTtcbiAgICB9XG5cbiAgICAvLyBQcml2YXRlXG4gICAgb25Ub2dnbGVDbGljayhldmVudCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgIHRoaXMudG9nZ2xlKCk7XG4gICAgfVxuXG4gICAgb25DYXJ0UHJldmlld09wZW4oKSB7XG4gICAgICAgIGlmICh0aGlzLmlzT3Blbikge1xuICAgICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbk1lZGl1bU1lZGlhUXVlcnlNYXRjaChtZWRpYSkge1xuICAgICAgICBpZiAoIW1lZGlhLm1hdGNoZXMpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH1cblxuICAgIG9uU3ViTWVudUNsaWNrKGV2ZW50KSB7XG4gICAgICAgIGNvbnN0ICRjbG9zZXN0QWN0aW9uID0gJChldmVudC50YXJnZXQpLnBhcmVudCgpO1xuICAgICAgICBjb25zdCAkcGFyZW50U2libGluZ3MgPSAkY2xvc2VzdEFjdGlvbi5zaWJsaW5ncygpO1xuXG4gICAgICAgIGlmICghJGNsb3Nlc3RBY3Rpb24uaGFzQ2xhc3MoJ25hdlBhZ2Utc3ViTWVudS10aXRsZScpKSB7XG4gICAgICAgICAgICBpZiAoISRjbG9zZXN0QWN0aW9uLmhhc0NsYXNzKCduYXZQYWdlcy1hY3Rpb24tZW5kJykpIHtcbiAgICAgICAgICAgICAgICBpZigkY2xvc2VzdEFjdGlvbi5oYXNDbGFzcygnaGFzLWRyb3Bkb3duJykpe1xuICAgICAgICAgICAgICAgICAgICAkY2xvc2VzdEFjdGlvbi50b2dnbGVDbGFzcygnaXMtb3BlbicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMuJHN1Yk1lbnVzLmhhc0NsYXNzKCdpcy1vcGVuJykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRuYXZMaXN0LmFkZENsYXNzKCdzdWJNZW51LWlzLW9wZW4nKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kbmF2TGlzdC5yZW1vdmVDbGFzcygnc3ViTWVudS1pcy1vcGVuJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICgkY2xvc2VzdEFjdGlvbi5oYXNDbGFzcygnaXMtb3BlbicpKSB7XG4gICAgICAgICAgICAgICAgJHBhcmVudFNpYmxpbmdzLmFkZENsYXNzKCdpcy1oaWRkZW4nKTtcbiAgICAgICAgICAgICAgICAkY2xvc2VzdEFjdGlvbi5wYXJlbnRzKCcuaGFsby1tZW51LXNpZGViYXInKS5maW5kKCcuaGFsby1zaWRlYmFyLWhlYWRlcicpLmFkZENsYXNzKCdpcy1oaWRkZW4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0ICRjbG9zZXN0QWN0aW9uMiA9ICQoZXZlbnQudGFyZ2V0KS5jbG9zZXN0KCcubmF2UGFnZS1zdWJNZW51Jyk7XG4gICAgICAgICAgICBjb25zdCAkY2xvc2VzdEFjdGlvbjMgPSAkY2xvc2VzdEFjdGlvbjIuZmluZCgnLmhhcy1kcm9wZG93bicpO1xuICAgICAgICAgICAgY29uc3QgJHBhcmVudFNpYmxpbmdzMiA9ICRjbG9zZXN0QWN0aW9uMi5wYXJlbnQoKTtcbiAgICAgICAgICAgIGNvbnN0ICRwYXJlbnRBY3Rpb24yID0gJHBhcmVudFNpYmxpbmdzMi5zaWJsaW5ncygpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy4kc3ViTWVudXMuaGFzQ2xhc3MoJ2lzLW9wZW4nKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuJG5hdkxpc3QuYWRkQ2xhc3MoJ3N1Yk1lbnUtaXMtb3BlbicpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRuYXZMaXN0LnJlbW92ZUNsYXNzKCdzdWJNZW51LWlzLW9wZW4nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCEkKCcubmF2UGFnZS1zdWJNZW51LWl0ZW0tY2hpbGQuaXMtb3BlbicpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICRjbG9zZXN0QWN0aW9uLnBhcmVudHMoJy5oYWxvLW1lbnUtc2lkZWJhcicpLmZpbmQoJy5oYWxvLXNpZGViYXItaGVhZGVyJykucmVtb3ZlQ2xhc3MoJ2lzLWhpZGRlbicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAkcGFyZW50U2libGluZ3MyLnJlbW92ZUNsYXNzKCdpcy1vcGVuJyk7XG4gICAgICAgICAgICAkcGFyZW50QWN0aW9uMi5yZW1vdmVDbGFzcygnaXMtaGlkZGVuJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgcmVzZXRTdWJNZW51cygpIHtcbiAgICAgICAgdGhpcy4kbmF2TGlzdC5maW5kKCcuaXMtaGlkZGVuJykucmVtb3ZlQ2xhc3MoJ2lzLWhpZGRlbicpO1xuICAgICAgICB0aGlzLiRoZWFkZXJNZW51LnJlbW92ZUNsYXNzKCdpcy1oaWRkZW4nKTtcbiAgICAgICAgdGhpcy4kbmF2TGlzdC5maW5kKCcuaXMtb3BlbicpLnJlbW92ZUNsYXNzKCdpcy1vcGVuJyk7XG4gICAgICAgIHRoaXMuJG5hdkxpc3QucmVtb3ZlQ2xhc3MoJ3N1Yk1lbnUtaXMtb3BlbicpO1xuICAgICAgICAkKCcubmF2UGFnZXMtbGlzdC0tdXNlcicpLmF0dHIoJ2RhdGEtbGV2ZWwtbGlzdCcsIDEpO1xuICAgICAgICB0aGlzLiRuYXZMaXN0LmNzcygnbWluLWhlaWdodCcsICd1bnNldCcpO1xuICAgIH1cbn1cblxuLypcbiAqIENyZWF0ZSBhIG5ldyBNb2JpbGVNZW51VG9nZ2xlIGluc3RhbmNlXG4gKiBAcGFyYW0ge3N0cmluZ30gW3NlbGVjdG9yXVxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLmhlYWRlclNlbGVjdG9yXVxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLm1lbnVTZWxlY3Rvcl1cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucy5zY3JvbGxWaWV3U2VsZWN0b3JdXG4gKiBAcmV0dXJuIHtNb2JpbGVNZW51VG9nZ2xlfVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtb2JpbGVNZW51VG9nZ2xlRmFjdG9yeShzZWxlY3RvciA9IGBbZGF0YS0ke1BMVUdJTl9LRVkuU05BS0V9XWAsIG92ZXJyaWRlT3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgJHRvZ2dsZSA9ICQoc2VsZWN0b3IpLmVxKDApO1xuICAgIGNvbnN0IGluc3RhbmNlS2V5ID0gYCR7UExVR0lOX0tFWS5DQU1FTH1JbnN0YW5jZWA7XG4gICAgY29uc3QgY2FjaGVkTW9iaWxlTWVudSA9ICR0b2dnbGUuZGF0YShpbnN0YW5jZUtleSk7XG5cbiAgICBpZiAoY2FjaGVkTW9iaWxlTWVudSBpbnN0YW5jZW9mIE1vYmlsZU1lbnVUb2dnbGUpIHtcbiAgICAgICAgcmV0dXJuIGNhY2hlZE1vYmlsZU1lbnU7XG4gICAgfVxuXG4gICAgY29uc3Qgb3B0aW9ucyA9IF8uZXh0ZW5kKG9wdGlvbnNGcm9tRGF0YSgkdG9nZ2xlKSwgb3ZlcnJpZGVPcHRpb25zKTtcbiAgICBjb25zdCBtb2JpbGVNZW51ID0gbmV3IE1vYmlsZU1lbnVUb2dnbGUoJHRvZ2dsZSwgb3B0aW9ucyk7XG5cbiAgICAkdG9nZ2xlLmRhdGEoaW5zdGFuY2VLZXksIG1vYmlsZU1lbnUpO1xuXG4gICAgcmV0dXJuIG1vYmlsZU1lbnU7XG59XG4iLCJpbXBvcnQgZm91bmRhdGlvbiBmcm9tICcuL2ZvdW5kYXRpb24nO1xuaW1wb3J0ICogYXMgZm9jdXNUcmFwIGZyb20gJ2ZvY3VzLXRyYXAnO1xuXG5jb25zdCBib2R5QWN0aXZlQ2xhc3MgPSAnaGFzLWFjdGl2ZU1vZGFsJztcbmNvbnN0IGxvYWRpbmdPdmVybGF5Q2xhc3MgPSAnbG9hZGluZ092ZXJsYXknO1xuY29uc3QgbW9kYWxCb2R5Q2xhc3MgPSAnbW9kYWwtYm9keSc7XG5jb25zdCBtb2RhbENvbnRlbnRDbGFzcyA9ICdtb2RhbC1jb250ZW50JztcblxuY29uc3QgU2l6ZUNsYXNzZXMgPSB7XG4gICAgc21hbGw6ICdtb2RhbC0tc21hbGwnLFxuICAgIGxhcmdlOiAnbW9kYWwtLWxhcmdlJyxcbiAgICBub3JtYWw6ICcnLFxufTtcblxuZXhwb3J0IGNvbnN0IE1vZGFsRXZlbnRzID0ge1xuICAgIGNsb3NlOiAnY2xvc2UuZm5kdG4ucmV2ZWFsJyxcbiAgICBjbG9zZWQ6ICdjbG9zZWQuZm5kdG4ucmV2ZWFsJyxcbiAgICBvcGVuOiAnb3Blbi5mbmR0bi5yZXZlYWwnLFxuICAgIG9wZW5lZDogJ29wZW5lZC5mbmR0bi5yZXZlYWwnLFxuICAgIGxvYWRlZDogJ2xvYWRlZC5kYXRhLmN1c3RvbScsXG59O1xuXG5mdW5jdGlvbiBnZXRTaXplRnJvbU1vZGFsKCRtb2RhbCkge1xuICAgIGlmICgkbW9kYWwuaGFzQ2xhc3MoU2l6ZUNsYXNzZXMuc21hbGwpKSB7XG4gICAgICAgIHJldHVybiAnc21hbGwnO1xuICAgIH1cblxuICAgIGlmICgkbW9kYWwuaGFzQ2xhc3MoU2l6ZUNsYXNzZXMubGFyZ2UpKSB7XG4gICAgICAgIHJldHVybiAnbGFyZ2UnO1xuICAgIH1cblxuICAgIHJldHVybiAnbm9ybWFsJztcbn1cblxuZnVuY3Rpb24gZ2V0Vmlld3BvcnRIZWlnaHQobXVsdGlwbGVyID0gMSkge1xuICAgIGNvbnN0IHZpZXdwb3J0SGVpZ2h0ID0gJCh3aW5kb3cpLmhlaWdodCgpO1xuXG4gICAgcmV0dXJuIHZpZXdwb3J0SGVpZ2h0ICogbXVsdGlwbGVyO1xufVxuXG5mdW5jdGlvbiB3cmFwTW9kYWxCb2R5KGNvbnRlbnQpIHtcbiAgICBjb25zdCAkbW9kYWxCb2R5ID0gJCgnPGRpdj4nKTtcblxuICAgICRtb2RhbEJvZHlcbiAgICAgICAgLmFkZENsYXNzKG1vZGFsQm9keUNsYXNzKVxuICAgICAgICAuaHRtbChjb250ZW50KTtcblxuICAgIHJldHVybiAkbW9kYWxCb2R5O1xufVxuXG5mdW5jdGlvbiByZXN0cmFpbkNvbnRlbnRIZWlnaHQoJGNvbnRlbnQpIHtcbiAgICBpZiAoJGNvbnRlbnQubGVuZ3RoID09PSAwKSByZXR1cm47XG5cbiAgICBjb25zdCAkYm9keSA9ICQoYC4ke21vZGFsQm9keUNsYXNzfWAsICRjb250ZW50KTtcblxuICAgIGlmICgkYm9keS5sZW5ndGggPT09IDApIHJldHVybjtcblxuICAgIGNvbnN0IGJvZHlIZWlnaHQgPSAkYm9keS5vdXRlckhlaWdodCgpO1xuICAgIGNvbnN0IGNvbnRlbnRIZWlnaHQgPSAkY29udGVudC5vdXRlckhlaWdodCgpO1xuICAgIGNvbnN0IHZpZXdwb3J0SGVpZ2h0ID0gZ2V0Vmlld3BvcnRIZWlnaHQoMC45KTtcbiAgICBjb25zdCBtYXhIZWlnaHQgPSB2aWV3cG9ydEhlaWdodCAtIChjb250ZW50SGVpZ2h0IC0gYm9keUhlaWdodCk7XG5cbiAgICAkYm9keS5jc3MoJ21heC1oZWlnaHQnLCBtYXhIZWlnaHQpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVNb2RhbENvbnRlbnQoJG1vZGFsKSB7XG4gICAgbGV0ICRjb250ZW50ID0gJChgLiR7bW9kYWxDb250ZW50Q2xhc3N9YCwgJG1vZGFsKTtcblxuICAgIGlmICgkY29udGVudC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgY29uc3QgZXhpc3RpbmdDb250ZW50ID0gJG1vZGFsLmNoaWxkcmVuKCk7XG5cbiAgICAgICAgJGNvbnRlbnQgPSAkKCc8ZGl2PicpXG4gICAgICAgICAgICAuYWRkQ2xhc3MobW9kYWxDb250ZW50Q2xhc3MpXG4gICAgICAgICAgICAuYXBwZW5kKGV4aXN0aW5nQ29udGVudClcbiAgICAgICAgICAgIC5hcHBlbmRUbygkbW9kYWwpO1xuICAgIH1cblxuICAgIHJldHVybiAkY29udGVudDtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTG9hZGluZ092ZXJsYXkoJG1vZGFsKSB7XG4gICAgbGV0ICRsb2FkaW5nT3ZlcmxheSA9ICQoYC4ke2xvYWRpbmdPdmVybGF5Q2xhc3N9YCwgJG1vZGFsKTtcblxuICAgIGlmICgkbG9hZGluZ092ZXJsYXkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICRsb2FkaW5nT3ZlcmxheSA9ICQoJzxkaXY+JylcbiAgICAgICAgICAgIC5hZGRDbGFzcyhsb2FkaW5nT3ZlcmxheUNsYXNzKVxuICAgICAgICAgICAgLmFwcGVuZFRvKCRtb2RhbCk7XG4gICAgfVxuXG4gICAgcmV0dXJuICRsb2FkaW5nT3ZlcmxheTtcbn1cblxuLyoqXG4gKiBSZXF1aXJlIGZvdW5kYXRpb24ucmV2ZWFsXG4gKiBEZWNvcmF0ZSBmb3VuZGF0aW9uLnJldmVhbCB3aXRoIGFkZGl0aW9uYWwgbWV0aG9kc1xuICogQHBhcmFtIHtqUXVlcnl9ICRtb2RhbFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnNpemVdXG4gKi9cbmV4cG9ydCBjbGFzcyBNb2RhbCB7XG4gICAgY29uc3RydWN0b3IoJG1vZGFsLCB7XG4gICAgICAgIHNpemUgPSBudWxsLFxuICAgIH0gPSB7fSkge1xuICAgICAgICB0aGlzLiRtb2RhbCA9ICRtb2RhbDtcbiAgICAgICAgdGhpcy4kY29udGVudCA9IGNyZWF0ZU1vZGFsQ29udGVudCh0aGlzLiRtb2RhbCk7XG4gICAgICAgIHRoaXMuJG92ZXJsYXkgPSBjcmVhdGVMb2FkaW5nT3ZlcmxheSh0aGlzLiRtb2RhbCk7XG4gICAgICAgIHRoaXMuZGVmYXVsdFNpemUgPSBzaXplIHx8IGdldFNpemVGcm9tTW9kYWwoJG1vZGFsKTtcbiAgICAgICAgdGhpcy5zaXplID0gdGhpcy5kZWZhdWx0U2l6ZTtcbiAgICAgICAgdGhpcy5wZW5kaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuJHByZU1vZGFsRm9jdXNlZEVsID0gbnVsbDtcbiAgICAgICAgdGhpcy5mb2N1c1RyYXAgPSBudWxsO1xuXG4gICAgICAgIHRoaXMub25Nb2RhbE9wZW4gPSB0aGlzLm9uTW9kYWxPcGVuLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMub25Nb2RhbE9wZW5lZCA9IHRoaXMub25Nb2RhbE9wZW5lZC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLm9uTW9kYWxDbG9zZSA9IHRoaXMub25Nb2RhbENsb3NlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMub25Nb2RhbENsb3NlZCA9IHRoaXMub25Nb2RhbENsb3NlZC5iaW5kKHRoaXMpO1xuXG4gICAgICAgIHRoaXMuYmluZEV2ZW50cygpO1xuXG4gICAgICAgIC8qIFNUUkYtMjQ3MSAtIE11bHRpcGxlIFdpc2ggTGlzdHMgLSBwcmV2ZW50cyBkb3VibGUtZmlyaW5nXG4gICAgICAgICAqIG9mIGZvdW5kYXRpb24uZHJvcGRvd24gY2xpY2suZm5kdG4uZHJvcGRvd24gZXZlbnQgKi9cbiAgICAgICAgdGhpcy4kbW9kYWwub24oJ2NsaWNrJywgJy5kcm9wZG93bi1tZW51LWJ1dHRvbicsIGUgPT4ge1xuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZ2V0IHBlbmRpbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wZW5kaW5nO1xuICAgIH1cblxuICAgIHNldCBwZW5kaW5nKHBlbmRpbmcpIHtcbiAgICAgICAgdGhpcy5fcGVuZGluZyA9IHBlbmRpbmc7XG5cbiAgICAgICAgaWYgKHBlbmRpbmcpIHtcbiAgICAgICAgICAgIHRoaXMuJG92ZXJsYXkuc2hvdygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy4kb3ZlcmxheS5oaWRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgc2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NpemU7XG4gICAgfVxuXG4gICAgc2V0IHNpemUoc2l6ZSkge1xuICAgICAgICB0aGlzLl9zaXplID0gc2l6ZTtcblxuICAgICAgICB0aGlzLiRtb2RhbFxuICAgICAgICAgICAgLnJlbW92ZUNsYXNzKFNpemVDbGFzc2VzLnNtYWxsKVxuICAgICAgICAgICAgLnJlbW92ZUNsYXNzKFNpemVDbGFzc2VzLmxhcmdlKVxuICAgICAgICAgICAgLmFkZENsYXNzKFNpemVDbGFzc2VzW3NpemVdIHx8ICcnKTtcbiAgICB9XG5cbiAgICBiaW5kRXZlbnRzKCkge1xuICAgICAgICB0aGlzLiRtb2RhbC5vbihNb2RhbEV2ZW50cy5jbG9zZSwgdGhpcy5vbk1vZGFsQ2xvc2UpO1xuICAgICAgICB0aGlzLiRtb2RhbC5vbihNb2RhbEV2ZW50cy5jbG9zZWQsIHRoaXMub25Nb2RhbENsb3NlZCk7XG4gICAgICAgIHRoaXMuJG1vZGFsLm9uKE1vZGFsRXZlbnRzLm9wZW4sIHRoaXMub25Nb2RhbE9wZW4pO1xuICAgICAgICB0aGlzLiRtb2RhbC5vbihNb2RhbEV2ZW50cy5vcGVuZWQsIHRoaXMub25Nb2RhbE9wZW5lZCk7XG4gICAgfVxuXG4gICAgb3Blbih7XG4gICAgICAgIHNpemUsXG4gICAgICAgIHBlbmRpbmcgPSB0cnVlLFxuICAgICAgICBjbGVhckNvbnRlbnQgPSB0cnVlLFxuICAgIH0gPSB7fSkge1xuICAgICAgICB0aGlzLnBlbmRpbmcgPSBwZW5kaW5nO1xuXG4gICAgICAgIGlmIChzaXplKSB7XG4gICAgICAgICAgICB0aGlzLnNpemUgPSBzaXplO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNsZWFyQ29udGVudCkge1xuICAgICAgICAgICAgdGhpcy5jbGVhckNvbnRlbnQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuJG1vZGFsLmZvdW5kYXRpb24oJ3JldmVhbCcsICdvcGVuJyk7XG4gICAgfVxuXG4gICAgY2xvc2UoKSB7XG4gICAgICAgIHRoaXMuJG1vZGFsLmZvdW5kYXRpb24oJ3JldmVhbCcsICdjbG9zZScpO1xuICAgIH1cblxuICAgIHVwZGF0ZUNvbnRlbnQoY29udGVudCwgeyB3cmFwID0gZmFsc2UgfSA9IHt9KSB7XG4gICAgICAgIGxldCAkY29udGVudCA9ICQoY29udGVudCk7XG5cbiAgICAgICAgaWYgKHdyYXApIHtcbiAgICAgICAgICAgICRjb250ZW50ID0gd3JhcE1vZGFsQm9keShjb250ZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucGVuZGluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLiRjb250ZW50Lmh0bWwoJGNvbnRlbnQpO1xuICAgICAgICB0aGlzLiRtb2RhbC50cmlnZ2VyKE1vZGFsRXZlbnRzLmxvYWRlZCk7XG5cbiAgICAgICAgcmVzdHJhaW5Db250ZW50SGVpZ2h0KHRoaXMuJGNvbnRlbnQpO1xuICAgICAgICBmb3VuZGF0aW9uKHRoaXMuJGNvbnRlbnQpO1xuICAgIH1cblxuICAgIGNsZWFyQ29udGVudCgpIHtcbiAgICAgICAgdGhpcy4kY29udGVudC5odG1sKCcnKTtcbiAgICB9XG5cbiAgICBzZXR1cEZvY3VzVHJhcCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLiRwcmVNb2RhbEZvY3VzZWRFbCkgdGhpcy4kcHJlTW9kYWxGb2N1c2VkRWwgPSAkKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpO1xuXG4gICAgICAgIGlmICghdGhpcy5mb2N1c1RyYXApIHtcbiAgICAgICAgICAgIHRoaXMuZm9jdXNUcmFwID0gZm9jdXNUcmFwLmNyZWF0ZUZvY3VzVHJhcCh0aGlzLiRtb2RhbFswXSwge1xuICAgICAgICAgICAgICAgIGVzY2FwZURlYWN0aXZhdGVzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICByZXR1cm5Gb2N1c09uRGVhY3RpdmF0ZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgYWxsb3dPdXRzaWRlQ2xpY2s6IHRydWUsXG4gICAgICAgICAgICAgICAgZmFsbGJhY2tGb2N1czogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmYWxsYmFja05vZGUgPSB0aGlzLiRwcmVNb2RhbEZvY3VzZWRFbCAmJiB0aGlzLiRwcmVNb2RhbEZvY3VzZWRFbC5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgICAgID8gdGhpcy4kcHJlTW9kYWxGb2N1c2VkRWxbMF1cbiAgICAgICAgICAgICAgICAgICAgICAgIDogJCgnW2RhdGEtaGVhZGVyLWxvZ28tbGlua10nKVswXTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsbGJhY2tOb2RlO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZm9jdXNUcmFwLmRlYWN0aXZhdGUoKTtcbiAgICAgICAgdGhpcy5mb2N1c1RyYXAuYWN0aXZhdGUoKTtcbiAgICB9XG5cbiAgICBvbk1vZGFsQ2xvc2UoKSB7XG4gICAgICAgICQoJ2JvZHknKS5yZW1vdmVDbGFzcyhib2R5QWN0aXZlQ2xhc3MpO1xuICAgIH1cblxuICAgIG9uTW9kYWxDbG9zZWQoKSB7XG4gICAgICAgIHRoaXMuc2l6ZSA9IHRoaXMuZGVmYXVsdFNpemU7XG5cbiAgICAgICAgaWYgKHRoaXMuZm9jdXNUcmFwKSB0aGlzLmZvY3VzVHJhcC5kZWFjdGl2YXRlKCk7XG5cbiAgICAgICAgaWYgKHRoaXMuJHByZU1vZGFsRm9jdXNlZEVsKSB0aGlzLiRwcmVNb2RhbEZvY3VzZWRFbC5mb2N1cygpO1xuXG4gICAgICAgIHRoaXMuJHByZU1vZGFsRm9jdXNlZEVsID0gbnVsbDtcbiAgICB9XG5cbiAgICBvbk1vZGFsT3BlbigpIHtcbiAgICAgICAgJCgnYm9keScpLmFkZENsYXNzKGJvZHlBY3RpdmVDbGFzcyk7XG4gICAgfVxuXG4gICAgb25Nb2RhbE9wZW5lZCgpIHtcbiAgICAgICAgaWYgKHRoaXMucGVuZGluZykge1xuICAgICAgICAgICAgdGhpcy4kbW9kYWwub25lKE1vZGFsRXZlbnRzLmxvYWRlZCwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLiRtb2RhbC5oYXNDbGFzcygnb3BlbicpKSB0aGlzLnNldHVwRm9jdXNUcmFwKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2V0dXBGb2N1c1RyYXAoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlc3RyYWluQ29udGVudEhlaWdodCh0aGlzLiRjb250ZW50KTtcbiAgICB9XG59XG5cbi8qKlxuICogUmV0dXJuIGFuIGFycmF5IG9mIG1vZGFsc1xuICogQHBhcmFtIHtzdHJpbmd9IHNlbGVjdG9yXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuc2l6ZV1cbiAqIEByZXR1cm5zIHthcnJheX1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbW9kYWxGYWN0b3J5KHNlbGVjdG9yID0gJ1tkYXRhLXJldmVhbF0nLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCAkbW9kYWxzID0gJChzZWxlY3Rvciwgb3B0aW9ucy4kY29udGV4dCk7XG5cbiAgICByZXR1cm4gJG1vZGFscy5tYXAoKGluZGV4LCBlbGVtZW50KSA9PiB7XG4gICAgICAgIGNvbnN0ICRtb2RhbCA9ICQoZWxlbWVudCk7XG4gICAgICAgIGNvbnN0IGluc3RhbmNlS2V5ID0gJ21vZGFsSW5zdGFuY2UnO1xuICAgICAgICBjb25zdCBjYWNoZWRNb2RhbCA9ICRtb2RhbC5kYXRhKGluc3RhbmNlS2V5KTtcblxuICAgICAgICBpZiAoY2FjaGVkTW9kYWwgaW5zdGFuY2VvZiBNb2RhbCkge1xuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZE1vZGFsO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbW9kYWwgPSBuZXcgTW9kYWwoJG1vZGFsLCBvcHRpb25zKTtcblxuICAgICAgICAkbW9kYWwuZGF0YShpbnN0YW5jZUtleSwgbW9kYWwpO1xuXG4gICAgICAgIHJldHVybiBtb2RhbDtcbiAgICB9KS50b0FycmF5KCk7XG59XG5cbi8qXG4gKiBSZXR1cm4gdGhlIGRlZmF1bHQgcGFnZSBtb2RhbFxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdE1vZGFsKCkge1xuICAgIHJldHVybiBtb2RhbEZhY3RvcnkoJyNtb2RhbCcpWzBdO1xufVxuXG4vKlxuICogUmV0dXJuIHRoZSBkZWZhdWx0IGFsZXJ0IG1vZGFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhbGVydE1vZGFsKCkge1xuICAgIHJldHVybiBtb2RhbEZhY3RvcnkoJyNhbGVydC1tb2RhbCcpWzBdO1xufVxuXG4vKlxuICogRGlzcGxheSB0aGUgZ2l2ZW4gbWVzc2FnZSBpbiB0aGUgZGVmYXVsdCBhbGVydCBtb2RhbFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2hvd0FsZXJ0TW9kYWwobWVzc2FnZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgbW9kYWwgPSBhbGVydE1vZGFsKCk7XG4gICAgY29uc3QgJGNhbmNlbEJ0biA9IG1vZGFsLiRtb2RhbC5maW5kKCcuY2FuY2VsJyk7XG4gICAgY29uc3QgJGNvbmZpcm1CdG4gPSBtb2RhbC4kbW9kYWwuZmluZCgnLmNvbmZpcm0nKTtcbiAgICBjb25zdCB7XG4gICAgICAgIGljb24gPSAnZXJyb3InLFxuICAgICAgICAkcHJlTW9kYWxGb2N1c2VkRWwgPSBudWxsLFxuICAgICAgICBzaG93Q2FuY2VsQnV0dG9uLFxuICAgICAgICBvbkNvbmZpcm0sXG4gICAgfSA9IG9wdGlvbnM7XG5cbiAgICBpZiAoJHByZU1vZGFsRm9jdXNlZEVsKSB7XG4gICAgICAgIG1vZGFsLiRwcmVNb2RhbEZvY3VzZWRFbCA9ICRwcmVNb2RhbEZvY3VzZWRFbDtcbiAgICB9XG5cbiAgICBtb2RhbC5vcGVuKCk7XG4gICAgbW9kYWwuJG1vZGFsLmZpbmQoJy5hbGVydC1pY29uJykuaGlkZSgpO1xuXG4gICAgaWYgKGljb24gPT09ICdlcnJvcicpIHtcbiAgICAgICAgbW9kYWwuJG1vZGFsLmZpbmQoJy5lcnJvci1pY29uJykuc2hvdygpO1xuICAgIH0gZWxzZSBpZiAoaWNvbiA9PT0gJ3dhcm5pbmcnKSB7XG4gICAgICAgIG1vZGFsLiRtb2RhbC5maW5kKCcud2FybmluZy1pY29uJykuc2hvdygpO1xuICAgIH1cblxuICAgIG1vZGFsLnVwZGF0ZUNvbnRlbnQoYDxzcGFuPiR7bWVzc2FnZX08L3NwYW4+YCk7XG5cbiAgICBpZiAob25Db25maXJtKSB7XG4gICAgICAgICRjb25maXJtQnRuLm9uKCdjbGljaycsIG9uQ29uZmlybSk7XG5cbiAgICAgICAgbW9kYWwuJG1vZGFsLm9uZShNb2RhbEV2ZW50cy5jbG9zZWQsICgpID0+IHtcbiAgICAgICAgICAgICRjb25maXJtQnRuLm9mZignY2xpY2snLCBvbkNvbmZpcm0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoc2hvd0NhbmNlbEJ1dHRvbikge1xuICAgICAgICAkY2FuY2VsQnRuLnNob3coKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAkY2FuY2VsQnRuLmhpZGUoKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHV0aWxzIGZyb20gJ0BiaWdjb21tZXJjZS9zdGVuY2lsLXV0aWxzJztcbmltcG9ydCB1cmxVdGlscyBmcm9tICcuLi9jb21tb24vdXRpbHMvdXJsLXV0aWxzJztcbmltcG9ydCBoYWxvQWRkT3B0aW9uRm9yUHJvZHVjdCBmcm9tICcuLi9oYWxvdGhlbWVzL2hhbG9BZGRPcHRpb25Gb3JQcm9kdWN0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICBjb25zdCBUT1BfU1RZTElORyA9ICd0b3A6IHVuc2V0Oyc7XG4gICAgY29uc3QgJHF1aWNrU2VhcmNoUmVzdWx0cyA9ICQoJy5xdWlja1NlYXJjaFJlc3VsdHMnKTtcbiAgICBjb25zdCAkcXVpY2tTZWFyY2hSZXN1bHRzQ3VzdG9tID0gJCgnLnF1aWNrU2VhcmNoUmVzdWx0c0N1c3RvbScpO1xuICAgIGNvbnN0ICRxdWlja1NlYXJjaEZvcm1zID0gJCgnW2RhdGEtcXVpY2stc2VhcmNoLWZvcm1dJyk7XG4gICAgY29uc3QgJHNlYXJjaFF1ZXJ5ID0gJHF1aWNrU2VhcmNoRm9ybXMuZmluZCgnW2RhdGEtc2VhcmNoLXF1aWNrXScpO1xuICAgIGNvbnN0ICRzZWFyY2hCdG5CWUwgPSAkKCdbZGF0YS1zZWFyY2gtbGVhdmVdJylcbiAgICBjb25zdCAkc2VhcmNoUXVlcnkyID0gJCgnI3NlYXJjaF9xdWVyeTInKTtcbiAgICBjb25zdCAkc2VhcmNoQnRuTW9iaWxlID0gJCgnLml0ZW0tLXNlYXJjaE1vYmlsZSBbZGF0YS1zZWFyY2hdJyk7XG4gICAgY29uc3QgJHNlYXJjaElucHV0TW9iaWxlID0gJCgnW2RhdGEtcXVpY2stc2VhcmNoLWZvcm1dIFtkYXRhLXNlYXJjaC1xdWlja10nKTtcbiAgICBjb25zdCAkc2VhcmNoQ29udGVudE1vYmlsZSA9ICQoJyNoYWxvLXNlYXJjaC1zaWRlYmFyIC5oYWxvLXNpZGViYXItY29udGVudCcpO1xuICAgIGNvbnN0ICRzZWFyY2hNb2JpbGVDbG9zZSA9ICQoJyNoYWxvLXNlYXJjaC1zaWRlYmFyIC5oYWxvLXNpZGViYXItaGVhZGVyIC5jbG9zZScpO1xuXG4gICAgJChkb2N1bWVudCkub24oJ2NsaWNrJywgJy5pdGVtLS1zZWFyY2hNb2JpbGUgW2RhdGEtc2VhcmNoXScsIGV2ZW50ID0+IHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLnRvZ2dsZUNsYXNzKCdpcy1vcGVuJyk7XG4gICAgICAgICQoJ2JvZHknKS5hZGRDbGFzcygnb3BlblNlYXJjaE1vYmlsZScpO1xuICAgICAgICBpZigkKCdib2R5JykuaGFzQ2xhc3MoJ29wZW5TZWFyY2hNb2JpbGUnKSl7XG4gICAgICAgICAgICAkKCcuaGFsby1ib3R0b21IZWFkZXIgLnF1aWNrU2VhcmNoUmVzdWx0cycpLmFwcGVuZFRvKCRzZWFyY2hDb250ZW50TW9iaWxlKTtcbiAgICAgICAgICAgICQoJy5oYWxvLWJvdHRvbUhlYWRlciAucXVpY2tTZWFyY2hSZXN1bHRzQ3VzdG9tJykuYXBwZW5kVG8oJHNlYXJjaENvbnRlbnRNb2JpbGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgJHF1aWNrU2VhcmNoUmVzdWx0cy5lbXB0eSgpLnJlbW92ZUNsYXNzKCdpcy1vcGVuJyk7XG4gICAgICAgICRxdWlja1NlYXJjaFJlc3VsdHNDdXN0b20uYWRkQ2xhc3MoJ2lzLW9wZW4nKTtcbiAgICAgICAgJCgnYm9keScpLmFkZENsYXNzKCdvcGVuUXVpY2tTZWFyY2gnKTtcblxuICAgICAgICB2YXIgbGlzdElEcyA9IGNvbnRleHQudGhlbWVTZXR0aW5ncy5xdWlja1NlYXJjaFBvcHVsYXJJZC5zcGxpdCgnLCcpLFxuICAgICAgICAgICAgbGlzdElEID0gbGlzdElEcy5zbGljZSgwLHBhcnNlSW50KGNvbnRleHQudGhlbWVTZXR0aW5ncy5xdWlja1NlYXJjaFJlc3VsdExpbWl0KSk7XG5cbiAgICAgICAgY29uc3QgJG9wdGlvbnMgPSB7XG4gICAgICAgICAgICB0ZW1wbGF0ZTogJ2hhbG90aGVtZXMvc2VhcmNoL2hhbG8tcXVpY2stcmVzdWx0cy10bXAnXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYoISRxdWlja1NlYXJjaFJlc3VsdHNDdXN0b20uZmluZCgnLnByb2R1Y3RHcmlkIC5wcm9kdWN0JykubGVuZ3RoKXtcbiAgICAgICAgICAgIHZhciBudW0gPSAwO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8PSBsaXN0SUQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgJHByb2RJZCA9IGxpc3RJRFtpXTtcbiAgICAgICAgICAgICAgICBpZigkcHJvZElkICE9IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICAgICAgICAgIHV0aWxzLmFwaS5wcm9kdWN0LmdldEJ5SWQoJHByb2RJZCwgJG9wdGlvbnMsIChlcnIsIHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZihlcnIpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhhc1Byb2QgPSAkKHJlc3BvbnNlKS5maW5kKCcuY2FyZCcpLmRhdGEoJ3Byb2R1Y3QtaWQnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoaGFzUHJvZCAhPSB1bmRlZmluZWQgJiYgaGFzUHJvZCAhPT0gbnVsbCAmJiBoYXNQcm9kICE9PSAnJyl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJHF1aWNrU2VhcmNoUmVzdWx0c0N1c3RvbS5maW5kKCcucHJvZHVjdEdyaWQgLnByb2R1Y3QnKS5sZW5ndGggPCBsaXN0SUQubGVuZ3RoKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHF1aWNrU2VhcmNoUmVzdWx0c0N1c3RvbS5maW5kKCcucHJvZHVjdEdyaWQnKS5hcHBlbmQocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcXVpY2tTZWFyY2hSZXN1bHRzQ3VzdG9tLmZpbmQoJy5wcm9kdWN0R3JpZCAucHJvZHVjdC1zYW1wbGUnKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIG51bSsrO1xuICAgICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgICRzZWFyY2hNb2JpbGVDbG9zZS5vbignY2xpY2snLCBldmVudCA9PiB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIFxuICAgICAgICAkc2VhcmNoQnRuTW9iaWxlLnJlbW92ZUNsYXNzKCdpcy1vcGVuJyk7XG4gICAgICAgICQoJ2JvZHknKS5yZW1vdmVDbGFzcygnb3BlblNlYXJjaE1vYmlsZScpLnJlbW92ZUNsYXNzKCdvcGVuUXVpY2tTZWFyY2gnKTtcblxuICAgICAgICBpZighY29udGV4dC50aGVtZVNldHRpbmdzLmhhbG9faGVhZGVyX2xheW91dCA9PSAnaGVhZGVyX2xheW91dF8zJyAmJiAhY29udGV4dC50aGVtZVNldHRpbmdzLmhhbG9faGVhZGVyX2xheW91dCA9PSAnaGVhZGVyX2xheW91dF80Jykge1xuICAgICAgICAgICAgJHNlYXJjaENvbnRlbnRNb2JpbGUuZmluZCgnLnF1aWNrU2VhcmNoUmVzdWx0cycpLmFwcGVuZFRvKCcuaGFsby1ib3R0b21IZWFkZXIgLmNvbnRhaW5lcicpO1xuICAgICAgICAgICAgJHNlYXJjaENvbnRlbnRNb2JpbGUuZmluZCgnLnF1aWNrU2VhcmNoUmVzdWx0c0N1c3RvbScpLmFwcGVuZFRvKCcuaGFsby1ib3R0b21IZWFkZXIgLmNvbnRhaW5lcicpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAkKGRvY3VtZW50KS5vbignY2xpY2snLCBldmVudCA9PiB7XG4gICAgICAgIGlmICgkKCdib2R5JykuaGFzQ2xhc3MoJ29wZW5TZWFyY2hNb2JpbGUnKSkge1xuICAgICAgICAgICAgaWYgKCgkKGV2ZW50LnRhcmdldCkuY2xvc2VzdCgnLml0ZW0tLXNlYXJjaE1vYmlsZSBbZGF0YS1zZWFyY2hdJykubGVuZ3RoID09PSAwKSAmJiAoJChldmVudC50YXJnZXQpLmNsb3Nlc3QoJyNoYWxvLXNlYXJjaC1zaWRlYmFyJykubGVuZ3RoID09PSAwKSl7XG4gICAgICAgICAgICAgICAgJCgnYm9keScpLnJlbW92ZUNsYXNzKCdvcGVuU2VhcmNoTW9iaWxlJykucmVtb3ZlQ2xhc3MoJ29wZW5RdWlja1NlYXJjaCcpO1xuXG4gICAgICAgICAgICAgICAgJHNlYXJjaENvbnRlbnRNb2JpbGUuZmluZCgnLnF1aWNrU2VhcmNoUmVzdWx0cycpLmFwcGVuZFRvKCcuaGFsby1ib3R0b21IZWFkZXIgLmNvbnRhaW5lcicpO1xuICAgICAgICAgICAgICAgICRzZWFyY2hDb250ZW50TW9iaWxlLmZpbmQoJy5xdWlja1NlYXJjaFJlc3VsdHNDdXN0b20nKS5hcHBlbmRUbygnLmhhbG8tYm90dG9tSGVhZGVyIC5jb250YWluZXInKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgJChkb2N1bWVudCkub24oJ2NsaWNrJywgJy5xdWlja1Jlc3VsdHMtY2xvc2UnLCAoZSkgPT4ge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgaWYgKCQoJ2JvZHknKS5oYXNDbGFzcygnb3BlblF1aWNrU2VhcmNoJykpIHtcbiAgICAgICAgICAgICRxdWlja1NlYXJjaFJlc3VsdHMucmVtb3ZlQ2xhc3MoJ2lzLW9wZW4nKTtcbiAgICAgICAgICAgICRxdWlja1NlYXJjaFJlc3VsdHNDdXN0b20ucmVtb3ZlQ2xhc3MoJ2lzLW9wZW4nKTtcbiAgICAgICAgICAgICQoJ2JvZHknKS5yZW1vdmVDbGFzcygnb3BlblF1aWNrU2VhcmNoJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoJCgnYm9keScpLmhhc0NsYXNzKCdvcGVuU2VhcmNoTW9iaWxlJykpIHtcbiAgICAgICAgICAgICQoJ2JvZHknKS5yZW1vdmVDbGFzcygnb3BlblNlYXJjaE1vYmlsZScpO1xuICAgICAgICB9XG4gICAgfSk7XG5cblxuICAgIGlmKCFjb250ZXh0LnRoZW1lU2V0dGluZ3MuaGFsb19oZWFkZXJfbGF5b3V0ID09ICdoZWFkZXJfbGF5b3V0XzMnICYmICFjb250ZXh0LnRoZW1lU2V0dGluZ3MuaGFsb19oZWFkZXJfbGF5b3V0ID09ICdoZWFkZXJfbGF5b3V0XzQnKSB7XG4gICAgICAgIGlmICgkKHdpbmRvdykud2lkdGgoKSA+IDEwMjQpIHtcbiAgICAgICAgICAgICQoZG9jdW1lbnQpLm9uKCdjbGljaycsIGV2ZW50ID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoKCQoZXZlbnQudGFyZ2V0KS5jbG9zZXN0KCdbZGF0YS1wcmV2ZW50LXF1aWNrLXNlYXJjaC1jbG9zZV0nKS5sZW5ndGggPT09IDApICYmICgkKGV2ZW50LnRhcmdldCkuY2xvc2VzdCgnLmJlZm9yZS15b3UtbGVhdmUtc2VhcmNoJykubGVuZ3RoID09PSAwKSkgIHtcbiAgICAgICAgICAgICAgICAgICAgJHF1aWNrU2VhcmNoUmVzdWx0cy5yZW1vdmVDbGFzcygnaXMtb3BlbicpO1xuICAgICAgICAgICAgICAgICAgICAkcXVpY2tTZWFyY2hSZXN1bHRzQ3VzdG9tLnJlbW92ZUNsYXNzKCdpcy1vcGVuJyk7XG4gICAgICAgICAgICAgICAgICAgICQoJ2JvZHknKS5yZW1vdmVDbGFzcygnb3BlblF1aWNrU2VhcmNoJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBzdGFnZ2VyIHNlYXJjaGluZyBmb3IgMjAwbXMgYWZ0ZXIgbGFzdCBpbnB1dFxuICAgIGNvbnN0IGRlYm91bmNlV2FpdFRpbWUgPSAxMjAwO1xuICAgIGNvbnN0IGRvU2VhcmNoID0gXy5kZWJvdW5jZSgoc2VhcmNoUXVlcnkpID0+IHtcbiAgICAgICAgdXRpbHMuYXBpLnNlYXJjaC5zZWFyY2goc2VhcmNoUXVlcnksIHsgdGVtcGxhdGU6ICdzZWFyY2gvcXVpY2stcmVzdWx0cycgfSwgKGVyciwgcmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICRxdWlja1NlYXJjaFJlc3VsdHNDdXN0b20ucmVtb3ZlQ2xhc3MoJ2lzLW9wZW4nKTtcbiAgICAgICAgICAgICRxdWlja1NlYXJjaFJlc3VsdHMuaHRtbChyZXNwb25zZSkuYWRkQ2xhc3MoJ2lzLW9wZW4nKTtcblxuICAgICAgICAgICAgaWYgKCQod2luZG93KS53aWR0aCgpID4gMTAyNCkge1xuICAgICAgICAgICAgICAgIGlmKCRxdWlja1NlYXJjaFJlc3VsdHMuZmluZCgnLnByb2R1Y3QnKS5sZW5ndGggPiA1KXtcbiAgICAgICAgICAgICAgICAgICAgJHF1aWNrU2VhcmNoUmVzdWx0cy5maW5kKCcucHJvZHVjdEdyaWQnKS5zbGljayh7XG4gICAgICAgICAgICAgICAgICAgICAgICBkb3RzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycm93czogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZmluaXRlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vYmlsZUZpcnN0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiA1LFxuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDVcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgJGJsb2NrSWQgPSAncXVpY2tSZXN1bHRzLXByb2R1Y3QyJztcbiAgICAgICAgICAgIGhhbG9BZGRPcHRpb25Gb3JQcm9kdWN0KGNvbnRleHQsICRibG9ja0lkKTtcbiAgICAgICAgfSk7XG4gICAgfSwgZGVib3VuY2VXYWl0VGltZSk7XG5cbiAgICB1dGlscy5ob29rcy5vbignc2VhcmNoLXF1aWNrJywgKGV2ZW50LCBjdXJyZW50VGFyZ2V0KSA9PiB7XG4gICAgICAgIGNvbnN0IHNlYXJjaFF1ZXJ5ID0gJChjdXJyZW50VGFyZ2V0KS52YWwoKTtcblxuICAgICAgICAvLyBzZXJ2ZXIgd2lsbCBvbmx5IHBlcmZvcm0gc2VhcmNoIHdpdGggYXQgbGVhc3QgMyBjaGFyYWN0ZXJzXG4gICAgICAgIGlmIChzZWFyY2hRdWVyeS5sZW5ndGggPCAzKSB7XG4gICAgICAgICAgICAkcXVpY2tTZWFyY2hSZXN1bHRzLnJlbW92ZUNsYXNzKCdpcy1vcGVuJyk7XG4gICAgICAgICAgICAkcXVpY2tTZWFyY2hSZXN1bHRzQ3VzdG9tLmFkZENsYXNzKCdpcy1vcGVuJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBkb1NlYXJjaChzZWFyY2hRdWVyeSk7XG4gICAgfSk7XG5cbiAgICAvLyBDYXRjaCB0aGUgc3VibWlzc2lvbiBvZiB0aGUgcXVpY2stc2VhcmNoIGZvcm1zXG4gICAgJHF1aWNrU2VhcmNoRm9ybXMub24oJ3N1Ym1pdCcsIGV2ZW50ID0+IHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICBjb25zdCAkdGFyZ2V0ID0gJChldmVudC5jdXJyZW50VGFyZ2V0KTtcbiAgICAgICAgY29uc3Qgc2VhcmNoUXVlcnkgPSAkdGFyZ2V0LmZpbmQoJ2lucHV0JykudmFsKCk7XG4gICAgICAgIGNvbnN0IHNlYXJjaFVybCA9ICR0YXJnZXQuZGF0YSgndXJsJyk7XG5cbiAgICAgICAgaWYgKHNlYXJjaFF1ZXJ5Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdXJsVXRpbHMuZ29Ub1VybChgJHtzZWFyY2hVcmx9P3NlYXJjaF9xdWVyeT0ke3NlYXJjaFF1ZXJ5fWApO1xuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG4gICAgfSk7XG5cbiAgICAkc2VhcmNoUXVlcnkub24oJ2NsaWNrJywgZXZlbnQgPT4ge1xuICAgICAgICAkcXVpY2tTZWFyY2hSZXN1bHRzLmVtcHR5KCkucmVtb3ZlQ2xhc3MoJ2lzLW9wZW4nKTtcbiAgICAgICAgJHF1aWNrU2VhcmNoUmVzdWx0c0N1c3RvbS5hZGRDbGFzcygnaXMtb3BlbicpO1xuICAgICAgICAkKCdib2R5JykuYWRkQ2xhc3MoJ29wZW5RdWlja1NlYXJjaCcpO1xuXG4gICAgICAgIHZhciBsaXN0SURzID0gY29udGV4dC50aGVtZVNldHRpbmdzLnF1aWNrU2VhcmNoUG9wdWxhcklkLnNwbGl0KCcsJyksXG4gICAgICAgICAgICBsaXN0SUQgPSBsaXN0SURzLnNsaWNlKDAscGFyc2VJbnQoY29udGV4dC50aGVtZVNldHRpbmdzLnF1aWNrU2VhcmNoUmVzdWx0TGltaXQpKTtcblxuICAgICAgICBjb25zdCAkb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHRlbXBsYXRlOiAnaGFsb3RoZW1lcy9zZWFyY2gvaGFsby1xdWljay1yZXN1bHRzLXRtcCdcbiAgICAgICAgfTtcblxuICAgICAgICBpZighJHF1aWNrU2VhcmNoUmVzdWx0c0N1c3RvbS5maW5kKCcucHJvZHVjdEdyaWQgLnByb2R1Y3QnKS5sZW5ndGgpe1xuICAgICAgICAgICAgdmFyIG51bSA9IDA7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDw9IGxpc3RJRC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciAkcHJvZElkID0gbGlzdElEW2ldO1xuICAgICAgICAgICAgICAgIGlmKCRwcm9kSWQgIT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICAgICAgICAgICAgdXRpbHMuYXBpLnByb2R1Y3QuZ2V0QnlJZCgkcHJvZElkLCAkb3B0aW9ucywgKGVyciwgcmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGVycil7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaGFzUHJvZCA9ICQocmVzcG9uc2UpLmZpbmQoJy5jYXJkJykuZGF0YSgncHJvZHVjdC1pZCcpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihoYXNQcm9kICE9IHVuZGVmaW5lZCAmJiBoYXNQcm9kICE9PSBudWxsICYmIGhhc1Byb2QgIT09ICcnKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigkcXVpY2tTZWFyY2hSZXN1bHRzQ3VzdG9tLmZpbmQoJy5wcm9kdWN0R3JpZCAucHJvZHVjdCcpLmxlbmd0aCA8IGxpc3RJRC5sZW5ndGgpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcXVpY2tTZWFyY2hSZXN1bHRzQ3VzdG9tLmZpbmQoJy5wcm9kdWN0R3JpZCcpLmFwcGVuZChyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRxdWlja1NlYXJjaFJlc3VsdHNDdXN0b20uZmluZCgnLnByb2R1Y3RHcmlkIC5wcm9kdWN0LXNhbXBsZScpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgbnVtKys7XG4gICAgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgJHNlYXJjaEJ0bkJZTC5vbignY2xpY2snLCBldmVudCA9PiB7XG4gICAgICAgICRzZWFyY2hRdWVyeTIudHJpZ2dlcignY2xpY2snKTtcbiAgICAgICAgJHF1aWNrU2VhcmNoUmVzdWx0cy5lbXB0eSgpLnJlbW92ZUNsYXNzKCdpcy1vcGVuJyk7XG4gICAgICAgICRxdWlja1NlYXJjaFJlc3VsdHNDdXN0b20uYWRkQ2xhc3MoJ2lzLW9wZW4nKTtcblxuICAgICAgICB2YXIgbGlzdElEcyA9IGNvbnRleHQudGhlbWVTZXR0aW5ncy5xdWlja1NlYXJjaFBvcHVsYXJJZC5zcGxpdCgnLCcpLFxuICAgICAgICAgICAgbGlzdElEID0gbGlzdElEcy5zbGljZSgwLHBhcnNlSW50KGNvbnRleHQudGhlbWVTZXR0aW5ncy5xdWlja1NlYXJjaFJlc3VsdExpbWl0KSk7XG5cbiAgICAgICAgY29uc3QgJG9wdGlvbnMgPSB7XG4gICAgICAgICAgICB0ZW1wbGF0ZTogJ2hhbG90aGVtZXMvc2VhcmNoL2hhbG8tcXVpY2stcmVzdWx0cy10bXAnXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYoISRxdWlja1NlYXJjaFJlc3VsdHNDdXN0b20uZmluZCgnLnByb2R1Y3RHcmlkIC5wcm9kdWN0JykubGVuZ3RoKXtcbiAgICAgICAgICAgIHZhciBudW0gPSAwO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8PSBsaXN0SUQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgJHByb2RJZCA9IGxpc3RJRFtpXTtcbiAgICAgICAgICAgICAgICBpZigkcHJvZElkICE9IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICAgICAgICAgIHV0aWxzLmFwaS5wcm9kdWN0LmdldEJ5SWQoJHByb2RJZCwgJG9wdGlvbnMsIChlcnIsIHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZihlcnIpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhhc1Byb2QgPSAkKHJlc3BvbnNlKS5maW5kKCcuY2FyZCcpLmRhdGEoJ3Byb2R1Y3QtaWQnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoaGFzUHJvZCAhPSB1bmRlZmluZWQgJiYgaGFzUHJvZCAhPT0gbnVsbCAmJiBoYXNQcm9kICE9PSAnJyl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJHF1aWNrU2VhcmNoUmVzdWx0c0N1c3RvbS5maW5kKCcucHJvZHVjdEdyaWQgLnByb2R1Y3QnKS5sZW5ndGggPCBsaXN0SUQubGVuZ3RoKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHF1aWNrU2VhcmNoUmVzdWx0c0N1c3RvbS5maW5kKCcucHJvZHVjdEdyaWQnKS5hcHBlbmQocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcXVpY2tTZWFyY2hSZXN1bHRzQ3VzdG9tLmZpbmQoJy5wcm9kdWN0R3JpZCAucHJvZHVjdC1zYW1wbGUnKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIG51bSsrO1xuICAgICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbiIsImltcG9ydCAnZm91bmRhdGlvbi1zaXRlcy9qcy9mb3VuZGF0aW9uL2ZvdW5kYXRpb24nO1xuaW1wb3J0ICdmb3VuZGF0aW9uLXNpdGVzL2pzL2ZvdW5kYXRpb24vZm91bmRhdGlvbi5kcm9wZG93bic7XG5pbXBvcnQgdXRpbHMgZnJvbSAnQGJpZ2NvbW1lcmNlL3N0ZW5jaWwtdXRpbHMnO1xuaW1wb3J0IFByb2R1Y3REZXRhaWxzIGZyb20gJy4uL2NvbW1vbi9wcm9kdWN0LWRldGFpbHMnO1xuaW1wb3J0IHsgZGVmYXVsdE1vZGFsLCBNb2RhbEV2ZW50cyB9IGZyb20gJy4vbW9kYWwnO1xuaW1wb3J0ICdzbGljay1jYXJvdXNlbCc7XG5pbXBvcnQgeyBzZXRDYXJvdXNlbFN0YXRlLCBvblNsaWNrQ2Fyb3VzZWxDaGFuZ2UsIG9uVXNlckNhcm91c2VsQ2hhbmdlIH0gZnJvbSAnLi4vY29tbW9uL2Nhcm91c2VsJztcbmltcG9ydCBoYWxvTm90aWZ5TWUgZnJvbSAnLi4vaGFsb3RoZW1lcy9oYWxvTm90aWZ5TWUnO1xuaW1wb3J0IGhhbG9Zb3V0dWJlQ2Fyb3VzZWwgZnJvbSAnLi4vaGFsb3RoZW1lcy9oYWxvWW91dHViZVZpZGVvJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICBjb25zdCBtb2RhbCA9IGRlZmF1bHRNb2RhbCgpO1xuXG4gICAgJCgnYm9keScpLm9uKCdjbGljaycsICcucXVpY2t2aWV3JywgZXZlbnQgPT4ge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgIGNvbnN0IHByb2R1Y3RJZCA9ICQoZXZlbnQuY3VycmVudFRhcmdldCkuZGF0YSgncHJvZHVjdElkJyk7XG5cbiAgICAgICAgbW9kYWwub3Blbih7IHNpemU6ICdsYXJnZScgfSk7XG5cbiAgICAgICAgdXRpbHMuYXBpLnByb2R1Y3QuZ2V0QnlJZChwcm9kdWN0SWQsIHsgdGVtcGxhdGU6ICdwcm9kdWN0cy9xdWljay12aWV3JyB9LCAoZXJyLCByZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgaWYgKGVycikgcmV0dXJuO1xuXG4gICAgICAgICAgICBtb2RhbC51cGRhdGVDb250ZW50KHJlc3BvbnNlKTtcblxuICAgICAgICAgICAgbW9kYWwuJGNvbnRlbnQuZmluZCgnLnByb2R1Y3RWaWV3JykuYWRkQ2xhc3MoJ3Byb2R1Y3RWaWV3LS1xdWlja1ZpZXcnKTtcblxuICAgICAgICAgICAgc29sZFByb2R1Y3QobW9kYWwuJGNvbnRlbnQuZmluZCgnLnByb2R1Y3RWaWV3LXNvbGRQcm9kdWN0JyksIGNvbnRleHQpO1xuICAgICAgICAgICAgdmlld2luZ1Byb2R1Y3QobW9kYWwuJGNvbnRlbnQuZmluZCgnLnByb2R1Y3RWaWV3LVZpZXdpbmdQcm9kdWN0JyksIGNvbnRleHQpO1xuICAgICAgICAgICAgY291bnREb3duUHJvZHVjdChtb2RhbC4kY29udGVudC5maW5kKCcucHJvZHVjdFZpZXctY291bnREb3duJykpO1xuICAgICAgICAgICAgcHJvZHVjdFZpZXdTaGFyZUxpbmsoKTtcblxuICAgICAgICAgICAgY29uc3QgJGNhcm91c2VsID0gbW9kYWwuJGNvbnRlbnQuZmluZCgnW2RhdGEtc2xpY2tdJyk7XG4gICAgICAgICAgICBpZiAoJGNhcm91c2VsLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICRjYXJvdXNlbC5vbignaW5pdCBicmVha3BvaW50IHN3aXBlJywgc2V0Q2Fyb3VzZWxTdGF0ZSk7XG4gICAgICAgICAgICAgICAgJGNhcm91c2VsLm9uKCdjbGljaycsICcuc2xpY2stYXJyb3csIC5zbGljay1kb3RzJywgc2V0Q2Fyb3VzZWxTdGF0ZSk7XG5cbiAgICAgICAgICAgICAgICAkY2Fyb3VzZWwub24oJ2luaXQgYWZ0ZXJDaGFuZ2UnLCAoZSwgY2Fyb3VzZWxPYmopID0+IG9uU2xpY2tDYXJvdXNlbENoYW5nZShlLCBjYXJvdXNlbE9iaiwgY29udGV4dCkpO1xuICAgICAgICAgICAgICAgICRjYXJvdXNlbC5vbignY2xpY2snLCAnLnNsaWNrLWFycm93LCAuc2xpY2stZG90cycsICRjYXJvdXNlbCwgZSA9PiBvblVzZXJDYXJvdXNlbENoYW5nZShlLCBjb250ZXh0KSk7XG4gICAgICAgICAgICAgICAgJGNhcm91c2VsLm9uKCdzd2lwZScsIChlLCBjYXJvdXNlbE9iaikgPT4gb25Vc2VyQ2Fyb3VzZWxDaGFuZ2UoZSwgY29udGV4dCwgY2Fyb3VzZWxPYmouJHNsaWRlcikpO1xuXG4gICAgICAgICAgICAgICAgaWYgKG1vZGFsLiRtb2RhbC5oYXNDbGFzcygnb3BlbicpKSB7XG4gICAgICAgICAgICAgICAgICAgICRjYXJvdXNlbC5zbGljaygpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG1vZGFsLiRtb2RhbC5vbmUoTW9kYWxFdmVudHMub3BlbmVkLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJC5jb250YWlucyhkb2N1bWVudCwgJGNhcm91c2VsWzBdKSkgJGNhcm91c2VsLnNsaWNrKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaGFsb05vdGlmeU1lKCQoJy5oYWxvLXF1aWNrVmlldycpLCBjb250ZXh0KTtcbiAgICAgICAgICAgIGhhbG9Zb3V0dWJlQ2Fyb3VzZWwobW9kYWwuJGNvbnRlbnQuZmluZCgnW2RhdGEtc2xpY2tdJykpO1xuXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb2R1Y3REZXRhaWxzKG1vZGFsLiRjb250ZW50LmZpbmQoJy5xdWlja1ZpZXcnKSwgY29udGV4dCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBzb2xkUHJvZHVjdCgkd3JhcHBlciwgY29udGV4dCkge1xuICAgIGlmKCR3cmFwcGVyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdmFyIG51bWJlcnNQcm9kdWN0X3RleHQgPSBjb250ZXh0LnRoZW1lU2V0dGluZ3MucHJvZHVjdF9zb2xkUHJvZHVjdF9wcm9kdWN0cyxcbiAgICAgICAgICAgIG51bWJlcnNIb3Vyc190ZXh0ID0gY29udGV4dC50aGVtZVNldHRpbmdzLnByb2R1Y3Rfc29sZFByb2R1Y3RfaG91cnMsXG4gICAgICAgICAgICBzb2xkUHJvZHVjdFRleHQgPSBjb250ZXh0LnRoZW1lU2V0dGluZ3MucHJvZHVjdF9zb2xkUHJvZHVjdF90ZXh0LFxuICAgICAgICAgICAgc29sZFByb2R1Y3RUZXh0MiA9IGNvbnRleHQudGhlbWVTZXR0aW5ncy5wcm9kdWN0X3NvbGRQcm9kdWN0X2hvdXJzX3RleHQ7XG5cbiAgICAgICAgdmFyIG51bWJlcnNQcm9kdWN0TGlzdCA9ICBKU09OLnBhcnNlKFwiW1wiICsgbnVtYmVyc1Byb2R1Y3RfdGV4dCArIFwiXVwiKSwgXG4gICAgICAgICAgICBudW1iZXJzUHJvZHVjdEl0ZW0gPSAoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKm51bWJlcnNQcm9kdWN0TGlzdC5sZW5ndGgpKSxcbiAgICAgICAgICAgIG51bWJlcnNIb3Vyc0xpc3QgPSAgSlNPTi5wYXJzZShcIltcIiArIG51bWJlcnNIb3Vyc190ZXh0ICsgXCJdXCIpLFxuICAgICAgICAgICAgbnVtYmVyc0hvdXJzSXRlbSA9IChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqbnVtYmVyc0hvdXJzTGlzdC5sZW5ndGgpKTtcbiAgICAgXG4gICAgICAgICR3cmFwcGVyLmh0bWwoJzxzdmcgY2xhc3M9XCJpY29uXCI+PHVzZSB4bGluazpocmVmPVwiI2ljb24tZmlyZVwiLz48L3N2Zz48c3BhbiBjbGFzcz1cInRleHRcIj4nICsgbnVtYmVyc1Byb2R1Y3RMaXN0W251bWJlcnNQcm9kdWN0SXRlbV0gKyBcIiBcIiArIHNvbGRQcm9kdWN0VGV4dCArIFwiIFwiICsgbnVtYmVyc0hvdXJzTGlzdFtudW1iZXJzSG91cnNJdGVtXSArIFwiIFwiICsgc29sZFByb2R1Y3RUZXh0MiArICc8L3NwYW4+Jyk7XG4gICAgICAgICR3cmFwcGVyLnNob3coKTtcbiAgICB9XG59XG5cbiBmdW5jdGlvbiBjb3VudERvd25Qcm9kdWN0KCR3cmFwcGVyKSB7XG4gICAgaWYoJHdyYXBwZXIubGVuZ3RoID4gMCkge1xuICAgICAgICB2YXIgY291bnREb3duID0gJHdyYXBwZXIuZGF0YSgnY291bnRkb3duJyksXG4gICAgICAgICAgICBjb3VudERvd25EYXRlID0gbmV3IERhdGUoY291bnREb3duKS5nZXRUaW1lKCksXG4gICAgICAgICAgICBzZWZ0ID0gJHdyYXBwZXI7XG5cbiAgICAgICAgdmFyIGNvdW50ZG93bmZ1bmN0aW9uID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgbm93ID0gbmV3IERhdGUoKS5nZXRUaW1lKCksXG4gICAgICAgICAgICAgICAgZGlzdGFuY2UgPSBjb3VudERvd25EYXRlIC0gbm93O1xuXG4gICAgICAgICAgICBpZiAoZGlzdGFuY2UgPCAwKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChjb3VudGRvd25mdW5jdGlvbik7XG4gICAgICAgICAgICAgICAgc2VmdC5yZW1vdmUoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIGRheXMgPSBNYXRoLmZsb29yKGRpc3RhbmNlIC8gKDEwMDAgKiA2MCAqIDYwICogMjQpKSxcbiAgICAgICAgICAgICAgICAgICAgaG91cnMgPSBNYXRoLmZsb29yKChkaXN0YW5jZSAlICgxMDAwICogNjAgKiA2MCAqIDI0KSkgLyAoMTAwMCAqIDYwICogNjApKSxcbiAgICAgICAgICAgICAgICAgICAgbWludXRlcyA9IE1hdGguZmxvb3IoKGRpc3RhbmNlICUgKDEwMDAgKiA2MCAqIDYwKSkgLyAoMTAwMCAqIDYwKSksXG4gICAgICAgICAgICAgICAgICAgIHNlY29uZHMgPSBNYXRoLmZsb29yKChkaXN0YW5jZSAlICgxMDAwICogNjApKSAvIDEwMDApLFxuICAgICAgICAgICAgICAgICAgICBzdHJDb3VudERvd24gPSAnPHN2ZyBjbGFzcz1cImljb25cIj48dXNlIHhsaW5rOmhyZWY9XCIjaWNvbi1iZWxsXCIvPjwvc3ZnPjxzcGFuIGNsYXNzPVwidGV4dFwiPjxzcGFuPkxpbWl0ZWQtdGltZSBvZmZlcnM6PC9zcGFuPjwvc3Bhbj4gPHNwYW4gY2xhc3M9XCJudW1cIj4nK2RheXMrJ2QgOjwvc3Bhbj4gPHNwYW4gY2xhc3M9XCJudW1cIj4nK2hvdXJzKydoIDo8L3NwYW4+IDxzcGFuIGNsYXNzPVwibnVtXCI+JyttaW51dGVzKydtIDo8L3NwYW4+IDxzcGFuIGNsYXNzPVwibnVtXCI+JytzZWNvbmRzKydzPC9zcGFuPic7XG5cbiAgICAgICAgICAgICAgICBzZWZ0Lmh0bWwoc3RyQ291bnREb3duKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgMTAwMCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiB2aWV3aW5nUHJvZHVjdCgkd3JhcHBlciwgY29udGV4dCkge1xuICAgIGlmKCR3cmFwcGVyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdmFyIHZpZXdlclRleHQgPSBjb250ZXh0LnRoZW1lU2V0dGluZ3MucHJvZHVjdF92aWV3aW5nUHJvZHVjdF90ZXh0LFxuICAgICAgICAgICAgbnVtYmVyc1ZpZXdlcl90ZXh0ID0gY29udGV4dC50aGVtZVNldHRpbmdzLnByb2R1Y3Rfdmlld2luZ1Byb2R1Y3Rfdmlld2VyLFxuICAgICAgICAgICAgbnVtYmVyc1ZpZXdlckxpc3QgPSAgSlNPTi5wYXJzZShcIltcIiArIG51bWJlcnNWaWV3ZXJfdGV4dCArIFwiXVwiKSxcbiAgICAgICAgICAgIHRpbWVWaWV3ZXIgPSAgcGFyc2VJbnQoY29udGV4dC50aGVtZVNldHRpbmdzLnByb2R1Y3Rfdmlld2luZ1Byb2R1Y3RfY2hhbmdlKSoxMDAwOyBcbiAgICAgICAgXG4gICAgICAgIHNldEludGVydmFsKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIG51bWJlcnNWaWV3ZXJJdGVtID0gKE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSpudW1iZXJzVmlld2VyTGlzdC5sZW5ndGgpKTtcblxuICAgICAgICAgICAgJHdyYXBwZXIuaHRtbCgnPHN2ZyBjbGFzcz1cImljb25cIj48dXNlIHhsaW5rOmhyZWY9XCIjaWNvbi1leWVcIi8+PC9zdmc+JyArIG51bWJlcnNWaWV3ZXJMaXN0W251bWJlcnNWaWV3ZXJJdGVtXSArIFwiIFwiICsgdmlld2VyVGV4dCk7XG4gICAgICAgIH0sIHRpbWVWaWV3ZXIpOyAgXG4gICAgfVxufVxuXG5mdW5jdGlvbiBwcm9kdWN0Vmlld1NoYXJlTGluaygpIHtcbiAgICBjb25zdCAkc2hhcmVMaW5rQnRuID0gJCgnLmhhbG8tcXVpY2tWaWV3IC5zaGFyZUxpbmtTb2NpYWxfX2J1dHRvbicpO1xuICAgIGNvbnN0ICRzaGFyZUxpbmtQb3B1cCA9ICQoJy5oYWxvLXF1aWNrVmlldyAuc2hhcmVMaW5rU29jaWFsX19wb3B1cCcpO1xuICAgIGNvbnN0ICRzaGFyZUxpbmtDbG9zZSA9ICQoJy5oYWxvLXF1aWNrVmlldyAuc2hhcmVMaW5rU29jaWFsX19jbG9zZScpO1xuICAgIGNvbnN0ICRzaGFyZUxpbmtDb3B5ID0gJCgnLmhhbG8tcXVpY2tWaWV3ICNzaGFyZUxpbmtTb2NpYWxfX2NvcHknKTtcblxuICAgICRzaGFyZUxpbmtCdG4ub24oJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgIGlmICgkc2hhcmVMaW5rUG9wdXAuaGFzQ2xhc3MoJ2lzLW9wZW4nKSkge1xuICAgICAgICAgICAgJHNoYXJlTGlua1BvcHVwLnNsaWRlVXAoNDAwKTtcbiAgICAgICAgICAgICRzaGFyZUxpbmtQb3B1cC5yZW1vdmVDbGFzcygnaXMtb3BlbicpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgJHNoYXJlTGlua1BvcHVwLnNsaWRlRG93big0MDApO1xuICAgICAgICAgICAgJHNoYXJlTGlua1BvcHVwLmFkZENsYXNzKCdpcy1vcGVuJyk7ICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgICRzaGFyZUxpbmtDbG9zZS5vbignY2xpY2snLCAoZSkgPT4ge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgaWYgKCRzaGFyZUxpbmtQb3B1cC5oYXNDbGFzcygnaXMtb3BlbicpKSB7XG4gICAgICAgICAgICAkc2hhcmVMaW5rUG9wdXAuc2xpZGVVcCg0MDApO1xuICAgICAgICAgICAgJHNoYXJlTGlua1BvcHVwLnJlbW92ZUNsYXNzKCdpcy1vcGVuJyk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgICRzaGFyZUxpbmtDb3B5Lm9uKCdjbGljaycsIChlKSA9PiB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgY29uc3QgJHRhcmdldCA9ICQoZS50YXJnZXQpO1xuXG4gICAgICAgICR0YXJnZXQuc2VsZWN0KCk7XG4gICAgICAgIGRvY3VtZW50LmV4ZWNDb21tYW5kKFwiY29weVwiKTtcbiAgICB9KTtcbn1cbiIsImNvbnN0IHJldmVhbENsb3NlQXR0ciA9ICdyZXZlYWxDbG9zZSc7XG5jb25zdCByZXZlYWxDbG9zZVNlbGVjdG9yID0gYFtkYXRhLSR7cmV2ZWFsQ2xvc2VBdHRyfV1gO1xuY29uc3QgcmV2ZWFsU2VsZWN0b3IgPSAnW2RhdGEtcmV2ZWFsXSc7XG5cbmNsYXNzIFJldmVhbENsb3NlIHtcbiAgICBjb25zdHJ1Y3RvcigkYnV0dG9uKSB7XG4gICAgICAgIHRoaXMuJGJ1dHRvbiA9ICRidXR0b247XG4gICAgICAgIHRoaXMubW9kYWxJZCA9ICRidXR0b24uZGF0YShyZXZlYWxDbG9zZUF0dHIpO1xuXG4gICAgICAgIHRoaXMub25DbGljayA9IHRoaXMub25DbGljay5iaW5kKHRoaXMpO1xuXG4gICAgICAgIHRoaXMuYmluZEV2ZW50cygpO1xuICAgIH1cblxuICAgIGdldCBtb2RhbCgpIHtcbiAgICAgICAgbGV0ICRtb2RhbDtcblxuICAgICAgICBpZiAodGhpcy5tb2RhbElkKSB7XG4gICAgICAgICAgICAkbW9kYWwgPSAkKGAjJHt0aGlzLm1vZGFsSWR9YCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkbW9kYWwgPSB0aGlzLiRidXR0b24ucGFyZW50cyhyZXZlYWxTZWxlY3RvcikuZXEoMCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJG1vZGFsLmRhdGEoJ21vZGFsSW5zdGFuY2UnKTtcbiAgICB9XG5cbiAgICBiaW5kRXZlbnRzKCkge1xuICAgICAgICB0aGlzLiRidXR0b24ub24oJ2NsaWNrJywgdGhpcy5vbkNsaWNrKTtcbiAgICB9XG5cbiAgICB1bmJpbmRFdmVudHMoKSB7XG4gICAgICAgIHRoaXMuJGJ1dHRvbi5vZmYoJ2NsaWNrJywgdGhpcy5vbkNsaWNrKTtcbiAgICB9XG5cbiAgICBvbkNsaWNrKGV2ZW50KSB7XG4gICAgICAgIGNvbnN0IHsgbW9kYWwgfSA9IHRoaXM7XG5cbiAgICAgICAgaWYgKG1vZGFsKSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICBtb2RhbC5jbG9zZSgpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vKlxuICogRXh0ZW5kIGZvdW5kYXRpb24ucmV2ZWFsIHdpdGggdGhlIGFiaWxpdHkgdG8gY2xvc2UgYSBtb2RhbCBieSBjbGlja2luZyBvbiBhbnkgb2YgaXRzIGNoaWxkIGVsZW1lbnRcbiAqIHdpdGggZGF0YS1yZXZlYWwtY2xvc2UgYXR0cmlidXRlLlxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogPGRpdiBkYXRhLXJldmVhbCBpZD1cImhlbGxvTW9kYWxcIj5cbiAqICAgPGJ1dHRvbiBkYXRhLXJldmVhbC1jbG9zZT5Db250aW51ZTwvYnV0dG9uPlxuICogPC9kaXY+XG4gKlxuICogPGRpdiBkYXRhLXJldmVhbCBpZD1cImhlbGxvTW9kYWxcIj48L2Rpdj5cbiAqIDxidXR0b24gZGF0YS1yZXZlYWwtY2xvc2U9XCJoZWxsb01vZGFsXCI+Q29udGludWU8L2J1dHRvbj5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmV2ZWFsQ2xvc2VGYWN0b3J5KHNlbGVjdG9yID0gcmV2ZWFsQ2xvc2VTZWxlY3Rvciwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgJGJ1dHRvbnMgPSAkKHNlbGVjdG9yLCBvcHRpb25zLiRjb250ZXh0KTtcblxuICAgIHJldHVybiAkYnV0dG9ucy5tYXAoKGluZGV4LCBlbGVtZW50KSA9PiB7XG4gICAgICAgIGNvbnN0ICRidXR0b24gPSAkKGVsZW1lbnQpO1xuICAgICAgICBjb25zdCBpbnN0YW5jZUtleSA9IGAke3JldmVhbENsb3NlQXR0cn1JbnN0YW5jZWA7XG4gICAgICAgIGNvbnN0IGNhY2hlZEJ1dHRvbiA9ICRidXR0b24uZGF0YShpbnN0YW5jZUtleSk7XG5cbiAgICAgICAgaWYgKGNhY2hlZEJ1dHRvbiBpbnN0YW5jZW9mIFJldmVhbENsb3NlKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQnV0dG9uO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgYnV0dG9uID0gbmV3IFJldmVhbENsb3NlKCRidXR0b24pO1xuXG4gICAgICAgICRidXR0b24uZGF0YShpbnN0YW5jZUtleSwgYnV0dG9uKTtcblxuICAgICAgICByZXR1cm4gYnV0dG9uO1xuICAgIH0pLnRvQXJyYXkoKTtcbn1cbiIsImltcG9ydCBzdmdJbmplY3RvciBmcm9tICdzdmctaW5qZWN0b3InO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoKSB7XG4gICAgc3ZnSW5qZWN0b3IoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnc3ZnW2RhdGEtc3JjXScpKTtcbn1cbiIsImltcG9ydCBzd2VldEFsZXJ0IGZyb20gJ3N3ZWV0YWxlcnQyJztcblxuLy8gV2Vha01hcCB3aWxsIGRlZmluZWQgaW4gdGhlIGdsb2JhbCBzY29wZSBpZiBuYXRpdmUgV2Vha01hcCBpcyBub3Qgc3VwcG9ydGVkLlxuY29uc3Qgd2Vha01hcCA9IG5ldyBXZWFrTWFwKCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblxuLy8gU2V0IGRlZmF1bHRzIGZvciBzd2VldGFsZXJ0MiBwb3B1cCBib3hlc1xuY29uc3QgU3dhbCA9IHN3ZWV0QWxlcnQubWl4aW4oe1xuICAgIGJ1dHRvbnNTdHlsaW5nOiBmYWxzZSxcbiAgICBjdXN0b21DbGFzczoge1xuICAgICAgICBjb25maXJtQnV0dG9uOiAnYnV0dG9uJyxcbiAgICAgICAgY2FuY2VsQnV0dG9uOiAnYnV0dG9uJyxcbiAgICB9LFxufSk7XG5cbi8vIFJlLWV4cG9ydFxuZXhwb3J0IGRlZmF1bHQgU3dhbDtcbiIsImltcG9ydCB1dGlscyBmcm9tICdAYmlnY29tbWVyY2Uvc3RlbmNpbC11dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgY29uc3QgYXpXcmFwcGVyID0gJCgnI2hhbG9BWkJyYW5kc1dyYXBwZXInKSxcbiAgICAgICAgYXpOYXZpZ2F0aW9uID0gJCgnI2hhbG9BWkJyYW5kc1RhYmxlJyk7XG5cbiAgICBjb25zdCByZXF1ZXN0T3B0aW9ucyA9IHtcbiAgICAgICAgY29uZmlnOiB7XG4gICAgICAgICAgICBicmFuZHM6IHtcbiAgICAgICAgICAgICAgICBsaW1pdDogY29udGV4dC50aGVtZVNldHRpbmdzLmJyYW5kcGFnZV9icmFuZHNfcGVyX3BhZ2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdGVtcGxhdGU6ICdoYWxvdGhlbWVzL2JyYW5kL2hhbG8tYWxsLWJyYW5kcycsXG4gICAgfTtcblxuICAgIGlmIChjb250ZXh0LnRoZW1lU2V0dGluZ3MuaGFsb19icmFuZEFabGF5b3V0ID09IHRydWUpIHtcbiAgICAgICAgZ2V0QWxsQnJhbmQoKTtcbiAgICAgICAgYnJhbmROYXZpZ2F0aW9uRXZlbnQoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRBbGxCcmFuZCgpe1xuICAgICAgICBheldyYXBwZXIuYWRkQ2xhc3MoJ2lzLWxvYWRpbmcnKTtcblxuICAgICAgICBjb25zdCB1cmwgPSBjb250ZXh0LnVybHMuYnJhbmRzO1xuXG4gICAgICAgIHV0aWxzLmFwaS5nZXRQYWdlKHVybCwgcmVxdWVzdE9wdGlvbnMsIChlcnJvciwgcmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGxpc3QgPSAkKHJlc3BvbnNlKTtcblxuICAgICAgICAgICAgcGFyc2VMaXN0QnJhbmQobGlzdCk7XG5cbiAgICAgICAgICAgIGNvbnN0IG5leHRVcmwgPSBsaXN0LmRhdGEoJ2JyYW5kcy1saXN0LW5leHQnKTtcblxuICAgICAgICAgICAgaWYgKG5leHRVcmwpIHtcbiAgICAgICAgICAgICAgICBsb2FkTW9yZUJyYW5kcyhuZXh0VXJsKTtcbiAgICAgICAgICAgIH0gZWxzZXtcbiAgICAgICAgICAgICAgICBheldyYXBwZXIucmVtb3ZlQ2xhc3MoJ2lzLWxvYWRpbmcnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNMZXR0ZXIoc3RyKSB7XG4gICAgICAgIHJldHVybiBzdHIubGVuZ3RoID09PSAxICYmIHN0ci5tYXRjaCgvW2Etel0vaSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYnJhbmROYXZpZ2F0aW9uRXZlbnQoKXtcbiAgICAgICAgYXpOYXZpZ2F0aW9uLm9uKCdjbGljaycsICdhJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICBjb25zdCAkdGFyZ2V0ID0gJChldmVudC5jdXJyZW50VGFyZ2V0KTtcblxuICAgICAgICAgICAgYXpOYXZpZ2F0aW9uLmNoaWxkcmVuKCdsaScpLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUnKTtcblxuICAgICAgICAgICAgJHRhcmdldC5wYXJlbnQoKS5hZGRDbGFzcygnaXMtYWN0aXZlJyk7XG5cbiAgICAgICAgICAgIGNvbnN0IGxldHRlciA9ICR0YXJnZXQuZGF0YSgnaHJlZicpO1xuXG4gICAgICAgICAgICBpZiAobGV0dGVyICE9PSB1bmRlZmluZWQgfHwgbGV0dGVyKSB7XG4gICAgICAgICAgICAgICAgYXpXcmFwcGVyLnJlbW92ZUNsYXNzKCdhY3RpdmUtYWxsJyk7XG4gICAgICAgICAgICAgICAgYXpXcmFwcGVyLmZpbmQoJy5hekJyYW5kcy1ncm91cCcpLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUnKTtcbiAgICAgICAgICAgICAgICBheldyYXBwZXIuZmluZCgnW2RhdGEtbGV0dGVyPScrbGV0dGVyKyddJykuYWRkQ2xhc3MoJ2lzLWFjdGl2ZScpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBheldyYXBwZXIuYWRkQ2xhc3MoJ2FjdGl2ZS1hbGwnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VMaXN0QnJhbmQobGlzdCl7XG4gICAgICAgIGF6V3JhcHBlci5maW5kKCcuYXpCcmFuZHMtZ3JvdXAnKS5lYWNoKChpbmRleCwgZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgdmFyIGxldHRlciA9ICQoZWxlbWVudCkuZGF0YSgnbGV0dGVyJyk7XG5cbiAgICAgICAgICAgIGlmKCFpc0xldHRlcihsZXR0ZXIpKXtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEwOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgJCgnLmF6QnJhbmRzLWdyb3VwLWxpc3QnLCBlbGVtZW50KS5hcHBlbmQobGlzdC5maW5kKCdbZGF0YS1icmFuZC1sZXR0ZXI9JytpKyddJykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJCgnLmF6QnJhbmRzLWdyb3VwLWxpc3QnLCBlbGVtZW50KS5hcHBlbmQobGlzdC5maW5kKCdbZGF0YS1icmFuZC1sZXR0ZXI9JytsZXR0ZXIrJ10nKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKCQoJy5hekJyYW5kcy1ncm91cC1saXN0JywgZWxlbWVudCkuY2hpbGRyZW4oKS5sZW5ndGggPiAwKXtcbiAgICAgICAgICAgICAgICBhek5hdmlnYXRpb24uZmluZCgnW2RhdGEtbGV0dGVyPScrbGV0dGVyKyddJykucmVtb3ZlQ2xhc3MoJ2Rpc2FibGUnKS5hZGRDbGFzcygnaGFzLWxldHRlcicpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2FkTW9yZUJyYW5kcyh1cmwpIHtcbiAgICAgICAgdXRpbHMuYXBpLmdldFBhZ2UodXJsLCByZXF1ZXN0T3B0aW9ucywgKGVycm9yLCByZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgbGlzdCA9ICQocmVzcG9uc2UpO1xuXG4gICAgICAgICAgICBwYXJzZUxpc3RCcmFuZChsaXN0KTtcblxuICAgICAgICAgICAgY29uc3QgbmV4dFVybCA9IGxpc3QuZGF0YSgnYnJhbmRzLWxpc3QtbmV4dCcpO1xuXG4gICAgICAgICAgICBpZiAobmV4dFVybCkge1xuICAgICAgICAgICAgICAgIGxvYWRNb3JlQnJhbmRzKG5leHRVcmwpO1xuICAgICAgICAgICAgfSBlbHNle1xuICAgICAgICAgICAgICAgIGF6V3JhcHBlci5yZW1vdmVDbGFzcygnaXMtbG9hZGluZycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59XG4iLCJpbXBvcnQgdXRpbHMgZnJvbSAnQGJpZ2NvbW1lcmNlL3N0ZW5jaWwtdXRpbHMnO1xuY29uc3QgZmV0Y2ggPSByZXF1aXJlKCdub2RlLWZldGNoJyk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbnRleHQsIHdyYXBwZXIpIHtcbiAgICBpZiAoY29udGV4dC50aGVtZVNldHRpbmdzLmhhbG9BZGRPcHRpb25Gb3JQcm9kdWN0ID09IHRydWUpIHtcbiAgICAgICAgY29uc3QgdG9rZW4gPSBjb250ZXh0LnRva2VuLFxuICAgICAgICAgICAgcHJvZHVjdF93cmFwcGVyID0gJCgnIycrd3JhcHBlciksXG4gICAgICAgICAgICBwcm9kdWN0X2NsYXNzID0gcHJvZHVjdF93cmFwcGVyLmZpbmQoJy5jYXJkOm5vdCguaXMtbG9hZGVkKScpO1xuICAgICAgICB2YXIgIGxpc3QgPSBbXTtcblxuICAgICAgICBmdW5jdGlvbiBjYWxsUHJvZHVjdE9wdGlvbigpIHtcbiAgICAgICAgICAgIHByb2R1Y3RfY2xhc3MuZWFjaCgoaW5kZXgsIGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgcHJvZHVjdElkID0gJChlbGVtZW50KS5kYXRhKFwicHJvZHVjdC1pZFwiKTtcbiAgICAgICAgICAgICAgICBpZighJChlbGVtZW50KS5maW5kKCdbZGF0YS1wcm9kdWN0LWF0dHJpYnV0ZT1cInN3YXRjaFwiXScpLmNoaWxkcmVuKCkubGVuZ3RoKXtcbiAgICAgICAgICAgICAgICAgICAgbGlzdC5wdXNoKHByb2R1Y3RJZC50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgbGlzdCA9IHVuaXF1ZUFycmF5KGxpc3QpO1xuXG4gICAgICAgICAgICBpZihsaXN0Lmxlbmd0aCA+IDApe1xuICAgICAgICAgICAgICAgIGdldFByb2R1Y3RPcHRpb24obGlzdCkudGhlbihkYXRhID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyT3B0aW9uKGRhdGEpO1xuXG4gICAgICAgICAgICAgICAgICAgICQuZWFjaChsaXN0LCAoaWR4LCBpdGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXJyID0ge30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvZHVjdElkID0gbGlzdFtpZHhdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGhpc1Byb2R1Y3QgPSBwcm9kdWN0X3dyYXBwZXIuZmluZCgnLmNhcmQ6bm90KC5pcy1sb2FkZWQpIC5jYXJkLW9wdGlvbi0nK3Byb2R1Y3RJZCsnOm5vdCguaXMtbG9hZGVkKTplcSgwKScpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzUHJvZHVjdC5maW5kKCcuZm9ybS1vcHRpb24tc3dhdGNoJykuZWFjaCgoaW5kZXgsIGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdHh0ID0gJChlbGVtZW50KS5kYXRhKCdwcm9kdWN0LXN3YXRjaC12YWx1ZScpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFyclt0eHRdKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJChlbGVtZW50KS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJbdHh0XSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHRoaXNQcm9kdWN0LmZpbmQoJy5mb3JtLW9wdGlvbi1zd2F0Y2gnKS5sZW5ndGggPiA1KXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY291bnRNb3JlT3B0aW9uICA9IHRoaXNQcm9kdWN0LmZpbmQoJy5mb3JtLW9wdGlvbi1zd2F0Y2gnKS5sZW5ndGggLSA1LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9kdWN0TGluayA9IHByb2R1Y3Rfd3JhcHBlci5maW5kKCdbZGF0YS1wcm9kdWN0LWlkPVwiJytwcm9kdWN0SWQrJ1wiXScpLmZpbmQoJy5jYXJkLXRpdGxlIGEnKS5hdHRyKCdocmVmJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzUHJvZHVjdC5maW5kKCcuZm9ybS1vcHRpb24tc3dhdGNoJykuZWFjaCgoaW5kZXgsIGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoaW5kZXggPj0gNSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKGVsZW1lbnQpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZih0aGlzUHJvZHVjdC5maW5kKCcuZm9ybS1maWVsZCAuc2hvd21vcmUnKS5sZW5ndGggPCAxKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRleHQudGhlbWVTZXR0aW5ncy5oYWxvX2hvbWVwYWdlX2xheW91dF8xID09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNQcm9kdWN0LmZpbmQoJy5mb3JtLWZpZWxkJykuYXBwZW5kKCc8YSBocmVmPVwiJytwcm9kdWN0TGluaysnXCIgY2xhc3M9XCJzaG93bW9yZVwiPisnK2NvdW50TW9yZU9wdGlvbisnPC9hPicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1Byb2R1Y3QuZmluZCgnLmZvcm0tZmllbGQnKS5hcHBlbmQoJzxhIGhyZWY9XCInK3Byb2R1Y3RMaW5rKydcIiBjbGFzcz1cInNob3dtb3JlXCI+KycrY291bnRNb3JlT3B0aW9uKycgbW9yZTwvYT4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1Byb2R1Y3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ2lzLWxvYWRlZCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5jYXJkJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ2lzLWxvYWRlZCcpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0UHJvZHVjdE9wdGlvbihsaXN0KXtcbiAgICAgICAgICAgIHJldHVybiBmZXRjaCgnL2dyYXBocWwnLCB7XG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogJ0JlYXJlciAnICsgdG9rZW5cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICAgICAgcXVlcnk6IGBcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5IFNldmVyYWxQcm9kdWN0c0J5SUQge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpdGUge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9kdWN0cyhlbnRpdHlJZHM6IFtgK2xpc3QrYF0sIGZpcnN0OiA1MCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWRnZXMge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnRpdHlJZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRJbWFnZXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybE9yaWdpbmFsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFudHMoZmlyc3Q6IDUwKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVkZ2Vze1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGV7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudGl0eUlkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRJbWFnZXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybE9yaWdpbmFsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvZHVjdE9wdGlvbnMoZmlyc3Q6IDUwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZGdlcyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudGl0eUlkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzUmVxdWlyZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uIG9uIE11bHRpcGxlQ2hvaWNlT3B0aW9uIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlTdHlsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZGdlcyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW50aXR5SWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0RlZmF1bHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLiBvbiBTd2F0Y2hPcHRpb25WYWx1ZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGV4Q29sb3JzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VVcmwod2lkdGg6IDE1MClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgfSkudGhlbihyZXMgPT4gcmVzLmpzb24oKSkudGhlbihyZXMgPT4gcmVzLmRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcmVuZGVyT3B0aW9uKGRhdGEpe1xuICAgICAgICAgICAgdmFyIGFGaWx0ZXIgPSBkYXRhLnNpdGUucHJvZHVjdHMuZWRnZXM7XG5cbiAgICAgICAgICAgICQuZWFjaChhRmlsdGVyLCAoaW5kZXgsIGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgcHJvZHVjdElkID0gYUZpbHRlcltpbmRleF0ubm9kZS5lbnRpdHlJZCxcbiAgICAgICAgICAgICAgICAgICAgcHJvZHVjdEltYWdlLFxuICAgICAgICAgICAgICAgICAgICBwcm9kdWN0RmllbGRDb2xvciA9IHByb2R1Y3Rfd3JhcHBlci5maW5kKCcuY2FyZC1vcHRpb24tJytwcm9kdWN0SWQrJzpub3QoLmlzLWxvYWRlZCk6ZXEoMCkgLmZvcm0tZmllbGQnKSxcbiAgICAgICAgICAgICAgICAgICAgYUZpbHRlcjIgPSBhRmlsdGVyW2luZGV4XS5ub2RlLnZhcmlhbnRzLmVkZ2VzO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAoYUZpbHRlcltpbmRleF0ubm9kZS5kZWZhdWx0SW1hZ2Upe1xuICAgICAgICAgICAgICAgICAgICBwcm9kdWN0SW1hZ2UgPSBhRmlsdGVyW2luZGV4XS5ub2RlLmRlZmF1bHRJbWFnZS51cmxPcmlnaW5hbDtcbiAgICAgICAgICAgICAgICB9IGVsc2V7XG4gICAgICAgICAgICAgICAgICAgIHByb2R1Y3RJbWFnZSA9J2h0dHBzOi8vY2RuMTEuYmlnY29tbWVyY2UuY29tL3Mtb2w2ZGF5eGY3cS9zdGVuY2lsL2Q5NjBmMjEwLTg2ZGQtMDEzOC1lNzFkLTAyNDJhYzExMDAwOC9lL2EyOTQxZDIwLThiNjQtMDEzOC1lNzhkLTAyNDJhYzExMDAxMy9pbWcvUHJvZHVjdERlZmF1bHQuZ2lmJztcbiAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgICQuZWFjaChhRmlsdGVyMiwgKGlkeCwgZWwpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhcmlhbnRJbWFnZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFGaWx0ZXIzID0gYUZpbHRlcjJbaWR4XS5ub2RlLnByb2R1Y3RPcHRpb25zLmVkZ2VzO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmKGFGaWx0ZXIyW2lkeF0ubm9kZS5kZWZhdWx0SW1hZ2Upe1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFudEltYWdlID0gYUZpbHRlcjJbaWR4XS5ub2RlLmRlZmF1bHRJbWFnZS51cmxPcmlnaW5hbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmKHZhcmlhbnRJbWFnZSA9PT0gdW5kZWZpbmVkIHx8IHZhcmlhbnRJbWFnZSA9PT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXJpYW50SW1hZ2UgPSBwcm9kdWN0SW1hZ2U7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB2YXIgYUZpbHRlcjQgPSBhRmlsdGVyMy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLm5vZGUuZGlzcGxheVN0eWxlID09PSAnU3dhdGNoJztcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYoYUZpbHRlcjQubGVuZ3RoID4gMCl7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYUZpbHRlcjUgPSBhRmlsdGVyNFswXS5ub2RlLnZhbHVlcy5lZGdlcztcblxuICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGFGaWx0ZXI1LCAoaWR4LCBlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRpdGxlVmFyID0gYUZpbHRlcjVbaWR4XS5ub2RlLmxhYmVsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZFZhciA9IGFGaWx0ZXI1W2lkeF0ubm9kZS5lbnRpdHlJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVuZ3RoQ29sb3JWYXIgPSBhRmlsdGVyNVtpZHhdLm5vZGUuaGV4Q29sb3JzLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3IxID0gYUZpbHRlcjVbaWR4XS5ub2RlLmhleENvbG9yc1swXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3IyID0gYUZpbHRlcjVbaWR4XS5ub2RlLmhleENvbG9yc1sxXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3IzID0gYUZpbHRlcjVbaWR4XS5ub2RlLmhleENvbG9yc1syXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1nID0gYUZpbHRlcjVbaWR4XS5ub2RlLmltYWdlVXJsO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihsZW5ndGhDb2xvclZhciA9PSAyKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvZHVjdEZpZWxkQ29sb3IuYXBwZW5kKCc8bGFiZWwgY2xhc3M9XCJmb3JtLW9wdGlvbiBmb3JtLW9wdGlvbi1zd2F0Y2ggdHdvLWNvbG9yc1wiIGRhdGEtaW1hZ2UgPVwiJyt2YXJpYW50SW1hZ2UrJ1wiIGRhdGEtcHJvZHVjdC1zd2F0Y2gtdmFsdWU9XCInK2lkVmFyKydcIiBkYXRhLXRpdGxlPVwiJyt0aXRsZVZhcisnXCI+PHNwYW4gY2xhc3M9XCJmb3JtLW9wdGlvbi10b29sdGlwXCI+Jyt0aXRsZVZhcisnPC9zcGFuPjxzcGFuIGNsYXNzPVwiZm9ybS1vcHRpb24tdmFyaWFudCBmb3JtLW9wdGlvbi12YXJpYW50LS1jb2xvciBmb3JtLW9wdGlvbi12YXJpYW50LS1jb2xvcjJcIiB0aXRsZT1cIicrdGl0bGVWYXIrJ1wiPjxzcGFuIGNsYXNzPVwiZm9ybS1vcHRpb24tdmFyaWFudCBmb3JtLW9wdGlvbi12YXJpYW50LS1jb2xvciB0d28tY29sb3JzXCIgc3R5bGU9XCJiYWNrZ3JvdW5kLWNvbG9yOicrY29sb3IxKyc7Ym9yZGVyOiBub25lO2xlZnQ6IC0xcHg7XCI+PC9zcGFuPjxzcGFuIGNsYXNzPVwiZm9ybS1vcHRpb24tdmFyaWFudCBmb3JtLW9wdGlvbi12YXJpYW50LS1jb2xvciB0d28tY29sb3JzXCIgc3R5bGU9XCJiYWNrZ3JvdW5kLWNvbG9yOicrY29sb3IyKyc7Ym9yZGVyOiBub25lO1wiPjwvc3Bhbj48L3NwYW4+PC9sYWJlbD4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYobGVuZ3RoQ29sb3JWYXIgPT09IDMpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9kdWN0RmllbGRDb2xvci5hcHBlbmQoJzxsYWJlbCBjbGFzcz1cImZvcm0tb3B0aW9uIGZvcm0tb3B0aW9uLXN3YXRjaCB0aHJlZS1jb2xvcnMgdHdvLWNvbG9yc1wiIGRhdGEtaW1hZ2UgPVwiJyt2YXJpYW50SW1hZ2UrJ1wiIGRhdGEtcHJvZHVjdC1zd2F0Y2gtdmFsdWU9XCInK2lkVmFyKydcIiBkYXRhLXRpdGxlPVwiJyt0aXRsZVZhcisnXCI+PHNwYW4gY2xhc3M9XCJmb3JtLW9wdGlvbi10b29sdGlwXCI+Jyt0aXRsZVZhcisnPC9zcGFuPjxzcGFuIGNsYXNzPVwiZm9ybS1vcHRpb24tdmFyaWFudCBmb3JtLW9wdGlvbi12YXJpYW50LS1jb2xvciBmb3JtLW9wdGlvbi12YXJpYW50LS1jb2xvcjJcIiB0aXRsZT1cIicrdGl0bGVWYXIrJ1wiPjxzcGFuIGNsYXNzPVwiZm9ybS1vcHRpb24tdmFyaWFudCBmb3JtLW9wdGlvbi12YXJpYW50LS1jb2xvciB0aHJlZS1jb2xvcnNcIiBzdHlsZT1cImJhY2tncm91bmQtY29sb3I6Jytjb2xvcjErJ1wiPjwvc3Bhbj48c3BhbiBjbGFzcz1cImZvcm0tb3B0aW9uLXZhcmlhbnQgZm9ybS1vcHRpb24tdmFyaWFudC0tY29sb3IgdGhyZWUtY29sb3JzXCIgc3R5bGU9XCJiYWNrZ3JvdW5kLWNvbG9yOicrY29sb3IyKydcIj48L3NwYW4+PHNwYW4gc3R5bGU9XCJiYWNrZ3JvdW5kLWNvbG9yOicrY29sb3IzKydcIj48L3NwYW4+PC9zcGFuPjwvbGFiZWw+Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmKEJvb2xlYW4oY29sb3IxKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2R1Y3RGaWVsZENvbG9yLmFwcGVuZCgnPGxhYmVsIGNsYXNzPVwiZm9ybS1vcHRpb24gZm9ybS1vcHRpb24tc3dhdGNoXCIgZGF0YS1pbWFnZSA9XCInK3ZhcmlhbnRJbWFnZSsnXCIgIGRhdGEtcHJvZHVjdC1zd2F0Y2gtdmFsdWU9XCInK2lkVmFyKydcIiBkYXRhLXRpdGxlPVwiJyt0aXRsZVZhcisnXCI+PHNwYW4gY2xhc3M9XCJmb3JtLW9wdGlvbi10b29sdGlwXCI+Jyt0aXRsZVZhcisnPC9zcGFuPjxzcGFuIGNsYXNzPVwiZm9ybS1vcHRpb24tdmFyaWFudCBmb3JtLW9wdGlvbi12YXJpYW50LS1jb2xvclwiIHRpdGxlPVwiJyt0aXRsZVZhcisnXCIgc3R5bGU9XCJiYWNrZ3JvdW5kLWNvbG9yOiAnK2NvbG9yMSsnXCI+PC9zcGFuPjwvbGFiZWw+Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmKEJvb2xlYW4oaW1nKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2R1Y3RGaWVsZENvbG9yLmFwcGVuZCgnPGxhYmVsIGNsYXNzPVwiZm9ybS1vcHRpb24gZm9ybS1vcHRpb24tc3dhdGNoIFwiIGRhdGEtaW1hZ2UgPVwiJyt2YXJpYW50SW1hZ2UrJ1wiIGRhdGEtcHJvZHVjdC1zd2F0Y2gtdmFsdWU9XCInK2lkVmFyKydcIiBkYXRhLXRpdGxlPVwiJyt0aXRsZVZhcisnXCI+PHNwYW4gY2xhc3M9XCJmb3JtLW9wdGlvbi10b29sdGlwXCI+Jyt0aXRsZVZhcisnPC9zcGFuPjxzcGFuIGNsYXNzPVwiZm9ybS1vcHRpb24tdmFyaWFudCBmb3JtLW9wdGlvbi12YXJpYW50LS1wYXR0ZXJuXCIgdGl0bGU9XCInK3RpdGxlVmFyKydcIiBzdHlsZT1cImJhY2tncm91bmQtaW1hZ2U6IHVybCgnK2ltZysnKVwiPjwvc3Bhbj48L2xhYmVsPicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2V7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2R1Y3RGaWVsZENvbG9yLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHVuaXF1ZUFycmF5KGxpc3QpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBbXTtcblxuICAgICAgICAgICAgJC5lYWNoKGxpc3QsIChpbmRleCwgZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICgkLmluQXJyYXkoZWxlbWVudCwgcmVzdWx0KSA9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChlbGVtZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNhbGxQcm9kdWN0T3B0aW9uKCk7XG5cbiAgICAgICAgcHJvZHVjdF93cmFwcGVyLm9uKCdiZWZvcmVDaGFuZ2UnLCBmdW5jdGlvbiAoKXtcbiAgICAgICAgICAgIGNhbGxQcm9kdWN0T3B0aW9uKCk7XG4gICAgICAgIH0pXG4gICAgfVxufVxuIiwiaW1wb3J0IHV0aWxzIGZyb20gJ0BiaWdjb21tZXJjZS9zdGVuY2lsLXV0aWxzJztcbmltcG9ydCBtb2RhbEZhY3RvcnksIHsgTW9kYWxFdmVudHMgfSBmcm9tICcuLi9nbG9iYWwvbW9kYWwnO1xuaW1wb3J0IGhhbG9DYWxjdWxhdGVGcmVlU2hpcHBpbmcgZnJvbSAnLi9oYWxvQ2FsY3VsYXRlRnJlZVNoaXBwaW5nJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICBjb25zdCBtb2RhbCA9IG1vZGFsRmFjdG9yeSgnI21vZGFsJylbMF07XG5cbiAgICBpZihjb250ZXh0LnRoZW1lU2V0dGluZ3MuaGFsb0FqYXhBZGRUb0NhcnQpe1xuICAgICAgICBpZihjb250ZXh0LnRoZW1lU2V0dGluZ3MuaGFsb0FkZFRvQ2FydEFjdGlvbiAhPT0gJ2NhcnQnKXtcbiAgICAgICAgICAgICQoZG9jdW1lbnQpLm9uKCdjbGljaycsICcuaGFsby1hZGQtdG8tY2FydCcsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh3aW5kb3cuRm9ybURhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgJGFkZFRvQ2FydEJ0biA9ICQoZXZlbnQuY3VycmVudFRhcmdldCksXG4gICAgICAgICAgICAgICAgICAgIHdhaXRNZXNzYWdlID0gJGFkZFRvQ2FydEJ0bi5kYXRhKCd3YWl0TWVzc2FnZScpLFxuICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbEJ0blZhbCA9ICRhZGRUb0NhcnRCdG4uZmluZCgnc3BhbicpLnRleHQoKSxcbiAgICAgICAgICAgICAgICAgICAgcHJvZHVjdElkID0gJGFkZFRvQ2FydEJ0bi5kYXRhKCdwcm9kdWN0LWlkJyk7XG5cbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICAgICAgJGFkZFRvQ2FydEJ0blxuICAgICAgICAgICAgICAgICAgICAuZmluZCgnc3BhbicpXG4gICAgICAgICAgICAgICAgICAgIC50ZXh0KHdhaXRNZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAkYWRkVG9DYXJ0QnRuXG4gICAgICAgICAgICAgICAgICAgIC5wcm9wKCdkaXNhYmxlZCcsIHRydWUpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHByb2R1Y3RJZCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgICAgICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ3Byb2R1Y3RfaWQnLCBwcm9kdWN0SWQpO1xuXG4gICAgICAgICAgICAgICAgdXRpbHMuYXBpLmNhcnQuaXRlbUFkZChmb3JtRGF0YSwgKGVyciwgcmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gZXJyIHx8IHJlc3BvbnNlLmRhdGEuZXJyb3I7XG5cbiAgICAgICAgICAgICAgICAgICAgJGFkZFRvQ2FydEJ0blxuICAgICAgICAgICAgICAgICAgICAgICAgLmZpbmQoJ3NwYW4nKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRleHQob3JpZ2luYWxCdG5WYWwpO1xuICAgICAgICAgICAgICAgICAgICAkYWRkVG9DYXJ0QnRuXG4gICAgICAgICAgICAgICAgICAgICAgICAucHJvcCgnZGlzYWJsZWQnLCBmYWxzZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yTWVzc2FnZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdG1wID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnRElWJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0bXAuaW5uZXJIVE1MID0gZXJyb3JNZXNzYWdlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGVydCh0bXAudGV4dENvbnRlbnQgfHwgdG1wLmlubmVyVGV4dCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb250ZXh0LnRoZW1lU2V0dGluZ3MuaGFsb0FkZFRvQ2FydEFjdGlvbiA9PT0gJ3NpZGViYXInKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICdjb21tb24vY2FydC1wcmV2aWV3J1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxvYWRpbmdDbGFzcyA9ICdpcy1sb2FkaW5nJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0ICRib2R5ID0gJCgnYm9keScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgJGNhcnREcm9wZG93biA9ICQoJyNoYWxvLWNhcnQtc2lkZWJhciAuaGFsby1zaWRlYmFyLXdyYXBwZXInKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0ICRjYXJ0TG9hZGluZyA9ICQoJzxkaXYgY2xhc3M9XCJsb2FkaW5nT3ZlcmxheVwiPjwvZGl2PicpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAkYm9keS50b2dnbGVDbGFzcygnb3BlbkNhcnRTaWRlYmFyJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICRjYXJ0RHJvcGRvd25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MobG9hZGluZ0NsYXNzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5odG1sKCRjYXJ0TG9hZGluZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkY2FydExvYWRpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc2hvdygpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB1dGlscy5hcGkuY2FydC5nZXRDb250ZW50KG9wdGlvbnMsIChlcnIsIHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNhcnREcm9wZG93blxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MobG9hZGluZ0NsYXNzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuaHRtbChyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNhcnRMb2FkaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5oaWRlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBxdWFudGl0eSA9ICQocmVzcG9uc2UpLmZpbmQoJ1tkYXRhLWNhcnQtcXVhbnRpdHldJykuZGF0YSgnY2FydFF1YW50aXR5JykgfHwgMDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRib2R5LnRyaWdnZXIoJ2NhcnQtcXVhbnRpdHktdXBkYXRlJywgcXVhbnRpdHkpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFsb0NhbGN1bGF0ZUZyZWVTaGlwcGluZyhjb250ZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVwZGF0ZUNhcnRDb250ZW50KG1vZGFsLCBjYXJ0SXRlbUhhc2gpIHtcbiAgICAgICAgZ2V0Q2FydENvbnRlbnQoY2FydEl0ZW1IYXNoLCAoZXJyLCByZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbW9kYWwudXBkYXRlQ29udGVudChyZXNwb25zZSk7XG5cbiAgICAgICAgICAgIGNvbnN0ICRib2R5ID0gJCgnYm9keScpO1xuICAgICAgICAgICAgY29uc3QgcXVhbnRpdHkgPSAkKHJlc3BvbnNlKS5maW5kKCdbZGF0YS1jYXJ0LXF1YW50aXR5XScpLmRhdGEoJ2NhcnRRdWFudGl0eScpIHx8IDA7XG5cbiAgICAgICAgICAgICRib2R5LnRyaWdnZXIoJ2NhcnQtcXVhbnRpdHktdXBkYXRlJywgcXVhbnRpdHkpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRDYXJ0Q29udGVudChjYXJ0SXRlbUhhc2gsIG9uQ29tcGxldGUpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHRlbXBsYXRlOiAnY2FydC9wcmV2aWV3JyxcbiAgICAgICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgICAgIHN1Z2dlc3Q6IGNhcnRJdGVtSGFzaCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgICAgICBjYXJ0OiB7XG4gICAgICAgICAgICAgICAgICAgIHN1Z2dlc3Rpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaW1pdDogNFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuXG4gICAgICAgIHV0aWxzLmFwaS5jYXJ0LmdldENvbnRlbnQob3B0aW9ucywgb25Db21wbGV0ZSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IG5vZCBmcm9tICcuLi9jb21tb24vbm9kJztcbmltcG9ydCBmb3JtcyBmcm9tICcuLi9jb21tb24vbW9kZWxzL2Zvcm1zJztcbmltcG9ydCB7IGNsYXNzaWZ5Rm9ybSwgVmFsaWRhdG9ycyB9IGZyb20gJy4uL2NvbW1vbi91dGlscy9mb3JtLXV0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gICAgY29uc3QgJGxvZ2luRm9ybSA9IGNsYXNzaWZ5Rm9ybSgnLmxvZ2luLWZvcm0tc2lkZWJhciBmb3JtJyk7XG5cbiAgICBpZiAoJGxvZ2luRm9ybS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJlZ2lzdGVyTG9naW5WYWxpZGF0aW9uKCRsb2dpbkZvcm0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlZ2lzdGVyTG9naW5WYWxpZGF0aW9uKCRsb2dpbkZvcm0pIHtcbiAgICAgICAgY29uc3QgbG9naW5Nb2RlbCA9IGZvcm1zO1xuXG4gICAgICAgIGNvbnN0IGxvZ2luVmFsaWRhdG9yID0gbm9kKHtcbiAgICAgICAgICAgIHN1Ym1pdDogJGxvZ2luRm9ybS5maW5kKCdidXR0b24nKSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbG9naW5WYWxpZGF0b3IuYWRkKFt7XG4gICAgICAgICAgICBzZWxlY3RvcjogJGxvZ2luRm9ybS5maW5kKCdpbnB1dFt0eXBlPVwiZW1haWxcIl0nKSxcbiAgICAgICAgICAgIHZhbGlkYXRlOiAoY2IsIHZhbCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGxvZ2luTW9kZWwuZW1haWwodmFsKTtcbiAgICAgICAgICAgICAgICBjYihyZXN1bHQpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZTogJ1BsZWFzZSB1c2UgYSB2YWxpZCBlbWFpbCBhZGRyZXNzLCBzdWNoIGFzIHVzZXJAZXhhbXBsZS5jb20uJyxcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgc2VsZWN0b3I6ICRsb2dpbkZvcm0uZmluZCgnaW5wdXRbdHlwZT1cInBhc3N3b3JkXCJdJyksXG4gICAgICAgICAgICB2YWxpZGF0ZTogKGNiLCB2YWwpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBsb2dpbk1vZGVsLnBhc3N3b3JkKHZhbCk7XG4gICAgICAgICAgICAgICAgY2IocmVzdWx0KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvck1lc3NhZ2U6ICdZb3UgbXVzdCBlbnRlciBhIHBhc3N3b3JkLicsXG4gICAgICAgIH0sIF0pO1xuXG4gICAgICAgICRsb2dpbkZvcm0ub24oJ2NsaWNrJywgJ2J1dHRvbicsIGV2ZW50ID0+IHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBsb2dpblZhbGlkYXRvci5wZXJmb3JtQ2hlY2soKTtcblxuICAgICAgICAgICAgaWYgKGxvZ2luVmFsaWRhdG9yLmFyZUFsbCgndmFsaWQnKSkge1xuICAgICAgICAgICAgICAgIHZhciBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgkbG9naW5Gb3JtWzBdKSxcbiAgICAgICAgICAgICAgICAgICAgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCksXG4gICAgICAgICAgICAgICAgICAgIHVybFN1Y2Nlc3MxID0gJ2FjY291bnQucGhwJyxcbiAgICAgICAgICAgICAgICAgICAgdXJsU3VjY2VzczIgPSAnY2FydC5waHAnLFxuICAgICAgICAgICAgICAgICAgICB1cmxFcnJvciA9ICdsb2dpbi5waHAnO1xuXG4gICAgICAgICAgICAgICAgJGxvZ2luRm9ybS5wYXJlbnRzKCcuaGFsby1zaWRlYmFyLXdyYXBwZXInKS5maW5kKCcubm90ZScpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICRsb2dpbkZvcm0ucGFyZW50cygnLmxvZ2luLWZvcm0tc2lkZWJhcicpLmFkZENsYXNzKCdpcy1sb2FkaW5nJyk7XG5cbiAgICAgICAgICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnUE9TVCcsXG4gICAgICAgICAgICAgICAgICAgIHVybDogJy9sb2dpbi5waHA/YWN0aW9uPWNoZWNrX2xvZ2luJyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogZm9ybURhdGEsXG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NEYXRhOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgY29udGVudFR5cGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB4aHI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHhocjtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJGxvZ2luRm9ybS5wYXJlbnRzKCcubG9naW4tZm9ybS1zaWRlYmFyJykucmVtb3ZlQ2xhc3MoJ2lzLWxvYWRpbmcnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVybCA9IHhoci5yZXNwb25zZVVSTDtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYodXJsLmluZGV4T2YodXJsU3VjY2VzczEpICE9IC0xIHx8IHVybC5pbmRleE9mKHVybFN1Y2Nlc3MyKSAhPSAtMSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24ucmVsb2FkKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYodXJsLmluZGV4T2YodXJsRXJyb3IpICE9IC0xKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbG9naW5Gb3JtLnBhcmVudHMoJy5oYWxvLXNpZGViYXItd3JhcHBlcicpLnByZXBlbmQoJzxkaXYgY2xhc3M9XCJub3RlXCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImFsZXJ0Qm94IGFsZXJ0Qm94LS1lcnJvclwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYWxlcnRCb3gtY29sdW1uIGFsZXJ0Qm94LWljb25cIj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdmcgY2xhc3M9XCJpY29uXCI+PHVzZSB4bGluazpocmVmPVwiI2ljb24tZXJyb3JcIj48L3VzZT48L3N2Zz5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPVwiYWxlcnRCb3gtY29sdW1uIGFsZXJ0Qm94LW1lc3NhZ2VcIj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPVwiYWxlcnRCb3gtbWVzc2FnZS10ZXh0XCI+WW91ciBlbWFpbCBhZGRyZXNzIG9yIHBhc3N3b3JkIGlzIGluY29ycmVjdC4gUGxlYXNlIHRyeSBhZ2Fpbi48L3NwYW4+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uLnJlbG9hZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKGpxWEhSLCBleGNlcHRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlZGlyZWN0VG8odXJsKSB7XG4gICAgICAgIGlmIChpc1J1bm5pbmdJbklmcmFtZSgpICYmICF3aW5kb3cuaWZyYW1lU2RrKSB7XG4gICAgICAgICAgICB3aW5kb3cudG9wLmxvY2F0aW9uID0gdXJsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uID0gdXJsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNSdW5uaW5nSW5JZnJhbWUoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gd2luZG93LnNlbGYgIT09IHdpbmRvdy50b3A7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHV0aWxzIGZyb20gJ0BiaWdjb21tZXJjZS9zdGVuY2lsLXV0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICB2YXIgbWVzc2FnZTtcblxuICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xuICAgICAgICB1dGlscy5hcGkuZ2V0UGFnZShjb250ZXh0LnRoZW1lU2V0dGluZ3MuaGFsb19hc2tfYW5fZXhwZXJ0X3BhZ2VsaW5rLCB7dGVtcGxhdGU6ICdoYWxvdGhlbWVzL2Fzay1hbi1leHBlcnQvaGFsby1hc2stYW4tZXhwZXJ0LWZvcm0nfSwgKGVyciwgcmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgIGlmIChlcnIpIHJldHVybjtcblxuICAgICAgICAgICAgJCgnLmhsLWZvcm0tZmllbGQtd3JhcHBlcicpLmh0bWwocmVzcG9uc2UpO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgICQoZG9jdW1lbnQpLm9uKCdjbGljaycsICcuYXNrLWFuLWV4cGVydC1saW5rJywgZXZlbnQgPT4ge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICQoJ2JvZHknKS5hZGRDbGFzcygnaGFzLWFza0FuRXhwZXJ0JylcbiAgICB9KTtcblxuICAgICQoZG9jdW1lbnQpLm9uKCdjbGljaycsICdbZGF0YS1jbG9zZS1hc2stYW4tZXhwZXJ0LXBvcHVwXScsIGV2ZW50ID0+IHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAkKCdib2R5JykucmVtb3ZlQ2xhc3MoJ2hhcy1hc2tBbkV4cGVydCcpO1xuICAgIH0pO1xuXG4gICAgJChkb2N1bWVudCkub24oJ2NsaWNrJywgZXZlbnQgPT4ge1xuICAgICAgICBpZiAoKCQoZXZlbnQudGFyZ2V0KS5jbG9zZXN0KCcuYXNrLWFuLWV4cGVydC1saW5rJykubGVuZ3RoID09PSAwKSAmJiAoJChldmVudC50YXJnZXQpLmNsb3Nlc3QoJy5oYWxvLWFzay1hbi1leHBlcnQtY29udGFpbmVyJykubGVuZ3RoID09PSAwKSl7XG4gICAgICAgICAgICAkKCdib2R5JykucmVtb3ZlQ2xhc3MoJ2hhcy1hc2tBbkV4cGVydCcpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAkKCcuaGFsby1hc2stYW4tZXhwZXJ0LWZvcm0nKS5vbignc3VibWl0JywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgdmFyIHR5cGVDb250YWN0ID0gJCgnLmhhbG8tYXNrLWFuLWV4cGVydC1mb3JtIGlucHV0W25hbWU9dHlwZV9jb250YWN0XTpjaGVja2VkJykudmFsKCksXG4gICAgICAgICAgICB0eXBlUGFja2FnZSA9ICQoJy5oYWxvLWFzay1hbi1leHBlcnQtZm9ybSBpbnB1dFtuYW1lPXR5cGVfcGFja2FnZV06Y2hlY2tlZCcpLnZhbCgpLFxuICAgICAgICAgICAgY3VzdG9tZXJNZXNzYWdlID0gJCgnLmhhbG8tYXNrLWFuLWV4cGVydC1mb3JtIHRleHRhcmVhW25hbWU9Y29udGFjdF9jb21tZW50X2FyZWFdJykudmFsKCksXG4gICAgICAgICAgICByZWNhcHRjaGEgPSAkKCcuaGFsby1hc2stYW4tZXhwZXJ0LWZvcm0gI2ctcmVjYXB0Y2hhLXJlc3BvbnNlJykudmFsKCksXG4gICAgICAgICAgICB0aXRsZSA9ICAkKCcuaGFsby1hc2stYW4tZXhwZXJ0LWZvcm1bZGF0YS1wcm9kdWN0LXRpdGxlXScpLmF0dHIoJ2RhdGEtcHJvZHVjdC10aXRsZScpLFxuICAgICAgICAgICAgc2t1ID0gJCgnLmhhbG8tYXNrLWFuLWV4cGVydC1mb3JtW2RhdGEtcHJvZHVjdC1za3VdJykuYXR0cignZGF0YS1wcm9kdWN0LXNrdScpLFxuICAgICAgICAgICAgdXJsID0gJCgnLmhhbG8tYXNrLWFuLWV4cGVydC1mb3JtW2RhdGEtcHJvZHVjdC11cmxdJykuYXR0cignZGF0YS1wcm9kdWN0LXVybCcpO1xuXG4gICAgICAgIGlmIChyZWNhcHRjaGEgPT0gJycpIHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yID0gJ1RoZSBjYXB0Y2hhIHlvdSBlbnRlcmVkIGlzIGluY29ycmVjdC4gUGxlYXNlIHRyeSBhZ2Fpbi4nXG5cbiAgICAgICAgICAgICQoJyNoYWxvLWFzay1hbi1leHBlcnQtcmVzdWx0cycpLmh0bWwoJzxkaXYgY2xhc3M9XCJhbGVydEJveCBhbGVydEJveC0tZXJyb3JcIj4nK2Vycm9yKyc8L2Rpdj4nKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgkKFwiYm9keVwiKS5oYXNDbGFzcyhcInBhZ2UtdHlwZS1wcm9kdWN0XCIpKSB7XG4gICAgICAgICAgICBtZXNzYWdlID0gXG4gICAgICAgICAgICBcIlxcblxcckRvIHlvdSBuZWVkOiBcIiArIHR5cGVQYWNrYWdlICtcbiAgICAgICAgICAgIFwiXFxuXFxyV2hhdCBjYW4gaSBoZWxwIHlvdSB3aXRoIHRvZGF5OiBcIiArIGN1c3RvbWVyTWVzc2FnZSArXG4gICAgICAgICAgICBcIlxcblxcckhvdyB3b3VsZCB5b3UgbGlrZSBtZSB0byBjb250YWN0IHlvdSA/OiBcIiArIHR5cGVDb250YWN0ICtcbiAgICAgICAgICAgIFwiXFxuXFxyUHJvZHVjdCBOYW1lOiBcIiArIHRpdGxlICtcbiAgICAgICAgICAgIFwiXFxuXFxyUHJvZHVjdCBTS1U6IFwiICsgc2t1ICtcbiAgICAgICAgICAgIFwiXFxuXFxyUHJvZHVjdCBMaW5rOiBcIiArIHVybFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWVzc2FnZSA9IFxuICAgICAgICAgICAgXCJcXG5cXHJEbyB5b3UgbmVlZDogXCIgKyB0eXBlUGFja2FnZSArXG4gICAgICAgICAgICBcIlxcblxccldoYXQgY2FuIGkgaGVscCB5b3Ugd2l0aCB0b2RheTogXCIgKyBjdXN0b21lck1lc3NhZ2UgK1xuICAgICAgICAgICAgXCJcXG5cXHJIb3cgd291bGQgeW91IGxpa2UgbWUgdG8gY29udGFjdCB5b3UgPzogXCIgKyB0eXBlQ29udGFjdFxuICAgICAgICB9XG5cbiAgICAgICAgJCgnI2NvbnRhY3RfcXVlc3Rpb24nKS52YWwobWVzc2FnZSk7XG4gICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICB0eXBlOiAnUE9TVCcsXG4gICAgICAgICAgICB1cmw6ICcvcGFnZXMucGhwP2FjdGlvbj1zZW5kQ29udGFjdEZvcm0nLFxuICAgICAgICAgICAgZGF0YTogJCgnLmhhbG8tYXNrLWFuLWV4cGVydC1mb3JtJykuc2VyaWFsaXplKCksXG4gICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAkKCcuaGFsby1hc2stYW4tZXhwZXJ0LWZvcm0nKS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgJCgnI2hhbG8tYXNrLWFuLWV4cGVydC1yZXN1bHRzJykuaHRtbCgnPGRpdiBjbGFzcz1cImFsZXJ0Qm94IGFsZXJ0Qm94LS1zdWNjZXNzXCI+VGhhbmsgeW91LiBXZVxcJ3ZlIHJlY2VpdmVkIHlvdXIgZmVlZGJhY2sgYW5kIHdpbGwgcmVzcG9uZCBzaG9ydGx5LjwvZGl2PicpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAkKGRvY3VtZW50KS5vbignY2hhbmdlJywgJyN0ZXJtLWFzaycsIGV2ZW50ID0+IHtcbiAgICAgICAgaWYoJChcIiN0ZXJtLWFzazpjaGVja2VkXCIpLmxlbmd0aCl7XG4gICAgICAgICAgICAkKCcjaGFsby1hc2stYW4tZXhwZXJ0LWJ1dHRvbicpLmF0dHIoJ2Rpc2FibGVkJywgZmFsc2UpO1xuICAgICAgICB9IGVsc2V7XG4gICAgICAgICAgICAkKCcjaGFsby1hc2stYW4tZXhwZXJ0LWJ1dHRvbicpLmF0dHIoJ2Rpc2FibGVkJywgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbiIsImltcG9ydCB1dGlscyBmcm9tICdAYmlnY29tbWVyY2Uvc3RlbmNpbC11dGlscyc7XG5pbXBvcnQgJ3NsaWNrLWNhcm91c2VsJztcbmltcG9ydCBzd2FsIGZyb20gJy4uL2dsb2JhbC9zd2VldC1hbGVydCc7XG5pbXBvcnQgaGFsb0FkZE9wdGlvbkZvclByb2R1Y3QgZnJvbSAnLi9oYWxvQWRkT3B0aW9uRm9yUHJvZHVjdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbnRleHQpe1xuXHRjb25zdCAkYmVmb3JlTGVhdmUgPSAkKCcjYmVmb3JlLXlvdS1sZWF2ZScpLFxuXHQgIFx0ICB0b2tlbiA9IGNvbnRleHQudG9rZW4sXG4gICAgXHQgIGN1ckNvZGUgPSAkKCcuYm9keScpLmRhdGEoJ2N1cnJlbmN5LWNvZGUnKTtcblxuXHRmdW5jdGlvbiBzZXRDb29raWUoY25hbWUsIGN2YWx1ZSwgZXhkYXlzKSB7XG4gICAgICBjb25zdCBkID0gbmV3IERhdGUoKTtcbiAgICAgIGQuc2V0VGltZShkLmdldFRpbWUoKSArIChleGRheXMgKiAyNCAqIDYwICogNjAgKiAxMDAwKSk7XG4gICAgICBjb25zdCBleHBpcmVzID0gJ2V4cGlyZXM9JyArIGQudG9VVENTdHJpbmcoKTtcbiAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNuYW1lICsgJz0nICsgY3ZhbHVlICsgJzsnICsgZXhwaXJlcyArICc7cGF0aD0vJztcbiAgIH1cblxuICAgZnVuY3Rpb24gZ2V0Q29va2llKGNuYW1lKSB7XG4gICAgICBjb25zdCBuYW1lID0gY25hbWUgKyAnPSc7XG4gICAgICBjb25zdCBjYSA9IGRvY3VtZW50LmNvb2tpZS5zcGxpdCgnOycpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICB2YXIgYyA9IGNhW2ldO1xuICAgICAgICAgd2hpbGUgKGMuY2hhckF0KDApID09PSAnICcpIHtcbiAgICAgICAgICAgIGMgPSBjLnN1YnN0cmluZygxKTtcbiAgICAgICAgIH1cbiAgICAgICAgIGlmIChjLmluZGV4T2YobmFtZSkgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBjLnN1YnN0cmluZyhuYW1lLmxlbmd0aCwgYy5sZW5ndGgpO1xuICAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuICcnO1xuICAgfVxuXG4gICBjb25zdCBkZWxldGVDb29raWUgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgICBkb2N1bWVudC5jb29raWUgPSBuYW1lICsgJz07ZXhwaXJlcz1UaHUsIDAxIEphbiAxOTcwIDAwOjAwOjAxIEdNVDsnO1xuICAgfTtcblxuXHR2YXIgQkNfUHJvZHVjdHMgPSBmdW5jdGlvbigpIHtcblx0ICAgIHZhciBlID0ge1xuXHQgICAgICAgIGhvd01hbnlUb1Nob3c6IDMsXG5cdCAgICAgICAgaG93TWFueVRvU3RvcmVJbk1lbW9yeTogMTAsXG5cdCAgICAgICAgb25Db21wbGV0ZTogbnVsbFxuXHQgICAgfTtcblx0ICAgIHZhciB0ID0gW107XG5cdCAgICB2YXIgbiA9IG51bGw7XG5cdCAgICB2YXIgciA9IG51bGw7XG5cdCAgICB2YXIgaSA9IDA7XG5cdCAgICB2YXIgcyA9IHtcblx0ICAgICAgICBjb25maWd1cmF0aW9uOiB7XG5cdCAgICAgICAgICAgIGV4cGlyZXM6IGNvbnRleHQudGhlbWVTZXR0aW5ncy5oYWxvX2JlZm9yZV95b3VfbGVhdmVfaGlzdG9yeV9leHBpcmVzX2RhdGUsXG5cdCAgICAgICAgICAgIHBhdGg6IFwiL1wiLFxuXHQgICAgICAgICAgICBkb21haW46IHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZVxuXHQgICAgICAgIH0sXG5cdCAgICAgICAgbmFtZTogXCJiaWdjb21tZXJjZV9oaXN0b3J5XCIsXG5cdCAgICAgICAgd3JpdGU6IGZ1bmN0aW9uKGUpIHtcblx0ICAgICAgICAgICAgc2V0Q29va2llKHRoaXMubmFtZSwgZS5qb2luKFwiIFwiKSwgdGhpcy5jb25maWd1cmF0aW9uLmV4cGlyZXMpXG5cdCAgICAgICAgfSxcblx0ICAgICAgICByZWFkOiBmdW5jdGlvbigpIHtcblx0ICAgICAgICAgICAgdmFyIGUgPSBbXTtcblx0ICAgICAgICAgICAgdmFyIHQgPSBnZXRDb29raWUodGhpcy5uYW1lKTtcblx0ICAgICAgICAgICAgaWYgKHQgIT09IG51bGwgJiYgdCAhPSB1bmRlZmluZWQpIHtcblx0ICAgICAgICAgICAgICAgIGUgPSB0LnNwbGl0KFwiIFwiKVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHJldHVybiBlXG5cdCAgICAgICAgfSxcblx0ICAgICAgICBkZXN0cm95OiBmdW5jdGlvbigpIHtcblx0ICAgICAgICAgICAgc2V0Q29va2llKHRoaXMubmFtZSwgbnVsbCwgdGhpcy5jb25maWd1cmF0aW9uLmV4cGlyZXMpXG5cdCAgICAgICAgfSxcblx0ICAgICAgICByZW1vdmU6IGZ1bmN0aW9uKGUpIHtcblx0ICAgICAgICAgICAgdmFyIHQgPSB0aGlzLnJlYWQoKTtcblx0ICAgICAgICAgICAgdmFyIG4gPSAkLmluQXJyYXkoZSwgdCk7XG5cdCAgICAgICAgICAgIGlmIChuICE9PSAtMSkge1xuXHQgICAgICAgICAgICAgICAgdC5zcGxpY2UobiwgMSk7XG5cdCAgICAgICAgICAgICAgICB0aGlzLndyaXRlKHQpXG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgdmFyIG8gPSBmdW5jdGlvbigpIHtcblx0ICAgICAgICBpZiAoZS5vbkNvbXBsZXRlKSB7XG5cdCAgICAgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICAgICAgICBlLm9uQ29tcGxldGUoKVxuXHQgICAgICAgICAgICB9IGNhdGNoICh0KSB7fVxuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICB2YXIgdSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgXHRjb25zdCAkb3B0aW9uID0ge1xuXHQgICAgICAgICAgICB0ZW1wbGF0ZTogJ2hhbG90aGVtZXMvcHJvZHVjdC9oYWxvLWJlZm9yZS15b3UtbGVhdmUtdGVtcCdcblx0ICAgICAgICB9O1xuXG5cdCAgICAgICAgY29uc3QgbGltaXQgPSBjb250ZXh0LnRoZW1lU2V0dGluZ3MuaGFsb19iZWZvcmVfeW91X2xlYXZlX2hpc3RvcnlfY291bnQ7XG5cblx0XHRcdHZhciB1bmlxdWUgPSAoZnVuY3Rpb24odCl7XG5cdFx0XHRcdHZhciBtID0ge30sIHVuaXF1ZSA9IFtdXG5cdFx0XHQgIFx0XG5cdFx0XHQgIFx0Zm9yICh2YXIgaT0wOyBpPD1saW1pdDsgaSsrKSB7XG5cdFx0XHQgICAgXHR2YXIgdiA9IHRbaV07XG5cdFx0XHQgICAgXHRcblx0XHRcdCAgICBcdGlmICghbVt2XSkge1xuXHRcdFx0ICAgICAgXHRcdHVuaXF1ZS5wdXNoKHYpO1xuXHRcdFx0ICAgICAgXHRcdG1bdl09dHJ1ZTtcblx0XHRcdCAgICBcdH1cblx0XHRcdCAgXHR9XG5cblx0XHRcdCAgXHRyZXR1cm4gdW5pcXVlO1xuXHRcdFx0fSkodCk7XG5cblx0ICAgICAgICB2YXIgY291bnQgPSB1bmlxdWUubGVuZ3RoIC0gMSxcblx0ICAgICAgICBcdCR0YWIgPSAkYmVmb3JlTGVhdmUuZmluZCgnI3RhYi1oaXN0b3J5Jyk7XG5cblx0ICAgICAgICBpZigkdGFiLmxlbmd0aCkge1xuXHQgICAgICAgIFx0JHRhYi5maW5kKCcucHJvZHVjdEdyaWQnKS5lbXB0eSgpO1xuXG5cdFx0ICAgIFx0Zm9yICh2YXIgaiA9IDA7IGogPCBlLmhvd01hbnlUb1Nob3c7IGorKykge1xuXHRcdCAgICBcdFx0dmFyICRwcm9kSWQgPSB1bmlxdWVbal07XG5cblx0XHQgICAgXHRcdHV0aWxzLmFwaS5wcm9kdWN0LmdldEJ5SWQoJHByb2RJZCwgJG9wdGlvbiwgKGVyciwgcmVzcG9uc2UpID0+IHtcblx0XHRcdCAgICAgICAgICAgIGlmIChlcnIpIHtcblx0XHRcdCAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdFx0XHQgICAgICAgICAgICB9XG5cblx0XHRcdCAgICAgICAgICAgIGlmICgkdGFiLmZpbmQoJy5wcm9kdWN0JykubGVuZ3RoIDwgbGltaXQpe1xuXHRcdFx0ICAgICAgICAgICAgXHQkdGFiLmZpbmQoJy5wcm9kdWN0R3JpZCcpLmFwcGVuZChyZXNwb25zZSk7XG5cdFx0XHQgICAgICAgICAgICBcdGhhbG9BZGRPcHRpb25Gb3JQcm9kdWN0KGNvbnRleHQsICd0YWItaGlzdG9yeScpO1xuXHRcdFx0ICAgICAgICAgICAgfVxuXG5cdFx0XHQgICAgICAgICAgICBpKys7XG5cblx0ICAgICAgICAgICAgICAgIFx0aWYoaSA+PSBlLmhvd01hbnlUb1Nob3cpe1xuXHQgICAgICAgICAgICAgICAgXHRcdCR0YWIuZmluZCgnLm5vLXByb2R1Y3RzJykucmVtb3ZlKCk7XG5cdCAgICAgICAgICAgICAgICBcdH1cblx0XHRcdCAgICAgICAgfSk7XG5cdFx0ICAgIFx0fVxuXHRcdCAgICB9XG5cblx0XHQgICAgJGJlZm9yZUxlYXZlLmZpbmQoJy50YWIuaGlzdG9yeSAuY291bnQnKS50ZXh0KGNvdW50KTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4ge1xuXHQgICAgICAgIHJlc2l6ZUltYWdlOiBmdW5jdGlvbihlLCB0KSB7XG5cdCAgICAgICAgICAgIGlmICh0ID09IG51bGwpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBlXG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgaWYgKHQgPT0gXCJtYXN0ZXJcIikge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGUucmVwbGFjZSgvaHR0cChzKT86LywgXCJcIilcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB2YXIgbiA9IGUubWF0Y2goL1xcLihqcGd8anBlZ3xnaWZ8cG5nfGJtcHxiaXRtYXB8dGlmZnx0aWYpKFxcP3Y9XFxkKyk/L2kpO1xuXHQgICAgICAgICAgICBpZiAobiAhPSBudWxsICYmIG4gIT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgciA9IGUuc3BsaXQoblswXSk7XG5cdCAgICAgICAgICAgICAgICB2YXIgaSA9IG5bMF07XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gKHJbMF0gKyBcIl9cIiArIHQgKyBpKS5yZXBsYWNlKC9odHRwKHMpPzovLCBcIlwiKVxuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc2hvd0hpc3Rvcnk6IGZ1bmN0aW9uKGkpIHtcblx0ICAgICAgICAgICAgdmFyIGkgPSBpIHx8IHt9O1xuXHQgICAgICAgICAgICBqUXVlcnkuZXh0ZW5kKGUsIGkpO1xuXHQgICAgICAgICAgICB0ID0gcy5yZWFkKCk7XG5cdCAgICAgICAgICAgIGUuaG93TWFueVRvU2hvdyA9IE1hdGgubWluKHQubGVuZ3RoLCBlLmhvd01hbnlUb1Nob3cpO1xuXHQgICAgICAgICAgICBcblx0ICAgICAgICAgICAgaWYgKGUuaG93TWFueVRvU2hvdykge1xuXHQgICAgICAgICAgICAgICAgdSgpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBnZXRDb25maWc6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gZVxuXHQgICAgICAgIH0sXG5cdCAgICAgICAgY2xlYXJMaXN0OiBmdW5jdGlvbigpIHtcblx0ICAgICAgICAgICAgcy5kZXN0cm95KClcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHJlY29yZEhpc3Rvcnk6IGZ1bmN0aW9uKHQpIHtcblx0ICAgICAgICAgICAgdmFyIHQgPSB0IHx8IHt9O1xuXHQgICAgICAgICAgICB2YXIgcHJvZHVjdF9pZCA9ICQoJy5wcm9kdWN0VmlldycpLmZpbmQoJ2Zvcm1bZGF0YS1jYXJ0LWl0ZW0tYWRkXSBbbmFtZT1cInByb2R1Y3RfaWRcIl0nKS52YWwoKTtcblx0ICAgICAgICAgICAgXG5cdCAgICAgICAgICAgIGpRdWVyeS5leHRlbmQoZSwgdCk7XG5cdCAgICAgICAgICAgIHZhciBuID0gcy5yZWFkKCk7XG5cdCAgICAgICAgICAgIFxuXHQgICAgICAgICAgICBpZiAocHJvZHVjdF9pZCkge1xuXHQgICAgICAgICAgICAgICAgdmFyIHIgPSBwcm9kdWN0X2lkO1xuXHQgICAgICAgICAgICAgICAgdmFyIGkgPSBqUXVlcnkuaW5BcnJheShyLCBuKTtcblx0ICAgICAgICAgICAgICAgIGlmIChpID09PSAtMSkge1xuXHQgICAgICAgICAgICAgICAgICAgIG4udW5zaGlmdChyKTtcblx0ICAgICAgICAgICAgICAgICAgICBuID0gbi5zcGxpY2UoMCwgZS5ob3dNYW55VG9TdG9yZUluTWVtb3J5KVxuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICBuLnNwbGljZShpLCAxKTtcblx0ICAgICAgICAgICAgICAgICAgICBuLnVuc2hpZnQocilcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIHMud3JpdGUobilcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH1cblx0fSgpO1xuXG5cdGZ1bmN0aW9uIGdldFByb2R1Y3QoYXJyKSB7XG4gICAgICByZXR1cm4gZmV0Y2goJy9ncmFwaHFsJywge1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiAnQmVhcmVyICcgKyB0b2tlblxuICAgICAgICB9LFxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgcXVlcnk6IGBcbiAgICAgICAgICAgIHF1ZXJ5IE15UXVlcnkge1xuICAgICAgICAgICAgICAgIHNpdGUge1xuICAgICAgICAgICAgICAgICAgICBwcm9kdWN0cyAoZW50aXR5SWRzOiBbYCthcnIrYF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICBlZGdlcyB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcdHByb2R1Y3Q6IG5vZGUge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBcdFx0Li4uUHJvZHVjdEZpZWxkc1xuICAgICAgICAgICAgICAgICAgICAgICAgICBcdH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjdXJyZW5jeSAoY3VycmVuY3lDb2RlOiBgK2N1ckNvZGUrYCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ltYm9sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ltYm9sUGxhY2VtZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVjaW1hbFRva2VuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhvdXNhbmRzVG9rZW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWNpbWFsUGxhY2VzXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmcmFnbWVudCBQcm9kdWN0RmllbGRzIG9uIFByb2R1Y3Qge1xuICAgICAgICAgICAgICAgIGlkXG4gICAgICAgICAgICAgICAgZW50aXR5SWRcbiAgICAgICAgICAgICAgICBuYW1lXG4gICAgICAgICAgICAgICAgcGF0aFxuICAgICAgICAgICAgICAgIGludmVudG9yeSB7XG4gICAgICAgICAgICAgICAgXHRpc0luU3RvY2tcbiAgICAgICAgICAgICAgICBcdGhhc1ZhcmlhbnRJbnZlbnRvcnlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcHJvZHVjdE9wdGlvbnMge1xuXHRcdCAgICAgICAgICAgIGVkZ2VzIHtcblx0XHQgICAgICAgICAgICAgIFx0bm9kZSB7XG5cdFx0XHQgICAgICAgICAgICAgICAgZW50aXR5SWRcblx0XHRcdCAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZVxuXHRcdFx0ICAgICAgICAgICAgICAgIGlzUmVxdWlyZWRcblx0XHQgICAgICAgICAgICAgIFx0fVxuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkZWZhdWx0SW1hZ2Uge1xuICAgICAgICAgICAgICAgICAgICBpbWc3MHB4OiB1cmwod2lkdGg6IDcwKVxuICAgICAgICAgICAgICAgICAgICBhbHRUZXh0XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHByaWNlcyB7XG4gICAgICAgICAgICAgICAgICAgIHByaWNlUmFuZ2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5Nb25leUZpZWxkc1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5Nb25leUZpZWxkc1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldGFpbFByaWNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLk1vbmV5RmllbGRzXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYmFzZVByaWNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLk1vbmV5RmllbGRzXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcHJpY2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uTW9uZXlGaWVsZHNcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZyYWdtZW50IE1vbmV5RmllbGRzIG9uIE1vbmV5IHtcbiAgICAgICAgICAgICAgICB2YWx1ZVxuICAgICAgICAgICAgICAgIGN1cnJlbmN5Q29kZVxuICAgICAgICAgICAgfVxuICAgICAgICBgfSksXG4gICAgfSkudGhlbihyZXMgPT4gcmVzLmpzb24oKSlcbiAgICAgICAudGhlbihyZXMgPT4gcmVzLmRhdGEpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZvcm1hdE1vbmV5KG4sIGMsIGQsIHQpIHtcbiAgICAgICAgdmFyIGMgPSBpc05hTihjID0gTWF0aC5hYnMoYykpID8gMiA6IGMsXG4gICAgICAgICAgICBkID0gZCA9PSB1bmRlZmluZWQgPyBcIi5cIiA6IGQsXG4gICAgICAgICAgICB0ID0gdCA9PSB1bmRlZmluZWQgPyBcIixcIiA6IHQsXG4gICAgICAgICAgICBzID0gbiA8IDAgPyBcIi1cIiA6IFwiXCIsXG4gICAgICAgICAgICBpID0gU3RyaW5nKHBhcnNlSW50KG4gPSBNYXRoLmFicyhOdW1iZXIobikgfHwgMCkudG9GaXhlZChjKSkpLFxuICAgICAgICAgICAgaiA9IChqID0gaS5sZW5ndGgpID4gMyA/IGogJSAzIDogMDtcblxuICAgICAgICByZXR1cm4gcyArIChqID8gaS5zdWJzdHIoMCwgaikgKyB0IDogXCJcIikgKyBpLnN1YnN0cihqKS5yZXBsYWNlKC8oXFxkezN9KSg/PVxcZCkvZywgXCIkMVwiICsgdCkgKyAoYyA/IGQgKyBNYXRoLmFicyhuIC0gaSkudG9GaXhlZChjKS5zbGljZSgyKSA6IFwiXCIpO1xuICAgIH1cblx0XG5cdC8vIEJlZm9yZSBZb3UgTGVhdmUgXG5cdGZ1bmN0aW9uIFByb2R1Y3RzQ2Fyb3VzZWwodGFiKSB7XG5cdFx0aWYoIXRhYi5oYXNDbGFzcygnc2xpY2stc2xpZGVyJykpIHtcblx0ICAgICAgICB0YWIuc2xpY2soe1xuXHQgICAgICAgICAgICBkb3RzOiB0cnVlLFxuXHQgICAgICAgICAgICBhcnJvd3M6IHRydWUsXG5cdCAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMSxcblx0ICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDEsXG5cdCAgICAgICAgICAgIHNsaWRlc1BlclJvdzogMSxcbiAgICAgICAgICAgICAgICByb3dzOiAxLFxuXHQgICAgICAgICAgICBtb2JpbGVGaXJzdDogdHJ1ZSxcblx0ICAgICAgICAgICAgaW5maW5pdGU6IGZhbHNlLFxuXHQgICAgICAgICAgICByZXNwb25zaXZlOiBbXG5cdCAgICAgICAgICAgIHtcblx0ICAgICAgICAgICAgICBicmVha3BvaW50OiAxMDI0LFxuXHQgICAgICAgICAgICAgIHNldHRpbmdzOiB7XG5cdCAgICAgICAgICAgICAgICBzbGlkZXNQZXJSb3c6IDEsXG4gICAgICAgICAgICAgICAgICAgIHJvd3M6IDNcblx0ICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIHtcblx0ICAgICAgICAgICAgICBicmVha3BvaW50OiA3NjcsXG5cdCAgICAgICAgICAgICAgc2V0dGluZ3M6IHtcblx0ICAgICAgICAgICAgICAgIHNsaWRlc1BlclJvdzogMSxcbiAgICAgICAgICAgICAgICAgICAgcm93czogMlxuXHQgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgXVxuXHQgICAgICAgIH0pO1xuXHQgICAgfVxuXHR9XG5cbiAgICBmdW5jdGlvbiBiZWZvcmVZb3VMZWF2ZSgpIHtcbiAgICAgICAgdmFyIGJlZm9yZVlvdUxlYXZlX3RpbWUgPSBwYXJzZUludCgkKCcjYmVmb3JlLXlvdS1sZWF2ZScpLmRhdGEoXCJ0aW1lXCIpKSAqIDYwICogMTAwMDtcbiAgICAgICAgdmFyIGJlZm9yZVlvdUxlYXZlID0gJChcIiNiZWZvcmUteW91LWxlYXZlXCIpO1xuICAgICAgICB2YXIgcHJvZHVjdExvYWRUaW1lID0gYmVmb3JlWW91TGVhdmVfdGltZS8yICsgMTAwO1xuXG4gXHRcdGlmIChiZWZvcmVZb3VMZWF2ZV90aW1lIDwgMikge1xuICAgICAgICBcdGJlZm9yZVlvdUxlYXZlX3RpbWUgPSBiZWZvcmVZb3VMZWF2ZV90aW1lICsgMTAwO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCEkKGJlZm9yZVlvdUxlYXZlKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgXHR2YXIgaWRsZVRpbWUgPSAwO1xuICAgICAgICBcdHZhciB0bXAgPSBqUXVlcnkoJyN0YWItcmVjb21tZW5kZWQgLnByb2R1Y3RHcmlkJyksXG4gICAgICAgIFx0XHRwcm9kdWN0SURTID0gY29udGV4dC50aGVtZVNldHRpbmdzLmhhbG9fYmVmb3JlX3lvdV9sZWF2ZV9yZWNvbW1lbmRlZF9pZCxcbiAgICAgICAgICAgIFx0bGlzdElEcyA9IEpTT04ucGFyc2UoXCJbXCIgKyBwcm9kdWN0SURTICsgXCJdXCIpO1xuXG5cdCAgICAgICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgXHRpZiAobGlzdElEcy5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdCAgICBcdGdldFByb2R1Y3QobGlzdElEcykudGhlbihkYXRhID0+IHtcblx0XHRcdCAgICAgICAgICAgICAgICByZW5kZXJQcm9kdWN0KGRhdGEuc2l0ZS5wcm9kdWN0cy5lZGdlcywgZGF0YS5zaXRlLmN1cnJlbmN5LmRpc3BsYXksIHRtcCk7XG5cdFx0XHQgICAgICAgICAgICAgICAgaGlzdG9yeVByb2R1Y3RzKCk7XG5cdFx0XHQgICAgICAgICAgICB9KTtcblx0XHRcdCAgICBcdH1cblx0ICAgICAgICAgICAgfSwgcHJvZHVjdExvYWRUaW1lKTtcblxuXHQgICAgICAgICAgICB2YXIgc2xpY2tJbnRlcnZhbCA9IHNldEludGVydmFsKGZ1bmN0aW9uKCkge1xuXHQgICAgICAgICAgICBcdHRpbWVySW5jcmVtZW50KCk7XHQgICAgICAgICAgICBcdFxuXHQgICAgICAgICAgICB9LCBiZWZvcmVZb3VMZWF2ZV90aW1lICsgMTAwMCk7XG5cdCAgICAgICAgfSk7XG5cblx0ICAgICAgICAkKGRvY3VtZW50KS5vbignY2xpY2snLCBldmVudCA9PiB7XG5cdCAgICAgICAgICAgIGlmICgkKCdib2R5JykuaGFzQ2xhc3MoJ29wZW5CZWZvcmVZb3VMZWF2ZScpKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAoJChldmVudC50YXJnZXQpLmNsb3Nlc3QoJy5iZWZvcmUteW91LWxlYXZlJykubGVuZ3RoID09PSAwKXtcblx0ICAgICAgICAgICAgICAgICAgICAkKCdib2R5JykucmVtb3ZlQ2xhc3MoJ29wZW5CZWZvcmVZb3VMZWF2ZScpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSk7XG5cblx0ICAgICAgICAkKGRvY3VtZW50KS5vbignY2xpY2snLCAnLmJlZm9yZS15b3UtbGVhdmUtc2VhcmNoIFtkYXRhLXNlYXJjaC1sZWF2ZV0nLCBldmVudCA9PiB7XG5cdCAgICAgICAgXHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdCAgICAgICAgXHR2YXIgJGJlZm9yZUxlYXZlU2VhcmNoID0gJCgnLmJlZm9yZS15b3UtbGVhdmUtc2VhcmNoJyk7XG5cblx0ICAgICAgICAgICAgJGJlZm9yZUxlYXZlU2VhcmNoLnRvZ2dsZUNsYXNzKCdpcy1vcGVuJyk7XG5cblx0ICAgICAgICAgICAgaWYoJGJlZm9yZUxlYXZlU2VhcmNoLmhhc0NsYXNzKCdpcy1vcGVuJykpe1xuXHQgICAgICAgICAgICBcdCRiZWZvcmVMZWF2ZVNlYXJjaC5zaWJsaW5ncygpLmFkZENsYXNzKCdpcy1oaWRkZW4nKTtcblx0ICAgICAgICAgICAgXHQkKCcjc2VhcmNoX3F1ZXJ5MicpLnRyaWdnZXIoJ2ZvY3VzJyk7XG5cdCAgICAgICAgICAgIFx0JGJlZm9yZUxlYXZlLmZpbmQoJy50YWJzLWNvbnRlbnRzJykuYWRkQ2xhc3MoJ2lzLWhpZGRlbicpO1xuXHQgICAgICAgICAgICBcdCQoJy5oYWxvLWJvdHRvbUhlYWRlciAucXVpY2tTZWFyY2hSZXN1bHRzJykuYXBwZW5kVG8oJGJlZm9yZUxlYXZlU2VhcmNoKTtcblx0ICAgICAgICAgICAgXHQkKCcuaGFsby1ib3R0b21IZWFkZXIgLnF1aWNrU2VhcmNoUmVzdWx0c0N1c3RvbScpLmFwcGVuZFRvKCRiZWZvcmVMZWF2ZVNlYXJjaCk7XG5cdCAgICAgICAgICAgIFx0JGJlZm9yZUxlYXZlU2VhcmNoLmZpbmQoJy5xdWlja1NlYXJjaFJlc3VsdHNDdXN0b20nKS5hZGRDbGFzcygnaXMtb3BlbicpO1xuXHQgICAgICAgICAgICB9IGVsc2V7XG5cdCAgICAgICAgICAgIFx0JGJlZm9yZUxlYXZlU2VhcmNoLmZpbmQoJy5xdWlja1NlYXJjaFJlc3VsdHMnKS5hcHBlbmRUbygnLmhhbG8tYm90dG9tSGVhZGVyIC5jb250YWluZXInKTtcblx0ICAgICAgICAgICAgXHQkYmVmb3JlTGVhdmVTZWFyY2guZmluZCgnLnF1aWNrU2VhcmNoUmVzdWx0c0N1c3RvbScpLmFwcGVuZFRvKCcuaGFsby1ib3R0b21IZWFkZXIgLmNvbnRhaW5lcicpO1xuXHQgICAgICAgICAgICBcdCQoJy5oYWxvLWJvdHRvbUhlYWRlciAucXVpY2tTZWFyY2hSZXN1bHRzQ3VzdG9tJykucmVtb3ZlQ2xhc3MoJ2lzLW9wZW4nKTtcblx0ICAgICAgICAgICAgXHQkYmVmb3JlTGVhdmVTZWFyY2guc2libGluZ3MoKS5yZW1vdmVDbGFzcygnaXMtaGlkZGVuJyk7XG5cdCAgICAgICAgICAgIFx0JGJlZm9yZUxlYXZlLmZpbmQoJy50YWJzLWNvbnRlbnRzJykucmVtb3ZlQ2xhc3MoJ2lzLWhpZGRlbicpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSk7XG5cblx0ICAgICAgICAkKGRvY3VtZW50KS5vbigna2V5ZG93biBtb3VzZW1vdmUgdG91Y2hzdGFydCBzY3JvbGwnLCAoZSk9PiB7XG5cdCAgICAgICAgICAgIHJlc2V0VGltZXIoKTtcblx0ICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgZnVuY3Rpb24gdGltZXJJbmNyZW1lbnQoKSB7XG4gICAgICAgICAgICBpZGxlVGltZSA9IGlkbGVUaW1lICsgMTtcbiAgICAgICAgICAgIGlmIChpZGxlVGltZSA+PSAxICYmICEkKCdib2R5Lm9wZW5CZWZvcmVZb3VMZWF2ZScpLmxlbmd0aCApIHtcbiAgICAgICAgICAgICAgICBpZiAoISQoJ2JvZHkub3BlbkJlZm9yZVlvdUxlYXZlJykubGVuZ3RoKSB7XG4gICAgICAgICAgICBcdFx0dmFyIHRhYiA9ICQoJyN0YWItcmVjb21tZW5kZWQgLnByb2R1Y3RHcmlkJyk7XG5cblx0ICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXsgXG5cdFx0ICAgIFx0XHRcdGJlZm9yZVlvdUxlYXZlLnNob3coKTtcblx0XHQgICAgXHRcdFx0JCgnYm9keScpLmFkZENsYXNzKCdvcGVuQmVmb3JlWW91TGVhdmUnKTtcblx0ICAgICAgICAgICAgICAgIFx0UHJvZHVjdHNDYXJvdXNlbCh0YWIpO1xuXHRcdCAgICBcdFx0fSwgMTAwKTtcbiAgICAgICAgICAgIFx0fVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcmVzZXRUaW1lcigpIHtcbiAgICAgICAgICAgIGlkbGVUaW1lID0gLTE7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiByZW5kZXJQcm9kdWN0KHByb2R1Y3QsIGN1ckRpc3BsYXksIHRtcCkge1xuICAgICAgICAgICAgaWYgKHByb2R1Y3QgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgJC5lYWNoKHByb2R1Y3QsIChpbmRleCwgZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpdGVtID0gZWxlbWVudC5wcm9kdWN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgc3ltYm9sID0gY3VyRGlzcGxheS5zeW1ib2wsXG4gICAgICAgICAgICAgICAgICAgICAgICBzeW1ib2xQbGFjZW1lbnQgPSBjdXJEaXNwbGF5LnN5bWJvbFBsYWNlbWVudC50b0xvd2VyQ2FzZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVjaW1hbFRva2VuID0gY3VyRGlzcGxheS5kZWNpbWFsVG9rZW4sXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWNpbWFsUGxhY2VzID0gY3VyRGlzcGxheS5kZWNpbWFsUGxhY2VzLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhvdXNhbmRzVG9rZW4gPSBjdXJEaXNwbGF5LnRob3VzYW5kc1Rva2VuO1xuICAgICAgICAgICAgICAgICAgICBsZXQgdGl0bGUsIHByaWNlO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICgkKCcuYm9keScpLmhhc0NsYXNzKCdpcy1sb2dpbicpIHx8IGNvbnRleHQudGhlbWVTZXR0aW5ncy5yZXN0cmljdF90b19sb2dpbiAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0ucHJpY2VzLnByaWNlUmFuZ2UubWluLnZhbHVlIDwgaXRlbS5wcmljZXMucHJpY2VSYW5nZS5tYXgudmFsdWUgJiYgY29udGV4dC50aGVtZVNldHRpbmdzLnByaWNlX3Jhbmdlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByaWNlTWluID0gKHN5bWJvbFBsYWNlbWVudCA9PSBcImxlZnRcIiA/IHN5bWJvbCA6IFwiXCIpICsgKGZvcm1hdE1vbmV5KGl0ZW0ucHJpY2VzLnByaWNlUmFuZ2UubWluLnZhbHVlLCBkZWNpbWFsUGxhY2VzLCBkZWNpbWFsVG9rZW4sIHRob3VzYW5kc1Rva2VuKSkgKyAoc3ltYm9sUGxhY2VtZW50ICE9IFwibGVmdFwiID8gc3ltYm9sIDogXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJpY2VNYXggPSAoc3ltYm9sUGxhY2VtZW50ID09IFwibGVmdFwiID8gc3ltYm9sIDogXCJcIikgKyAoZm9ybWF0TW9uZXkoaXRlbS5wcmljZXMucHJpY2VSYW5nZS5tYXgudmFsdWUsIGRlY2ltYWxQbGFjZXMsIGRlY2ltYWxUb2tlbiwgdGhvdXNhbmRzVG9rZW4pKSArIChzeW1ib2xQbGFjZW1lbnQgIT0gXCJsZWZ0XCIgPyBzeW1ib2wgOiBcIlwiKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaWNlID0gJzxkaXYgY2xhc3M9XCJwcmljZS1zZWN0aW9uIHByaWNlLXNlY3Rpb24tLXdpdGhvdXRUYXggbm9uLXNhbGUtcHJpY2UtLXdpdGhvdXRUYXggcHJpY2Utbm9uZVwiIHN0eWxlPVwiZGlzcGxheTogbm9uZTtcIj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtcHJvZHVjdC1ub24tc2FsZS1wcmljZS13aXRob3V0LXRheD1cIlwiIGNsYXNzPVwicHJpY2UgcHJpY2UtLW5vbi1zYWxlXCI+PC9zcGFuPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInByaWNlLXNlY3Rpb24gcHJpY2Utc2VjdGlvbi0td2l0aG91dFRheFwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1wcm9kdWN0LXByaWNlLXdpdGhvdXQtdGF4PVwiXCIgY2xhc3M9XCJwcmljZSBwcmljZS0td2l0aG91dFRheFwiPicrcHJpY2VNaW4rJyAtICcrcHJpY2VNYXgrJzwvc3Bhbj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+JztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByaWNlRGVmID0gKHN5bWJvbFBsYWNlbWVudCA9PSBcImxlZnRcIiA/IHN5bWJvbCA6IFwiXCIpICsgKGZvcm1hdE1vbmV5KGl0ZW0ucHJpY2VzLnByaWNlLnZhbHVlLCBkZWNpbWFsUGxhY2VzLCBkZWNpbWFsVG9rZW4sIHRob3VzYW5kc1Rva2VuKSkgKyAoc3ltYm9sUGxhY2VtZW50ICE9IFwibGVmdFwiID8gc3ltYm9sIDogXCJcIik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5wcmljZXMucmV0YWlsUHJpY2UgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5wcmljZXMuYmFzZVByaWNlLnZhbHVlID4gaXRlbS5wcmljZXMucHJpY2UudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByaWNlQmFzID0gKHN5bWJvbFBsYWNlbWVudCA9PSBcImxlZnRcIiA/IHN5bWJvbCA6IFwiXCIpICsgKGZvcm1hdE1vbmV5KGl0ZW0ucHJpY2VzLmJhc2VQcmljZS52YWx1ZSwgZGVjaW1hbFBsYWNlcywgZGVjaW1hbFRva2VuLCB0aG91c2FuZHNUb2tlbikpICsgKHN5bWJvbFBsYWNlbWVudCAhPSBcImxlZnRcIiA/IHN5bWJvbCA6IFwiXCIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmljZSA9ICc8ZGl2IGNsYXNzPVwicHJpY2Utc2VjdGlvbiBwcmljZS1zZWN0aW9uLS13aXRob3V0VGF4IG5vbi1zYWxlLXByaWNlLS13aXRob3V0VGF4XCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtcHJvZHVjdC1ub24tc2FsZS1wcmljZS13aXRob3V0LXRheD1cIlwiIGNsYXNzPVwicHJpY2UgcHJpY2UtLW5vbi1zYWxlXCI+JytwcmljZUJhcysnPC9zcGFuPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwcmljZS1zZWN0aW9uIHByaWNlLXNlY3Rpb24tLXdpdGhvdXRUYXhcIj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1wcm9kdWN0LXByaWNlLXdpdGhvdXQtdGF4PVwiXCIgY2xhc3M9XCJwcmljZSBwcmljZS0td2l0aG91dFRheFwiPicrcHJpY2VEZWYrJzwvc3Bhbj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpY2UgPSAnPGRpdiBjbGFzcz1cInByaWNlLXNlY3Rpb24gcHJpY2Utc2VjdGlvbi0td2l0aG91dFRheCBub24tc2FsZS1wcmljZS0td2l0aG91dFRheCBwcmljZS1ub25lXCIgc3R5bGU9XCJkaXNwbGF5OiBub25lO1wiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLXByb2R1Y3Qtbm9uLXNhbGUtcHJpY2Utd2l0aG91dC10YXg9XCJcIiBjbGFzcz1cInByaWNlIHByaWNlLS1ub24tc2FsZVwiPjwvc3Bhbj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicHJpY2Utc2VjdGlvbiBwcmljZS1zZWN0aW9uLS13aXRob3V0VGF4XCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtcHJvZHVjdC1wcmljZS13aXRob3V0LXRheD1cIlwiIGNsYXNzPVwicHJpY2UgcHJpY2UtLXdpdGhvdXRUYXhcIj4nK3ByaWNlRGVmKyc8L3NwYW4+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0ucHJpY2VzLnJldGFpbFByaWNlLnZhbHVlID4gaXRlbS5wcmljZXMucHJpY2UudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByaWNlUmV0ID0gKHN5bWJvbFBsYWNlbWVudCA9PSBcImxlZnRcIiA/IHN5bWJvbCA6IFwiXCIpICsgKGZvcm1hdE1vbmV5KGl0ZW0ucHJpY2VzLnJldGFpbFByaWNlLnZhbHVlLCBkZWNpbWFsUGxhY2VzLCBkZWNpbWFsVG9rZW4sIHRob3VzYW5kc1Rva2VuKSkgKyAoc3ltYm9sUGxhY2VtZW50ICE9IFwibGVmdFwiID8gc3ltYm9sIDogXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpY2UgPSAnPGRpdiBjbGFzcz1cInByaWNlLXNlY3Rpb24gcHJpY2Utc2VjdGlvbi0td2l0aG91dFRheCBub24tc2FsZS1wcmljZS0td2l0aG91dFRheFwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLXByb2R1Y3Qtbm9uLXNhbGUtcHJpY2Utd2l0aG91dC10YXg9XCJcIiBjbGFzcz1cInByaWNlIHByaWNlLS1ub24tc2FsZVwiPicrcHJpY2VSZXQrJzwvc3Bhbj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicHJpY2Utc2VjdGlvbiBwcmljZS1zZWN0aW9uLS13aXRob3V0VGF4XCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtcHJvZHVjdC1wcmljZS13aXRob3V0LXRheD1cIlwiIGNsYXNzPVwicHJpY2UgcHJpY2UtLXdpdGhvdXRUYXhcIj4nK3ByaWNlRGVmKyc8L3NwYW4+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaWNlID0gJzxkaXYgY2xhc3M9XCJwcmljZS1zZWN0aW9uIHByaWNlLXNlY3Rpb24tLXdpdGhvdXRUYXggbm9uLXNhbGUtcHJpY2UtLXdpdGhvdXRUYXggcHJpY2Utbm9uZVwiIHN0eWxlPVwiZGlzcGxheTogbm9uZTtcIj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1wcm9kdWN0LW5vbi1zYWxlLXByaWNlLXdpdGhvdXQtdGF4PVwiXCIgY2xhc3M9XCJwcmljZSBwcmljZS0tbm9uLXNhbGVcIj48L3NwYW4+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInByaWNlLXNlY3Rpb24gcHJpY2Utc2VjdGlvbi0td2l0aG91dFRheFwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLXByb2R1Y3QtcHJpY2Utd2l0aG91dC10YXg9XCJcIiBjbGFzcz1cInByaWNlIHByaWNlLS13aXRob3V0VGF4XCI+JytwcmljZURlZisnPC9zcGFuPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pic7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcmljZSA9ICc8cCB0cmFuc2xhdGU+TG9nIGluIGZvciBwcmljaW5nPC9wPic7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB2YXIgcHJvZHVjdFRpdGxlLFxuICAgICAgICAgICAgICAgICAgICBcdCR0YWIgPSAkYmVmb3JlTGVhdmUuZmluZCgnI3RhYi1yZWNvbW1lbmRlZCcpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29udGV4dC50aGVtZVNldHRpbmdzLmhhbG9fY2FyZF90aXRsZSA9PSAnZWxsaXBzaXMnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9kdWN0VGl0bGUgPSAnPGEgaHJlZj1cIicraXRlbS5wYXRoKydcIiBjbGFzcz1cImNsYW1wXCIgc3R5bGU9XCItd2Via2l0LWJveC1vcmllbnQ6IHZlcnRpY2FsOyAtd2Via2l0LWxpbmUtY2xhbXA6IDE7XCIgYXJpYS1sYWJlbD1cIkxpbmsgR28gVG8gVGhpcyBQcm9kdWN0XCI+JytpdGVtLm5hbWUrJzwvYT4nXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9kdWN0VGl0bGUgPSAnPGEgaHJlZj1cIicraXRlbS5wYXRoKydcIiBjbGFzcz1cImNsYW1wXCIgYXJpYS1sYWJlbD1cIkxpbmsgR28gVG8gVGhpcyBQcm9kdWN0XCI+JytpdGVtLm5hbWUrJzwvYT4nXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAkdGFiLmZpbmQoJy5uby1wcm9kdWN0cycpLnJlbW92ZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGh0bWxfY2FyZCA9ICc8ZGl2IGNsYXNzPVwicHJvZHVjdENhcm91c2VsLXNsaWRlXCI+XFxcbiAgICAgICAgICAgICAgICAgICAgXHRcdFx0XHQ8ZGl2IGNsYXNzPVwicHJvZHVjdFwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFydGljbGUgY2xhc3M9XCJjYXJkXCIgZGF0YS1wcm9kdWN0LWlkPVwiJytpdGVtLmVudGl0eUlkKydcIj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZmlndXJlIGNsYXNzPVwiY2FyZC1maWd1cmVcIj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtaW1nLWNvbnRhaW5lclwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cIicraXRlbS5wYXRoKydcIj48aW1nIGNsYXNzPVwiY2FyZC1pbWFnZVwiIHNyYz1cIicraXRlbS5kZWZhdWx0SW1hZ2UuaW1nNzBweCsnXCIgYWx0PVwiJytpdGVtLmRlZmF1bHRJbWFnZS5hbHRUZXh0KydcIiB0aXRsZT1cIicraXRlbS5kZWZhdWx0SW1hZ2UuYWx0VGV4dCsnXCI+PC9hPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2ZpZ3VyZT5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz1cImNhcmQtdGl0bGVcIj4nK3Byb2R1Y3RUaXRsZSsnPC9oND5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtdGV4dCBjYXJkLXByaWNlXCI+JytwcmljZSsnPC9kaXY+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLW9wdGlvbiBjYXJkLW9wdGlvbi0nK2l0ZW0uZW50aXR5SWQrJ1wiPlxcXG5cdFx0XHRcdFx0XHRcdFx0XHQgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZmllbGRcIj48L2Rpdj5cXFxuXHRcdFx0XHRcdFx0XHRcdFx0ICAgICAgICAgICAgPC9kaXY+XFxcblx0XHRcdFx0XHRcdFx0ICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiJytpdGVtLnBhdGgrJ1wiIGNsYXNzPVwiY2FyZC1hY3Rpb25cIj5cXFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInRleHRcIj5EZXRhaWxzPC9zcGFuPlxcXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCAgICAgICAgPC9hPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hcnRpY2xlPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4nO1xuXG4gICAgICAgICAgICAgICAgICAgIHRtcC5hcHBlbmQoaHRtbF9jYXJkKTtcbiAgICAgICAgICAgICAgICAgICAgaGFsb0FkZE9wdGlvbkZvclByb2R1Y3QoY29udGV4dCwgJ3RhYi1yZWNvbW1lbmRlZCcpO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBjb3VudCA9ICQoJyN0YWItcmVjb21tZW5kZWQgLnByb2R1Y3RHcmlkIC5wcm9kdWN0Q2Fyb3VzZWwtc2xpZGUnKS5sZW5ndGg7XG5cblx0ICAgICAgICAgICAgICAgICQoJyNiZWZvcmUteW91LWxlYXZlIC5iZWZvcmUteW91LWxlYXZlLXRhYiAucmVjb21tZW5kZWQgLmNvdW50JykuaHRtbChjb3VudCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAkKCcuYmVmb3JlLXlvdS1sZWF2ZS1jb250aW51ZScpLm9uKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIGlmICgkKCdib2R5JykuaGFzQ2xhc3MoJ29wZW5CZWZvcmVZb3VMZWF2ZScpKSB7XG4gICAgICAgICAgICAgICAgJCgnYm9keScpLnJlbW92ZUNsYXNzKCdvcGVuQmVmb3JlWW91TGVhdmUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgJCgnLmhhbG8tYmFja2dyb3VuZCcpLm9uKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIGlmICgkKCdib2R5JykuaGFzQ2xhc3MoJ29wZW5CZWZvcmVZb3VMZWF2ZScpKSB7XG4gICAgICAgICAgICAgICAgJCgnYm9keScpLnJlbW92ZUNsYXNzKCdvcGVuQmVmb3JlWW91TGVhdmUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgJChcIiNiZWZvcmUteW91LWxlYXZlIC5iZWZvcmUteW91LWxlYXZlLXRhYiAudGFiXCIpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdGFiSWQ9ICQodGhpcykuZGF0YSgnaWQnKTtcblx0ICAgIFx0dmFyIHRhYiA9ICQoXCIuYmVmb3JlLXlvdS1sZWF2ZS10YWIgLnRhYnMtY29udGVudHMgI3RhYi1cIit0YWJJZCtcIiAucHJvZHVjdEdyaWRcIik7XG5cdCAgICBcdHNldFRpbWVvdXQoZnVuY3Rpb24oKXtQcm9kdWN0c0Nhcm91c2VsKHRhYil9LDIwKTtcblx0ICAgIFx0XG5cdCAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoaXN0b3J5UHJvZHVjdHMoKXtcbiAgICBcdEJDX1Byb2R1Y3RzLnJlY29yZEhpc3RvcnkoKTtcblxuICAgIFx0dmFyIGNvb2tpZVZhbHVlID0gZ2V0Q29va2llKFwiYmlnY29tbWVyY2VfaGlzdG9yeVwiKTtcblxuICAgIFx0aWYgKCEoY29va2llVmFsdWUgIT09IG51bGwgJiYgY29va2llVmFsdWUgIT09IHVuZGVmaW5lZCAmJiBjb29raWVWYWx1ZSAhPT0gXCJcIikpIHtcblx0XHQgICAgJCgnI2JlZm9yZS15b3UtbGVhdmUgLnRhYi5oaXN0b3J5IC5jb3VudCcpLnRleHQoXCIwXCIpO1xuXHRcdH0gZWxzZXtcblx0XHRcdEJDX1Byb2R1Y3RzLnNob3dIaXN0b3J5KHtcblx0XHRcdCAgICBob3dNYW55VG9TaG93OiBjb250ZXh0LnRoZW1lU2V0dGluZ3MuaGFsb19iZWZvcmVfeW91X2xlYXZlX2hpc3RvcnlfY291bnQsXG5cdFx0XHQgICAgaG93TWFueVRvU3RvcmVJbk1lbW9yeTogY29udGV4dC50aGVtZVNldHRpbmdzLmhhbG9fYmVmb3JlX3lvdV9sZWF2ZV9oaXN0b3J5X2NvdW50LFxuXHRcdFx0ICAgIG9uQ29tcGxldGU6IGZ1bmN0aW9uKCkge31cblx0XHRcdH0pO1xuXHRcdH1cbiAgICB9XG5cblx0YmVmb3JlWW91TGVhdmUoKTtcbn1cbiIsImltcG9ydCB1dGlscyBmcm9tICdAYmlnY29tbWVyY2Uvc3RlbmNpbC11dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgaWYgKGNvbnRleHQudGhlbWVTZXR0aW5ncy5oYWxvX3NoaXBwaW5nID09IHRydWUpe1xuICAgICAgICB2YXIgYW5pbWF0b3IgPSBuZXcgcGVyY2VuQW5pbWF0b3IoKTtcblxuICAgICAgICBjb25zdCB1cHNlbGxNZXNzYWdlID0gWyc8c3Bhbj4nK2NvbnRleHQudGhlbWVTZXR0aW5ncy5oYWxvX3NoaXBwaW5nX3JlcXVpcmVkKyc8L3NwYW4+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgJzxzcGFuPicrY29udGV4dC50aGVtZVNldHRpbmdzLmhhbG9fc2hpcHBpbmdfcmVtYWluaW5nKyc8L3NwYW4+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgJzxzcGFuPicrY29udGV4dC50aGVtZVNldHRpbmdzLmhhbG9fc2hpcHBpbmdfbWF0Y2hlZCsnPC9zcGFuPiddO1xuXG4gICAgICAgIGZ1bmN0aW9uIGxvYWRGcmVlU2hpcHBpbmdNZXNzYWdlKCl7XG4gICAgICAgICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnaGFsb3RoZW1lcy9zaGlwcGluZy9oYWxvLWNhbGN1bGF0ZS1mcmVlLXNoaXBwaW5nLXRtcCdcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHV0aWxzLmFwaS5jYXJ0LmdldENvbnRlbnQob3B0aW9ucywgKGVyciwgcmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgICAgICBzaG93RnJlZVNoaXBwaW5nTWVzc2FnZShyZXNwb25zZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxvYWRGcmVlU2hpcHBpbmdNZXNzYWdlKCk7XG5cbiAgICAgICAgZnVuY3Rpb24gc2hvd0ZyZWVTaGlwcGluZ01lc3NhZ2UobWVzc2FnZSkge1xuICAgICAgICAgICAgaWYoJChtZXNzYWdlKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgJChtZXNzYWdlKS5maW5kKCcuaGFsb0NhbHVsYXRlRnJlZVNoaXBwaW5nLXRleHQnKS5lYWNoKChpbmRleCwgZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZigkKCcuY29uZGl0aW9uX3JlbWFpbmluZycsIGVsZW1lbnQpLnRleHQoKSAhPSBcIlwiIHx8ICQoJy5jb25ncmF0dWxhdGlvbicsIGVsZW1lbnQpLnRleHQoKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZihjb250ZXh0LnRoZW1lU2V0dGluZ3MuaGFsb19zaGlwcGluZ190eXBlID09ICdhbGwnKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93UHJvZ3Jlc3MobWVzc2FnZSwgZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQudGhlbWVTZXR0aW5ncy5oYWxvX3NoaXBwaW5nX3R5cGUgPT0gJ2N1c3RvbScpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb3VudHJ5Q29kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnRyeSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnRyeUxpc3Q7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmdldFNjcmlwdCgnaHR0cHM6Ly9zc2wuZ2VvcGx1Z2luLm5ldC9qYXZhc2NyaXB0LmdwP2s9OTI0NzU1NmVjOTFjNzFlOScsIGV2ZW50ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnRyeUNvZGUgPSBnZW9wbHVnaW5fY291bnRyeUNvZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnRyeSA9ICQoJy5jb3VudHJ5JywgZWxlbWVudCkudGV4dCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3VudHJ5TGlzdCA9IGNvdW50cnkuc3BsaXQoXCIsXCIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkLmluQXJyYXkoY291bnRyeUNvZGUsIGNvdW50cnlMaXN0KSAhPSAtMSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93UHJvZ3Jlc3MobWVzc2FnZSwgZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcuaGFsby1mcmVlLXNoaXBwaW5nLW1lc3NhZ2UnKS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgaWYgKCQobWVzc2FnZSkuZmluZCgnLmhhbG9DYWx1bGF0ZUZyZWVTaGlwcGluZy10ZXh0JykubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgJCgnLmhhbG8tZnJlZS1zaGlwcGluZy1tZXNzYWdlJykuaGlkZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHNob3dQcm9ncmVzcyhtZXNzYWdlLCBzY29wZSkge1xuICAgICAgICAgICAgdmFyIG1heF9wZXJjZW50ID0gMCxcbiAgICAgICAgICAgICAgICBjbGFzc1Byb2dyZXNzO1xuXG4gICAgICAgICAgICBjb25zdCBjb25kaXRpb25fcmVxdWlyZWQgPSAkKCcuY29uZGl0aW9uX3JlcXVpcmVkJywgc2NvcGUpLnRleHQoKSxcbiAgICAgICAgICAgICAgICBjb25kaXRpb25fbWF0Y2hlZCA9ICQoJy5jb25kaXRpb25fbWF0Y2hlZCcsIHNjb3BlKS50ZXh0KCksXG4gICAgICAgICAgICAgICAgY29uZGl0aW9uX3JlbWFpbmluZyA9ICQoJy5jb25kaXRpb25fcmVtYWluaW5nJywgc2NvcGUpLnRleHQoKSxcbiAgICAgICAgICAgICAgICBudW1fcmVxdWlyZWQgPSAoY29uZGl0aW9uX3JlcXVpcmVkICE9IFwiXCIgPyBOdW1iZXIoY29uZGl0aW9uX3JlcXVpcmVkLnJlcGxhY2UoL1teMC05Li1dKy9nLFwiXCIpKSA6IDApLFxuICAgICAgICAgICAgICAgIG51bV9tYXRjaGVkID0gKGNvbmRpdGlvbl9tYXRjaGVkICE9IFwiXCIgPyBOdW1iZXIoY29uZGl0aW9uX21hdGNoZWQucmVwbGFjZSgvW14wLTkuLV0rL2csXCJcIikpIDogMCksXG4gICAgICAgICAgICAgICAgbnVtX3JlbWFpbmluZyA9IChjb25kaXRpb25fcmVtYWluaW5nICE9IFwiXCIgPyBOdW1iZXIoY29uZGl0aW9uX3JlbWFpbmluZy5yZXBsYWNlKC9bXjAtOS4tXSsvZyxcIlwiKSkgOiAwKTtcblxuICAgICAgICAgICAgdmFyIHBlcmNlbnQgPSBwYXJzZUludChudW1fbWF0Y2hlZC9udW1fcmVxdWlyZWQgKiAxMDApO1xuICAgICAgICAgICAgcGVyY2VudCA9IChwZXJjZW50ID4gMTAwID8gMTAwIDogcGVyY2VudCk7XG5cbiAgICAgICAgICAgIGlmKG51bV9yZXF1aXJlZCA9PSBudW1fcmVtYWluaW5nKXtcbiAgICAgICAgICAgICAgICBwZXJjZW50ID0gMTAwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZigkKCcuY29uZ3JhdHVsYXRpb24nLCBzY29wZSkudGV4dCgpICE9IFwiXCIpe1xuICAgICAgICAgICAgICAgIHBlcmNlbnQgPSAxMDA7XG4gICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgaWYocGVyY2VudCA+IG1heF9wZXJjZW50KXtcbiAgICAgICAgICAgICAgICBtYXhfcGVyY2VudCA9IHBlcmNlbnQ7XG4gICAgICAgICAgICB9IGVsc2V7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZihwZXJjZW50IDw9IDUwKSB7XG4gICAgICAgICAgICAgICAgY2xhc3NQcm9ncmVzcyA9IFwicHJvZ3Jlc3Mtc2hpcHBpbmctNTBcIjtcbiAgICAgICAgICAgICAgICBtZXNzYWdlID0gdXBzZWxsTWVzc2FnZVsxXS5yZXBsYWNlKCd7cmVtYWluaW5nfScsIGNvbmRpdGlvbl9yZW1haW5pbmcpO1xuICAgICAgICAgICAgfSBlbHNlIGlmKHBlcmNlbnQgPD0gOTApIHtcbiAgICAgICAgICAgICAgICBjbGFzc1Byb2dyZXNzID0gXCJwcm9ncmVzcy1zaGlwcGluZy05MFwiO1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSB1cHNlbGxNZXNzYWdlWzFdLnJlcGxhY2UoJ3tyZW1haW5pbmd9JywgY29uZGl0aW9uX3JlbWFpbmluZyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYocGVyY2VudCA8IDEwMCkge1xuICAgICAgICAgICAgICAgIGNsYXNzUHJvZ3Jlc3MgPSBcInByb2dyZXNzLXNoaXBwaW5nLTEwMFwiO1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSB1cHNlbGxNZXNzYWdlWzFdLnJlcGxhY2UoJ3tyZW1haW5pbmd9JywgY29uZGl0aW9uX3JlbWFpbmluZyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYocGVyY2VudCA9PSAxMDApe1xuICAgICAgICAgICAgICAgIGNsYXNzUHJvZ3Jlc3MgPSBcInByb2dyZXNzLXNoaXBwaW5nLTEwMFwiO1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSB1cHNlbGxNZXNzYWdlWzJdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgcHJvZ3Jlc3MgPSAnPGRpdiBjbGFzcz1cInByb2dyZXNzLXNoaXBwaW5nICcrY2xhc3NQcm9ncmVzcysnXCIgcm9sZT1cInByb2dyZXNzYmFyXCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicHJvZ3Jlc3MtbWV0ZXJcIiBzdHlsZT1cIndpZHRoOiAnK3BlcmNlbnQrJyU7XCI+JytwZXJjZW50KyclPC9kaXY+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pic7XG4gICAgICAgICAgICBpZih3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUgPT0gY29udGV4dC51cmxzLmNhcnQpe1xuICAgICAgICAgICAgICAgIHZhciBwYWdlQ2FydCA9ICQoJy5wYWdlLWNhcnQnKTtcblxuICAgICAgICAgICAgICAgIHByb2dyZXNzICs9ICc8ZGl2IGNsYXNzPVwic2hpcHBpbmctbWVzc2FnZVwiPicrbWVzc2FnZSsnPC9kaXY+JztcblxuICAgICAgICAgICAgICAgIGlmKHBhZ2VDYXJ0LmZpbmQoJy5oYWxvLWZyZWUtc2hpcHBpbmctbWVzc2FnZScpLmxlbmd0aCA+IDApe1xuICAgICAgICAgICAgICAgICAgICBwYWdlQ2FydC5maW5kKCcuaGFsby1mcmVlLXNoaXBwaW5nLW1lc3NhZ2UnKS5yZW1vdmVDbGFzcygnYW5pbWF0ZWQtbG9hZGluZycpO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYWdlQ2FydC5maW5kKCcucHJvZ3Jlc3Mtc2hpcHBpbmcnKS5hZGRDbGFzcyhjbGFzc1Byb2dyZXNzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2VDYXJ0LmZpbmQoJy5tZXNzYWdlJykuaHRtbChtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2VDYXJ0LmZpbmQoJy5wcm9ncmVzcy1tZXRlcicpLmNzcygnd2lkdGgnLCBwZXJjZW50ICsgJyUnKS5odG1sKCc8c3BhbiBjbGFzcz1cInByb2dyZXNzLXBlcmNlbnRcIj4nK3BlcmNlbnQrJyU8L3NwYW4+Jyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdG9yLmFuaW1hdGUocGVyY2VudCk7XG4gICAgICAgICAgICAgICAgICAgIH0sIDIwMCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcGFnZUNhcnQuZmluZCgnLmNhcnQtbm90aWZpY2F0aW9uJykuYmVmb3JlKCc8ZGl2IGNsYXNzPVwiaGFsby1mcmVlLXNoaXBwaW5nLW1lc3NhZ2VcIj4nICsgcHJvZ3Jlc3MgKyAnPC9kaXY+Jyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmKCQoJ2JvZHknKS5oYXNDbGFzcygnb3BlbkNhcnRTaWRlYmFyJykpe1xuICAgICAgICAgICAgICAgIHZhciBwcmV2aWV3Q2FydCA9ICQoJy5wcmV2aWV3Q2FydCcpO1xuXG4gICAgICAgICAgICAgICAgcHJvZ3Jlc3MgKz0gJzxkaXYgY2xhc3M9XCJzaGlwcGluZy1tZXNzYWdlXCI+JyttZXNzYWdlKyc8L2Rpdj4nO1xuXG4gICAgICAgICAgICAgICAgaWYocHJldmlld0NhcnQuZmluZCgnLmhhbG8tZnJlZS1zaGlwcGluZy1tZXNzYWdlJykubGVuZ3RoID4gMCl7XG4gICAgICAgICAgICAgICAgICAgIHByZXZpZXdDYXJ0LmZpbmQoJy5oYWxvLWZyZWUtc2hpcHBpbmctbWVzc2FnZScpLnJlbW92ZUNsYXNzKCdhbmltYXRlZC1sb2FkaW5nJyk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpZXdDYXJ0LmZpbmQoJy5wcm9ncmVzcy1zaGlwcGluZycpLmFkZENsYXNzKGNsYXNzUHJvZ3Jlc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlld0NhcnQuZmluZCgnLm1lc3NhZ2UnKS5odG1sKG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlld0NhcnQuZmluZCgnLnByb2dyZXNzLW1ldGVyJykuY3NzKCd3aWR0aCcsIHBlcmNlbnQgKyAnJScpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRvci5hbmltYXRlKHBlcmNlbnQpO1xuICAgICAgICAgICAgICAgICAgICB9LCAyMDApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHByZXZpZXdDYXJ0LmZpbmQoJy5wcmV2aWV3Q2FydEhlYWRlcicpLmFmdGVyKCc8ZGl2IGNsYXNzPVwiaGFsby1mcmVlLXNoaXBwaW5nLW1lc3NhZ2VcIj4nICsgcHJvZ3Jlc3MgKyAnPC9kaXY+Jyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSAgZWxzZSBpZigkKCdib2R5JykuaGFzQ2xhc3MoJ2hhcy1hY3RpdmVNb2RhbCcpKXtcbiAgICAgICAgICAgICAgICB2YXIgcHJldmlld0NhcnQgPSAkKCcjcHJldmlld01vZGFsJyk7XG5cbiAgICAgICAgICAgICAgICBwcm9ncmVzcyArPSAnPGRpdiBjbGFzcz1cInNoaXBwaW5nLW1lc3NhZ2VcIj4nK21lc3NhZ2UrJzwvZGl2Pic7XG5cbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYocHJldmlld0NhcnQuZmluZCgnLmhhbG8tZnJlZS1zaGlwcGluZy1tZXNzYWdlJykubGVuZ3RoID4gMCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2aWV3Q2FydC5maW5kKCcuaGFsby1mcmVlLXNoaXBwaW5nLW1lc3NhZ2UnKS5yZW1vdmVDbGFzcygnYW5pbWF0ZWQtbG9hZGluZycpO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpZXdDYXJ0LmZpbmQoJy5wcm9ncmVzcy1zaGlwcGluZycpLmFkZENsYXNzKGNsYXNzUHJvZ3Jlc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlld0NhcnQuZmluZCgnLm1lc3NhZ2UnKS5odG1sKG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlld0NhcnQuZmluZCgnLnByb2dyZXNzLW1ldGVyJykuY3NzKCd3aWR0aCcsIHBlcmNlbnQgKyAnJScpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRvci5hbmltYXRlKHBlcmNlbnQpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlld0NhcnQucHJlcGVuZCgnPGRpdiBjbGFzcz1cImhhbG8tZnJlZS1zaGlwcGluZy1tZXNzYWdlXCI+JyArIHByb2dyZXNzICsgJzwvZGl2PicpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgMTAwMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzaG93VGltZXIoKSB7XG4gICAgICAgICAgaWYgKGFuaW1hdG9yLmN1clBlcmNlbnRhZ2UgPCBhbmltYXRvci50YXJnZXRQZXJjZW50YWdlKSB7XG4gICAgICAgICAgICBhbmltYXRvci5jdXJQZXJjZW50YWdlICs9IDE7XG4gICAgICAgICAgfSBlbHNlIGlmIChhbmltYXRvci5jdXJQZXJjZW50YWdlID4gYW5pbWF0b3IudGFyZ2V0UGVyY2VudGFnZSkge1xuICAgICAgICAgICAgYW5pbWF0b3IuY3VyUGVyY2VudGFnZSAtPSAxO1xuICAgICAgICAgIH1cblxuICAgICAgICAgICQoYW5pbWF0b3Iub3V0cHV0U2VsZWN0b3IpLnRleHQoYW5pbWF0b3IuY3VyUGVyY2VudGFnZSArIFwiJVwiKTtcblxuICAgICAgICAgIGlmIChhbmltYXRvci5jdXJQZXJjZW50YWdlICE9IGFuaW1hdG9yLnRhcmdldFBlcmNlbnRhZ2UpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoc2hvd1RpbWVyLCBhbmltYXRvci5hbmltYXRpb25TcGVlZClcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBwZXJjZW5BbmltYXRvcigpIHtcbiAgICAgICAgICB0aGlzLmFuaW1hdGlvblNwZWVkID0xMDtcbiAgICAgICAgICB0aGlzLmN1clBlcmNlbnRhZ2UgPSAwO1xuICAgICAgICAgIHRoaXMudGFyZ2V0UGVyY2VudGFnZSA9IDA7XG4gICAgICAgICAgdGhpcy5vdXRwdXRTZWxlY3RvciA9IFwiLnByb2dyZXNzLXBlcmNlbnRcIjtcblxuICAgICAgICAgIHRoaXMuYW5pbWF0ZSA9IGZ1bmN0aW9uKHBlcmNlbnRhZ2UpIHtcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0UGVyY2VudGFnZSA9IHBlcmNlbnRhZ2U7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KHNob3dUaW1lciwgdGhpcy5hbmltYXRpb25TcGVlZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHV0aWxzIGZyb20gJ0BiaWdjb21tZXJjZS9zdGVuY2lsLXV0aWxzJztcbmltcG9ydCB7IGRlZmF1bHRNb2RhbCB9IGZyb20gJy4uL2dsb2JhbC9tb2RhbCc7XG5pbXBvcnQgaGFsb05ld3NsZXR0ZXJQb3B1cCBmcm9tICcuL2hhbG9OZXdzbGV0dGVyUG9wdXAnO1xuaW1wb3J0IGhhbG9SZWNlbnRseUJvdWdodFBvcHVwIGZyb20gJy4vaGFsb1JlY2VudGx5Qm91Z2h0UG9wdXAnO1xuaW1wb3J0IGhhbG9SZWNlbnRseVZpZXdlZFByb2R1Y3QgZnJvbSAnLi9oYWxvUmVjZW50bHlWaWV3ZWRQcm9kdWN0JztcbmltcG9ydCBoYWxvQmVmb3JlWW91TGVhdmUgZnJvbSAnLi9oYWxvQmVmb3JlWW91TGVhdmUnO1xuaW1wb3J0IGhhbG9NZWdhTWVudUVkaXRvciBmcm9tICcuL2hhbG9NZWdhTWVudUVkaXRvcic7XG5pbXBvcnQgaGFsb01lZ2FNZW51RWRpdG9yQ3VzdG9tIGZyb20gJy4vaGFsb01lZ2FNZW51RWRpdG9yQ3VzdG9tJztcbmltcG9ydCBoYWxvQWpheExvZ2luUG9wdXAgZnJvbSAnLi9oYWxvQWpheExvZ2luUG9wdXAnO1xuaW1wb3J0IGhhbG9BZGRPcHRpb25Gb3JQcm9kdWN0IGZyb20gJy4vaGFsb0FkZE9wdGlvbkZvclByb2R1Y3QnO1xuaW1wb3J0IEFaQnJhbmRzIGZyb20gJy4vaGFsb0FaYnJhbmRzJztcbmltcG9ydCBoYWxvQWpheEFkZFRvQ2FydCBmcm9tICcuL2hhbG9BamF4QWRkVG9DYXJ0JztcbmltcG9ydCBoYWxvSG9tZVByb2R1Y3RMb29rYm9vayBmcm9tICcuL2hhbG9Ib21lUHJvZHVjdExvb2tib29rJztcbmltcG9ydCBtb2JpbGVNZW51VG9nZ2xlIGZyb20gJy4uL2dsb2JhbC9tb2JpbGUtbWVudS10b2dnbGUnO1xuaW1wb3J0IHF1aWNrVmlldyBmcm9tICcuLi9nbG9iYWwvcXVpY2stdmlldyc7XG5pbXBvcnQgbWVudSBmcm9tICcuLi9nbG9iYWwvbWVudSc7XG5pbXBvcnQgcHJpdmFjeUNvb2tpZU5vdGlmaWNhdGlvbiBmcm9tICcuLi9nbG9iYWwvY29va2llTm90aWZpY2F0aW9uJztcbmltcG9ydCBsb2FkaW5nUHJvZ3Jlc3NCYXIgZnJvbSAnLi4vZ2xvYmFsL2xvYWRpbmctcHJvZ3Jlc3MtYmFyJztcbmltcG9ydCBxdWlja1NlYXJjaCBmcm9tICcuLi9nbG9iYWwvcXVpY2stc2VhcmNoJztcbmltcG9ydCBoYWxvQXNrQW5FeHBlcnRQb3B1cCBmcm9tICcuL2hhbG9Bc2tBbkV4cGVydFBvcHVwJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29udGV4dCkge1xuICAgIGNvbnN0ICRjb250ZXh0ID0gY29udGV4dCxcbiAgICAgICAgdGhlbWVfc2V0dGluZ3MgPSBjb250ZXh0LnRoZW1lU2V0dGluZ3M7XG5cbiAgICB2YXIgJGhlYWRlciA9ICQoJ2hlYWRlci5oZWFkZXInKSxcbiAgICAgICAgaGVpZ2h0X3Byb21vdGlvbiA9ICQoJy5oYWxvLXRvcEhlYWRlcicpLm91dGVySGVpZ2h0KCksXG4gICAgICAgIGhlaWdodF9oZWFkZXIgPSAkaGVhZGVyLm91dGVySGVpZ2h0KCk7XG5cbiAgICBpZiAoJCgnLmhlYWRlci1sYXlvdXQtMicpLmxlbmd0aCkge1xuICAgICAgICBoZWlnaHRfaGVhZGVyID0gJGhlYWRlci5vdXRlckhlaWdodCgpIC0gJCgnLmJvdHRvbUhlYWRlci1jb250YWluZXInKS5vdXRlckhlaWdodCgpO1xuICAgIH1cblxuICAgIGlmICgkKCcuaGVhZGVyLWxheW91dC00JykubGVuZ3RoKSB7XG4gICAgICAgIGhlaWdodF9oZWFkZXIgPSAwO1xuICAgIH1cblxuICAgIHZhciBzY3JvbGxfcG9zaXRpb24gPSAkKHdpbmRvdykuc2Nyb2xsVG9wKCk7XG5cbiAgICB2YXIgY2hlY2tKU19sb2FkID0gdHJ1ZSxcbiAgICAgICAgY2hlY2tfbG9hZFByb2R1Y3RDYXJvdXNlbCA9IHRydWUsXG4gICAgICAgIGNoZWNrX2xvYWRQcm9kdWN0R3JpZCA9IHRydWUsXG4gICAgICAgIGNoZWNrX2hvbWVQcm9kdWN0VGFiQnlDYXRlZ29yeSA9IHRydWUsXG4gICAgICAgIGNoZWNrX2hvbWVMUENhcm91c2VsID0gdHJ1ZSxcbiAgICAgICAgY2hlY2tfaG9tZUltYWdlQ2Fyb3VzZWwgPSB0cnVlLFxuICAgICAgICBjaGVja19ob21lSW1hZ2VJbnN0YWdyYW1DYXJvdXNlbCA9IHRydWUsXG4gICAgICAgIGNoZWNrX2hvbWVJbWFnZUluc3RhZ3JhbTJDYXJvdXNlbCA9IHRydWUsXG4gICAgICAgIGNoZWNrX2hvbWVJbWFnZUdhbGxlcnlDYXJvdXNlbCA9IHRydWUsXG4gICAgICAgIGNoZWNrX2hvbWVQb3B1bGFyQ2F0ZWdvcnlDYXJvdXNlbCA9IHRydWUsXG4gICAgICAgIGNoZWNrX2hvbWVMb29rQm9vazFDYXJvdXNlbCA9IHRydWUsXG4gICAgICAgIGNoZWNrX2hvbWVMb29rQm9vazJDYXJvdXNlbCA9IHRydWUsXG4gICAgICAgIGNoZWNrX2hvbWVDdXN0b21lckNhcm91c2VsID0gdHJ1ZSxcbiAgICAgICAgY2hlY2tfaG9tZUJsb2dQb3N0c0Nhcm91c2VsID0gdHJ1ZSxcbiAgICAgICAgY2hlY2tfaG9tZUltYWdlUG9saWN5Q2Fyb3VzZWwgPSB0cnVlLFxuICAgICAgICBjaGVja19ob21lQ2F0ZWdvcnlDYXJvdXNlbCA9IHRydWU7XG5cbiAgICBpZiAoJCgnI2hhbG9BWkJyYW5kc1RhYmxlJykubGVuZ3RoKSB7XG4gICAgICAgIEFaQnJhbmRzKGNvbnRleHQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvYWRGdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKGNoZWNrSlNfbG9hZCkge1xuICAgICAgICAgICAgY2hlY2tKU19sb2FkID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGlmIChjb250ZXh0LnRoZW1lU2V0dGluZ3MuaGFsb19hc2tfYW5fZXhwZXJ0ICYmIGNvbnRleHQudGhlbWVTZXR0aW5ncy5oYWxvX2Fza19hbl9leHBlcnRfcGFnZWxpbmspIGhhbG9Bc2tBbkV4cGVydFBvcHVwKGNvbnRleHQpO1xuXG4gICAgICAgICAgICBpZiAoY29udGV4dC50aGVtZVNldHRpbmdzLmhhbG9fbWVudV90YWIgPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBoYWxvTWVnYU1lbnVFZGl0b3IoJGNvbnRleHQpO1xuICAgICAgICAgICAgICAgIG1vYmlsZU1lbnVUb2dnbGUoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaGFsb1JlY2VudGx5Qm91Z2h0UG9wdXAoJGNvbnRleHQpO1xuICAgICAgICAgICAgaGFsb0JlZm9yZVlvdUxlYXZlKCRjb250ZXh0KTtcbiAgICAgICAgICAgIGhhbG9BamF4QWRkVG9DYXJ0KCRjb250ZXh0KTtcbiAgICAgICAgICAgIGhhbG9Ib21lUHJvZHVjdExvb2tib29rKCRjb250ZXh0KTtcbiAgICAgICAgICAgIHF1aWNrVmlldygkY29udGV4dCk7XG4gICAgICAgICAgICBxdWlja1NlYXJjaCgkY29udGV4dCk7XG4gICAgICAgICAgICBtZW51KCk7XG4gICAgICAgICAgICBwcml2YWN5Q29va2llTm90aWZpY2F0aW9uKCk7XG4gICAgICAgICAgICBsb2FkaW5nUHJvZ3Jlc3NCYXIoKTtcblxuICAgICAgICAgICAgaWYgKHRoZW1lX3NldHRpbmdzLmhhbG9fcmVjZW50bHlfdmlld2VkX3Byb2R1Y3RzKSB7XG4gICAgICAgICAgICAgICAgaGFsb1JlY2VudGx5Vmlld2VkUHJvZHVjdCgkY29udGV4dCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGVtZV9zZXR0aW5ncy5oYWxvX25ld3NsZXR0ZXJfcG9wdXApIHtcbiAgICAgICAgICAgICAgICBoYWxvTmV3c2xldHRlclBvcHVwKCRjb250ZXh0KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaGFsb0FqYXhMb2dpblBvcHVwKCk7XG4gICAgICAgICAgICBhY3RpdmVNZW51TW9iaWxlKCk7XG4gICAgICAgICAgICB2YXJpYW50SW1hZ2VDb2xvcigpO1xuICAgICAgICAgICAgZm9vdGVyTW9iaWxlVG9nZ2xlKCk7XG4gICAgICAgICAgICBjaGVja0Nvb2tpZXNQb3B1cCgpO1xuICAgICAgICAgICAgYmFja1RvVG9wKCk7XG4gICAgICAgICAgICBibG9nVGFncygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXZlbnRMb2FkKCkge1xuICAgICAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGNvbnN0IHdXaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoLFxuICAgICAgICAgICAgICAgIHRTY3JvbGwgPSAkKHRoaXMpLnNjcm9sbFRvcCgpO1xuXG4gICAgICAgICAgICB2YXIgcHJvZHVjdENhcm91c2VsID0gJCgnLnByb2R1Y3RDYXJvdXNlbCcpLFxuICAgICAgICAgICAgICAgIHNob3dEb3RiYXJzID0gcHJvZHVjdENhcm91c2VsLmRhdGEoJ2RvdHMtYmFyJyk7XG5cbiAgICAgICAgICAgIGlmIChjb250ZXh0LnRoZW1lU2V0dGluZ3MuaGFsb19tZW51X3RhYiA9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICQoJ2JvZHknKS5hZGRDbGFzcygnbWVudS1pcy1sb2FkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWFyY2hGb3JtTW9iaWxlKCk7XG4gICAgICAgICAgICBsb2FkT3B0aW9uRm9yUHJvZHVjdENhcm91c2VsKHRTY3JvbGwpO1xuICAgICAgICAgICAgbG9hZFByb2R1Y3RHcmlkKHRTY3JvbGwpO1xuICAgICAgICAgICAgbG9hZFByb2R1Y3RUYWJCeUNhdGVnb3J5KHRTY3JvbGwpO1xuICAgICAgICAgICAgaG92ZXJNZW51KCk7XG4gICAgICAgICAgICBob21lSW1hZ2VDYXJvdXNlbCh0U2Nyb2xsKTtcbiAgICAgICAgICAgIGhvbWVQYXJhbGxheCh0U2Nyb2xsKTtcbiAgICAgICAgICAgIGhhbG9mYWRlSW5VcCh0U2Nyb2xsKTtcblxuICAgICAgICAgICAgaWYgKHNob3dEb3RiYXJzKSB7XG4gICAgICAgICAgICAgICAgcHJvZHVjdENhcm91c2VsLmVhY2goKGluZGV4LCBlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHZhciAkcHJvZFdyYXBJZCA9ICQoZWxlbWVudCkuYXR0cignaWQnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdyYXAgPSAkKGAjJHskcHJvZFdyYXBJZH1gKTtcblxuICAgICAgICAgICAgICAgICAgICBzbGlja0RvdHMod3JhcFswXSwgd3JhcCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgICQod2luZG93KS5vbignc2Nyb2xsJywgKGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0ICR0YXJnZXQgPSAkKGUuY3VycmVudFRhcmdldCk7XG4gICAgICAgICAgICBjb25zdCB0U2Nyb2xsID0gJHRhcmdldC5zY3JvbGxUb3AoKTtcblxuICAgICAgICAgICAgbG9hZEZ1bmN0aW9uKCk7XG4gICAgICAgICAgICBoYWxvU3RpY2t5SGVhZGVyKHRTY3JvbGwpO1xuICAgICAgICAgICAgbG9hZE9wdGlvbkZvclByb2R1Y3RDYXJvdXNlbCh0U2Nyb2xsKTtcbiAgICAgICAgICAgIGxvYWRQcm9kdWN0R3JpZCh0U2Nyb2xsKTtcbiAgICAgICAgICAgIGxvYWRQcm9kdWN0VGFiQnlDYXRlZ29yeSh0U2Nyb2xsKTtcbiAgICAgICAgICAgIGhvbWVJbWFnZUNhcm91c2VsKHRTY3JvbGwpO1xuICAgICAgICAgICAgaG9tZVBhcmFsbGF4KHRTY3JvbGwpO1xuICAgICAgICAgICAgaGFsb2ZhZGVJblVwKHRTY3JvbGwpO1xuICAgICAgICB9KTtcblxuICAgICAgICAkKGRvY3VtZW50KS5vbigna2V5ZG93biBtb3VzZW1vdmUgdG91Y2hzdGFydCcsIChlKSA9PiB7XG4gICAgICAgICAgICBsb2FkRnVuY3Rpb24oKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gUmVzaXplXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgICQod2luZG93KS5vbigncmVzaXplJywgKGUpID0+IHtcbiAgICAgICAgICAgIGNoZWNrQ29va2llc1BvcHVwKCk7XG4gICAgICAgICAgICBhY3RpdmVNZW51TW9iaWxlKCk7XG4gICAgICAgICAgICBzZWFyY2hGb3JtTW9iaWxlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBldmVudExvYWQoKTtcblxuICAgIGZ1bmN0aW9uIEV2ZW50KCkge1xuICAgICAgICAvL1xuICAgICAgICAvLyBDaGFuZ2UgT3B0aW9uXG4gICAgICAgIC8vIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIGNvbnN0IGJ0bl9jYXJkT3B0aW9uID0gJy5jYXJkLW9wdGlvbiAuZm9ybS1vcHRpb24tc3dhdGNoJztcblxuICAgICAgICAkKGRvY3VtZW50KS5vbignY2xpY2snLCBidG5fY2FyZE9wdGlvbiwgZSA9PiB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBjb25zdCAkdGFyZ2VyID0gJChlLmN1cnJlbnRUYXJnZXQpLFxuICAgICAgICAgICAgICAgIHRoaXNUaXRsZSA9ICR0YXJnZXIuZmluZCgnLmZvcm0tb3B0aW9uLXZhcmlhbnQnKS5hdHRyKCd0aXRsZScpO1xuXG4gICAgICAgICAgICAkKGJ0bl9jYXJkT3B0aW9uKS5yZW1vdmVDbGFzcygnaXMtYWN0aXZlJyk7XG4gICAgICAgICAgICAkdGFyZ2VyLmFkZENsYXNzKCdpcy1hY3RpdmUnKTtcbiAgICAgICAgICAgICR0YXJnZXIucGFyZW50cygnLmNhcmQnKS5maW5kKCcuY2FyZC1uYW1lJykudGV4dChgIC0gJHt0aGlzVGl0bGV9YCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIENsb3NlXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIGNvbnN0ICRidG5fY2xvc2UgPSAkKCcuYnRuLWNsb3NlJyk7XG4gICAgICAgIGNvbnN0ICRidG5fbW9iaWxlTWVudSA9ICQoJy5tb2JpbGVNZW51LXRvZ2dsZScpO1xuICAgICAgICBjb25zdCAkYmVmb3JlWW91TGVhdmUgPSAkKCcjYmVmb3JlLXlvdS1sZWF2ZScpO1xuXG4gICAgICAgICRidG5fY2xvc2Uub24oJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGNvbnN0ICR0YXJnZXQgPSAkKGUuY3VycmVudFRhcmdldCk7XG5cbiAgICAgICAgICAgICR0YXJnZXQucGFyZW50cygnLmhhbG8tc2lkZS1ibG9jaycpLnJlbW92ZUNsYXNzKCdpcy1vcGVuJyk7XG5cbiAgICAgICAgICAgIGlmICgkKCdib2R5JykuaGFzQ2xhc3MoJ29wZW5CZWZvcmVZb3VMZWF2ZScpKSB7XG4gICAgICAgICAgICAgICAgJCgnYm9keScpLnJlbW92ZUNsYXNzKCdvcGVuQmVmb3JlWW91TGVhdmUnKTtcblxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICRiZWZvcmVZb3VMZWF2ZS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgfSwgMjAwKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJCgnYm9keScpLnJlbW92ZUNsYXNzKCdpcy1zaWRlLWJsb2NrJyk7XG5cbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAkc2lkZUxvZ2luLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgJHNpZGVDYXJ0LmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgJCgnI3NpZGVCbG9ja19jYXRlZ29yeScpLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgJCgnI3NpZGVCbG9ja19zZWFyY2gnKS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgICQoJyNzaWRlQmxvY2tfYnJhbmQnKS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgICQoJyNzaWRlQmxvY2tfYmxvZycpLmhpZGUoKTtcbiAgICAgICAgICAgICAgICB9LCAyMDApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoJCgnYm9keScpLmhhc0NsYXNzKCdoYXMtYWN0aXZlTmF2UGFnZXMnKSkge1xuICAgICAgICAgICAgICAgICRidG5fbW9iaWxlTWVudS50cmlnZ2VyKCdjbGljaycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvL1xuICAgICAgICAvLyBMb2dpbiBGb3JtXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIGlmICghJCgnYm9keScpLmhhc0NsYXNzKCdwYWdlLXR5cGUtbG9naW4nKSkge1xuICAgICAgICAgICAgJCgnW2RhdGEtbG9naW4tZm9ybV0nKS5vbignY2xpY2snLCBldmVudCA9PiB7XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBpZiAoJCgnLmhhbG8tYXV0aC1zaWRlYmFyJykuaGFzQ2xhc3MoJ2lzLW9wZW4nKSkge1xuICAgICAgICAgICAgICAgICAgICAkKCcuaGFsby1hdXRoLXNpZGViYXInKS5yZW1vdmVDbGFzcygnaXMtb3BlbicpO1xuICAgICAgICAgICAgICAgICAgICAkKCdib2R5JykucmVtb3ZlQ2xhc3MoJ29wZW5BdXRoU2lkZWJhcicpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICQoJy5oYWxvLWF1dGgtc2lkZWJhcicpLmFkZENsYXNzKCdpcy1vcGVuJyk7XG4gICAgICAgICAgICAgICAgICAgICQoJ2JvZHknKS5hZGRDbGFzcygnb3BlbkF1dGhTaWRlYmFyJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkKCdbZGF0YS1sb2dpbi1mb3JtXScpLm9uKCdjbGljaycsIGV2ZW50ID0+IHtcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICAgICAgJCgnaHRtbCwgYm9keScpLmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgICAgICBzY3JvbGxUb3A6ICQoJy5sb2dpbicpLm9mZnNldCgpLnRvcCxcbiAgICAgICAgICAgICAgICB9LCA3MDApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvL1xuICAgICAgICAvLyBBY2NvdW50IEZvcm1cbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgJCgnLmhhbG8tYXV0aC1zaWRlYmFyIC5oYWxvLXNpZGViYXItaGVhZGVyIC5jbG9zZScpLm9uKCdjbGljaycsIGV2ZW50ID0+IHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgICQoJy5oYWxvLWF1dGgtc2lkZWJhcicpLnJlbW92ZUNsYXNzKCdpcy1vcGVuJyk7XG4gICAgICAgICAgICAkKCdib2R5JykucmVtb3ZlQ2xhc3MoJ29wZW5BdXRoU2lkZWJhcicpO1xuICAgICAgICB9KTtcblxuICAgICAgICAkKGRvY3VtZW50KS5vbignY2xpY2snLCBldmVudCA9PiB7XG4gICAgICAgICAgICBpZiAoJCgnLmhhbG8tYXV0aC1zaWRlYmFyJykuaGFzQ2xhc3MoJ2lzLW9wZW4nKSkge1xuICAgICAgICAgICAgICAgIGlmICgoJChldmVudC50YXJnZXQpLmNsb3Nlc3QoJy5oYWxvLWF1dGgtc2lkZWJhcicpLmxlbmd0aCA9PT0gMCkgJiYgKCQoZXZlbnQudGFyZ2V0KS5jbG9zZXN0KCdbZGF0YS1sb2dpbi1mb3JtXScpLmxlbmd0aCA9PT0gMCkpIHtcbiAgICAgICAgICAgICAgICAgICAgJCgnLmhhbG8tYXV0aC1zaWRlYmFyJykucmVtb3ZlQ2xhc3MoJ2lzLW9wZW4nKTtcbiAgICAgICAgICAgICAgICAgICAgJCgnYm9keScpLnJlbW92ZUNsYXNzKCdvcGVuQXV0aFNpZGViYXInKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIExpdmUgSGVscCBQb3B1cFxuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAkKCdbZGF0YS1oZWFkZXItbGl2ZUhlbHBdJykub24oJ2NsaWNrJywgZXZlbnQgPT4ge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgaWYgKCQod2luZG93KS53aWR0aCgpIDwgMTAyNSkge1xuICAgICAgICAgICAgICAgIGlmICgkKCcjaGFsby1saXZlLWhlbHAnKS5oYXNDbGFzcygnaXMtb3BlbicpKSB7XG4gICAgICAgICAgICAgICAgICAgICQoJyNoYWxvLWxpdmUtaGVscCcpLnJlbW92ZUNsYXNzKCdpcy1vcGVuJyk7XG4gICAgICAgICAgICAgICAgICAgICQoJ2JvZHknKS5yZW1vdmVDbGFzcygnb3BlbkxpdmVIZWxwJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgJCgnI2hhbG8tbGl2ZS1oZWxwJykuYWRkQ2xhc3MoJ2lzLW9wZW4nKTtcbiAgICAgICAgICAgICAgICAgICAgJCgnYm9keScpLmFkZENsYXNzKCdvcGVuTGl2ZUhlbHAnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICgkKCcjZHJvcGRvd24tbGl2ZUhlbHAnKS5oYXNDbGFzcygnaXMtb3BlbicpKSB7XG4gICAgICAgICAgICAgICAgICAgICQoJyNkcm9wZG93bi1saXZlSGVscCcpLnJlbW92ZUNsYXNzKCdpcy1vcGVuJyk7XG4gICAgICAgICAgICAgICAgICAgICQoJ2JvZHknKS5yZW1vdmVDbGFzcygnb3BlbkxpdmVIZWxwJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgJCgnI2Ryb3Bkb3duLWxpdmVIZWxwJykuYWRkQ2xhc3MoJ2lzLW9wZW4nKTtcbiAgICAgICAgICAgICAgICAgICAgJCgnYm9keScpLmFkZENsYXNzKCdvcGVuTGl2ZUhlbHAnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgICQoZG9jdW1lbnQpLm9uKCdjbGljaycsICdbZGF0YS1jbG9zZS1saXZlLWhlbHAtcG9wdXBdJywgZXZlbnQgPT4ge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBcbiAgICAgICAgICAgICQoJy5oYWxvLWxpdmUtaGVscCcpLnJlbW92ZUNsYXNzKCdpcy1vcGVuJyk7XG4gICAgICAgICAgICAkKCdib2R5JykucmVtb3ZlQ2xhc3MoJ29wZW5MaXZlSGVscCcpO1xuICAgICAgICB9KTtcblxuICAgICAgICAkKGRvY3VtZW50KS5vbignY2xpY2snLCBldmVudCA9PiB7XG4gICAgICAgICAgICBpZiAoJCgnLmhhbG8tbGl2ZS1oZWxwJykuaGFzQ2xhc3MoJ2lzLW9wZW4nKSkge1xuICAgICAgICAgICAgICAgIGlmICgoJChldmVudC50YXJnZXQpLmNsb3Nlc3QoJy5uYXZVc2VyLWl0ZW0tLWxpdmVIZWxwJykubGVuZ3RoID09PSAwKSkge1xuICAgICAgICAgICAgICAgICAgICAkKCcuaGFsby1saXZlLWhlbHAnKS5yZW1vdmVDbGFzcygnaXMtb3BlbicpO1xuICAgICAgICAgICAgICAgICAgICAkKCdib2R5JykucmVtb3ZlQ2xhc3MoJ29wZW5MaXZlSGVscCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gQWRkIFRvIFdpc2ggTGlzdFxuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAkKGRvY3VtZW50KS5vbignY2xpY2snLCAnLmNhcmQgLndpc2hsaXN0JywgKGUpID0+IHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHZhciAkdGhpc193bCA9ICQoZS5jdXJyZW50VGFyZ2V0KTtcbiAgICAgICAgICAgIHZhciB1cmxfYXdsID0gJHRoaXNfd2wuYXR0cignaHJlZicpO1xuXG4gICAgICAgICAgICBpZiAoJCgnYm9keScpLmhhc0NsYXNzKCdpcy1sb2dpbicpKSB7XG4gICAgICAgICAgICAgICAgJC5wb3N0KHVybF9hd2wpLmRvbmUoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gdXJsX2F3bDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSAnL2xvZ2luLnBocCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIEZvb3RlciBJbmZvIEhlYWRpbmcgVG9nZ2xlXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIGNvbnN0ICRmb290ZXJIZWFkaW5nVG9nZ2xlID0gJCgnLmZvb3Rlci1pbmZvLWhlYWRpbmctLXRvZ2dsZScpO1xuXG4gICAgICAgICRmb290ZXJIZWFkaW5nVG9nZ2xlLm9uKCdjbGljaycsIChlKSA9PiB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBjb25zdCB3V2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcblxuICAgICAgICAgICAgaWYgKHdXaWR0aCA8IDc2OCkge1xuICAgICAgICAgICAgICAgIGNvbnN0ICR0YXJnZXQgPSAkKGUuY3VycmVudFRhcmdldCk7XG4gICAgICAgICAgICAgICAgY29uc3QgJHRoaXNGb290ZXJJbmZvID0gJHRhcmdldC5wYXJlbnRzKCcuZm9vdGVyLWluZm8tY29sJyk7XG4gICAgICAgICAgICAgICAgY29uc3QgJHRoaXNGb290ZXJJbmZvX2xpc3QgPSAkdGhpc0Zvb3RlckluZm8uZmluZCgnLmZvb3Rlci1pbmZvLWxpc3QnKTtcblxuICAgICAgICAgICAgICAgICR0aGlzRm9vdGVySW5mby50b2dnbGVDbGFzcygnb3Blbi1kcm9wZG93bicpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCR0aGlzRm9vdGVySW5mby5oYXNDbGFzcygnb3Blbi1kcm9wZG93bicpKSB7XG4gICAgICAgICAgICAgICAgICAgICR0aGlzRm9vdGVySW5mb19saXN0LnNsaWRlRG93big0MDApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICR0aGlzRm9vdGVySW5mb19saXN0LnNsaWRlVXAoNDAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBFdmVudCgpO1xuXG4gICAgZnVuY3Rpb24gaG92ZXJNZW51KCkge1xuICAgICAgICBpZiAoJCh3aW5kb3cpLndpZHRoKCkgPiAxMDI0KSB7XG4gICAgICAgICAgICBpZiAoJCgnLm5hdlBhZ2VzLWxpc3Q6bm90KC5uYXZQYWdlcy1saXN0LS11c2VyKSA+IC5uYXZQYWdlcy1pdGVtLmhhcy1kcm9wZG93bicpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICQoJy5uYXZQYWdlcy1saXN0Om5vdCgubmF2UGFnZXMtbGlzdC0tdXNlcikgPiAubmF2UGFnZXMtaXRlbS5oYXMtZHJvcGRvd24nKS5vbignbW91c2VvdmVyJywgZXZlbnQgPT4ge1xuICAgICAgICAgICAgICAgICAgICAkKCdib2R5JykuYWRkQ2xhc3MoJ29wZW5NZW51UEMnKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5vbignbW91c2VsZWF2ZScsIGV2ZW50ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgJCgnYm9keScpLnJlbW92ZUNsYXNzKCdvcGVuTWVudVBDJyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZWFyY2hGb3JtTW9iaWxlKCkge1xuICAgICAgICBpZihjb250ZXh0LnRoZW1lU2V0dGluZ3MuaGFsb19oZWFkZXJfbGF5b3V0ID09ICdoZWFkZXJfbGF5b3V0XzMnIHx8IGNvbnRleHQudGhlbWVTZXR0aW5ncy5oYWxvX2hlYWRlcl9sYXlvdXQgPT0gJ2hlYWRlcl9sYXlvdXRfNCcpIHtcbiAgICAgICAgICAgIGlmICgkKCcuYm90dG9tSGVhZGVyLWl0ZW0gI3F1aWNrU2VhcmNoJykubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgJCgnLmJvdHRvbUhlYWRlci1pdGVtICNxdWlja1NlYXJjaCcpLmFwcGVuZFRvKCcjaGFsby1zZWFyY2gtc2lkZWJhciAuaGFsby1zaWRlYmFyLXNlYXJjaCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCQod2luZG93KS53aWR0aCgpIDwgMTAyNSkge1xuICAgICAgICAgICAgICAgIGlmICgkKCcuYm90dG9tSGVhZGVyLWl0ZW0gI3F1aWNrU2VhcmNoJykubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICQoJy5ib3R0b21IZWFkZXItaXRlbSAjcXVpY2tTZWFyY2gnKS5hcHBlbmRUbygnI2hhbG8tc2VhcmNoLXNpZGViYXIgLmhhbG8tc2lkZWJhci1zZWFyY2gnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICghJCgnLml0ZW0tLXF1aWNrc2VhcmNoICNxdWlja1NlYXJjaCcpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAkKCcjaGFsby1zZWFyY2gtc2lkZWJhciAjcXVpY2tTZWFyY2gnKS5hcHBlbmRUbygnLml0ZW0tLXF1aWNrc2VhcmNoJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWN0aXZlTWVudU1vYmlsZSgpIHtcbiAgICAgICAgJCgnLmhhbG8tbWVudS1zaWRlYmFyIC5oYWxvLXNpZGViYXItY2xvc2UnKS5vbignY2xpY2snLCBldmVudCA9PiB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICBpZiAoJCgnYm9keScpLmhhc0NsYXNzKCdoYXMtYWN0aXZlTmF2UGFnZXMnKSkge1xuICAgICAgICAgICAgICAgICQoJy5tb2JpbGVNZW51LXRvZ2dsZScpLnRyaWdnZXIoJ2NsaWNrJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgICQoZG9jdW1lbnQpLm9uKCdjbGljaycsIGV2ZW50ID0+IHtcbiAgICAgICAgICAgIGlmICgkKCdib2R5JykuaGFzQ2xhc3MoJ2hhcy1hY3RpdmVOYXZQYWdlcycpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCgkKGV2ZW50LnRhcmdldCkuY2xvc2VzdCgnLmhhbG8tbWVudS1zaWRlYmFyJykubGVuZ3RoID09PSAwKSAmJiAoJChldmVudC50YXJnZXQpLmNsb3Nlc3QoJy5tb2JpbGVNZW51LXRvZ2dsZScpLmxlbmd0aCA9PT0gMCkpIHtcbiAgICAgICAgICAgICAgICAgICAgJCgnLm1vYmlsZU1lbnUtdG9nZ2xlJykudHJpZ2dlcignY2xpY2snKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciAkbWVudVBjID0gJCgnLmhhbG8tYm90dG9tSGVhZGVyIC5uYXZQYWdlcy1saXN0Om5vdCgubmF2UGFnZXMtbGlzdC0tdXNlciknKSxcbiAgICAgICAgICAgICRtZW51TW9iaWxlID0gJCgnI2hhbG8tbWVudS1zaWRlYmFyIC5uYXZQYWdlcy1saXN0Om5vdCgubmF2UGFnZXMtbGlzdC0tdXNlciknKTtcblxuICAgICAgICBpZiAoJCh3aW5kb3cpLndpZHRoKCkgPD0gMTAyNCkge1xuICAgICAgICAgICAgJCgnLm1vYmlsZU1lbnUtdG9nZ2xlJykub24oJ2NsaWNrJywgZXZlbnQgPT4ge1xuICAgICAgICAgICAgICAgIGlmICgkbWVudVBjLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoISRtZW51TW9iaWxlLmNoaWxkcmVuKCkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkbWVudVBjLmNoaWxkcmVuKCkuYXBwZW5kVG8oJG1lbnVNb2JpbGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB2YXJpYW50SW1hZ2VDb2xvcigpIHtcbiAgICAgICAgJChkb2N1bWVudCkub24oJ2NsaWNrJywgJy5jYXJkIC5jYXJkLW9wdGlvbiAuZm9ybS1vcHRpb24nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gJCh0aGlzKSxcbiAgICAgICAgICAgICAgICBuZXdJbWFnZVZhcmlhbnQgPSBzZWxmLmRhdGEoJ2ltYWdlJyksXG4gICAgICAgICAgICAgICAgcHJvZHVjdEl0ZW1FbG0gPSBzZWxmLmNsb3Nlc3QoJy5jYXJkJyksXG4gICAgICAgICAgICAgICAgdmFyaWFudFRpdGxlID0gc2VsZi5kYXRhKCd0aXRsZScpO1xuXG4gICAgICAgICAgICBwcm9kdWN0SXRlbUVsbS5maW5kKCcudmFyaWFudF9jb2xvcl9uYW1lJykuaHRtbCh2YXJpYW50VGl0bGUpXG4gICAgICAgICAgICBzZWxmLnBhcmVudHMoJy5jYXJkLW9wdGlvbicpLmZpbmQoJy5mb3JtLW9wdGlvbicpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgICAgIHNlbGYuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgaWYgKG5ld0ltYWdlVmFyaWFudCAhPSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgcHJvZHVjdEl0ZW1FbG0uZmluZCgnLmNhcmQtaW1nLWNvbnRhaW5lciBpbWcnKS5hdHRyKHtcbiAgICAgICAgICAgICAgICAgICAgXCJzcmNcIjogbmV3SW1hZ2VWYXJpYW50LFxuICAgICAgICAgICAgICAgICAgICBcInNyY3NldFwiOiBuZXdJbWFnZVZhcmlhbnRcblxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZm9vdGVyTW9iaWxlVG9nZ2xlKCkge1xuICAgICAgICAkKCcuZm9vdGVyLWluZm8tY29sLS1tb2JpbGUgLmZvb3Rlci1pbmZvLWhlYWRpbmcnKS5vbignY2xpY2snLCBldmVudCA9PiB7XG4gICAgICAgICAgICAkKCcuZm9vdGVyLWluZm8tY29sLS1tb2JpbGUgLmZvb3Rlci1pbmZvLWhlYWRpbmcnKS5ub3QoJChldmVudC5jdXJyZW50VGFyZ2V0KSkucmVtb3ZlQ2xhc3MoJ2lzLWNsaWNrZWQnKTtcblxuICAgICAgICAgICAgaWYgKCQoZXZlbnQuY3VycmVudFRhcmdldCkuaGFzQ2xhc3MoJ2lzLWNsaWNrZWQnKSkge1xuICAgICAgICAgICAgICAgICQoZXZlbnQuY3VycmVudFRhcmdldCkucmVtb3ZlQ2xhc3MoJ2lzLWNsaWNrZWQnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJChldmVudC5jdXJyZW50VGFyZ2V0KS5hZGRDbGFzcygnaXMtY2xpY2tlZCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAkKCcuZm9vdGVyLWluZm8tY29sLS1tb2JpbGUnKS5lYWNoKChpbmRleCwgZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICgkKCcuZm9vdGVyLWluZm8taGVhZGluZycsIGVsZW1lbnQpLmhhc0NsYXNzKCdpcy1jbGlja2VkJykpIHtcbiAgICAgICAgICAgICAgICAgICAgJChlbGVtZW50KS5maW5kKCcuZm9vdGVyLWluZm8td3JhcHBlcicpLnNsaWRlRG93bihcInNsb3dcIik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgJChlbGVtZW50KS5maW5kKCcuZm9vdGVyLWluZm8td3JhcHBlcicpLnNsaWRlVXAoXCJzbG93XCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjaGVja0Nvb2tpZXNQb3B1cCgpIHtcbiAgICAgICAgaWYgKCQoJyNjb25zZW50LW1hbmFnZXInKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBoZWlnaHQgPSAkKCcjY29uc2VudC1tYW5hZ2VyJykuaGVpZ2h0KCkgKyAxNTtcblxuICAgICAgICAgICAgJCgnI3JlY2VudGx5X2JvdWdodF9saXN0JykuY3NzKCdib3R0b20nLCBoZWlnaHQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYmFja1RvVG9wKCkge1xuICAgICAgICB2YXIgb2Zmc2V0ID0gJCh3aW5kb3cpLmhlaWdodCgpIC8gMjtcbiAgICAgICAgY29uc3QgYmFja1RvVG9wID0gJCgnI2hhbG9CYWNrVG9Ub3AnKTtcblxuICAgICAgICAkKHdpbmRvdykuc2Nyb2xsKGV2ZW50ID0+IHtcbiAgICAgICAgICAgICgkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLnNjcm9sbFRvcCgpID4gb2Zmc2V0KSA/IGJhY2tUb1RvcC5hZGRDbGFzcygnaXMtdmlzaWJsZScpOiBiYWNrVG9Ub3AucmVtb3ZlQ2xhc3MoJ2lzLXZpc2libGUnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgYmFja1RvVG9wLm9uKCdjbGljaycsIGV2ZW50ID0+IHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgICQoJ2JvZHksaHRtbCcpLmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgIHNjcm9sbFRvcDogMFxuICAgICAgICAgICAgfSwgMTAwMCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhbG9TdGlja3lIZWFkZXIodFNjcm9sbCkge1xuICAgICAgICBpZiAodGhlbWVfc2V0dGluZ3MuaGFsb19oZWFkZXJTdGlja3kpIHtcbiAgICAgICAgICAgIGlmICh0U2Nyb2xsID4gaGVpZ2h0X3Byb21vdGlvbiAmJiB0U2Nyb2xsIDwgc2Nyb2xsX3Bvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgaWYgKCQod2luZG93KS53aWR0aCgpID4gMTAyNCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoJCgnLmhhbG8tc2VhcmNoLXN0aWNreScpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJCgnLmhhbG8tc2VhcmNoLW1haW4gI3F1aWNrU2VhcmNoJykuYXBwZW5kVG8oJy5oYWxvLXNlYXJjaC1zdGlja3knKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoISQoJy5oZWFkZXItaGVpZ2h0JykubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICRoZWFkZXIuYmVmb3JlKCc8ZGl2IGNsYXNzPVwiaGVhZGVyLWhlaWdodFwiIHN0eWxlPVwiaGVpZ2h0OiAnICsgaGVpZ2h0X2hlYWRlciArICdweFwiPjwvZGl2PicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAkaGVhZGVyLmFkZENsYXNzKCdpcy1zdGlja3knKTtcbiAgICAgICAgICAgICAgICAkaGVhZGVyLmNzcygnYW5pbWF0aW9uLW5hbWUnLCAnZmFkZUluRG93bicpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoJCgnLmhhbG8tc2VhcmNoLW1haW4nKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgJCgnLmhhbG8tc2VhcmNoLXN0aWNreSAjcXVpY2tTZWFyY2gnKS5hcHBlbmRUbygnLmhhbG8tc2VhcmNoLW1haW4nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgJGhlYWRlci5yZW1vdmVDbGFzcygnaXMtc3RpY2t5Jyk7XG4gICAgICAgICAgICAgICAgJCgnLmhlYWRlci1oZWlnaHQnKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAkaGVhZGVyLmNzcygnYW5pbWF0aW9uLW5hbWUnLCAnJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNjcm9sbF9wb3NpdGlvbiA9IHRTY3JvbGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2FkT3B0aW9uRm9yUHJvZHVjdENhcm91c2VsKHRTY3JvbGwpIHtcbiAgICAgICAgY29uc3QgJGxvYWRQcm9kdWN0Q2Fyb3VzZWwgPSAkKCcucHJvZHVjdENhcm91c2VsJyk7XG5cbiAgICAgICAgaWYgKCRsb2FkUHJvZHVjdENhcm91c2VsLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgJGxvYWRQcm9kdWN0Q2Fyb3VzZWxUb3AgPSAkbG9hZFByb2R1Y3RDYXJvdXNlbC5vZmZzZXQoKS50b3AgLSBzY3JlZW4uaGVpZ2h0O1xuXG4gICAgICAgICAgICBpZiAodFNjcm9sbCA+ICRsb2FkUHJvZHVjdENhcm91c2VsVG9wICYmIGNoZWNrX2xvYWRQcm9kdWN0Q2Fyb3VzZWwpIHtcbiAgICAgICAgICAgICAgICBjaGVja19sb2FkUHJvZHVjdENhcm91c2VsID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICBpZiAoJCgnLnByb2R1Y3RDYXJvdXNlbCcpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgJCgnLnByb2R1Y3RDYXJvdXNlbCcpLmVhY2goKGluZGV4LCBlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgJHByb2RXcmFwSWQgPSAkKGVsZW1lbnQpLmF0dHIoJ2lkJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGhhbG9BZGRPcHRpb25Gb3JQcm9kdWN0KCRjb250ZXh0LCAkcHJvZFdyYXBJZCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvYWRQcm9kdWN0R3JpZCh0U2Nyb2xsKSB7XG4gICAgICAgIGNvbnN0ICRsb2FkUHJvZHVjdEdyaWQgPSAkKCcucHJvZHVjdEdyaWQ6bm90KC5wcm9kdWN0TGlzdGluZyknKTtcblxuICAgICAgICBpZiAoJGxvYWRQcm9kdWN0R3JpZC5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0ICRsb2FkUHJvZHVjdEdyaWRUb3AgPSAkbG9hZFByb2R1Y3RHcmlkLm9mZnNldCgpLnRvcCAtIHNjcmVlbi5oZWlnaHQ7XG5cbiAgICAgICAgICAgIGlmICh0U2Nyb2xsID4gJGxvYWRQcm9kdWN0R3JpZFRvcCAmJiBjaGVja19sb2FkUHJvZHVjdEdyaWQpIHtcbiAgICAgICAgICAgICAgICBjaGVja19sb2FkUHJvZHVjdEdyaWQgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgIGlmICgkKCcucHJvZHVjdEdyaWQ6bm90KC5wcm9kdWN0TGlzdGluZyknKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbCA9IGNvbnRleHQudGhlbWVTZXR0aW5ncy5ob21lX3Byb2R1Y3RfYmxvY2tfY29sLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGltaXRQcm9kdWN0ID0gMiAqIHBhcnNlSW50KGNvbCk7XG5cbiAgICAgICAgICAgICAgICAgICAgJCgnLnByb2R1Y3RHcmlkOm5vdCgucHJvZHVjdExpc3RpbmcpJykuZWFjaCgoaW5kZXgsIGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkcHJvZFdyYXBJZCA9ICQoZWxlbWVudCkuYXR0cignaWQnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgJChlbGVtZW50KS5maW5kKCcucHJvZHVjdDp2aXNpYmxlJykuY3NzKCdkaXNwbGF5JywgJ25vbmUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoZWxlbWVudCkuZmluZCgnLnByb2R1Y3Q6aGlkZGVuJykuc2xpY2UoMCwgbGltaXRQcm9kdWN0KS5jc3MoJ2Rpc3BsYXknLCAnaW5saW5lLWJsb2NrJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkKGVsZW1lbnQpLmZpbmQoJy5wcm9kdWN0JykubGVuZ3RoID4gbGltaXRQcm9kdWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJChlbGVtZW50KS5hZnRlcignPGRpdiBjbGFzcz1cInByb2R1Y3RHcmlkLXNob3dNb3JlXCI+PGEgY2xhc3M9XCJidXR0b24gYnV0dG9uLS1wcmltYXJ5XCIgaHJlZj1cIiNcIiBkYXRhLWhyZWY9XCInICsgJHByb2RXcmFwSWQgKyAnXCI+U2hvdyBNb3JlPC9hPjwvZGl2PicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBoYWxvQWRkT3B0aW9uRm9yUHJvZHVjdCgkY29udGV4dCwgJHByb2RXcmFwSWQpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAkKCcucHJvZHVjdEdyaWQtc2hvd01vcmUgLmJ1dHRvbicpLm9uKCdjbGljaycsIGV2ZW50ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gJChldmVudC5jdXJyZW50VGFyZ2V0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRJZCA9IHRhcmdldC5kYXRhKCdocmVmJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldC5ibHVyKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICQoJ1tkYXRhLWJsb2NrPScgKyB0YXJnZXRJZCArICddJykuZmluZCgnLnByb2R1Y3Q6aGlkZGVuJykuc2xpY2UoMCwgbGltaXRQcm9kdWN0KS5jc3MoJ2Rpc3BsYXknLCAnaW5saW5lLWJsb2NrJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkKCdbZGF0YS1ibG9jaz0nICsgdGFyZ2V0SWQgKyAnXScpLmZpbmQoJy5wcm9kdWN0OmhpZGRlbicpLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LmFkZENsYXNzKCdkaXNhYmxlJykudGV4dCgnTm8gbW9yZSBpdGVtcycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2FkUHJvZHVjdFRhYkJ5Q2F0ZWdvcnkodFNjcm9sbCkge1xuICAgICAgICBjb25zdCAkaG9tZVByb2R1Y3RUYWJCeUNhdGVnb3J5ID0gJCgnLmhhbG8tYmxvY2stcHJvZHVjdC10YWJzIC5wcm9kdWN0Q2Fyb3VzZWwtdGFicycpO1xuXG4gICAgICAgIGlmICgkaG9tZVByb2R1Y3RUYWJCeUNhdGVnb3J5Lmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgJGhvbWVQcm9kdWN0VGFiQnlDYXRlZ29yeVRvcCA9ICRob21lUHJvZHVjdFRhYkJ5Q2F0ZWdvcnkub2Zmc2V0KCkudG9wIC0gc2NyZWVuLmhlaWdodDtcblxuICAgICAgICAgICAgaWYgKHRTY3JvbGwgPiAkaG9tZVByb2R1Y3RUYWJCeUNhdGVnb3J5VG9wICYmIGNoZWNrX2hvbWVQcm9kdWN0VGFiQnlDYXRlZ29yeSkge1xuICAgICAgICAgICAgICAgIGNoZWNrX2hvbWVQcm9kdWN0VGFiQnlDYXRlZ29yeSA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICdwcm9kdWN0cy9jYXJvdXNlbC0zJ1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBpZiAoJCgnLnByb2R1Y3RDYXJvdXNlbC10YWJzJykubGVuZ3RoID4gMCkge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghJCgnLnByb2R1Y3RDYXJvdXNlbC10YWJzIC50YWItY29udGVudC5pcy1hY3RpdmUgLnByb2R1Y3RDYXJvdXNlbCAucHJvZHVjdENhcm91c2VsLXNsaWRlOm5vdCgucHJvZHVjdC1zYW1wbGUpJykubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYmxvY2sgPSAkKCcucHJvZHVjdENhcm91c2VsLXRhYnMgLnRhYi1jb250ZW50LmlzLWFjdGl2ZScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdyYXAgPSBibG9jay5maW5kKCcucHJvZHVjdENhcm91c2VsJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0SWQgPSBibG9jay5kYXRhKCd0YWItY2F0ZWdvcnktaWQnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXRVcmwgPSBibG9jay5kYXRhKCd0YWItY2F0ZWdvcnktdXJsJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2tJZCA9IGJsb2NrLmF0dHIoJ2lkJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGxvYWRDYXRlZ29yeShjYXRJZCwgY2F0VXJsLCBvcHRpb25zLCB3cmFwLCBibG9ja0lkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICQoJy5wcm9kdWN0Q2Fyb3VzZWwtdGFicyBbZGF0YS10YWJdJykub24oJ3RvZ2dsZWQnLCAoZXZlbnQsIHRhYikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEkKCcucHJvZHVjdENhcm91c2VsLXRhYnMgLnRhYi1jb250ZW50LmlzLWFjdGl2ZSAucHJvZHVjdENhcm91c2VsIC5wcm9kdWN0Q2Fyb3VzZWwtc2xpZGU6bm90KC5wcm9kdWN0LXNhbXBsZSknKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYmxvY2sgPSAkKCcucHJvZHVjdENhcm91c2VsLXRhYnMgLnRhYi1jb250ZW50LmlzLWFjdGl2ZScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3cmFwID0gYmxvY2suZmluZCgnLnByb2R1Y3RDYXJvdXNlbCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXRJZCA9IGJsb2NrLmRhdGEoJ3RhYi1jYXRlZ29yeS1pZCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXRVcmwgPSBibG9jay5kYXRhKCd0YWItY2F0ZWdvcnktdXJsJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrSWQgPSBibG9jay5hdHRyKCdpZCcpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLmZpbmQoJy5wcm9kdWN0Q2Fyb3VzZWwnKS5oYXNDbGFzcygnc2xpY2staW5pdGlhbGl6ZWQnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkQ2F0ZWdvcnkoY2F0SWQsIGNhdFVybCwgb3B0aW9ucywgd3JhcCwgYmxvY2tJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2FkQ2F0ZWdvcnkoaWQsIHVybCwgb3B0aW9uLCB3cmFwLCBibG9ja0lkKSB7XG4gICAgICAgIHV0aWxzLmFwaS5nZXRQYWdlKHVybCwgb3B0aW9uLCAoZXJyLCByZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgaWYgKCF3cmFwLmZpbmQoJy5wcm9kdWN0Q2Fyb3VzZWwtc2xpZGU6bm90KC5wcm9kdWN0LXNhbXBsZSknKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB3cmFwLmh0bWwocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIHNsaWNrQ2Fyb3VzZWwod3JhcCk7XG4gICAgICAgICAgICAgICAgd3JhcC5wYXJlbnRzKCcudGFiLWNvbnRlbnQnKS5maW5kKCcubG9hZGluZ092ZXJsYXknKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICB3cmFwLmZpbmQoJy5wcm9kdWN0LXNhbXBsZScpLnJlbW92ZSgpO1xuXG4gICAgICAgICAgICAgICAgaGFsb0FkZE9wdGlvbkZvclByb2R1Y3QoJGNvbnRleHQsIGJsb2NrSWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzbGlja0Nhcm91c2VsKHdyYXApIHtcbiAgICAgICAgd3JhcC5zbGljayh7XG4gICAgICAgICAgICBkb3RzOiB0cnVlLFxuICAgICAgICAgICAgYXJyb3dzOiB0cnVlLFxuICAgICAgICAgICAgaW5maW5pdGU6IGZhbHNlLFxuICAgICAgICAgICAgbW9iaWxlRmlyc3Q6IHRydWUsXG4gICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDIsXG4gICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogMSxcbiAgICAgICAgICAgIHJlc3BvbnNpdmU6IFt7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrcG9pbnQ6IDEzOTksXG4gICAgICAgICAgICAgICAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJvd3M6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IHBhcnNlSW50KCRjb250ZXh0LnRoZW1lU2V0dGluZ3MuaG9tZV9wcm9kdWN0X2Jsb2NrX3RhYl9jb2wpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtwb2ludDogMTAyNCxcbiAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogcGFyc2VJbnQoJGNvbnRleHQudGhlbWVTZXR0aW5ncy5ob21lX3Byb2R1Y3RfYmxvY2tfdGFiX2NvbCkgLSAxXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtwb2ludDogNzY3LFxuICAgICAgICAgICAgICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiBwYXJzZUludCgkY29udGV4dC50aGVtZVNldHRpbmdzLmhvbWVfcHJvZHVjdF9ibG9ja190YWJfY29sKSAtIDJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2xpY2tEb3RzKHdyYXAsIHByb2R1Y3RDYXJvdXNlbCkge1xuICAgICAgICBjb25zdCBzbGlja0RvdHMgPSB3cmFwLnF1ZXJ5U2VsZWN0b3JBbGwoJy5zbGljay1kb3RzIGxpJylcbiAgICAgICAgY29uc3QgdG90YWxTbGlkZVN0ZXBDb3VudCA9IHNsaWNrRG90cy5sZW5ndGhcbiAgICAgICAgY29uc3QgZG90YmFycyA9IHdyYXAucGFyZW50RWxlbWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1iYXJzXScpXG4gICAgICAgIGNvbnN0IGRvdHMgPSB3cmFwLnF1ZXJ5U2VsZWN0b3IoJy5zbGljay1kb3RzJylcbiAgICAgICAgY29uc3QgYmFyVGh1bWIgPSBkb3RiYXJzLnF1ZXJ5U2VsZWN0b3IoJy5iYXItdGh1bWInKVxuICAgICAgICBjb25zdCBiYXJUaHVtYldpZHRoID0gZG90YmFycy5jbGllbnRXaWR0aCAvIHRvdGFsU2xpZGVTdGVwQ291bnRcbiAgICAgICAgYmFyVGh1bWIuc3R5bGUud2lkdGggPSBgY2FsYygxMDAlLyR7dG90YWxTbGlkZVN0ZXBDb3VudH0pYDtcbiAgICAgICAgY29uc3QgZG90c0JhckxlZnQgPSBkb3RiYXJzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnhcblxuICAgICAgICBpZiAoc2xpY2tEb3RzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZG90YmFycy5yZW1vdmUoKVxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cblxuICAgICAgICBwcm9kdWN0Q2Fyb3VzZWwub24oJ2JlZm9yZUNoYW5nZScsIGZ1bmN0aW9uKGV2ZW50LCBzbGljaywgY3VycmVudFNsaWRlLCBuZXh0U2xpZGUpIHtcbiAgICAgICAgICAgIGNvbnN0IHNsaWNrRG90cyA9IHdyYXAucXVlcnlTZWxlY3RvckFsbCgnLnNsaWNrLWRvdHMgbGknKVxuICAgICAgICAgICAgY29uc3QgdG90YWxTbGlkZVN0ZXBDb3VudCA9IHNsaWNrRG90cy5sZW5ndGhcbiAgICAgICAgICAgIGNvbnN0IGRvdHNBY3RpdmUgPSBkb3RzLnF1ZXJ5U2VsZWN0b3IoJy5zbGljay1hY3RpdmUnKS5kYXRhc2V0LmluZGV4O1xuXG4gICAgICAgICAgICBpZiAodG90YWxTbGlkZVN0ZXBDb3VudCA9PSBkb3RzQWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgYmFyVGh1bWIuc3R5bGUubGVmdCA9ICcwJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYmFyVGh1bWIuc3R5bGUubGVmdCA9IGBjYWxjKDEwMCUvJHt0b3RhbFNsaWRlU3RlcENvdW50fSAqICR7ZG90c0FjdGl2ZX0pYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgZG90YmFycy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xuICAgICAgICAgICAgY29uc3QgY2xpY2tlZEluZGV4ID0gTWF0aC5mbG9vcigoZS5wYWdlWCAtIGRvdHNCYXJMZWZ0KSAvIGJhclRodW1iV2lkdGgpXG4gICAgICAgICAgICBzbGlja0RvdHNbY2xpY2tlZEluZGV4XS5jbGljaygpXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaG9tZUltYWdlQ2Fyb3VzZWwodFNjcm9sbCkge1xuICAgICAgICBjb25zdCAkaG9tZUxQQ2Fyb3VzZWwgPSAkKCcuaG9tZS1sYW5kaW5nLXBhZ2UgLmhlcm9DYXJvdXNlbCcpLFxuICAgICAgICAgICAgJGhvbWVJbWFnZUNhcm91c2VsID0gJCgnI2hvbWVCYW5uZXIyIC5ob21lQmFubmVyMl9fY2Fyb3VzZWwnKSxcbiAgICAgICAgICAgICRob21lSW1hZ2VJbnN0YWdyYW1DYXJvdXNlbCA9ICQoJyNoYWxvX2luc3RhZ3JhbSAuaGFsby1pbWFnZS1pbnN0YWdyYW0nKSxcbiAgICAgICAgICAgICRob21lSW1hZ2VJbnN0YWdyYW0yQ2Fyb3VzZWwgPSAkKCcjaGFsb19pbnN0YWdyYW1fMiAuaGFsby1pbWFnZS1pbnN0YWdyYW0nKSxcbiAgICAgICAgICAgICRob21lSW1hZ2VHYWxsZXJ5Q2Fyb3VzZWwgPSAkKCcjaGFsb19pbWFnZV9nYWxsZXJ5IC5oYWxvLWltYWdlLWdhbGxlcnknKSxcbiAgICAgICAgICAgICRob21lUG9wdWxhckNhdGVnb3J5Q2Fyb3VzZWwgPSAkKCcjcG9wdWxhckNhdGVnb3J5IC5wb3B1bGFyQ2F0ZWdvcnlfX2Nhcm91c2VsJyksXG4gICAgICAgICAgICAkaG9tZUxvb2tCb29rMUNhcm91c2VsID0gJCgnI2xvb2tCb29rMSAubG9va0Jvb2sxX19jYXJvdXNlbCcpLFxuICAgICAgICAgICAgJGhvbWVMb29rQm9vazJDYXJvdXNlbCA9ICQoJyNsb29rQm9vazIgLmxvb2tCb29rMl9fY2Fyb3VzZWwnKSxcbiAgICAgICAgICAgICRob21lQ3VzdG9tZXJDYXJvdXNlbCA9ICQoJy5jdXN0b21lclJldmlld3NfX2Nhcm91c2VsJyksXG4gICAgICAgICAgICAkaG9tZUJsb2dQb3N0c0Nhcm91c2VsID0gJCgnLmhhbG8tYmxvY2stcG9zdCAuaGFsby1yZWNlbnQtcG9zdCcpLFxuICAgICAgICAgICAgJGhvbWVJbWFnZVBvbGljeUNhcm91c2VsID0gJCgnI3BvbGljeUJsb2NrIC5wb2xpY3lCbG9ja19fY29udGFpbmVyJyksXG4gICAgICAgICAgICAkaG9tZUNhdGVnb3J5Q2Fyb3VzZWwgPSAkKCcjaGFsb19zaG9wX2NhdGVnb3J5IC5oYWxvLXNob3AtY2F0ZWdvcnknKTtcblxuICAgICAgICBpZiAoJGhvbWVMUENhcm91c2VsLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgJGhvbWVMUENhcm91c2VsVG9wID0gJGhvbWVMUENhcm91c2VsLm9mZnNldCgpLnRvcCAtIHNjcmVlbi5oZWlnaHQ7XG5cbiAgICAgICAgICAgIGlmICh0U2Nyb2xsID4gJGhvbWVMUENhcm91c2VsVG9wICYmIGNoZWNrX2hvbWVMUENhcm91c2VsKSB7XG4gICAgICAgICAgICAgICAgY2hlY2tfaG9tZUxQQ2Fyb3VzZWwgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgICRob21lTFBDYXJvdXNlbC5zbGljayh7XG4gICAgICAgICAgICAgICAgICAgIGZhZGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGRvdHM6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGFycm93czogY29udGV4dC5tYWluQ2Fyb3VzZWxBcnJvdyxcbiAgICAgICAgICAgICAgICAgICAgbW9iaWxlRmlyc3Q6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMSxcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDEsXG4gICAgICAgICAgICAgICAgICAgIGF1dG9wbGF5OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBhdXRvcGxheVNwZWVkOiBjb250ZXh0Lm1haW5DYXJvdXNlbFNwZWVkLFxuICAgICAgICAgICAgICAgICAgICBzbGlkZTogJ1tkYXRhLWhlcm8tc2xpZGVdJyxcbiAgICAgICAgICAgICAgICAgICAgY3VzdG9tUGFnaW5nOiAoc2xpZGVyLCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaW5kZXggPSBpICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnPGJ1dHRvbiBkYXRhLWNhcm91c2VsLWRvdCB0eXBlPVwiYnV0dG9uXCI+PHNwYW4+JyArIFN0cmluZyhpbmRleCkucGFkU3RhcnQoMiwgJycpICsgJzwvc3Bhbj48c3BhbiBkYXRhLWRvdHMtdG90YWxzPnw8L3NwYW4+PHNwYW4+JyArIHNsaWRlci5zbGlkZUNvdW50ICsgJzwvc3Bhbj48L2J1dHRvbj4nO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoJGhvbWVJbWFnZUNhcm91c2VsLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgJGhvbWVJbWFnZUNhcm91c2VsVG9wID0gJGhvbWVJbWFnZUNhcm91c2VsLm9mZnNldCgpLnRvcCAtIHNjcmVlbi5oZWlnaHQ7XG5cbiAgICAgICAgICAgIGlmICh0U2Nyb2xsID4gJGhvbWVJbWFnZUNhcm91c2VsVG9wICYmIGNoZWNrX2hvbWVJbWFnZUNhcm91c2VsKSB7XG4gICAgICAgICAgICAgICAgY2hlY2tfaG9tZUltYWdlQ2Fyb3VzZWwgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgICRob21lSW1hZ2VDYXJvdXNlbC5zbGljayh7XG4gICAgICAgICAgICAgICAgICAgIGZhZGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGRvdHM6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBhcnJvd3M6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGluZmluaXRlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgbW9iaWxlRmlyc3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBhdXRvcGxheTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiAxLFxuICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogMVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCRob21lSW1hZ2VJbnN0YWdyYW1DYXJvdXNlbC5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0ICRob21lSW1hZ2VJbnN0YWdyYW1DYXJvdXNlbFRvcCA9ICRob21lSW1hZ2VJbnN0YWdyYW1DYXJvdXNlbC5vZmZzZXQoKS50b3AgLSBzY3JlZW4uaGVpZ2h0O1xuXG4gICAgICAgICAgICBpZiAodFNjcm9sbCA+ICRob21lSW1hZ2VJbnN0YWdyYW1DYXJvdXNlbFRvcCAmJiBjaGVja19ob21lSW1hZ2VJbnN0YWdyYW1DYXJvdXNlbCkge1xuICAgICAgICAgICAgICAgIGNoZWNrX2hvbWVJbWFnZUluc3RhZ3JhbUNhcm91c2VsID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAkaG9tZUltYWdlSW5zdGFncmFtQ2Fyb3VzZWwuc2xpY2soe1xuICAgICAgICAgICAgICAgICAgICBkb3RzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgYXJyb3dzOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBpbmZpbml0ZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIG1vYmlsZUZpcnN0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBhdXRvcGxheTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMixcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDIsXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNpdmU6IFt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtwb2ludDogMTM5OSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJvd3M6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogNSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrcG9pbnQ6IDEwMjQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiA0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogNFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtwb2ludDogNzY3LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrcG9pbnQ6IDU1MCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoJGhvbWVJbWFnZUluc3RhZ3JhbTJDYXJvdXNlbC5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0ICRob21lSW1hZ2VJbnN0YWdyYW0yQ2Fyb3VzZWxUb3AgPSAkaG9tZUltYWdlSW5zdGFncmFtMkNhcm91c2VsLm9mZnNldCgpLnRvcCAtIHNjcmVlbi5oZWlnaHQ7XG5cbiAgICAgICAgICAgIGlmICh0U2Nyb2xsID4gJGhvbWVJbWFnZUluc3RhZ3JhbTJDYXJvdXNlbFRvcCAmJiBjaGVja19ob21lSW1hZ2VJbnN0YWdyYW0yQ2Fyb3VzZWwpIHtcbiAgICAgICAgICAgICAgICBjaGVja19ob21lSW1hZ2VJbnN0YWdyYW0yQ2Fyb3VzZWwgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgICRob21lSW1hZ2VJbnN0YWdyYW0yQ2Fyb3VzZWwuc2xpY2soe1xuICAgICAgICAgICAgICAgICAgICBkb3RzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgYXJyb3dzOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBpbmZpbml0ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgbW9iaWxlRmlyc3Q6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGF1dG9wbGF5OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiAxLFxuICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogMSxcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2l2ZTogW3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVha3BvaW50OiAxMzk5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrcG9pbnQ6IDU1MCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoJGhvbWVJbWFnZUdhbGxlcnlDYXJvdXNlbC5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0ICRob21lSW1hZ2VHYWxsZXJ5Q2Fyb3VzZWxUb3AgPSAkaG9tZUltYWdlR2FsbGVyeUNhcm91c2VsLm9mZnNldCgpLnRvcCAtIHNjcmVlbi5oZWlnaHQ7XG5cbiAgICAgICAgICAgIGlmICh0U2Nyb2xsID4gJGhvbWVJbWFnZUdhbGxlcnlDYXJvdXNlbFRvcCAmJiBjaGVja19ob21lSW1hZ2VHYWxsZXJ5Q2Fyb3VzZWwpIHtcbiAgICAgICAgICAgICAgICBjaGVja19ob21lSW1hZ2VHYWxsZXJ5Q2Fyb3VzZWwgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgICRob21lSW1hZ2VHYWxsZXJ5Q2Fyb3VzZWwuc2xpY2soe1xuICAgICAgICAgICAgICAgICAgICBkb3RzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgYXJyb3dzOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBpbmZpbml0ZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIG1vYmlsZUZpcnN0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBhdXRvcGxheTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMixcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDIsXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNpdmU6IFt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtwb2ludDogMTAyNCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiA0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVha3BvaW50OiA3NjcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiAzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogM1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtwb2ludDogNTUwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgkaG9tZVBvcHVsYXJDYXRlZ29yeUNhcm91c2VsLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgJGhvbWVQb3B1bGFyQ2F0ZWdvcnlDYXJvdXNlbFRvcCA9ICRob21lUG9wdWxhckNhdGVnb3J5Q2Fyb3VzZWwub2Zmc2V0KCkudG9wIC0gc2NyZWVuLmhlaWdodDtcblxuICAgICAgICAgICAgaWYgKHRTY3JvbGwgPiAkaG9tZVBvcHVsYXJDYXRlZ29yeUNhcm91c2VsVG9wICYmIGNoZWNrX2hvbWVQb3B1bGFyQ2F0ZWdvcnlDYXJvdXNlbCkge1xuICAgICAgICAgICAgICAgIGNoZWNrX2hvbWVQb3B1bGFyQ2F0ZWdvcnlDYXJvdXNlbCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgJGhvbWVQb3B1bGFyQ2F0ZWdvcnlDYXJvdXNlbC5zbGljayh7XG4gICAgICAgICAgICAgICAgICAgIGRvdHM6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBhcnJvd3M6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGluZmluaXRlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBtb2JpbGVGaXJzdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiAyLFxuICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogMixcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2l2ZTogW3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVha3BvaW50OiAxNTk5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogNSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrcG9pbnQ6IDEzOTksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiA0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogNFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtwb2ludDogNzY3LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgkaG9tZUxvb2tCb29rMUNhcm91c2VsLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgJGhvbWVMb29rQm9vazFDYXJvdXNlbFRvcCA9ICRob21lTG9va0Jvb2sxQ2Fyb3VzZWwub2Zmc2V0KCkudG9wIC0gc2NyZWVuLmhlaWdodDtcblxuICAgICAgICAgICAgaWYgKHRTY3JvbGwgPiAkaG9tZUxvb2tCb29rMUNhcm91c2VsVG9wICYmIGNoZWNrX2hvbWVMb29rQm9vazFDYXJvdXNlbCkge1xuICAgICAgICAgICAgICAgIGNoZWNrX2hvbWVMb29rQm9vazFDYXJvdXNlbCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgJGhvbWVMb29rQm9vazFDYXJvdXNlbC5zbGljayh7XG4gICAgICAgICAgICAgICAgICAgIGRvdHM6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBhcnJvd3M6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGluZmluaXRlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBtb2JpbGVGaXJzdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMSxcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDFcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgkaG9tZUxvb2tCb29rMkNhcm91c2VsLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgJGhvbWVMb29rQm9vazJDYXJvdXNlbFRvcCA9ICRob21lTG9va0Jvb2syQ2Fyb3VzZWwub2Zmc2V0KCkudG9wIC0gc2NyZWVuLmhlaWdodDtcblxuICAgICAgICAgICAgaWYgKHRTY3JvbGwgPiAkaG9tZUxvb2tCb29rMkNhcm91c2VsVG9wICYmIGNoZWNrX2hvbWVMb29rQm9vazJDYXJvdXNlbCkge1xuICAgICAgICAgICAgICAgIGNoZWNrX2hvbWVMb29rQm9vazJDYXJvdXNlbCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgJGhvbWVMb29rQm9vazJDYXJvdXNlbC5zbGljayh7XG4gICAgICAgICAgICAgICAgICAgIGRvdHM6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBhcnJvd3M6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGluZmluaXRlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBtb2JpbGVGaXJzdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiAxLFxuICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogMSxcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2l2ZTogW3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVha3BvaW50OiA1NTEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiAyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogMixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyb3dzOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVha3BvaW50OiAxMjAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFycm93czogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtwb2ludDogMTYwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiA0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJvd3M6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgkaG9tZUN1c3RvbWVyQ2Fyb3VzZWwubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCAkaG9tZUN1c3RvbWVyQ2Fyb3VzZWxUb3AgPSAkaG9tZUN1c3RvbWVyQ2Fyb3VzZWwub2Zmc2V0KCkudG9wIC0gc2NyZWVuLmhlaWdodDtcblxuICAgICAgICAgICAgaWYgKHRTY3JvbGwgPiAkaG9tZUN1c3RvbWVyQ2Fyb3VzZWxUb3AgJiYgY2hlY2tfaG9tZUN1c3RvbWVyQ2Fyb3VzZWwpIHtcbiAgICAgICAgICAgICAgICBjaGVja19ob21lQ3VzdG9tZXJDYXJvdXNlbCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgbGV0IGRvdHMgPSB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBhcnJvd3MgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgaWYgKCRob21lQ3VzdG9tZXJDYXJvdXNlbC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgZG90cyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGFycm93cyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRvdHMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgYXJyb3dzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAkaG9tZUN1c3RvbWVyQ2Fyb3VzZWwuc2xpY2soe1xuICAgICAgICAgICAgICAgICAgICBkb3RzOiBkb3RzLFxuICAgICAgICAgICAgICAgICAgICBhcnJvd3M6IGFycm93cyxcbiAgICAgICAgICAgICAgICAgICAgaW5maW5pdGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIG1vYmlsZUZpcnN0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDEsXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAxLFxuICAgICAgICAgICAgICAgICAgICByZXNwb25zaXZlOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtwb2ludDogNzY3LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgkaG9tZUJsb2dQb3N0c0Nhcm91c2VsLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgJGhvbWVCbG9nUG9zdHNDYXJvdXNlbFRvcCA9ICRob21lQmxvZ1Bvc3RzQ2Fyb3VzZWwub2Zmc2V0KCkudG9wIC0gc2NyZWVuLmhlaWdodDtcblxuICAgICAgICAgICAgaWYgKHRTY3JvbGwgPiAkaG9tZUJsb2dQb3N0c0Nhcm91c2VsVG9wICYmIGNoZWNrX2hvbWVCbG9nUG9zdHNDYXJvdXNlbCkge1xuICAgICAgICAgICAgICAgIGNoZWNrX2hvbWVCbG9nUG9zdHNDYXJvdXNlbCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgbGV0IGRvdHMgPSB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBhcnJvd3MgPSB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBmYWRlID0gZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbiA9IDE7XG5cbiAgICAgICAgICAgICAgICBpZiAoY29udGV4dC50aGVtZVNldHRpbmdzLmhvbWVCbG9nUG9zdHNDb2x1bW4gPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGRvdHMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBhcnJvd3MgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgZmFkZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZG90cyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBhcnJvd3MgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBmYWRlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGNvbnRleHQudGhlbWVTZXR0aW5ncy5ob21lQmxvZ1Bvc3RzQ29sdW1uID4gMSkge1xuICAgICAgICAgICAgICAgICAgICBjb2x1bW4gPSBjb250ZXh0LnRoZW1lU2V0dGluZ3MuaG9tZUJsb2dQb3N0c0NvbHVtbiAtIDE7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uID0gY29udGV4dC50aGVtZVNldHRpbmdzLmhvbWVCbG9nUG9zdHNDb2x1bW47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgJGhvbWVCbG9nUG9zdHNDYXJvdXNlbC5zbGljayh7XG4gICAgICAgICAgICAgICAgICAgIGRvdHM6IGRvdHMsXG4gICAgICAgICAgICAgICAgICAgIGFycm93czogYXJyb3dzLFxuICAgICAgICAgICAgICAgICAgICBmYWRlOiBmYWRlLFxuICAgICAgICAgICAgICAgICAgICBpbmZpbml0ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgbW9iaWxlRmlyc3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IGNvbnRleHQudGhlbWVTZXR0aW5ncy5ob21lQmxvZ1Bvc3RzQ29sdW1uLFxuICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogY29udGV4dC50aGVtZVNldHRpbmdzLmhvbWVCbG9nUG9zdHNDb2x1bW4sXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNpdmU6IFt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtwb2ludDogMTIwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IGNvbHVtbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IGNvbHVtbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrcG9pbnQ6IDc2OCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCRob21lSW1hZ2VQb2xpY3lDYXJvdXNlbC5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0ICRob21lSW1hZ2VQb2xpY3lDYXJvdXNlbFRvcCA9ICRob21lSW1hZ2VQb2xpY3lDYXJvdXNlbC5vZmZzZXQoKS50b3AgLSBzY3JlZW4uaGVpZ2h0O1xuXG4gICAgICAgICAgICBpZiAodFNjcm9sbCA+ICRob21lSW1hZ2VQb2xpY3lDYXJvdXNlbFRvcCAmJiBjaGVja19ob21lSW1hZ2VQb2xpY3lDYXJvdXNlbCkge1xuICAgICAgICAgICAgICAgIGNoZWNrX2hvbWVJbWFnZVBvbGljeUNhcm91c2VsID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAkaG9tZUltYWdlUG9saWN5Q2Fyb3VzZWwuc2xpY2soe1xuICAgICAgICAgICAgICAgICAgICBkb3RzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgYXJyb3dzOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBpbmZpbml0ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgbW9iaWxlRmlyc3Q6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGF1dG9wbGF5OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiAxLFxuICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogMSxcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2l2ZTogW3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVha3BvaW50OiAxMzk5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogNCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrcG9pbnQ6IDEwMjQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiAzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtwb2ludDogNTUwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgkaG9tZUNhdGVnb3J5Q2Fyb3VzZWwubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCAkaG9tZUNhdGVnb3J5Q2Fyb3VzZWxUb3AgPSAkaG9tZUNhdGVnb3J5Q2Fyb3VzZWwub2Zmc2V0KCkudG9wIC0gc2NyZWVuLmhlaWdodDtcblxuICAgICAgICAgICAgaWYgKHRTY3JvbGwgPiAkaG9tZUNhdGVnb3J5Q2Fyb3VzZWxUb3AgJiYgY2hlY2tfaG9tZUNhdGVnb3J5Q2Fyb3VzZWwpIHtcbiAgICAgICAgICAgICAgICBjaGVja19ob21lQ2F0ZWdvcnlDYXJvdXNlbCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgJGhvbWVDYXRlZ29yeUNhcm91c2VsLnNsaWNrKHtcbiAgICAgICAgICAgICAgICAgICAgZG90czogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGFycm93czogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgaW5maW5pdGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIG1vYmlsZUZpcnN0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBhdXRvcGxheTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMSxcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDEsXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNpdmU6IFt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtwb2ludDogMTM5OSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiA0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVha3BvaW50OiA3NjcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiAzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogM1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtwb2ludDogNTUwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvYWRNZW51VGFiKCkge1xuICAgICAgICBjb25zdCAkb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHRlbXBsYXRlOiAnc2VhcmNoL2hhbG8tbWVudS10YWInXG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY2Fub25pY2FsID0gJCgnW2Nhbm9uaWNhbC1zaG9wLXVybF0nKS5hdHRyKCdjYW5vbmljYWwtc2hvcC11cmwnKSxcbiAgICAgICAgICAgIHBhZ2VVcmwgPSAkLmNvb2tpZSgncGFnZS11cmwnKSxcbiAgICAgICAgICAgIG1lbnVUYWJJdGVtO1xuXG4gICAgICAgIGlmIChkb2N1bWVudC5VUkwgIT0gY2Fub25pY2FsKSB7XG4gICAgICAgICAgICBpZiAocGFnZVVybCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbWVudVRhYkl0ZW0gPSAkKGBbZGF0YS1sb2FkLXBhZ2U9XCIke3BhZ2VVcmx9XCJdYCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG1lbnVUYWJJdGVtID0gJCgnW2RhdGEtbG9hZC1wYWdlXS5hY3RpdmUnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIG1lbnVUYWIgPSBtZW51VGFiSXRlbS5jbG9zZXN0KCdbZGF0YS1tZW51LXRhYl0nKTtcblxuICAgICAgICAgICAgbWVudVRhYkl0ZW0uYWRkQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgbWVudVRhYi5maW5kKCdbZGF0YS1sb2FkLXBhZ2VdJykubm90KG1lbnVUYWJJdGVtKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIga2V5d29yZCA9ICQoJ1tkYXRhLW1lbnUtdGFiXSBsaS5hY3RpdmUnKS5kYXRhKCdsb2FkLXBhZ2UnKSxcbiAgICAgICAgICAgIHVybCA9ICQoJ1tkYXRhLW1lbnUtdGFiXSBsaS5hY3RpdmUgYScpLmF0dHIoJ2hyZWYnKTtcblxuICAgICAgICBpZiAoa2V5d29yZCAhPSAnLycpIHtcbiAgICAgICAgICAgIHV0aWxzLmFwaS5nZXRQYWdlKGAvc2VhcmNoLnBocD9zZWFyY2hfcXVlcnk9JHtrZXl3b3JkfWAsICRvcHRpb25zLCAoZXJyb3IsIGNvbnRlbnQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoJCh3aW5kb3cpLndpZHRoKCkgPCAxMDI1KSB7XG4gICAgICAgICAgICAgICAgICAgICQoJyNoYWxvLW1lbnUtc2lkZWJhciAubmF2UGFnZXMtbGlzdDpub3QoLm5hdlBhZ2VzLWxpc3QtLXVzZXIpJykuYXBwZW5kKCQoY29udGVudCkuZmluZCgnLm5hdlBhZ2VzLWxpc3QnKS5jaGlsZHJlbigpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAkKCcuaGFsby1ib3R0b21IZWFkZXIgW2RhdGEtbWVudV0gLm5hdlBhZ2VzJykucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgICQoJy5oYWxvLWJvdHRvbUhlYWRlciBbZGF0YS1tZW51XScpLmFwcGVuZChjb250ZW50KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAkKCdib2R5JykuYWRkQ2xhc3MoJ21lbnUtY3VzdG9tLWlzLWxvYWQnKTtcbiAgICAgICAgICAgICAgICAkKCcuaGVhZGVyLWxvZ28gLmhlYWRlci1sb2dvX19saW5rJykuYXR0cignaHJlZicsIHVybCk7XG4gICAgICAgICAgICAgICAgaGFsb01lZ2FNZW51RWRpdG9yQ3VzdG9tKCRjb250ZXh0KTtcbiAgICAgICAgICAgICAgICBtb2JpbGVNZW51VG9nZ2xlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhhbG9NZWdhTWVudUVkaXRvcigkY29udGV4dCk7XG4gICAgICAgICAgICBtb2JpbGVNZW51VG9nZ2xlKCk7XG4gICAgICAgIH1cblxuICAgICAgICAkKGRvY3VtZW50KS5vbignY2xpY2snLCAnW2RhdGEtbWVudS10YWJdIGxpJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB2YXIgYWN0aXZlID0gJChldmVudC5jdXJyZW50VGFyZ2V0KS5kYXRhKCdsb2FkLXBhZ2UnKSxcbiAgICAgICAgICAgICAgICBocmVmID0gJChldmVudC5jdXJyZW50VGFyZ2V0KS5hdHRyKCdocmVmJyk7XG5cbiAgICAgICAgICAgICQuY29va2llKCdwYWdlLXVybCcsIGFjdGl2ZSwge1xuICAgICAgICAgICAgICAgIGV4cGlyZXM6IDEsXG4gICAgICAgICAgICAgICAgcGF0aDogJy8nXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGNvbnRleHQudGhlbWVTZXR0aW5ncy5oYWxvX21lbnVfdGFiID09IHRydWUpIHtcbiAgICAgICAgbG9hZE1lbnVUYWIoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBibG9nVGFncygpIHtcbiAgICAgICAgaWYgKCQoJ2JvZHlbZGF0YS1wYWdlLXR5cGU9XCJibG9nXCJdJykubGVuZ3RoKSB7XG4gICAgICAgICAgICBsZXQgYXJyID0ge307XG5cbiAgICAgICAgICAgICQoJyNibG9nLXRhZ3MgLnJlY2VudFBvc3RzX3RhZ3MgW2RhdGEtdGFnXScpLmVhY2goZnVuY3Rpb24oaSkge1xuICAgICAgICAgICAgICAgIHZhciB0eHQgPSAkKHRoaXMpLmRhdGEoJ3RhZycpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGFyclt0eHRdKSB7XG4gICAgICAgICAgICAgICAgICAgICQodGhpcykucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYXJyW3R4dF0gPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAkKCcjYmxvZy10YWdzIC5yZWNlbnRQb3N0c190YWdzJykuc2hvdygpO1xuICAgICAgICB9IGVsc2UgaWYgKCQoJ2JvZHlbZGF0YS1wYWdlLXR5cGU9XCJibG9nX3Bvc3RcIl0nKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IHVybF9ibG9nVGFncyA9ICcvYmxvZyc7XG5cbiAgICAgICAgICAgICQuZ2V0KHVybF9ibG9nVGFncywgZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgIGxldCBhcnIgPSB7fTtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9ICQoZGF0YSkuZmluZCgnI2Jsb2ctdGFncyAucmVjZW50UG9zdHNfdGFncycpLmh0bWwoKTtcblxuICAgICAgICAgICAgICAgICQoJyNibG9nLXRhZ3MgLnJlY2VudFBvc3RzX3RhZ3MnKS5odG1sKHJlc3BvbnNlKTtcblxuICAgICAgICAgICAgICAgICQoJyNibG9nLXRhZ3MgLnJlY2VudFBvc3RzX3RhZ3MgW2RhdGEtdGFnXScpLmVhY2goZnVuY3Rpb24oaSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdHh0ID0gJCh0aGlzKS5kYXRhKCd0YWcnKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoYXJyW3R4dF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJbdHh0XSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICQoJyNibG9nLXRhZ3MgLnJlY2VudFBvc3RzX3RhZ3MnKS5zaG93KCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhvbWVQYXJhbGxheCh0U2Nyb2xsKSB7XG4gICAgICAgIGNvbnN0ICRob21lUGFyYWxsYXggPSAkKCcuaGFsb0Jhbm5lclBhcmFsbGF4Jyk7XG5cbiAgICAgICAgaWYgKCRob21lUGFyYWxsYXgubGVuZ3RoKSB7XG4gICAgICAgICAgICAkaG9tZVBhcmFsbGF4LmVhY2goZnVuY3Rpb24oaSkge1xuICAgICAgICAgICAgICAgIGNvbnN0ICRob21lUGFyYWxsYXhIYWZ0ID0gJGhvbWVQYXJhbGxheC5lcShpKS5vdXRlckhlaWdodCgpLzI7XG4gICAgICAgICAgICAgICAgY29uc3QgJGhvbWVQYXJhbGxheFRvcCA9ICRob21lUGFyYWxsYXguZXEoaSkub2Zmc2V0KCkudG9wIC0gc2NyZWVuLmhlaWdodDtcbiAgICAgICAgICAgICAgICBjb25zdCAkaG9tZVBhcmFsbGF4Qm90dG9tID0gJGhvbWVQYXJhbGxheC5lcShpKS5vZmZzZXQoKS50b3AgKyAkaG9tZVBhcmFsbGF4Lm91dGVySGVpZ2h0KCk7XG4gICAgICAgICAgICAgICAgdmFyIGltZyA9ICRob21lUGFyYWxsYXguZXEoaSkuZmluZCgnaW1nJyk7XG5cbiAgICAgICAgICAgICAgICBpZiAodFNjcm9sbCA8ICRob21lUGFyYWxsYXhCb3R0b20gJiYgdFNjcm9sbCA+ICRob21lUGFyYWxsYXhUb3ApIHtcbiAgICAgICAgICAgICAgICAgICAgJGhvbWVQYXJhbGxheC5lcShpKS5maW5kKCcuaGFsb0Jhbm5lclBhcmFsbGF4X19pbWcnKS5hZGRDbGFzcygnaXMtem9vbScpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICRob21lUGFyYWxsYXguZXEoaSkuZmluZCgnLmhhbG9CYW5uZXJQYXJhbGxheF9faW1nJykucmVtb3ZlQ2xhc3MoJ2lzLXpvb20nKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoKHRTY3JvbGwgPiAkaG9tZVBhcmFsbGF4Qm90dG9tIC0gJGhvbWVQYXJhbGxheEhhZnQpICYmICh0U2Nyb2xsIDwgJGhvbWVQYXJhbGxheEJvdHRvbSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaW1nLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b3A6ICctMjAlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgwLCAyMCUpIHNjYWxlM2QoMS4xLCAxLjEsIDEuMSknLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogJ2FsbCAuOHMgZWFzZSdcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0U2Nyb2xsIDwgJGhvbWVQYXJhbGxheEJvdHRvbSAtICRob21lUGFyYWxsYXhIYWZ0IC0gc2NyZWVuLmhlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICBpbWcuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogJzIwJScsXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoMCwgLTIwJSkgc2NhbGUzZCgxLjEsIDEuMSwgMS4xKScsXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiAnYWxsIC44cyBlYXNlJ1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpbWcuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogJydcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYWxvZmFkZUluVXAodFNjcm9sbCkge1xuICAgICAgICBjb25zdCAkaGFsb0Jsb2NrID0gJCgnLmhhbG8tZmFkZUluVXAnKTtcblxuICAgICAgICBpZiAoJGhhbG9CbG9jay5sZW5ndGgpIHtcbiAgICAgICAgICAgICRoYWxvQmxvY2suZWFjaChmdW5jdGlvbihpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgJGhhbG9CbG9ja1RvcCA9ICRoYWxvQmxvY2suZXEoaSkub2Zmc2V0KCkudG9wIC0gc2NyZWVuLmhlaWdodCArIDUwO1xuICAgICAgICAgICAgICAgIGNvbnN0ICRoYWxvQmxvY2tCb3R0b20gPSAkaGFsb0Jsb2NrLmVxKGkpLm9mZnNldCgpLnRvcCArIHNjcmVlbi5oZWlnaHQgLSA1MDtcbiAgICAgICAgICAgICAgICB2YXIgaW1nID0gJGhhbG9CbG9jay5lcShpKS5maW5kKCdpbWcnKTtcblxuICAgICAgICAgICAgICAgIGlmICh0U2Nyb2xsIDwgJGhhbG9CbG9ja0JvdHRvbSAmJiB0U2Nyb2xsID4gJGhhbG9CbG9ja1RvcCkge1xuICAgICAgICAgICAgICAgICAgICAkaGFsb0Jsb2NrLmVxKGkpLmFkZENsYXNzKCdhbmltYXRlZCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHV0aWxzIGZyb20gJ0BiaWdjb21tZXJjZS9zdGVuY2lsLXV0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29udGV4dCkge1xuICAgIGNvbnN0IHRva2VuID0gY29udGV4dC50b2tlbixcbiAgICAgICAgICBjdXJDb2RlID0gJCgnLmJvZHknKS5kYXRhKCdjdXJyZW5jeS1jb2RlJyk7XG4gICAgICAgIFxuICAgIHZhciBsaXN0MSA9IFtdLFxuICAgICAgICBsaXN0MiA9IFtdLFxuICAgICAgICBwcm9kdWN0TG9va0Jvb2sxID0gJCgnI2xvb2tCb29rMSAubG9va0Jvb2sxX19wb2ludCcpLFxuICAgICAgICBwcm9kdWN0TG9va0Jvb2syID0gJCgnI2xvb2tCb29rMiAubG9va0Jvb2syX19wb2ludCcpLFxuICAgICAgICBsb29rYm9va1BvcHVwID0gJCgnI2hhbG8tbG9va2Jvb2stcG9wdXAnKSxcbiAgICAgICAgbG9va2Jvb2tTbGlkZTtcblxuICAgIGlmIChwcm9kdWN0TG9va0Jvb2sxKSB7XG4gICAgICAgIHByb2R1Y3RMb29rQm9vazEuZWFjaCgoaW5kZXgsIGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHByb2R1Y3RJRHMgPSAkKGVsZW1lbnQpLmZpbmQoJy5sb29rQm9vazFfX2ljb24nKS5kYXRhKCdwcm9kdWN0LWlkJyk7XG5cbiAgICAgICAgICAgIGxpc3QxLnB1c2gocHJvZHVjdElEcy50b1N0cmluZygpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHByb2R1Y3RMb29rQm9vazIpIHtcbiAgICAgICAgcHJvZHVjdExvb2tCb29rMi5lYWNoKChpbmRleCwgZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcHJvZHVjdElEcyA9ICQoZWxlbWVudCkuZmluZCgnLmxvb2tCb29rMl9faWNvbicpLmRhdGEoJ3Byb2R1Y3QtaWQnKTtcblxuICAgICAgICAgICAgbGlzdDIucHVzaChwcm9kdWN0SURzLnRvU3RyaW5nKCkpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBsaXN0MSA9IHVuaXF1ZUFycmF5KGxpc3QxKTtcblxuICAgIGlmKGxpc3QxLmxlbmd0aCA+IDApe1xuICAgICAgICBnZXRQcm9kdWN0KGxpc3QxKS50aGVuKGRhdGEgPT4ge1xuICAgICAgICAgICAgJC5lYWNoKGxpc3QxLCAoaWR4LCBpdGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIHRtcCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICByZW5kZXJQcm9kdWN0KGRhdGEuc2l0ZS5wcm9kdWN0cy5lZGdlcywgZGF0YS5zaXRlLmN1cnJlbmN5LmRpc3BsYXksIHRtcCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgbGlzdDIgPSB1bmlxdWVBcnJheShsaXN0Mik7XG5cbiAgICBpZihsaXN0Mi5sZW5ndGggPiAwKXtcbiAgICAgICAgZ2V0UHJvZHVjdChsaXN0MikudGhlbihkYXRhID0+IHtcbiAgICAgICAgICAgICQuZWFjaChsaXN0MiwgKGlkeCwgaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgIHZhciB0bXAgPSAkKCcubG9va0Jvb2syX19wcm9kdWN0V3JhcHBlcicpLmVxKGlkeCk7XG5cbiAgICAgICAgICAgICAgICByZW5kZXJQcm9kdWN0KGRhdGEuc2l0ZS5wcm9kdWN0cy5lZGdlcywgZGF0YS5zaXRlLmN1cnJlbmN5LmRpc3BsYXksIHRtcCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKCQod2luZG93KS53aWR0aCgpID4gMTAyNCkge1xuICAgICAgICAkKGRvY3VtZW50KS5vbignbW91c2VvdmVyJywgJyNsb29rQm9vazEgW2RhdGEtcHJvZHVjdC1sb29rYm9va10nLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0ICRwcm9kdWN0SUQgPSAkKGV2ZW50LnRhcmdldCkuZGF0YSgncHJvZHVjdC1pZCcpLFxuICAgICAgICAgICAgICAgICRwb3B1cCA9ICQoZXZlbnQudGFyZ2V0KS5wYXJlbnQoKS5maW5kKCcubG9va0Jvb2tfX3BvcHVwJyk7XG5cbiAgICAgICAgICAgIGlmKCRwcm9kdWN0SUQgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgJHBvcHVwLmFkZENsYXNzKCdpcy1vcGVuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgICQoZG9jdW1lbnQpLm9uKCdjbGljaycsICcjbG9va0Jvb2sxIC5zaG93X3Byb2R1Y3RzJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICBnZXRTaG9wVGhlTG9vazEoZXZlbnQudGFyZ2V0KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJChkb2N1bWVudCkub24oJ2NsaWNrJywgJyNsb29rQm9vazEgLmhpZGVfcHJvZHVjdHMnLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgIGxvb2tib29rU2xpZGUgPSBsb29rYm9va1BvcHVwLmZpbmQoJy5wcm9kdWN0Q2Fyb3VzZWwtc2xpZGUnKTtcblxuICAgICAgICAgICAgJChldmVudC50YXJnZXQpLnBhcmVudCgpLnJlbW92ZUNsYXNzKCdpcy1zaG93Jyk7XG4gICAgICAgICAgICAkKCdib2R5JykucmVtb3ZlQ2xhc3MoJ29wZW5Mb29rYm9va1BvcHVwJyk7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgbG9va2Jvb2tTbGlkZS5hZGRDbGFzcygnaXMtaGlkZGVuJyk7XG4gICAgICAgICAgICAgICAgJCgnI2hhbG8tbG9va2Jvb2stcG9wdXAgLm5vLXByb2R1Y3RzJykuaGlkZSgpO1xuICAgICAgICAgICAgfSwgMzAwKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJCgnI2xvb2tCb29rMiBbZGF0YS1wcm9kdWN0LWxvb2tib29rXScpLm9uKCdjbGljaycsIGV2ZW50ID0+IHtcbiAgICAgICAgICAgIGNvbnN0ICR0aGlzU2xpZGUgPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLnBhcmVudHMoJy5sb29rQm9vazJfX2l0ZW0nKSxcbiAgICAgICAgICAgICAgICAgICR0aGlzUHJvZHVjdCA9ICQoZXZlbnQuY3VycmVudFRhcmdldCkuZGF0YSgncHJvZHVjdC1pZCcpLFxuICAgICAgICAgICAgICAgICAgJHByb2R1Y3RCbG9jayA9ICR0aGlzU2xpZGUuZmluZCgnLmxvb2tCb29rMl9fcHJvZHVjdFdyYXBwZXInKTtcblxuICAgICAgICAgICAgaWYoJHRoaXNTbGlkZS5oYXNDbGFzcygnc2hvdy1vbmUtcHJvZHVjdCcpKSB7XG4gICAgICAgICAgICAgICAgJHByb2R1Y3RCbG9jay5maW5kKCcucHJvZHVjdEdyaWQnKS5hZGRDbGFzcygnaXMtaGlkZGVuJyk7XG4gICAgICAgICAgICAgICAgJChldmVudC5jdXJyZW50VGFyZ2V0KS5wYXJlbnRzKCcubG9va0Jvb2syX19pbWcnKS5maW5kKCcubG9va0Jvb2syX19wcm9kdWN0UG9wdXAnKS5yZW1vdmVDbGFzcygnaXMtb3BlbicpO1xuXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAkcHJvZHVjdEJsb2NrLmZpbmQoYFtkYXRhLXByb2R1Y3QtaWQ9JHskdGhpc1Byb2R1Y3R9XWApLmVxKDApLnJlbW92ZUNsYXNzKCdpcy1oaWRkZW4nKTtcbiAgICAgICAgICAgICAgICAgICAgJHRoaXNTbGlkZS5hZGRDbGFzcygnc2hvdy1vbmUtcHJvZHVjdCcpO1xuICAgICAgICAgICAgICAgICAgICAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLnBhcmVudHMoJy5sb29rQm9vazJfX2ltZycpLmZpbmQoJy5sb29rQm9vazJfX3Byb2R1Y3RQb3B1cCcpLmFkZENsYXNzKCdpcy1vcGVuJyk7XG4gICAgICAgICAgICAgICAgfSwgMzAwKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJHByb2R1Y3RCbG9jay5maW5kKGBbZGF0YS1wcm9kdWN0LWlkPSR7JHRoaXNQcm9kdWN0fV1gKS5lcSgwKS5yZW1vdmVDbGFzcygnaXMtaGlkZGVuJyk7XG4gICAgICAgICAgICAgICAgJHRoaXNTbGlkZS5hZGRDbGFzcygnc2hvdy1vbmUtcHJvZHVjdCcpO1xuICAgICAgICAgICAgICAgICQoZXZlbnQuY3VycmVudFRhcmdldCkucGFyZW50cygnLmxvb2tCb29rMl9faW1nJykuZmluZCgnLmxvb2tCb29rMl9fcHJvZHVjdFBvcHVwJykuYWRkQ2xhc3MoJ2lzLW9wZW4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgJChkb2N1bWVudCkub24oJ2NsaWNrJywgJyNsb29rQm9vazIgLnNob3dfcHJvZHVjdHMnLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgIGNvbnN0ICR0aGlzU2xpZGUgPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLnBhcmVudHMoJy5sb29rQm9vazJfX2l0ZW0nKSxcbiAgICAgICAgICAgICAgICAgICRwcm9kdWN0QmxvY2sgPSAkdGhpc1NsaWRlLmZpbmQoJy5sb29rQm9vazJfX3Byb2R1Y3RXcmFwcGVyJyk7XG5cbiAgICAgICAgICAgIGlmKCR0aGlzU2xpZGUuaGFzQ2xhc3MoJ3Nob3ctb25lLXByb2R1Y3QnKSkge1xuICAgICAgICAgICAgICAgICRwcm9kdWN0QmxvY2suZmluZCgnLnByb2R1Y3RHcmlkJykuYWRkQ2xhc3MoJ2lzLWhpZGRlbicpO1xuICAgICAgICAgICAgICAgICAgICAkdGhpc1NsaWRlLmZpbmQoJy5sb29rQm9vazJfX3Byb2R1Y3RQb3B1cCcpLnJlbW92ZUNsYXNzKCdpcy1vcGVuJyk7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAkdGhpc1NsaWRlLnJlbW92ZUNsYXNzKCdzaG93LW9uZS1wcm9kdWN0Jyk7XG4gICAgICAgICAgICAgICAgfSwgMzAwKTtcblxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgZ2V0UHJvZHVjdEdyaWQoKTtcbiAgICAgICAgICAgICAgICAgICAgJChldmVudC50YXJnZXQpLnBhcmVudCgpLmFkZENsYXNzKCdpcy1zaG93Jyk7XG4gICAgICAgICAgICAgICAgICAgICQoZXZlbnQudGFyZ2V0KS5wYXJlbnRzKCcubG9va0Jvb2syX19pbWcnKS5maW5kKCcubG9va0Jvb2syX19wcm9kdWN0UG9wdXAnKS5hZGRDbGFzcygnaXMtb3BlbicpO1xuICAgICAgICAgICAgICAgIH0sIDMwMCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHRydWUpO1xuICAgICAgICAgICAgICAgIGdldFByb2R1Y3RHcmlkKCk7XG5cbiAgICAgICAgICAgICAgICAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLnBhcmVudCgpLmFkZENsYXNzKCdpcy1zaG93Jyk7XG4gICAgICAgICAgICAgICAgJChldmVudC5jdXJyZW50VGFyZ2V0KS5wYXJlbnRzKCcubG9va0Jvb2syX19pbWcnKS5maW5kKCcubG9va0Jvb2syX19wcm9kdWN0UG9wdXAnKS5hZGRDbGFzcygnaXMtb3BlbicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRQcm9kdWN0R3JpZCgpIHtcbiAgICAgICAgICAgICAgICAkdGhpc1NsaWRlLmZpbmQoJy5sb29rQm9vazJfX3BvaW50JykuZWFjaCgoaW5kZXgsIGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvZHVjdElEID0gJChlbGVtZW50KS5maW5kKCcubG9va0Jvb2syX19pY29uJykuZGF0YSgncHJvZHVjdC1pZCcpO1xuXG4gICAgICAgICAgICAgICAgICAgICRwcm9kdWN0QmxvY2suZmluZChgW2RhdGEtcHJvZHVjdC1pZD0ke3Byb2R1Y3RJRH1dYCkuZXEoMCkucmVtb3ZlQ2xhc3MoJ2lzLWhpZGRlbicpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAkKGRvY3VtZW50KS5vbignY2xpY2snLCAnLmxvb2tCb29rMl9fcHJvZHVjdFBvcHVwIC5jbG9zZScsIGV2ZW50ID0+IHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgIGNvbnN0ICR0aGlzU2xpZGUgPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLnBhcmVudCgpO1xuICAgICAgICAgICAgbG9va2Jvb2tTbGlkZSA9ICR0aGlzU2xpZGUuZmluZCgnLnByb2R1Y3RHcmlkJyk7XG5cbiAgICAgICAgICAgICQoJyNsb29rQm9vazEgLmxvb2tCb29rMV9fYnRuU2hvd1Byb2R1Y3RzJykucmVtb3ZlQ2xhc3MoJ2lzLXNob3cnKTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAkdGhpc1NsaWRlLnBhcmVudHMoJy5sb29rQm9vazJfX2l0ZW0nKS5yZW1vdmVDbGFzcygnc2hvdy1vbmUtcHJvZHVjdCcpO1xuICAgICAgICAgICAgfSwgMzAwKTtcblxuICAgICAgICAgICAgJChldmVudC5jdXJyZW50VGFyZ2V0KS5wYXJlbnRzKCcubG9va0Jvb2syX19pdGVtJykuZmluZCgnLmxvb2tCb29rMl9fYnRuU2hvd1Byb2R1Y3RzJykucmVtb3ZlQ2xhc3MoJ2lzLXNob3cnKTtcbiAgICAgICAgICAgICQoZXZlbnQuY3VycmVudFRhcmdldCkucGFyZW50cygnLmxvb2tCb29rMl9faXRlbScpLmZpbmQoJy5sb29rQm9vazJfX3Byb2R1Y3RQb3B1cCcpLnJlbW92ZUNsYXNzKCdpcy1vcGVuJyk7XG4gICAgICAgICAgICBsb29rYm9va1NsaWRlLmFkZENsYXNzKCdpcy1oaWRkZW4nKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJChkb2N1bWVudCkub24oJ2NsaWNrJywgZXZlbnQgPT4ge1xuICAgICAgICAgICAgaWYgKCQoJ2JvZHknKS5oYXNDbGFzcygnb3Blbkxvb2tib29rUG9wdXAnKSkge1xuICAgICAgICAgICAgICAgIGxvb2tib29rU2xpZGUgPSBsb29rYm9va1BvcHVwLmZpbmQoJy5wcm9kdWN0Q2Fyb3VzZWwtc2xpZGUnKTtcblxuICAgICAgICAgICAgICAgIGlmICgoJChldmVudC50YXJnZXQpLmNsb3Nlc3QoJyNoYWxvLWxvb2tib29rLXBvcHVwJykubGVuZ3RoID09PSAwKSAmJiAoJChldmVudC50YXJnZXQpLmNsb3Nlc3QoJy5sb29rQm9vazFfX2J0blNob3dQcm9kdWN0cycpLmxlbmd0aCA9PT0gMCkpe1xuICAgICAgICAgICAgICAgICAgICAkKCcjbG9va0Jvb2sxIC5sb29rQm9vazFfX2J0blNob3dQcm9kdWN0cycpLnJlbW92ZUNsYXNzKCdpcy1zaG93Jyk7XG4gICAgICAgICAgICAgICAgICAgICQoJ2JvZHknKS5yZW1vdmVDbGFzcygnb3Blbkxvb2tib29rUG9wdXAnKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9va2Jvb2tTbGlkZS5hZGRDbGFzcygnaXMtaGlkZGVuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcjaGFsby1sb29rYm9vay1wb3B1cCAubm8tcHJvZHVjdHMnKS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sIDMwMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCQoJyNsb29rQm9vazEgLmxvb2tCb29rX19wb3B1cCcpLmhhc0NsYXNzKCdpcy1vcGVuJykpIHtcbiAgICAgICAgICAgICAgICAkKCcjbG9va0Jvb2sxIC5sb29rQm9va19fcG9wdXAnKS5yZW1vdmVDbGFzcygnaXMtb3BlbicpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAkKGRvY3VtZW50KS5vbignY2xpY2snLCAnI2xvb2tCb29rMSBbZGF0YS1wcm9kdWN0LWxvb2tib29rXScsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgZ2V0U2hvcFRoZUxvb2sxKGV2ZW50LnRhcmdldCk7XG5cbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gJChldmVudC5jdXJyZW50VGFyZ2V0KS5wYXJlbnRzKCcubG9va0Jvb2sxX19wb2ludCcpLmRhdGEoJ2luZGV4JyksXG4gICAgICAgICAgICAgICAgICBoYWxvTG9va2Jvb2tQb3B1cCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjaGFsby1sb29rYm9vay1wb3B1cFwiKTtcblxuICAgICAgICAgICAgaGFsb0xvb2tib29rUG9wdXAucXVlcnlTZWxlY3RvcignW2RhdGEtaW5kZXg9XCInICsgaW5kZXggKyAnXCJdOm5vdCguaXMtaGlkZGVuKScpLmNsYXNzTGlzdC5hZGQoJ2lzLWFjdGl2ZScpO1xuICAgICAgICAgICAgaGFsb0xvb2tib29rUG9wdXAucXVlcnlTZWxlY3RvcignW2RhdGEtaW5kZXg9XCInICsgaW5kZXggKyAnXCJdOm5vdCguaXMtaGlkZGVuKScpLnNjcm9sbEludG9WaWV3KHsgYmxvY2s6IFwibmVhcmVzdFwiLCBiZWhhdmlvcjogXCJzbW9vdGhcIiB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJChkb2N1bWVudCkub24oJ2NsaWNrJywgJyNsb29rQm9vazIgW2RhdGEtcHJvZHVjdC1sb29rYm9va10nLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGdldFNob3BUaGVMb29rMihldmVudC50YXJnZXQpO1xuXG4gICAgICAgICAgICBjb25zdCBpbmRleCA9ICQoZXZlbnQuY3VycmVudFRhcmdldCkucGFyZW50cygnLmxvb2tCb29rMl9fcG9pbnQnKS5kYXRhKCdpbmRleCcpLFxuICAgICAgICAgICAgICAgICAgaGFsb0xvb2tib29rUG9wdXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2hhbG8tbG9va2Jvb2stcG9wdXBcIik7XG5cbiAgICAgICAgICAgIGhhbG9Mb29rYm9va1BvcHVwLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWluZGV4PVwiJyArIGluZGV4ICsgJ1wiXTpub3QoLmlzLWhpZGRlbiknKS5jbGFzc0xpc3QuYWRkKCdpcy1hY3RpdmUnKTtcbiAgICAgICAgICAgIGhhbG9Mb29rYm9va1BvcHVwLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWluZGV4PVwiJyArIGluZGV4ICsgJ1wiXTpub3QoLmlzLWhpZGRlbiknKS5zY3JvbGxJbnRvVmlldyh7IGJsb2NrOiBcIm5lYXJlc3RcIiwgYmVoYXZpb3I6IFwic21vb3RoXCIgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgICQoJyNoYWxvLWxvb2tib29rLXBvcHVwIC5sb29rYm9vay1wb3B1cC10aXRsZSAuY2xvc2UnKS5vbignY2xpY2snLCBldmVudCA9PntcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICBsb29rYm9va1NsaWRlID0gbG9va2Jvb2tQb3B1cC5maW5kKCcucHJvZHVjdENhcm91c2VsLXNsaWRlJyk7XG5cbiAgICAgICAgJCgnI2xvb2tCb29rMSAubG9va0Jvb2sxX19idG5TaG93UHJvZHVjdHMnKS5yZW1vdmVDbGFzcygnaXMtc2hvdycpO1xuICAgICAgICAkKCdib2R5JykucmVtb3ZlQ2xhc3MoJ29wZW5Mb29rYm9va1BvcHVwJyk7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGxvb2tib29rU2xpZGUuYWRkQ2xhc3MoJ2lzLWhpZGRlbicpO1xuICAgICAgICAgICAgbG9va2Jvb2tTbGlkZS5yZW1vdmVDbGFzcygnaXMtYWN0aXZlJyk7XG4gICAgICAgICAgICAkKCcjaGFsby1sb29rYm9vay1wb3B1cCAubm8tcHJvZHVjdHMnKS5oaWRlKCk7XG4gICAgICAgIH0sIDMwMCk7XG4gICAgfSk7XG5cbiAgICAkKCcuaGFsby1iYWNrZ3JvdW5kJykub24oJ2NsaWNrJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgaWYgKCQoJ2JvZHknKS5oYXNDbGFzcygnb3Blbkxvb2tib29rUG9wdXAnKSkge1xuICAgICAgICAgICAgbG9va2Jvb2tTbGlkZSA9IGxvb2tib29rUG9wdXAuZmluZCgnLnByb2R1Y3RDYXJvdXNlbC1zbGlkZScpO1xuXG4gICAgICAgICAgICAkKCcjbG9va0Jvb2sxIC5sb29rQm9vazFfX2J0blNob3dQcm9kdWN0cycpLnJlbW92ZUNsYXNzKCdpcy1zaG93Jyk7XG4gICAgICAgICAgICAkKCdib2R5JykucmVtb3ZlQ2xhc3MoJ29wZW5Mb29rYm9va1BvcHVwJyk7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgbG9va2Jvb2tTbGlkZS5hZGRDbGFzcygnaXMtaGlkZGVuJyk7XG4gICAgICAgICAgICAgICAgbG9va2Jvb2tTbGlkZS5yZW1vdmVDbGFzcygnaXMtYWN0aXZlJyk7XG4gICAgICAgICAgICAgICAgJCgnI2hhbG8tbG9va2Jvb2stcG9wdXAgLm5vLXByb2R1Y3RzJykuaGlkZSgpO1xuICAgICAgICAgICAgfSwgMzAwKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gZ2V0U2hvcFRoZUxvb2sxKGV2ZW50KSB7XG4gICAgICAgIGNvbnN0ICR0aGlzU2xpZGUgPSAkKGV2ZW50KS5wYXJlbnRzKCcubG9va0Jvb2sxX19pdGVtJyk7XG4gICAgICAgIGxvb2tib29rU2xpZGUgPSBsb29rYm9va1BvcHVwLmZpbmQoJy5wcm9kdWN0Q2Fyb3VzZWwtc2xpZGUnKTtcblxuICAgICAgICB2YXIgdGl0bGU7XG5cbiAgICAgICAgaWYoJCgnI2xvb2tCb29rMSAubG9va0Jvb2sxX19oZWFkZXIgLnRpdGxlJykubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aXRsZSA9ICQoJyNsb29rQm9vazEgLmxvb2tCb29rMV9faGVhZGVyIC50aXRsZScpLnRleHQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRpdGxlID0gJ1Nob3AgVGhlIExvb2snXG4gICAgICAgIH1cblxuICAgICAgICBsb29rYm9va1BvcHVwLmZpbmQoJy50aXRsZScpLnRleHQodGl0bGUpO1xuXG4gICAgICAgIGlmKCQoJ2JvZHknKS5oYXNDbGFzcygnb3Blbkxvb2tib29rUG9wdXAnKSkge1xuICAgICAgICAgICAgJCgnI2xvb2tCb29rMSAubG9va0Jvb2sxX19idG5TaG93UHJvZHVjdHMnKS5yZW1vdmVDbGFzcygnaXMtc2hvdycpO1xuICAgICAgICAgICAgJCgnYm9keScpLnJlbW92ZUNsYXNzKCdvcGVuTG9va2Jvb2tQb3B1cCcpO1xuICAgICAgICAgICAgbG9va2Jvb2tTbGlkZS5hZGRDbGFzcygnaXMtaGlkZGVuJyk7XG4gICAgICAgICAgICAkKCcjaGFsby1sb29rYm9vay1wb3B1cCAubm8tcHJvZHVjdHMnKS5oaWRlKCk7XG5cbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBnZXRQcm9kdWN0U2xpZGUoKTtcbiAgICAgICAgICAgICAgICAkKGV2ZW50KS5wYXJlbnQoKS5hZGRDbGFzcygnaXMtc2hvdycpO1xuICAgICAgICAgICAgICAgICQoJ2JvZHknKS5hZGRDbGFzcygnb3Blbkxvb2tib29rUG9wdXAnKTtcbiAgICAgICAgICAgIH0sIDMwMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnZXRQcm9kdWN0U2xpZGUoKTtcblxuICAgICAgICAgICAgJChldmVudCkucGFyZW50KCkuYWRkQ2xhc3MoJ2lzLXNob3cnKTtcbiAgICAgICAgICAgICQoJ2JvZHknKS5hZGRDbGFzcygnb3Blbkxvb2tib29rUG9wdXAnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldFByb2R1Y3RTbGlkZSgpIHtcbiAgICAgICAgICAgICR0aGlzU2xpZGUuZmluZCgnLmxvb2tCb29rMV9fcG9pbnQnKS5lYWNoKChpbmRleCwgZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHByb2R1Y3RJRCA9ICQoZWxlbWVudCkuZmluZCgnLmxvb2tCb29rMV9faWNvbicpLmRhdGEoJ3Byb2R1Y3QtaWQnKTtcblxuICAgICAgICAgICAgICAgIGlmKGxvb2tib29rUG9wdXAuZmluZChgW2RhdGEtcHJvZHVjdC1pZD0ke3Byb2R1Y3RJRH1dYCkuZXEoMCkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvb2tib29rUG9wdXAuZmluZChgW2RhdGEtcHJvZHVjdC1pZD0ke3Byb2R1Y3RJRH1dYCkuZXEoMCkucmVtb3ZlQ2xhc3MoJ2lzLWhpZGRlbicpO1xuICAgICAgICAgICAgICAgICAgICBsb29rYm9va1BvcHVwLmZpbmQoYFtkYXRhLXByb2R1Y3QtaWQ9JHtwcm9kdWN0SUR9XWApLmVxKDApLmF0dHIoJ2RhdGEtaW5kZXgnLCBpbmRleCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbG9va2Jvb2tQb3B1cC5maW5kKCcubm8tcHJvZHVjdHMnKS5zaG93KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTaG9wVGhlTG9vazIoZXZlbnQpIHtcbiAgICAgICAgY29uc3QgJHRoaXNTbGlkZSA9ICQoZXZlbnQpLnBhcmVudHMoJy5sb29rQm9vazJfX2l0ZW0nKTtcbiAgICAgICAgbG9va2Jvb2tTbGlkZSA9IGxvb2tib29rUG9wdXAuZmluZCgnLnByb2R1Y3RDYXJvdXNlbC1zbGlkZScpO1xuXG4gICAgICAgIHZhciB0aXRsZTtcblxuICAgICAgICBpZigkKCcjbG9va0Jvb2syIC5sb29rQm9vazJfX2hlYWRlciAudGl0bGUnKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRpdGxlID0gJCgnI2xvb2tCb29rMiAubG9va0Jvb2syX19oZWFkZXIgLnRpdGxlJykudGV4dCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGl0bGUgPSAnU2hvcCBUaGUgTG9vaydcbiAgICAgICAgfVxuXG4gICAgICAgIGxvb2tib29rUG9wdXAuZmluZCgnLnRpdGxlJykudGV4dCh0aXRsZSk7XG5cbiAgICAgICAgaWYoJCgnYm9keScpLmhhc0NsYXNzKCdvcGVuTG9va2Jvb2tQb3B1cCcpKSB7XG4gICAgICAgICAgICAkKCcjbG9va0Jvb2syIC5sb29rQm9vazJfX2J0blNob3dQcm9kdWN0cycpLnJlbW92ZUNsYXNzKCdpcy1zaG93Jyk7XG4gICAgICAgICAgICAkKCdib2R5JykucmVtb3ZlQ2xhc3MoJ29wZW5Mb29rYm9va1BvcHVwJyk7XG4gICAgICAgICAgICBsb29rYm9va1NsaWRlLmFkZENsYXNzKCdpcy1oaWRkZW4nKTtcbiAgICAgICAgICAgICQoJyNoYWxvLWxvb2tib29rLXBvcHVwIC5uby1wcm9kdWN0cycpLmhpZGUoKTtcblxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIGdldFByb2R1Y3RTbGlkZSgpO1xuICAgICAgICAgICAgICAgICQoZXZlbnQpLnBhcmVudCgpLmFkZENsYXNzKCdpcy1zaG93Jyk7XG4gICAgICAgICAgICAgICAgJCgnYm9keScpLmFkZENsYXNzKCdvcGVuTG9va2Jvb2tQb3B1cCcpO1xuICAgICAgICAgICAgfSwgMzAwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdldFByb2R1Y3RTbGlkZSgpO1xuXG4gICAgICAgICAgICAkKGV2ZW50KS5wYXJlbnQoKS5hZGRDbGFzcygnaXMtc2hvdycpO1xuICAgICAgICAgICAgJCgnYm9keScpLmFkZENsYXNzKCdvcGVuTG9va2Jvb2tQb3B1cCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0UHJvZHVjdFNsaWRlKCkge1xuICAgICAgICAgICAgJHRoaXNTbGlkZS5maW5kKCcubG9va0Jvb2syX19wb2ludCcpLmVhY2goKGluZGV4LCBlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJvZHVjdElEID0gJChlbGVtZW50KS5maW5kKCcubG9va0Jvb2syX19pY29uJykuZGF0YSgncHJvZHVjdC1pZCcpO1xuXG4gICAgICAgICAgICAgICAgbG9va2Jvb2tQb3B1cC5maW5kKGBbZGF0YS1wcm9kdWN0LWlkPSR7cHJvZHVjdElEfV1gKS5lcSgwKS5yZW1vdmVDbGFzcygnaXMtaGlkZGVuJyk7XG4gICAgICAgICAgICAgICAgbG9va2Jvb2tQb3B1cC5maW5kKGBbZGF0YS1wcm9kdWN0LWlkPSR7cHJvZHVjdElEfV1gKS5lcSgwKS5hdHRyKCdkYXRhLWluZGV4JywgaW5kZXgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRQcm9kdWN0KGFycikge1xuICAgICAgcmV0dXJuIGZldGNoKCcvZ3JhcGhxbCcsIHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICdBdXRob3JpemF0aW9uJzogJ0JlYXJlciAnICsgdG9rZW5cbiAgICAgICAgfSxcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgIHF1ZXJ5OiBgXG4gICAgICAgICAgICBxdWVyeSBNeVF1ZXJ5IHtcbiAgICAgICAgICAgICAgICBzaXRlIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvZHVjdHMgKGVudGl0eUlkczogW2ArYXJyK2BdLCBmaXJzdDogNTApIHtcbiAgICAgICAgICAgICAgICAgICAgICBlZGdlcyB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9kdWN0OiBub2RlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uUHJvZHVjdEZpZWxkc1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY3VycmVuY3kgKGN1cnJlbmN5Q29kZTogYCtjdXJDb2RlK2ApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN5bWJvbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN5bWJvbFBsYWNlbWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlY2ltYWxUb2tlblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRob3VzYW5kc1Rva2VuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVjaW1hbFBsYWNlc1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnJhZ21lbnQgUHJvZHVjdEZpZWxkcyBvbiBQcm9kdWN0IHtcbiAgICAgICAgICAgICAgICBpZFxuICAgICAgICAgICAgICAgIGVudGl0eUlkXG4gICAgICAgICAgICAgICAgbmFtZVxuICAgICAgICAgICAgICAgIHBhdGhcbiAgICAgICAgICAgICAgICBpbnZlbnRvcnkge1xuICAgICAgICAgICAgICAgICAgICBpc0luU3RvY2tcbiAgICAgICAgICAgICAgICAgICAgaGFzVmFyaWFudEludmVudG9yeVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwcm9kdWN0T3B0aW9ucyB7XG4gICAgICAgICAgICAgICAgICAgIGVkZ2VzIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudGl0eUlkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1JlcXVpcmVkXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGVmYXVsdEltYWdlIHtcbiAgICAgICAgICAgICAgICAgICAgaW1nMjUwcHg6IHVybCh3aWR0aDogMjUwKVxuICAgICAgICAgICAgICAgICAgICBhbHRUZXh0XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHByaWNlcyB7XG4gICAgICAgICAgICAgICAgICAgIHByaWNlUmFuZ2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5Nb25leUZpZWxkc1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5Nb25leUZpZWxkc1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldGFpbFByaWNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLk1vbmV5RmllbGRzXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYmFzZVByaWNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLk1vbmV5RmllbGRzXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcHJpY2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uTW9uZXlGaWVsZHNcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZyYWdtZW50IE1vbmV5RmllbGRzIG9uIE1vbmV5IHtcbiAgICAgICAgICAgICAgICB2YWx1ZVxuICAgICAgICAgICAgICAgIGN1cnJlbmN5Q29kZVxuICAgICAgICAgICAgfVxuICAgICAgICBgfSksXG4gICAgfSkudGhlbihyZXMgPT4gcmVzLmpzb24oKSlcbiAgICAgICAudGhlbihyZXMgPT4gcmVzLmRhdGEpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZvcm1hdE1vbmV5KG4sIGMsIGQsIHQpIHtcbiAgICAgICAgdmFyIGMgPSBpc05hTihjID0gTWF0aC5hYnMoYykpID8gMiA6IGMsXG4gICAgICAgICAgICBkID0gZCA9PSB1bmRlZmluZWQgPyBcIi5cIiA6IGQsXG4gICAgICAgICAgICB0ID0gdCA9PSB1bmRlZmluZWQgPyBcIixcIiA6IHQsXG4gICAgICAgICAgICBzID0gbiA8IDAgPyBcIi1cIiA6IFwiXCIsXG4gICAgICAgICAgICBpID0gU3RyaW5nKHBhcnNlSW50KG4gPSBNYXRoLmFicyhOdW1iZXIobikgfHwgMCkudG9GaXhlZChjKSkpLFxuICAgICAgICAgICAgaiA9IChqID0gaS5sZW5ndGgpID4gMyA/IGogJSAzIDogMDtcblxuICAgICAgICByZXR1cm4gcyArIChqID8gaS5zdWJzdHIoMCwgaikgKyB0IDogXCJcIikgKyBpLnN1YnN0cihqKS5yZXBsYWNlKC8oXFxkezN9KSg/PVxcZCkvZywgXCIkMVwiICsgdCkgKyAoYyA/IGQgKyBNYXRoLmFicyhuIC0gaSkudG9GaXhlZChjKS5zbGljZSgyKSA6IFwiXCIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbmRlclByb2R1Y3QocHJvZHVjdCwgY3VyRGlzcGxheSwgdG1wXzMpIHtcbiAgICAgICAgaWYgKHByb2R1Y3QgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAkLmVhY2gocHJvZHVjdCwgKGluZGV4LCBlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaXRlbSA9IGVsZW1lbnQucHJvZHVjdCxcbiAgICAgICAgICAgICAgICAgICAgc3ltYm9sID0gY3VyRGlzcGxheS5zeW1ib2wsXG4gICAgICAgICAgICAgICAgICAgIHN5bWJvbFBsYWNlbWVudCA9IGN1ckRpc3BsYXkuc3ltYm9sUGxhY2VtZW50LnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgICAgICAgICAgIGRlY2ltYWxUb2tlbiA9IGN1ckRpc3BsYXkuZGVjaW1hbFRva2VuLFxuICAgICAgICAgICAgICAgICAgICBkZWNpbWFsUGxhY2VzID0gY3VyRGlzcGxheS5kZWNpbWFsUGxhY2VzLFxuICAgICAgICAgICAgICAgICAgICB0aG91c2FuZHNUb2tlbiA9IGN1ckRpc3BsYXkudGhvdXNhbmRzVG9rZW47XG4gICAgICAgICAgICAgICAgbGV0IHRpdGxlLCBwcmljZTtcblxuICAgICAgICAgICAgICAgIGlmICgkKCcuYm9keScpLmhhc0NsYXNzKCdpcy1sb2dpbicpIHx8IGNvbnRleHQudGhlbWVTZXR0aW5ncy5yZXN0cmljdF90b19sb2dpbiAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5wcmljZXMucHJpY2VSYW5nZS5taW4udmFsdWUgPCBpdGVtLnByaWNlcy5wcmljZVJhbmdlLm1heC52YWx1ZSAmJiBjb250ZXh0LnRoZW1lU2V0dGluZ3MucHJpY2VfcmFuZ2VzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmljZU1pbiA9IChzeW1ib2xQbGFjZW1lbnQgPT0gXCJsZWZ0XCIgPyBzeW1ib2wgOiBcIlwiKSArIChmb3JtYXRNb25leShpdGVtLnByaWNlcy5wcmljZVJhbmdlLm1pbi52YWx1ZSwgZGVjaW1hbFBsYWNlcywgZGVjaW1hbFRva2VuLCB0aG91c2FuZHNUb2tlbikpICsgKHN5bWJvbFBsYWNlbWVudCAhPSBcImxlZnRcIiA/IHN5bWJvbCA6IFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJpY2VNYXggPSAoc3ltYm9sUGxhY2VtZW50ID09IFwibGVmdFwiID8gc3ltYm9sIDogXCJcIikgKyAoZm9ybWF0TW9uZXkoaXRlbS5wcmljZXMucHJpY2VSYW5nZS5tYXgudmFsdWUsIGRlY2ltYWxQbGFjZXMsIGRlY2ltYWxUb2tlbiwgdGhvdXNhbmRzVG9rZW4pKSArIChzeW1ib2xQbGFjZW1lbnQgIT0gXCJsZWZ0XCIgPyBzeW1ib2wgOiBcIlwiKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcHJpY2UgPSAnPGRpdiBjbGFzcz1cInByaWNlLXNlY3Rpb24gcHJpY2Utc2VjdGlvbi0td2l0aG91dFRheCBub24tc2FsZS1wcmljZS0td2l0aG91dFRheCBwcmljZS1ub25lXCIgc3R5bGU9XCJkaXNwbGF5OiBub25lO1wiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLXByb2R1Y3Qtbm9uLXNhbGUtcHJpY2Utd2l0aG91dC10YXg9XCJcIiBjbGFzcz1cInByaWNlIHByaWNlLS1ub24tc2FsZVwiPjwvc3Bhbj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicHJpY2Utc2VjdGlvbiBwcmljZS1zZWN0aW9uLS13aXRob3V0VGF4XCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtcHJvZHVjdC1wcmljZS13aXRob3V0LXRheD1cIlwiIGNsYXNzPVwicHJpY2UgcHJpY2UtLXdpdGhvdXRUYXhcIj4nK3ByaWNlTWluKycgLSAnK3ByaWNlTWF4Kyc8L3NwYW4+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+JztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByaWNlRGVmID0gKHN5bWJvbFBsYWNlbWVudCA9PSBcImxlZnRcIiA/IHN5bWJvbCA6IFwiXCIpICsgKGZvcm1hdE1vbmV5KGl0ZW0ucHJpY2VzLnByaWNlLnZhbHVlLCBkZWNpbWFsUGxhY2VzLCBkZWNpbWFsVG9rZW4sIHRob3VzYW5kc1Rva2VuKSkgKyAoc3ltYm9sUGxhY2VtZW50ICE9IFwibGVmdFwiID8gc3ltYm9sIDogXCJcIik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLnByaWNlcy5yZXRhaWxQcmljZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0ucHJpY2VzLmJhc2VQcmljZS52YWx1ZSA+IGl0ZW0ucHJpY2VzLnByaWNlLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByaWNlQmFzID0gKHN5bWJvbFBsYWNlbWVudCA9PSBcImxlZnRcIiA/IHN5bWJvbCA6IFwiXCIpICsgKGZvcm1hdE1vbmV5KGl0ZW0ucHJpY2VzLmJhc2VQcmljZS52YWx1ZSwgZGVjaW1hbFBsYWNlcywgZGVjaW1hbFRva2VuLCB0aG91c2FuZHNUb2tlbikpICsgKHN5bWJvbFBsYWNlbWVudCAhPSBcImxlZnRcIiA/IHN5bWJvbCA6IFwiXCIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaWNlID0gJzxkaXYgY2xhc3M9XCJwcmljZS1zZWN0aW9uIHByaWNlLXNlY3Rpb24tLXdpdGhvdXRUYXggbm9uLXNhbGUtcHJpY2UtLXdpdGhvdXRUYXhcIj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLXByb2R1Y3Qtbm9uLXNhbGUtcHJpY2Utd2l0aG91dC10YXg9XCJcIiBjbGFzcz1cInByaWNlIHByaWNlLS1ub24tc2FsZVwiPicrcHJpY2VCYXMrJzwvc3Bhbj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInByaWNlLXNlY3Rpb24gcHJpY2Utc2VjdGlvbi0td2l0aG91dFRheFwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtcHJvZHVjdC1wcmljZS13aXRob3V0LXRheD1cIlwiIGNsYXNzPVwicHJpY2UgcHJpY2UtLXdpdGhvdXRUYXhcIj4nK3ByaWNlRGVmKyc8L3NwYW4+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpY2UgPSAnPGRpdiBjbGFzcz1cInByaWNlLXNlY3Rpb24gcHJpY2Utc2VjdGlvbi0td2l0aG91dFRheCBub24tc2FsZS1wcmljZS0td2l0aG91dFRheCBwcmljZS1ub25lXCIgc3R5bGU9XCJkaXNwbGF5OiBub25lO1wiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtcHJvZHVjdC1ub24tc2FsZS1wcmljZS13aXRob3V0LXRheD1cIlwiIGNsYXNzPVwicHJpY2UgcHJpY2UtLW5vbi1zYWxlXCI+PC9zcGFuPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicHJpY2Utc2VjdGlvbiBwcmljZS1zZWN0aW9uLS13aXRob3V0VGF4XCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1wcm9kdWN0LXByaWNlLXdpdGhvdXQtdGF4PVwiXCIgY2xhc3M9XCJwcmljZSBwcmljZS0td2l0aG91dFRheFwiPicrcHJpY2VEZWYrJzwvc3Bhbj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pic7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0ucHJpY2VzLnJldGFpbFByaWNlLnZhbHVlID4gaXRlbS5wcmljZXMucHJpY2UudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJpY2VSZXQgPSAoc3ltYm9sUGxhY2VtZW50ID09IFwibGVmdFwiID8gc3ltYm9sIDogXCJcIikgKyAoZm9ybWF0TW9uZXkoaXRlbS5wcmljZXMucmV0YWlsUHJpY2UudmFsdWUsIGRlY2ltYWxQbGFjZXMsIGRlY2ltYWxUb2tlbiwgdGhvdXNhbmRzVG9rZW4pKSArIChzeW1ib2xQbGFjZW1lbnQgIT0gXCJsZWZ0XCIgPyBzeW1ib2wgOiBcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpY2UgPSAnPGRpdiBjbGFzcz1cInByaWNlLXNlY3Rpb24gcHJpY2Utc2VjdGlvbi0td2l0aG91dFRheCBub24tc2FsZS1wcmljZS0td2l0aG91dFRheFwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtcHJvZHVjdC1ub24tc2FsZS1wcmljZS13aXRob3V0LXRheD1cIlwiIGNsYXNzPVwicHJpY2UgcHJpY2UtLW5vbi1zYWxlXCI+JytwcmljZVJldCsnPC9zcGFuPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicHJpY2Utc2VjdGlvbiBwcmljZS1zZWN0aW9uLS13aXRob3V0VGF4XCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1wcm9kdWN0LXByaWNlLXdpdGhvdXQtdGF4PVwiXCIgY2xhc3M9XCJwcmljZSBwcmljZS0td2l0aG91dFRheFwiPicrcHJpY2VEZWYrJzwvc3Bhbj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pic7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmljZSA9ICc8ZGl2IGNsYXNzPVwicHJpY2Utc2VjdGlvbiBwcmljZS1zZWN0aW9uLS13aXRob3V0VGF4IG5vbi1zYWxlLXByaWNlLS13aXRob3V0VGF4IHByaWNlLW5vbmVcIiBzdHlsZT1cImRpc3BsYXk6IG5vbmU7XCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1wcm9kdWN0LW5vbi1zYWxlLXByaWNlLXdpdGhvdXQtdGF4PVwiXCIgY2xhc3M9XCJwcmljZSBwcmljZS0tbm9uLXNhbGVcIj48L3NwYW4+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwcmljZS1zZWN0aW9uIHByaWNlLXNlY3Rpb24tLXdpdGhvdXRUYXhcIj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLXByb2R1Y3QtcHJpY2Utd2l0aG91dC10YXg9XCJcIiBjbGFzcz1cInByaWNlIHByaWNlLS13aXRob3V0VGF4XCI+JytwcmljZURlZisnPC9zcGFuPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHByaWNlID0gJzxwIHRyYW5zbGF0ZT5Mb2cgaW4gZm9yIHByaWNpbmc8L3A+JztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgcHJvZHVjdFRpdGxlO1xuXG4gICAgICAgICAgICAgICAgaWYgKGNvbnRleHQudGhlbWVTZXR0aW5ncy5oYWxvX2NhcmRfdGl0bGUgPT0gJ2VsbGlwc2lzJykge1xuICAgICAgICAgICAgICAgICAgICBwcm9kdWN0VGl0bGUgPSAnPGEgaHJlZj1cIicraXRlbS5wYXRoKydcIiBjbGFzcz1cImNsYW1wXCIgc3R5bGU9XCItd2Via2l0LWJveC1vcmllbnQ6IHZlcnRpY2FsOyAtd2Via2l0LWxpbmUtY2xhbXA6IDE7XCIgYXJpYS1sYWJlbD1cIkxpbmsgR28gVG8gVGhpcyBQcm9kdWN0XCI+PHNwYW4+JytpdGVtLm5hbWUrJzwvc3Bhbj48L2E+J1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHByb2R1Y3RUaXRsZSA9ICc8YSBocmVmPVwiJytpdGVtLnBhdGgrJ1wiIGNsYXNzPVwiY2xhbXBcIiBhcmlhLWxhYmVsPVwiTGluayBHbyBUbyBUaGlzIFByb2R1Y3RcIj48c3Bhbj4nK2l0ZW0ubmFtZSsnPC9zcGFuPjwvYT4nXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgdG1wID0gJCgnLmxvb2tib29rLXBvcHVwLWNvbnRlbnQnKTtcbiAgICAgICAgICAgICAgICBjb25zdCBodG1sX2NhcmQgPSAnPGRpdiBjbGFzcz1cInByb2R1Y3RDYXJvdXNlbC1zbGlkZSBpcy1oaWRkZW5cIiBkYXRhLXByb2R1Y3QtaWQ9XCInK2l0ZW0uZW50aXR5SWQrJ1wiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwcm9kdWN0XCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlIGNsYXNzPVwiY2FyZFwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZpZ3VyZSBjbGFzcz1cImNhcmQtZmlndXJlXCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtaW1nLWNvbnRhaW5lclwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiJytpdGVtLnBhdGgrJ1wiPjxpbWcgY2xhc3M9XCJjYXJkLWltYWdlXCIgc3JjPVwiJytpdGVtLmRlZmF1bHRJbWFnZS5pbWcyNTBweCsnXCIgYWx0PVwiJytpdGVtLmRlZmF1bHRJbWFnZS5hbHRUZXh0KydcIiB0aXRsZT1cIicraXRlbS5kZWZhdWx0SW1hZ2UuYWx0VGV4dCsnXCI+PC9hPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9maWd1cmU+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzPVwiY2FyZC10aXRsZVwiPicrcHJvZHVjdFRpdGxlKyc8L2g0PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVwiY2FyZC1wcmljZS13cmFwcGVyXCIgaHJlZj1cIicraXRlbS5wYXRoKydcIj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtcHJpY2VcIiBkYXRhLXRlc3QtaW5mby10eXBlPVwicHJpY2VcIj4nK3ByaWNlKyc8L2Rpdj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN2ZyBjbGFzcz1cImljb25cIj48dXNlIHhsaW5rOmhyZWY9XCIjaWNvbi1sb25nLWFycm93LXJpZ2h0XCIgLz48L3N2Zz5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hcnRpY2xlPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+JztcblxuICAgICAgICAgICAgICAgIGNvbnN0IHRtcF8yID0gcHJvZHVjdExvb2tCb29rMS5maW5kKGAubG9va0Jvb2sxX19pY29uW2RhdGEtcHJvZHVjdC1pZD0ke2l0ZW0uZW50aXR5SWR9XSsubG9va0Jvb2tfX3BvcHVwYCk7XG4gICAgICAgICAgICAgICAgY29uc3QgaHRtbF9jYXJkXzIgPSAnPGFydGljbGUgY2xhc3M9XCJjYXJkIGNhcmQtbG9va2Jvb2tcIiBkYXRhLXByb2R1Y3QtaWQ9XCInK2l0ZW0uZW50aXR5SWQrJ1wiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keS1jb250ZW50XCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9XCJjYXJkLXRpdGxlXCI+Jytwcm9kdWN0VGl0bGUrJzwvaDQ+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cImNhcmQtcHJpY2Utd3JhcHBlclwiIGhyZWY9XCInK2l0ZW0ucGF0aCsnXCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtcHJpY2VcIiBkYXRhLXRlc3QtaW5mby10eXBlPVwicHJpY2VcIj4nK3ByaWNlKyc8L2Rpdj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3ZnIGNsYXNzPVwiaWNvblwiPjx1c2UgeGxpbms6aHJlZj1cIiNpY29uLWxvbmctYXJyb3ctcmlnaHRcIiAvPjwvc3ZnPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pic7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBodG1sX2NhcmRfMyA9ICc8ZGl2IGNsYXNzPVwicHJvZHVjdEdyaWQgaXMtaGlkZGVuXCIgZGF0YS1wcm9kdWN0LWlkPVwiJytpdGVtLmVudGl0eUlkKydcIj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicHJvZHVjdFwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZSBjbGFzcz1cImNhcmRcIj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmaWd1cmUgY2xhc3M9XCJjYXJkLWZpZ3VyZVwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWltZy1jb250YWluZXJcIj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cIicraXRlbS5wYXRoKydcIj48aW1nIGNsYXNzPVwiY2FyZC1pbWFnZVwiIHNyYz1cIicraXRlbS5kZWZhdWx0SW1hZ2UuaW1nMjUwcHgrJ1wiIGFsdD1cIicraXRlbS5kZWZhdWx0SW1hZ2UuYWx0VGV4dCsnXCIgdGl0bGU9XCInK2l0ZW0uZGVmYXVsdEltYWdlLmFsdFRleHQrJ1wiPjwvYT5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZmlndXJlPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz1cImNhcmQtdGl0bGVcIj4nK3Byb2R1Y3RUaXRsZSsnPC9oND5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cImNhcmQtcHJpY2Utd3JhcHBlclwiIGhyZWY9XCInK2l0ZW0ucGF0aCsnXCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLXByaWNlXCIgZGF0YS10ZXN0LWluZm8tdHlwZT1cInByaWNlXCI+JytwcmljZSsnPC9kaXY+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdmcgY2xhc3M9XCJpY29uXCI+PHVzZSB4bGluazpocmVmPVwiI2ljb24tbG9uZy1hcnJvdy1yaWdodFwiIC8+PC9zdmc+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYXJ0aWNsZT5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pic7XG5cbiAgICAgICAgICAgICAgICB0bXAuYXBwZW5kKGh0bWxfY2FyZCk7XG4gICAgICAgICAgICAgICAgdG1wXzIuaHRtbChodG1sX2NhcmRfMik7XG4gICAgICAgICAgICAgICAgaWYodG1wXzMgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRtcF8zLmFwcGVuZChodG1sX2NhcmRfMyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1bmlxdWVBcnJheShsaXN0KSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBbXTtcblxuICAgICAgICAkLmVhY2gobGlzdCwgKGluZGV4LCBlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoJC5pbkFycmF5KGVsZW1lbnQsIHJlc3VsdCkgPT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChlbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG4iLCJpbXBvcnQgdXRpbHMgZnJvbSAnQGJpZ2NvbW1lcmNlL3N0ZW5jaWwtdXRpbHMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBoYWxvTWVnYU1lbnV7XG4gICAgY29uc3RydWN0b3IoKSB7fVxuXG4gICAgbWVudUl0ZW0obnVtKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzZXRNZWdhTWVudShwYXJhbSkge1xuICAgICAgICAgICAgICAgIHBhcmFtID0gJC5leHRlbmQoe1xuICAgICAgICAgICAgICAgICAgICBzdHlsZTogJycsXG4gICAgICAgICAgICAgICAgICAgIGRyb3BBbGlnbjogJ2Z1bGxXaWR0aCcsXG4gICAgICAgICAgICAgICAgICAgIGRyb3BXaWR0aDogJzQ5M3B4JyxcbiAgICAgICAgICAgICAgICAgICAgY2F0ZUNvbHVtbnM6IDEsXG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgYm90dG9tQ2F0ZXM6ICcnLFxuICAgICAgICAgICAgICAgICAgICBwcm9kdWN0czonJyxcbiAgICAgICAgICAgICAgICAgICAgcHJvZHVjdElkOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICcnLFxuICAgICAgICAgICAgICAgICAgICBsYWJlbFR5cGU6ICcnLFxuICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAnJyxcbiAgICAgICAgICAgICAgICAgICAgY29udGVudExlZnQ6ICcnLFxuICAgICAgICAgICAgICAgICAgICBjb250ZW50UmlnaHQ6ICcnLFxuICAgICAgICAgICAgICAgICAgICBpbWFnZXM6JycsXG4gICAgICAgICAgICAgICAgICAgIGltYWdlc1RvcDogJycsXG4gICAgICAgICAgICAgICAgICAgIGltYWdlc0N1c3RvbTogJycsXG4gICAgICAgICAgICAgICAgICAgIGltYWdlc0xlZnQ6ICcnLFxuICAgICAgICAgICAgICAgICAgICBpbWFnZXNSaWdodDogJydcbiAgICAgICAgICAgICAgICB9LCBwYXJhbSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgJHNjb3BlID0gJCgnLm5hdlBhZ2VzLWxpc3Q6bm90KC5uYXZQYWdlcy1saXN0LS11c2VyKSA+IGxpOm50aC1jaGlsZCgnK251bSsnKScpO1xuXG4gICAgICAgICAgICAgICAgaWYoISRzY29wZS5oYXNDbGFzcygnbmF2UGFnZXMtaXRlbS10b2dnbGUnKSl7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbS5kaXNhYmxlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN1Yk1lZ2FNZW51ID0gJHNjb3BlLmZpbmQoJz4gLm5hdlBhZ2Utc3ViTWVudScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViTWVudUxpc3QgPSBzdWJNZWdhTWVudS5maW5kKCc+IC5uYXZQYWdlLXN1Yk1lbnUtbGlzdDpub3QoLm5hdlBhZ2Utc3ViTWVudS1saW5rcyknKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYocGFyYW0uc3R5bGUgPT09ICdzdHlsZSAxJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCEkc2NvcGUuaGFzQ2xhc3MoJ2hhcy1tZWdhbWVudScpKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkZENsYXNzKCdoYXMtbWVnYW1lbnUgc3R5bGUtMSBmdWxsV2lkdGgnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZighc3ViTWVnYU1lbnUuZmluZCgnLmNhdGVBcmVhJykubGVuZ3RoKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Yk1lZ2FNZW51LmZpbmQoJz4gLm5hdlBhZ2Utc3ViTWVudS1saXN0Jykud3JhcCgnPGRpdiBjbGFzcz1cImNhdGVBcmVhIGNvbHVtbnMtJytwYXJhbS5jYXRlQ29sdW1ucysnXCI+PC9kaXY+Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJNZW51TGlzdC5maW5kKCc+IC5uYXZQYWdlLXN1Yk1lbnUtYWxsJykuYWZ0ZXIocGFyYW0uY29udGVudExlZnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIXN1Yk1lZ2FNZW51LmZpbmQoJy5pbWFnZUFyZWEnKS5sZW5ndGgpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViTWVnYU1lbnUuZmluZCgnLmNhdGVBcmVhJykucHJlcGVuZCgnPGRpdiBjbGFzcz1cImltYWdlQXJlYVwiPjxkaXYgY2xhc3M9XCJtZWdhbWVudS1sZWZ0LWl0ZW1cIj4nK3BhcmFtLmltYWdlc0xlZnQrJzwvZGl2PjwvZGl2PicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViTWVnYU1lbnUuYXBwZW5kKCc8ZGl2IGNsYXNzPVwiaW1hZ2VBcmVhXCI+PGRpdiBjbGFzcz1cIm1lZ2FtZW51LXJpZ2h0LWl0ZW1cIj4nK3BhcmFtLmltYWdlc1JpZ2h0Kyc8L2Rpdj48L2Rpdj4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Yk1lZ2FNZW51LmZpbmQoJy5tZWdhbWVudS1yaWdodC1pdGVtJykuYWZ0ZXIoJzxkaXYgY2xhc3M9XCJtZWdhbWVudS1yaWdodC1pdGVtXCI+JytwYXJhbS5jb250ZW50UmlnaHQrJzwvZGl2PicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViTWVnYU1lbnUuZmluZCgnLmltYWdlQXJlYScpLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnd2lkdGgnOiAnMTAwJScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbWF4LXdpZHRoJzogcGFyYW0uaW1hZ2VBcmVhV2lkdGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViTWVnYU1lbnUuZmluZCgnLmNhdGVBcmVhJykuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd3aWR0aCc6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdtYXgtd2lkdGgnOiBwYXJhbS5jYXRlQXJlYVdpZHRoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Yk1lZ2FNZW51LmFkZENsYXNzKCdoYWxvQ3VzdG9tU2Nyb2xsYmFyJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihwYXJhbS5zdHlsZSA9PT0gJ3N0eWxlIDInKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoISRzY29wZS5oYXNDbGFzcygnaGFzLW1lZ2FtZW51Jykpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkQ2xhc3MoJ2hhcy1tZWdhbWVudSBzdHlsZS0yIGZ1bGxXaWR0aCcpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFzdWJNZWdhTWVudS5maW5kKCcuY2F0ZUFyZWEnKS5sZW5ndGgpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViTWVnYU1lbnUuZmluZCgnPiAubmF2UGFnZS1zdWJNZW51LWxpc3QnKS53cmFwKCc8ZGl2IGNsYXNzPVwiY2F0ZUFyZWEgY29sdW1ucy0nK3BhcmFtLmNhdGVDb2x1bW5zKydcIj48L2Rpdj4nKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViTWVnYU1lbnUuZmluZCgnLmNhdGVBcmVhJykucHJlcGVuZChwYXJhbS5jb250ZW50TGVmdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJNZW51TGlzdC5hZnRlcignPGRpdiBjbGFzcz1cIm1lZ2FtZW51LXJpZ2h0LWl0ZW1cIj4nK3BhcmFtLmNvbnRlbnRSaWdodCsnPC9kaXY+Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZighc3ViTWVnYU1lbnUuZmluZCgnLmltYWdlQXJlYScpLmxlbmd0aCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJNZWdhTWVudS5hcHBlbmQoJzxkaXYgY2xhc3M9XCJpbWFnZUFyZWFcIj48ZGl2IGNsYXNzPVwibWVnYW1lbnUtbGVmdC1pdGVtXCI+JytwYXJhbS5pbWFnZXMrJzwvZGl2PjwvZGl2PicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFyYW0ucHJvZHVjdHMubGVuZ3RoICYmIChwYXJhbS5wcm9kdWN0cyAhPT0gJycpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViTWVnYU1lbnUuZmluZCgnLmltYWdlQXJlYScpLmFwcGVuZCgnPGRpdiBjbGFzcz1cIm1lZ2FtZW51LWJyYW5kLWxpc3RcIj4nK3BhcmFtLnByb2R1Y3RzKyc8L2Rpdj4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Yk1lZ2FNZW51LmZpbmQoJy5pbWFnZUFyZWEnKS5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3dpZHRoJzogJzEwMCUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ21heC13aWR0aCc6IHBhcmFtLmltYWdlQXJlYVdpZHRoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Yk1lZ2FNZW51LmZpbmQoJy5jYXRlQXJlYScpLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnd2lkdGgnOiAnMTAwJScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbWF4LXdpZHRoJzogcGFyYW0uY2F0ZUFyZWFXaWR0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJNZWdhTWVudS5hZGRDbGFzcygnaGFsb0N1c3RvbVNjcm9sbGJhcicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0ICRtZWdhbWVudUJyYW5kcyA9ICQoJy5tZWdhbWVudS1icmFuZHMnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCAkbWVudWJyYW5kSXRlbSA9ICQoJy5oYWxvTWVnYW1lbnVCcmFuZF9fbGlzdCBsaScpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJG1lbnVicmFuZEl0ZW0uZWFjaChmdW5jdGlvbihpbmRleCwgZWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0eHQgPSAkKGVsZW1lbnQpLmRhdGEoJ2JyYW5kLWxldHRlcicpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghJG1lZ2FtZW51QnJhbmRzLmZpbmQoJ1tkYXRhLWJyYW5kLWxldHRlcj1cIicrdHh0KydcIl0nKS5oYXNDbGFzcygnaGFzLWxldHRlcicpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbWVnYW1lbnVCcmFuZHMuZmluZCgnW2RhdGEtYnJhbmQtbGV0dGVyPVwiJyt0eHQrJ1wiXScpLmFkZENsYXNzKCdoYXMtbGV0dGVyJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYocGFyYW0uc3R5bGUgPT09ICdzdHlsZSAzJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCEkc2NvcGUuaGFzQ2xhc3MoJ2hhcy1tZWdhbWVudScpKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkZENsYXNzKCdoYXMtbWVnYW1lbnUgc3R5bGUtMyBmdWxsV2lkdGgnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZighc3ViTWVnYU1lbnUuZmluZCgnLmNhdGVBcmVhJykubGVuZ3RoKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViTWVnYU1lbnUuZmluZCgnPiAubmF2UGFnZS1zdWJNZW51LWxpc3QnKS53cmFwKCc8ZGl2IGNsYXNzPVwiY2F0ZUFyZWEgY29sdW1ucy0nK3BhcmFtLmNhdGVDb2x1bW5zKydcIj48L2Rpdj4nKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJNZWdhTWVudS5maW5kKCcuY2F0ZUFyZWEnKS5wcmVwZW5kKHBhcmFtLmNvbnRlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJNZW51TGlzdC5hZnRlcignPGRpdiBjbGFzcz1cIm1lZ2FtZW51LXJpZ2h0LWl0ZW1cIj4nK3BhcmFtLmltYWdlcysnPC9kaXY+Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIXN1Yk1lZ2FNZW51LmZpbmQoJy5pbWFnZUFyZWEnKS5sZW5ndGgpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJNZWdhTWVudS5hcHBlbmQoJzxkaXYgY2xhc3M9XCJpbWFnZUFyZWFcIj4nK3BhcmFtLmJvdHRvbUNhdGVzKyc8L2Rpdj4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJNZWdhTWVudS5maW5kKCcuaW1hZ2VBcmVhJykuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3dpZHRoJzogJzEwMCUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbWF4LXdpZHRoJzogcGFyYW0uaW1hZ2VBcmVhV2lkdGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Yk1lZ2FNZW51LmZpbmQoJy5jYXRlQXJlYScpLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd3aWR0aCc6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ21heC13aWR0aCc6IHBhcmFtLmNhdGVBcmVhV2lkdGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Yk1lZ2FNZW51LmFkZENsYXNzKCdoYWxvQ3VzdG9tU2Nyb2xsYmFyJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5hdlBhZ2VzQWN0aW9uID0gJHNjb3BlLmNoaWxkcmVuKCcubmF2UGFnZXMtYWN0aW9uJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbS5sYWJlbFR5cGUgPT09ICduZXcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2UGFnZXNBY3Rpb24uZmluZCgnLnRleHQnKS5hcHBlbmQoJzxzcGFuIGNsYXNzPVwibmF2UGFnZXMtbGFiZWwgbmV3LWxhYmVsXCI+JytwYXJhbS5sYWJlbCsnPC9zcGFuPicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJhbS5sYWJlbFR5cGUgPT09ICdzYWxlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdlBhZ2VzQWN0aW9uLmZpbmQoJy50ZXh0JykuYXBwZW5kKCc8c3BhbiBjbGFzcz1cIm5hdlBhZ2VzLWxhYmVsIHNhbGUtbGFiZWxcIj4nK3BhcmFtLmxhYmVsKyc8L3NwYW4+Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHBhcmFtLmxhYmVsVHlwZSA9PT0gJ2hvdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZQYWdlc0FjdGlvbi5maW5kKCcudGV4dCcpLmFwcGVuZCgnPHNwYW4gY2xhc3M9XCJuYXZQYWdlcy1sYWJlbCBob3QtbGFiZWxcIj4nK3BhcmFtLmxhYmVsKyc8L3NwYW4+Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5hdlBhZ2VzQWN0aW9uID0gJHNjb3BlLmNoaWxkcmVuKCcubmF2UGFnZXMtYWN0aW9uJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbS5sYWJlbFR5cGUgPT09ICduZXcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2UGFnZXNBY3Rpb24uZmluZCgnLnRleHQnKS5hcHBlbmQoJzxzcGFuIGNsYXNzPVwibmF2UGFnZXMtbGFiZWwgbmV3LWxhYmVsXCI+JytwYXJhbS5sYWJlbCsnPC9zcGFuPicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJhbS5sYWJlbFR5cGUgPT09ICdzYWxlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdlBhZ2VzQWN0aW9uLmZpbmQoJy50ZXh0JykuYXBwZW5kKCc8c3BhbiBjbGFzcz1cIm5hdlBhZ2VzLWxhYmVsIHNhbGUtbGFiZWxcIj4nK3BhcmFtLmxhYmVsKyc8L3NwYW4+Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHBhcmFtLmxhYmVsVHlwZSA9PT0gJ2hvdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZQYWdlc0FjdGlvbi5maW5kKCcudGV4dCcpLmFwcGVuZCgnPHNwYW4gY2xhc3M9XCJuYXZQYWdlcy1sYWJlbCBob3QtbGFiZWxcIj4nK3BhcmFtLmxhYmVsKyc8L3NwYW4+Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCBoYWxvTWVnYU1lbnUgZnJvbSAnLi9oYWxvTWVnYU1lbnUnO1xuICAgIHdpbmRvdy5oYWxvTWVnYU1lbnUgPSBoYWxvTWVnYU1lbnU7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChjb250ZXh0KSB7XG5cdGlmIChjb250ZXh0LnRoZW1lU2V0dGluZ3MuaGFsb01lZ2FtZW51VHlwZSA9PSAnRWRpdG9yJykge1xuXHQgICAgdmFyIGhhbG9NZWdhTWVudSA9IG5ldyB3aW5kb3cuaGFsb01lZ2FNZW51KCk7XG5cdCAgICBjb25zdCB1cmxJbWdMb2FkID0gJCgnLmhhbG8tZ2xvYmFsLWJsb2NrJykuZGF0YSgnaW1hZ2UtbG9hZCcpO1xuXHQgICAgY29uc3QgdXJsU3RvcmVIYXNoID0gJCgnLmhhbG8tZ2xvYmFsLWJsb2NrJykuZGF0YSgnc3RvcmUtaGFzaC1pbWFnZScpO1xuXG5cdCAgICB2YXIgbXN0eWxlMV9pdGVtID0gcGFyc2VJbnQoY29udGV4dC50aGVtZVNldHRpbmdzLm1zdHlsZTFfaXRlbSksXG5cdCAgICAgICAgbXN0eWxlMl9pdGVtID0gcGFyc2VJbnQoY29udGV4dC50aGVtZVNldHRpbmdzLm1zdHlsZTJfaXRlbSksXG5cdCAgICAgICAgbXN0eWxlM19pdGVtID0gcGFyc2VJbnQoY29udGV4dC50aGVtZVNldHRpbmdzLm1zdHlsZTNfaXRlbSk7XG5cblx0ICAgIGZ1bmN0aW9uIFNldEl0ZW1NZWdhTWVudSgpe1xuXHRcdFx0JCgnLm5hdlBhZ2VzLWxpc3QtbWVnYW1lbnUgPiBsaTpub3QoLm5hdlBhZ2VzLWl0ZW0tdG9nZ2xlKScpLm9uKCdtb3VzZW92ZXInLCBmdW5jdGlvbiAoZXZlbnQpIHtcblx0ICAgICAgICAgICAgdmFyIG51bWJlckl0ZW0gPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLmluZGV4KCkgKyAxO1xuXG5cdCAgICAgICAgICAgIGlmICghJChldmVudC5jdXJyZW50VGFyZ2V0KS5oYXNDbGFzcygnaGFzLW1lZ2FtZW51JykpIHtcblx0ICAgICAgICAgICAgICAgIExvYWRNZWdhTWVudShudW1iZXJJdGVtKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0pO1xuXG5cdFx0XHQkKCcubmF2UGFnZXMtbGlzdC1tZWdhbWVudSA+IGxpOm5vdCgubmF2UGFnZXMtaXRlbS10b2dnbGUpJykub24oJ2ZvY3VzaW4nLCBmdW5jdGlvbiAoZXZlbnQpIHtcblx0ICAgICAgICAgICAgdmFyIG51bWJlckl0ZW0gPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLmluZGV4KCkgKyAxO1xuXG5cdCAgICAgICAgICAgIGlmICghJChldmVudC5jdXJyZW50VGFyZ2V0KS5oYXNDbGFzcygnaGFzLW1lZ2FtZW51JykpIHtcblx0ICAgICAgICAgICAgICAgIExvYWRNZWdhTWVudShudW1iZXJJdGVtKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0pO1xuXG5cdCAgICAgICAgJChkb2N1bWVudCkub24oJ2NsaWNrJywnI2hhbG8tbWVudS1zaWRlYmFyIC5uYXZQYWdlcy1saXN0Om5vdCgubmF2UGFnZXMtbGlzdC0tdXNlcikgPiBsaSA+IC5uYXZQYWdlcy1hY3Rpb24nICwgZXZlbnQgPT4ge1xuXHQgICAgICAgICAgICB2YXIgbnVtYmVySXRlbSA9ICQoZXZlbnQuY3VycmVudFRhcmdldCkucGFyZW50KCkuaW5kZXgoKSArIDE7XG5cblx0ICAgICAgICAgICAgaWYgKCEkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLnBhcmVudCgpLmhhc0NsYXNzKCdoYXMtbWVnYW1lbnUnKSkge1xuXHQgICAgICAgICAgICAgICAgTG9hZE1lZ2FNZW51KG51bWJlckl0ZW0pO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSk7XG5cblx0ICAgICAgICBpZihjb250ZXh0LnRoZW1lU2V0dGluZ3MuaGFsb19tZW51X3RhYiA9PSB0cnVlKSB7XG5cdFx0ICAgICAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcblx0XHRcdFx0IFx0JCgnYm9keScpLmFkZENsYXNzKCdtZW51LWlzLWxvYWQnKTtcblx0XHRcdFx0fSk7XG5cdFx0ICAgIH1cblx0ICAgIH1cblx0ICAgICAgICBcblx0ICAgIGZ1bmN0aW9uIExvYWRNZWdhTWVudShudW1iZXJJdGVtKXtcblx0ICAgICAgICBpZiAobXN0eWxlMV9pdGVtID09IG51bWJlckl0ZW0pIHtcblx0ICAgICAgICAgICAgaGFsb01lZ2FNZW51Lm1lbnVJdGVtKG1zdHlsZTFfaXRlbSkuc2V0TWVnYU1lbnUoe1xuXHQgICAgICAgICAgICAgICAgc3R5bGU6ICdzdHlsZSAxJyxcblx0ICAgICAgICAgICAgICAgIGltYWdlQXJlYVdpZHRoOiBjb250ZXh0LnRoZW1lU2V0dGluZ3MubXN0eWxlMV9pdGVtX2ltZ193aWR0aCxcblx0ICAgICAgICAgICAgICAgIGNhdGVBcmVhV2lkdGg6IGNvbnRleHQudGhlbWVTZXR0aW5ncy5tc3R5bGUxX2l0ZW1fY29sX3dpZHRoLFxuXHQgICAgICAgICAgICAgICAgY2F0ZUNvbHVtbnM6IGNvbnRleHQudGhlbWVTZXR0aW5ncy5tc3R5bGUxX2l0ZW1fY29sLFxuXHQgICAgICAgICAgICAgICAgaW1hZ2VzTGVmdDogJzxhIGNsYXNzPVwiaW1hZ2VcIiBocmVmPVwiJytjb250ZXh0LnRoZW1lU2V0dGluZ3MubXN0eWxlMV9pdGVtMV9saW5rKydcIj5cXFxuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPVwibGF6eWxvYWRcIiBzcmM9XCInK3VybEltZ0xvYWQrJ1wiIGRhdGEtc3JjPVwiJyt1cmxTdG9yZUhhc2grY29udGV4dC50aGVtZVNldHRpbmdzLm1zdHlsZTFfaXRlbTFfaW1nKydcIiBhbHQ9XCInK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tc3R5bGUxX2l0ZW0xX2ltZysnXCIgdGl0bGU9XCInK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tc3R5bGUxX2l0ZW0xX2ltZysnXCIvPlxcXG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgPC9hPicsXG5cdCAgICAgICAgICAgICAgICBpbWFnZXNSaWdodDogJzxhIGNsYXNzPVwiaW1hZ2VcIiBocmVmPVwiJytjb250ZXh0LnRoZW1lU2V0dGluZ3MubXN0eWxlMV9pdGVtMl9saW5rKydcIj5cXFxuXHRcdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9XCJsYXp5bG9hZFwiIHNyYz1cIicrdXJsSW1nTG9hZCsnXCIgZGF0YS1zcmM9XCInK3VybFN0b3JlSGFzaCtjb250ZXh0LnRoZW1lU2V0dGluZ3MubXN0eWxlMV9pdGVtMl9pbWcrJ1wiIGFsdD1cIicrY29udGV4dC50aGVtZVNldHRpbmdzLm1zdHlsZTFfaXRlbTJfaW1nKydcIiB0aXRsZT1cIicrY29udGV4dC50aGVtZVNldHRpbmdzLm1zdHlsZTFfaXRlbTJfaW1nKydcIi8+XFxcblx0XHRcdCAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cXFxuXHRcdFx0ICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJpbWFnZVwiIGhyZWY9XCInK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tc3R5bGUxX2l0ZW0zX2xpbmsrJ1wiPlxcXG5cdFx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz1cImxhenlsb2FkXCIgc3JjPVwiJyt1cmxJbWdMb2FkKydcIiBkYXRhLXNyYz1cIicrdXJsU3RvcmVIYXNoK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tc3R5bGUxX2l0ZW0zX2ltZysnXCIgYWx0PVwiJytjb250ZXh0LnRoZW1lU2V0dGluZ3MubXN0eWxlMV9pdGVtM19pbWcrJ1wiIHRpdGxlPVwiJytjb250ZXh0LnRoZW1lU2V0dGluZ3MubXN0eWxlMV9pdGVtM19pbWcrJ1wiLz5cXFxuXHRcdFx0ICAgICAgICAgICAgICAgICAgICAgICAgPC9hPicsXG5cdCAgICAgICAgICAgICAgICBjb250ZW50TGVmdDogJzxsaSBjbGFzcz1cIm5hdlBhZ2Utc3ViTWVudS1pdGVtLWNoaWxkIG5hdlBhZ2Utc3ViTWVudS1pdGVtLWN1c3RvbVwiPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHQ8YSBjbGFzcz1cIm5hdlBhZ2Utc3ViTWVudS1hY3Rpb24gbmF2UGFnZXMtYWN0aW9uIG5hdlBhZ2VzLWFjdGlvbi1jdXN0b21cIiBocmVmPVwiJytjb250ZXh0LnRoZW1lU2V0dGluZ3MubXN0eWxlMV9pdGVtX2N1c3RvbV9saW5rMSsnXCI+PHNwYW4gY2xhc3M9XCJ0ZXh0XCI+PHNwYW4+Jytjb250ZXh0LnRoZW1lU2V0dGluZ3MubXN0eWxlMV9pdGVtX2N1c3RvbV9saW5rdGV4dDErJzwvc3Bhbj48L3NwYW4+PC9hPlxcXG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XFxcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwibmF2UGFnZS1zdWJNZW51LWl0ZW0tY2hpbGQgbmF2UGFnZS1zdWJNZW51LWl0ZW0tY3VzdG9tXCI+XFxcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVwibmF2UGFnZS1zdWJNZW51LWFjdGlvbiBuYXZQYWdlcy1hY3Rpb24gbmF2UGFnZXMtYWN0aW9uLWN1c3RvbVwiIGhyZWY9XCInK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tc3R5bGUxX2l0ZW1fY3VzdG9tX2xpbmsyKydcIj48c3BhbiBjbGFzcz1cInRleHRcIj48c3Bhbj4nK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tc3R5bGUxX2l0ZW1fY3VzdG9tX2xpbmt0ZXh0MisnPC9zcGFuPjwvc3Bhbj48L2E+XFxcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cXFxuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJuYXZQYWdlLXN1Yk1lbnUtaXRlbS1jaGlsZCBuYXZQYWdlLXN1Yk1lbnUtaXRlbS1jdXN0b21cIj5cXFxuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJuYXZQYWdlLXN1Yk1lbnUtYWN0aW9uIG5hdlBhZ2VzLWFjdGlvbiBuYXZQYWdlcy1hY3Rpb24tY3VzdG9tXCIgaHJlZj1cIicrY29udGV4dC50aGVtZVNldHRpbmdzLm1zdHlsZTFfaXRlbV9jdXN0b21fbGluazMrJ1wiPjxzcGFuIGNsYXNzPVwidGV4dFwiPjxzcGFuPicrY29udGV4dC50aGVtZVNldHRpbmdzLm1zdHlsZTFfaXRlbV9jdXN0b21fbGlua3RleHQzKyc8L3NwYW4+PC9zcGFuPjwvYT5cXFxuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxcXG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cIm5hdlBhZ2Utc3ViTWVudS1pdGVtLWNoaWxkIG5hdlBhZ2Utc3ViTWVudS1pdGVtLWN1c3RvbVwiPlxcXG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cIm5hdlBhZ2Utc3ViTWVudS1hY3Rpb24gbmF2UGFnZXMtYWN0aW9uIG5hdlBhZ2VzLWFjdGlvbi1jdXN0b21cIiBocmVmPVwiJytjb250ZXh0LnRoZW1lU2V0dGluZ3MubXN0eWxlMV9pdGVtX2N1c3RvbV9saW5rNCsnXCI+PHNwYW4gY2xhc3M9XCJ0ZXh0XCI+PHNwYW4+Jytjb250ZXh0LnRoZW1lU2V0dGluZ3MubXN0eWxlMV9pdGVtX2N1c3RvbV9saW5rdGV4dDQrJzwvc3Bhbj48L3NwYW4+PC9hPlxcXG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XFxcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwibmF2UGFnZS1zdWJNZW51LWl0ZW0tY2hpbGQgbmF2UGFnZS1zdWJNZW51LWl0ZW0tY3VzdG9tXCI+XFxcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVwibmF2UGFnZS1zdWJNZW51LWFjdGlvbiBuYXZQYWdlcy1hY3Rpb24gbmF2UGFnZXMtYWN0aW9uLWN1c3RvbVwiIGhyZWY9XCInK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tc3R5bGUxX2l0ZW1fY3VzdG9tX2xpbms1KydcIj48c3BhbiBjbGFzcz1cInRleHRcIj48c3Bhbj4nK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tc3R5bGUxX2l0ZW1fY3VzdG9tX2xpbmt0ZXh0NSsnPC9zcGFuPjwvc3Bhbj48L2E+XFxcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cXFxuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJuYXZQYWdlLXN1Yk1lbnUtaXRlbS1jaGlsZCBuYXZQYWdlLXN1Yk1lbnUtaXRlbS1jdXN0b21cIj5cXFxuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJuYXZQYWdlLXN1Yk1lbnUtYWN0aW9uIG5hdlBhZ2VzLWFjdGlvbiBuYXZQYWdlcy1hY3Rpb24tY3VzdG9tIG5hdlBhZ2VzLWFjdGlvbi0tc2FsZVwiIGhyZWY9XCInK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tc3R5bGUxX2l0ZW1fY3VzdG9tX2xpbms2KydcIj48c3BhbiBjbGFzcz1cInRleHRcIj48c3Bhbj4nK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tc3R5bGUxX2l0ZW1fY3VzdG9tX2xpbmt0ZXh0NisnPC9zcGFuPjwvc3Bhbj48L2E+XFxcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4nLFxuICAgICAgICAgICAgICAgICAgICBjb250ZW50UmlnaHQ6ICc8aDMgY2xhc3M9XCJtZWdhbWVudS10aXRsZVwiPicrY29udGV4dC50aGVtZVNldHRpbmdzLm1zdHlsZTJfaXRlbV9zdWJNZW51QmxvY2srJzwvaDM+XFxcbiAgICAgICAgICAgICAgICAgICAgXHRcdFx0ICAgXHQ8ZGl2IGNsYXNzPVwibWVnYW1lbnUtc3ViTWVudVwiPlxcXG4gICAgICAgICAgICAgICAgICAgIFx0XHRcdCAgIFx0XHQ8dWwgY2xhc3M9XCJuYXZQYWdlLXN1Yk1lbnUtbGlua3MgbmF2UGFnZS1zdWJNZW51LWxpc3RcIj5cXFxuXHRcdFx0XHQgICAgICAgICAgICAgICAgICAgIFx0XHQ8bGkgY2xhc3M9XCJuYXZQYWdlLXN1Yk1lbnUtaXRlbS1jaGlsZCBuYXZQYWdlLXN1Yk1lbnUtaXRlbS1jdXN0b21cIj5cXFxuXHRcdFx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVwibmF2UGFnZS1zdWJNZW51LWFjdGlvbiBuYXZQYWdlcy1hY3Rpb24gbmF2UGFnZXMtYWN0aW9uLWN1c3RvbVwiIGhyZWY9XCInK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tc3R5bGUxX2l0ZW1fY3VzdG9tX2xpbms3KydcIj5cXFxuXHRcdFx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFx0PGltZyBjbGFzcz1cImxhenlsb2FkXCIgc3JjPVwiJyt1cmxJbWdMb2FkKydcIiBkYXRhLXNyYz1cIicrdXJsU3RvcmVIYXNoK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tc3R5bGUxX2l0ZW1fY3VzdG9tX2ltZzErJ1wiIGFsdD1cIicrY29udGV4dC50aGVtZVNldHRpbmdzLm1zdHlsZTFfaXRlbV9jdXN0b21fbGlua3RleHQ3KydcIiB0aXRsZT1cIicrY29udGV4dC50aGVtZVNldHRpbmdzLm1zdHlsZTFfaXRlbV9jdXN0b21fbGlua3RleHQ3KydcIi8+XFxcblx0XHRcdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcdDxzcGFuIGNsYXNzPVwidGV4dFwiPjxzcGFuPlxcXG5cdFx0XHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHRcdCcrY29udGV4dC50aGVtZVNldHRpbmdzLm1zdHlsZTFfaXRlbV9jdXN0b21fbGlua3RleHQ3KydcXFxuXHRcdFx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFx0PC9zcGFuPjwvc3Bhbj5cXFxuXHRcdFx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cXFxuXHRcdFx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cXFxuXHRcdFx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwibmF2UGFnZS1zdWJNZW51LWl0ZW0tY2hpbGQgbmF2UGFnZS1zdWJNZW51LWl0ZW0tY3VzdG9tXCI+XFxcblx0XHRcdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cIm5hdlBhZ2Utc3ViTWVudS1hY3Rpb24gbmF2UGFnZXMtYWN0aW9uIG5hdlBhZ2VzLWFjdGlvbi1jdXN0b21cIiBocmVmPVwiJytjb250ZXh0LnRoZW1lU2V0dGluZ3MubXN0eWxlMV9pdGVtX2N1c3RvbV9saW5rOCsnXCI+XFxcblx0XHRcdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcdDxpbWcgY2xhc3M9XCJsYXp5bG9hZFwiIHNyYz1cIicrdXJsSW1nTG9hZCsnXCIgZGF0YS1zcmM9XCInK3VybFN0b3JlSGFzaCtjb250ZXh0LnRoZW1lU2V0dGluZ3MubXN0eWxlMV9pdGVtX2N1c3RvbV9pbWcyKydcIiBhbHQ9XCInK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tc3R5bGUxX2l0ZW1fY3VzdG9tX2xpbmt0ZXh0OCsnXCIgdGl0bGU9XCInK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tc3R5bGUxX2l0ZW1fY3VzdG9tX2xpbmt0ZXh0OCsnXCIvPlxcXG5cdFx0XHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHQ8c3BhbiBjbGFzcz1cInRleHRcIj48c3Bhbj5cXFxuXHRcdFx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFx0XHQnK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tc3R5bGUxX2l0ZW1fY3VzdG9tX2xpbmt0ZXh0OCsnXFxcblx0XHRcdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcdDwvc3Bhbj48L3NwYW4+XFxcblx0XHRcdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+XFxcblx0XHRcdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XFxcblx0XHRcdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cIm5hdlBhZ2Utc3ViTWVudS1pdGVtLWNoaWxkIG5hdlBhZ2Utc3ViTWVudS1pdGVtLWN1c3RvbVwiPlxcXG5cdFx0XHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJuYXZQYWdlLXN1Yk1lbnUtYWN0aW9uIG5hdlBhZ2VzLWFjdGlvbiBuYXZQYWdlcy1hY3Rpb24tY3VzdG9tXCIgaHJlZj1cIicrY29udGV4dC50aGVtZVNldHRpbmdzLm1zdHlsZTFfaXRlbV9jdXN0b21fbGluazkrJ1wiPlxcXG5cdFx0XHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHQ8aW1nIGNsYXNzPVwibGF6eWxvYWRcIiBzcmM9XCInK3VybEltZ0xvYWQrJ1wiIGRhdGEtc3JjPVwiJyt1cmxTdG9yZUhhc2grY29udGV4dC50aGVtZVNldHRpbmdzLm1zdHlsZTFfaXRlbV9jdXN0b21faW1nMysnXCIgYWx0PVwiJytjb250ZXh0LnRoZW1lU2V0dGluZ3MubXN0eWxlMV9pdGVtX2N1c3RvbV9saW5rdGV4dDkrJ1wiIHRpdGxlPVwiJytjb250ZXh0LnRoZW1lU2V0dGluZ3MubXN0eWxlMV9pdGVtX2N1c3RvbV9saW5rdGV4dDkrJ1wiLz5cXFxuXHRcdFx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFx0PHNwYW4gY2xhc3M9XCJ0ZXh0XCI+PHNwYW4+XFxcblx0XHRcdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcdFx0Jytjb250ZXh0LnRoZW1lU2V0dGluZ3MubXN0eWxlMV9pdGVtX2N1c3RvbV9saW5rdGV4dDkrJ1xcXG5cdFx0XHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHQ8L3NwYW4+PC9zcGFuPlxcXG5cdFx0XHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPlxcXG5cdFx0XHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxcXG5cdFx0XHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJuYXZQYWdlLXN1Yk1lbnUtaXRlbS1jaGlsZCBuYXZQYWdlLXN1Yk1lbnUtaXRlbS1jdXN0b21cIj5cXFxuXHRcdFx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVwibmF2UGFnZS1zdWJNZW51LWFjdGlvbiBuYXZQYWdlcy1hY3Rpb24gbmF2UGFnZXMtYWN0aW9uLWN1c3RvbVwiIGhyZWY9XCInK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tc3R5bGUxX2l0ZW1fY3VzdG9tX2xpbmsxMCsnXCI+XFxcblx0XHRcdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcdDxpbWcgY2xhc3M9XCJsYXp5bG9hZFwiIHNyYz1cIicrdXJsSW1nTG9hZCsnXCIgZGF0YS1zcmM9XCInK3VybFN0b3JlSGFzaCtjb250ZXh0LnRoZW1lU2V0dGluZ3MubXN0eWxlMV9pdGVtX2N1c3RvbV9pbWc0KydcIiBhbHQ9XCInK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tc3R5bGUxX2l0ZW1fY3VzdG9tX2xpbmt0ZXh0MTArJ1wiIHRpdGxlPVwiJytjb250ZXh0LnRoZW1lU2V0dGluZ3MubXN0eWxlMV9pdGVtX2N1c3RvbV9saW5rdGV4dDEwKydcIi8+XFxcblx0XHRcdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcdDxzcGFuIGNsYXNzPVwidGV4dFwiPjxzcGFuPlxcXG5cdFx0XHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHRcdCcrY29udGV4dC50aGVtZVNldHRpbmdzLm1zdHlsZTFfaXRlbV9jdXN0b21fbGlua3RleHQxMCsnXFxcblx0XHRcdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcdDwvc3Bhbj48L3NwYW4+XFxcblx0XHRcdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+XFxcblx0XHRcdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XFxcblx0XHRcdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cIm5hdlBhZ2Utc3ViTWVudS1pdGVtLWNoaWxkIG5hdlBhZ2Utc3ViTWVudS1pdGVtLWN1c3RvbVwiPlxcXG5cdFx0XHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJuYXZQYWdlLXN1Yk1lbnUtYWN0aW9uIG5hdlBhZ2VzLWFjdGlvbiBuYXZQYWdlcy1hY3Rpb24tY3VzdG9tXCIgaHJlZj1cIicrY29udGV4dC50aGVtZVNldHRpbmdzLm1zdHlsZTFfaXRlbV9jdXN0b21fbGluazExKydcIj5cXFxuXHRcdFx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFx0PGltZyBjbGFzcz1cImxhenlsb2FkXCIgc3JjPVwiJyt1cmxJbWdMb2FkKydcIiBkYXRhLXNyYz1cIicrdXJsU3RvcmVIYXNoK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tc3R5bGUxX2l0ZW1fY3VzdG9tX2ltZzUrJ1wiIGFsdD1cIicrY29udGV4dC50aGVtZVNldHRpbmdzLm1zdHlsZTFfaXRlbV9jdXN0b21fbGlua3RleHQxMSsnXCIgdGl0bGU9XCInK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tc3R5bGUxX2l0ZW1fY3VzdG9tX2xpbmt0ZXh0MTErJ1wiLz5cXFxuXHRcdFx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFx0PHNwYW4gY2xhc3M9XCJ0ZXh0XCI+PHNwYW4+XFxcblx0XHRcdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcdFx0Jytjb250ZXh0LnRoZW1lU2V0dGluZ3MubXN0eWxlMV9pdGVtX2N1c3RvbV9saW5rdGV4dDExKydcXFxuXHRcdFx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFx0PC9zcGFuPjwvc3Bhbj5cXFxuXHRcdFx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cXFxuXHRcdFx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cXFxuXHRcdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+XFxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgXHRcdDwvZGl2Pidcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfSBlbHNlIGlmIChtc3R5bGUyX2l0ZW0gPT0gbnVtYmVySXRlbSl7XG5cdCAgICAgICAgICAgIGhhbG9NZWdhTWVudS5tZW51SXRlbShtc3R5bGUyX2l0ZW0pLnNldE1lZ2FNZW51KHtcblx0ICAgICAgICAgICAgICAgIHN0eWxlOiAnc3R5bGUgMicsXG5cdCAgICAgICAgICAgICAgICBpbWFnZUFyZWFXaWR0aDogY29udGV4dC50aGVtZVNldHRpbmdzLm1zdHlsZTJfaXRlbV9pbWdfd2lkdGgsXG5cdCAgICAgICAgICAgICAgICBjYXRlQXJlYVdpZHRoOiBjb250ZXh0LnRoZW1lU2V0dGluZ3MubXN0eWxlMl9pdGVtX2NvbF93aWR0aCxcblx0ICAgICAgICAgICAgICAgIGNhdGVDb2x1bW5zOiBjb250ZXh0LnRoZW1lU2V0dGluZ3MubXN0eWxlMl9pdGVtX2NvbCxcblx0ICAgICAgICAgICAgICAgIGNvbnRlbnRMZWZ0OiAnPHVsIGNsYXNzPVwibmF2UGFnZS1zdWJNZW51LWxpbmtzIG5hdlBhZ2Utc3ViTWVudS1saXN0XCI+XFxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cIm5hdlBhZ2Utc3ViTWVudS1pdGVtLWNoaWxkXCI+XFxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cIm5hdlBhZ2Utc3ViTWVudS1hY3Rpb24gbmF2UGFnZXMtYWN0aW9uIG5hdlBhZ2VzLWFjdGlvbi1jdXN0b21cIiBocmVmPVwiJytjb250ZXh0LnRoZW1lU2V0dGluZ3MubXN0eWxlMl9pdGVtX2N1c3RvbV9saW5rMSsnXCI+PHNwYW4gY2xhc3M9XCJ0ZXh0XCI+PHNwYW4+Jytjb250ZXh0LnRoZW1lU2V0dGluZ3MubXN0eWxlMl9pdGVtX2N1c3RvbV9saW5rdGV4dDErJzwvc3Bhbj48L3NwYW4+PC9hPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJuYXZQYWdlLXN1Yk1lbnUtaXRlbS1jaGlsZFwiPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJuYXZQYWdlLXN1Yk1lbnUtYWN0aW9uIG5hdlBhZ2VzLWFjdGlvbiBuYXZQYWdlcy1hY3Rpb24tY3VzdG9tXCIgaHJlZj1cIicrY29udGV4dC50aGVtZVNldHRpbmdzLm1zdHlsZTJfaXRlbV9jdXN0b21fbGluazIrJ1wiPjxzcGFuIGNsYXNzPVwidGV4dFwiPjxzcGFuPicrY29udGV4dC50aGVtZVNldHRpbmdzLm1zdHlsZTJfaXRlbV9jdXN0b21fbGlua3RleHQyKyc8L3NwYW4+PC9zcGFuPjwvYT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwibmF2UGFnZS1zdWJNZW51LWl0ZW0tY2hpbGRcIj5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVwibmF2UGFnZS1zdWJNZW51LWFjdGlvbiBuYXZQYWdlcy1hY3Rpb24gbmF2UGFnZXMtYWN0aW9uLWN1c3RvbVwiIGhyZWY9XCInK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tc3R5bGUyX2l0ZW1fY3VzdG9tX2xpbmszKydcIj48c3BhbiBjbGFzcz1cInRleHRcIj48c3Bhbj4nK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tc3R5bGUyX2l0ZW1fY3VzdG9tX2xpbmt0ZXh0MysnPC9zcGFuPjwvc3Bhbj48L2E+XFxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XFxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cIm5hdlBhZ2Utc3ViTWVudS1pdGVtLWNoaWxkXCI+XFxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cIm5hdlBhZ2Utc3ViTWVudS1hY3Rpb24gbmF2UGFnZXMtYWN0aW9uIG5hdlBhZ2VzLWFjdGlvbi1jdXN0b21cIiBocmVmPVwiJytjb250ZXh0LnRoZW1lU2V0dGluZ3MubXN0eWxlMl9pdGVtX2N1c3RvbV9saW5rNCsnXCI+PHNwYW4gY2xhc3M9XCJ0ZXh0XCI+PHNwYW4+Jytjb250ZXh0LnRoZW1lU2V0dGluZ3MubXN0eWxlMl9pdGVtX2N1c3RvbV9saW5rdGV4dDQrJzwvc3Bhbj48L3NwYW4+PC9hPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJuYXZQYWdlLXN1Yk1lbnUtaXRlbS1jaGlsZFwiPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJuYXZQYWdlLXN1Yk1lbnUtYWN0aW9uIG5hdlBhZ2VzLWFjdGlvbiBuYXZQYWdlcy1hY3Rpb24tY3VzdG9tXCIgaHJlZj1cIicrY29udGV4dC50aGVtZVNldHRpbmdzLm1zdHlsZTJfaXRlbV9jdXN0b21fbGluazUrJ1wiPjxzcGFuIGNsYXNzPVwidGV4dFwiPjxzcGFuPicrY29udGV4dC50aGVtZVNldHRpbmdzLm1zdHlsZTJfaXRlbV9jdXN0b21fbGlua3RleHQ1Kyc8L3NwYW4+PC9zcGFuPjwvYT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwibmF2UGFnZS1zdWJNZW51LWl0ZW0tY2hpbGRcIj5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVwibmF2UGFnZS1zdWJNZW51LWFjdGlvbiBuYXZQYWdlcy1hY3Rpb24gbmF2UGFnZXMtYWN0aW9uLWN1c3RvbSBuYXZQYWdlcy1hY3Rpb24tLXNhbGVcIiBocmVmPVwiJytjb250ZXh0LnRoZW1lU2V0dGluZ3MubXN0eWxlMl9pdGVtX2N1c3RvbV9saW5rNisnXCI+PHNwYW4gY2xhc3M9XCJ0ZXh0XCI+PHNwYW4+Jytjb250ZXh0LnRoZW1lU2V0dGluZ3MubXN0eWxlMl9pdGVtX2N1c3RvbV9saW5rdGV4dDYrJzwvc3Bhbj48L3NwYW4+PC9hPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+Jyxcblx0ICAgICAgICAgICAgICAgIGNvbnRlbnRSaWdodDogJzxkaXYgY2xhc3M9XCJpdGVtXCI+PGEgY2xhc3M9XCJpbWFnZVwiIGhyZWY9XCInK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tc3R5bGUyX2l0ZW1fbGluazMrJ1wiPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPVwibGF6eWxvYWRcIiBzcmM9XCInK3VybEltZ0xvYWQrJ1wiIGRhdGEtc3JjPVwiJyt1cmxTdG9yZUhhc2grY29udGV4dC50aGVtZVNldHRpbmdzLm1zdHlsZTJfaXRlbV9pbWczKydcIiBhbHQ9XCInK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tc3R5bGUyX2l0ZW1faW1nMysnXCIgdGl0bGU9XCInK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tc3R5bGUyX2l0ZW1faW1nMysnXCIvPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIDwvYT48L2Rpdj4nLFxuXHQgICAgICAgICAgICAgICAgcHJvZHVjdHM6JzxoMyBjbGFzcz1cIm1lZ2FtZW51LXRpdGxlXCI+Jytjb250ZXh0LnRoZW1lU2V0dGluZ3MubXN0eWxlMl9pdGVtX3Byb2R1Y3RCbG9jaysnPC9oMz5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWVnYW1lbnUtYnJhbmRzXCI+XFxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bD5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWJyYW5kLWxldHRlcj1cImFcIj48YSBocmVmPVwiL2JyYW5kcyNhXCI+PHNwYW4+YTwvc3Bhbj48L2E+PC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWJyYW5kLWxldHRlcj1cImJcIj48YSBocmVmPVwiL2JyYW5kcyNiXCI+PHNwYW4+Yjwvc3Bhbj48L2E+PC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWJyYW5kLWxldHRlcj1cImNcIj48YSBocmVmPVwiL2JyYW5kcyNjXCI+PHNwYW4+Yzwvc3Bhbj48L2E+PC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWJyYW5kLWxldHRlcj1cImRcIj48YSBocmVmPVwiL2JyYW5kcyNkXCI+PHNwYW4+ZDwvc3Bhbj48L2E+PC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWJyYW5kLWxldHRlcj1cImVcIj48YSBocmVmPVwiL2JyYW5kcyNlXCI+PHNwYW4+ZTwvc3Bhbj48L2E+PC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWJyYW5kLWxldHRlcj1cImZcIj48YSBocmVmPVwiL2JyYW5kcyNmXCI+PHNwYW4+Zjwvc3Bhbj48L2E+PC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWJyYW5kLWxldHRlcj1cImdcIj48YSBocmVmPVwiL2JyYW5kcyNnXCI+PHNwYW4+Zzwvc3Bhbj48L2E+PC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWJyYW5kLWxldHRlcj1cImhcIj48YSBocmVmPVwiL2JyYW5kcyNoXCI+PHNwYW4+aDwvc3Bhbj48L2E+PC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWJyYW5kLWxldHRlcj1cImlcIj48YSBocmVmPVwiL2JyYW5kcyNpXCI+PHNwYW4+aTwvc3Bhbj48L2E+PC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWJyYW5kLWxldHRlcj1cImpcIj48YSBocmVmPVwiL2JyYW5kcyNqXCI+PHNwYW4+ajwvc3Bhbj48L2E+PC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWJyYW5kLWxldHRlcj1cImtcIj48YSBocmVmPVwiL2JyYW5kcyNrXCI+PHNwYW4+azwvc3Bhbj48L2E+PC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWJyYW5kLWxldHRlcj1cImxcIj48YSBocmVmPVwiL2JyYW5kcyNsXCI+PHNwYW4+bDwvc3Bhbj48L2E+PC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWJyYW5kLWxldHRlcj1cIm1cIj48YSBocmVmPVwiL2JyYW5kcyNtXCI+PHNwYW4+bTwvc3Bhbj48L2E+PC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWJyYW5kLWxldHRlcj1cIm5cIj48YSBocmVmPVwiL2JyYW5kcyNuXCI+PHNwYW4+bjwvc3Bhbj48L2E+PC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWJyYW5kLWxldHRlcj1cIm9cIj48YSBocmVmPVwiL2JyYW5kcyNvXCI+PHNwYW4+bzwvc3Bhbj48L2E+PC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWJyYW5kLWxldHRlcj1cInBcIj48YSBocmVmPVwiL2JyYW5kcyNwXCI+PHNwYW4+cDwvc3Bhbj48L2E+PC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWJyYW5kLWxldHRlcj1cInFcIj48YSBocmVmPVwiL2JyYW5kcyNxXCI+PHNwYW4+cTwvc3Bhbj48L2E+PC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWJyYW5kLWxldHRlcj1cInJcIj48YSBocmVmPVwiL2JyYW5kcyNyXCI+PHNwYW4+cjwvc3Bhbj48L2E+PC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWJyYW5kLWxldHRlcj1cInNcIj48YSBocmVmPVwiL2JyYW5kcyNzXCI+PHNwYW4+czwvc3Bhbj48L2E+PC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWJyYW5kLWxldHRlcj1cInRcIj48YSBocmVmPVwiL2JyYW5kcyN0XCI+PHNwYW4+dDwvc3Bhbj48L2E+PC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWJyYW5kLWxldHRlcj1cInVcIj48YSBocmVmPVwiL2JyYW5kcyN1XCI+PHNwYW4+dTwvc3Bhbj48L2E+PC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWJyYW5kLWxldHRlcj1cInZcIj48YSBocmVmPVwiL2JyYW5kcyN2XCI+PHNwYW4+djwvc3Bhbj48L2E+PC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWJyYW5kLWxldHRlcj1cIndcIj48YSBocmVmPVwiL2JyYW5kcyN3XCI+PHNwYW4+dzwvc3Bhbj48L2E+PC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWJyYW5kLWxldHRlcj1cInhcIj48YSBocmVmPVwiL2JyYW5kcyN4XCI+PHNwYW4+eDwvc3Bhbj48L2E+PC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWJyYW5kLWxldHRlcj1cInlcIj48YSBocmVmPVwiL2JyYW5kcyN5XCI+PHNwYW4+eTwvc3Bhbj48L2E+PC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWJyYW5kLWxldHRlcj1cInpcIj48YSBocmVmPVwiL2JyYW5kcyN6XCI+PHNwYW4+ejwvc3Bhbj48L2E+PC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWJyYW5kLWxldHRlcj1cIjBcIj48YSBocmVmPVwiL2JyYW5kcyMwXCI+PHNwYW4+MS05PC9zcGFuPjwvYT48L2xpPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cInZpZXctYWxsXCIgaHJlZj1cIi9icmFuZHNcIj4nK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tc3R5bGUyX2l0ZW1fcHJvZHVjdEJsb2NrX2J0bkFsbCsnPC9hPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PicsXG5cdCAgICAgICAgICAgICAgICBpbWFnZXM6ICc8ZGl2IGNsYXNzPVwiaXRlbVwiPjxhIGNsYXNzPVwiaW1hZ2VcIiBocmVmPVwiJytjb250ZXh0LnRoZW1lU2V0dGluZ3MubXN0eWxlMl9pdGVtX2xpbmsxKydcIj5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz1cImxhenlsb2FkXCIgc3JjPVwiJyt1cmxJbWdMb2FkKydcIiBkYXRhLXNyYz1cIicrdXJsU3RvcmVIYXNoK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tc3R5bGUyX2l0ZW1faW1nMSsnXCIgYWx0PVwiJytjb250ZXh0LnRoZW1lU2V0dGluZ3MubXN0eWxlMl9pdGVtX2ltZzErJ1wiIHRpdGxlPVwiJytjb250ZXh0LnRoZW1lU2V0dGluZ3MubXN0eWxlMl9pdGVtX2ltZzErJ1wiLz5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICA8L2E+PC9kaXY+XFxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIml0ZW1cIj48YSBjbGFzcz1cImltYWdlXCIgaHJlZj1cIicrY29udGV4dC50aGVtZVNldHRpbmdzLm1zdHlsZTJfaXRlbV9saW5rMisnXCI+XFxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9XCJsYXp5bG9hZFwiIHNyYz1cIicrdXJsSW1nTG9hZCsnXCIgZGF0YS1zcmM9XCInK3VybFN0b3JlSGFzaCtjb250ZXh0LnRoZW1lU2V0dGluZ3MubXN0eWxlMl9pdGVtX2ltZzIrJ1wiIGFsdD1cIicrY29udGV4dC50aGVtZVNldHRpbmdzLm1zdHlsZTJfaXRlbV9pbWcyKydcIiB0aXRsZT1cIicrY29udGV4dC50aGVtZVNldHRpbmdzLm1zdHlsZTJfaXRlbV9pbWcyKydcIi8+XFxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgPC9hPjwvZGl2Pidcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfSBlbHNlIGlmIChtc3R5bGUzX2l0ZW0gPT0gbnVtYmVySXRlbSl7XG5cdCAgICAgICAgICAgIGhhbG9NZWdhTWVudS5tZW51SXRlbShtc3R5bGUzX2l0ZW0pLnNldE1lZ2FNZW51KHtcblx0ICAgICAgICAgICAgICAgIHN0eWxlOiAnc3R5bGUgMycsXG5cdCAgICAgICAgICAgICAgICBpbWFnZUFyZWFXaWR0aDogY29udGV4dC50aGVtZVNldHRpbmdzLm1zdHlsZTNfaXRlbV9pbWdfd2lkdGgsXG5cdCAgICAgICAgICAgICAgICBjYXRlQXJlYVdpZHRoOiBjb250ZXh0LnRoZW1lU2V0dGluZ3MubXN0eWxlM19pdGVtX2NvbF93aWR0aCxcblx0ICAgICAgICAgICAgICAgIGNhdGVDb2x1bW5zOiBjb250ZXh0LnRoZW1lU2V0dGluZ3MubXN0eWxlM19pdGVtX2NvbCxcblx0ICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICc8dWwgY2xhc3M9XCJuYXZQYWdlLXN1Yk1lbnUtbGlua3MgbmF2UGFnZS1zdWJNZW51LWxpc3RcIj5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwibmF2UGFnZS1zdWJNZW51LWl0ZW0tY2hpbGRcIj5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVwibmF2UGFnZS1zdWJNZW51LWFjdGlvbiBuYXZQYWdlcy1hY3Rpb24gbmF2UGFnZXMtYWN0aW9uLWN1c3RvbVwiIGhyZWY9XCInK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tc3R5bGUzX2l0ZW1fY3VzdG9tX2xpbmsxKydcIj48c3BhbiBjbGFzcz1cInRleHRcIj48c3Bhbj4nK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tc3R5bGUzX2l0ZW1fY3VzdG9tX2xpbmt0ZXh0MSsnPC9zcGFuPjwvc3Bhbj48L2E+XFxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XFxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cIm5hdlBhZ2Utc3ViTWVudS1pdGVtLWNoaWxkXCI+XFxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cIm5hdlBhZ2Utc3ViTWVudS1hY3Rpb24gbmF2UGFnZXMtYWN0aW9uIG5hdlBhZ2VzLWFjdGlvbi1jdXN0b21cIiBocmVmPVwiJytjb250ZXh0LnRoZW1lU2V0dGluZ3MubXN0eWxlM19pdGVtX2N1c3RvbV9saW5rMisnXCI+PHNwYW4gY2xhc3M9XCJ0ZXh0XCI+PHNwYW4+Jytjb250ZXh0LnRoZW1lU2V0dGluZ3MubXN0eWxlM19pdGVtX2N1c3RvbV9saW5rdGV4dDIrJzwvc3Bhbj48L3NwYW4+PC9hPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJuYXZQYWdlLXN1Yk1lbnUtaXRlbS1jaGlsZFwiPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJuYXZQYWdlLXN1Yk1lbnUtYWN0aW9uIG5hdlBhZ2VzLWFjdGlvbiBuYXZQYWdlcy1hY3Rpb24tY3VzdG9tXCIgaHJlZj1cIicrY29udGV4dC50aGVtZVNldHRpbmdzLm1zdHlsZTNfaXRlbV9jdXN0b21fbGluazMrJ1wiPjxzcGFuIGNsYXNzPVwidGV4dFwiPjxzcGFuPicrY29udGV4dC50aGVtZVNldHRpbmdzLm1zdHlsZTNfaXRlbV9jdXN0b21fbGlua3RleHQzKyc8L3NwYW4+PC9zcGFuPjwvYT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwibmF2UGFnZS1zdWJNZW51LWl0ZW0tY2hpbGRcIj5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVwibmF2UGFnZS1zdWJNZW51LWFjdGlvbiBuYXZQYWdlcy1hY3Rpb24gbmF2UGFnZXMtYWN0aW9uLWN1c3RvbVwiIGhyZWY9XCInK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tc3R5bGUzX2l0ZW1fY3VzdG9tX2xpbms0KydcIj48c3BhbiBjbGFzcz1cInRleHRcIj48c3Bhbj4nK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tc3R5bGUzX2l0ZW1fY3VzdG9tX2xpbmt0ZXh0NCsnPC9zcGFuPjwvc3Bhbj48L2E+XFxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XFxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cIm5hdlBhZ2Utc3ViTWVudS1pdGVtLWNoaWxkXCI+XFxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cIm5hdlBhZ2Utc3ViTWVudS1hY3Rpb24gbmF2UGFnZXMtYWN0aW9uIG5hdlBhZ2VzLWFjdGlvbi1jdXN0b21cIiBocmVmPVwiJytjb250ZXh0LnRoZW1lU2V0dGluZ3MubXN0eWxlM19pdGVtX2N1c3RvbV9saW5rNSsnXCI+PHNwYW4gY2xhc3M9XCJ0ZXh0XCI+PHNwYW4+Jytjb250ZXh0LnRoZW1lU2V0dGluZ3MubXN0eWxlM19pdGVtX2N1c3RvbV9saW5rdGV4dDUrJzwvc3Bhbj48L3NwYW4+PC9hPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJuYXZQYWdlLXN1Yk1lbnUtaXRlbS1jaGlsZFwiPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJuYXZQYWdlLXN1Yk1lbnUtYWN0aW9uIG5hdlBhZ2VzLWFjdGlvbiBuYXZQYWdlcy1hY3Rpb24tY3VzdG9tIG5hdlBhZ2VzLWFjdGlvbi0tc2FsZVwiIGhyZWY9XCInK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tc3R5bGUzX2l0ZW1fY3VzdG9tX2xpbms2KydcIj48c3BhbiBjbGFzcz1cInRleHRcIj48c3Bhbj4nK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tc3R5bGUzX2l0ZW1fY3VzdG9tX2xpbmt0ZXh0NisnPC9zcGFuPjwvc3Bhbj48L2E+XFxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XFxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4nLFxuXHQgICAgICAgICAgICAgICAgaW1hZ2VzOiAnPGEgY2xhc3M9XCJpbWFnZVwiIGhyZWY9XCInK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tc3R5bGUzX2l0ZW1fbGluazErJ1wiPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPVwibGF6eWxvYWRcIiBzcmM9XCInK3VybEltZ0xvYWQrJ1wiIGRhdGEtc3JjPVwiJyt1cmxTdG9yZUhhc2grY29udGV4dC50aGVtZVNldHRpbmdzLm1zdHlsZTNfaXRlbV9pbWcxKydcIiBhbHQ9XCInK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tc3R5bGUzX2l0ZW1faW1nMSsnXCIgdGl0bGU9XCInK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tc3R5bGUzX2l0ZW1faW1nMSsnXCIvPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cImltYWdlXCIgaHJlZj1cIicrY29udGV4dC50aGVtZVNldHRpbmdzLm1zdHlsZTNfaXRlbV9saW5rMisnXCI+XFxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9XCJsYXp5bG9hZFwiIHNyYz1cIicrdXJsSW1nTG9hZCsnXCIgZGF0YS1zcmM9XCInK3VybFN0b3JlSGFzaCtjb250ZXh0LnRoZW1lU2V0dGluZ3MubXN0eWxlM19pdGVtX2ltZzIrJ1wiIGFsdD1cIicrY29udGV4dC50aGVtZVNldHRpbmdzLm1zdHlsZTNfaXRlbV9pbWcyKydcIiB0aXRsZT1cIicrY29udGV4dC50aGVtZVNldHRpbmdzLm1zdHlsZTNfaXRlbV9pbWcyKydcIi8+XFxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgPC9hPicsXG5cdCAgICAgICAgICAgICAgICBib3R0b21DYXRlczogJzxkaXYgY2xhc3M9XCJtZWdhbWVudS1jdXN0b20tbGlzdFwiPjxkaXYgY2xhc3M9XCJtZWdhbWVudS1ib3R0b21cIj48c3BhbiBjbGFzcz1cInRleHRcIj48c3Bhbj4nK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tc3R5bGUzX2l0ZW1fYm90dG9tQ2F0ZXMrJzwvc3Bhbj48L3NwYW4+PC9kaXY+PC9kaXY+J1xuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIE1lZ2FNZW51TGFiZWwoKXtcblx0ICAgICAgICBpZiAoY29udGV4dC50aGVtZVNldHRpbmdzLm1lZ2FfbWVudV9uZXdfbGFiZWwgJiYgY29udGV4dC50aGVtZVNldHRpbmdzLm1lZ2FfbWVudV9uZXdfbGFiZWxfdGV4dCkge1xuXHQgICAgICAgICAgICBoYWxvTWVnYU1lbnUubWVudUl0ZW0oY29udGV4dC50aGVtZVNldHRpbmdzLm1lZ2FfbWVudV9uZXdfbGFiZWwpLnNldE1lZ2FNZW51KHtcblx0ICAgICAgICAgICAgICAgIGxhYmVsOiBjb250ZXh0LnRoZW1lU2V0dGluZ3MubWVnYV9tZW51X25ld19sYWJlbF90ZXh0LFxuXHQgICAgICAgICAgICAgICAgbGFiZWxUeXBlOiBcIm5ld1wiLFxuXHQgICAgICAgICAgICAgICAgZGlzYWJsZWQ6IHRydWVcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaWYgKGNvbnRleHQudGhlbWVTZXR0aW5ncy5tZWdhX21lbnVfaG90X2xhYmVsICYmIGNvbnRleHQudGhlbWVTZXR0aW5ncy5tZWdhX21lbnVfaG90X2xhYmVsX3RleHQpIHtcblx0ICAgICAgICAgICAgaGFsb01lZ2FNZW51Lm1lbnVJdGVtKGNvbnRleHQudGhlbWVTZXR0aW5ncy5tZWdhX21lbnVfaG90X2xhYmVsKS5zZXRNZWdhTWVudSh7XG5cdCAgICAgICAgICAgICAgICBsYWJlbDogY29udGV4dC50aGVtZVNldHRpbmdzLm1lZ2FfbWVudV9ob3RfbGFiZWxfdGV4dCxcblx0ICAgICAgICAgICAgICAgIGxhYmVsVHlwZTogXCJob3RcIixcblx0ICAgICAgICAgICAgICAgIGRpc2FibGVkOiB0cnVlXG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGlmIChjb250ZXh0LnRoZW1lU2V0dGluZ3MubWVnYV9tZW51X3NhbGVfbGFiZWwgJiYgY29udGV4dC50aGVtZVNldHRpbmdzLm1lZ2FfbWVudV9zYWxlX2xhYmVsX3RleHQpIHtcblx0ICAgICAgICAgICAgaGFsb01lZ2FNZW51Lm1lbnVJdGVtKGNvbnRleHQudGhlbWVTZXR0aW5ncy5tZWdhX21lbnVfc2FsZV9sYWJlbCkuc2V0TWVnYU1lbnUoe1xuXHQgICAgICAgICAgICAgICAgbGFiZWw6IGNvbnRleHQudGhlbWVTZXR0aW5ncy5tZWdhX21lbnVfc2FsZV9sYWJlbF90ZXh0LFxuXHQgICAgICAgICAgICAgICAgbGFiZWxUeXBlOiBcInNhbGVcIixcblx0ICAgICAgICAgICAgICAgIGRpc2FibGVkOiB0cnVlXG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblxuXHQgICAgTWVnYU1lbnVMYWJlbCgpO1xuXG5cdCAgICB2YXIgc2V0SXRlbU1lZ2FNZW51ID0gU2V0SXRlbU1lZ2FNZW51KCk7XG5cblx0ICAgIHdpbmRvdy5vbmxvYWQgPSBzZXRJdGVtTWVnYU1lbnU7XG5cdH1cbn1cbiIsImltcG9ydCBoYWxvTWVnYU1lbnUgZnJvbSAnLi9oYWxvTWVnYU1lbnUnO1xuICAgIHdpbmRvdy5oYWxvTWVnYU1lbnUgPSBoYWxvTWVnYU1lbnU7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChjb250ZXh0KSB7XG5cdGlmIChjb250ZXh0LnRoZW1lU2V0dGluZ3MuaGFsb01lZ2FtZW51VHlwZSA9PSAnRWRpdG9yJykge1xuXHQgICAgdmFyIGhhbG9NZWdhTWVudSA9IG5ldyB3aW5kb3cuaGFsb01lZ2FNZW51KCk7XG5cdCAgICBjb25zdCB1cmxJbWdMb2FkID0gJCgnLmhhbG8tZ2xvYmFsLWJsb2NrJykuZGF0YSgnaW1hZ2UtbG9hZCcpO1xuXHQgICAgY29uc3QgdXJsU3RvcmVIYXNoID0gJCgnLmhhbG8tZ2xvYmFsLWJsb2NrJykuZGF0YSgnc3RvcmUtaGFzaC1pbWFnZScpO1xuXG5cdCAgICB2YXIgbWNzdHlsZTFfaXRlbSA9IHBhcnNlSW50KGNvbnRleHQudGhlbWVTZXR0aW5ncy5tY3N0eWxlMV9pdGVtKSxcblx0ICAgICAgICBtY3N0eWxlMl9pdGVtID0gcGFyc2VJbnQoY29udGV4dC50aGVtZVNldHRpbmdzLm1jc3R5bGUyX2l0ZW0pLFxuXHQgICAgICAgIG1jc3R5bGUzX2l0ZW0gPSBwYXJzZUludChjb250ZXh0LnRoZW1lU2V0dGluZ3MubWNzdHlsZTNfaXRlbSk7XG5cblx0ICAgIGZ1bmN0aW9uIFNldEl0ZW1NZWdhTWVudSgpe1xuXHQgICAgICAgICQoJy5uYXZQYWdlcy1saXN0LW1lZ2FtZW51ID4gbGk6bm90KC5uYXZQYWdlcy1pdGVtLXRvZ2dsZSknKS5tb3VzZW92ZXIoZXZlbnQgPT4ge1xuXHQgICAgICAgICAgICB2YXIgbnVtYmVySXRlbSA9ICQoZXZlbnQuY3VycmVudFRhcmdldCkuaW5kZXgoKSArIDE7XG5cblx0ICAgICAgICAgICAgaWYgKCEkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLmhhc0NsYXNzKCdoYXMtbWVnYW1lbnUnKSkge1xuXHQgICAgICAgICAgICAgICAgTG9hZE1lZ2FNZW51KG51bWJlckl0ZW0pO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSk7XG5cblx0ICAgICAgICAkKGRvY3VtZW50KS5vbignY2xpY2snLCcjaGFsby1tZW51LXNpZGViYXIgLm5hdlBhZ2VzLWxpc3Q6bm90KC5uYXZQYWdlcy1saXN0LS11c2VyKSA+IGxpID4gLm5hdlBhZ2VzLWFjdGlvbicgLCBldmVudCA9PiB7XG5cdCAgICAgICAgICAgIHZhciBudW1iZXJJdGVtID0gJChldmVudC5jdXJyZW50VGFyZ2V0KS5wYXJlbnQoKS5pbmRleCgpICsgMTtcblxuXHQgICAgICAgICAgICBpZiAoISQoZXZlbnQuY3VycmVudFRhcmdldCkucGFyZW50KCkuaGFzQ2xhc3MoJ2hhcy1tZWdhbWVudScpKSB7XG5cdCAgICAgICAgICAgICAgICBMb2FkTWVnYU1lbnUobnVtYmVySXRlbSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9KTtcblxuXHQgICAgICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xuXHRcdFx0IFx0JCgnYm9keScpLmFkZENsYXNzKCdtZW51LWlzLWxvYWQnKTtcblx0XHRcdH0pO1xuXG5cdFx0XHRpZiAoJCh3aW5kb3cpLndpZHRoKCkgPiAxMDI0KSB7XG5cdCAgICAgICAgICAgIGlmICgkKCcubmF2UGFnZXMtbGlzdDpub3QoLm5hdlBhZ2VzLWxpc3QtLXVzZXIpID4gLm5hdlBhZ2VzLWl0ZW0uaGFzLWRyb3Bkb3duJykubGVuZ3RoKSB7XG5cdCAgICAgICAgICAgICAgICAkKCcubmF2UGFnZXMtbGlzdDpub3QoLm5hdlBhZ2VzLWxpc3QtLXVzZXIpID4gLm5hdlBhZ2VzLWl0ZW0uaGFzLWRyb3Bkb3duJykub24oJ21vdXNlb3ZlcicsIGV2ZW50ID0+IHtcblx0ICAgICAgICAgICAgICAgICAgICAkKCdib2R5JykuYWRkQ2xhc3MoJ29wZW5NZW51UEMnKTtcblx0ICAgICAgICAgICAgICAgIH0pXG5cdCAgICAgICAgICAgICAgICAub24oJ21vdXNlbGVhdmUnLCBldmVudCA9PiB7XG5cdCAgICAgICAgICAgICAgICAgICAgJCgnYm9keScpLnJlbW92ZUNsYXNzKCdvcGVuTWVudVBDJyk7XG5cdCAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblxuXHRcdFx0JCgnLmhhbG8tbWVudS1zaWRlYmFyIC5oYWxvLXNpZGViYXItY2xvc2UnKS5vbignY2xpY2snLCBldmVudCA9PiB7XG5cdCAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cblx0ICAgICAgICAgICAgaWYgKCQoJ2JvZHknKS5oYXNDbGFzcygnaGFzLWFjdGl2ZU5hdlBhZ2VzJykpIHtcblx0ICAgICAgICAgICAgICAgICQoJy5tb2JpbGVNZW51LXRvZ2dsZScpLnRyaWdnZXIoJ2NsaWNrJyk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9KTtcblxuXHQgICAgICAgICQoZG9jdW1lbnQpLm9uKCdjbGljaycsIGV2ZW50ID0+IHtcblx0ICAgICAgICAgICAgaWYgKCQoJ2JvZHknKS5oYXNDbGFzcygnaGFzLWFjdGl2ZU5hdlBhZ2VzJykpIHtcblx0ICAgICAgICAgICAgICAgIGlmICgoJChldmVudC50YXJnZXQpLmNsb3Nlc3QoJy5oYWxvLW1lbnUtc2lkZWJhcicpLmxlbmd0aCA9PT0gMCkgJiYgKCQoZXZlbnQudGFyZ2V0KS5jbG9zZXN0KCcubW9iaWxlTWVudS10b2dnbGUnKS5sZW5ndGggPT09IDApKXtcblx0ICAgICAgICAgICAgICAgICAgICAkKCcubW9iaWxlTWVudS10b2dnbGUnKS50cmlnZ2VyKCdjbGljaycpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSk7XG5cblx0ICAgICAgICB2YXIgJG1lbnVQYyA9ICQoJy5oYWxvLWJvdHRvbUhlYWRlciAubmF2UGFnZXMtbGlzdDpub3QoLm5hdlBhZ2VzLWxpc3QtLXVzZXIpJyksXG5cdCAgICAgICAgICAgICRtZW51TW9iaWxlID0gJCgnI2hhbG8tbWVudS1zaWRlYmFyIC5uYXZQYWdlcy1saXN0Om5vdCgubmF2UGFnZXMtbGlzdC0tdXNlciknKTtcblxuXHQgICAgICAgIGlmICgkKHdpbmRvdykud2lkdGgoKSA8PSAxMDI0KSB7XG5cdCAgICAgICAgICAgICQoJy5tb2JpbGVNZW51LXRvZ2dsZScpLm9uKCdjbGljaycsIGV2ZW50ID0+IHtcblx0ICAgICAgICAgICAgICAgIGlmICgkbWVudVBjLmxlbmd0aCkge1xuXHQgICAgICAgICAgICAgICAgICAgIGlmKCEkbWVudU1vYmlsZS5jaGlsZHJlbigpLmxlbmd0aCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAkbWVudVBjLmNoaWxkcmVuKCkuYXBwZW5kVG8oJG1lbnVNb2JpbGUpO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHQgICAgICAgIFxuXHQgICAgZnVuY3Rpb24gTG9hZE1lZ2FNZW51KG51bWJlckl0ZW0pe1xuXHQgICAgICAgIGlmIChtY3N0eWxlMV9pdGVtID09IG51bWJlckl0ZW0pIHtcblx0ICAgICAgICAgICAgaGFsb01lZ2FNZW51Lm1lbnVJdGVtKG1jc3R5bGUxX2l0ZW0pLnNldE1lZ2FNZW51KHtcblx0ICAgICAgICAgICAgICAgIHN0eWxlOiAnc3R5bGUgMScsXG5cdCAgICAgICAgICAgICAgICBpbWFnZUFyZWFXaWR0aDogY29udGV4dC50aGVtZVNldHRpbmdzLm1jc3R5bGUxX2l0ZW1faW1nX3dpZHRoLFxuXHQgICAgICAgICAgICAgICAgY2F0ZUFyZWFXaWR0aDogY29udGV4dC50aGVtZVNldHRpbmdzLm1jc3R5bGUxX2l0ZW1fY29sX3dpZHRoLFxuXHQgICAgICAgICAgICAgICAgY2F0ZUNvbHVtbnM6IGNvbnRleHQudGhlbWVTZXR0aW5ncy5tY3N0eWxlMV9pdGVtX2NvbCxcblx0ICAgICAgICAgICAgICAgIGltYWdlc0xlZnQ6ICc8YSBjbGFzcz1cImltYWdlXCIgaHJlZj1cIicrY29udGV4dC50aGVtZVNldHRpbmdzLm1jc3R5bGUxX2l0ZW0xX2xpbmsrJ1wiPlxcXG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9XCJsYXp5bG9hZFwiIHNyYz1cIicrdXJsSW1nTG9hZCsnXCIgZGF0YS1zcmM9XCInK3VybFN0b3JlSGFzaCtjb250ZXh0LnRoZW1lU2V0dGluZ3MubWNzdHlsZTFfaXRlbTFfaW1nKydcIiBhbHQ9XCInK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tY3N0eWxlMV9pdGVtMV9pbWcrJ1wiIHRpdGxlPVwiJytjb250ZXh0LnRoZW1lU2V0dGluZ3MubWNzdHlsZTFfaXRlbTFfaW1nKydcIi8+XFxcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICA8L2E+Jyxcblx0ICAgICAgICAgICAgICAgIGltYWdlc1JpZ2h0OiAnPGEgY2xhc3M9XCJpbWFnZVwiIGhyZWY9XCInK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tY3N0eWxlMV9pdGVtMl9saW5rKydcIj5cXFxuXHRcdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9XCJsYXp5bG9hZFwiIHNyYz1cIicrdXJsSW1nTG9hZCsnXCIgZGF0YS1zcmM9XCInK3VybFN0b3JlSGFzaCtjb250ZXh0LnRoZW1lU2V0dGluZ3MubWNzdHlsZTFfaXRlbTJfaW1nKydcIiBhbHQ9XCInK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tY3N0eWxlMV9pdGVtMl9pbWcrJ1wiIHRpdGxlPVwiJytjb250ZXh0LnRoZW1lU2V0dGluZ3MubWNzdHlsZTFfaXRlbTJfaW1nKydcIi8+XFxcblx0XHRcdCAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cXFxuXHRcdFx0ICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJpbWFnZVwiIGhyZWY9XCInK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tY3N0eWxlMV9pdGVtM19saW5rKydcIj5cXFxuXHRcdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9XCJsYXp5bG9hZFwiIHNyYz1cIicrdXJsSW1nTG9hZCsnXCIgZGF0YS1zcmM9XCInK3VybFN0b3JlSGFzaCtjb250ZXh0LnRoZW1lU2V0dGluZ3MubWNzdHlsZTFfaXRlbTNfaW1nKydcIiBhbHQ9XCInK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tY3N0eWxlMV9pdGVtM19pbWcrJ1wiIHRpdGxlPVwiJytjb250ZXh0LnRoZW1lU2V0dGluZ3MubWNzdHlsZTFfaXRlbTNfaW1nKydcIi8+XFxcblx0XHRcdCAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4nLFxuXHQgICAgICAgICAgICAgICAgY29udGVudExlZnQ6ICc8bGkgY2xhc3M9XCJuYXZQYWdlLXN1Yk1lbnUtaXRlbS1jaGlsZCBuYXZQYWdlLXN1Yk1lbnUtaXRlbS1jdXN0b21cIj5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cIm5hdlBhZ2Utc3ViTWVudS1hY3Rpb24gbmF2UGFnZXMtYWN0aW9uIG5hdlBhZ2VzLWFjdGlvbi1jdXN0b21cIiBocmVmPVwiJytjb250ZXh0LnRoZW1lU2V0dGluZ3MubWNzdHlsZTFfaXRlbV9jdXN0b21fbGluazErJ1wiPjxzcGFuIGNsYXNzPVwidGV4dFwiPjxzcGFuPicrY29udGV4dC50aGVtZVNldHRpbmdzLm1jc3R5bGUxX2l0ZW1fY3VzdG9tX2xpbmt0ZXh0MSsnPC9zcGFuPjwvc3Bhbj48L2E+XFxcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cXFxuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJuYXZQYWdlLXN1Yk1lbnUtaXRlbS1jaGlsZCBuYXZQYWdlLXN1Yk1lbnUtaXRlbS1jdXN0b21cIj5cXFxuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJuYXZQYWdlLXN1Yk1lbnUtYWN0aW9uIG5hdlBhZ2VzLWFjdGlvbiBuYXZQYWdlcy1hY3Rpb24tY3VzdG9tXCIgaHJlZj1cIicrY29udGV4dC50aGVtZVNldHRpbmdzLm1jc3R5bGUxX2l0ZW1fY3VzdG9tX2xpbmsyKydcIj48c3BhbiBjbGFzcz1cInRleHRcIj48c3Bhbj4nK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tY3N0eWxlMV9pdGVtX2N1c3RvbV9saW5rdGV4dDIrJzwvc3Bhbj48L3NwYW4+PC9hPlxcXG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XFxcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwibmF2UGFnZS1zdWJNZW51LWl0ZW0tY2hpbGQgbmF2UGFnZS1zdWJNZW51LWl0ZW0tY3VzdG9tXCI+XFxcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVwibmF2UGFnZS1zdWJNZW51LWFjdGlvbiBuYXZQYWdlcy1hY3Rpb24gbmF2UGFnZXMtYWN0aW9uLWN1c3RvbVwiIGhyZWY9XCInK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tY3N0eWxlMV9pdGVtX2N1c3RvbV9saW5rMysnXCI+PHNwYW4gY2xhc3M9XCJ0ZXh0XCI+PHNwYW4+Jytjb250ZXh0LnRoZW1lU2V0dGluZ3MubWNzdHlsZTFfaXRlbV9jdXN0b21fbGlua3RleHQzKyc8L3NwYW4+PC9zcGFuPjwvYT5cXFxuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxcXG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cIm5hdlBhZ2Utc3ViTWVudS1pdGVtLWNoaWxkIG5hdlBhZ2Utc3ViTWVudS1pdGVtLWN1c3RvbVwiPlxcXG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cIm5hdlBhZ2Utc3ViTWVudS1hY3Rpb24gbmF2UGFnZXMtYWN0aW9uIG5hdlBhZ2VzLWFjdGlvbi1jdXN0b21cIiBocmVmPVwiJytjb250ZXh0LnRoZW1lU2V0dGluZ3MubWNzdHlsZTFfaXRlbV9jdXN0b21fbGluazQrJ1wiPjxzcGFuIGNsYXNzPVwidGV4dFwiPjxzcGFuPicrY29udGV4dC50aGVtZVNldHRpbmdzLm1jc3R5bGUxX2l0ZW1fY3VzdG9tX2xpbmt0ZXh0NCsnPC9zcGFuPjwvc3Bhbj48L2E+XFxcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cXFxuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJuYXZQYWdlLXN1Yk1lbnUtaXRlbS1jaGlsZCBuYXZQYWdlLXN1Yk1lbnUtaXRlbS1jdXN0b21cIj5cXFxuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJuYXZQYWdlLXN1Yk1lbnUtYWN0aW9uIG5hdlBhZ2VzLWFjdGlvbiBuYXZQYWdlcy1hY3Rpb24tY3VzdG9tXCIgaHJlZj1cIicrY29udGV4dC50aGVtZVNldHRpbmdzLm1jc3R5bGUxX2l0ZW1fY3VzdG9tX2xpbms1KydcIj48c3BhbiBjbGFzcz1cInRleHRcIj48c3Bhbj4nK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tY3N0eWxlMV9pdGVtX2N1c3RvbV9saW5rdGV4dDUrJzwvc3Bhbj48L3NwYW4+PC9hPlxcXG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XFxcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwibmF2UGFnZS1zdWJNZW51LWl0ZW0tY2hpbGQgbmF2UGFnZS1zdWJNZW51LWl0ZW0tY3VzdG9tXCI+XFxcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVwibmF2UGFnZS1zdWJNZW51LWFjdGlvbiBuYXZQYWdlcy1hY3Rpb24gbmF2UGFnZXMtYWN0aW9uLWN1c3RvbSBuYXZQYWdlcy1hY3Rpb24tLXNhbGVcIiBocmVmPVwiJytjb250ZXh0LnRoZW1lU2V0dGluZ3MubWNzdHlsZTFfaXRlbV9jdXN0b21fbGluazYrJ1wiPjxzcGFuIGNsYXNzPVwidGV4dFwiPjxzcGFuPicrY29udGV4dC50aGVtZVNldHRpbmdzLm1jc3R5bGUxX2l0ZW1fY3VzdG9tX2xpbmt0ZXh0NisnPC9zcGFuPjwvc3Bhbj48L2E+XFxcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4nLFxuICAgICAgICAgICAgICAgICAgICBjb250ZW50UmlnaHQ6ICc8aDMgY2xhc3M9XCJtZWdhbWVudS10aXRsZVwiPicrY29udGV4dC50aGVtZVNldHRpbmdzLm1jc3R5bGUyX2l0ZW1fc3ViTWVudUJsb2NrKyc8L2gzPlxcXG4gICAgICAgICAgICAgICAgICAgIFx0XHRcdCAgIFx0PGRpdiBjbGFzcz1cIm1lZ2FtZW51LXN1Yk1lbnVcIj5cXFxuICAgICAgICAgICAgICAgICAgICBcdFx0XHQgICBcdFx0PHVsIGNsYXNzPVwibmF2UGFnZS1zdWJNZW51LWxpbmtzIG5hdlBhZ2Utc3ViTWVudS1saXN0XCI+XFxcblx0XHRcdFx0ICAgICAgICAgICAgICAgICAgICBcdFx0PGxpIGNsYXNzPVwibmF2UGFnZS1zdWJNZW51LWl0ZW0tY2hpbGQgbmF2UGFnZS1zdWJNZW51LWl0ZW0tY3VzdG9tXCI+XFxcblx0XHRcdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cIm5hdlBhZ2Utc3ViTWVudS1hY3Rpb24gbmF2UGFnZXMtYWN0aW9uIG5hdlBhZ2VzLWFjdGlvbi1jdXN0b21cIiBocmVmPVwiJytjb250ZXh0LnRoZW1lU2V0dGluZ3MubWNzdHlsZTFfaXRlbV9jdXN0b21fbGluazcrJ1wiPlxcXG5cdFx0XHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHQ8aW1nIGNsYXNzPVwibGF6eWxvYWRcIiBzcmM9XCInK3VybEltZ0xvYWQrJ1wiIGRhdGEtc3JjPVwiJyt1cmxTdG9yZUhhc2grY29udGV4dC50aGVtZVNldHRpbmdzLm1jc3R5bGUxX2l0ZW1fY3VzdG9tX2ltZzErJ1wiIGFsdD1cIicrY29udGV4dC50aGVtZVNldHRpbmdzLm1jc3R5bGUxX2l0ZW1fY3VzdG9tX2xpbmt0ZXh0NysnXCIgdGl0bGU9XCInK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tY3N0eWxlMV9pdGVtX2N1c3RvbV9saW5rdGV4dDcrJ1wiLz5cXFxuXHRcdFx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFx0PHNwYW4gY2xhc3M9XCJ0ZXh0XCI+PHNwYW4+XFxcblx0XHRcdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcdFx0Jytjb250ZXh0LnRoZW1lU2V0dGluZ3MubWNzdHlsZTFfaXRlbV9jdXN0b21fbGlua3RleHQ3KydcXFxuXHRcdFx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFx0PC9zcGFuPjwvc3Bhbj5cXFxuXHRcdFx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cXFxuXHRcdFx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cXFxuXHRcdFx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwibmF2UGFnZS1zdWJNZW51LWl0ZW0tY2hpbGQgbmF2UGFnZS1zdWJNZW51LWl0ZW0tY3VzdG9tXCI+XFxcblx0XHRcdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cIm5hdlBhZ2Utc3ViTWVudS1hY3Rpb24gbmF2UGFnZXMtYWN0aW9uIG5hdlBhZ2VzLWFjdGlvbi1jdXN0b21cIiBocmVmPVwiJytjb250ZXh0LnRoZW1lU2V0dGluZ3MubWNzdHlsZTFfaXRlbV9jdXN0b21fbGluazgrJ1wiPlxcXG5cdFx0XHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHQ8aW1nIGNsYXNzPVwibGF6eWxvYWRcIiBzcmM9XCInK3VybEltZ0xvYWQrJ1wiIGRhdGEtc3JjPVwiJyt1cmxTdG9yZUhhc2grY29udGV4dC50aGVtZVNldHRpbmdzLm1jc3R5bGUxX2l0ZW1fY3VzdG9tX2ltZzIrJ1wiIGFsdD1cIicrY29udGV4dC50aGVtZVNldHRpbmdzLm1jc3R5bGUxX2l0ZW1fY3VzdG9tX2xpbmt0ZXh0OCsnXCIgdGl0bGU9XCInK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tY3N0eWxlMV9pdGVtX2N1c3RvbV9saW5rdGV4dDgrJ1wiLz5cXFxuXHRcdFx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFx0PHNwYW4gY2xhc3M9XCJ0ZXh0XCI+PHNwYW4+XFxcblx0XHRcdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcdFx0Jytjb250ZXh0LnRoZW1lU2V0dGluZ3MubWNzdHlsZTFfaXRlbV9jdXN0b21fbGlua3RleHQ4KydcXFxuXHRcdFx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFx0PC9zcGFuPjwvc3Bhbj5cXFxuXHRcdFx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cXFxuXHRcdFx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cXFxuXHRcdFx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwibmF2UGFnZS1zdWJNZW51LWl0ZW0tY2hpbGQgbmF2UGFnZS1zdWJNZW51LWl0ZW0tY3VzdG9tXCI+XFxcblx0XHRcdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cIm5hdlBhZ2Utc3ViTWVudS1hY3Rpb24gbmF2UGFnZXMtYWN0aW9uIG5hdlBhZ2VzLWFjdGlvbi1jdXN0b21cIiBocmVmPVwiJytjb250ZXh0LnRoZW1lU2V0dGluZ3MubWNzdHlsZTFfaXRlbV9jdXN0b21fbGluazkrJ1wiPlxcXG5cdFx0XHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHQ8aW1nIGNsYXNzPVwibGF6eWxvYWRcIiBzcmM9XCInK3VybEltZ0xvYWQrJ1wiIGRhdGEtc3JjPVwiJyt1cmxTdG9yZUhhc2grY29udGV4dC50aGVtZVNldHRpbmdzLm1jc3R5bGUxX2l0ZW1fY3VzdG9tX2ltZzMrJ1wiIGFsdD1cIicrY29udGV4dC50aGVtZVNldHRpbmdzLm1jc3R5bGUxX2l0ZW1fY3VzdG9tX2xpbmt0ZXh0OSsnXCIgdGl0bGU9XCInK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tY3N0eWxlMV9pdGVtX2N1c3RvbV9saW5rdGV4dDkrJ1wiLz5cXFxuXHRcdFx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFx0PHNwYW4gY2xhc3M9XCJ0ZXh0XCI+PHNwYW4+XFxcblx0XHRcdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcdFx0Jytjb250ZXh0LnRoZW1lU2V0dGluZ3MubWNzdHlsZTFfaXRlbV9jdXN0b21fbGlua3RleHQ5KydcXFxuXHRcdFx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFx0PC9zcGFuPjwvc3Bhbj5cXFxuXHRcdFx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cXFxuXHRcdFx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cXFxuXHRcdFx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwibmF2UGFnZS1zdWJNZW51LWl0ZW0tY2hpbGQgbmF2UGFnZS1zdWJNZW51LWl0ZW0tY3VzdG9tXCI+XFxcblx0XHRcdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cIm5hdlBhZ2Utc3ViTWVudS1hY3Rpb24gbmF2UGFnZXMtYWN0aW9uIG5hdlBhZ2VzLWFjdGlvbi1jdXN0b21cIiBocmVmPVwiJytjb250ZXh0LnRoZW1lU2V0dGluZ3MubWNzdHlsZTFfaXRlbV9jdXN0b21fbGluazEwKydcIj5cXFxuXHRcdFx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFx0PGltZyBjbGFzcz1cImxhenlsb2FkXCIgc3JjPVwiJyt1cmxJbWdMb2FkKydcIiBkYXRhLXNyYz1cIicrdXJsU3RvcmVIYXNoK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tY3N0eWxlMV9pdGVtX2N1c3RvbV9pbWc0KydcIiBhbHQ9XCInK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tY3N0eWxlMV9pdGVtX2N1c3RvbV9saW5rdGV4dDEwKydcIiB0aXRsZT1cIicrY29udGV4dC50aGVtZVNldHRpbmdzLm1jc3R5bGUxX2l0ZW1fY3VzdG9tX2xpbmt0ZXh0MTArJ1wiLz5cXFxuXHRcdFx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFx0PHNwYW4gY2xhc3M9XCJ0ZXh0XCI+PHNwYW4+XFxcblx0XHRcdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcdFx0Jytjb250ZXh0LnRoZW1lU2V0dGluZ3MubWNzdHlsZTFfaXRlbV9jdXN0b21fbGlua3RleHQxMCsnXFxcblx0XHRcdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcdDwvc3Bhbj48L3NwYW4+XFxcblx0XHRcdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+XFxcblx0XHRcdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XFxcblx0XHRcdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cIm5hdlBhZ2Utc3ViTWVudS1pdGVtLWNoaWxkIG5hdlBhZ2Utc3ViTWVudS1pdGVtLWN1c3RvbVwiPlxcXG5cdFx0XHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJuYXZQYWdlLXN1Yk1lbnUtYWN0aW9uIG5hdlBhZ2VzLWFjdGlvbiBuYXZQYWdlcy1hY3Rpb24tY3VzdG9tXCIgaHJlZj1cIicrY29udGV4dC50aGVtZVNldHRpbmdzLm1jc3R5bGUxX2l0ZW1fY3VzdG9tX2xpbmsxMSsnXCI+XFxcblx0XHRcdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcdDxpbWcgY2xhc3M9XCJsYXp5bG9hZFwiIHNyYz1cIicrdXJsSW1nTG9hZCsnXCIgZGF0YS1zcmM9XCInK3VybFN0b3JlSGFzaCtjb250ZXh0LnRoZW1lU2V0dGluZ3MubWNzdHlsZTFfaXRlbV9jdXN0b21faW1nNSsnXCIgYWx0PVwiJytjb250ZXh0LnRoZW1lU2V0dGluZ3MubWNzdHlsZTFfaXRlbV9jdXN0b21fbGlua3RleHQxMSsnXCIgdGl0bGU9XCInK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tY3N0eWxlMV9pdGVtX2N1c3RvbV9saW5rdGV4dDExKydcIi8+XFxcblx0XHRcdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcdDxzcGFuIGNsYXNzPVwidGV4dFwiPjxzcGFuPlxcXG5cdFx0XHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHRcdCcrY29udGV4dC50aGVtZVNldHRpbmdzLm1jc3R5bGUxX2l0ZW1fY3VzdG9tX2xpbmt0ZXh0MTErJ1xcXG5cdFx0XHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHQ8L3NwYW4+PC9zcGFuPlxcXG5cdFx0XHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPlxcXG5cdFx0XHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxcXG5cdFx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBcdFx0PC9kaXY+J1xuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9IGVsc2UgaWYgKG1jc3R5bGUyX2l0ZW0gPT0gbnVtYmVySXRlbSl7XG5cdCAgICAgICAgICAgIGhhbG9NZWdhTWVudS5tZW51SXRlbShtY3N0eWxlMl9pdGVtKS5zZXRNZWdhTWVudSh7XG5cdCAgICAgICAgICAgICAgICBzdHlsZTogJ3N0eWxlIDInLFxuXHQgICAgICAgICAgICAgICAgaW1hZ2VBcmVhV2lkdGg6IGNvbnRleHQudGhlbWVTZXR0aW5ncy5tY3N0eWxlMl9pdGVtX2ltZ193aWR0aCxcblx0ICAgICAgICAgICAgICAgIGNhdGVBcmVhV2lkdGg6IGNvbnRleHQudGhlbWVTZXR0aW5ncy5tY3N0eWxlMl9pdGVtX2NvbF93aWR0aCxcblx0ICAgICAgICAgICAgICAgIGNhdGVDb2x1bW5zOiBjb250ZXh0LnRoZW1lU2V0dGluZ3MubWNzdHlsZTJfaXRlbV9jb2wsXG5cdCAgICAgICAgICAgICAgICBjb250ZW50TGVmdDogJzx1bCBjbGFzcz1cIm5hdlBhZ2Utc3ViTWVudS1saW5rcyBuYXZQYWdlLXN1Yk1lbnUtbGlzdFwiPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJuYXZQYWdlLXN1Yk1lbnUtaXRlbS1jaGlsZFwiPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJuYXZQYWdlLXN1Yk1lbnUtYWN0aW9uIG5hdlBhZ2VzLWFjdGlvbiBuYXZQYWdlcy1hY3Rpb24tY3VzdG9tXCIgaHJlZj1cIicrY29udGV4dC50aGVtZVNldHRpbmdzLm1jc3R5bGUyX2l0ZW1fY3VzdG9tX2xpbmsxKydcIj48c3BhbiBjbGFzcz1cInRleHRcIj48c3Bhbj4nK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tY3N0eWxlMl9pdGVtX2N1c3RvbV9saW5rdGV4dDErJzwvc3Bhbj48L3NwYW4+PC9hPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJuYXZQYWdlLXN1Yk1lbnUtaXRlbS1jaGlsZFwiPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJuYXZQYWdlLXN1Yk1lbnUtYWN0aW9uIG5hdlBhZ2VzLWFjdGlvbiBuYXZQYWdlcy1hY3Rpb24tY3VzdG9tXCIgaHJlZj1cIicrY29udGV4dC50aGVtZVNldHRpbmdzLm1jc3R5bGUyX2l0ZW1fY3VzdG9tX2xpbmsyKydcIj48c3BhbiBjbGFzcz1cInRleHRcIj48c3Bhbj4nK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tY3N0eWxlMl9pdGVtX2N1c3RvbV9saW5rdGV4dDIrJzwvc3Bhbj48L3NwYW4+PC9hPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJuYXZQYWdlLXN1Yk1lbnUtaXRlbS1jaGlsZFwiPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJuYXZQYWdlLXN1Yk1lbnUtYWN0aW9uIG5hdlBhZ2VzLWFjdGlvbiBuYXZQYWdlcy1hY3Rpb24tY3VzdG9tXCIgaHJlZj1cIicrY29udGV4dC50aGVtZVNldHRpbmdzLm1jc3R5bGUyX2l0ZW1fY3VzdG9tX2xpbmszKydcIj48c3BhbiBjbGFzcz1cInRleHRcIj48c3Bhbj4nK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tY3N0eWxlMl9pdGVtX2N1c3RvbV9saW5rdGV4dDMrJzwvc3Bhbj48L3NwYW4+PC9hPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJuYXZQYWdlLXN1Yk1lbnUtaXRlbS1jaGlsZFwiPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJuYXZQYWdlLXN1Yk1lbnUtYWN0aW9uIG5hdlBhZ2VzLWFjdGlvbiBuYXZQYWdlcy1hY3Rpb24tY3VzdG9tXCIgaHJlZj1cIicrY29udGV4dC50aGVtZVNldHRpbmdzLm1jc3R5bGUyX2l0ZW1fY3VzdG9tX2xpbms0KydcIj48c3BhbiBjbGFzcz1cInRleHRcIj48c3Bhbj4nK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tY3N0eWxlMl9pdGVtX2N1c3RvbV9saW5rdGV4dDQrJzwvc3Bhbj48L3NwYW4+PC9hPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJuYXZQYWdlLXN1Yk1lbnUtaXRlbS1jaGlsZFwiPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJuYXZQYWdlLXN1Yk1lbnUtYWN0aW9uIG5hdlBhZ2VzLWFjdGlvbiBuYXZQYWdlcy1hY3Rpb24tY3VzdG9tXCIgaHJlZj1cIicrY29udGV4dC50aGVtZVNldHRpbmdzLm1jc3R5bGUyX2l0ZW1fY3VzdG9tX2xpbms1KydcIj48c3BhbiBjbGFzcz1cInRleHRcIj48c3Bhbj4nK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tY3N0eWxlMl9pdGVtX2N1c3RvbV9saW5rdGV4dDUrJzwvc3Bhbj48L3NwYW4+PC9hPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJuYXZQYWdlLXN1Yk1lbnUtaXRlbS1jaGlsZFwiPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJuYXZQYWdlLXN1Yk1lbnUtYWN0aW9uIG5hdlBhZ2VzLWFjdGlvbiBuYXZQYWdlcy1hY3Rpb24tY3VzdG9tIG5hdlBhZ2VzLWFjdGlvbi0tc2FsZVwiIGhyZWY9XCInK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tY3N0eWxlMl9pdGVtX2N1c3RvbV9saW5rNisnXCI+PHNwYW4gY2xhc3M9XCJ0ZXh0XCI+PHNwYW4+Jytjb250ZXh0LnRoZW1lU2V0dGluZ3MubWNzdHlsZTJfaXRlbV9jdXN0b21fbGlua3RleHQ2Kyc8L3NwYW4+PC9zcGFuPjwvYT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPicsXG5cdCAgICAgICAgICAgICAgICBjb250ZW50UmlnaHQ6ICc8ZGl2IGNsYXNzPVwiaXRlbVwiPjxhIGNsYXNzPVwiaW1hZ2VcIiBocmVmPVwiJytjb250ZXh0LnRoZW1lU2V0dGluZ3MubWNzdHlsZTJfaXRlbV9saW5rMysnXCI+XFxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9XCJsYXp5bG9hZFwiIHNyYz1cIicrdXJsSW1nTG9hZCsnXCIgZGF0YS1zcmM9XCInK3VybFN0b3JlSGFzaCtjb250ZXh0LnRoZW1lU2V0dGluZ3MubWNzdHlsZTJfaXRlbV9pbWczKydcIiBhbHQ9XCInK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tY3N0eWxlMl9pdGVtX2ltZzErJ1wiIHRpdGxlPVwiJytjb250ZXh0LnRoZW1lU2V0dGluZ3MubWNzdHlsZTJfaXRlbV9pbWcxKydcIi8+XFxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgPC9hPjwvZGl2PicsXG5cdCAgICAgICAgICAgICAgICBwcm9kdWN0czonPGgzIGNsYXNzPVwibWVnYW1lbnUtdGl0bGVcIj4nK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tY3N0eWxlMl9pdGVtX3Byb2R1Y3RCbG9jaysnPC9oMz5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWVnYW1lbnUtYnJhbmRzXCI+XFxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bD5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWJyYW5kLWxldHRlcj1cImFcIj48YSBocmVmPVwiL2JyYW5kcyNhXCI+PHNwYW4+YTwvc3Bhbj48L2E+PC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWJyYW5kLWxldHRlcj1cImJcIj48YSBocmVmPVwiL2JyYW5kcyNiXCI+PHNwYW4+Yjwvc3Bhbj48L2E+PC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWJyYW5kLWxldHRlcj1cImNcIj48YSBocmVmPVwiL2JyYW5kcyNjXCI+PHNwYW4+Yzwvc3Bhbj48L2E+PC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWJyYW5kLWxldHRlcj1cImRcIj48YSBocmVmPVwiL2JyYW5kcyNkXCI+PHNwYW4+ZDwvc3Bhbj48L2E+PC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWJyYW5kLWxldHRlcj1cImVcIj48YSBocmVmPVwiL2JyYW5kcyNlXCI+PHNwYW4+ZTwvc3Bhbj48L2E+PC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWJyYW5kLWxldHRlcj1cImZcIj48YSBocmVmPVwiL2JyYW5kcyNmXCI+PHNwYW4+Zjwvc3Bhbj48L2E+PC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWJyYW5kLWxldHRlcj1cImdcIj48YSBocmVmPVwiL2JyYW5kcyNnXCI+PHNwYW4+Zzwvc3Bhbj48L2E+PC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWJyYW5kLWxldHRlcj1cImhcIj48YSBocmVmPVwiL2JyYW5kcyNoXCI+PHNwYW4+aDwvc3Bhbj48L2E+PC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWJyYW5kLWxldHRlcj1cImlcIj48YSBocmVmPVwiL2JyYW5kcyNpXCI+PHNwYW4+aTwvc3Bhbj48L2E+PC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWJyYW5kLWxldHRlcj1cImpcIj48YSBocmVmPVwiL2JyYW5kcyNqXCI+PHNwYW4+ajwvc3Bhbj48L2E+PC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWJyYW5kLWxldHRlcj1cImtcIj48YSBocmVmPVwiL2JyYW5kcyNrXCI+PHNwYW4+azwvc3Bhbj48L2E+PC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWJyYW5kLWxldHRlcj1cImxcIj48YSBocmVmPVwiL2JyYW5kcyNsXCI+PHNwYW4+bDwvc3Bhbj48L2E+PC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWJyYW5kLWxldHRlcj1cIm1cIj48YSBocmVmPVwiL2JyYW5kcyNtXCI+PHNwYW4+bTwvc3Bhbj48L2E+PC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWJyYW5kLWxldHRlcj1cIm5cIj48YSBocmVmPVwiL2JyYW5kcyNuXCI+PHNwYW4+bjwvc3Bhbj48L2E+PC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWJyYW5kLWxldHRlcj1cIm9cIj48YSBocmVmPVwiL2JyYW5kcyNvXCI+PHNwYW4+bzwvc3Bhbj48L2E+PC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWJyYW5kLWxldHRlcj1cInBcIj48YSBocmVmPVwiL2JyYW5kcyNwXCI+PHNwYW4+cDwvc3Bhbj48L2E+PC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWJyYW5kLWxldHRlcj1cInFcIj48YSBocmVmPVwiL2JyYW5kcyNxXCI+PHNwYW4+cTwvc3Bhbj48L2E+PC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWJyYW5kLWxldHRlcj1cInJcIj48YSBocmVmPVwiL2JyYW5kcyNyXCI+PHNwYW4+cjwvc3Bhbj48L2E+PC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWJyYW5kLWxldHRlcj1cInNcIj48YSBocmVmPVwiL2JyYW5kcyNzXCI+PHNwYW4+czwvc3Bhbj48L2E+PC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWJyYW5kLWxldHRlcj1cInRcIj48YSBocmVmPVwiL2JyYW5kcyN0XCI+PHNwYW4+dDwvc3Bhbj48L2E+PC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWJyYW5kLWxldHRlcj1cInVcIj48YSBocmVmPVwiL2JyYW5kcyN1XCI+PHNwYW4+dTwvc3Bhbj48L2E+PC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWJyYW5kLWxldHRlcj1cInZcIj48YSBocmVmPVwiL2JyYW5kcyN2XCI+PHNwYW4+djwvc3Bhbj48L2E+PC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWJyYW5kLWxldHRlcj1cIndcIj48YSBocmVmPVwiL2JyYW5kcyN3XCI+PHNwYW4+dzwvc3Bhbj48L2E+PC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWJyYW5kLWxldHRlcj1cInhcIj48YSBocmVmPVwiL2JyYW5kcyN4XCI+PHNwYW4+eDwvc3Bhbj48L2E+PC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWJyYW5kLWxldHRlcj1cInlcIj48YSBocmVmPVwiL2JyYW5kcyN5XCI+PHNwYW4+eTwvc3Bhbj48L2E+PC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWJyYW5kLWxldHRlcj1cInpcIj48YSBocmVmPVwiL2JyYW5kcyN6XCI+PHNwYW4+ejwvc3Bhbj48L2E+PC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLWJyYW5kLWxldHRlcj1cIjBcIj48YSBocmVmPVwiL2JyYW5kcyMwXCI+PHNwYW4+MS05PC9zcGFuPjwvYT48L2xpPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cInZpZXctYWxsXCIgaHJlZj1cIi9icmFuZHNcIj4nK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tY3N0eWxlMl9pdGVtX3Byb2R1Y3RCbG9ja19idG5BbGwrJzwvYT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4nLFxuXHQgICAgICAgICAgICAgICAgaW1hZ2VzOiAnPGRpdiBjbGFzcz1cIml0ZW1cIj48YSBjbGFzcz1cImltYWdlXCIgaHJlZj1cIicrY29udGV4dC50aGVtZVNldHRpbmdzLm1jc3R5bGUyX2l0ZW1fbGluazErJ1wiPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPVwibGF6eWxvYWRcIiBzcmM9XCInK3VybEltZ0xvYWQrJ1wiIGRhdGEtc3JjPVwiJyt1cmxTdG9yZUhhc2grY29udGV4dC50aGVtZVNldHRpbmdzLm1jc3R5bGUyX2l0ZW1faW1nMSsnXCIgYWx0PVwiJytjb250ZXh0LnRoZW1lU2V0dGluZ3MubWNzdHlsZTJfaXRlbV9pbWcxKydcIiB0aXRsZT1cIicrY29udGV4dC50aGVtZVNldHRpbmdzLm1jc3R5bGUyX2l0ZW1faW1nMSsnXCIvPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIDwvYT48L2Rpdj5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaXRlbVwiPjxhIGNsYXNzPVwiaW1hZ2VcIiBocmVmPVwiJytjb250ZXh0LnRoZW1lU2V0dGluZ3MubWNzdHlsZTJfaXRlbV9saW5rMisnXCI+XFxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9XCJsYXp5bG9hZFwiIHNyYz1cIicrdXJsSW1nTG9hZCsnXCIgZGF0YS1zcmM9XCInK3VybFN0b3JlSGFzaCtjb250ZXh0LnRoZW1lU2V0dGluZ3MubWNzdHlsZTJfaXRlbV9pbWcyKydcIiBhbHQ9XCInK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tY3N0eWxlMl9pdGVtX2ltZzIrJ1wiIHRpdGxlPVwiJytjb250ZXh0LnRoZW1lU2V0dGluZ3MubWNzdHlsZTJfaXRlbV9pbWcyKydcIi8+XFxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgPC9hPjwvZGl2Pidcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfSBlbHNlIGlmIChtY3N0eWxlM19pdGVtID09IG51bWJlckl0ZW0pe1xuXHQgICAgICAgICAgICBoYWxvTWVnYU1lbnUubWVudUl0ZW0obWNzdHlsZTNfaXRlbSkuc2V0TWVnYU1lbnUoe1xuXHQgICAgICAgICAgICAgICAgc3R5bGU6ICdzdHlsZSAzJyxcblx0ICAgICAgICAgICAgICAgIGltYWdlQXJlYVdpZHRoOiBjb250ZXh0LnRoZW1lU2V0dGluZ3MubWNzdHlsZTNfaXRlbV9pbWdfd2lkdGgsXG5cdCAgICAgICAgICAgICAgICBjYXRlQXJlYVdpZHRoOiBjb250ZXh0LnRoZW1lU2V0dGluZ3MubWNzdHlsZTNfaXRlbV9jb2xfd2lkdGgsXG5cdCAgICAgICAgICAgICAgICBjYXRlQ29sdW1uczogY29udGV4dC50aGVtZVNldHRpbmdzLm1jc3R5bGUzX2l0ZW1fY29sLFxuXHQgICAgICAgICAgICAgICAgY29udGVudDogJzx1bCBjbGFzcz1cIm5hdlBhZ2Utc3ViTWVudS1saW5rcyBuYXZQYWdlLXN1Yk1lbnUtbGlzdFwiPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJuYXZQYWdlLXN1Yk1lbnUtaXRlbS1jaGlsZFwiPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJuYXZQYWdlLXN1Yk1lbnUtYWN0aW9uIG5hdlBhZ2VzLWFjdGlvbiBuYXZQYWdlcy1hY3Rpb24tY3VzdG9tXCIgaHJlZj1cIicrY29udGV4dC50aGVtZVNldHRpbmdzLm1jc3R5bGUzX2l0ZW1fY3VzdG9tX2xpbmsxKydcIj48c3BhbiBjbGFzcz1cInRleHRcIj48c3Bhbj4nK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tY3N0eWxlM19pdGVtX2N1c3RvbV9saW5rdGV4dDErJzwvc3Bhbj48L3NwYW4+PC9hPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJuYXZQYWdlLXN1Yk1lbnUtaXRlbS1jaGlsZFwiPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJuYXZQYWdlLXN1Yk1lbnUtYWN0aW9uIG5hdlBhZ2VzLWFjdGlvbiBuYXZQYWdlcy1hY3Rpb24tY3VzdG9tXCIgaHJlZj1cIicrY29udGV4dC50aGVtZVNldHRpbmdzLm1jc3R5bGUzX2l0ZW1fY3VzdG9tX2xpbmsyKydcIj48c3BhbiBjbGFzcz1cInRleHRcIj48c3Bhbj4nK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tY3N0eWxlM19pdGVtX2N1c3RvbV9saW5rdGV4dDIrJzwvc3Bhbj48L3NwYW4+PC9hPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJuYXZQYWdlLXN1Yk1lbnUtaXRlbS1jaGlsZFwiPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJuYXZQYWdlLXN1Yk1lbnUtYWN0aW9uIG5hdlBhZ2VzLWFjdGlvbiBuYXZQYWdlcy1hY3Rpb24tY3VzdG9tXCIgaHJlZj1cIicrY29udGV4dC50aGVtZVNldHRpbmdzLm1jc3R5bGUzX2l0ZW1fY3VzdG9tX2xpbmszKydcIj48c3BhbiBjbGFzcz1cInRleHRcIj48c3Bhbj4nK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tY3N0eWxlM19pdGVtX2N1c3RvbV9saW5rdGV4dDMrJzwvc3Bhbj48L3NwYW4+PC9hPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJuYXZQYWdlLXN1Yk1lbnUtaXRlbS1jaGlsZFwiPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJuYXZQYWdlLXN1Yk1lbnUtYWN0aW9uIG5hdlBhZ2VzLWFjdGlvbiBuYXZQYWdlcy1hY3Rpb24tY3VzdG9tXCIgaHJlZj1cIicrY29udGV4dC50aGVtZVNldHRpbmdzLm1jc3R5bGUzX2l0ZW1fY3VzdG9tX2xpbms0KydcIj48c3BhbiBjbGFzcz1cInRleHRcIj48c3Bhbj4nK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tY3N0eWxlM19pdGVtX2N1c3RvbV9saW5rdGV4dDQrJzwvc3Bhbj48L3NwYW4+PC9hPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJuYXZQYWdlLXN1Yk1lbnUtaXRlbS1jaGlsZFwiPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJuYXZQYWdlLXN1Yk1lbnUtYWN0aW9uIG5hdlBhZ2VzLWFjdGlvbiBuYXZQYWdlcy1hY3Rpb24tY3VzdG9tXCIgaHJlZj1cIicrY29udGV4dC50aGVtZVNldHRpbmdzLm1jc3R5bGUzX2l0ZW1fY3VzdG9tX2xpbms1KydcIj48c3BhbiBjbGFzcz1cInRleHRcIj48c3Bhbj4nK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tY3N0eWxlM19pdGVtX2N1c3RvbV9saW5rdGV4dDUrJzwvc3Bhbj48L3NwYW4+PC9hPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJuYXZQYWdlLXN1Yk1lbnUtaXRlbS1jaGlsZFwiPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJuYXZQYWdlLXN1Yk1lbnUtYWN0aW9uIG5hdlBhZ2VzLWFjdGlvbiBuYXZQYWdlcy1hY3Rpb24tY3VzdG9tIG5hdlBhZ2VzLWFjdGlvbi0tc2FsZVwiIGhyZWY9XCInK2NvbnRleHQudGhlbWVTZXR0aW5ncy5tY3N0eWxlM19pdGVtX2N1c3RvbV9saW5rNisnXCI+PHNwYW4gY2xhc3M9XCJ0ZXh0XCI+PHNwYW4+Jytjb250ZXh0LnRoZW1lU2V0dGluZ3MubWNzdHlsZTNfaXRlbV9jdXN0b21fbGlua3RleHQ2Kyc8L3NwYW4+PC9zcGFuPjwvYT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPicsXG5cdCAgICAgICAgICAgICAgICBpbWFnZXM6ICc8YSBjbGFzcz1cImltYWdlXCIgaHJlZj1cIicrY29udGV4dC50aGVtZVNldHRpbmdzLm1jc3R5bGUzX2l0ZW1fbGluazErJ1wiPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPVwibGF6eWxvYWRcIiBzcmM9XCInK3VybEltZ0xvYWQrJ1wiIGRhdGEtc3JjPVwiJyt1cmxTdG9yZUhhc2grY29udGV4dC50aGVtZVNldHRpbmdzLm1jc3R5bGUzX2l0ZW1faW1nMSsnXCIgYWx0PVwiJytjb250ZXh0LnRoZW1lU2V0dGluZ3MubWNzdHlsZTNfaXRlbV9pbWcxKydcIiB0aXRsZT1cIicrY29udGV4dC50aGVtZVNldHRpbmdzLm1jc3R5bGUzX2l0ZW1faW1nMSsnXCIvPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cXFxuXHQgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cImltYWdlXCIgaHJlZj1cIicrY29udGV4dC50aGVtZVNldHRpbmdzLm1jc3R5bGUzX2l0ZW1fbGluazIrJ1wiPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPVwibGF6eWxvYWRcIiBzcmM9XCInK3VybEltZ0xvYWQrJ1wiIGRhdGEtc3JjPVwiJyt1cmxTdG9yZUhhc2grY29udGV4dC50aGVtZVNldHRpbmdzLm1jc3R5bGUzX2l0ZW1faW1nMisnXCIgYWx0PVwiJytjb250ZXh0LnRoZW1lU2V0dGluZ3MubWNzdHlsZTNfaXRlbV9pbWcyKydcIiB0aXRsZT1cIicrY29udGV4dC50aGVtZVNldHRpbmdzLm1jc3R5bGUzX2l0ZW1faW1nMisnXCIvPlxcXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4nLFxuXHQgICAgICAgICAgICAgICAgYm90dG9tQ2F0ZXM6ICc8ZGl2IGNsYXNzPVwibWVnYW1lbnUtY3VzdG9tLWxpc3RcIj48ZGl2IGNsYXNzPVwibWVnYW1lbnUtYm90dG9tXCI+PHNwYW4gY2xhc3M9XCJ0ZXh0XCI+PHNwYW4+Jytjb250ZXh0LnRoZW1lU2V0dGluZ3MubWNzdHlsZTNfaXRlbV9ib3R0b21DYXRlcysnPC9zcGFuPjwvc3Bhbj48L2Rpdj48L2Rpdj4nXG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblxuXHQgICAgZnVuY3Rpb24gTWVnYU1lbnVMYWJlbCgpe1xuXHQgICAgICAgIGlmIChjb250ZXh0LnRoZW1lU2V0dGluZ3MubWVnYV9tZW51X2N1c3RvbV9uZXdfbGFiZWwgJiYgY29udGV4dC50aGVtZVNldHRpbmdzLm1lZ2FfbWVudV9jdXN0b21fbmV3X2xhYmVsX3RleHQpIHtcblx0ICAgICAgICAgICAgaGFsb01lZ2FNZW51Lm1lbnVJdGVtKGNvbnRleHQudGhlbWVTZXR0aW5ncy5tZWdhX21lbnVfY3VzdG9tX25ld19sYWJlbCkuc2V0TWVnYU1lbnUoe1xuXHQgICAgICAgICAgICAgICAgbGFiZWw6IGNvbnRleHQudGhlbWVTZXR0aW5ncy5tZWdhX21lbnVfY3VzdG9tX25ld19sYWJlbF90ZXh0LFxuXHQgICAgICAgICAgICAgICAgbGFiZWxUeXBlOiBcIm5ld1wiLFxuXHQgICAgICAgICAgICAgICAgZGlzYWJsZWQ6IHRydWVcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaWYgKGNvbnRleHQudGhlbWVTZXR0aW5ncy5tZWdhX21lbnVfY3VzdG9tX2hvdF9sYWJlbCAmJiBjb250ZXh0LnRoZW1lU2V0dGluZ3MubWVnYV9tZW51X2N1c3RvbV9ob3RfbGFiZWxfdGV4dCkge1xuXHQgICAgICAgICAgICBoYWxvTWVnYU1lbnUubWVudUl0ZW0oY29udGV4dC50aGVtZVNldHRpbmdzLm1lZ2FfbWVudV9jdXN0b21faG90X2xhYmVsKS5zZXRNZWdhTWVudSh7XG5cdCAgICAgICAgICAgICAgICBsYWJlbDogY29udGV4dC50aGVtZVNldHRpbmdzLm1lZ2FfbWVudV9jdXN0b21faG90X2xhYmVsX3RleHQsXG5cdCAgICAgICAgICAgICAgICBsYWJlbFR5cGU6IFwiaG90XCIsXG5cdCAgICAgICAgICAgICAgICBkaXNhYmxlZDogdHJ1ZVxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBpZiAoY29udGV4dC50aGVtZVNldHRpbmdzLm1lZ2FfbWVudV9jdXN0b21fc2FsZV9sYWJlbCAmJiBjb250ZXh0LnRoZW1lU2V0dGluZ3MubWVnYV9tZW51X2N1c3RvbV9zYWxlX2xhYmVsX3RleHQpIHtcblx0ICAgICAgICAgICAgaGFsb01lZ2FNZW51Lm1lbnVJdGVtKGNvbnRleHQudGhlbWVTZXR0aW5ncy5tZWdhX21lbnVfY3VzdG9tX3NhbGVfbGFiZWwpLnNldE1lZ2FNZW51KHtcblx0ICAgICAgICAgICAgICAgIGxhYmVsOiBjb250ZXh0LnRoZW1lU2V0dGluZ3MubWVnYV9tZW51X2N1c3RvbV9zYWxlX2xhYmVsX3RleHQsXG5cdCAgICAgICAgICAgICAgICBsYWJlbFR5cGU6IFwic2FsZVwiLFxuXHQgICAgICAgICAgICAgICAgZGlzYWJsZWQ6IHRydWVcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXG5cdCAgICBNZWdhTWVudUxhYmVsKCk7XG5cblx0ICAgIHZhciBzZXRJdGVtTWVnYU1lbnUgPSBTZXRJdGVtTWVnYU1lbnUoKTtcblxuXHQgICAgd2luZG93Lm9ubG9hZCA9IHNldEl0ZW1NZWdhTWVudTtcblx0fVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICBmdW5jdGlvbiBzZXRDb29raWUoY25hbWUsIGN2YWx1ZSwgZXhkYXlzKSB7XG4gICAgICAgIGNvbnN0IGQgPSBuZXcgRGF0ZSgpO1xuICAgICAgICBkLnNldFRpbWUoZC5nZXRUaW1lKCkgKyAoZXhkYXlzICogMjQgKiA2MCAqIDYwICogMTAwMCkpO1xuICAgICAgICBjb25zdCBleHBpcmVzID0gJ2V4cGlyZXM9JyArIGQudG9VVENTdHJpbmcoKTtcbiAgICAgICAgZG9jdW1lbnQuY29va2llID0gY25hbWUgKyAnPScgKyBjdmFsdWUgKyAnOycgKyBleHBpcmVzICsgJztwYXRoPS8nO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldENvb2tpZShjbmFtZSkge1xuICAgICAgICBjb25zdCBuYW1lID0gY25hbWUgKyAnPSc7XG4gICAgICAgIGNvbnN0IGNhID0gZG9jdW1lbnQuY29va2llLnNwbGl0KCc7Jyk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGMgPSBjYVtpXTtcbiAgICAgICAgICAgIHdoaWxlIChjLmNoYXJBdCgwKSA9PT0gJyAnKSB7XG4gICAgICAgICAgICAgICAgYyA9IGMuc3Vic3RyaW5nKDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGMuaW5kZXhPZihuYW1lKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjLnN1YnN0cmluZyhuYW1lLmxlbmd0aCwgYy5sZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRDbG9zZVBvcHVwKGV4cGlyZXNEYXRlKSB7XG4gICAgICAgIHNldENvb2tpZSgnaGFsb05ld3NsZXR0ZXJQb3B1cCcsICdjbG9zZWQnLCBleHBpcmVzRGF0ZSk7XG4gICAgICAgICQoJyNoYWxvLW5ld3NsZXR0ZXItcG9wdXAnKS5yZW1vdmVDbGFzcygnZmFkZUluJykuYWRkQ2xhc3MoJ2FuaW1hdGVkIGZhZGVPdXQnKTtcbiAgICAgIFxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJCgnI2hhbG8tbmV3c2xldHRlci1wb3B1cCcpLmFkZENsYXNzKCdoaWRlJyk7XG4gICAgICAgICAgICAkKCdib2R5JykucmVtb3ZlQ2xhc3MoJ2hhcy1uZXdzbGV0dGVyJyk7XG4gICAgICAgIH0sIDUwMCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0T3BlblBvcHVwKCkge1xuICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoJ2hhcy1uZXdzbGV0dGVyJyk7XG4gICAgICAgICQoJyNoYWxvLW5ld3NsZXR0ZXItcG9wdXAnKS5yZW1vdmVDbGFzcygnaGlkZScpLmFkZENsYXNzKCdhbmltYXRlZCBmYWRlSW4nKTtcbiAgICB9XG5cbiAgICBjb25zdCBkZWxldGVDb29raWUgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IG5hbWUgKyAnPTtleHBpcmVzPVRodSwgMDEgSmFuIDE5NzAgMDA6MDA6MDEgR01UOyc7XG4gICAgfTtcblxuICAgIGlmKGNvbnRleHQudGhlbWVTZXR0aW5ncy5oYWxvX25ld3NsZXR0ZXJfcG9wdXAgPT0gdHJ1ZSl7XG4gICAgICAgIHZhciB0aW1lVG9TaG93ID0gcGFyc2VJbnQoY29udGV4dC50aGVtZVNldHRpbmdzLmhhbG9fbmV3c2xldHRlcl9wb3B1cF90aW1lKSoxMDAwLFxuICAgICAgICAgICAgZXhwaXJlc0RhdGUgPSBwYXJzZUludChjb250ZXh0LnRoZW1lU2V0dGluZ3MuaGFsb19uZXdzbGV0dGVyX3BvcHVwX2V4cGlyZXNfZGF0ZSk7XG5cbiAgICAgICAgJChkb2N1bWVudCkub24oJ2NsaWNrJywgJ1tkYXRhLW9wZW4tbmV3c2xldHRlci1wb3B1cF0nLCBldmVudCA9PiB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICBzZXRPcGVuUG9wdXAoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJChkb2N1bWVudCkub24oJ2NsaWNrJywgJ1tkYXRhLWNsb3NlLW5ld3NsZXR0ZXItcG9wdXBdJywgZXZlbnQgPT4ge1xuICAgICAgICAgICAgc2V0Q2xvc2VQb3B1cChleHBpcmVzRGF0ZSk7XG4gICAgICAgIH0pO1xuICAgICBcbiAgICAgICAgJChkb2N1bWVudCkub24oJ2NsaWNrJywgJyNoYWxvLW5ld3NsZXR0ZXItcG9wdXAnLCBldmVudCA9PiB7XG4gICAgICAgICAgICBpZiAoJChldmVudC50YXJnZXQpLmNsb3Nlc3QoJy5uZXdzbGV0dGVyLXBvcHVwLWlubmVyJykubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgc2V0Q2xvc2VQb3B1cChleHBpcmVzRGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgICQoZG9jdW1lbnQpLm9uKCdjaGFuZ2UnLCAnI2hhbG8tbmV3c2xldHRlci1wb3B1cCAjZG8tbm90LXNob3ctYWdhaW4nLCBldmVudCA9PiB7XG4gICAgICAgICAgICBpZigkKFwiI2hhbG8tbmV3c2xldHRlci1wb3B1cCAjZG8tbm90LXNob3ctYWdhaW46Y2hlY2tlZFwiKS5sZW5ndGgpe1xuICAgICAgICAgICAgICAgIHNldENsb3NlUG9wdXAoZXhwaXJlc0RhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAkKGRvY3VtZW50KS5rZXl1cChldmVudCA9PiB7XG4gICAgICAgICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gMjcpIHtcbiAgICAgICAgICAgICAgICBzZXRDbG9zZVBvcHVwKGV4cGlyZXNEYXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGdldENvb2tpZSgnaGFsb05ld3NsZXR0ZXJQb3B1cCcpID09PSAnJyl7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICQoJyNoYWxvLW5ld3NsZXR0ZXItcG9wdXAnKS5yZW1vdmVDbGFzcygnaGlkZScpLmFkZENsYXNzKCdhbmltYXRlZCBmYWRlSW4nKTtcbiAgICAgICAgICAgICAgICAkKCdib2R5JykuYWRkQ2xhc3MoJ2hhcy1uZXdzbGV0dGVyJyk7XG4gICAgICAgICAgICB9LCB0aW1lVG9TaG93KTtcblxuICAgICAgICAgICAgJCgnI3BvcHVwU3ViY3JpYmVGb3JtU3VibWl0Jykuc3VibWl0KGV2ZW50ID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoJCgnI3BvcHVwU3ViY3JpYmVGb3JtU3VibWl0JykuZmluZCgnI25sX2VtYWlsMicpLnZhbCgpID09PSAnJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0Q29va2llKCdoYWxvTmV3c2xldHRlclBvcHVwJywgJ2Nsb3NlZCcsIGV4cGlyZXNEYXRlKTtcblxuICAgICAgICAgICAgICAgICAgICAkKCcjaGFsby1uZXdzbGV0dGVyLXBvcHVwJykucmVtb3ZlQ2xhc3MoJ2ZhZGVJbicpLmFkZENsYXNzKCdhbmltYXRlZCBmYWRlT3V0Jyk7XG5cbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNoYWxvLW5ld3NsZXR0ZXItcG9wdXAnKS5hZGRDbGFzcygnaGlkZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJCgnYm9keScpLnJlbW92ZUNsYXNzKCdoYXMtbmV3c2xldHRlcicpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfSwgNTAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0gZWxzZXtcbiAgICAgICAgZGVsZXRlQ29va2llKCdoYWxvTmV3c2xldHRlclBvcHVwJyk7XG4gICAgfVxufVxuIiwiaW1wb3J0IG5vZCBmcm9tICcuLi9jb21tb24vbm9kJztcbmltcG9ydCBmb3JtcyBmcm9tICcuLi9jb21tb24vbW9kZWxzL2Zvcm1zJztcbmltcG9ydCB7IFZhbGlkYXRvcnMgfSBmcm9tICcuLi9jb21tb24vdXRpbHMvZm9ybS11dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCRzY29wZSwgY29udGV4dCl7XG4gICAgY29uc3QgJG5vdGlmeSA9ICRzY29wZS5maW5kKCcucHJvZHVjdFZpZXctbm90aWZ5TWUnKSxcbiAgICAgICAgJG5vdGlmeUZvcm0gPSAkc2NvcGUuZmluZCgnLnByb2R1Y3RWaWV3LW5vdGlmeU1lLWZvcm0nKSxcbiAgICAgICAgJG5vdGlmeUJ0biA9ICRub3RpZnlGb3JtLmZpbmQoJy5idXR0b24nKSxcbiAgICAgICAgJG5vdGlmeUNoZWNrID0gJG5vdGlmeUZvcm0uZmluZCgnaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdJyksXG4gICAgICAgICRub3RpZnlUZXh0ID0gJHNjb3BlLmZpbmQoJy5wcm9kdWN0Vmlldy1ub3RpZnlNZS10ZXh0Jyk7XG5cbiAgICByZWdpc3Rlck5vdGlmeU1lVmFsaWRhdGlvbigkbm90aWZ5Rm9ybSk7XG5cbiAgICBmdW5jdGlvbiByZWdpc3Rlck5vdGlmeU1lVmFsaWRhdGlvbigkbm90aWZ5Rm9ybSkge1xuICAgICAgICBjb25zdCBub3RpZnlNb2RlbCA9IGZvcm1zO1xuICAgICAgICBjb25zdCBub3RpZnlWYWxpZGF0b3IgPSBub2Qoe1xuICAgICAgICAgICAgc3VibWl0OiAkbm90aWZ5Rm9ybS5maW5kKCcuYnV0dG9uJyksXG4gICAgICAgIH0pO1xuXG4gICAgICAgIG5vdGlmeVZhbGlkYXRvci5hZGQoW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAkbm90aWZ5Rm9ybS5maW5kKCdpbnB1dFtuYW1lPVwiZW1haWxcIl0nKSxcbiAgICAgICAgICAgICAgICB2YWxpZGF0ZTogKGNiLCB2YWwpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gbm90aWZ5TW9kZWwuZW1haWwodmFsKTtcbiAgICAgICAgICAgICAgICAgICAgY2IocmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZTogJ1BsZWFzZSB1c2UgYSB2YWxpZCBlbWFpbCBhZGRyZXNzLCBzdWNoIGFzIGpvaG5AZXhhbXBsZS5jb20uJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0pO1xuXG4gICAgICAgICRub3RpZnlCdG4ub24oJ2NsaWNrJywgZXZlbnQgPT4ge1xuICAgICAgICAgICAgbm90aWZ5VmFsaWRhdG9yLnBlcmZvcm1DaGVjaygpO1xuICAgICAgICAgICAgaWYgKG5vdGlmeVZhbGlkYXRvci5hcmVBbGwoJ3ZhbGlkJykpe1xuICAgICAgICAgICAgICAgIHNlbmRNYWlsKCRub3RpZnlGb3JtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2VuZE1haWwoJG5vdGlmeUZvcm0pe1xuICAgICAgICB2YXIgZW1haWwgPSAkbm90aWZ5Rm9ybS5maW5kKCdpbnB1dFtuYW1lPVwiZW1haWxcIl0nKS52YWwoKSxcbiAgICAgICAgICAgIHNpdGUgPSAnJyxcbiAgICAgICAgICAgIGxvZ28gPSAnJyxcbiAgICAgICAgICAgIHN1YmplY3RNYWlsID0gY29udGV4dC50aGVtZVNldHRpbmdzLmhhbG9fbm90aWZ5X21lX3N1YmplY3QsXG4gICAgICAgICAgICBtYWlsVG8gPSBjb250ZXh0LnRoZW1lU2V0dGluZ3MuaGFsb19ub3RpZnlfbWVfbWFpbHRvLFxuICAgICAgICAgICAgcHJvZHVjdE5hbWUgPSAkbm90aWZ5LmRhdGEoJ3Byb2R1Y3QtdGl0bGUnKSxcbiAgICAgICAgICAgIHByb2R1Y3RVcmwgPSAkbm90aWZ5LmRhdGEoJ3Byb2R1Y3QtdXJsJyksXG4gICAgICAgICAgICBwcm9kdWN0VmFyaWFudCA9ICRub3RpZnkuYXR0cignZGF0YS1wcm9kdWN0LXZhcmlhbnQnKTtcblxuICAgICAgICBpZigkKFwiLmhlYWRlci1sb2dvXCIpLmZpbmQoXCJpbWdcIikubGVuZ3RoID4gMCl7XG4gICAgICAgICAgICBzaXRlID0gJChcIi5oZWFkZXItbG9nb1wiKS5maW5kKFwiaW1nXCIpLmF0dHIoXCJ0aXRsZVwiKTtcbiAgICAgICAgICAgIGxvZ28gPSAkKFwiLmhlYWRlci1sb2dvXCIpLmh0bWwoKSArICc8YnI+PGJyPic7XG4gICAgICAgIH0gZWxzZXtcbiAgICAgICAgICAgIHNpdGUgPSAkKFwiLmhlYWRlci1sb2dvXCIpLnRleHQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjb250ZW50ID0gJzxkaXYgc3R5bGU9XCJtYXJnaW46MzBweCBhdXRvO3dpZHRoOjY1MHB4O2JvcmRlcjoxMHB4IHNvbGlkICNmN2Y3ZjdcIj48ZGl2IHN0eWxlPVwiYm9yZGVyOjFweCBzb2xpZCAjZGVkZWRlXCI+XFxcbiAgICAgICAgICAgICAgICAgICAgPGgyIHN0eWxlPVwibWFyZ2luOiAwOyBwYWRkaW5nOjIwcHggMjBweCAyMHB4O2JhY2tncm91bmQ6I2Y3ZjdmNztjb2xvcjojNTU1O2ZvbnQtc2l6ZToyZW07dGV4dC1hbGlnbjpjZW50ZXI7XCI+Jytsb2dvK3N1YmplY3RNYWlsKyc8L2gyPic7XG5cbiAgICAgICAgaWYocHJvZHVjdFZhcmlhbnQgIT09IHVuZGVmaW5lZCAmJiBwcm9kdWN0VmFyaWFudCAhPT0gbnVsbCAmJiBwcm9kdWN0VmFyaWFudCAhPT0gJycpe1xuICAgICAgICAgICAgY29udGVudCArPSAnPHRhYmxlIHN0eWxlPVwibWFyZ2luOjBweCAwIDA7cGFkZGluZzozMHB4IDMwcHggMzBweDtsaW5lLWhlaWdodDoxLjdlbVwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgPHRyPjx0ZCBzdHlsZT1cInBhZGRpbmc6IDVweCAyNXB4IDVweCAwO1wiPjxzdHJvbmc+UHJvZHVjdCBOYW1lOjwvc3Ryb25nPiAnICsgcHJvZHVjdE5hbWUgKyAnPC90ZD48L3RyPlxcXG4gICAgICAgICAgICAgICAgICAgICAgPHRyPjx0ZCBzdHlsZT1cInBhZGRpbmc6IDVweCAyNXB4IDVweCAwO1wiPjxzdHJvbmc+UHJvZHVjdCBVUkw6PC9zdHJvbmc+ICcgKyBwcm9kdWN0VXJsICsgJzwvdGQ+PC90cj5cXFxuICAgICAgICAgICAgICAgICAgICAgIDx0cj48dGQgc3R5bGU9XCJwYWRkaW5nOiA1cHggMjVweCA1cHggMDtcIj48c3Ryb25nPlByb2R1Y3QgVmFyaWFudHM6PC9zdHJvbmc+ICcgKyBwcm9kdWN0VmFyaWFudCArICc8L3RkPjwvdHI+XFxcbiAgICAgICAgICAgICAgICAgICAgICA8dHI+PHRkIHN0eWxlPVwicGFkZGluZzogNXB4IDI1cHggNXB4IDA7XCI+PHN0cm9uZz5FbWFpbCBSZXF1ZXN0Ojwvc3Ryb25nPiAnICsgZW1haWwgKyAnPC90ZD48L3RyPlxcXG4gICAgICAgICAgICAgICAgICAgPC90YWJsZT4nO1xuICAgICAgICB9IGVsc2V7XG4gICAgICAgICAgICBjb250ZW50ICs9ICc8dGFibGUgc3R5bGU9XCJtYXJnaW46MHB4IDAgMDtwYWRkaW5nOjMwcHggMzBweCAzMHB4O2xpbmUtaGVpZ2h0OjEuN2VtXCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICA8dHI+PHRkIHN0eWxlPVwicGFkZGluZzogNXB4IDI1cHggNXB4IDA7XCI+PHN0cm9uZz5Qcm9kdWN0IE5hbWU6PC9zdHJvbmc+ICcgKyBwcm9kdWN0TmFtZSArICc8L3RkPjwvdHI+XFxcbiAgICAgICAgICAgICAgICAgICAgICA8dHI+PHRkIHN0eWxlPVwicGFkZGluZzogNXB4IDI1cHggNXB4IDA7XCI+PHN0cm9uZz5Qcm9kdWN0IFVSTDo8L3N0cm9uZz4gJyArIHByb2R1Y3RVcmwgKyAnPC90ZD48L3RyPlxcXG4gICAgICAgICAgICAgICAgICAgICAgPHRyPjx0ZCBzdHlsZT1cInBhZGRpbmc6IDVweCAyNXB4IDVweCAwO1wiPjxzdHJvbmc+RW1haWwgUmVxdWVzdDo8L3N0cm9uZz4gJyArIGVtYWlsICsgJzwvdGQ+PC90cj5cXFxuICAgICAgICAgICAgICAgICAgIDwvdGFibGU+JztcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRlbnQgKz0gJzxhIGhyZWY9XCInKyB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUgKydcIiBzdHlsZT1cImRpc3BsYXk6YmxvY2s7cGFkZGluZzozMHB4IDA7YmFja2dyb3VuZDojNDg0ODQ4O2NvbG9yOiNmZmY7dGV4dC1kZWNvcmF0aW9uOm5vbmU7dGV4dC1hbGlnbjpjZW50ZXJcIj4mbmJzcDsnK3NpdGUrJyZuYnNwOzwvYT4nO1xuICAgICAgICBjb250ZW50ICs9ICc8L2Rpdj48L2Rpdj4nO1xuXG4gICAgICAgIHZhciBub3RpZnlfcG9zdF9kYXRhID0ge1xuICAgICAgICAgICAgJ2FwaSc6ICdpX3NlbmRfbWFpbCcsXG4gICAgICAgICAgICAnc3ViamVjdCc6IHN1YmplY3RNYWlsLFxuICAgICAgICAgICAgJ2VtYWlsJzogbWFpbFRvLFxuICAgICAgICAgICAgJ2Zyb21fbmFtZSc6ICdCaWdDb21tZXJjZScsXG4gICAgICAgICAgICAnZW1haWxfZnJvbSc6IGVtYWlsLFxuICAgICAgICAgICAgJ21lc3NhZ2UnOiBjb250ZW50XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIG91dHB1dCA9ICcnO1xuXG4gICAgICAgICQucG9zdCgnaHR0cHM6Ly90aGVtZXZhbGUubmV0L3Rvb2xzL3NlbmRtYWlsL3F1b3RlY2FydC9zZW5kbWFpbC5waHAnLCBub3RpZnlfcG9zdF9kYXRhLCAocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS50eXBlID09ICdlcnJvcicpIHtcbiAgICAgICAgICAgICAgIG91dHB1dCA9ICc8ZGl2IGNsYXNzPVwiYWxlcnRCb3ggYWxlcnRCb3gtLWVycm9yXCI+PHAgY2xhc3M9XCJhbGVydEJveC1jb2x1bW4gYWxlcnRCb3gtbWVzc2FnZVwiPicgKyByZXNwb25zZS50ZXh0ICsgJzwvcD48L2Rpdj4nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgIG91dHB1dCA9ICc8ZGl2IGNsYXNzPVwiYWxlcnRCb3ggYWxlcnRCb3gtLXN1Y2Nlc3NcIj48cCBjbGFzcz1cImFsZXJ0Qm94LWNvbHVtbiBhbGVydEJveC1tZXNzYWdlXCI+VGhhbmsgeW91LiBXZVxcJ3ZlIHJlY2VpdmVkIHlvdXIgcmVxdWVzdCBhbmQgd2lsbCByZXNwb25kIHNob3J0bHkuPC9wPjwvZGl2Pic7XG4gICAgICAgICAgICAgICByZXNldEZvcm0oJG5vdGlmeUZvcm0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAkbm90aWZ5VGV4dC5odG1sKG91dHB1dCkuc2hvdygpO1xuICAgICAgICB9LCAnanNvbicpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlc2V0Rm9ybSgkbm90aWZ5Rm9ybSl7XG4gICAgICAgICQoJy5mb3JtLWZpZWxkJywgJG5vdGlmeUZvcm0pLnJlbW92ZUNsYXNzKCdmb3JtLWZpZWxkLS1zdWNjZXNzIGZvcm0tZmllbGQtLWVycm9yJyk7XG4gICAgICAgICQoJy5mb3JtLWlubGluZU1lc3NhZ2UnLCAkbm90aWZ5Rm9ybSkuaGlkZSgpLmh0bWwoJycpO1xuICAgICAgICAkKCdpbnB1dFt0eXBlPWVtYWlsXScsICRub3RpZnlGb3JtKS52YWwoJycpO1xuICAgIH1cbn1cbiIsImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgdXRpbHMgZnJvbSAnQGJpZ2NvbW1lcmNlL3N0ZW5jaWwtdXRpbHMnO1xuaW1wb3J0IHsgZGVmYXVsdE1vZGFsLCBzaG93QWxlcnRNb2RhbCB9IGZyb20gJy4uL2dsb2JhbC9tb2RhbCc7XG5pbXBvcnQgc3dhbCBmcm9tICcuLi9nbG9iYWwvc3dlZXQtYWxlcnQnO1xuaW1wb3J0IFNoaXBwaW5nRXN0aW1hdG9yIGZyb20gJy4uL2NhcnQvc2hpcHBpbmctZXN0aW1hdG9yJztcbmltcG9ydCBnaWZ0Q2VydENoZWNrIGZyb20gJy4uL2NvbW1vbi9naWZ0LWNlcnRpZmljYXRlLXZhbGlkYXRvcic7XG5pbXBvcnQgaGFsb0NhbGN1bGF0ZUZyZWVTaGlwcGluZyBmcm9tICcuL2hhbG9DYWxjdWxhdGVGcmVlU2hpcHBpbmcnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoY29udGV4dCkge1xuXHR2YXIgJGNhcnRDb250ZW50ID0gJCgnW2RhdGEtY2FydC1jb250ZW50XScpLFxuXHRcdCRjYXJ0TWVzc2FnZXMgPSAkKCdbZGF0YS1jYXJ0LXN0YXR1c10nKSxcbiAgICBcdCRjYXJ0VG90YWxzID0gJCgnW2RhdGEtY2FydC10b3RhbHNdJyksXG4gICAgXHQkb3ZlcmxheSA9ICQoJ1tkYXRhLWNhcnRdIC5sb2FkaW5nT3ZlcmxheScpO1xuXG5cdGlmKGNvbnRleHQudGhlbWVTZXR0aW5ncy5oYWxvX1F1aWNrRWRpdENhcnQgPT0gdHJ1ZSl7XG5cdFx0JChkb2N1bWVudCkub24oJ2NsaWNrJywgJ1tkYXRhLWNhcnQtZWRpdC1pZF0nLCBldmVudCA9PiB7XG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XG5cdFx0XHRjb25zdCAkdGFyZ2V0ID0gJChldmVudC5jdXJyZW50VGFyZ2V0KSxcblx0XHRcdFx0cHJvZHVjdElkID0gJHRhcmdldC5kYXRhKCdjYXJ0LWVkaXQtaWQnKSxcblx0ICAgICAgICAgICAgaXRlbUlkID0gJHRhcmdldC5kYXRhKCdjYXJ0SXRlbWlkJyksXG5cdCAgICAgICAgICAgICRxdHkgPSAkdGFyZ2V0LmRhdGEoJ2NhcnQtZWRpdC1xdWFudGl0eScpO1xuXG5cdCAgICAgICAgY29uc3QgbW9kYWwgPSBkZWZhdWx0TW9kYWwoKSxcblx0ICAgICAgICBcdG9wdGlvbnMgPSB7XG5cdFx0ICAgICAgICAgICAgdGVtcGxhdGU6ICdjYXJ0L21vZGFscy9jb25maWd1cmUtcHJvZHVjdC0yJyxcblx0XHQgICAgICAgIH0sXG5cdFx0ICAgICAgICBvcHRpb25zMiA9IHtcblx0XHQgICAgICAgICAgICB0ZW1wbGF0ZTogJ2NhcnQvbW9kYWxzL2NvbmZpZ3VyZS1wcm9kdWN0LTMnLFxuXHRcdCAgICAgICAgfTtcblxuXHRcdCAgICBtb2RhbC4kbW9kYWwucmVtb3ZlQ2xhc3MoKS5hZGRDbGFzcygnbW9kYWwgbW9kYWwtLWVkaXRPcHRpb25zJyk7XG5cdCAgICAgICAgbW9kYWwub3Blbih7IHNpemU6ICdtZWRpdW0nIH0pO1xuXHQgICAgICAgIG1vZGFsLiRtb2RhbC5maW5kKCc+IC5tb2RhbC1jbG9zZScpLnJlbW92ZSgpO1xuXG5cdCAgICAgICAgdXRpbHMuYXBpLnByb2R1Y3RBdHRyaWJ1dGVzLmNvbmZpZ3VyZUluQ2FydChpdGVtSWQsIG9wdGlvbnMyLCAoZXJyMiwgcmVzcG9uc2UyKSA9PiB7XG5cdCAgICAgICAgICAgIHV0aWxzLmFwaS5wcm9kdWN0LmdldEJ5SWQocHJvZHVjdElkLCBvcHRpb25zLCAoZXJyLCByZXNwb25zZSkgPT4ge1xuXHQgICAgICAgICAgICAgICAgbW9kYWwudXBkYXRlQ29udGVudChyZXNwb25zZSk7XG5cblx0ICAgICAgICAgICAgICAgIGNvbnN0ICRmaXJzdEl0ZW0gPSBtb2RhbC4kY29udGVudC5maW5kKCcucHJvZHVjdC1lZGl0LWl0ZW1GaXJzdCcpLFxuXHQgICAgICAgICAgICAgICAgXHQkZm9ybSA9ICRmaXJzdEl0ZW0uZmluZCgnLmZvcm0nKSxcblx0ICAgICAgICAgICAgICAgIFx0JGZvcm1RdHkgPSAkZmlyc3RJdGVtLmZpbmQoJy5wcm9kdWN0LWVkaXQtaW5jcmVtZW50Jyk7XG5cblx0ICAgICAgICAgICAgICAgICRmaXJzdEl0ZW0uYXR0cignZGF0YS1wcm9kdWN0LWVkaXQtaXRlbS1pZCcsIGl0ZW1JZCk7XG5cdCAgICAgICAgICAgICAgICAkZm9ybS5maW5kKCcucHJvZHVjdC1lZGl0LW9wdGlvbicpLnByZXBlbmQocmVzcG9uc2UyLmNvbnRlbnQpO1xuXHQgICAgICAgICAgICAgICAgJGZvcm0uZmluZCgnW25hbWU9cXR5XFxcXFtcXFxcXV0nKS5hdHRyKCd2YWx1ZScsICRxdHkpO1xuXHQgICAgICAgICAgICAgICAgJGZvcm1RdHkuZmluZCgnLmZvcm0taW5wdXQnKS5hdHRyKHtcblx0ICAgICAgICAgICAgICAgICAgICAnY2FydC1pdGVtaWQnIDogaXRlbUlkLFxuXHQgICAgICAgICAgICAgICAgICAgICdpZCcgOiAnZWRpdHF0eS0nICsgaXRlbUlkLFxuXHQgICAgICAgICAgICAgICAgICAgICd2YWx1ZSc6ICRxdHlcblx0ICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgJGZvcm1RdHkuZmluZCgnLmZvcm0tbGFiZWwnKS5hdHRyKHtcblx0ICAgICAgICAgICAgICAgIFx0J2Zvcic6ICdlZGl0cXR5LScgKyBpdGVtSWRcblx0ICAgICAgICAgICAgICAgIH0pO1xuXG5cdCAgICAgICAgICAgICAgICB1dGlscy5hcGkucHJvZHVjdEF0dHJpYnV0ZXMub3B0aW9uQ2hhbmdlKHByb2R1Y3RJZCwgJGZvcm0uc2VyaWFsaXplKCksICdwcm9kdWN0cy9idWxrLWRpc2NvdW50LXJhdGVzJywgKGVyciwgcmVzcG9uc2UpID0+IHtcblx0XHQgICAgICAgICAgICAgICAgY29uc3QgYXR0cmlidXRlc0RhdGEgPSByZXNwb25zZS5kYXRhIHx8IHt9O1xuXHRcdCAgICAgICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGVzQ29udGVudCA9IHJlc3BvbnNlLmNvbnRlbnQgfHwge307XG5cblx0XHQgICAgICAgICAgICAgICAgdXBkYXRlUHJvZHVjdEF0dHJpYnV0ZXMoJGZpcnN0SXRlbSwgYXR0cmlidXRlc0RhdGEpO1xuXHRcdCAgICAgICAgICAgICAgICB1cGRhdGVWaWV3KCRmaXJzdEl0ZW0sIGF0dHJpYnV0ZXNEYXRhLCBhdHRyaWJ1dGVzQ29udGVudCk7XG5cdFx0ICAgICAgICAgICAgfSk7XG5cblx0XHQgICAgICAgICAgICBzZXRQcm9kdWN0VmFyaWFudCgkZmlyc3RJdGVtLCAkZm9ybSk7XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH0pO1xuXHRcdH0pO1xuXG5cdFx0JChkb2N1bWVudCkub24oJ2NoYW5nZScsICdbZGF0YS1wcm9kdWN0LWVkaXQtaXRlbS1pZF0gLmZvcm0taW5wdXRbY2FydC1pdGVtaWRdJywgZXZlbnQgPT4ge1xuXHRcdFx0Y29uc3QgJHRhcmdldCA9ICQoZXZlbnQuY3VycmVudFRhcmdldCk7XG5cdCAgICAgICAgdmFyIHByZVZhbD0gJHRhcmdldC5kYXRhKCdwcmV2YWwnKTtcblx0ICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdCAgICAgICAgbGlzdGVuUXVhbnRpdHlDaGFuZ2VVcGRhdGUoJHRhcmdldCwgcHJlVmFsKTtcblx0XHR9KTtcblxuXHRcdCQoZG9jdW1lbnQpLm9uKCdjaGFuZ2UnLCAnW2RhdGEtcHJvZHVjdC1lZGl0LW9wdGlvbi1jaGFuZ2VdJyAsIGV2ZW50ID0+IHtcblx0ICAgICAgICBjb25zdCAkY2hhbmdlZE9wdGlvbiA9ICQoZXZlbnQudGFyZ2V0KTtcblx0ICAgICAgICBjb25zdCAkaXRlbSA9ICRjaGFuZ2VkT3B0aW9uLnBhcmVudHMoJy5wcm9kdWN0LWVkaXQtaXRlbScpO1xuXHQgICAgICAgIGNvbnN0ICRmb3JtID0gJGNoYW5nZWRPcHRpb24ucGFyZW50cygnZm9ybScpO1xuXHQgICAgICAgIGNvbnN0IHByb2R1Y3RJZCA9ICQoJ1tuYW1lPVwicHJvZHVjdF9pZFwiXScsICRmb3JtKS52YWwoKTtcblxuXHQgICAgICAgIHV0aWxzLmFwaS5wcm9kdWN0QXR0cmlidXRlcy5vcHRpb25DaGFuZ2UocHJvZHVjdElkLCAkZm9ybS5zZXJpYWxpemUoKSwgJ3Byb2R1Y3RzL2J1bGstZGlzY291bnQtcmF0ZXMnLCAoZXJyLCByZXNwb25zZSkgPT4ge1xuXHQgICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGVzRGF0YSA9IHJlc3BvbnNlLmRhdGEgfHwge307XG5cdFx0ICAgICAgICBjb25zdCBhdHRyaWJ1dGVzQ29udGVudCA9IHJlc3BvbnNlLmNvbnRlbnQgfHwge307XG5cblx0ICAgICAgICAgICAgdXBkYXRlUHJvZHVjdEF0dHJpYnV0ZXMoJGl0ZW0sIGF0dHJpYnV0ZXNEYXRhKTtcblx0ICAgICAgICAgICAgdXBkYXRlVmlldygkaXRlbSwgYXR0cmlidXRlc0RhdGEsIGF0dHJpYnV0ZXNDb250ZW50KTtcblx0ICAgICAgICB9KTtcblxuXHQgICAgICAgIHNldFByb2R1Y3RWYXJpYW50KCRpdGVtLCAkZm9ybSk7XG5cdCAgICB9KTtcblxuXHQgICAgJChkb2N1bWVudCkub24oJ2NsaWNrJywgJ1tkYXRhLWVkaXQtY2FydC1hZGQtbW9yZV0nLCBldmVudCA9PiB7XG5cdCAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0ICAgIFx0XG5cdCAgICBcdHZhciBjb3VudCA9IHBhcnNlSW50KCQoJy5tb2RhbC0tZWRpdE9wdGlvbnMgW2RhdGEtY291bnRdJykuYXR0cignZGF0YS1jb3VudCcpKSxcblx0XHRcdFx0cHJvZHVjdCA9ICQoJy5tb2RhbC0tZWRpdE9wdGlvbnMgLnByb2R1Y3QtZWRpdC1pdGVtRmlyc3QnKS5jbG9uZSgpLnJlbW92ZUNsYXNzKCdwcm9kdWN0LWVkaXQtaXRlbUZpcnN0Jyk7XG5cblx0ICAgICAgICBwcm9kdWN0LmFwcGVuZFRvKCcubW9kYWwtLWVkaXRPcHRpb25zIC5wcm9kdWN0LWVkaXQtd3JhcHBlcicpO1xuXG5cdCAgICAgICAgdXBkYXRlUHJvZHVjdENsb25lZEF0dHJpYnV0ZXMocHJvZHVjdCwgY291bnQpO1xuXG5cdCAgICBcdGNvdW50ID0gY291bnQgKyAxO1xuXHQgICAgXHQkKCcubW9kYWwtLWVkaXRPcHRpb25zIFtkYXRhLWNvdW50XScpLmF0dHIoJ2RhdGEtY291bnQnLCBjb3VudCk7XG5cdCAgICB9KTtcblxuXHQgICAgJChkb2N1bWVudCkub24oJ2NsaWNrJywgJ1tkYXRhLWVkaXQtY2FydC1yZW1vdmVdJywgZXZlbnQgPT4ge1xuXHQgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cblx0ICAgICAgICB2YXIgcHJvZHVjdCA9ICQoZXZlbnQuY3VycmVudFRhcmdldCkucGFyZW50cygnLnByb2R1Y3QtZWRpdC1pdGVtJyk7XG5cblx0ICAgICAgICBpZihwcm9kdWN0Lmhhc0NsYXNzKCdwcm9kdWN0LWVkaXQtaXRlbUZpcnN0Jykpe1xuXHQgICAgICAgIFx0dmFyIGl0ZW1JZCA9IHByb2R1Y3QuZGF0YSgncHJvZHVjdC1lZGl0LWl0ZW0taWQnKTtcblxuXHQgICAgICAgIFx0dXRpbHMuYXBpLmNhcnQuaXRlbVJlbW92ZShpdGVtSWQsIChlcnIsIHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLnN0YXR1cyA9PT0gJ3N1Y2NlZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtb2RhbCA9IGRlZmF1bHRNb2RhbCgpO1xuXHQgICAgICAgICAgICAgICAgXHRtb2RhbC5jbG9zZSgpO1xuXHQgICAgICAgICAgICAgICAgXHRcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZUNhcnRDb250ZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2FsLmZpcmUoe1xuXHRcdCAgICAgICAgICAgICAgICAgICAgdGV4dDogcmVzcG9uc2UuZGF0YS5lcnJvcnMuam9pbignXFxuJyksXG5cdFx0ICAgICAgICAgICAgICAgICAgICBpY29uOiAnZXJyb3InLFxuXHRcdCAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH0gZWxzZXtcblx0ICAgICAgICBcdHByb2R1Y3QucmVtb3ZlKCk7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgICQoZG9jdW1lbnQpLm9uKCdjbGljaycsICdbZGF0YS1lZGl0LWNhcnQtYWRkLXRvLWNhcnRdJywgZXZlbnQgPT4ge1xuXHQgICAgICAgIHZhciAkcHJvZHVjdCA9ICQoJy5tb2RhbC0tZWRpdE9wdGlvbnMgLnByb2R1Y3QtZWRpdC1pdGVtLmlzLXZpc2libGUnKSxcblx0ICAgIFx0XHQkZm9ybSA9ICRwcm9kdWN0LmZpbmQoJy5mb3JtJyksXG5cdCAgICBcdFx0aXRlbUlkID0gJCgnLm1vZGFsLS1lZGl0T3B0aW9ucyAucHJvZHVjdC1lZGl0LWl0ZW1GaXJzdC5pcy12aXNpYmxlJykuZGF0YSgncHJvZHVjdC1lZGl0LWl0ZW0taWQnKSxcblx0ICAgIFx0XHRhcnJQcm8gPSBuZXcgQXJyYXkoKSxcblx0ICAgIFx0XHRjaGVjayA9IGZhbHNlO1xuXG5cdCAgICAgICAgJHByb2R1Y3QuZWFjaCgoaW5kZXgsIGVsZW1lbnQpID0+IHtcblx0ICAgICAgICAgICAgYXJyUHJvLnB1c2goaW5kZXgpO1xuXHQgICAgICAgIH0pO1xuXG5cdCAgICAgICAgaWYgKGFyclByby5sZW5ndGggPiAwKSB7XG5cdCAgICAgICAgICAgIGNoZWNrID0gY2hlY2tQcm9kdWN0KCRmb3JtLCBhcnJQcm8pO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGlmIChjaGVjaykge1xuXHQgICAgICAgICAgICBpZiAoKGFyclByby5sZW5ndGggPiAwKSAmJiAodHlwZW9mKGl0ZW1JZCkgIT09ICd1bmRlZmluZWQnKSkge1xuXHQgICAgICAgICAgICAgICAgdXRpbHMuYXBpLmNhcnQuaXRlbVJlbW92ZShpdGVtSWQsIChlcnIsIHJlc3BvbnNlKSA9PiB7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuc3RhdHVzID09PSAnc3VjY2VlZCcpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgJCgnW2RhdGEtZWRpdC1jYXJ0LWFkZC10by1jYXJ0XScpLmFkZENsYXNzKCdsb2FkaW5nJyk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGFkZFRvQ2FydCgkZm9ybSwgMCwgYXJyUHJvKTtcblx0ICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBzd2FsLmZpcmUoe1xuXHRcdFx0ICAgICAgICAgICAgICAgICAgICB0ZXh0OiByZXNwb25zZS5kYXRhLmVycm9ycy5qb2luKCdcXG4nKSxcblx0XHRcdCAgICAgICAgICAgICAgICAgICAgaWNvbjogJ2Vycm9yJyxcblx0XHRcdCAgICAgICAgICAgICAgICB9KTtcblxuXHQgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVDYXJ0Q29udGVudCgpO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gJ1BsZWFzZSBtYWtlIHN1cmUgYWxsIG9wdGlvbnMgaGF2ZSBiZWVuIGZpbGxlZCBpbi4nO1xuXG5cdCAgICAgICAgICAgIGlmIChlcnJvck1lc3NhZ2UpIHtcblx0ICAgICAgICAgICAgICAgIGNvbnN0IHRtcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xuXHQgICAgICAgICAgICAgICAgdG1wLmlubmVySFRNTCA9IGVycm9yTWVzc2FnZTtcblxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHNob3dBbGVydE1vZGFsKHRtcC50ZXh0Q29udGVudCB8fCB0bXAuaW5uZXJUZXh0KTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdCAgICB9KTtcblxuXHQgICAgJChkb2N1bWVudCkub24oJ2NsaWNrJywgJ1tkYXRhLWNhcnQtZWRpdC1pdGVtLXF1YW50aXR5XSBidXR0b24nLCBldmVudCA9PiB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgY29uc3QgJHRhcmdldCA9ICQoZXZlbnQuY3VycmVudFRhcmdldCk7XG4gICAgICAgICAgICBjb25zdCBpdGVtSWQgPSAkdGFyZ2V0LmRhdGEoJ2NhcnQtaXRlbWlkJyk7XG4gICAgICAgICAgICBjb25zdCAkZWwgPSAkdGFyZ2V0LnNpYmxpbmdzKCcuZm9ybS1pbnB1dC0taW5jcmVtZW50VG90YWwnKTtcbiAgICAgICAgICAgIGNvbnN0ICRmb3JtID0gJHRhcmdldC5wYXJlbnRzKCcucHJvZHVjdC1lZGl0LWl0ZW0nKS5maW5kKCcuZm9ybScpO1xuICAgICAgICAgICAgY29uc3QgbWF4UXR5ID0gcGFyc2VJbnQoJGVsLmRhdGEoJ3F1YW50aXR5TWF4JyksIDEwKTtcbiAgICAgICAgICAgIGNvbnN0IG1pblF0eSA9IHBhcnNlSW50KCRlbC5kYXRhKCdxdWFudGl0eU1pbicpLCAxMCk7XG4gICAgICAgICAgICBjb25zdCBvbGRRdHkgPSBwYXJzZUludCgkZWwudmFsKCksIDEwKTtcbiAgICAgICAgICAgIGNvbnN0IG1pbkVycm9yID0gJGVsLmRhdGEoJ3F1YW50aXR5TWluRXJyb3InKTtcbiAgICAgICAgICAgIGNvbnN0IG1heEVycm9yID0gJGVsLmRhdGEoJ3F1YW50aXR5TWF4RXJyb3InKTtcbiAgICAgICAgICAgIGNvbnN0IG5ld1F0eSA9ICR0YXJnZXQuZGF0YSgnYWN0aW9uJykgPT09ICdpbmMnID8gb2xkUXR5ICsgMSA6IG9sZFF0eSAtIDE7XG4gICAgICAgICAgICBjb25zdCBzdG9jayA9ICRlbC5kYXRhKCdzdG9jaycpO1xuICAgICAgICAgICAgY29uc3QgcHJvVGl0bGU9ICQoJy5wcm9kdWN0LWVkaXQtdGl0bGUnKS5odG1sKCk7XG4gICAgICAgICAgICBsZXQgaW52YWxpZEVudHJ5O1xuXG4gICAgICAgICAgICAvLyBEb2VzIG5vdCBxdWFsaXR5IGZvciBtaW4vbWF4IHF1YW50aXR5XG4gICAgICAgICAgICBpZiAoIW5ld1F0eSkge1xuICAgICAgICAgICAgICAgIGludmFsaWRFbnRyeSA9IG5ld1F0eTtcbiAgICAgICAgICAgICAgICAkZWwudmFsKG9sZFF0eSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gc3dhbC5maXJlKHtcblx0ICAgICAgICAgICAgICAgIHRleHQ6IGAke2ludmFsaWRFbnRyeX0gaXMgbm90IGEgdmFsaWQgZW50cnlgLFxuXHQgICAgICAgICAgICAgICAgaWNvbjogJ2Vycm9yJyxcblx0ICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG5ld1F0eSA8IG1pblF0eSkge1xuICAgICAgICAgICAgICAgICRlbC52YWwob2xkUXR5KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBzd2FsLmZpcmUoe1xuXHQgICAgICAgICAgICAgICAgdGV4dDogbWluRXJyb3IsXG5cdCAgICAgICAgICAgICAgICBpY29uOiAnZXJyb3InLFxuXHQgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWF4UXR5ID4gMCAmJiBuZXdRdHkgPiBtYXhRdHkpIHtcbiAgICAgICAgICAgICAgICAkZWwudmFsKG9sZFF0eSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gc3dhbC5maXJlKHtcblx0ICAgICAgICAgICAgICAgIHRleHQ6IG1heEVycm9yLFxuXHQgICAgICAgICAgICAgICAgaWNvbjogJ2Vycm9yJyxcblx0ICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG5ld1F0eSA+IHN0b2NrKSB7XG4gICAgICAgICAgICAgICAgJGVsLnZhbChvbGRRdHkpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHN3YWwuZmlyZSh7XG5cdCAgICAgICAgICAgICAgICB0ZXh0OiAnV2UgZG9uXFwndCBoYXZlIGVub3VnaCBzdG9jayBvbiBoYW5kIGZvciB0aGUgcXVhbnRpdHkgeW91IHNlbGVjdGVkLiBQbGVhc2UgdHJ5IGFnYWluLicsXG5cdCAgICAgICAgICAgICAgICBpY29uOiAnZXJyb3InLFxuXHQgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAkZWwudmFsKG5ld1F0eSk7XG4gICAgICAgICAgICAgICAkZm9ybS5maW5kKCdbbmFtZT1xdHlcXFxcW1xcXFxdXScpLmF0dHIoJ3ZhbHVlJywgbmV3UXR5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cblx0ICAgIGZ1bmN0aW9uIGFkZFRvQ2FydChmb3JtLCBpLCBhcnJQLCBjYXJ0SWQpIHtcblx0ICAgICAgICBpZiAod2luZG93LkZvcm1EYXRhID09PSB1bmRlZmluZWQpIHtcblx0ICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHZhciBrID0gYXJyUFtpXTtcblxuXHQgICAgICAgIHV0aWxzLmFwaS5jYXJ0Lml0ZW1BZGQoZmlsdGVyRW1wdHlGaWxlc0Zyb21Gb3JtKG5ldyBGb3JtRGF0YShmb3JtW2tdKSksIChlcnIsIHJlc3BvbnNlKSA9PiB7XG5cdCAgICAgICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGVyciB8fCByZXNwb25zZS5kYXRhLmVycm9yO1xuXG5cdCAgICAgICAgICAgIGlmIChlcnJvck1lc3NhZ2UpIHtcblx0ICAgICAgICAgICAgICAgIGNvbnN0IHRtcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ0RJVicpO1xuXHQgICAgICAgICAgICAgICAgdG1wLmlubmVySFRNTCA9IGVycm9yTWVzc2FnZTtcblxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHNob3dBbGVydE1vZGFsKHRtcC50ZXh0Q29udGVudCB8fCB0bXAuaW5uZXJUZXh0KTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIGkrKztcblxuXHQgICAgICAgICAgICBpZiAoaSA+PSBhcnJQLmxlbmd0aCkge1xuXHQgICAgICAgICAgICAgICAgY29uc3QgbW9kYWwgPSBkZWZhdWx0TW9kYWwoKTtcblx0ICAgICAgICAgICAgICAgIG1vZGFsLmNsb3NlKCk7XG5cblx0ICAgICAgICAgICAgICAgIHVwZGF0ZUNhcnRDb250ZW50KCk7XG5cblx0ICAgICAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIGFkZFRvQ2FydChmb3JtLCBpLCBhcnJQKTtcblx0ICAgICAgICB9KTtcblx0ICAgIH1cblxuXHQgICAgZnVuY3Rpb24gbGlzdGVuUXVhbnRpdHlDaGFuZ2VVcGRhdGUoJHRhcmdldCwgcHJlVmFsID0gbnVsbCkge1xuXHQgICAgICAgIGNvbnN0IGl0ZW1JZCA9ICR0YXJnZXQuZGF0YSgnY2FydC1pdGVtaWQnKTtcblx0ICAgICAgICBjb25zdCAkZWwgPSAkdGFyZ2V0O1xuXHQgICAgICAgIGNvbnN0ICRmb3JtID0gJHRhcmdldC5wYXJlbnRzKCcucHJvZHVjdC1lZGl0LWl0ZW0nKS5maW5kKCcuZm9ybScpO1xuXHQgICAgICAgIGNvbnN0IG1heFF0eSA9IHBhcnNlSW50KCRlbC5kYXRhKCdxdWFudGl0eU1heCcpLCAxMCk7XG5cdCAgICAgICAgY29uc3QgbWluUXR5ID0gcGFyc2VJbnQoJGVsLmRhdGEoJ3F1YW50aXR5TWluJyksIDEwKTtcblx0ICAgICAgICBjb25zdCBvbGRRdHkgPSBwcmVWYWwgIT09IG51bGwgPyBwcmVWYWwgOiBtaW5RdHk7XG5cdCAgICAgICAgY29uc3QgbWluRXJyb3IgPSAkZWwuZGF0YSgncXVhbnRpdHlNaW5FcnJvcicpO1xuXHQgICAgICAgIGNvbnN0IG1heEVycm9yID0gJGVsLmRhdGEoJ3F1YW50aXR5TWF4RXJyb3InKTtcblx0ICAgICAgICBjb25zdCBuZXdRdHkgPSBwYXJzZUludChOdW1iZXIoJGVsLnZhbCgpKSwgMTApO1xuXHQgICAgICAgIGNvbnN0IHN0b2NrID0gJGVsLmRhdGEoJ3N0b2NrJyk7XG5cdCAgICAgICAgbGV0IGludmFsaWRFbnRyeTtcblxuXHQgICAgICAgIGlmICghbmV3UXR5KSB7XG5cdCAgICAgICAgICAgIGludmFsaWRFbnRyeSA9ICRlbC52YWwoKTtcblx0ICAgICAgICAgICAgJGVsLnZhbChvbGRRdHkpO1xuXG5cdCAgICAgICAgICAgIHJldHVybiBzd2FsLmZpcmUoe1xuXHQgICAgICAgICAgICAgICAgdGV4dDogYCR7aW52YWxpZEVudHJ5fSBpcyBub3QgYSB2YWxpZCBlbnRyeWAsXG5cdCAgICAgICAgICAgICAgICBpY29uOiAnZXJyb3InLFxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9IGVsc2UgaWYgKG5ld1F0eSA8IG1pblF0eSkge1xuXHQgICAgICAgICAgICAkZWwudmFsKG9sZFF0eSk7XG5cdCAgICAgICAgICAgIFxuXHQgICAgICAgICAgICByZXR1cm4gc3dhbC5maXJlKHtcblx0ICAgICAgICAgICAgICAgIHRleHQ6IG1pbkVycm9yLFxuXHQgICAgICAgICAgICAgICAgaWNvbjogJ2Vycm9yJyxcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfSBlbHNlIGlmIChtYXhRdHkgPiAwICYmIG5ld1F0eSA+IG1heFF0eSkge1xuXHQgICAgICAgICAgICAkZWwudmFsKG9sZFF0eSk7XG5cdCAgICAgICAgICAgXG5cdCAgICAgICAgICAgIHJldHVybiBzd2FsLmZpcmUoe1xuXHQgICAgICAgICAgICAgICAgdGV4dDogbWF4RXJyb3IsXG5cdCAgICAgICAgICAgICAgICBpY29uOiAnZXJyb3InLFxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9IGVsc2UgaWYgKG5ld1F0eSA+IHN0b2NrKSB7XG5cdCAgICAgICAgICAgICRlbC52YWwob2xkUXR5KTtcblxuXHQgICAgICAgICAgICByZXR1cm4gc3dhbC5maXJlKHtcblx0ICAgICAgICAgICAgICAgIHRleHQ6ICdXZSBkb25cXCd0IGhhdmUgZW5vdWdoIHN0b2NrIG9uIGhhbmQgZm9yIHRoZSBxdWFudGl0eSB5b3Ugc2VsZWN0ZWQuIFBsZWFzZSB0cnkgYWdhaW4uJyxcblx0ICAgICAgICAgICAgICAgIGljb246ICdlcnJvcicsXG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH0gZWxzZXtcblx0ICAgICAgICBcdCRmb3JtLmZpbmQoJ1tuYW1lPXF0eVxcXFxbXFxcXF1dJykuYXR0cigndmFsdWUnLCBuZXdRdHkpO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblxuXHQgICAgZnVuY3Rpb24gZmlsdGVyRW1wdHlGaWxlc0Zyb21Gb3JtKGZvcm1EYXRhKSB7XG5cdCAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWxdIG9mIGZvcm1EYXRhKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAodmFsIGluc3RhbmNlb2YgRmlsZSAmJiAhdmFsLm5hbWUgJiYgIXZhbC5zaXplKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgZm9ybURhdGEuZGVsZXRlKGtleSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9IGNhdGNoIChlKSB7XG5cdCAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgcmV0dXJuIGZvcm1EYXRhO1xuXHQgICAgfVxuXG5cdCAgICBmdW5jdGlvbiBjaGVja1Byb2R1Y3QoZm9ybSwgYXJyUHJvKSB7XG5cdCAgICAgICAgdmFyIGNoZWNrID0gdHJ1ZTtcblxuXHQgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhcnJQcm8ubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcblx0ICAgICAgICAgICAgdmFyIGsgPSBhcnJQcm9baV0sXG5cdCAgICAgICAgICAgIFx0JGZvcm0gPSAkKGZvcm1ba10pO1xuXG5cdCAgICAgICAgICAgIGlmICgkZm9ybS5maW5kKCdbZGF0YS1wcm9kdWN0LWF0dHJpYnV0ZV0nKS5sZW5ndGggPiAwKSB7XG5cblx0ICAgICAgICAgICAgICAgIGNoZWNrID0gY2hlY2tCZWZvcmVBZGQoJGZvcm0pO1xuXG5cdCAgICAgICAgICAgICAgICBpZiAoY2hlY2sgPT0gZmFsc2Upe1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHJldHVybiBjaGVjaztcblx0ICAgIH1cblxuXHQgICAgZnVuY3Rpb24gY2hlY2tCZWZvcmVBZGQoJGF0dHJpYnV0ZXMpIHtcblx0ICAgICAgICB2YXIgY2hlY2sgPSB0cnVlLFxuXHQgICAgICAgICAgICBhdHQgPSBcIlwiO1xuXG5cdCAgICAgICAgJGF0dHJpYnV0ZXMuZmluZCgnaW5wdXQ6dGV4dCwgaW5wdXQ6cGFzc3dvcmQsIGlucHV0OmZpbGUsIHRleHRhcmVhJykuZWFjaCgoaW5kZXgsIGVsZW1lbnQpID0+IHtcblx0ICAgICAgICAgICAgaWYgKCEkKGVsZW1lbnQpLnByb3AoJ3JlcXVpcmVkJykpIHt9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgaWYgKCQoZWxlbWVudCkudmFsKCkpIHt9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgICQoZWxlbWVudCkuZm9jdXMoKTtcblx0ICAgICAgICAgICAgICAgICAgICBjaGVjayA9IGZhbHNlO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSk7XG5cblx0ICAgICAgICAkYXR0cmlidXRlcy5maW5kKCdzZWxlY3QnKS5lYWNoKChpbmRleCwgZWxlbWVudCkgPT4ge1xuXHQgICAgICAgICAgICBpZiAoISQoZWxlbWVudCkucHJvcCgncmVxdWlyZWQnKSkge30gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICBpZiAoJChlbGVtZW50KS52YWwoKSkge30gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgJChlbGVtZW50KS5mb2N1cygpO1xuXHQgICAgICAgICAgICAgICAgICAgIGNoZWNrID0gZmFsc2U7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9KTtcblxuXHQgICAgICAgICRhdHRyaWJ1dGVzLmZpbmQoJ2lucHV0OnJhZGlvLCBpbnB1dDpjaGVja2JveCcpLmVhY2goKGluZGV4LCBlbGVtZW50KSA9PiB7XG5cdCAgICAgICAgICAgIGlmIChhdHQgIT0gJChlbGVtZW50KS5hdHRyKFwibmFtZVwiKSkge1xuXHQgICAgICAgICAgICAgICAgYXR0ID0gJChlbGVtZW50KS5hdHRyKFwibmFtZVwiKTtcblx0ICAgICAgICAgICAgICAgIGlmICghJChlbGVtZW50KS5wcm9wKCdyZXF1aXJlZCcpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKCQoZWxlbWVudCkuYXR0cihcInR5cGVcIikgPT0gXCJjaGVja2JveFwiKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkKFwiW25hbWU9J1wiICsgYXR0ICsgXCInXTpjaGVja2VkXCIpLnZhbCgpKSB7fVxuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICBpZiAoJChlbGVtZW50KS5hdHRyKFwidHlwZVwiKSA9PSBcInJhZGlvXCIpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCQoXCJbbmFtZT0nXCIgKyBhdHQgKyBcIiddOmNoZWNrZWRcIikudmFsKCkpIHt9XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoJChlbGVtZW50KS5hdHRyKFwidHlwZVwiKSA9PSBcImNoZWNrYm94XCIpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCQoXCJbbmFtZT0nXCIgKyBhdHQgKyBcIiddOmNoZWNrZWRcIikudmFsKCkpIHt9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2sgPSBmYWxzZTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICBpZiAoJChlbGVtZW50KS5hdHRyKFwidHlwZVwiKSA9PSBcInJhZGlvXCIpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCQoXCJbbmFtZT0nXCIgKyBhdHQgKyBcIiddOmNoZWNrZWRcIikudmFsKCkpIHt9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2sgPSBmYWxzZTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0pO1xuXG5cdCAgICAgICAgcmV0dXJuIGNoZWNrO1xuXHQgICAgfVxuXG5cdCAgICBmdW5jdGlvbiB1cGRhdGVQcm9kdWN0Q2xvbmVkQXR0cmlidXRlcygkc2NvcGUsIG51bWJlcikge1xuXHQgICAgICAgICQoJ2xhYmVsW2RhdGEtcHJvZHVjdC1hdHRyaWJ1dGUtdmFsdWVdJywgJHNjb3BlKS5lYWNoKChpbmRleCwgYXR0cmlidXRlKSA9PiB7XG5cdCAgICAgICAgICAgIHZhciAkZm9ybUxhYmVsID0gJChhdHRyaWJ1dGUpLFxuXHQgICAgICAgICAgICBcdCRmb3JtSW5wdXQgPSAkZm9ybUxhYmVsLnByZXYoKSxcblx0ICAgICAgICAgICAgXHRpZCA9ICRmb3JtTGFiZWwuYXR0cignZm9yJyksXG5cdCAgICAgICAgICAgIFx0bmV3SWQgPSBpZCArIG51bWJlcjtcblxuXHQgICAgICAgICAgICAkZm9ybUxhYmVsLmF0dHIoJ2ZvcicsIG5ld0lkKTtcblx0ICAgICAgICAgICAgJGZvcm1JbnB1dC5hdHRyKCdpZCcsIG5ld0lkKTtcblx0ICAgICAgICB9KTtcblxuXHQgICAgICAgICQoJ2xhYmVsW2RhdGEtcHJvZHVjdC1hdHRyaWJ1dGUtdmFsdWUyXScsICRzY29wZSkuZWFjaCgoaW5kZXgsIGF0dHJpYnV0ZSkgPT4ge1xuXHQgICAgICAgICAgICB2YXIgJGZvcm1MYWJlbCA9ICQoYXR0cmlidXRlKSxcblx0ICAgICAgICAgICAgXHQkZm9ybUlucHV0ID0gJGZvcm1MYWJlbC5uZXh0KCksXG5cdCAgICAgICAgICAgIFx0aWQgPSAkZm9ybUxhYmVsLmF0dHIoJ2ZvcicpLFxuXHQgICAgICAgICAgICBcdG5ld0lkID0gaWQgKyBudW1iZXI7XG5cblx0ICAgICAgICAgICAgJGZvcm1MYWJlbC5hdHRyKCdmb3InLCBuZXdJZCk7XG5cdCAgICAgICAgICAgICRmb3JtSW5wdXQuYXR0cignaWQnLCBuZXdJZCk7XG5cdCAgICAgICAgfSk7XG5cblx0ICAgICAgICAkKCdpbnB1dC5mb3JtLWNoZWNrYm94JywgJHNjb3BlKS5lYWNoKChpbmRleCwgYXR0cmlidXRlKSA9PiB7XG5cdCAgICAgICAgICAgIHZhciAkZm9ybUlucHV0ID0gJChhdHRyaWJ1dGUpLFxuXHQgICAgICAgICAgICBcdCRmb3JtTGFiZWwgPSAkZm9ybUlucHV0Lm5leHQoKSxcblx0ICAgICAgICAgICAgXHRpZCA9ICRmb3JtTGFiZWwuYXR0cignZm9yJyksXG5cdCAgICAgICAgICAgIFx0bmV3SWQgPSBpZCArIG51bWJlcjtcblxuXHQgICAgICAgICAgICAkZm9ybUxhYmVsLmF0dHIoJ2ZvcicsIG5ld0lkKTtcblx0ICAgICAgICAgICAgJGZvcm1JbnB1dC5hdHRyKCdpZCcsIG5ld0lkKTtcblx0ICAgICAgICB9KTtcblxuXHQgICAgICAgICQoJ3NlbGVjdC5mb3JtLXNlbGVjdCcsICRzY29wZSkuZWFjaCgoaW5kZXgsIGF0dHJpYnV0ZSkgPT4ge1xuXHQgICAgICAgICAgICB2YXIgJGZvcm1TZWxlY3QgPSAkKGF0dHJpYnV0ZSksXG5cdCAgICAgICAgICAgIFx0JGZvcm1MYWJlbCA9ICRmb3JtU2VsZWN0LnByZXYoKSxcblx0ICAgICAgICAgICAgXHRpZCA9ICRmb3JtTGFiZWwuYXR0cignZm9yJyksXG5cdCAgICAgICAgICAgIFx0bmV3SWQgPSBpZCArIG51bWJlcjtcblxuXHQgICAgICAgICAgICAkZm9ybUxhYmVsLmF0dHIoJ2ZvcicsIG5ld0lkKTtcblx0ICAgICAgICAgICAgJGZvcm1TZWxlY3QuYXR0cignaWQnLCBuZXdJZCk7XG5cdCAgICAgICAgfSk7XG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIHNldFByb2R1Y3RWYXJpYW50KGl0ZW0sIGZvcm0pIHtcblx0ICAgICAgICBjb25zdCB1bnNhdGlzZmllZFJlcXVpcmVkRmllbGRzID0gW107XG5cdCAgICAgICAgY29uc3Qgb3B0aW9ucyA9IFtdO1xuXG5cdCAgICAgICAgJC5lYWNoKCQoJ1tkYXRhLXByb2R1Y3QtYXR0cmlidXRlXScsIGZvcm0pLCAoaW5kZXgsIHZhbHVlKSA9PiB7XG5cdCAgICAgICAgICAgIGNvbnN0IG9wdGlvbkxhYmVsID0gdmFsdWUuY2hpbGRyZW5bMF0uaW5uZXJUZXh0O1xuXHQgICAgICAgICAgICBjb25zdCBvcHRpb25UaXRsZSA9IG9wdGlvbkxhYmVsLnNwbGl0KCc6JylbMF0udHJpbSgpO1xuXHQgICAgICAgICAgICBjb25zdCByZXF1aXJlZCA9IG9wdGlvbkxhYmVsLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ3JlcXVpcmVkJyk7XG5cdCAgICAgICAgICAgIGNvbnN0IHR5cGUgPSB2YWx1ZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtcHJvZHVjdC1hdHRyaWJ1dGUnKTtcblxuXHQgICAgICAgICAgICBpZiAoKHR5cGUgPT09ICdpbnB1dC1maWxlJyB8fCB0eXBlID09PSAnaW5wdXQtdGV4dCcgfHwgdHlwZSA9PT0gJ2lucHV0LW51bWJlcicpICYmIHZhbHVlLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0JykudmFsdWUgPT09ICcnICYmIHJlcXVpcmVkKSB7XG5cdCAgICAgICAgICAgICAgICB1bnNhdGlzZmllZFJlcXVpcmVkRmllbGRzLnB1c2godmFsdWUpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgaWYgKHR5cGUgPT09ICd0ZXh0YXJlYScgJiYgdmFsdWUucXVlcnlTZWxlY3RvcigndGV4dGFyZWEnKS52YWx1ZSA9PT0gJycgJiYgcmVxdWlyZWQpIHtcblx0ICAgICAgICAgICAgICAgIHVuc2F0aXNmaWVkUmVxdWlyZWRGaWVsZHMucHVzaCh2YWx1ZSk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICBpZiAodHlwZSA9PT0gJ2RhdGUnKSB7XG5cdCAgICAgICAgICAgICAgICBjb25zdCBpc1NhdGlzZmllZCA9IEFycmF5LmZyb20odmFsdWUucXVlcnlTZWxlY3RvckFsbCgnc2VsZWN0JykpLmV2ZXJ5KChzZWxlY3QpID0+IHNlbGVjdC5zZWxlY3RlZEluZGV4ICE9PSAwKTtcblxuXHQgICAgICAgICAgICAgICAgaWYgKGlzU2F0aXNmaWVkKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0ZVN0cmluZyA9IEFycmF5LmZyb20odmFsdWUucXVlcnlTZWxlY3RvckFsbCgnc2VsZWN0JykpLm1hcCgoeCkgPT4geC52YWx1ZSkuam9pbignLScpO1xuXHQgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMucHVzaChgJHtvcHRpb25UaXRsZX06JHtkYXRlU3RyaW5nfWApO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICBpZiAocmVxdWlyZWQpIHtcblx0ICAgICAgICAgICAgICAgICAgICB1bnNhdGlzZmllZFJlcXVpcmVkRmllbGRzLnB1c2godmFsdWUpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdzZXQtc2VsZWN0Jykge1xuXHQgICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0ID0gdmFsdWUucXVlcnlTZWxlY3Rvcignc2VsZWN0Jyk7XG5cdCAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RlZEluZGV4ID0gc2VsZWN0LnNlbGVjdGVkSW5kZXg7XG5cblx0ICAgICAgICAgICAgICAgIGlmIChzZWxlY3RlZEluZGV4ICE9PSAwKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5wdXNoKGAke29wdGlvblRpdGxlfToke3NlbGVjdC5vcHRpb25zW3NlbGVjdGVkSW5kZXhdLmlubmVyVGV4dH1gKTtcblx0ICAgICAgICAgICAgICAgICAgICAkKHZhbHVlLmNoaWxkcmVuWzBdKS5maW5kKCdbZGF0YS1vcHRpb24tdmFsdWVdJykudGV4dChzZWxlY3Qub3B0aW9uc1tzZWxlY3RlZEluZGV4XS5pbm5lclRleHQpO1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgaWYgKHJlcXVpcmVkKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdW5zYXRpc2ZpZWRSZXF1aXJlZEZpZWxkcy5wdXNoKHZhbHVlKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIGlmICh0eXBlID09PSAnc2V0LXJlY3RhbmdsZScgfHwgdHlwZSA9PT0gJ3NldC1yYWRpbycgfHwgdHlwZSA9PT0gJ3N3YXRjaCcgfHwgdHlwZSA9PT0gJ2lucHV0LWNoZWNrYm94JyB8fCB0eXBlID09PSAncHJvZHVjdC1saXN0Jykge1xuXHQgICAgICAgICAgICAgICAgY29uc3QgY2hlY2tlZCA9IHZhbHVlLnF1ZXJ5U2VsZWN0b3IoJzpjaGVja2VkJyk7XG5cdCAgICAgICAgICAgICAgICBpZiAoY2hlY2tlZCkge1xuXHQgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSAnc2V0LXJlY3RhbmdsZScgfHwgdHlwZSA9PT0gJ3NldC1yYWRpbycgfHwgdHlwZSA9PT0gJ3Byb2R1Y3QtbGlzdCcpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGFiZWwgPSBjaGVja2VkLmxhYmVsc1swXS5pbm5lclRleHQ7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYWJlbCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5wdXNoKGAke29wdGlvblRpdGxlfToke2xhYmVsfWApO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCh2YWx1ZS5jaGlsZHJlblswXSkuZmluZCgnW2RhdGEtb3B0aW9uLXZhbHVlXScpLnRleHQobGFiZWwpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdzd2F0Y2gnKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxhYmVsID0gY2hlY2tlZC5sYWJlbHNbMF0uY2hpbGRyZW5bMF07XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYWJlbCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5wdXNoKGAke29wdGlvblRpdGxlfToke2xhYmVsLnRpdGxlfWApO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCh2YWx1ZS5jaGlsZHJlblswXSkuZmluZCgnW2RhdGEtb3B0aW9uLXZhbHVlXScpLnRleHQobGFiZWwudGl0bGUpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdpbnB1dC1jaGVja2JveCcpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5wdXNoKGAke29wdGlvblRpdGxlfTpZZXNgKTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSAnaW5wdXQtY2hlY2tib3gnKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5wdXNoKGAke29wdGlvblRpdGxlfTpOb2ApO1xuXHQgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICBpZiAocmVxdWlyZWQpIHtcblx0ICAgICAgICAgICAgICAgICAgICB1bnNhdGlzZmllZFJlcXVpcmVkRmllbGRzLnB1c2godmFsdWUpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSk7XG5cblx0ICAgICAgICBsZXQgcHJvZHVjdFZhcmlhbnQgPSB1bnNhdGlzZmllZFJlcXVpcmVkRmllbGRzLmxlbmd0aCA9PT0gMCA/IG9wdGlvbnMuc29ydCgpIDogJ3Vuc2F0aXNmaWVkJztcblxuXHQgICAgICAgIGlmIChwcm9kdWN0VmFyaWFudCkge1xuXHQgICAgICAgIFx0aXRlbS5maW5kKCcucHJvZHVjdC1lZGl0LXZhcmlhbnQnKS5lbXB0eSgpO1xuXG5cdCAgICAgICAgXHQkLmVhY2gocHJvZHVjdFZhcmlhbnQsIChpbmRleCwgdmFsdWUpID0+IHtcblx0ICAgICAgICAgICAgXHRpdGVtLmZpbmQoJy5wcm9kdWN0LWVkaXQtdmFyaWFudCcpLmFwcGVuZCgnPHNwYW4+Jytwcm9kdWN0VmFyaWFudFtpbmRleF0udG9TdHJpbmcoKS5zcGxpdCgnOicpLnBvcCgpKyc8L3NwYW4+Jyk7XG5cdCAgICAgICAgXHR9KTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIGdldFZpZXdNb2RlbCgkc2NvcGUpIHtcblx0ICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgICAkcHJpY2VXaXRoVGF4OiAkKCdbZGF0YS1wcm9kdWN0LXByaWNlLXdpdGgtdGF4XScsICRzY29wZSksXG5cdCAgICAgICAgICAgICRwcmljZVdpdGhvdXRUYXg6ICQoJ1tkYXRhLXByb2R1Y3QtcHJpY2Utd2l0aG91dC10YXhdJywgJHNjb3BlKSxcblx0ICAgICAgICAgICAgcnJwV2l0aFRheDoge1xuXHQgICAgICAgICAgICAgICAgJGRpdjogJCgnLnJycC1wcmljZS0td2l0aFRheCcsICRzY29wZSksXG5cdCAgICAgICAgICAgICAgICAkc3BhbjogJCgnW2RhdGEtcHJvZHVjdC1ycnAtd2l0aC10YXhdJywgJHNjb3BlKSxcblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgcnJwV2l0aG91dFRheDoge1xuXHQgICAgICAgICAgICAgICAgJGRpdjogJCgnLnJycC1wcmljZS0td2l0aG91dFRheCcsICRzY29wZSksXG5cdCAgICAgICAgICAgICAgICAkc3BhbjogJCgnW2RhdGEtcHJvZHVjdC1ycnAtcHJpY2Utd2l0aG91dC10YXhdJywgJHNjb3BlKSxcblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgbm9uU2FsZVdpdGhUYXg6IHtcblx0ICAgICAgICAgICAgICAgICRkaXY6ICQoJy5ub24tc2FsZS1wcmljZS0td2l0aFRheCcsICRzY29wZSksXG5cdCAgICAgICAgICAgICAgICAkc3BhbjogJCgnW2RhdGEtcHJvZHVjdC1ub24tc2FsZS1wcmljZS13aXRoLXRheF0nLCAkc2NvcGUpLFxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBub25TYWxlV2l0aG91dFRheDoge1xuXHQgICAgICAgICAgICAgICAgJGRpdjogJCgnLm5vbi1zYWxlLXByaWNlLS13aXRob3V0VGF4JywgJHNjb3BlKSxcblx0ICAgICAgICAgICAgICAgICRzcGFuOiAkKCdbZGF0YS1wcm9kdWN0LW5vbi1zYWxlLXByaWNlLXdpdGhvdXQtdGF4XScsICRzY29wZSksXG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIHByaWNlU2F2ZWQ6IHtcblx0ICAgICAgICAgICAgICAgICRkaXY6ICQoJy5wcmljZS1zZWN0aW9uLS1zYXZpbmcnLCAkc2NvcGUpLFxuXHQgICAgICAgICAgICAgICAgJHNwYW46ICQoJ1tkYXRhLXByb2R1Y3QtcHJpY2Utc2F2ZWRdJywgJHNjb3BlKSxcblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgcHJpY2VOb3dMYWJlbDoge1xuXHQgICAgICAgICAgICAgICAgJHNwYW46ICQoJy5wcmljZS1ub3ctbGFiZWwnLCAkc2NvcGUpLFxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBwcmljZUxhYmVsOiB7XG5cdCAgICAgICAgICAgICAgICAkc3BhbjogJCgnLnByaWNlLWxhYmVsJywgJHNjb3BlKSxcblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgJHN0b2NrTGVmdDogJCgnW2RhdGEtc3RvY2stbGVmdF0nLCAkc2NvcGUpLFxuXHQgICAgICAgICAgICAkc3RvY2tMZWZ0V3JhcHBlcjogJCgnLnByb2R1Y3QtZWRpdC1vcHRpb25zU3RvY2snLCAkc2NvcGUpLFxuXHQgICAgICAgICAgICAkcXVhbnRpdHk6IHtcblx0ICAgICAgICAgICAgICAgICRpbnB1dDogJCgnLnByb2R1Y3QtZWRpdC1pbmNyZW1lbnQgW25hbWU9cXR5XFxcXFtcXFxcXV0nLCAkc2NvcGUpLFxuXHQgICAgICAgICAgICAgICAgJGRlYzogJCgnLnByb2R1Y3QtZWRpdC1pbmNyZW1lbnQgW2RhdGEtYWN0aW9uPVwiZGVjXCJdJywgJHNjb3BlKSxcblx0ICAgICAgICAgICAgICAgICRpbmM6ICQoJy5wcm9kdWN0LWVkaXQtaW5jcmVtZW50IFtkYXRhLWFjdGlvbj1cImluY1wiXScsICRzY29wZSksXG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgICRpbWFnZTogJCgnLnByb2R1Y3QtZWRpdC1pbWFnZScsICRzY29wZSlcblx0ICAgICAgICB9O1xuXHQgICAgfVxuXG5cdCAgICBmdW5jdGlvbiB1cGRhdGVQcm9kdWN0QXR0cmlidXRlcygkc2NvcGUsIGRhdGEpIHtcblx0ICAgICAgICBjb25zdCBiZWhhdmlvciA9IGRhdGEub3V0X29mX3N0b2NrX2JlaGF2aW9yO1xuXHQgICAgICAgIGNvbnN0IGluU3RvY2tJZHMgPSBkYXRhLmluX3N0b2NrX2F0dHJpYnV0ZXM7XG5cdCAgICAgICAgY29uc3Qgb3V0T2ZTdG9ja01lc3NhZ2UgPSBgICgke2RhdGEub3V0X29mX3N0b2NrX21lc3NhZ2V9KWA7XG5cblx0ICAgICAgICBpZiAoYmVoYXZpb3IgIT09ICdoaWRlX29wdGlvbicgJiYgYmVoYXZpb3IgIT09ICdsYWJlbF9vcHRpb24nKSB7XG5cdCAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICAkKCdbZGF0YS1wcm9kdWN0LWF0dHJpYnV0ZS12YWx1ZV0nLCAkc2NvcGUpLmVhY2goKGksIGF0dHJpYnV0ZSkgPT4ge1xuXHQgICAgICAgICAgICBjb25zdCAkYXR0cmlidXRlID0gJChhdHRyaWJ1dGUpO1xuXHQgICAgICAgICAgICBjb25zdCBhdHRySWQgPSBwYXJzZUludCgkYXR0cmlidXRlLmRhdGEoJ3Byb2R1Y3RBdHRyaWJ1dGVWYWx1ZScpLCAxMCk7XG5cblx0ICAgICAgICAgICAgaWYgKGluU3RvY2tJZHMuaW5kZXhPZihhdHRySWQpICE9PSAtMSkge1xuXHQgICAgICAgICAgICAgICAgZW5hYmxlQXR0cmlidXRlKCRhdHRyaWJ1dGUsIGJlaGF2aW9yLCBvdXRPZlN0b2NrTWVzc2FnZSk7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICBkaXNhYmxlQXR0cmlidXRlKCRhdHRyaWJ1dGUsIGJlaGF2aW9yLCBvdXRPZlN0b2NrTWVzc2FnZSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9KTtcblx0ICAgIH1cblxuXHQgICAgZnVuY3Rpb24gc2hvd1Byb2R1Y3RJbWFnZSgkc2NvcGUsIGRhdGEpIHtcblx0ICAgIFx0Y29uc3Qgdmlld01vZGVsID0gZ2V0Vmlld01vZGVsKCRzY29wZSk7XG5cblx0ICAgICAgICBpZiAoXy5pc1BsYWluT2JqZWN0KGRhdGEuaW1hZ2UpKSB7XG5cdCAgICAgICAgICAgIGNvbnN0IG1haW5JbWFnZVVybCA9IHV0aWxzLnRvb2xzLmltYWdlU3Jjc2V0LmdldFNyY3NldChcblx0ICAgICAgICAgICAgICAgIGRhdGEuaW1hZ2UuZGF0YSwgeyAnMXgnOiBjb250ZXh0LnRoZW1lU2V0dGluZ3MucHJvZHVjdHRodW1iX3NpemUgfSxcblx0ICAgICAgICAgICAgKTtcblxuXHQgICAgICAgICAgICBjb25zdCBtYWluSW1hZ2VTcmNzZXQgPSB1dGlscy50b29scy5pbWFnZVNyY3NldC5nZXRTcmNzZXQoZGF0YS5pbWFnZS5kYXRhKTtcblxuXHQgICAgICAgICAgICB2aWV3TW9kZWwuJGltYWdlLmZpbmQoJ2ltZycpLmF0dHIoe1xuXHQgICAgICAgICAgICAgICAgJ3NyY3NldCc6IG1haW5JbWFnZVVybCxcblx0ICAgICAgICAgICAgICAgICdkYXRhLXNyY3NldCc6IG1haW5JbWFnZVNyY3NldFxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIHVwZGF0ZURlZmF1bHRBdHRyaWJ1dGVzRm9yT09TKCRzY29wZSwgZGF0YSkge1xuXHQgICAgICAgIGNvbnN0IHZpZXdNb2RlbCA9IGdldFZpZXdNb2RlbCgkc2NvcGUpO1xuXG5cdCAgICAgICAgaWYgKCFkYXRhLnB1cmNoYXNhYmxlIHx8ICFkYXRhLmluc3RvY2spIHtcblx0ICAgICAgICAgICAgJHNjb3BlLnJlbW92ZUNsYXNzKCdpcy12aXNpYmxlJykuYWRkQ2xhc3MoJ2lzLWhpZGRlbicpO1xuXHQgICAgICAgICAgICB2aWV3TW9kZWwuJHF1YW50aXR5LiRpbnB1dC5wcm9wKCdkaXNhYmxlZCcsIHRydWUpO1xuXHQgICAgICAgICAgICB2aWV3TW9kZWwuJHF1YW50aXR5LiRkZWMucHJvcCgnZGlzYWJsZWQnLCB0cnVlKTtcblx0ICAgICAgICAgICAgdmlld01vZGVsLiRxdWFudGl0eS4kaW5jLnByb3AoJ2Rpc2FibGVkJywgdHJ1ZSk7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgJHNjb3BlLnJlbW92ZUNsYXNzKCdpcy1oaWRkZW4nKS5hZGRDbGFzcygnaXMtdmlzaWJsZScpO1xuXHQgICAgICAgICAgICB2aWV3TW9kZWwuJHF1YW50aXR5LiRpbnB1dC5wcm9wKCdkaXNhYmxlZCcsIGZhbHNlKTtcblx0ICAgICAgICAgICAgdmlld01vZGVsLiRxdWFudGl0eS4kZGVjLnByb3AoJ2Rpc2FibGVkJywgZmFsc2UpO1xuXHQgICAgICAgICAgICB2aWV3TW9kZWwuJHF1YW50aXR5LiRpbmMucHJvcCgnZGlzYWJsZWQnLCBmYWxzZSk7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXG5cdCAgICBmdW5jdGlvbiBzaG93TWVzc2FnZUJveCgkc2NvcGUsIG1lc3NhZ2UpIHtcblx0ICAgICAgICBjb25zdCAkbWVzc2FnZUJveCA9ICQoJy5wcm9kdWN0LWVkaXQtbWVzc2FnZScsICRzY29wZSk7XG5cblx0ICAgICAgICBpZiAobWVzc2FnZSkge1xuXHQgICAgICAgICAgICAkKCcuYWxlcnRCb3gtbWVzc2FnZScsICRtZXNzYWdlQm94KS50ZXh0KG1lc3NhZ2UpO1xuXHQgICAgICAgICAgICAkbWVzc2FnZUJveC5zaG93KCk7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgJG1lc3NhZ2VCb3guaGlkZSgpO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblxuXHQgICAgZnVuY3Rpb24gY2xlYXJQcmljaW5nTm90Rm91bmQodmlld01vZGVsKSB7XG5cdCAgICAgICAgdmlld01vZGVsLnJycFdpdGhUYXguJGRpdi5oaWRlKCk7XG5cdCAgICAgICAgdmlld01vZGVsLnJycFdpdGhvdXRUYXguJGRpdi5oaWRlKCk7XG5cdCAgICAgICAgdmlld01vZGVsLm5vblNhbGVXaXRoVGF4LiRkaXYuaGlkZSgpO1xuXHQgICAgICAgIHZpZXdNb2RlbC5ub25TYWxlV2l0aG91dFRheC4kZGl2LmhpZGUoKTtcblx0ICAgICAgICB2aWV3TW9kZWwucHJpY2VTYXZlZC4kZGl2LmhpZGUoKTtcblx0ICAgICAgICB2aWV3TW9kZWwucHJpY2VOb3dMYWJlbC4kc3Bhbi5oaWRlKCk7XG5cdCAgICAgICAgdmlld01vZGVsLnByaWNlTGFiZWwuJHNwYW4uaGlkZSgpO1xuXHQgICAgfVxuXG5cdCAgICBmdW5jdGlvbiB1cGRhdGVQcmljZVZpZXcodmlld01vZGVsLCBwcmljZSkge1xuXHQgICAgICAgIGNsZWFyUHJpY2luZ05vdEZvdW5kKHZpZXdNb2RlbCk7XG5cblx0ICAgICAgICBpZiAocHJpY2Uud2l0aF90YXgpIHtcblx0ICAgICAgICAgICAgdmlld01vZGVsLnByaWNlTGFiZWwuJHNwYW4uc2hvdygpO1xuXHQgICAgICAgICAgICB2aWV3TW9kZWwuJHByaWNlV2l0aFRheC5odG1sKHByaWNlLndpdGhfdGF4LmZvcm1hdHRlZCk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaWYgKHByaWNlLndpdGhvdXRfdGF4KSB7XG5cdCAgICAgICAgICAgIHZpZXdNb2RlbC5wcmljZUxhYmVsLiRzcGFuLnNob3coKTtcblx0ICAgICAgICAgICAgdmlld01vZGVsLiRwcmljZVdpdGhvdXRUYXguaHRtbChwcmljZS53aXRob3V0X3RheC5mb3JtYXR0ZWQpO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGlmIChwcmljZS5ycnBfd2l0aF90YXgpIHtcblx0ICAgICAgICAgICAgdmlld01vZGVsLnJycFdpdGhUYXguJGRpdi5zaG93KCk7XG5cdCAgICAgICAgICAgIHZpZXdNb2RlbC5ycnBXaXRoVGF4LiRzcGFuLmh0bWwocHJpY2UucnJwX3dpdGhfdGF4LmZvcm1hdHRlZCk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaWYgKHByaWNlLnJycF93aXRob3V0X3RheCkge1xuXHQgICAgICAgICAgICB2aWV3TW9kZWwucnJwV2l0aG91dFRheC4kZGl2LnNob3coKTtcblx0ICAgICAgICAgICAgdmlld01vZGVsLnJycFdpdGhvdXRUYXguJHNwYW4uaHRtbChwcmljZS5ycnBfd2l0aG91dF90YXguZm9ybWF0dGVkKTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBpZiAocHJpY2Uuc2F2ZWQpIHtcblx0ICAgICAgICAgICAgdmlld01vZGVsLnByaWNlU2F2ZWQuJGRpdi5zaG93KCk7XG5cdCAgICAgICAgICAgIHZpZXdNb2RlbC5wcmljZVNhdmVkLiRzcGFuLmh0bWwocHJpY2Uuc2F2ZWQuZm9ybWF0dGVkKTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBpZiAocHJpY2Uubm9uX3NhbGVfcHJpY2Vfd2l0aF90YXgpIHtcblx0ICAgICAgICAgICAgdmlld01vZGVsLnByaWNlTGFiZWwuJHNwYW4uaGlkZSgpO1xuXHQgICAgICAgICAgICB2aWV3TW9kZWwubm9uU2FsZVdpdGhUYXguJGRpdi5zaG93KCk7XG5cdCAgICAgICAgICAgIHZpZXdNb2RlbC5wcmljZU5vd0xhYmVsLiRzcGFuLnNob3coKTtcblx0ICAgICAgICAgICAgdmlld01vZGVsLm5vblNhbGVXaXRoVGF4LiRzcGFuLmh0bWwocHJpY2Uubm9uX3NhbGVfcHJpY2Vfd2l0aF90YXguZm9ybWF0dGVkKTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBpZiAocHJpY2Uubm9uX3NhbGVfcHJpY2Vfd2l0aG91dF90YXgpIHtcblx0ICAgICAgICAgICAgdmlld01vZGVsLnByaWNlTGFiZWwuJHNwYW4uaGlkZSgpO1xuXHQgICAgICAgICAgICB2aWV3TW9kZWwubm9uU2FsZVdpdGhvdXRUYXguJGRpdi5zaG93KCk7XG5cdCAgICAgICAgICAgIHZpZXdNb2RlbC5wcmljZU5vd0xhYmVsLiRzcGFuLnNob3coKTtcblx0ICAgICAgICAgICAgdmlld01vZGVsLm5vblNhbGVXaXRob3V0VGF4LiRzcGFuLmh0bWwocHJpY2Uubm9uX3NhbGVfcHJpY2Vfd2l0aG91dF90YXguZm9ybWF0dGVkKTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIHVwZGF0ZVZpZXcoJHNjb3BlLCBkYXRhLCBjb250ZW50ID0gbnVsbCkge1xuXHQgICAgICAgIGNvbnN0IHZpZXdNb2RlbCA9IGdldFZpZXdNb2RlbCgkc2NvcGUpO1xuXG5cdCAgICAgICAgaWYgKF8uaXNOdW1iZXIoZGF0YS5zdG9jaykpIHtcblx0ICAgICAgICAgICAgaWYoKGRhdGEuc3RvY2sgPD0gcGFyc2VJbnQoY29udGV4dC50aGVtZVNldHRpbmdzLmhhbG9fc3RvY2tfbGV2ZWxfbGltaXQpKSAmJiAoZGF0YS5zdG9jayA+IDApKSB7XG5cdCAgICAgICAgICAgICAgICB2aWV3TW9kZWwuJHN0b2NrTGVmdFdyYXBwZXIucmVtb3ZlQ2xhc3MoJ3UtaGlkZGVuVmlzdWFsbHknKTtcblx0ICAgICAgICAgICAgICAgIHZpZXdNb2RlbC4kc3RvY2tMZWZ0LnRleHQoZGF0YS5zdG9jayk7XG5cdCAgICAgICAgICAgIH0gZWxzZXtcblx0ICAgICAgICAgICAgICAgIHZpZXdNb2RlbC4kc3RvY2tMZWZ0V3JhcHBlci5hZGRDbGFzcygndS1oaWRkZW5WaXN1YWxseScpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgdmlld01vZGVsLiRxdWFudGl0eS4kaW5wdXQuYXR0cignZGF0YS1zdG9jaycsIGRhdGEuc3RvY2spO1xuXHQgICAgICAgIH0gZWxzZXtcblx0ICAgICAgICBcdHZpZXdNb2RlbC4kcXVhbnRpdHkuJGlucHV0LnJlbW92ZUF0dHIoJ2RhdGEtc3RvY2snKTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBzaG93TWVzc2FnZUJveCgkc2NvcGUsIGRhdGEuc3RvY2tfbWVzc2FnZSB8fCBkYXRhLnB1cmNoYXNpbmdfbWVzc2FnZSk7XG5cblx0ICAgICAgICBpZiAoXy5pc09iamVjdChkYXRhLnByaWNlKSkge1xuXHQgICAgICAgICAgICB1cGRhdGVQcmljZVZpZXcodmlld01vZGVsLCBkYXRhLnByaWNlKTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICB1cGRhdGVEZWZhdWx0QXR0cmlidXRlc0Zvck9PUygkc2NvcGUsIGRhdGEpO1xuXHQgICAgICAgIHNob3dQcm9kdWN0SW1hZ2UoJHNjb3BlLCBkYXRhKTtcblx0ICAgIH1cblxuXHQgICAgZnVuY3Rpb24gZGlzYWJsZUF0dHJpYnV0ZSgkYXR0cmlidXRlLCBiZWhhdmlvciwgb3V0T2ZTdG9ja01lc3NhZ2UpIHtcblx0ICAgICAgICBpZiAoZ2V0QXR0cmlidXRlVHlwZSgkYXR0cmlidXRlKSA9PT0gJ3NldC1zZWxlY3QnKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBkaXNhYmxlU2VsZWN0T3B0aW9uQXR0cmlidXRlKCRhdHRyaWJ1dGUsIGJlaGF2aW9yLCBvdXRPZlN0b2NrTWVzc2FnZSk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaWYgKGJlaGF2aW9yID09PSAnaGlkZV9vcHRpb24nKSB7XG5cdCAgICAgICAgICAgICRhdHRyaWJ1dGUuaGlkZSgpO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICRhdHRyaWJ1dGUuYWRkQ2xhc3MoJ3VuYXZhaWxhYmxlJyk7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXG5cdCAgICBmdW5jdGlvbiBkaXNhYmxlU2VsZWN0T3B0aW9uQXR0cmlidXRlKCRhdHRyaWJ1dGUsIGJlaGF2aW9yLCBvdXRPZlN0b2NrTWVzc2FnZSkge1xuXHQgICAgICAgIGNvbnN0ICRzZWxlY3QgPSAkYXR0cmlidXRlLnBhcmVudCgpO1xuXG5cdCAgICAgICAgaWYgKGJlaGF2aW9yID09PSAnaGlkZV9vcHRpb24nKSB7XG5cdCAgICAgICAgICAgICRhdHRyaWJ1dGUudG9nZ2xlT3B0aW9uKGZhbHNlKTtcblxuXHQgICAgICAgICAgICBpZiAoJHNlbGVjdC52YWwoKSA9PT0gJGF0dHJpYnV0ZS5hdHRyKCd2YWx1ZScpKSB7XG5cdCAgICAgICAgICAgICAgICAkc2VsZWN0WzBdLnNlbGVjdGVkSW5kZXggPSAwO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgJGF0dHJpYnV0ZS5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpO1xuXHQgICAgICAgICAgICAkYXR0cmlidXRlLmh0bWwoJGF0dHJpYnV0ZS5odG1sKCkucmVwbGFjZShvdXRPZlN0b2NrTWVzc2FnZSwgJycpICsgb3V0T2ZTdG9ja01lc3NhZ2UpO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblxuXHQgICAgZnVuY3Rpb24gZW5hYmxlQXR0cmlidXRlKCRhdHRyaWJ1dGUsIGJlaGF2aW9yLCBvdXRPZlN0b2NrTWVzc2FnZSkge1xuXHQgICAgICAgIGlmIChnZXRBdHRyaWJ1dGVUeXBlKCRhdHRyaWJ1dGUpID09PSAnc2V0LXNlbGVjdCcpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIGVuYWJsZVNlbGVjdE9wdGlvbkF0dHJpYnV0ZSgkYXR0cmlidXRlLCBiZWhhdmlvciwgb3V0T2ZTdG9ja01lc3NhZ2UpO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGlmIChiZWhhdmlvciA9PT0gJ2hpZGVfb3B0aW9uJykge1xuXHQgICAgICAgICAgICAkYXR0cmlidXRlLnNob3coKTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAkYXR0cmlidXRlLnJlbW92ZUNsYXNzKCd1bmF2YWlsYWJsZScpO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblxuXHQgICAgZnVuY3Rpb24gZW5hYmxlU2VsZWN0T3B0aW9uQXR0cmlidXRlKCRhdHRyaWJ1dGUsIGJlaGF2aW9yLCBvdXRPZlN0b2NrTWVzc2FnZSkge1xuXHQgICAgICAgIGlmIChiZWhhdmlvciA9PT0gJ2hpZGVfb3B0aW9uJykge1xuXHQgICAgICAgICAgICAkYXR0cmlidXRlLnRvZ2dsZU9wdGlvbih0cnVlKTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAkYXR0cmlidXRlLnByb3AoJ2Rpc2FibGVkJywgZmFsc2UpO1xuXHQgICAgICAgICAgICAkYXR0cmlidXRlLmh0bWwoJGF0dHJpYnV0ZS5odG1sKCkucmVwbGFjZShvdXRPZlN0b2NrTWVzc2FnZSwgJycpKTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIGdldEF0dHJpYnV0ZVR5cGUoJGF0dHJpYnV0ZSkge1xuXHQgICAgICAgIGNvbnN0ICRwYXJlbnQgPSAkYXR0cmlidXRlLmNsb3Nlc3QoJ1tkYXRhLXByb2R1Y3QtYXR0cmlidXRlXScpO1xuXG5cdCAgICAgICAgcmV0dXJuICRwYXJlbnQgPyAkcGFyZW50LmRhdGEoJ3Byb2R1Y3RBdHRyaWJ1dGUnKSA6IG51bGw7XG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIHVwZGF0ZUNhcnRDb250ZW50KCl7XG5cdCAgICBcdGlmICghJCgnYm9keScpLmhhc0NsYXNzKCdwYWdlLXR5cGUtY2FydCcpKSB7XG5cdCAgICBcdFx0Y29uc3QgbG9hZGluZ0NsYXNzID0gJ2lzLWxvYWRpbmcnO1xuXHRcdFx0ICAgIGNvbnN0ICRjYXJ0RHJvcGRvd24gPSAkKCcjaGFsby1jYXJ0LXNpZGViYXIgLmhhbG8tc2lkZWJhci13cmFwcGVyJyk7XG5cdFx0XHQgICAgY29uc3QgJGNhcnRMb2FkaW5nID0gJCgnPGRpdiBjbGFzcz1cImxvYWRpbmdPdmVybGF5XCI+PC9kaXY+Jyk7XG5cdFx0XHQgICAgY29uc3QgJGJvZHkgPSAkKCdib2R5Jyk7XG5cblx0XHQgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG5cdFx0ICAgICAgICAgICAgdGVtcGxhdGU6ICdjb21tb24vY2FydC1wcmV2aWV3Jyxcblx0XHQgICAgICAgIH07XG5cblx0XHQgICAgICAgICRjYXJ0RHJvcGRvd25cblx0XHQgICAgICAgICAgICAuYWRkQ2xhc3MobG9hZGluZ0NsYXNzKVxuXHRcdCAgICAgICAgICAgIC5wcmVwZW5kKCRjYXJ0TG9hZGluZyk7XG5cdFx0ICAgICAgICAkY2FydExvYWRpbmdcblx0XHQgICAgICAgICAgICAuc2hvdygpO1xuXG5cdFx0ICAgICAgICB1dGlscy5hcGkuY2FydC5nZXRDb250ZW50KG9wdGlvbnMsIChlcnIsIHJlc3BvbnNlKSA9PiB7XG5cdFx0ICAgICAgICAgICAgJGNhcnREcm9wZG93blxuXHRcdCAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MobG9hZGluZ0NsYXNzKVxuXHRcdCAgICAgICAgICAgICAgICAuaHRtbChyZXNwb25zZSk7XG5cdFx0ICAgICAgICAgICAgJGNhcnRMb2FkaW5nXG5cdFx0ICAgICAgICAgICAgICAgIC5oaWRlKCk7XG5cblx0XHQgICAgICAgICAgICBjb25zdCBxdWFudGl0eSA9ICQocmVzcG9uc2UpLmZpbmQoJ1tkYXRhLWNhcnQtcXVhbnRpdHldJykuZGF0YSgnY2FydFF1YW50aXR5JykgfHwgJCgnW2RhdGEtY2FydC1xdWFudGl0eV0nKS5kYXRhKCdjYXJ0UXVhbnRpdHknKSB8fCAwO1xuXG5cdFx0ICAgICAgICAgICAgJGJvZHkudHJpZ2dlcignY2FydC1xdWFudGl0eS11cGRhdGUnLCBxdWFudGl0eSk7XG5cdFx0ICAgICAgICAgICAgaGFsb0NhbGN1bGF0ZUZyZWVTaGlwcGluZyhjb250ZXh0KTtcblx0XHQgICAgICAgIH0pO1xuXHRcdCAgICB9IGVsc2Uge1xuXHRcdCAgICBcdHJlZnJlc2hDb250ZW50KCk7XG5cdFx0ICAgIFx0aGFsb0NhbGN1bGF0ZUZyZWVTaGlwcGluZyhjb250ZXh0KTtcblx0XHQgICAgfVxuXHQgICAgfVxuXG5cdCAgICBmdW5jdGlvbiByZWZyZXNoQ29udGVudChyZW1vdmUpIHtcblx0ICAgICAgICBjb25zdCAkY2FydEl0ZW1zUm93cyA9ICQoJ1tkYXRhLWl0ZW0tcm93XScsICRjYXJ0Q29udGVudCk7XG5cdCAgICAgICAgY29uc3QgJGNhcnRQYWdlVGl0bGUgPSAkKCdbZGF0YS1jYXJ0LXBhZ2UtdGl0bGVdJyk7XG5cblx0ICAgICAgICBjb25zdCBvcHRpb25zID0ge1xuXHQgICAgICAgICAgICB0ZW1wbGF0ZToge1xuXHQgICAgICAgICAgICAgICAgY29udGVudDogJ2NhcnQvY29udGVudCcsXG5cdCAgICAgICAgICAgICAgICB0b3RhbHM6ICdjYXJ0L3RvdGFscycsXG5cdCAgICAgICAgICAgICAgICBwYWdlVGl0bGU6ICdjYXJ0L3BhZ2UtdGl0bGUnLFxuXHQgICAgICAgICAgICAgICAgc3RhdHVzTWVzc2FnZXM6ICdjYXJ0L3N0YXR1cy1tZXNzYWdlcycsXG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgfTtcblxuXHQgICAgICAgICRvdmVybGF5LnNob3coKTtcblxuXHQgICAgICAgIC8vIFJlbW92ZSBsYXN0IGl0ZW0gZnJvbSBjYXJ0PyBSZWxvYWRcblx0ICAgICAgICBpZiAocmVtb3ZlICYmICRjYXJ0SXRlbXNSb3dzLmxlbmd0aCA9PT0gMSkge1xuXHQgICAgICAgICAgICByZXR1cm4gd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHV0aWxzLmFwaS5jYXJ0LmdldENvbnRlbnQob3B0aW9ucywgKGVyciwgcmVzcG9uc2UpID0+IHtcblx0ICAgICAgICAgICAgJGNhcnRDb250ZW50Lmh0bWwocmVzcG9uc2UuY29udGVudCk7XG5cdCAgICAgICAgICAgICRjYXJ0VG90YWxzLmh0bWwocmVzcG9uc2UudG90YWxzKTtcblx0ICAgICAgICAgICAgJGNhcnRNZXNzYWdlcy5odG1sKHJlc3BvbnNlLnN0YXR1c01lc3NhZ2VzKTtcblxuXHQgICAgICAgICAgICAkY2FydFBhZ2VUaXRsZS5yZXBsYWNlV2l0aChyZXNwb25zZS5wYWdlVGl0bGUpO1xuXHQgICAgICAgICAgICBiaW5kRXZlbnRzKCk7XG5cdCAgICAgICAgICAgICRvdmVybGF5LmhpZGUoKTtcblxuXHQgICAgICAgICAgICBjb25zdCBxdWFudGl0eSA9ICQoJ1tkYXRhLWNhcnQtcXVhbnRpdHldJywgJGNhcnRDb250ZW50KS5kYXRhKCdjYXJ0UXVhbnRpdHknKSB8fCAwO1xuXG5cdCAgICAgICAgICAgICQoJ2JvZHknKS50cmlnZ2VyKCdjYXJ0LXF1YW50aXR5LXVwZGF0ZScsIHF1YW50aXR5KTtcblx0ICAgICAgICB9KTtcblx0ICAgIH1cblxuXHQgICAgZnVuY3Rpb24gY2FydFVwZGF0ZSgkdGFyZ2V0KSB7XG5cdCAgICAgICAgY29uc3QgaXRlbUlkID0gJHRhcmdldC5kYXRhKCdjYXJ0SXRlbWlkJyk7XG5cdCAgICAgICAgY29uc3QgJGVsID0gJChgI3F0eS0ke2l0ZW1JZH1gKTtcblx0ICAgICAgICBjb25zdCBvbGRRdHkgPSBwYXJzZUludCgkZWwudmFsKCksIDEwKTtcblx0ICAgICAgICBjb25zdCBtYXhRdHkgPSBwYXJzZUludCgkZWwuZGF0YSgncXVhbnRpdHlNYXgnKSwgMTApO1xuXHQgICAgICAgIGNvbnN0IG1pblF0eSA9IHBhcnNlSW50KCRlbC5kYXRhKCdxdWFudGl0eU1pbicpLCAxMCk7XG5cdCAgICAgICAgY29uc3QgbWluRXJyb3IgPSAkZWwuZGF0YSgncXVhbnRpdHlNaW5FcnJvcicpO1xuXHQgICAgICAgIGNvbnN0IG1heEVycm9yID0gJGVsLmRhdGEoJ3F1YW50aXR5TWF4RXJyb3InKTtcblx0ICAgICAgICBjb25zdCBuZXdRdHkgPSAkdGFyZ2V0LmRhdGEoJ2FjdGlvbicpID09PSAnaW5jJyA/IG9sZFF0eSArIDEgOiBvbGRRdHkgLSAxO1xuXHQgICAgICAgIC8vIERvZXMgbm90IHF1YWxpdHkgZm9yIG1pbi9tYXggcXVhbnRpdHlcblx0ICAgICAgICBpZiAobmV3UXR5IDwgbWluUXR5KSB7XG5cdCAgICAgICAgICAgIHJldHVybiBzd2FsLmZpcmUoe1xuXHQgICAgICAgICAgICAgICAgdGV4dDogbWluRXJyb3IsXG5cdCAgICAgICAgICAgICAgICBpY29uOiAnZXJyb3InLFxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9IGVsc2UgaWYgKG1heFF0eSA+IDAgJiYgbmV3UXR5ID4gbWF4UXR5KSB7XG5cdCAgICAgICAgICAgIHJldHVybiBzd2FsLmZpcmUoe1xuXHQgICAgICAgICAgICAgICAgdGV4dDogbWF4RXJyb3IsXG5cdCAgICAgICAgICAgICAgICBpY29uOiAnZXJyb3InLFxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICAkb3ZlcmxheS5zaG93KCk7XG5cblx0ICAgICAgICB1dGlscy5hcGkuY2FydC5pdGVtVXBkYXRlKGl0ZW1JZCwgbmV3UXR5LCAoZXJyLCByZXNwb25zZSkgPT4ge1xuXHQgICAgICAgICAgICAkb3ZlcmxheS5oaWRlKCk7XG5cblx0ICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuc3RhdHVzID09PSAnc3VjY2VlZCcpIHtcblx0ICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBxdWFudGl0eSBpcyBjaGFuZ2VkIFwiMVwiIGZyb20gXCIwXCIsIHdlIGhhdmUgdG8gcmVtb3ZlIHRoZSByb3cuXG5cdCAgICAgICAgICAgICAgICBjb25zdCByZW1vdmUgPSAobmV3UXR5ID09PSAwKTtcblxuXHQgICAgICAgICAgICAgICAgcmVmcmVzaENvbnRlbnQocmVtb3ZlKTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICRlbC52YWwob2xkUXR5KTtcblx0ICAgICAgICAgICAgICAgIHN3YWwuZmlyZSh7XG5cdCAgICAgICAgICAgICAgICAgICAgdGV4dDogcmVzcG9uc2UuZGF0YS5lcnJvcnMuam9pbignXFxuJyksXG5cdCAgICAgICAgICAgICAgICAgICAgaWNvbjogJ2Vycm9yJyxcblx0ICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSk7XG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIGNhcnRVcGRhdGVRdHlUZXh0Q2hhbmdlKCR0YXJnZXQsIHByZVZhbCA9IG51bGwpIHtcblx0ICAgICAgICBjb25zdCBpdGVtSWQgPSAkdGFyZ2V0LmRhdGEoJ2NhcnRJdGVtaWQnKTtcblx0ICAgICAgICBjb25zdCAkZWwgPSAkKGAjcXR5LSR7aXRlbUlkfWApO1xuXHQgICAgICAgIGNvbnN0IG1heFF0eSA9IHBhcnNlSW50KCRlbC5kYXRhKCdxdWFudGl0eU1heCcpLCAxMCk7XG5cdCAgICAgICAgY29uc3QgbWluUXR5ID0gcGFyc2VJbnQoJGVsLmRhdGEoJ3F1YW50aXR5TWluJyksIDEwKTtcblx0ICAgICAgICBjb25zdCBvbGRRdHkgPSBwcmVWYWwgIT09IG51bGwgPyBwcmVWYWwgOiBtaW5RdHk7XG5cdCAgICAgICAgY29uc3QgbWluRXJyb3IgPSAkZWwuZGF0YSgncXVhbnRpdHlNaW5FcnJvcicpO1xuXHQgICAgICAgIGNvbnN0IG1heEVycm9yID0gJGVsLmRhdGEoJ3F1YW50aXR5TWF4RXJyb3InKTtcblx0ICAgICAgICBjb25zdCBuZXdRdHkgPSBwYXJzZUludChOdW1iZXIoJGVsLnZhbCgpKSwgMTApO1xuXHQgICAgICAgIGxldCBpbnZhbGlkRW50cnk7XG5cblx0ICAgICAgICAvLyBEb2VzIG5vdCBxdWFsaXR5IGZvciBtaW4vbWF4IHF1YW50aXR5XG5cdCAgICAgICAgaWYgKCFuZXdRdHkpIHtcblx0ICAgICAgICAgICAgaW52YWxpZEVudHJ5ID0gJGVsLnZhbCgpO1xuXHQgICAgICAgICAgICAkZWwudmFsKG9sZFF0eSk7XG5cdCAgICAgICAgICAgIHJldHVybiBzd2FsLmZpcmUoe1xuXHQgICAgICAgICAgICAgICAgdGV4dDogYCR7aW52YWxpZEVudHJ5fSBpcyBub3QgYSB2YWxpZCBlbnRyeWAsXG5cdCAgICAgICAgICAgICAgICBpY29uOiAnZXJyb3InLFxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9IGVsc2UgaWYgKG5ld1F0eSA8IG1pblF0eSkge1xuXHQgICAgICAgICAgICAkZWwudmFsKG9sZFF0eSk7XG5cdCAgICAgICAgICAgIHJldHVybiBzd2FsLmZpcmUoe1xuXHQgICAgICAgICAgICAgICAgdGV4dDogbWluRXJyb3IsXG5cdCAgICAgICAgICAgICAgICBpY29uOiAnZXJyb3InLFxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9IGVsc2UgaWYgKG1heFF0eSA+IDAgJiYgbmV3UXR5ID4gbWF4UXR5KSB7XG5cdCAgICAgICAgICAgICRlbC52YWwob2xkUXR5KTtcblx0ICAgICAgICAgICAgcmV0dXJuIHN3YWwuZmlyZSh7XG5cdCAgICAgICAgICAgICAgICB0ZXh0OiBtYXhFcnJvcixcblx0ICAgICAgICAgICAgICAgIGljb246ICdlcnJvcicsXG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgICRvdmVybGF5LnNob3coKTtcblxuXHQgICAgICAgIHV0aWxzLmFwaS5jYXJ0Lml0ZW1VcGRhdGUoaXRlbUlkLCBuZXdRdHksIChlcnIsIHJlc3BvbnNlKSA9PiB7XG5cdCAgICAgICAgICAgICRvdmVybGF5LmhpZGUoKTtcblxuXHQgICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5zdGF0dXMgPT09ICdzdWNjZWVkJykge1xuXHQgICAgICAgICAgICAgICAgLy8gaWYgdGhlIHF1YW50aXR5IGlzIGNoYW5nZWQgXCIxXCIgZnJvbSBcIjBcIiwgd2UgaGF2ZSB0byByZW1vdmUgdGhlIHJvdy5cblx0ICAgICAgICAgICAgICAgIGNvbnN0IHJlbW92ZSA9IChuZXdRdHkgPT09IDApO1xuXG5cdCAgICAgICAgICAgICAgICByZWZyZXNoQ29udGVudChyZW1vdmUpO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgJGVsLnZhbChvbGRRdHkpO1xuXHQgICAgICAgICAgICAgICAgc3dhbC5maXJlKHtcblx0ICAgICAgICAgICAgICAgICAgICB0ZXh0OiByZXNwb25zZS5kYXRhLmVycm9ycy5qb2luKCdcXG4nKSxcblx0ICAgICAgICAgICAgICAgICAgICBpY29uOiAnZXJyb3InLFxuXHQgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9KTtcblx0ICAgIH1cblxuXHQgICAgZnVuY3Rpb24gY2FydFJlbW92ZUl0ZW0oaXRlbUlkKSB7XG5cdCAgICAgICAgJG92ZXJsYXkuc2hvdygpO1xuXHQgICAgICAgIHV0aWxzLmFwaS5jYXJ0Lml0ZW1SZW1vdmUoaXRlbUlkLCAoZXJyLCByZXNwb25zZSkgPT4ge1xuXHQgICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5zdGF0dXMgPT09ICdzdWNjZWVkJykge1xuXHQgICAgICAgICAgICAgICAgcmVmcmVzaENvbnRlbnQodHJ1ZSk7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICBzd2FsLmZpcmUoe1xuXHQgICAgICAgICAgICAgICAgICAgIHRleHQ6IHJlc3BvbnNlLmRhdGEuZXJyb3JzLmpvaW4oJ1xcbicpLFxuXHQgICAgICAgICAgICAgICAgICAgIGljb246ICdlcnJvcicsXG5cdCAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0pO1xuXHQgICAgfVxuXG5cdCAgICBmdW5jdGlvbiBiaW5kQ2FydEV2ZW50cygpIHtcblx0ICAgICAgICAvLyBjb25zdCBkZWJvdW5jZVRpbWVvdXQgPSA0MDA7XG5cdCAgICAgICAgLy8gY29uc3QgY2FydFVwZGF0ZSA9IF8uYmluZChfLmRlYm91bmNlKHRoaXMuY2FydFVwZGF0ZSwgZGVib3VuY2VUaW1lb3V0KSwgdGhpcyk7XG5cdCAgICAgICAgLy8gY29uc3QgY2FydFVwZGF0ZVF0eVRleHRDaGFuZ2UgPSBfLmJpbmQoXy5kZWJvdW5jZSh0aGlzLmNhcnRVcGRhdGVRdHlUZXh0Q2hhbmdlLCBkZWJvdW5jZVRpbWVvdXQpLCB0aGlzKTtcblx0ICAgICAgICAvLyBjb25zdCBjYXJ0UmVtb3ZlSXRlbSA9IF8uYmluZChfLmRlYm91bmNlKHRoaXMuY2FydFJlbW92ZUl0ZW0sIGRlYm91bmNlVGltZW91dCksIHRoaXMpO1xuXHQgICAgICAgIGxldCBwcmVWYWw7XG5cblx0ICAgICAgICAkKCdbZGF0YS1jYXJ0LXVwZGF0ZV0nLCAkY2FydENvbnRlbnQpLm9uKCdjbGljaycsIGV2ZW50ID0+IHtcblx0ICAgICAgICAgICAgY29uc3QgJHRhcmdldCA9ICQoZXZlbnQuY3VycmVudFRhcmdldCk7XG5cblx0ICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuXHQgICAgICAgICAgICBjYXJ0VXBkYXRlKCR0YXJnZXQpO1xuXHQgICAgICAgIH0pO1xuXG5cdCAgICAgICAgJCgnW2RhdGEtY2FydC11cGRhdGVdJywgJGNhcnRDb250ZW50KS5vbignY2xpY2snLCBldmVudCA9PiB7XG5cdCAgICAgICAgICAgIGNvbnN0ICR0YXJnZXQgPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpO1xuXHQgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdCAgICAgICAgICAgIGNhcnRVcGRhdGUoJHRhcmdldCk7XG5cdCAgICAgICAgfSk7XG5cblx0ICAgICAgICAkKCcuY2FydC1pdGVtLXF0eS1pbnB1dCcsICRjYXJ0Q29udGVudCkub24oJ2ZvY3VzJywgKGV2ZW50KSA9PiB7XG5cdCAgICAgICAgICAgIHByZVZhbCA9ICQoZXZlbnQuY3VycmVudFRhcmdldCkudmFsKCk7XG5cdCAgICAgICAgfSkuY2hhbmdlKGV2ZW50ID0+IHtcblx0ICAgICAgICAgICAgY29uc3QgJHRhcmdldCA9ICQoZXZlbnQuY3VycmVudFRhcmdldCk7XG5cdCAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cblx0ICAgICAgICAgICAgY2FydFVwZGF0ZVF0eVRleHRDaGFuZ2UoJHRhcmdldCwgcHJlVmFsKTtcblx0ICAgICAgICB9KTtcblxuXHQgICAgICAgICQoJy5jYXJ0LXJlbW92ZScsICRjYXJ0Q29udGVudCkub24oJ2NsaWNrJywgZXZlbnQgPT4ge1xuXHQgICAgICAgICAgICBjb25zdCBpdGVtSWQgPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLmRhdGEoJ2NhcnRJdGVtaWQnKTtcblx0ICAgICAgICAgICAgY29uc3Qgc3RyaW5nID0gJChldmVudC5jdXJyZW50VGFyZ2V0KS5kYXRhKCdjb25maXJtRGVsZXRlJyk7XG5cblx0ICAgICAgICAgICAgc3dhbC5maXJlKHtcblx0ICAgICAgICAgICAgICAgIHRleHQ6IHN0cmluZyxcblx0ICAgICAgICAgICAgICAgIGljb246ICd3YXJuaW5nJyxcblx0ICAgICAgICAgICAgICAgIHNob3dDYW5jZWxCdXR0b246IHRydWUsXG5cdCAgICAgICAgICAgIH0pLnRoZW4oKHJlc3VsdCkgPT4ge1xuXHQgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC52YWx1ZSkge1xuXHQgICAgICAgICAgICAgICAgICAgIGNhcnRSZW1vdmVJdGVtKGl0ZW1JZCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHQgICAgICAgIH0pO1xuXHQgICAgfVxuXG5cdCAgICBmdW5jdGlvbiBiaW5kUHJvbW9Db2RlRXZlbnRzKCkge1xuXHQgICAgICAgIGNvbnN0ICRjb3Vwb25Db250YWluZXIgPSAkKCcuY291cG9uLWNvZGUnKTtcblx0ICAgICAgICBjb25zdCAkY291cG9uRm9ybSA9ICQoJy5jb3Vwb24tZm9ybScpO1xuXHQgICAgICAgIGNvbnN0ICRjb2RlSW5wdXQgPSAkKCdbbmFtZT1cImNvdXBvbmNvZGVcIl0nLCAkY291cG9uRm9ybSk7XG5cblx0ICAgICAgICAkKCcuY291cG9uLWNvZGUtYWRkJykub24oJ2NsaWNrJywgZXZlbnQgPT4ge1xuXHQgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdCAgICAgICAgICAgICQoZXZlbnQuY3VycmVudFRhcmdldCkuaGlkZSgpO1xuXHQgICAgICAgICAgICAkY291cG9uQ29udGFpbmVyLnNob3coKTtcblx0ICAgICAgICAgICAgJCgnLmNvdXBvbi1jb2RlLWNhbmNlbCcpLnNob3coKTtcblx0ICAgICAgICAgICAgJGNvZGVJbnB1dC50cmlnZ2VyKCdmb2N1cycpO1xuXHQgICAgICAgIH0pO1xuXG5cdCAgICAgICAgJCgnLmNvdXBvbi1jb2RlLWNhbmNlbCcpLm9uKCdjbGljaycsIGV2ZW50ID0+IHtcblx0ICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuXHQgICAgICAgICAgICAkY291cG9uQ29udGFpbmVyLmhpZGUoKTtcblx0ICAgICAgICAgICAgJCgnLmNvdXBvbi1jb2RlLWNhbmNlbCcpLmhpZGUoKTtcblx0ICAgICAgICAgICAgJCgnLmNvdXBvbi1jb2RlLWFkZCcpLnNob3coKTtcblx0ICAgICAgICB9KTtcblxuXHQgICAgICAgICRjb3Vwb25Gb3JtLm9uKCdzdWJtaXQnLCBldmVudCA9PiB7XG5cdCAgICAgICAgICAgIGNvbnN0IGNvZGUgPSAkY29kZUlucHV0LnZhbCgpO1xuXG5cdCAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cblx0ICAgICAgICAgICAgaWYgKCFjb2RlKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gc3dhbCh7XG5cdCAgICAgICAgICAgICAgICAgICAgdGV4dDogJGNvZGVJbnB1dC5kYXRhKCdlcnJvcicpLFxuXHQgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdlcnJvcicsXG5cdCAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHV0aWxzLmFwaS5jYXJ0LmFwcGx5Q29kZShjb2RlLCAoZXJyLCByZXNwb25zZSkgPT4ge1xuXHQgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuc3RhdHVzID09PSAnc3VjY2VzcycpIHtcblx0ICAgICAgICAgICAgICAgICAgICByZWZyZXNoQ29udGVudCgpO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICBzd2FsKHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogcmVzcG9uc2UuZGF0YS5lcnJvcnMuam9pbignXFxuJyksXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdlcnJvcicsXG5cdCAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH0pO1xuXHQgICAgfVxuXG5cdCAgICBmdW5jdGlvbiBiaW5kR2lmdENlcnRpZmljYXRlRXZlbnRzKCkge1xuXHQgICAgICAgIGNvbnN0ICRjZXJ0Q29udGFpbmVyID0gJCgnLmdpZnQtY2VydGlmaWNhdGUtY29kZScpO1xuXHQgICAgICAgIGNvbnN0ICRjZXJ0Rm9ybSA9ICQoJy5jYXJ0LWdpZnQtY2VydGlmaWNhdGUtZm9ybScpO1xuXHQgICAgICAgIGNvbnN0ICRjZXJ0SW5wdXQgPSAkKCdbbmFtZT1cImNlcnRjb2RlXCJdJywgJGNlcnRGb3JtKTtcblxuXHQgICAgICAgICQoJy5naWZ0LWNlcnRpZmljYXRlLWFkZCcpLm9uKCdjbGljaycsIGV2ZW50ID0+IHtcblx0ICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0ICAgICAgICAgICAgJChldmVudC5jdXJyZW50VGFyZ2V0KS50b2dnbGUoKTtcblx0ICAgICAgICAgICAgJGNlcnRDb250YWluZXIudG9nZ2xlKCk7XG5cdCAgICAgICAgICAgICQoJy5naWZ0LWNlcnRpZmljYXRlLWNhbmNlbCcpLnRvZ2dsZSgpO1xuXHQgICAgICAgIH0pO1xuXG5cdCAgICAgICAgJCgnLmdpZnQtY2VydGlmaWNhdGUtY2FuY2VsJykub24oJ2NsaWNrJywgZXZlbnQgPT4ge1xuXHQgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHQgICAgICAgICAgICAkY2VydENvbnRhaW5lci50b2dnbGUoKTtcblx0ICAgICAgICAgICAgJCgnLmdpZnQtY2VydGlmaWNhdGUtYWRkJykudG9nZ2xlKCk7XG5cdCAgICAgICAgICAgICQoJy5naWZ0LWNlcnRpZmljYXRlLWNhbmNlbCcpLnRvZ2dsZSgpO1xuXHQgICAgICAgIH0pO1xuXG5cdCAgICAgICAgJGNlcnRGb3JtLm9uKCdzdWJtaXQnLCBldmVudCA9PiB7XG5cdCAgICAgICAgICAgIGNvbnN0IGNvZGUgPSAkY2VydElucHV0LnZhbCgpO1xuXG5cdCAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cblx0ICAgICAgICAgICAgaWYgKCFnaWZ0Q2VydENoZWNrKGNvZGUpKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gc3dhbCh7XG5cdCAgICAgICAgICAgICAgICAgICAgdGV4dDogJGNlcnRJbnB1dC5kYXRhKCdlcnJvcicpLFxuXHQgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdlcnJvcicsXG5cdCAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHV0aWxzLmFwaS5jYXJ0LmFwcGx5R2lmdENlcnRpZmljYXRlKGNvZGUsIChlcnIsIHJlc3ApID0+IHtcblx0ICAgICAgICAgICAgICAgIGlmIChyZXNwLmRhdGEuc3RhdHVzID09PSAnc3VjY2VzcycpIHtcblx0ICAgICAgICAgICAgICAgICAgICByZWZyZXNoQ29udGVudCgpO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICBzd2FsKHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogcmVzcC5kYXRhLmVycm9ycy5qb2luKCdcXG4nKSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Vycm9yJyxcblx0ICAgICAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfSk7XG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIGJpbmRHaWZ0V3JhcHBpbmdFdmVudHMoKSB7XG5cdCAgICAgICAgY29uc3QgbW9kYWwgPSBkZWZhdWx0TW9kYWwoKTtcblxuXHQgICAgICAgICQoJ1tkYXRhLWl0ZW0tZ2lmdHdyYXBdJykub24oJ2NsaWNrJywgZXZlbnQgPT4ge1xuXHQgICAgICAgICAgICBjb25zdCBpdGVtSWQgPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLmRhdGEoJ2l0ZW1HaWZ0d3JhcCcpO1xuXHQgICAgICAgICAgICBjb25zdCBvcHRpb25zID0ge1xuXHQgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICdjYXJ0L21vZGFscy9naWZ0LXdyYXBwaW5nLWZvcm0nLFxuXHQgICAgICAgICAgICB9O1xuXG5cdCAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cblx0ICAgICAgICAgICAgbW9kYWwub3BlbigpO1xuXG5cdCAgICAgICAgICAgIHV0aWxzLmFwaS5jYXJ0LmdldEl0ZW1HaWZ0V3JhcHBpbmdPcHRpb25zKGl0ZW1JZCwgb3B0aW9ucywgKGVyciwgcmVzcG9uc2UpID0+IHtcblx0ICAgICAgICAgICAgICAgIG1vZGFsLnVwZGF0ZUNvbnRlbnQocmVzcG9uc2UuY29udGVudCk7XG5cblx0ICAgICAgICAgICAgICAgIGJpbmRHaWZ0V3JhcHBpbmdGb3JtKCk7XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH0pO1xuXHQgICAgfVxuXG5cdCAgICBmdW5jdGlvbiBiaW5kR2lmdFdyYXBwaW5nRm9ybSgpIHtcblx0ICAgICAgICAkKCcuZ2lmdFdyYXBwaW5nLXNlbGVjdCcpLm9uKCdjaGFuZ2UnLCBldmVudCA9PiB7XG5cdCAgICAgICAgICAgIGNvbnN0ICRzZWxlY3QgPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpO1xuXHQgICAgICAgICAgICBjb25zdCBpZCA9ICRzZWxlY3QudmFsKCk7XG5cdCAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gJHNlbGVjdC5kYXRhKCdpbmRleCcpO1xuXG5cdCAgICAgICAgICAgIGlmICghaWQpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIGNvbnN0IGFsbG93TWVzc2FnZSA9ICRzZWxlY3QuZmluZChgb3B0aW9uW3ZhbHVlPSR7aWR9XWApLmRhdGEoJ2FsbG93TWVzc2FnZScpO1xuXG5cdCAgICAgICAgICAgICQoYC5naWZ0V3JhcHBpbmctaW1hZ2UtJHtpbmRleH1gKS5oaWRlKCk7XG5cdCAgICAgICAgICAgICQoYCNnaWZ0V3JhcHBpbmctaW1hZ2UtJHtpbmRleH0tJHtpZH1gKS5zaG93KCk7XG5cblx0ICAgICAgICAgICAgaWYgKGFsbG93TWVzc2FnZSkge1xuXHQgICAgICAgICAgICAgICAgJChgI2dpZnRXcmFwcGluZy1tZXNzYWdlLSR7aW5kZXh9YCkuc2hvdygpO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgJChgI2dpZnRXcmFwcGluZy1tZXNzYWdlLSR7aW5kZXh9YCkuaGlkZSgpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSk7XG5cblx0ICAgICAgICAkKCcuZ2lmdFdyYXBwaW5nLXNlbGVjdCcpLnRyaWdnZXIoJ2NoYW5nZScpO1xuXG5cdCAgICAgICAgZnVuY3Rpb24gdG9nZ2xlVmlld3MoKSB7XG5cdCAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gJCgnaW5wdXQ6cmFkaW9bbmFtZSA9XCJnaWZ0d3JhcHR5cGVcIl06Y2hlY2tlZCcpLnZhbCgpO1xuXHQgICAgICAgICAgICBjb25zdCAkc2luZ2xlRm9ybSA9ICQoJy5naWZ0V3JhcHBpbmctc2luZ2xlJyk7XG5cdCAgICAgICAgICAgIGNvbnN0ICRtdWx0aUZvcm0gPSAkKCcuZ2lmdFdyYXBwaW5nLW11bHRpcGxlJyk7XG5cblx0ICAgICAgICAgICAgaWYgKHZhbHVlID09PSAnc2FtZScpIHtcblx0ICAgICAgICAgICAgICAgICRzaW5nbGVGb3JtLnNob3coKTtcblx0ICAgICAgICAgICAgICAgICRtdWx0aUZvcm0uaGlkZSgpO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgJHNpbmdsZUZvcm0uaGlkZSgpO1xuXHQgICAgICAgICAgICAgICAgJG11bHRpRm9ybS5zaG93KCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cblx0ICAgICAgICAkKCdbbmFtZT1cImdpZnR3cmFwdHlwZVwiXScpLm9uKCdjbGljaycsIHRvZ2dsZVZpZXdzKTtcblxuXHQgICAgICAgIHRvZ2dsZVZpZXdzKCk7XG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIGJpbmRFdmVudHMoKSB7XG5cdCAgICAgICAgYmluZENhcnRFdmVudHMoKTtcblx0ICAgICAgICBiaW5kUHJvbW9Db2RlRXZlbnRzKCk7XG5cdCAgICAgICAgYmluZEdpZnRXcmFwcGluZ0V2ZW50cygpO1xuXHQgICAgICAgIGJpbmRHaWZ0Q2VydGlmaWNhdGVFdmVudHMoKTtcblxuXHQgICAgICAgIC8vIGluaXRpYXRlIHNoaXBwaW5nIGVzdGltYXRvciBtb2R1bGVcblx0ICAgICAgICBjb25zdCBzaGlwcGluZ0Vycm9yTWVzc2FnZXMgPSB7XG5cdCAgICAgICAgICAgIGNvdW50cnk6IGNvbnRleHQuc2hpcHBpbmdDb3VudHJ5RXJyb3JNZXNzYWdlLFxuXHQgICAgICAgICAgICBwcm92aW5jZTogY29udGV4dC5zaGlwcGluZ1Byb3ZpbmNlRXJyb3JNZXNzYWdlLFxuXHQgICAgICAgIH07XG5cdCAgICAgICAgdmFyIHNoaXBwaW5nRXN0aW1hdG9yID0gbmV3IFNoaXBwaW5nRXN0aW1hdG9yKCQoJ1tkYXRhLXNoaXBwaW5nLWVzdGltYXRvcl0nKSwgc2hpcHBpbmdFcnJvck1lc3NhZ2VzKTtcblx0ICAgIH1cblx0fVxufVxuIiwiaW1wb3J0IGpxdWVyeUNvb2tpZSBmcm9tICdqcXVlcnkuY29va2llJztcbmltcG9ydCB1dGlscyBmcm9tICdAYmlnY29tbWVyY2Uvc3RlbmNpbC11dGlscyc7XG5jb25zdCBmZXRjaCA9IHJlcXVpcmUoJ25vZGUtZmV0Y2gnKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29udGV4dCkge1xuICAgIGNvbnN0IHRva2VuID0gY29udGV4dC50b2tlbjtcblxuICAgIGZ1bmN0aW9uIHJlY2VudGx5Qm91Z2h0KCkge1xuICAgICAgICB2YXIgcHJvZHVjdElEcyA9IGNvbnRleHQudGhlbWVTZXR0aW5ncy5yZWNlbnRseV9ib3VnaHRfcHJvZHVjdElELFxuICAgICAgICAgICAgaG91cnNJdGVtcyA9IGNvbnRleHQudGhlbWVTZXR0aW5ncy5yZWNlbnRseV9ib3VnaHRfaG91cnMsXG4gICAgICAgICAgICBsaXN0SG91cnMgPSBKU09OLnBhcnNlKFwiW1wiICsgaG91cnNJdGVtcyArIFwiXVwiKSxcbiAgICAgICAgICAgIGxpc3RJRHMgPSBKU09OLnBhcnNlKFwiW1wiICsgcHJvZHVjdElEcyArIFwiXVwiKSxcbiAgICAgICAgICAgIHRleHRfaW5mbyA9IGNvbnRleHQudGhlbWVTZXR0aW5ncy5yZWNlbnRseV9ib3VnaHRfdGV4dF9pbmZvLFxuICAgICAgICAgICAgdGV4dF9uYW1lID0gY29udGV4dC50aGVtZVNldHRpbmdzLnJlY2VudGx5X2JvdWdodF90ZXh0X25hbWUsXG4gICAgICAgICAgICBjaGFuZ2VTbGlkZXMgPSAxMDAwKihOdW1iZXIoY29udGV4dC50aGVtZVNldHRpbmdzLnJlY2VudGx5X2JvdWdodF9jaGFuZ2VTbGlkZXMpKTtcblxuICAgICAgICB2YXIgbG9jYXRpb24xID0gY29udGV4dC50aGVtZVNldHRpbmdzLnJlY2VudGx5X2JvdWdodF9sb2NhdGlvbjEsXG4gICAgICAgICAgICBsb2NhdGlvbjIgPSBjb250ZXh0LnRoZW1lU2V0dGluZ3MucmVjZW50bHlfYm91Z2h0X2xvY2F0aW9uMixcbiAgICAgICAgICAgIGxvY2F0aW9uMyA9IGNvbnRleHQudGhlbWVTZXR0aW5ncy5yZWNlbnRseV9ib3VnaHRfbG9jYXRpb24zLFxuICAgICAgICAgICAgbG9jYXRpb240ID0gY29udGV4dC50aGVtZVNldHRpbmdzLnJlY2VudGx5X2JvdWdodF9sb2NhdGlvbjQsXG4gICAgICAgICAgICBsb2NhdGlvbjUgPSBjb250ZXh0LnRoZW1lU2V0dGluZ3MucmVjZW50bHlfYm91Z2h0X2xvY2F0aW9uNSxcbiAgICAgICAgICAgIGxvY2F0aW9uNiA9IGNvbnRleHQudGhlbWVTZXR0aW5ncy5yZWNlbnRseV9ib3VnaHRfbG9jYXRpb242LFxuICAgICAgICAgICAgbG9jYXRpb243ID0gY29udGV4dC50aGVtZVNldHRpbmdzLnJlY2VudGx5X2JvdWdodF9sb2NhdGlvbjcsXG4gICAgICAgICAgICBsb2NhdGlvbjggPSBjb250ZXh0LnRoZW1lU2V0dGluZ3MucmVjZW50bHlfYm91Z2h0X2xvY2F0aW9uODtcblxuICAgICAgICB2YXIgYXIxID0gbG9jYXRpb24xLnNwbGl0KCcsJyksXG4gICAgICAgICAgICBhcjIgPSBsb2NhdGlvbjIuc3BsaXQoJywnKSxcbiAgICAgICAgICAgIGFyMyA9IGxvY2F0aW9uMy5zcGxpdCgnLCcpLFxuICAgICAgICAgICAgYXI0ID0gbG9jYXRpb240LnNwbGl0KCcsJyksXG4gICAgICAgICAgICBhcjUgPSBsb2NhdGlvbjUuc3BsaXQoJywnKSxcbiAgICAgICAgICAgIGFyNiA9IGxvY2F0aW9uNi5zcGxpdCgnLCcpLFxuICAgICAgICAgICAgYXI3ID0gbG9jYXRpb243LnNwbGl0KCcsJyksXG4gICAgICAgICAgICBhcjggPSBsb2NhdGlvbjguc3BsaXQoJywnKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGxpc3RJRHNfbGVuZ3RoID0gbGlzdElEcy5sZW5ndGg7XG5cbiAgICAgICAgaWYgKGxpc3RJRHNfbGVuZ3RoKSB7XG4gICAgICAgICAgICBnZXRQcm9kdWN0QW5kU2l0ZUluZm8obGlzdElEcykudGhlbihkYXRhID0+IHtcbiAgICAgICAgICAgICAgICBzZXRJbnRlcnZhbChmdW5jdGlvbigpe1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBpdGVtID0gKE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSpsaXN0SURzLmxlbmd0aCkpO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBsb2NhdGlvbkxpc3QgPSBBcnJheShhcjEsYXIyLGFyMyxhcjQsYXI1LGFyNixhcjcsYXI4KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uSXRlbSA9IChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqbG9jYXRpb25MaXN0Lmxlbmd0aCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24gPSBsb2NhdGlvbkxpc3RbbG9jYXRpb25JdGVtXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvdXJfaXRlbSA9IChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqbGlzdEhvdXJzLmxlbmd0aCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgaG91cnMgPSBsaXN0SG91cnNbaG91cl9pdGVtXTtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCAkY29va2llTWFuYWdlciA9ICQoJyNjb25zZW50LW1hbmFnZXInKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgJGNvb2tpZVVwZGF0ZSA9ICQoJyNjb25zZW50LW1hbmFnZXItdXBkYXRlLWJhbm5lcicpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgY29va2llSGVpZ2h0ID0gMDtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoJGNvb2tpZU1hbmFnZXIubGVuZ3RoIHx8ICRjb29raWVVcGRhdGUubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJGNvb2tpZVVwZGF0ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb29raWVIZWlnaHQgPSAkY29va2llTWFuYWdlci5vdXRlckhlaWdodCgpICsgJGNvb2tpZVVwZGF0ZS5vdXRlckhlaWdodCgpICsgMTU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb29raWVIZWlnaHQgPSAkY29va2llTWFuYWdlci5vdXRlckhlaWdodCgpICsgMTU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoJC5jb29raWUoJ3JlY2VudGx5X2JvdWdodF9ub3RpZmljYXRpb24nKSA9PSAnY2xvc2VkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgJCgnI3JlY2VudGx5X2JvdWdodF9saXN0JykucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAkKGRvY3VtZW50KS5vbignY2xpY2snLCAnLmhhbG8tcmVjZW50bHktYm91Z2h0IFtkYXRhLWNsb3NlLXJlY2VudGx5LWJvdWdodF0nLCBmdW5jdGlvbihldmVudCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcjcmVjZW50bHlfYm91Z2h0X2xpc3QnKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICQuY29va2llKCdyZWNlbnRseV9ib3VnaHRfbm90aWZpY2F0aW9uJywgJ2Nsb3NlZCcsIHtleHBpcmVzOjEsIHBhdGg6Jy8nfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmKCAkKCcjUkJfJysgbGlzdElEc1tpdGVtXSkubGVuZ3RoICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvb2tpZUhlaWdodCA+IDE1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnI1JCXycrIGxpc3RJRHNbaXRlbV0pLmNzcygnYm90dG9tJywgY29va2llSGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJyNSQl8nKyBsaXN0SURzW2l0ZW1dKS5jc3MoJ2JvdHRvbScsICcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNSQl8nKyBsaXN0SURzW2l0ZW1dKS5zaG93KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcjcmVjZW50bHlfYm91Z2h0X2xpc3QnKS5jc3MoJ2FuaW1hdGlvbi1uYW1lJywnZmFkZUluJyk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJQcm9kdWN0KGRhdGEuc2l0ZS5wcm9kdWN0cy5lZGdlc1tpdGVtXSwgdGV4dF9uYW1lLCBob3VycywgdGV4dF9pbmZvLCBsb2NhdGlvbiwgY29va2llSGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgJCgnI3JlY2VudGx5X2JvdWdodF9saXN0JykuY3NzKCdhbmltYXRpb24tbmFtZScsJ2ZhZGVPdXQnKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgY2hhbmdlU2xpZGVzIC0gMTAwMCk7XG5cbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNSQl8nKyBsaXN0SURzW2l0ZW1dKS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sIGNoYW5nZVNsaWRlcyAtIDUyMCk7XG5cbiAgICAgICAgICAgICAgICB9LCBjaGFuZ2VTbGlkZXMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRQcm9kdWN0QW5kU2l0ZUluZm8oYXJyKSB7XG4gICAgICByZXR1cm4gZmV0Y2goJy9ncmFwaHFsJywge1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiAnQmVhcmVyICcgKyB0b2tlblxuICAgICAgICB9LFxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgcXVlcnk6IGBcbiAgICAgICAgICAgIHF1ZXJ5IE15UXVlcnkge1xuICAgICAgICAgICAgICAgIHNpdGUge1xuICAgICAgICAgICAgICAgICAgICBwcm9kdWN0cyAoZW50aXR5SWRzOiBbYCthcnIrYF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICBlZGdlcyB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9kdWN0OiBub2RlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uUHJvZHVjdEZpZWxkc1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmcmFnbWVudCBQcm9kdWN0RmllbGRzIG9uIFByb2R1Y3Qge1xuICAgICAgICAgICAgICAgIGlkXG4gICAgICAgICAgICAgICAgZW50aXR5SWRcbiAgICAgICAgICAgICAgICBuYW1lXG4gICAgICAgICAgICAgICAgcGF0aFxuICAgICAgICAgICAgICAgIGRlZmF1bHRJbWFnZSB7XG4gICAgICAgICAgICAgICAgICAgIGltZzMyMHB4OiB1cmwod2lkdGg6IDMyMClcbiAgICAgICAgICAgICAgICAgICAgYWx0VGV4dFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgYH0pLFxuICAgIH0pLnRoZW4ocmVzID0+IHJlcy5qc29uKCkpXG4gICAgICAgLnRoZW4ocmVzID0+IHJlcy5kYXRhKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW5kZXJQcm9kdWN0KHByb2R1Y3QsIHRleHQsIGhvdXJzLCBpbmZvLCBjdXN0b21lciwgY29va2llSGVpZ2h0KSB7XG4gICAgICAgIGlmIChwcm9kdWN0ICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSBwcm9kdWN0LnByb2R1Y3Q7XG5cbiAgICAgICAgICAgIHZhciBodG1sID0gJzxkaXYgaWQ9XCJSQl8nK2l0ZW0uZW50aXR5SWQrJ1wiIGNsYXNzPVwiaGFsby1yZWNlbnRseS1ib3VnaHRcIj5cXFxuICAgICAgICAgICAgICAgIDxhIGhyZWY9XCIjXCIgZGF0YS1jbG9zZS1yZWNlbnRseS1ib3VnaHQgYXJpYS1sYWJlbD1cIkJ1dHRvbiBDbG9zZVwiPjxzdmcgY2xhc3M9XCJpY29uXCI+PHVzZSB4bGluazpocmVmPVwiI2ljb24tY2xvc2VcIj48L3N2Zz48L2E+XFxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicmVjZW50bHktYm91Z2h0LWlubmVyXCI+XFxcbiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJwcm9kdWN0LWltYWdlXCIgaHJlZj1cIicraXRlbS5wYXRoKydcIj48aW1nIGNsYXNzPVwiaW1hZ2VcIiBkYXRhLXNpemVzPVwiYXV0b1wiIHNyYz1cIicraXRlbS5kZWZhdWx0SW1hZ2UuaW1nMzIwcHgrJ1wiIGFsdD1cIicraXRlbS5kZWZhdWx0SW1hZ2UuYWx0VGV4dCsnXCIgdGl0bGU9XCInK2l0ZW0uZGVmYXVsdEltYWdlLmFsdFRleHQrJ1wiIGFyaWEtbGFiZWw9XCInK2l0ZW0uZGVmYXVsdEltYWdlLmFsdFRleHQrJ1wiPjwvYT5cXFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicHJvZHVjdC1pbmZvXCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPVwidGV4dC13cmFwXCI+PHNwYW4gY2xhc3M9XCJwcm9kdWN0LW5hbWVcIj4nK3RleHQrJzxhIGhyZWY9XCInK2l0ZW0ucGF0aCsnXCIgc3R5bGU9XCItd2Via2l0LWJveC1vcmllbnQ6IHZlcnRpY2FsO1wiPicraXRlbS5uYW1lKyc8L2E+PC9zcGFuPjwvcD5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJsb2NhdGlvbi1pbmZvXCI+Jytob3VycysnICcraW5mbysnICcrY3VzdG9tZXIrJzwvZGl2PlxcXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxcbiAgICAgICAgICAgIDwvZGl2Pic7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICQoJyNyZWNlbnRseV9ib3VnaHRfbGlzdCcpLmFwcGVuZChodG1sKTtcbiAgICAgICAgICAgIGlmIChjb29raWVIZWlnaHQgPiAxNSkge1xuICAgICAgICAgICAgICAgICQoJyNSQl8nK2l0ZW0uZW50aXR5SWQpLmNzcygnYm90dG9tJywgY29va2llSGVpZ2h0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICQoJyNSQl8nK2l0ZW0uZW50aXR5SWQpLmNzcygnYm90dG9tJywgJycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJCgnI3JlY2VudGx5X2JvdWdodF9saXN0JykuY3NzKCdhbmltYXRpb24tbmFtZScsJ2ZhZGVJbicpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCQod2luZG93KS53aWR0aCgpID4gMTAyNCkge1xuICAgICAgICBpZiAoY29udGV4dC50aGVtZVNldHRpbmdzLmhhbG9SZWNlbnRseUJvdWdodCA9PSB0cnVlKSB7XG4gICAgICAgICAgICByZWNlbnRseUJvdWdodCgpO1xuICAgICAgICB9IFxuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmKGNvbnRleHQudGhlbWVTZXR0aW5ncy5oYWxvUmVjZW50bHlCb3VnaHQgPT0gdHJ1ZSAmJiBjb250ZXh0LnRoZW1lU2V0dGluZ3MuaGFsb1JlY2VudGx5Qm91Z2h0X21vYmlsZSA9PSB0cnVlKSB7XG4gICAgICAgICAgICByZWNlbnRseUJvdWdodCgpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHV0aWxzIGZyb20gJ0BiaWdjb21tZXJjZS9zdGVuY2lsLXV0aWxzJztcbmltcG9ydCAnc2xpY2stY2Fyb3VzZWwnO1xuaW1wb3J0IHN3YWwgZnJvbSAnLi4vZ2xvYmFsL3N3ZWV0LWFsZXJ0JztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbnRleHQpe1xuXHRjb25zdCB0b2tlbiA9IGNvbnRleHQudG9rZW47XG4gICAgY29uc3QgY3VyQ29kZSA9ICQoJy5ib2R5JykuZGF0YSgnY3VycmVuY3ktY29kZScpO1xuXG5cdGZ1bmN0aW9uIHNldENvb2tpZShjbmFtZSwgY3ZhbHVlLCBleGRheXMpIHtcbiAgICAgIGNvbnN0IGQgPSBuZXcgRGF0ZSgpO1xuICAgICAgZC5zZXRUaW1lKGQuZ2V0VGltZSgpICsgKGV4ZGF5cyAqIDI0ICogNjAgKiA2MCAqIDEwMDApKTtcbiAgICAgIGNvbnN0IGV4cGlyZXMgPSAnZXhwaXJlcz0nICsgZC50b1VUQ1N0cmluZygpO1xuICAgICAgZG9jdW1lbnQuY29va2llID0gY25hbWUgKyAnPScgKyBjdmFsdWUgKyAnOycgKyBleHBpcmVzICsgJztwYXRoPS8nO1xuICAgfVxuXG4gICBmdW5jdGlvbiBnZXRDb29raWUoY25hbWUpIHtcbiAgICAgIGNvbnN0IG5hbWUgPSBjbmFtZSArICc9JztcbiAgICAgIGNvbnN0IGNhID0gZG9jdW1lbnQuY29va2llLnNwbGl0KCc7Jyk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2EubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgIHZhciBjID0gY2FbaV07XG4gICAgICAgICB3aGlsZSAoYy5jaGFyQXQoMCkgPT09ICcgJykge1xuICAgICAgICAgICAgYyA9IGMuc3Vic3RyaW5nKDEpO1xuICAgICAgICAgfVxuICAgICAgICAgaWYgKGMuaW5kZXhPZihuYW1lKSA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGMuc3Vic3RyaW5nKG5hbWUubGVuZ3RoLCBjLmxlbmd0aCk7XG4gICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgY29uc3QgZGVsZXRlQ29va2llID0gZnVuY3Rpb24obmFtZSkge1xuICAgICAgZG9jdW1lbnQuY29va2llID0gbmFtZSArICc9O2V4cGlyZXM9VGh1LCAwMSBKYW4gMTk3MCAwMDowMDowMSBHTVQ7JztcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gZ2V0UHJvZHVjdChhcnIpIHtcbiAgICAgIHJldHVybiBmZXRjaCgnL2dyYXBocWwnLCB7XG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAnQXV0aG9yaXphdGlvbic6ICdCZWFyZXIgJyArIHRva2VuXG4gICAgICAgIH0sXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICBxdWVyeTogYFxuICAgICAgICAgICAgcXVlcnkgTXlRdWVyeSB7XG4gICAgICAgICAgICAgICAgc2l0ZSB7XG4gICAgICAgICAgICAgICAgICAgIHByb2R1Y3RzIChlbnRpdHlJZHM6IFtgK2FycitgXSkge1xuICAgICAgICAgICAgICAgICAgICAgIGVkZ2VzIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2R1Y3Q6IG5vZGUge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5Qcm9kdWN0RmllbGRzXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjdXJyZW5jeSAoY3VycmVuY3lDb2RlOiBgK2N1ckNvZGUrYCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ltYm9sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ltYm9sUGxhY2VtZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVjaW1hbFRva2VuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhvdXNhbmRzVG9rZW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWNpbWFsUGxhY2VzXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmcmFnbWVudCBQcm9kdWN0RmllbGRzIG9uIFByb2R1Y3Qge1xuICAgICAgICAgICAgICAgIGlkXG4gICAgICAgICAgICAgICAgZW50aXR5SWRcbiAgICAgICAgICAgICAgICBuYW1lXG4gICAgICAgICAgICAgICAgcGF0aFxuICAgICAgICAgICAgICAgIGludmVudG9yeSB7XG4gICAgICAgICAgICAgICAgXHRpc0luU3RvY2tcbiAgICAgICAgICAgICAgICBcdGhhc1ZhcmlhbnRJbnZlbnRvcnlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcHJvZHVjdE9wdGlvbnMge1xuXHRcdCAgICAgICAgICAgIGVkZ2VzIHtcblx0XHQgICAgICAgICAgICAgIFx0bm9kZSB7XG5cdFx0XHQgICAgICAgICAgICAgICAgZW50aXR5SWRcblx0XHRcdCAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZVxuXHRcdFx0ICAgICAgICAgICAgICAgIGlzUmVxdWlyZWRcblx0XHQgICAgICAgICAgICAgIFx0fVxuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkZWZhdWx0SW1hZ2Uge1xuICAgICAgICAgICAgICAgICAgICBpbWc3MHB4OiB1cmwod2lkdGg6IDcwKVxuICAgICAgICAgICAgICAgICAgICBhbHRUZXh0XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHByaWNlcyB7XG4gICAgICAgICAgICAgICAgICAgIHByaWNlUmFuZ2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5Nb25leUZpZWxkc1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5Nb25leUZpZWxkc1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldGFpbFByaWNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLk1vbmV5RmllbGRzXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYmFzZVByaWNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLk1vbmV5RmllbGRzXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcHJpY2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uTW9uZXlGaWVsZHNcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZyYWdtZW50IE1vbmV5RmllbGRzIG9uIE1vbmV5IHtcbiAgICAgICAgICAgICAgICB2YWx1ZVxuICAgICAgICAgICAgICAgIGN1cnJlbmN5Q29kZVxuICAgICAgICAgICAgfVxuICAgICAgICBgfSksXG4gICAgfSkudGhlbihyZXMgPT4gcmVzLmpzb24oKSlcbiAgICAgICAudGhlbihyZXMgPT4gcmVzLmRhdGEpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZvcm1hdE1vbmV5KG4sIGMsIGQsIHQpIHtcbiAgICAgICAgdmFyIGMgPSBpc05hTihjID0gTWF0aC5hYnMoYykpID8gMiA6IGMsXG4gICAgICAgICAgICBkID0gZCA9PSB1bmRlZmluZWQgPyBcIi5cIiA6IGQsXG4gICAgICAgICAgICB0ID0gdCA9PSB1bmRlZmluZWQgPyBcIixcIiA6IHQsXG4gICAgICAgICAgICBzID0gbiA8IDAgPyBcIi1cIiA6IFwiXCIsXG4gICAgICAgICAgICBpID0gU3RyaW5nKHBhcnNlSW50KG4gPSBNYXRoLmFicyhOdW1iZXIobikgfHwgMCkudG9GaXhlZChjKSkpLFxuICAgICAgICAgICAgaiA9IChqID0gaS5sZW5ndGgpID4gMyA/IGogJSAzIDogMDtcblxuICAgICAgICByZXR1cm4gcyArIChqID8gaS5zdWJzdHIoMCwgaikgKyB0IDogXCJcIikgKyBpLnN1YnN0cihqKS5yZXBsYWNlKC8oXFxkezN9KSg/PVxcZCkvZywgXCIkMVwiICsgdCkgKyAoYyA/IGQgKyBNYXRoLmFicyhuIC0gaSkudG9GaXhlZChjKS5zbGljZSgyKSA6IFwiXCIpO1xuICAgIH1cblxuXG5cdHZhciBCQ19Qcm9kdWN0cyA9IGZ1bmN0aW9uKCkge1xuXHQgICAgdmFyIGUgPSB7XG5cdCAgICAgICAgaG93TWFueVRvU2hvdzogMyxcblx0ICAgICAgICBob3dNYW55VG9TdG9yZUluTWVtb3J5OiAxMCxcblx0ICAgICAgICB3cmFwcGVySWQ6IFwicmVjZW50bHktdmlld2VkLXByb2R1Y3RzXCIsXG5cdCAgICAgICAgb25Db21wbGV0ZTogbnVsbFxuXHQgICAgfTtcblx0ICAgIHZhciB0ID0gW107XG5cdCAgICB2YXIgbiA9IG51bGw7XG5cdCAgICB2YXIgciA9IG51bGw7XG5cdCAgICB2YXIgaSA9IDA7XG5cdCAgICB2YXIgcyA9IHtcblx0ICAgICAgICBjb25maWd1cmF0aW9uOiB7XG5cdCAgICAgICAgICAgIGV4cGlyZXM6IGNvbnRleHQudGhlbWVTZXR0aW5ncy5oYWxvX3JlY2VudGx5X3ZpZXdlZF9wcm9kdWN0c19leHBpcmVzX2RhdGUsXG5cdCAgICAgICAgICAgIHBhdGg6IFwiL1wiLFxuXHQgICAgICAgICAgICBkb21haW46IHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZVxuXHQgICAgICAgIH0sXG5cdCAgICAgICAgbmFtZTogXCJiaWdjb21tZXJjZV9yZWNlbnRseV92aWV3ZWRcIixcblx0ICAgICAgICB3cml0ZTogZnVuY3Rpb24oZSkge1xuXHQgICAgICAgICAgICBzZXRDb29raWUodGhpcy5uYW1lLCBlLmpvaW4oXCIgXCIpLCB0aGlzLmNvbmZpZ3VyYXRpb24uZXhwaXJlcylcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHJlYWQ6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgICAgICB2YXIgZSA9IFtdO1xuXHQgICAgICAgICAgICB2YXIgdCA9IGdldENvb2tpZSh0aGlzLm5hbWUpO1xuXHQgICAgICAgICAgICBpZiAodCAhPT0gbnVsbCAmJiB0ICE9IHVuZGVmaW5lZCkge1xuXHQgICAgICAgICAgICAgICAgZSA9IHQuc3BsaXQoXCIgXCIpXG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgcmV0dXJuIGVcblx0ICAgICAgICB9LFxuXHQgICAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgICAgICBzZXRDb29raWUodGhpcy5uYW1lLCBudWxsLCB0aGlzLmNvbmZpZ3VyYXRpb24uZXhwaXJlcylcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHJlbW92ZTogZnVuY3Rpb24oZSkge1xuXHQgICAgICAgICAgICB2YXIgdCA9IHRoaXMucmVhZCgpO1xuXHQgICAgICAgICAgICB2YXIgbiA9ICQuaW5BcnJheShlLCB0KTtcblx0ICAgICAgICAgICAgaWYgKG4gIT09IC0xKSB7XG5cdCAgICAgICAgICAgICAgICB0LnNwbGljZShuLCAxKTtcblx0ICAgICAgICAgICAgICAgIHRoaXMud3JpdGUodClcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICB2YXIgbyA9IGZ1bmN0aW9uKCkge1xuXHQgICAgXHRmb3IgKCB2YXIgaiA9IDA7IGogPCBlLmhvd01hbnlUb1Nob3c7IGorKykge1xuXHQgICAgXHRcdHZhciBwcm9kdWN0SWQgPSB0W2pdO1xuXHQgICAgXHRcdGpRdWVyeSgnI3JlY2VudGx5LXZpZXdlZC1wcm9kdWN0cy1saXN0LXRtcCcpLmZpbmQoJy5pdGVtW2RhdGEtaWQ9XCJwcm9kdWN0LScrcHJvZHVjdElkKydcIl0nKS5hcHBlbmRUbyhuKTtcblx0ICAgIFx0fVxuXHQgICAgXHRqUXVlcnkoJyNyZWNlbnRseS12aWV3ZWQtcHJvZHVjdHMtbGlzdC10bXAnKS5yZW1vdmUoKTtcblx0ICAgICAgICBuLnNob3coKTtcblx0ICAgICAgICBpZiAoZS5vbkNvbXBsZXRlKSB7XG5cdCAgICAgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICAgICAgICBlLm9uQ29tcGxldGUoKVxuXHQgICAgICAgICAgICB9IGNhdGNoICh0KSB7fVxuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICB2YXIgdSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgXHR2YXIgdG1wID0galF1ZXJ5KCcjcmVjZW50bHktdmlld2VkLXByb2R1Y3RzLWxpc3QtdG1wJyksXG5cdCAgICBcdGxpc3QgPSB0O1xuXG5cdCAgICBcdGlmICh0Lmxlbmd0aCA+IDApIHtcblx0XHQgICAgXHRnZXRQcm9kdWN0KGxpc3QpLnRoZW4oZGF0YSA9PiB7XG5cdCAgICAgICAgICAgICAgICByZW5kZXJQcm9kdWN0KGRhdGEuc2l0ZS5wcm9kdWN0cy5lZGdlcywgZGF0YS5zaXRlLmN1cnJlbmN5LmRpc3BsYXksIHRtcCk7XG5cdCAgICAgICAgICAgICAgICBvKCk7XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgXHR9XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIHtcblx0ICAgICAgICByZXNpemVJbWFnZTogZnVuY3Rpb24oZSwgdCkge1xuXHQgICAgICAgICAgICBpZiAodCA9PSBudWxsKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gZVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGlmICh0ID09IFwibWFzdGVyXCIpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBlLnJlcGxhY2UoL2h0dHAocyk/Oi8sIFwiXCIpXG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgdmFyIG4gPSBlLm1hdGNoKC9cXC4oanBnfGpwZWd8Z2lmfHBuZ3xibXB8Yml0bWFwfHRpZmZ8dGlmKShcXD92PVxcZCspPy9pKTtcblx0ICAgICAgICAgICAgaWYgKG4gIT0gbnVsbCAmJiBuICE9IHVuZGVmaW5lZCkge1xuXHQgICAgICAgICAgICAgICAgdmFyIHIgPSBlLnNwbGl0KG5bMF0pO1xuXHQgICAgICAgICAgICAgICAgdmFyIGkgPSBuWzBdO1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIChyWzBdICsgXCJfXCIgKyB0ICsgaSkucmVwbGFjZSgvaHR0cChzKT86LywgXCJcIilcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBudWxsXG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNob3dSZWNlbnRseVZpZXdlZDogZnVuY3Rpb24oaSkge1xuXHQgICAgICAgICAgICB2YXIgaSA9IGkgfHwge307XG5cdCAgICAgICAgICAgIGpRdWVyeS5leHRlbmQoZSwgaSk7XG5cdCAgICAgICAgICAgIHQgPSBzLnJlYWQoKTtcblx0ICAgICAgICAgICAgbiA9IGpRdWVyeShcIiNcIiArIGUud3JhcHBlcklkKTtcblx0ICAgICAgICAgICAgZS5ob3dNYW55VG9TaG93ID0gTWF0aC5taW4odC5sZW5ndGgsIGUuaG93TWFueVRvU2hvdyk7XG5cdCAgICAgICAgICAgIFxuXHQgICAgICAgICAgICBpZiAoZS5ob3dNYW55VG9TaG93ICYmIG4ubGVuZ3RoKSB7XG5cdCAgICAgICAgICAgICAgICB1KClcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0sXG5cdCAgICAgICAgZ2V0Q29uZmlnOiBmdW5jdGlvbigpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIGVcblx0ICAgICAgICB9LFxuXHQgICAgICAgIGNsZWFyTGlzdDogZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgICAgIHMuZGVzdHJveSgpXG5cdCAgICAgICAgfSxcblx0ICAgICAgICByZWNvcmRSZWNlbnRseVZpZXdlZDogZnVuY3Rpb24odCkge1xuXHQgICAgICAgICAgICB2YXIgdCA9IHQgfHwge307XG5cdCAgICAgICAgICAgIHZhciBwcm9kdWN0X2lkID0gJCgnLnByb2R1Y3RWaWV3JykuZmluZCgnZm9ybVtkYXRhLWNhcnQtaXRlbS1hZGRdIFtuYW1lPVwicHJvZHVjdF9pZFwiXScpLnZhbCgpO1xuXHQgICAgICAgICAgICBcblx0ICAgICAgICAgICAgalF1ZXJ5LmV4dGVuZChlLCB0KTtcblx0ICAgICAgICAgICAgdmFyIG4gPSBzLnJlYWQoKTtcblx0ICAgICAgICAgICAgXG5cdCAgICAgICAgICAgIGlmIChwcm9kdWN0X2lkKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgciA9IHByb2R1Y3RfaWQ7XG5cdCAgICAgICAgICAgICAgICB2YXIgaSA9IGpRdWVyeS5pbkFycmF5KHIsIG4pO1xuXHQgICAgICAgICAgICAgICAgaWYgKGkgPT09IC0xKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgbi51bnNoaWZ0KHIpO1xuXHQgICAgICAgICAgICAgICAgICAgIG4gPSBuLnNwbGljZSgwLCBlLmhvd01hbnlUb1N0b3JlSW5NZW1vcnkpXG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIG4uc3BsaWNlKGksIDEpO1xuXHQgICAgICAgICAgICAgICAgICAgIG4udW5zaGlmdChyKVxuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgcy53cml0ZShuKVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHR9KCk7XG5cblx0ZnVuY3Rpb24gcmVuZGVyUHJvZHVjdChwcm9kdWN0LCBjdXJEaXNwbGF5LCB0bXApIHtcbiAgICAgICAgaWYgKHByb2R1Y3QgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAkLmVhY2gocHJvZHVjdCwgKGluZGV4LCBlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaXRlbSA9IGVsZW1lbnQucHJvZHVjdCxcbiAgICAgICAgICAgICAgICAgICAgc3ltYm9sID0gY3VyRGlzcGxheS5zeW1ib2wsXG4gICAgICAgICAgICAgICAgICAgIHN5bWJvbFBsYWNlbWVudCA9IGN1ckRpc3BsYXkuc3ltYm9sUGxhY2VtZW50LnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgICAgICAgICAgIGRlY2ltYWxUb2tlbiA9IGN1ckRpc3BsYXkuZGVjaW1hbFRva2VuLFxuICAgICAgICAgICAgICAgICAgICBkZWNpbWFsUGxhY2VzID0gY3VyRGlzcGxheS5kZWNpbWFsUGxhY2VzLFxuICAgICAgICAgICAgICAgICAgICB0aG91c2FuZHNUb2tlbiA9IGN1ckRpc3BsYXkudGhvdXNhbmRzVG9rZW47XG4gICAgICAgICAgICAgICAgbGV0IHRpdGxlLCBwcmljZSwgYnRuQWN0O1xuXG4gICAgICAgICAgICAgICAgaWYgKCQoJy5ib2R5JykuaGFzQ2xhc3MoJ2lzLWxvZ2luJykgfHwgY29udGV4dC50aGVtZVNldHRpbmdzLnJlc3RyaWN0X3RvX2xvZ2luICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLnByaWNlcy5wcmljZVJhbmdlLm1pbi52YWx1ZSA8IGl0ZW0ucHJpY2VzLnByaWNlUmFuZ2UubWF4LnZhbHVlICYmIGNvbnRleHQudGhlbWVTZXR0aW5ncy5wcmljZV9yYW5nZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByaWNlTWluID0gKHN5bWJvbFBsYWNlbWVudCA9PSBcImxlZnRcIiA/IHN5bWJvbCA6IFwiXCIpICsgKGZvcm1hdE1vbmV5KGl0ZW0ucHJpY2VzLnByaWNlUmFuZ2UubWluLnZhbHVlLCBkZWNpbWFsUGxhY2VzLCBkZWNpbWFsVG9rZW4sIHRob3VzYW5kc1Rva2VuKSkgKyAoc3ltYm9sUGxhY2VtZW50ICE9IFwibGVmdFwiID8gc3ltYm9sIDogXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmljZU1heCA9IChzeW1ib2xQbGFjZW1lbnQgPT0gXCJsZWZ0XCIgPyBzeW1ib2wgOiBcIlwiKSArIChmb3JtYXRNb25leShpdGVtLnByaWNlcy5wcmljZVJhbmdlLm1heC52YWx1ZSwgZGVjaW1hbFBsYWNlcywgZGVjaW1hbFRva2VuLCB0aG91c2FuZHNUb2tlbikpICsgKHN5bWJvbFBsYWNlbWVudCAhPSBcImxlZnRcIiA/IHN5bWJvbCA6IFwiXCIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmljZSA9ICc8ZGl2IGNsYXNzPVwicHJpY2Utc2VjdGlvbiBwcmljZS1zZWN0aW9uLS13aXRob3V0VGF4IG5vbi1zYWxlLXByaWNlLS13aXRob3V0VGF4IHByaWNlLW5vbmVcIiBzdHlsZT1cImRpc3BsYXk6IG5vbmU7XCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtcHJvZHVjdC1ub24tc2FsZS1wcmljZS13aXRob3V0LXRheD1cIlwiIGNsYXNzPVwicHJpY2UgcHJpY2UtLW5vbi1zYWxlXCI+PC9zcGFuPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwcmljZS1zZWN0aW9uIHByaWNlLXNlY3Rpb24tLXdpdGhvdXRUYXhcIj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1wcm9kdWN0LXByaWNlLXdpdGhvdXQtdGF4PVwiXCIgY2xhc3M9XCJwcmljZSBwcmljZS0td2l0aG91dFRheFwiPicrcHJpY2VNaW4rJyAtICcrcHJpY2VNYXgrJzwvc3Bhbj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4nO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJpY2VEZWYgPSAoc3ltYm9sUGxhY2VtZW50ID09IFwibGVmdFwiID8gc3ltYm9sIDogXCJcIikgKyAoZm9ybWF0TW9uZXkoaXRlbS5wcmljZXMucHJpY2UudmFsdWUsIGRlY2ltYWxQbGFjZXMsIGRlY2ltYWxUb2tlbiwgdGhvdXNhbmRzVG9rZW4pKSArIChzeW1ib2xQbGFjZW1lbnQgIT0gXCJsZWZ0XCIgPyBzeW1ib2wgOiBcIlwiKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0ucHJpY2VzLnJldGFpbFByaWNlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5wcmljZXMuYmFzZVByaWNlLnZhbHVlID4gaXRlbS5wcmljZXMucHJpY2UudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJpY2VCYXMgPSAoc3ltYm9sUGxhY2VtZW50ID09IFwibGVmdFwiID8gc3ltYm9sIDogXCJcIikgKyAoZm9ybWF0TW9uZXkoaXRlbS5wcmljZXMuYmFzZVByaWNlLnZhbHVlLCBkZWNpbWFsUGxhY2VzLCBkZWNpbWFsVG9rZW4sIHRob3VzYW5kc1Rva2VuKSkgKyAoc3ltYm9sUGxhY2VtZW50ICE9IFwibGVmdFwiID8gc3ltYm9sIDogXCJcIik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpY2UgPSAnPGRpdiBjbGFzcz1cInByaWNlLXNlY3Rpb24gcHJpY2Utc2VjdGlvbi0td2l0aG91dFRheCBub24tc2FsZS1wcmljZS0td2l0aG91dFRheFwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtcHJvZHVjdC1ub24tc2FsZS1wcmljZS13aXRob3V0LXRheD1cIlwiIGNsYXNzPVwicHJpY2UgcHJpY2UtLW5vbi1zYWxlXCI+JytwcmljZUJhcysnPC9zcGFuPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicHJpY2Utc2VjdGlvbiBwcmljZS1zZWN0aW9uLS13aXRob3V0VGF4XCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1wcm9kdWN0LXByaWNlLXdpdGhvdXQtdGF4PVwiXCIgY2xhc3M9XCJwcmljZSBwcmljZS0td2l0aG91dFRheFwiPicrcHJpY2VEZWYrJzwvc3Bhbj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pic7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmljZSA9ICc8ZGl2IGNsYXNzPVwicHJpY2Utc2VjdGlvbiBwcmljZS1zZWN0aW9uLS13aXRob3V0VGF4IG5vbi1zYWxlLXByaWNlLS13aXRob3V0VGF4IHByaWNlLW5vbmVcIiBzdHlsZT1cImRpc3BsYXk6IG5vbmU7XCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1wcm9kdWN0LW5vbi1zYWxlLXByaWNlLXdpdGhvdXQtdGF4PVwiXCIgY2xhc3M9XCJwcmljZSBwcmljZS0tbm9uLXNhbGVcIj48L3NwYW4+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwcmljZS1zZWN0aW9uIHByaWNlLXNlY3Rpb24tLXdpdGhvdXRUYXhcIj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLXByb2R1Y3QtcHJpY2Utd2l0aG91dC10YXg9XCJcIiBjbGFzcz1cInByaWNlIHByaWNlLS13aXRob3V0VGF4XCI+JytwcmljZURlZisnPC9zcGFuPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5wcmljZXMucmV0YWlsUHJpY2UudmFsdWUgPiBpdGVtLnByaWNlcy5wcmljZS52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmljZVJldCA9IChzeW1ib2xQbGFjZW1lbnQgPT0gXCJsZWZ0XCIgPyBzeW1ib2wgOiBcIlwiKSArIChmb3JtYXRNb25leShpdGVtLnByaWNlcy5yZXRhaWxQcmljZS52YWx1ZSwgZGVjaW1hbFBsYWNlcywgZGVjaW1hbFRva2VuLCB0aG91c2FuZHNUb2tlbikpICsgKHN5bWJvbFBsYWNlbWVudCAhPSBcImxlZnRcIiA/IHN5bWJvbCA6IFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmljZSA9ICc8ZGl2IGNsYXNzPVwicHJpY2Utc2VjdGlvbiBwcmljZS1zZWN0aW9uLS13aXRob3V0VGF4IG5vbi1zYWxlLXByaWNlLS13aXRob3V0VGF4XCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS1wcm9kdWN0LW5vbi1zYWxlLXByaWNlLXdpdGhvdXQtdGF4PVwiXCIgY2xhc3M9XCJwcmljZSBwcmljZS0tbm9uLXNhbGVcIj4nK3ByaWNlUmV0Kyc8L3NwYW4+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwcmljZS1zZWN0aW9uIHByaWNlLXNlY3Rpb24tLXdpdGhvdXRUYXhcIj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLXByb2R1Y3QtcHJpY2Utd2l0aG91dC10YXg9XCJcIiBjbGFzcz1cInByaWNlIHByaWNlLS13aXRob3V0VGF4XCI+JytwcmljZURlZisnPC9zcGFuPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaWNlID0gJzxkaXYgY2xhc3M9XCJwcmljZS1zZWN0aW9uIHByaWNlLXNlY3Rpb24tLXdpdGhvdXRUYXggbm9uLXNhbGUtcHJpY2UtLXdpdGhvdXRUYXggcHJpY2Utbm9uZVwiIHN0eWxlPVwiZGlzcGxheTogbm9uZTtcIj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLXByb2R1Y3Qtbm9uLXNhbGUtcHJpY2Utd2l0aG91dC10YXg9XCJcIiBjbGFzcz1cInByaWNlIHByaWNlLS1ub24tc2FsZVwiPjwvc3Bhbj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInByaWNlLXNlY3Rpb24gcHJpY2Utc2VjdGlvbi0td2l0aG91dFRheFwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtcHJvZHVjdC1wcmljZS13aXRob3V0LXRheD1cIlwiIGNsYXNzPVwicHJpY2UgcHJpY2UtLXdpdGhvdXRUYXhcIj4nK3ByaWNlRGVmKyc8L3NwYW4+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcHJpY2UgPSAnPHAgdHJhbnNsYXRlPkxvZyBpbiBmb3IgcHJpY2luZzwvcD4nO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChpdGVtLmludmVudG9yeS5pc0luU3RvY2sgPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBcdGJ0bkFjdCA9ICc8YSBocmVmPVwiJytpdGVtLnBhdGgrJ1wiIGNsYXNzPVwiY2FyZF9vdXRfb2Zfc3RvY2tcIiBkaXNhYmxlZCBkYXRhLXByb2R1Y3QtaWQ9XCInK2l0ZW0uZW50aXR5SWQrJ1wiPk91dCBPZiBTdG9jazwvYT4nO1xuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGl0ZW0ucHJvZHVjdE9wdGlvbnMuZWRnZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIFx0YnRuQWN0ID0gJzxhIGhyZWY9XCInK2l0ZW0ucGF0aCsnXCIgY2xhc3M9XCJjYXJkLWZpZ2NhcHRpb24tbGlua1wiIGRhdGEtcHJvZHVjdC1pZD1cIicraXRlbS5lbnRpdHlJZCsnXCI+Q2hvb3NlIE9wdGlvbnM8L2E+JztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgXHRpZiAoJCgnLnJlY2VudGx5LXZpZXdlZC1wcm9kdWN0cy1zaWRlYmFyJykuZGF0YSgndGFnLWVuYWJsZWQnKSA9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIFx0XHRidG5BY3QgPSAnPGEgaHJlZj1cIi9jYXJ0LnBocD9hY3Rpb249YWRkJnByb2R1Y3RfaWQ9JytpdGVtLmVudGl0eUlkKydcIiBjbGFzcz1cImNhcmQtZmlnY2FwdGlvbi1saW5rXCIgZGF0YS1wcm9kdWN0LWlkPVwiJytpdGVtLmVudGl0eUlkKydcIj5BZGQgdG8gQ2FydDwvYT4nO1xuICAgICAgICAgICAgICAgIFx0fVxuICAgICAgICAgICAgICAgIFx0ZWxzZSB7XG4gICAgICAgICAgICAgICAgXHRcdGJ0bkFjdCA9ICc8YSBocmVmPVwiL2NhcnQucGhwP2FjdGlvbj1hZGQmcHJvZHVjdF9pZD0nK2l0ZW0uZW50aXR5SWQrJ1wiIGNsYXNzPVwiY2FyZC1maWdjYXB0aW9uLWxpbmtcIiBkYXRhLXByb2R1Y3QtaWQ9XCInK2l0ZW0uZW50aXR5SWQrJ1wiPkFkZCB0byBDYXJ0PC9hPic7XG4gICAgICAgICAgICAgICAgXHR9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgaHRtbF9jYXJkID0gJzxkaXYgY2xhc3M9XCJpdGVtXCIgZGF0YS10YXJnZXQ9XCJpbWctMVwiIGRhdGEtaWQ9XCJwcm9kdWN0LScraXRlbS5lbnRpdHlJZCsnXCI+XFxcblx0XHRcdFx0XHRcdFx0ICBcdFx0PGEgaHJlZj1cIicraXRlbS5wYXRoKydcIiBjbGFzcz1cInJlY2VudF9pdGVtX3VybFwiPlxcXG5cdFx0XHRcdFx0XHRcdCAgICBcdFx0PGltZyBzcmM9XCInK2l0ZW0uZGVmYXVsdEltYWdlLmltZzcwcHgrJ1wiIGFsdD1cIicraXRlbS5kZWZhdWx0SW1hZ2UuYWx0VGV4dCsnXCIgdGl0bGU9XCInK2l0ZW0uZGVmYXVsdEltYWdlLmFsdFRleHQrJ1wiIC8+XFxcblx0XHRcdFx0XHRcdFx0ICBcdFx0PC9hPlxcXG5cdFx0XHRcdFx0XHRcdFx0ICBcdDxkaXYgY2xhc3M9XCJzZWNvbmQtaW5mb1wiPlxcXG5cdFx0XHRcdFx0XHRcdFx0ICAgIFx0PGRpdiBjbGFzcz1cImZpcnN0IHByb2R1Y3QtaXRlbVwiIGRhdGEtcHJvZHVjdC1pZD1cInByb2R1Y3QtJytpdGVtLmVudGl0eUlkKydcIj5cXFxuXHRcdFx0XHRcdFx0XHRcdCAgICAgIFx0XHQ8aDQgY2xhc3M9XCJjYXJkLXRpdGxlXCI+XFxcblx0XHRcdFx0XHRcdFx0XHRcdFx0ICAgICAgICA8YSBocmVmPVwiJytpdGVtLnBhdGgrJ1wiPicraXRlbS5uYW1lKyc8L2E+XFxcblx0XHRcdFx0XHRcdFx0XHRcdFx0ICAgIDwvaDQ+XFxcblx0XHRcdFx0XHRcdFx0XHQgICAgICBcdFx0PGRpdiBjbGFzcz1cImNhcmQtcHJpY2VcIiBkYXRhLXRlc3QtaW5mby10eXBlPVwicHJpY2VcIj4nK3ByaWNlKyc8L2Rpdj5cXFxuXHRcdFx0XHRcdFx0XHRcdCAgICAgIFx0XHQnK2J0bkFjdCsnXFxcblx0XHRcdFx0XHRcdFx0XHQgICAgXHQ8L2Rpdj5cXFxuXHRcdFx0XHRcdFx0XHQgICAgXHRcdDxhIGNsYXNzPVwidGV4dC1uby11bmRlcmxpbmUgc2Vjb25kXCIgaHJlZj1cIicraXRlbS5wYXRoKydcIj5cXFxuXHRcdFx0XHRcdFx0XHQgICAgXHRcdFx0PGltZyBzcmM9XCInK2l0ZW0uZGVmYXVsdEltYWdlLmltZzcwcHgrJ1wiIGFsdD1cIicraXRlbS5kZWZhdWx0SW1hZ2UuYWx0VGV4dCsnXCIgdGl0bGU9XCInK2l0ZW0uZGVmYXVsdEltYWdlLmFsdFRleHQrJ1wiIC8+XFxcblx0XHRcdFx0XHRcdFx0ICAgIFx0XHQ8L2E+XFxcblx0XHRcdFx0XHRcdFx0ICBcdFx0PC9kaXY+XFxcblx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj4nO1xuXG5cdFx0XHRcdHRtcC5hcHBlbmQoaHRtbF9jYXJkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXHRcblx0JChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKXtcblx0XHR2YXIgdmlldyA9IHRydWU7XG5cblx0XHRCQ19Qcm9kdWN0cy5yZWNvcmRSZWNlbnRseVZpZXdlZCgpO1xuXG5cdFx0dmFyIGNvb2tpZVZhbHVlID0gZ2V0Q29va2llKFwiYmlnY29tbWVyY2VfcmVjZW50bHlfdmlld2VkXCIpO1xuXG5cdFx0aWYgKCEoY29va2llVmFsdWUgIT09IG51bGwgJiYgY29va2llVmFsdWUgIT09IHVuZGVmaW5lZCAmJiBjb29raWVWYWx1ZSAhPT0gXCJcIikpIHtcblx0XHQgICAgJCgnLnJlY2VudGx5LXZpZXdlZC1wcm9kdWN0cy1zaWRlYmFyJykuZmluZChcIi5uby1wcm9kdWN0c1wiKS5zaG93KCk7XG5cdFx0ICAgICQoJyNyZWNlbnRseS12aWV3ZWQtcHJvZHVjdHMtbGlzdCcpLmNzcyhcInBhZGRpbmdcIiwgXCIwXCIpO1xuXHRcdH1cblx0XHRlbHNlIHtcblxuXHRcdFx0QkNfUHJvZHVjdHMuc2hvd1JlY2VudGx5Vmlld2VkKHtcblx0XHRcdCAgICBob3dNYW55VG9TaG93OiBjb250ZXh0LnRoZW1lU2V0dGluZ3MuaGFsb19yZWNlbnRseV92aWV3ZWRfcHJvZHVjdHNfY291bnQsXG5cdFx0XHQgICAgaG93TWFueVRvU3RvcmVJbk1lbW9yeTogY29udGV4dC50aGVtZVNldHRpbmdzLmhhbG9fcmVjZW50bHlfdmlld2VkX3Byb2R1Y3RzX2NvdW50LFxuXHRcdFx0ICAgIHdyYXBwZXJJZDogJ3JlY2VudGx5LXZpZXdlZC1wcm9kdWN0cy1saXN0Jyxcblx0XHRcdCAgICBvbkNvbXBsZXRlOiBmdW5jdGlvbigpIHtcblx0XHRcdCAgICAgICAgLy9zdGFydFxuXHRcdFx0ICAgICAgICB2YXIgcmVjZW50bHlWaWV3QmxvY2sgPSAkKCcucmVjZW50bHktdmlld2VkLXByb2R1Y3RzLXNpZGViYXInKTtcblx0XHRcdCAgICAgICAgdmFyIHJlY2VudGx5R3JpZCA9IHJlY2VudGx5Vmlld0Jsb2NrLmZpbmQoJy5wcm9kdWN0cy1ncmlkJyk7XG5cdFx0XHQgICAgICAgIHZhciBwcm9kdWN0R3JpZCA9IHJlY2VudGx5R3JpZC5maW5kKCcuaXRlbScpO1xuXHRcdFx0ICAgICAgICByZWNlbnRseUdyaWQuZmluZChcIi5uby1wcm9kdWN0c1wiKS5yZW1vdmUoKTtcblx0XHRcdCAgICAgICAgXG5cdFx0XHQgICAgICAgIGlmIChwcm9kdWN0R3JpZC5sZW5ndGgpIHtcblxuXHRcdFx0ICAgICAgICAgICAgaWYgKHJlY2VudGx5Vmlld0Jsb2NrLmlzKCc6dmlzaWJsZScpKSB7XG5cdFx0XHQgICAgICAgICAgICAgICAgaWYgKCFyZWNlbnRseUdyaWQuaGFzQ2xhc3MoJ3NsaWNrLWluaXRpYWxpemVkJykpIHtcblx0XHRcdCAgICAgICAgICAgICAgICBcdGNvbnN0IHdXaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuXHRcdFx0ICAgICAgICAgICAgICAgIFx0Y29uc3QgcHJvZHVjdEdyaWRfbGVuZ3RoID0gcHJvZHVjdEdyaWQubGVuZ3RoO1xuXHRcdFx0ICAgICAgICAgICAgICAgICAgICBsZXQgc2xpZGVzVG9TaG93ID0gMTtcblxuXHRcdFx0ICAgICAgICAgICAgICAgICAgICBpZiAod1dpZHRoID49IDEyMDApIHtcblx0XHRcdCAgICAgICAgICAgICAgICAgICAgXHRzbGlkZXNUb1Nob3cgPSAzO1xuXG5cdFx0XHQgICAgICAgICAgICAgICAgICAgIFx0aWYgKHByb2R1Y3RHcmlkX2xlbmd0aCA8IDMpIHtcblx0XHRcdCAgICAgICAgICAgICAgICAgICAgXHRcdHNsaWRlc1RvU2hvdyA9IHByb2R1Y3RHcmlkX2xlbmd0aDtcblx0XHRcdCAgICAgICAgICAgICAgICAgICAgXHR9XG5cdFx0XHQgICAgICAgICAgICAgICAgICAgIH1cblx0XHRcdCAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAod1dpZHRoIDwgMTIwMCAmJiB3V2lkdGggPiA3NjcpIHtcblx0XHRcdCAgICAgICAgICAgICAgICAgICAgXHRzbGlkZXNUb1Nob3cgPSAyO1xuXG5cdFx0XHQgICAgICAgICAgICAgICAgICAgIFx0aWYgKHByb2R1Y3RHcmlkX2xlbmd0aCA8IDIpIHtcblx0XHRcdCAgICAgICAgICAgICAgICAgICAgXHRcdHNsaWRlc1RvU2hvdyA9IHByb2R1Y3RHcmlkX2xlbmd0aDtcblx0XHRcdCAgICAgICAgICAgICAgICAgICAgXHR9XG5cdFx0XHQgICAgICAgICAgICAgICAgICAgIH1cblx0XHRcdCAgICAgICAgICAgICAgIFx0XHRcblx0XHRcdCAgICAgICAgICAgICAgICAgICAgcmVjZW50bHlHcmlkLnNsaWNrKHtcblx0XHRcdCAgICAgICAgICAgICAgICAgICAgICAgIGluZmluaXRlOiBmYWxzZSxcblx0XHRcdCAgICAgICAgICAgICAgICAgICAgICAgIGRvdHM6IGZhbHNlLFxuXHRcdFx0ICAgICAgICAgICAgICAgICAgICAgICAgYXJyb3dzOiB0cnVlLFxuXHRcdFx0ICAgICAgICAgICAgICAgICAgICAgICAgdmVydGljYWw6IHRydWUsXG5cdFx0XHQgICAgICAgICAgICAgICAgICAgICAgICBtb2JpbGVGaXJzdDogdHJ1ZSxcblx0XHRcdCAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiBzbGlkZXNUb1Nob3csXG5cdFx0XHQgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IHNsaWRlc1RvU2hvd1xuXHRcdFx0ICAgICAgICAgICAgICAgICAgICB9KTtcblxuXHRcdFx0ICAgICAgICAgICAgICAgICAgICByZWNlbnRseUdyaWQucHJlcGVuZCgnPGRpdiBjbGFzcz1cInByb2R1Y3QtaW5mb1wiPjwvZGl2PicpO1xuXHRcdFx0ICAgICAgICAgICAgICAgIH07XG5cdFx0XHQgICAgICAgICAgICB9O1xuXHRcdFx0ICAgICAgICB9XG5cdFx0XHQgICAgICAgIC8vZW5kXG5cdFx0XHQgICAgfVxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0LyogKi9cblx0XHQkKGRvY3VtZW50KS5vbignY2xpY2snLCAnLmV4cGFuZC1yZWNlbnRseS12aWV3ZWQnLCBmdW5jdGlvbigpIHtcblx0XHRcdGlmKCQoJy5sc3Qtc2Vlbi13aWRnZXQnKS5oYXNDbGFzcygnaXMtc2hvdy13aWRnZXQnKSkge1xuXHRcdFx0XHQkKCcuZXhwYW5kLXJlY2VudGx5LXZpZXdlZCcpLnJlbW92ZUNsYXNzKCdpcy1vcGVuJyk7XG5cdFx0XHRcdCQoJy5sc3Qtc2Vlbi13aWRnZXQnKS5yZW1vdmVDbGFzcygnaXMtc2hvdy13aWRnZXQnKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdCQoJy5leHBhbmQtcmVjZW50bHktdmlld2VkJykuYWRkQ2xhc3MoJ2lzLW9wZW4nKTtcblx0XHRcdFx0JCgnLmxzdC1zZWVuLXdpZGdldCcpLmFkZENsYXNzKCdpcy1zaG93LXdpZGdldCcpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZigkKCcubHN0LXNvY2lhbC1tZWRpYScpLmhhc0NsYXNzKCdpcy1zaG93LW1lZGlhJykpIHtcblx0XHRcdFx0JCgnLmV4cGFuZC1zb2NpYWwtbWVkaWEnKS5yZW1vdmVDbGFzcygnaXMtb3BlbicpO1xuXHRcdFx0XHQkKCcubHN0LXNvY2lhbC1tZWRpYScpLnJlbW92ZUNsYXNzKCdpcy1zaG93LW1lZGlhJyk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHQkKGRvY3VtZW50KS5vbignY2xpY2snLCAnLmV4cGFuZC1zb2NpYWwtbWVkaWEnLCBmdW5jdGlvbigpIHtcblx0XHRcdGlmKCQoJy5sc3Qtc29jaWFsLW1lZGlhJykuaGFzQ2xhc3MoJ2lzLXNob3ctbWVkaWEnKSkge1xuXHRcdFx0XHQkKCcuZXhwYW5kLXNvY2lhbC1tZWRpYScpLnJlbW92ZUNsYXNzKCdpcy1vcGVuJyk7XG5cdFx0XHRcdCQoJy5sc3Qtc29jaWFsLW1lZGlhJykucmVtb3ZlQ2xhc3MoJ2lzLXNob3ctbWVkaWEnKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdCQoJy5leHBhbmQtc29jaWFsLW1lZGlhJykuYWRkQ2xhc3MoJ2lzLW9wZW4nKTtcblx0XHRcdFx0JCgnLmxzdC1zb2NpYWwtbWVkaWEnKS5hZGRDbGFzcygnaXMtc2hvdy1tZWRpYScpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZigkKCcubHN0LXNlZW4td2lkZ2V0JykuaGFzQ2xhc3MoJ2lzLXNob3ctd2lkZ2V0JykpIHtcblx0XHRcdFx0JCgnLmV4cGFuZC1yZWNlbnRseS12aWV3ZWQnKS5yZW1vdmVDbGFzcygnaXMtb3BlbicpO1xuXHRcdFx0XHQkKCcubHN0LXNlZW4td2lkZ2V0JykucmVtb3ZlQ2xhc3MoJ2lzLXNob3ctd2lkZ2V0Jyk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0XG5cdCAgICAkKGRvY3VtZW50KS5vbignY2xpY2snLCAnYS5yZWNlbnRfaXRlbV91cmwnLCBmdW5jdGlvbihlKSB7XG5cdCAgICAgICAgaWYgKHdpbmRvdy5pbm5lcldpZHRoIDwgNzY4KSB7XG5cdCAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgJCgnLnJlY2VudGx5LXZpZXdlZC1wcm9kdWN0cy1zaWRlYmFyIC5wcm9kdWN0cy1ncmlkJykub24oJ21vdXNlZW50ZXInLCAnLnNsaWNrLXNsaWRlJywgZnVuY3Rpb24oZSkge1xuXHQgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblx0ICAgICAgICB2YXIgbWFyZ2luX3RvcDtcblx0ICAgICAgICB2YXIgJGN1cnJUYXJnZXQgPSAkKGUuY3VycmVudFRhcmdldCksXG5cdCAgICAgICAgICAgIGluZGV4ID0gJGN1cnJUYXJnZXQuaW5kZXgoJy5yZWNlbnRseS12aWV3ZWQtcHJvZHVjdHMtc2lkZWJhciAucHJvZHVjdHMtZ3JpZCAuc2xpY2stYWN0aXZlJyk7XG5cblx0ICAgICAgICBjb25zdCAkdGhpc19hcnJvdyA9ICQoJy5yZWNlbnRseS12aWV3ZWQtcHJvZHVjdHMtc2lkZWJhciAucHJvZHVjdHMtZ3JpZCAuc2xpY2stYXJyb3cnKTtcblx0ICAgICAgICBjb25zdCAkdGhpc19hcnJvd05leHQgPSAkKCcucmVjZW50bHktdmlld2VkLXByb2R1Y3RzLXNpZGViYXIgLnByb2R1Y3RzLWdyaWQgLnNsaWNrLW5leHQnKTtcblx0ICAgICAgICBjb25zdCBzbGlja0F0aXZlX2xlbmd0aCA9ICQoJy5yZWNlbnRseS12aWV3ZWQtcHJvZHVjdHMtc2lkZWJhciAucHJvZHVjdHMtZ3JpZCAuc2xpY2stYWN0aXZlJykubGVuZ3RoO1xuXG5cdCAgICAgICAgaWYgKCR0aGlzX2Fycm93Lmxlbmd0aCkge1xuXHRcdFx0XHRtYXJnaW5fdG9wID0gKGluZGV4ICogJCgnLmxzdC1zZWVuLXdpZGdldCAuaW4tY29udGVudCAucHJvZHVjdHMtZ3JpZCAuaXRlbScpLm91dGVySGVpZ2h0KCkpIC0gMztcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgXHRtYXJnaW5fdG9wID0gKGluZGV4ICogJCgnLmxzdC1zZWVuLXdpZGdldCAuaW4tY29udGVudCAucHJvZHVjdHMtZ3JpZCAuaXRlbScpLm91dGVySGVpZ2h0KCkpIC0gMTY7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgJChcIi5yZWNlbnRseS12aWV3ZWQtcHJvZHVjdHMtc2lkZWJhciAucHJvZHVjdC1pbmZvXCIpLmh0bWwoJCh0aGlzKS5maW5kKFwiLnNlY29uZC1pbmZvXCIpLmh0bWwoKSkuY3NzKFwibWFyZ2luLXRvcFwiLCBtYXJnaW5fdG9wKS5zaG93KCk7XG5cblx0ICAgICAgICBpZiAoaW5kZXgrMSA9PSBzbGlja0F0aXZlX2xlbmd0aCkge1xuXHQgICAgICAgIFx0JHRoaXNfYXJyb3dOZXh0LmNzcygnb3BhY2l0eScsIDApO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICBcdCR0aGlzX2Fycm93TmV4dC5jc3MoJ29wYWNpdHknLCAnJyk7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgICQoJy5yZWNlbnRseS12aWV3ZWQtcHJvZHVjdHMtc2lkZWJhciAucHJvZHVjdHMtZ3JpZCcpLm9uKCdtb3VzZWxlYXZlJywgZnVuY3Rpb24oZSkge1xuXHQgICAgXHQkKCcucmVjZW50bHktdmlld2VkLXByb2R1Y3RzLXNpZGViYXIgLnByb2R1Y3RzLWdyaWQgLnNsaWNrLW5leHQnKS5jc3MoJ29wYWNpdHknLCAnJyk7XG5cdCAgICB9KTtcblxuXHQgICAgJCgnLnJlY2VudGx5LXZpZXdlZC1wcm9kdWN0cy1zaWRlYmFyIC5wcm9kdWN0cy1ncmlkJykub24oJ21vdXNlZW50ZXInLCAnLnNsaWNrLWFycm93JywgZnVuY3Rpb24oZSkge1xuXHQgICAgICAgICQoXCIucmVjZW50bHktdmlld2VkLXByb2R1Y3RzLXNpZGViYXIgLnByb2R1Y3QtaW5mb1wiKS5oaWRlKCk7XG5cdCAgICAgICAgJCgnLnJlY2VudGx5LXZpZXdlZC1wcm9kdWN0cy1zaWRlYmFyIC5wcm9kdWN0cy1ncmlkIC5zbGljay1uZXh0JykuY3NzKCdvcGFjaXR5JywgJycpO1xuXHQgICAgfSk7XG5cblx0ICAgICQoZG9jdW1lbnQpLm9uKCd0b3VjaHN0YXJ0JywgZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgICAgIGlmICgkKGV2LnRhcmdldCkuY2xvc2VzdCgnLnJlY2VudGx5LXZpZXdlZC1wcm9kdWN0cy1zaWRlYmFyIC5wcm9kdWN0LWluZm8sIC5yZWNlbnRseS12aWV3ZWQtcHJvZHVjdHMtc2lkZWJhciAucHJvZHVjdHMtZ3JpZCAuc2xpY2stc2xpZGUnKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIFx0JCgnLnJlY2VudGx5LXZpZXdlZC1wcm9kdWN0cy1zaWRlYmFyIC5wcm9kdWN0cy1ncmlkIC5zbGljay1uZXh0JykuY3NzKCdvcGFjaXR5JywgJycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuXHQgICAgdmFyIGJhY2tUb1RvcCA9ICQoJy5yZWNlbnRseS12aWV3ZWQtcHJvZHVjdHMtc2lkZWJhciAuYmFja3RvVG9wJyk7XG5cblx0ICAgIGlmICgkKHRoaXMpLnNjcm9sbFRvcCgpID4gMjIwKSB7XG5cdCAgICAgICAgJCgnLnJlY2VudGx5LXZpZXdlZC1wcm9kdWN0cy1zaWRlYmFyJykuYWRkQ2xhc3MoXCJzbGlkZWQtdXBcIik7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICAgICQoJy5yZWNlbnRseS12aWV3ZWQtcHJvZHVjdHMtc2lkZWJhcicpLnJlbW92ZUNsYXNzKFwic2xpZGVkLXVwXCIpO1xuXHQgICAgfTtcblxuXHQgICAgJCh3aW5kb3cpLnNjcm9sbChmdW5jdGlvbigpIHtcblx0ICAgICAgICBpZiAoJCh0aGlzKS5zY3JvbGxUb3AoKSA+IDIyMCkge1xuXHQgICAgICAgICAgICAkKCcucmVjZW50bHktdmlld2VkLXByb2R1Y3RzLXNpZGViYXInKS5hZGRDbGFzcyhcInNsaWRlZC11cFwiKTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAkKCcucmVjZW50bHktdmlld2VkLXByb2R1Y3RzLXNpZGViYXInKS5yZW1vdmVDbGFzcyhcInNsaWRlZC11cFwiKTtcblx0ICAgICAgICB9O1xuXHQgICAgfSk7XG5cblx0ICAgIGJhY2tUb1RvcC5vbignY2xpY2suc2Nyb2xsVG9wJywgZnVuY3Rpb24oZSkge1xuXHQgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblx0ICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHQgICAgICAgICQoJ2h0bWwsIGJvZHknKS5hbmltYXRlKHtcblx0ICAgICAgICAgICAgc2Nyb2xsVG9wOiAwXG5cdCAgICAgICAgfSwgNDAwKTtcblx0ICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICB9KTtcdFx0XG5cdH0pO1xuXG59XG4iLCJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB5b3V0dWJlQ2Fyb3VzZWxGYWN0b3J5KCRzY29wZSkge1xuICAgIGlmICgkc2NvcGUuZmluZCgnW2RhdGEteW91dHViZV0nKS5sZW5ndGggPiAwKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygd2luZG93Lm9uWW91VHViZUlmcmFtZUFQSVJlYWR5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgd2luZG93Lm9uWW91VHViZUlmcmFtZUFQSVJlYWR5ID0gaW5pdENhcm91c2VsLmJpbmQod2luZG93LCAkc2NvcGUpO1xuXG4gICAgICAgICAgICBjb25zdCB0YWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICAgICAgICAgIHRhZy5zcmMgPSAnaHR0cHM6Ly93d3cueW91dHViZS5jb20vcGxheWVyX2FwaSc7XG4gICAgICAgICAgICBjb25zdCBmaXJzdFNjcmlwdFRhZyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXTtcbiAgICAgICAgICAgIGZpcnN0U2NyaXB0VGFnLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRhZywgZmlyc3RTY3JpcHRUYWcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaW5pdENhcm91c2VsKCRzY29wZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGhhbG9Zb3V0dWJlU2xpY2soc2xpY2spIHtcbiAgICBpZiAod2luZG93LmlubmVyV2lkdGggPj0gOTkyKSB7XG4gICAgICAgIHZhciAkc2xpY2sgPSAkKHNsaWNrKS5maW5kKCcucHJvZHVjdFZpZXctbmF2Om5vdCgucHJvZHVjdFZpZXctbmF2LW1vYmlsZSknKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZhciAkc2xpY2sgPSAkKHNsaWNrKS5maW5kKCcucHJvZHVjdFZpZXctbmF2LW1vYmlsZScpO1xuICAgIH1cblxuICAgIHZhciAkdmlkZW9zID0gJHNsaWNrLmZpbmQoJ1tkYXRhLXlvdXR1YmVdJyk7XG5cbiAgICAgYmluZEV2ZW50cyhzbGljayk7XG5cbiAgICBmdW5jdGlvbiBiaW5kRXZlbnRzKCkge1xuICAgICAgICBpZiAoJHNsaWNrLmhhc0NsYXNzKCdzbGljay1pbml0aWFsaXplZCcpKSB7XG4gICAgICAgICAgICBvblNsaWNrSW5pdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgJHNsaWNrLm9uKCdpbml0Jywgb25TbGlja0luaXQpO1xuICAgICAgICAkc2xpY2sub24oJ2JlZm9yZUNoYW5nZScsIG9uU2xpY2tCZWZvcmVDaGFuZ2UpO1xuICAgICAgICAkc2xpY2sub24oJ2FmdGVyQ2hhbmdlJywgb25TbGlja0FmdGVyQ2hhbmdlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvblBsYXllclJlYWR5KGV2ZW50KSB7XG4gICAgICAgICQoZXZlbnQudGFyZ2V0LmdldElmcmFtZSgpKS5jbG9zZXN0KCcuc2xpY2stc2xpZGUnKS5kYXRhKCd5b3V0dWJlLXBsYXllcicsIGV2ZW50LnRhcmdldCk7XG5cbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAoJChldmVudC50YXJnZXQuZ2V0SWZyYW1lKCkpLmNsb3Nlc3QoJy5zbGljay1zbGlkZScpLmhhc0NsYXNzKCdzbGljay1hY3RpdmUnKSkge1xuICAgICAgICAgICAgICAgICRzbGljay5zbGljaygnc2xpY2tQYXVzZScpO1xuICAgICAgICAgICAgICAgIGV2ZW50LnRhcmdldC5wbGF5VmlkZW8oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgMjAwKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvblBsYXllclN0YXRlQ2hhbmdlKGV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudC5kYXRhID09PSBZVC5QbGF5ZXJTdGF0ZS5QTEFZSU5HKSB7XG4gICAgICAgICAgICAkc2xpY2suc2xpY2soJ3NsaWNrUGF1c2UnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChldmVudC5kYXRhID09PSBZVC5QbGF5ZXJTdGF0ZS5FTkRFRCkge1xuICAgICAgICAgICAgJHNsaWNrLnNsaWNrKCdzbGlja05leHQnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uU2xpY2tJbml0KCkge1xuICAgICAgICAkdmlkZW9zLmVhY2goKGosIHZpZCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgJHZpZCA9ICQodmlkKTtcbiAgICAgICAgICAgIGNvbnN0IGlkID0gYHlvdXR1YmVfcGxheWVyXyR7Xy51bmlxdWVJZCgpfWA7XG5cbiAgICAgICAgICAgICR2aWQuYXR0cignaWQnLCBpZCk7XG5cbiAgICAgICAgICAgIGNvbnN0IHBsYXllciA9IG5ldyBZVC5QbGF5ZXIoaWQsIHtcbiAgICAgICAgICAgICAgICBob3N0OiAnaHR0cDovL3d3dy55b3V0dWJlLmNvbScsXG4gICAgICAgICAgICAgICAgdmlkZW9JZDogJHZpZC5kYXRhKCd5b3V0dWJlJyksXG4gICAgICAgICAgICAgICAgd21vZGU6ICd0cmFuc3BhcmVudCcsXG4gICAgICAgICAgICAgICAgcGxheWVyVmFyczoge1xuICAgICAgICAgICAgICAgICAgICBhdXRvcGxheTogMCxcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbHM6IDAsXG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVrYjogMSxcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlanNhcGk6IDEsXG4gICAgICAgICAgICAgICAgICAgIGZzOiAwLFxuICAgICAgICAgICAgICAgICAgICByZWw6IDAsXG4gICAgICAgICAgICAgICAgICAgIHNob3dpbmZvOiAwLFxuICAgICAgICAgICAgICAgICAgICBpdl9sb2FkX3BvbGljeTogMyxcbiAgICAgICAgICAgICAgICAgICAgbW9kZXN0YnJhbmRpbmc6IDEsXG4gICAgICAgICAgICAgICAgICAgIHdtb2RlOiAndHJhbnNwYXJlbnQnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZXZlbnRzOiB7XG4gICAgICAgICAgICAgICAgICAgIG9uUmVhZHk6IG9uUGxheWVyUmVhZHksXG4gICAgICAgICAgICAgICAgICAgIG9uU3RhdGVDaGFuZ2U6IG9uUGxheWVyU3RhdGVDaGFuZ2UsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvblNsaWNrQmVmb3JlQ2hhbmdlKCkge1xuICAgICAgICBjb25zdCBwbGF5ZXIgPSAkc2xpY2suZmluZCgnLnNsaWNrLXNsaWRlLnNsaWNrLWFjdGl2ZScpLmRhdGEoJ3lvdXR1YmUtcGxheWVyJyk7XG5cbiAgICAgICAgaWYgKHBsYXllcikge1xuICAgICAgICAgICAgcGxheWVyLnN0b3BWaWRlbygpO1xuICAgICAgICAgICAgJHNsaWNrLnJlbW92ZUNsYXNzKCdzbGljay1zbGlkZXItLXBsYXl2aWRlbycpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25TbGlja0FmdGVyQ2hhbmdlKCkge1xuICAgICAgICBjb25zdCBwbGF5ZXIgPSAkc2xpY2suZmluZCgnLnNsaWNrLXNsaWRlLnNsaWNrLWFjdGl2ZScpLmRhdGEoJ3lvdXR1YmUtcGxheWVyJyk7XG5cbiAgICAgICAgaWYgKHBsYXllcikge1xuICAgICAgICAgICAgJHNsaWNrLnNsaWNrKCdzbGlja1BhdXNlJyk7XG4gICAgICAgICAgICAkc2xpY2suYWRkQ2xhc3MoJ3NsaWNrLXNsaWRlci0tcGxheXZpZGVvJyk7XG4gICAgICAgICAgICBwbGF5ZXIucGxheVZpZGVvKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGluaXRDYXJvdXNlbCgkc2NvcGUpIHtcbiAgICAkc2NvcGUuZWFjaCgoaSwgc2xpY2spID0+IHtcbiAgICAgICAgY29uc3QgJHNsaWNrID0gJChzbGljayk7XG5cbiAgICAgICAgaWYgKCRzbGljay5maW5kKCdbZGF0YS15b3V0dWJlXScpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICRzbGljay5hZGRDbGFzcygnc2xpY2stc2xpZGVyLS12aWRlbycpO1xuXG4gICAgICAgICAgICBoYWxvWW91dHViZVNsaWNrKHNsaWNrKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGFnZU1hbmFnZXIge1xuICAgIGNvbnN0cnVjdG9yKGNvbnRleHQpIHtcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgICB9XG5cbiAgICB0eXBlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lO1xuICAgIH1cblxuICAgIG9uUmVhZHkoKSB7XG4gICAgfVxuXG4gICAgc3RhdGljIGxvYWQoY29udGV4dCkge1xuICAgICAgICBjb25zdCBwYWdlID0gbmV3IHRoaXMoY29udGV4dCk7XG5cbiAgICAgICAgJChkb2N1bWVudCkucmVhZHkoKCkgPT4ge1xuICAgICAgICAgICAgcGFnZS5vblJlYWR5LmJpbmQocGFnZSkoKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIiwiaW1wb3J0ICdqcXVlcnktem9vbSc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgRmFuY3lib3ggfSBmcm9tICdmYW5jeWJveCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEltYWdlR2FsbGVyeSB7XG4gICAgY29uc3RydWN0b3IoJGdhbGxlcnkpIHtcbiAgICAgICAgdGhpcy4kbWFpbkltYWdlID0gJGdhbGxlcnkuZmluZCgnW2RhdGEtaW1hZ2UtZ2FsbGVyeS1tYWluXScpO1xuICAgICAgICB0aGlzLiRtYWluSW1hZ2VOZXN0ZWQgPSAkZ2FsbGVyeS5maW5kKCdbZGF0YS1tYWluLWltYWdlXScpO1xuICAgICAgICB0aGlzLiRzZWxlY3RPcHRpb24gPSAkZ2FsbGVyeS5maW5kKCcuc2xpY2stY3VycmVudCBbZGF0YS1pbWFnZS1nYWxsZXJ5LW1haW5dJyk7XG4gICAgICAgIHRoaXMuJHNlbGVjdGFibGVJbWFnZXMgPSAkZ2FsbGVyeS5maW5kKCdbZGF0YS1pbWFnZS1nYWxsZXJ5LWl0ZW1dJyk7XG4gICAgICAgIHRoaXMuJHN3aXBUaHVtYm5haWxzID0gJGdhbGxlcnkuZmluZCgnLnByb2R1Y3RWaWV3LWZvcicpO1xuICAgICAgICB0aGlzLiRzd2lwSW1hZ2UgPSAkZ2FsbGVyeS5maW5kKCcucHJvZHVjdFZpZXctbmF2Jyk7XG4gICAgICAgIHRoaXMuY3VycmVudEltYWdlID0ge307XG4gICAgfVxuXG4gICAgaW5pdCgpIHtcbiAgICAgICAgdGhpcy5iaW5kRXZlbnRzKCk7XG4gICAgICAgIHRoaXMuc2V0SW1hZ2Vab29tKCk7XG4gICAgICAgIHRoaXMuZmFuY3lib3hab29tKCk7XG4gICAgfVxuXG4gICAgc2V0TWFpbkltYWdlKGltZ09iaikge1xuICAgICAgICB0aGlzLmN1cnJlbnRJbWFnZSA9IF8uY2xvbmUoaW1nT2JqKTtcblxuICAgICAgICB0aGlzLnNldEFjdGl2ZVRodW1iKCk7XG4gICAgICAgIHRoaXMuc3dhcE1haW5JbWFnZSgpO1xuICAgIH1cblxuICAgIHNldEFsdGVybmF0ZUltYWdlKGltZ09iaikge1xuICAgICAgICBpZiAoIXRoaXMuc2F2ZWRJbWFnZSkge1xuICAgICAgICAgICAgdGhpcy5zYXZlZEltYWdlID0ge1xuICAgICAgICAgICAgICAgIG1haW5JbWFnZVVybDogdGhpcy4kbWFpbkltYWdlLmZpbmQoJ2ltZycpLmF0dHIoJ3NyYycpLFxuICAgICAgICAgICAgICAgIHpvb21JbWFnZVVybDogdGhpcy4kbWFpbkltYWdlLmF0dHIoJ2RhdGEtem9vbS1pbWFnZScpLFxuICAgICAgICAgICAgICAgIG1haW5JbWFnZVNyY3NldDogdGhpcy4kbWFpbkltYWdlLmZpbmQoJ2ltZycpLmF0dHIoJ3NyY3NldCcpLFxuICAgICAgICAgICAgICAgICRzZWxlY3RlZFRodW1iOiB0aGlzLmN1cnJlbnRJbWFnZS4kc2VsZWN0ZWRUaHVtYixcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXRNYWluSW1hZ2UoaW1nT2JqKTtcblxuICAgICAgICBpZiAoJCh3aW5kb3cpLndpZHRoKCkgPiAxMDI0KSB7XG4gICAgICAgICAgICB0aGlzLiRtYWluSW1hZ2UudHJpZ2dlcignem9vbS5kZXN0cm95Jyk7XG4gICAgICAgICAgICB0aGlzLiRtYWluSW1hZ2Uuem9vbSh7IHVybDogdGhpcy4kbWFpbkltYWdlLmF0dHIoJ2RhdGEtem9vbS1pbWFnZScpLCB0b3VjaDogZmFsc2UgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXN0b3JlSW1hZ2UoKSB7XG4gICAgICAgIGlmICh0aGlzLnNhdmVkSW1hZ2UpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0TWFpbkltYWdlKHRoaXMuc2F2ZWRJbWFnZSk7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5zYXZlZEltYWdlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2VsZWN0TmV3SW1hZ2UoZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGNvbnN0ICR0YXJnZXQgPSAkKGUuY3VycmVudFRhcmdldCk7XG4gICAgICAgIGNvbnN0IGltZ09iaiA9IHtcbiAgICAgICAgICAgIG1haW5JbWFnZVVybDogJHRhcmdldC5hdHRyKCdkYXRhLWltYWdlLWdhbGxlcnktbmV3LWltYWdlLXVybCcpLFxuICAgICAgICAgICAgem9vbUltYWdlVXJsOiAkdGFyZ2V0LmF0dHIoJ2RhdGEtaW1hZ2UtZ2FsbGVyeS16b29tLWltYWdlLXVybCcpLFxuICAgICAgICAgICAgbWFpbkltYWdlU3Jjc2V0OiAkdGFyZ2V0LmF0dHIoJ2RhdGEtaW1hZ2UtZ2FsbGVyeS1uZXctaW1hZ2Utc3Jjc2V0JyksXG4gICAgICAgICAgICAkc2VsZWN0ZWRUaHVtYjogJHRhcmdldCxcbiAgICAgICAgICAgIG1haW5JbWFnZUFsdDogJHRhcmdldC5jaGlsZHJlbigpLmZpcnN0KCkuYXR0cignYWx0JyksXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc2V0TWFpbkltYWdlKGltZ09iaik7XG4gICAgfVxuXG4gICAgc2VsZWN0TmV3SW1hZ2UyKGUpIHtcbiAgICAgICAgY29uc3QgJHRhcmdldCA9ICQoZS5jdXJyZW50VGFyZ2V0KS5maW5kKCcuc2xpY2stY3VycmVudCBbZGF0YS1pbWFnZS1nYWxsZXJ5LWl0ZW1dJyk7XG4gICAgICAgIGNvbnN0IGltZ09iaiA9IHtcbiAgICAgICAgICAgIG1haW5JbWFnZVVybDogJHRhcmdldC5hdHRyKCdkYXRhLWltYWdlLWdhbGxlcnktbmV3LWltYWdlLXVybCcpLFxuICAgICAgICAgICAgem9vbUltYWdlVXJsOiAkdGFyZ2V0LmF0dHIoJ2RhdGEtaW1hZ2UtZ2FsbGVyeS16b29tLWltYWdlLXVybCcpLFxuICAgICAgICAgICAgbWFpbkltYWdlU3Jjc2V0OiAkdGFyZ2V0LmF0dHIoJ2RhdGEtaW1hZ2UtZ2FsbGVyeS1uZXctaW1hZ2Utc3Jjc2V0JyksXG4gICAgICAgICAgICAkc2VsZWN0ZWRUaHVtYjogJChlLmN1cnJlbnRUYXJnZXQpLmZpbmQoJy5zbGljay1jdXJyZW50JyksXG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICB0aGlzLnNldE1haW5JbWFnZShpbWdPYmopO1xuXG4gICAgICAgIGlmICgkKHdpbmRvdykud2lkdGgoKSA+IDEwMjQpIHtcbiAgICAgICAgICAgIHRoaXMuJG1haW5JbWFnZS50cmlnZ2VyKCd6b29tLmRlc3Ryb3knKTtcbiAgICAgICAgICAgIHRoaXMuJG1haW5JbWFnZS56b29tKHsgdXJsOiAkdGFyZ2V0LmRhdGEoJ2ltYWdlLWdhbGxlcnktem9vbS1pbWFnZS11cmwnKX0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2VsZWN0TmV3SW1hZ2UzKGUpIHtcbiAgICAgICAgY29uc3QgJHRhcmdldCA9IHRoaXMuJHN3aXBUaHVtYm5haWxzLmZpbmQoJy5zbGljay1jdXJyZW50IFtkYXRhLWltYWdlLWdhbGxlcnktaXRlbV0nKTtcbiAgICAgICAgY29uc3QgaW1nT2JqID0ge1xuICAgICAgICAgICAgbWFpbkltYWdlVXJsOiAkdGFyZ2V0LmF0dHIoJ2RhdGEtaW1hZ2UtZ2FsbGVyeS1uZXctaW1hZ2UtdXJsJyksXG4gICAgICAgICAgICB6b29tSW1hZ2VVcmw6ICR0YXJnZXQuYXR0cignZGF0YS1pbWFnZS1nYWxsZXJ5LXpvb20taW1hZ2UtdXJsJyksXG4gICAgICAgICAgICBtYWluSW1hZ2VTcmNzZXQ6ICR0YXJnZXQuYXR0cignZGF0YS1pbWFnZS1nYWxsZXJ5LW5ldy1pbWFnZS1zcmNzZXQnKSxcbiAgICAgICAgICAgICRzZWxlY3RlZFRodW1iOiAkKCcucHJvZHVjdFZpZXctZm9yJykuZmluZCgnLnNsaWNrLWN1cnJlbnQnKSxcbiAgICAgICAgICAgIG1haW5JbWFnZUFsdDogJHRhcmdldC5jaGlsZHJlbigpLmZpcnN0KCkuYXR0cignYWx0JyksXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5zZXRNYWluSW1hZ2UoaW1nT2JqKTtcblxuICAgICAgICBpZiAoJCh3aW5kb3cpLndpZHRoKCkgPiAxMDI0KSB7XG4gICAgICAgICAgICB0aGlzLiRtYWluSW1hZ2UudHJpZ2dlcignem9vbS5kZXN0cm95Jyk7XG4gICAgICAgICAgICB0aGlzLiRtYWluSW1hZ2Uuem9vbSh7IHVybDogJHRhcmdldC5kYXRhKCdpbWFnZS1nYWxsZXJ5LXpvb20taW1hZ2UtdXJsJyl9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldEFjdGl2ZVRodW1iKCkge1xuICAgICAgICB0aGlzLiRzZWxlY3RhYmxlSW1hZ2VzLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUnKTtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudEltYWdlLiRzZWxlY3RlZFRodW1iKSB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRJbWFnZS4kc2VsZWN0ZWRUaHVtYi5hZGRDbGFzcygnaXMtYWN0aXZlJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzd2FwTWFpbkltYWdlKCkge1xuICAgICAgICBjb25zdCBpc0Jyb3dzZXJJRSA9IG5hdmlnYXRvci51c2VyQWdlbnQuaW5jbHVkZXMoJ1RyaWRlbnQnKTtcblxuICAgICAgICB0aGlzLiRtYWluSW1hZ2UuYXR0cih7ICdkYXRhLXpvb20taW1hZ2UnOiB0aGlzLmN1cnJlbnRJbWFnZS56b29tSW1hZ2VVcmwsIH0pXG4gICAgICAgICAgICAuZmluZCgnYScpLmF0dHIoe2hyZWY6IHRoaXMuY3VycmVudEltYWdlLm1haW5JbWFnZVVybH0pXG4gICAgICAgICAgICAuZmluZCgnaW1nJykuYXR0cih7c3JjOiB0aGlzLmN1cnJlbnRJbWFnZS5tYWluSW1hZ2VVcmx9KTtcblxuICAgICAgICB0aGlzLiRtYWluSW1hZ2UuZmluZCgnLnByb2R1Y3RWaWV3LWltZy1jb250YWluZXIgaW1nJykuYXR0cih7c3Jjc2V0OiB0aGlzLmN1cnJlbnRJbWFnZS5tYWluSW1hZ2VVcmx9KTsgIFxuXG4gICAgICAgIHRoaXMuJG1haW5JbWFnZS5maW5kKCdpbWcuem9vbUltZycpLmF0dHIoe3NyYzogdGhpcy5jdXJyZW50SW1hZ2Uuem9vbUltYWdlVXJsfSlcbiAgICAgICAgICAgIC5maW5kKCdpbWcuem9vbUltZycpLmF0dHIoe3NyY3NldDogdGhpcy5jdXJyZW50SW1hZ2Uuem9vbUltYWdlVXJsfSk7XG5cbiAgICAgICAgdGhpcy4kbWFpbkltYWdlTmVzdGVkLmF0dHIoe1xuICAgICAgICAgICAgYWx0OiB0aGlzLmN1cnJlbnRJbWFnZS5tYWluSW1hZ2VBbHQsXG4gICAgICAgICAgICB0aXRsZTogdGhpcy5jdXJyZW50SW1hZ2UubWFpbkltYWdlQWx0LFxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoaXNCcm93c2VySUUpIHtcbiAgICAgICAgICAgIGNvbnN0IGZhbGxiYWNrU3R5bGVzSUUgPSB7XG4gICAgICAgICAgICAgICAgJ2JhY2tncm91bmQtaW1hZ2UnOiBgdXJsKCR7dGhpcy5jdXJyZW50SW1hZ2UubWFpbkltYWdlVXJsfSZhbXBpbWJ5cGFzcz1vbilgLFxuICAgICAgICAgICAgICAgICdiYWNrZ3JvdW5kLXBvc2l0aW9uJzogJ2NlbnRlcicsXG4gICAgICAgICAgICAgICAgJ2JhY2tncm91bmQtcmVwZWF0JzogJ25vLXJlcGVhdCcsXG4gICAgICAgICAgICAgICAgJ2JhY2tncm91bmQtb3JpZ2luJzogJ2NvbnRlbnQtYm94JyxcbiAgICAgICAgICAgICAgICAnYmFja2dyb3VuZC1zaXplJzogJ2NvbnRhaW4nLFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdGhpcy4kbWFpbkltYWdlTmVzdGVkLmNzcyhmYWxsYmFja1N0eWxlc0lFKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldEltYWdlWm9vbSgpIHtcbiAgICAgICAgaWYgKCQod2luZG93KS53aWR0aCgpID4gMTAyNCkge1xuICAgICAgICAgICB0aGlzLiRtYWluSW1hZ2Uuem9vbSh7IHVybDogdGhpcy4kbWFpbkltYWdlLmF0dHIoJ2RhdGEtem9vbS1pbWFnZScpLCB0b3VjaDogZmFsc2UgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmYW5jeWJveFpvb20oKSB7XG4gICAgICAgIGlmKCQoJy5wcm9kdWN0Vmlldy1uYXYnKS5sZW5ndGggPiAwKXtcbiAgICAgICAgICAgIHZhciAkaW1hZ2VQcm9kdWN0Um93ID0gJCgnLnByb2R1Y3RWaWV3LW5hdicpLmZpbmQoJy5wcm9kdWN0Vmlldy1pbWFnZScpO1xuICAgICAgICAgICAgICAgIGZhbmN5Qm94SW1hZ2UoJGltYWdlUHJvZHVjdFJvdy5maW5kKCdbZGF0YS1mYW5jeWJveF0nKSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZmFuY3lCb3hJbWFnZSgkaW1hZ2Upe1xuICAgICAgICAgICAgRmFuY3lib3guYmluZCgnW2RhdGEtZmFuY3lib3g9XCJpbWFnZXNcIl0nLCB7XG4gICAgICAgICAgICAgICAgaW5maW5pdGU6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGJpbmRFdmVudHMoKSB7XG4gICAgICAgIGlmICgkKHdpbmRvdykud2lkdGgoKSA+IDU1MCkge1xuICAgICAgICAgICAgdGhpcy4kc2VsZWN0YWJsZUltYWdlcy5vbignY2xpY2snLCB0aGlzLnNlbGVjdE5ld0ltYWdlLmJpbmQodGhpcykpO1xuICAgICAgICAgICAgdGhpcy4kc3dpcFRodW1ibmFpbHMub24oJ2FmdGVyQ2hhbmdlJywgdGhpcy5zZWxlY3ROZXdJbWFnZTIuYmluZCh0aGlzKSk7XG4gICAgICAgICAgICB0aGlzLiRzd2lwSW1hZ2Uub24oJ2FmdGVyQ2hhbmdlJywgdGhpcy5zZWxlY3ROZXdJbWFnZTMuYmluZCh0aGlzKSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgJ2ZvdW5kYXRpb24tc2l0ZXMvanMvZm91bmRhdGlvbi9mb3VuZGF0aW9uJztcbmltcG9ydCAnZm91bmRhdGlvbi1zaXRlcy9qcy9mb3VuZGF0aW9uL2ZvdW5kYXRpb24ucmV2ZWFsJztcbmltcG9ydCBub2QgZnJvbSAnLi9jb21tb24vbm9kJztcbmltcG9ydCBQYWdlTWFuYWdlciBmcm9tICcuL3BhZ2UtbWFuYWdlcic7XG5pbXBvcnQgeyB3aXNobGlzdFBhZ2luYXRvckhlbHBlciB9IGZyb20gJy4vY29tbW9uL3V0aWxzL3BhZ2luYXRpb24tdXRpbHMnO1xuaW1wb3J0IHsgYW5ub3VuY2VJbnB1dEVycm9yTWVzc2FnZSB9IGZyb20gJy4vY29tbW9uL3V0aWxzL2Zvcm0tdXRpbHMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXaXNoTGlzdCBleHRlbmRzIFBhZ2VNYW5hZ2VyIHtcbiAgICBjb25zdHJ1Y3Rvcihjb250ZXh0KSB7XG4gICAgICAgIHN1cGVyKGNvbnRleHQpO1xuXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHRlbXBsYXRlOiAnYWNjb3VudC9hZGQtd2lzaGxpc3QnLFxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjb25maXJtIGJveCBiZWZvcmUgZGVsZXRpbmcgYWxsIHdpc2ggbGlzdHNcbiAgICAgKi9cbiAgICB3aXNobGlzdERlbGV0ZUNvbmZpcm0oKSB7XG4gICAgICAgICQoJ2JvZHknKS5vbignY2xpY2snLCAnW2RhdGEtd2lzaGxpc3QtZGVsZXRlXScsIGV2ZW50ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNvbmZpcm1lZCA9IHdpbmRvdy5jb25maXJtKHRoaXMuY29udGV4dC53aXNobGlzdERlbGV0ZSk7XG5cbiAgICAgICAgICAgIGlmIChjb25maXJtZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmVnaXN0ZXJBZGRXaXNoTGlzdFZhbGlkYXRpb24oJGFkZFdpc2hsaXN0Rm9ybSkge1xuICAgICAgICB0aGlzLmFkZFdpc2hsaXN0VmFsaWRhdG9yID0gbm9kKHtcbiAgICAgICAgICAgIHN1Ym1pdDogJy53aXNobGlzdC1mb3JtIGlucHV0W3R5cGU9XCJzdWJtaXRcIl0nLFxuICAgICAgICAgICAgdGFwOiBhbm5vdW5jZUlucHV0RXJyb3JNZXNzYWdlLFxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmFkZFdpc2hsaXN0VmFsaWRhdG9yLmFkZChbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3I6ICcud2lzaGxpc3QtZm9ybSBpbnB1dFtuYW1lPVwid2lzaGxpc3RuYW1lXCJdJyxcbiAgICAgICAgICAgICAgICB2YWxpZGF0ZTogKGNiLCB2YWwpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdmFsLmxlbmd0aCA+IDA7XG5cbiAgICAgICAgICAgICAgICAgICAgY2IocmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZTogJ1lvdSBtdXN0IGVudGVyIGEgd2lzaGxpc3QgbmFtZS4nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSk7XG5cbiAgICAgICAgJGFkZFdpc2hsaXN0Rm9ybS5vbignc3VibWl0JywgZXZlbnQgPT4ge1xuICAgICAgICAgICAgdGhpcy5hZGRXaXNobGlzdFZhbGlkYXRvci5wZXJmb3JtQ2hlY2soKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuYWRkV2lzaGxpc3RWYWxpZGF0b3IuYXJlQWxsKCd2YWxpZCcpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBvblJlYWR5KCkge1xuICAgICAgICBjb25zdCAkYWRkV2lzaExpc3RGb3JtID0gJCgnLndpc2hsaXN0LWZvcm0nKTtcblxuICAgICAgICBpZiAoJCgnW2RhdGEtcGFnaW5hdGlvbi13aXNobGlzdF0nKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHdpc2hsaXN0UGFnaW5hdG9ySGVscGVyKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoJGFkZFdpc2hMaXN0Rm9ybS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMucmVnaXN0ZXJBZGRXaXNoTGlzdFZhbGlkYXRpb24oJGFkZFdpc2hMaXN0Rm9ybSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLndpc2hsaXN0RGVsZXRlQ29uZmlybSgpO1xuICAgIH1cbn1cbiIsImltcG9ydCByZXF1ZXN0IGZyb20gJy4uL2xpYi9yZXF1ZXN0JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3Mge1xuICAgIC8qKlxuICAgICAqIEBDb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHZlcnNpb24pIHtcbiAgICAgICAgdGhpcy5yZW1vdGVWZXJzaW9uID0gdmVyc2lvbiB8fCAndjEnO1xuICAgICAgICB0aGlzLnJlbW90ZUJhc2VFbmRwb2ludCA9ICcvcmVtb3RlLyc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG1ldGhvZCBbJ0dFVCcsICdQT1NUJywgJ1BVVCcsICdERUxFVEUnXVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAgICogQHBhcmFtIHtCb29sZWFufSByZW1vdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICAgICAqL1xuICAgIG1ha2VSZXF1ZXN0KHVybCwgbWV0aG9kLCBvcHRpb25zLCByZW1vdGUsIGNhbGxiYWNrKSB7XG4gICAgICAgIHJlcXVlc3QodXJsLCB7XG4gICAgICAgICAgICBtZXRob2QsXG4gICAgICAgICAgICByZW1vdGUsXG4gICAgICAgICAgICByZXF1ZXN0T3B0aW9uczogb3B0aW9ucyxcbiAgICAgICAgfSwgY2FsbGJhY2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGVuZHBvaW50XG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG1ldGhvZCBbJ0dFVCcsICdQT1NUJywgJ1BVVCcsICdERUxFVEUnXVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICAgKi9cbiAgICByZW1vdGVSZXF1ZXN0KGVuZHBvaW50LCBtZXRob2QsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgICAgIGNvbnN0IHJlbW90ZVVybCA9IHRoaXMucmVtb3RlQmFzZUVuZHBvaW50ICsgdGhpcy5yZW1vdGVWZXJzaW9uICsgZW5kcG9pbnQ7XG5cbiAgICAgICAgdGhpcy5tYWtlUmVxdWVzdChyZW1vdGVVcmwsIG1ldGhvZCwgb3B0aW9ucywgdHJ1ZSwgY2FsbGJhY2spO1xuICAgIH1cbn1cbiIsImltcG9ydCBCb2RsRXZlbnRzQ2FydCBmcm9tICcuLi9ib2RsL2VtaXR0ZXJzL2NhcnQnO1xuaW1wb3J0IEJhc2UgZnJvbSAnLi9iYXNlJztcbmltcG9ydCBIb29rcyBmcm9tICcuLi9ob29rcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIGV4dGVuZHMgQmFzZSB7XG4gICAgY29uc3RydWN0b3IodmVyc2lvbikge1xuICAgICAgICBzdXBlcih2ZXJzaW9uKTtcbiAgICAgICAgdGhpcy5ib2RsRXZlbnRzQ2FydCA9IG51bGw7XG4gICAgfVxuXG4gICAgZ2V0Qm9kbEV2ZW50c0NhcnQoKSB7XG4gICAgICAgIGlmICghdGhpcy5ib2RsRXZlbnRzQ2FydCkge1xuICAgICAgICAgICAgdGhpcy5ib2RsRXZlbnRzQ2FydCA9IG5ldyBCb2RsRXZlbnRzQ2FydCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmJvZGxFdmVudHNDYXJ0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBhIGNvbGxlY3Rpb24gb2YgQ2FydHMuIEZvciBub3csIHRoaXMgd2lsbCBvbmx5IHJldHVybiBhbiBhcnJheSBvZiBhIHNpbmdsZSBjYXJ0IGFzIG11bHRpcGxlIGNhcnRzIHBlciBzZXNzaW9uXG4gICAgICogYXJlIG5vdCBjdXJyZW50bHkgc3VwcG9ydGVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnNcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICAgICAqL1xuICAgIGdldENhcnRzKG9wdGlvbnMgPSB7fSwgY2FsbGJhY2spIHtcbiAgICAgICAgbGV0IHVybCA9ICcvYXBpL3N0b3JlZnJvbnQvY2FydHMnO1xuXG4gICAgICAgIGlmIChvcHRpb25zLmluY2x1ZGVPcHRpb25zKSB7XG4gICAgICAgICAgICB1cmwgPSB0aGlzLmluY2x1ZGVPcHRpb25zKHVybCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm1ha2VSZXF1ZXN0KHVybCwgJ0dFVCcsIG9wdGlvbnMsIHRydWUsIChlcnIsIHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICBjYWxsYmFjayhlcnIsIHJlc3BvbnNlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBjdXJyZW50IENhcnQncyBkZXRhaWxzLCBlaXRoZXIgd2l0aCBvciB3aXRob3V0IFByb2R1Y3QgT3B0aW9uIHNlbGVjdGlvbnMuXG4gICAgICogQ2FuIGFsc28gYmUgdXNlZCB0byBnZXQgYSBwYXJ0aWN1bGFyIGNhcnQgcHJvdmlkZWQgYSBjYXJ0SWQgaW4gdGhlIG9wdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9uc1xuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAgICovXG4gICAgZ2V0Q2FydChvcHRpb25zID0ge30sIGNhbGxiYWNrKSB7XG4gICAgICAgIC8qIElmIG5vIGNhcnQgSUQgaXMgcHJvdmlkZWQsIGdldCB0aGUgY29sbGVjdGlvbiBvZiBjYXJ0cyBhbmQgcmV0dXJuIHRoZSBmaXJzdCBvbmUgKi9cbiAgICAgICAgaWYgKCFvcHRpb25zLmNhcnRJZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q2FydHMob3B0aW9ucywgKGVyciwgcmVzcG9uc2UpID0+IGNhbGxiYWNrKGVyciwgcmVzcG9uc2VbMF0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB1cmwgPSBgL2FwaS9zdG9yZWZyb250L2NhcnRzLyR7b3B0aW9ucy5jYXJ0SWR9YDtcblxuICAgICAgICBpZiAob3B0aW9ucy5pbmNsdWRlT3B0aW9ucykge1xuICAgICAgICAgICAgdXJsID0gdGhpcy5pbmNsdWRlT3B0aW9ucyh1cmwpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5tYWtlUmVxdWVzdCh1cmwsICdHRVQnLCBvcHRpb25zLCB0cnVlLCAoZXJyLCByZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgY2FsbGJhY2soZXJyLCByZXNwb25zZSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgc3VtbWFyeSBmb3IgdGhlIGN1cnJlbnQgcHJpbWFyeSBjYXJ0LiBUaGlzIHN1bW1hcnkgZG9lcyBub3QgaW5jbHVkZSB0aGUgZnVsbCBkZXRhaWxzIG9mIHRoZSBjYXJ0LCBidXRcbiAgICAgKiB0aGUgcmVzcG9uc2UgdGltZSBpcyBtdWNoIGZhc3RlciBhbmQgaXQncyBhcHByb3ByaWF0ZSBmb3Igc3VtbWFyeSB1c2UgY2FzZXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9uc1xuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAgICovXG4gICAgZ2V0Q2FydFN1bW1hcnkob3B0aW9ucyA9IHt9LCBjYWxsYmFjaykge1xuICAgICAgICBjb25zdCB1cmwgPSAnL2FwaS9zdG9yZWZyb250L2NhcnQtc3VtbWFyeSc7XG5cbiAgICAgICAgdGhpcy5tYWtlUmVxdWVzdCh1cmwsICdHRVQnLCBvcHRpb25zLCB0cnVlLCAoZXJyLCByZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgY2FsbGJhY2soZXJyLCByZXNwb25zZSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCB0aGUgcGFyYW1ldGVycyB0byBhIFVSTCBuZWVkZWQgdG8gZ2V0IHByb2R1Y3Qgb3B0aW9uIGRldGFpbHMgb24gY2FydCBsaW5lIGl0ZW1zXG4gICAgICogQHBhcmFtIHVybFxuICAgICAqL1xuICAgIGluY2x1ZGVPcHRpb25zKHVybCkge1xuICAgICAgICByZXR1cm4gYCR7dXJsfT9pbmNsdWRlPWxpbmVJdGVtcy5waHlzaWNhbEl0ZW1zLm9wdGlvbnMsbGluZUl0ZW1zLmRpZ2l0YWxJdGVtcy5vcHRpb25zYDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYSBzdW0gb2YgdGhlIGNhcnQgbGluZSBpdGVtIHF1YW50aXRpZXNcbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICAgKi9cbiAgICBnZXRDYXJ0UXVhbnRpdHkob3B0aW9ucyA9IHt9LCBjYWxsYmFjaykge1xuICAgICAgICB0aGlzLmdldENhcnRTdW1tYXJ5KG9wdGlvbnMsIChlcnIsIHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgcXVhbnRpdHkgPSAwO1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlXG4gICAgICAgICAgICAgICAgJiYgcmVzcG9uc2Uuc3RhdHVzICE9PSAyMDRcbiAgICAgICAgICAgICAgICAmJiByZXNwb25zZS50b3RhbF9xdWFudGl0eSkge1xuICAgICAgICAgICAgICAgIHF1YW50aXR5ID0gcmVzcG9uc2UudG90YWxfcXVhbnRpdHk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCBxdWFudGl0eSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVuaGFuY2Ugd2l0aCBCaWcgT3BlbiBEYXRhIExheWVyIGV2ZW50c1xuICAgICAqXG4gICAgICogQHBhcmFtIHtGb3JtRGF0YX0gZm9ybURhdGFcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICAgICAqL1xuICAgIGl0ZW1BZGQoZm9ybURhdGEsIGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuaGFuZGxlSXRlbUFkZChmb3JtRGF0YSwgKGVyciwgcmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgIGlmICghZXJyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5nZXRCb2RsRXZlbnRzQ2FydCgpLmVtaXRBZGRJdGVtKHJlc3BvbnNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhbGxiYWNrKGVyciwgcmVzcG9uc2UpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgaXRlbSB0byBjYXJ0IHdpdGggb3B0aW9ucyAodmFyaWFudHMpXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0Zvcm1EYXRhfSBmb3JtRGF0YVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAgICovXG4gICAgaGFuZGxlSXRlbUFkZChmb3JtRGF0YSwgY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5yZW1vdGVSZXF1ZXN0KCcvY2FydC9hZGQnLCAnUE9TVCcsIHsgZm9ybURhdGEgfSwgKGVyciwgcmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVtaXREYXRhID0ge1xuICAgICAgICAgICAgICAgIGVycixcbiAgICAgICAgICAgICAgICByZXNwb25zZSxcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIEhvb2tzLmVtaXQoJ2NhcnQtaXRlbS1hZGQtcmVtb3RlJywgZW1pdERhdGEpO1xuICAgICAgICAgICAgY2FsbGJhY2soZXJyLCByZXNwb25zZSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSBjYXJ0IGl0ZW0gcXVhbnRpdHlcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfE9iamVjdH0gaXRlbUlkXG4gICAgICogQHBhcmFtIHtOdW1iZXJ8RnVuY3Rpb259IHF0eVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258bnVsbH0gY2FsbGJhY2tcbiAgICAgKi9cbiAgICBpdGVtVXBkYXRlKGl0ZW1JZCwgcXR5LCBjYWxsYmFjaykge1xuICAgICAgICBsZXQgY2FsbGJhY2tBcmcgPSBjYWxsYmFjaztcbiAgICAgICAgbGV0IGl0ZW1zO1xuXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGl0ZW1JZCkgJiYgdHlwZW9mIHF0eSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FsbGJhY2tBcmcgPSBxdHk7XG4gICAgICAgICAgICBpdGVtcyA9IGl0ZW1JZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGl0ZW1zID0gW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGl0ZW1JZCxcbiAgICAgICAgICAgICAgICAgICAgcXVhbnRpdHk6IHF0eSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudXBkYXRlKGl0ZW1zLCAoZXJyLCByZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZW1pdERhdGEgPSB7XG4gICAgICAgICAgICAgICAgaXRlbXMsXG4gICAgICAgICAgICAgICAgZXJyLFxuICAgICAgICAgICAgICAgIHJlc3BvbnNlLFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaWYgKHF0eSA9PT0gMCAmJiAhZXJyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5nZXRCb2RsRXZlbnRzQ2FydCgpLmVtaXRSZW1vdmVJdGVtKHJlc3BvbnNlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgSG9va3MuZW1pdCgnY2FydC1pdGVtLXVwZGF0ZS1yZW1vdGUnLCBlbWl0RGF0YSk7XG4gICAgICAgICAgICBjYWxsYmFja0FyZyhlcnIsIHJlc3BvbnNlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRW5oYW5jZSB3aXRoIEJpZyBPcGVuIERhdGEgTGF5ZXIgZXZlbnRzXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gaXRlbUlkXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICAgKi9cbiAgICBpdGVtUmVtb3ZlKGl0ZW1JZCwgY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5oYW5kbGVJdGVtUmVtb3ZlKGl0ZW1JZCwgKGVyciwgcmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgIGlmICghZXJyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5nZXRCb2RsRXZlbnRzQ2FydCgpLmVtaXRSZW1vdmVJdGVtKHJlc3BvbnNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhbGxiYWNrKGVyciwgcmVzcG9uc2UpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgY2FydCBpdGVtc1xuICAgICAqXG4gICAgICogQ2FsbHMgdGhlIGludGVybmFsIHVwZGF0ZSBmdW5jdGlvbiB3aXRoIHF1YW50aXR5OiAwXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gaXRlbUlkXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICAgKi9cbiAgICBoYW5kbGVJdGVtUmVtb3ZlKGl0ZW1JZCwgY2FsbGJhY2spIHtcbiAgICAgICAgY29uc3QgaXRlbXMgPSBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWQ6IGl0ZW1JZCxcbiAgICAgICAgICAgICAgICBxdWFudGl0eTogMCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF07XG5cbiAgICAgICAgdGhpcy51cGRhdGUoaXRlbXMsIChlcnIsIHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBlbWl0RGF0YSA9IHtcbiAgICAgICAgICAgICAgICBpdGVtcyxcbiAgICAgICAgICAgICAgICBlcnIsXG4gICAgICAgICAgICAgICAgcmVzcG9uc2UsXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBIb29rcy5lbWl0KCdjYXJ0LWl0ZW0tcmVtb3ZlLXJlbW90ZScsIGVtaXREYXRhKTtcbiAgICAgICAgICAgIGNhbGxiYWNrKGVyciwgcmVzcG9uc2UpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgZ2lmdHdyYXBwaW5nIG9wdGlvbnNcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gaXRlbUlkXG4gICAgICogQHBhcmFtIHtPYmplY3R8RnVuY3Rpb259IG9wdGlvbnNcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufG51bGx9IGNhbGxiYWNrXG4gICAgICovXG4gICAgZ2V0SXRlbUdpZnRXcmFwcGluZ09wdGlvbnMoaXRlbUlkLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgICAgICBsZXQgb3B0cyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgIGxldCBjYWxsYmFja0FyZyA9IGNhbGxiYWNrO1xuXG4gICAgICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FsbGJhY2tBcmcgPSBvcHRzO1xuICAgICAgICAgICAgb3B0cyA9IHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5yZW1vdGVSZXF1ZXN0KGAvZ2lmdC13cmFwcGluZy8ke2l0ZW1JZH1gLCAnR0VUJywgb3B0cywgY2FsbGJhY2tBcmcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFN1Ym1pdCBnaWZ0d3JhcHBpbmcgb3B0aW9uc1xuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGl0ZW1JZFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAgICovXG4gICAgc3VibWl0SXRlbUdpZnRXcmFwcGluZ09wdGlvbihpdGVtSWQsIHBhcmFtcywgY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5yZW1vdGVSZXF1ZXN0KGAvZ2lmdC13cmFwcGluZy8ke2l0ZW1JZH1gLCAnUE9TVCcsIHsgcGFyYW1zIH0sIGNhbGxiYWNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgY2FydCBpdGVtc1xuICAgICAqXG4gICAgICogQHBhcmFtIHtBcnJheX0gaXRlbXNcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICAgICAqL1xuICAgIHVwZGF0ZShpdGVtcywgY2FsbGJhY2spIHtcbiAgICAgICAgY29uc3QgcGF5bG9hZCA9IHtcbiAgICAgICAgICAgIGl0ZW1zLFxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMucmVtb3RlUmVxdWVzdCgnL2NhcnQvdXBkYXRlJywgJ1BPU1QnLCB7IHBhcmFtczogcGF5bG9hZCB9LCBjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGNhcnQgY29udGVudFxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICAgICAqL1xuICAgIGdldENvbnRlbnQob3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICAgICAgbGV0IG9wdHMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICBsZXQgY2FsbGJhY2tBcmcgPSBjYWxsYmFjaztcblxuICAgICAgICBpZiAodHlwZW9mIG9wdHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrQXJnID0gb3B0cztcbiAgICAgICAgICAgIG9wdHMgPSB7fTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubWFrZVJlcXVlc3QoJy9jYXJ0LnBocCcsICdHRVQnLCBvcHRzLCBmYWxzZSwgY2FsbGJhY2tBcmcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBjYXJ0IHNoaXBwaW5nIHF1b3RlXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zXG4gICAgICogQHBhcmFtIHtTdHJpbmd8QXJyYXl8T2JqZWN0fSByZW5kZXJXaXRoXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICAgKi9cbiAgICBnZXRTaGlwcGluZ1F1b3RlcyhwYXJhbXMsIHJlbmRlcldpdGgsIGNhbGxiYWNrKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICBwYXJhbXMsXG4gICAgICAgIH07XG4gICAgICAgIGxldCBjYWxsYmFja0FyZyA9IGNhbGxiYWNrO1xuICAgICAgICBsZXQgcmVuZGVyV2l0aEFyZyA9IHJlbmRlcldpdGg7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFja0FyZyAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FsbGJhY2tBcmcgPSByZW5kZXJXaXRoQXJnO1xuICAgICAgICAgICAgcmVuZGVyV2l0aEFyZyA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmVuZGVyV2l0aEFyZykge1xuICAgICAgICAgICAgb3B0aW9ucy50ZW1wbGF0ZSA9IHJlbmRlcldpdGhBcmc7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnJlbW90ZVJlcXVlc3QoJy9zaGlwcGluZy1xdW90ZScsICdHRVQnLCBvcHRpb25zLCBjYWxsYmFja0FyZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3VibWl0IHNoaXBwaW5nIHF1b3RlIGJhc2VkIG9uIHF1b3RlSWRcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBxdW90ZUlkXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICAgKi9cbiAgICBzdWJtaXRTaGlwcGluZ1F1b3RlKHF1b3RlSWQsIGNhbGxiYWNrKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgICAgICBzaGlwcGluZ19tZXRob2Q6IHF1b3RlSWQsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMucmVtb3RlUmVxdWVzdCgnL3NoaXBwaW5nLXF1b3RlJywgJ1BPU1QnLCBvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQXBwbHkgYSBjb3Vwb24gY29kZSBvciBnaWZ0IGNlcnRpZmljYXRlIHRvIHRoZSBjYXJ0XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gY29kZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAgICovXG4gICAgYXBwbHlDb2RlKGNvZGUsIGNhbGxiYWNrKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgICAgICBjb2RlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLnJlbW90ZVJlcXVlc3QoJy9hcHBseS1jb2RlJywgJ1BPU1QnLCBvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQXBwbHkgYSBjb3Vwb24gY29kZSBvciBnaWZ0IGNlcnRpZmljYXRlIHRvIHRoZSBjYXJ0XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gY29kZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAgICovXG4gICAgYXBwbHlHaWZ0Q2VydGlmaWNhdGUoY29kZSwgY2FsbGJhY2spIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgICAgIGNvZGUsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMucmVtb3RlUmVxdWVzdCgnL2dpZnQtY2VydGlmaWNhdGVzJywgJ1BPU1QnLCBvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfVxufVxuIiwiaW1wb3J0IEJhc2UgZnJvbSAnLi9iYXNlJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgZXh0ZW5kcyBCYXNlIHtcbiAgICAvKipcbiAgICAgKiBAQ29uc3RydWN0b3JcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih2ZXJzaW9uKSB7XG4gICAgICAgIC8vIGNhbGwgcGFyZW50XG4gICAgICAgIHN1cGVyKHZlcnNpb24pO1xuXG4gICAgICAgIC8vIHNldCB1cCBjbGFzcyB2YXJpYWJsZXNcbiAgICAgICAgdGhpcy5lbmRwb2ludCA9ICcvY291bnRyeS1zdGF0ZXMvJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEdldCBjb3VudHJ5IGRhdGEgYnkgaWQgd3JhcHBlclxuICAgICAqXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGlkXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICAgKi9cbiAgICBnZXRCeUlkKGlkLCBjYWxsYmFjaykge1xuICAgICAgICBjb25zdCB1cmwgPSB0aGlzLmVuZHBvaW50ICsgaWQ7XG5cbiAgICAgICAgdGhpcy5yZW1vdGVSZXF1ZXN0KHVybCwgJ0dFVCcsIHt9LCBjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGNvdW50cnkgZGF0YSBieSBjb3VudHJ5IG5hbWVcbiAgICAgKiBAcGFyYW0gbmFtZVxuICAgICAqIEBwYXJhbSBjYWxsYmFja1xuICAgICAqL1xuICAgIGdldEJ5TmFtZShuYW1lLCBjYWxsYmFjaykge1xuICAgICAgICBjb25zdCB1cmwgPSB0aGlzLmVuZHBvaW50ICsgbmFtZTtcblxuICAgICAgICB0aGlzLnJlbW90ZVJlcXVlc3QodXJsLCAnR0VUJywge30sIGNhbGxiYWNrKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgcmVxdWVzdCBmcm9tICcuLi9saWIvcmVxdWVzdCc7XG5cbmltcG9ydCBDb3VudHJ5QXBpIGZyb20gJy4vY291bnRyaWVzJztcbmltcG9ydCBQcm9kdWN0QXBpIGZyb20gJy4vcHJvZHVjdCc7XG5pbXBvcnQgUHJvZHVjdEF0dHJpYnV0ZXNBcGkgZnJvbSAnLi9wcm9kdWN0LWF0dHJpYnV0ZXMnO1xuaW1wb3J0IFNlYXJjaEFwaSBmcm9tICcuL3NlYXJjaCc7XG5pbXBvcnQgQ2FydEFwaSBmcm9tICcuL2NhcnQnO1xuaW1wb3J0IFdpc2hsaXN0IGZyb20gJy4vd2lzaGxpc3QnO1xuXG5jb25zdCBpbnRlcm5hbHMgPSB7fTtcblxuLyoqXG4gKiBDb252ZW5pZW5jZSBmdW5jdGlvbiB0byByZXF1ZXN0IGEgcGFnZSB2aWEgYWpheFxuICpcbiAqIEBwYXJhbSB1cmxcbiAqIEBwYXJhbSBvcHRpb25zXG4gKiBAcGFyYW0gY2FsbGJhY2tcbiAqL1xuaW50ZXJuYWxzLmdldFBhZ2UgPSBmdW5jdGlvbiAodXJsLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgIHJlcXVlc3QodXJsLCB7XG4gICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgIHJlcXVlc3RPcHRpb25zOiBvcHRpb25zLFxuICAgIH0sIGNhbGxiYWNrKTtcbn07XG5cbmludGVybmFscy5nZXRQYWdlQnlHUUwgPSBmdW5jdGlvbiAocGFnZSwgY2FsbGJhY2spIHtcbiAgICByZXF1ZXN0KCcvZ3JhcGhxbC1yZW5kZXInLCB7XG4gICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgIHJlcXVlc3RPcHRpb25zOiB7XG4gICAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZV9uYW1lOiBwYWdlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LCBjYWxsYmFjayk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgY291bnRyeTogbmV3IENvdW50cnlBcGkoKSxcbiAgICBwcm9kdWN0QXR0cmlidXRlczogbmV3IFByb2R1Y3RBdHRyaWJ1dGVzQXBpKCksXG4gICAgcHJvZHVjdDogbmV3IFByb2R1Y3RBcGkoKSxcbiAgICBzZWFyY2g6IG5ldyBTZWFyY2hBcGkoKSxcbiAgICBjYXJ0OiBuZXcgQ2FydEFwaSgpLFxuICAgIHdpc2hsaXN0OiBuZXcgV2lzaGxpc3QoKSxcbiAgICBnZXRQYWdlOiBpbnRlcm5hbHMuZ2V0UGFnZSxcbiAgICBnZXRQYWdlQnlHUUw6IGludGVybmFscy5nZXRQYWdlQnlHUUwsXG59O1xuIiwiaW1wb3J0IEJhc2UgZnJvbSAnLi9iYXNlJztcbmltcG9ydCBIb29rcyBmcm9tICcuLi9ob29rcyc7XG5pbXBvcnQgeyBwYXJzZSB9IGZyb20gJy4uL2xpYi9xdWVyeS1zdHJpbmcnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBleHRlbmRzIEJhc2Uge1xuICAgIC8qKlxuICAgICAqIEBDb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHZlcnNpb24pIHtcbiAgICAgICAgLy8gY2FsbCBwYXJlbnRcbiAgICAgICAgc3VwZXIodmVyc2lvbik7XG5cbiAgICAgICAgLy8gc2V0IHVwIGNsYXNzIHZhcmlhYmxlc1xuICAgICAgICB0aGlzLmVuZHBvaW50ID0gJy9wcm9kdWN0LWF0dHJpYnV0ZXMvJztcbiAgICAgICAgdGhpcy5pbkNhcnRFbmRwb2ludCA9ICcvY29uZmlndXJlLW9wdGlvbnMvJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gcHJvZHVjdElkXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtc1xuICAgICAqIEBwYXJhbSBjYWxsYmFja1xuICAgICAqL1xuICAgIG9wdGlvbkNoYW5nZShwcm9kdWN0SWQsIHBhcmFtcywgdGVtcGxhdGUgPSBudWxsLCBjYWxsYmFjaykge1xuICAgICAgICBsZXQgdGVtcGxhdGVBcmcgPSB0ZW1wbGF0ZTtcbiAgICAgICAgbGV0IGNhbGxiYWNrQXJnID0gY2FsbGJhY2s7XG5cbiAgICAgICAgaWYgKHR5cGVvZiB0ZW1wbGF0ZUFyZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FsbGJhY2tBcmcgPSB0ZW1wbGF0ZUFyZztcbiAgICAgICAgICAgIHRlbXBsYXRlQXJnID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucmVtb3RlUmVxdWVzdCh0aGlzLmVuZHBvaW50ICsgcHJvZHVjdElkLCAnUE9TVCcsIHsgcGFyYW1zOiBwYXJzZShwYXJhbXMpLCB0ZW1wbGF0ZTogdGVtcGxhdGVBcmcgfSwgKGVyciwgcmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVtaXREYXRhID0ge1xuICAgICAgICAgICAgICAgIGVycixcbiAgICAgICAgICAgICAgICByZXNwb25zZSxcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIEhvb2tzLmVtaXQoJ3Byb2R1Y3Qtb3B0aW9ucy1jaGFuZ2UtcmVtb3RlJywgZW1pdERhdGEpO1xuICAgICAgICAgICAgY2FsbGJhY2tBcmcoZXJyLCByZXNwb25zZSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBpdGVtSWRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zXG4gICAgICogQHBhcmFtIGNhbGxiYWNrXG4gICAgICovXG4gICAgY29uZmlndXJlSW5DYXJ0KGl0ZW1JZCwgcGFyYW1zLCBjYWxsYmFjaykge1xuICAgICAgICB0aGlzLnJlbW90ZVJlcXVlc3QodGhpcy5pbkNhcnRFbmRwb2ludCArIGl0ZW1JZCwgJ0dFVCcsIHBhcmFtcywgKGVyciwgcmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGVyciwgcmVzcG9uc2UpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4iLCJpbXBvcnQgQmFzZSBmcm9tICcuL2Jhc2UnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBleHRlbmRzIEJhc2Uge1xuICAgIC8qKlxuICAgICAqIEBDb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHZlcnNpb24pIHtcbiAgICAgICAgLy8gY2FsbCBwYXJlbnRcbiAgICAgICAgc3VwZXIodmVyc2lvbik7XG5cbiAgICAgICAgLy8gc2V0IHVwIGNsYXNzIHZhcmlhYmxlc1xuICAgICAgICB0aGlzLmVuZHBvaW50ID0gJy9wcm9kdWN0cy5waHA/cHJvZHVjdElkPSc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gcHJvZHVjdElkXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtc1xuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAgICovXG4gICAgZ2V0QnlJZChwcm9kdWN0SWQsIHBhcmFtcywgY2FsbGJhY2spIHtcbiAgICAgICAgY29uc3QgdXJsID0gdGhpcy5lbmRwb2ludCArIHByb2R1Y3RJZDtcbiAgICAgICAgbGV0IHBhcmFtc0FyZyA9IHBhcmFtcztcbiAgICAgICAgbGV0IGNhbGxiYWNrQXJnID0gY2FsbGJhY2s7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBwYXJhbXNBcmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrQXJnID0gcGFyYW1zQXJnO1xuICAgICAgICAgICAgcGFyYW1zQXJnID0ge307XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm1ha2VSZXF1ZXN0KHVybCwgJ0dFVCcsIHBhcmFtc0FyZywgZmFsc2UsIGNhbGxiYWNrQXJnKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgSG9va3MgZnJvbSAnLi4vaG9va3MnO1xuaW1wb3J0IEJhc2UgZnJvbSAnLi9iYXNlJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgZXh0ZW5kcyBCYXNlIHtcbiAgICAvKipcbiAgICAgKiBAQ29uc3RydWN0b3JcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih2ZXJzaW9uKSB7XG4gICAgICAgIC8vIGNhbGwgcGFyZW50XG4gICAgICAgIHN1cGVyKHZlcnNpb24pO1xuXG4gICAgICAgIC8vIHNldCB1cCBjbGFzcyB2YXJpYWJsZXNcbiAgICAgICAgdGhpcy5lbmRwb2ludCA9ICcvc2VhcmNoLnBocD9zZWFyY2hfcXVlcnk9JztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgc2VhcmNoIHJlc3VsdHNcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcXVlcnlcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICAgKi9cbiAgICBzZWFyY2gocXVlcnksIHBhcmFtcywgY2FsbGJhY2spIHtcbiAgICAgICAgY29uc3QgdXJsID0gdGhpcy5lbmRwb2ludCArIGVuY29kZVVSSUNvbXBvbmVudChxdWVyeSk7XG4gICAgICAgIGxldCBwYXJhbXNBcmcgPSBwYXJhbXM7XG4gICAgICAgIGxldCBjYWxsYmFja0FyZyA9IGNhbGxiYWNrO1xuXG4gICAgICAgIGlmICh0eXBlb2YgcGFyYW1zQXJnID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWxsYmFja0FyZyA9IHBhcmFtc0FyZztcbiAgICAgICAgICAgIHBhcmFtc0FyZyA9IHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgSG9va3MuZW1pdCgnc2VhcmNoLXF1aWNrLXJlbW90ZScsIHF1ZXJ5KTtcbiAgICAgICAgdGhpcy5tYWtlUmVxdWVzdCh1cmwsICdHRVQnLCBwYXJhbXNBcmcsIGZhbHNlLCBjYWxsYmFja0FyZyk7XG4gICAgfVxufVxuIiwiaW1wb3J0IEJhc2UgZnJvbSAnLi9iYXNlJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgZXh0ZW5kcyBCYXNlIHtcbiAgICBpdGVtQWRkKHdpc2hsaXN0SWQsIHByb2R1Y3RJZCwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICAgICAgY29uc3QgdXJsID0gYC93aXNobGlzdC5waHA/YWN0aW9uPWFkZCZ3aXNobGlzdGlkPSR7d2lzaGxpc3RJZH0mcHJvZHVjdF9pZD0ke3Byb2R1Y3RJZH1gO1xuICAgICAgICBsZXQgb3B0cyA9IG9wdGlvbnM7XG4gICAgICAgIGxldCBjYWxsYmFja0ZuID0gY2FsbGJhY2s7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBvcHRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWxsYmFja0ZuID0gb3B0cztcbiAgICAgICAgICAgIG9wdHMgPSB7fTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubWFrZVJlcXVlc3QodXJsLCAnUE9TVCcsIG9wdHMsIGZhbHNlLCBjYWxsYmFja0ZuKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBnZXRCT0RMRXZlbnRzIH0gZnJvbSAnLi4vaGVscGVycyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5ib2RsRXZlbnRzID0gZ2V0Qk9ETEV2ZW50cygpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IGlzQk9ETEVuYWJsZWQgfSBmcm9tICcuLi9oZWxwZXJzJztcbmltcG9ydCBCYXNlIGZyb20gJy4vYmFzZSc7XG5cbmNsYXNzIENhcnQgZXh0ZW5kcyBCYXNlIHtcbiAgICBlbWl0QWRkSXRlbShyZXNwb25zZSkge1xuICAgICAgICB0aGlzLmVtaXQodGhpcy5ib2RsRXZlbnRzLkFkZENhcnRJdGVtRXZlbnQuQ1JFQVRFLCByZXNwb25zZSk7XG4gICAgfVxuXG4gICAgZW1pdFJlbW92ZUl0ZW0ocmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKHRoaXMuc2hvdWxkRW1pdFJlbW92ZUl0ZW0ocmVzcG9uc2UpKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXQodGhpcy5ib2RsRXZlbnRzLlJlbW92ZUNhcnRJdGVtRXZlbnQuQ1JFQVRFLCByZXNwb25zZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzaG91bGRFbWl0UmVtb3ZlSXRlbShyZXNwb25zZSkge1xuICAgICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YS5saW5lX2l0ZW1zPy5sZW5ndGggPiAwO1xuICAgIH1cblxuICAgIGVtaXQoZXZlbnROYW1lLCByZXNwb25zZSkge1xuICAgICAgICBjb25zdCBwYXlsb2FkID0gdGhpcy5wcmVwYXJlUGF5bG9hZChyZXNwb25zZSk7XG4gICAgICAgIHRoaXMuYm9kbEV2ZW50cy5jYXJ0LmVtaXQoZXZlbnROYW1lLCBwYXlsb2FkKTtcbiAgICB9XG5cbiAgICBwcmVwYXJlUGF5bG9hZChyZXNwb25zZSkge1xuICAgICAgICBpZiAoaXNCT0RMRW5hYmxlZCgpICYmICFyZXNwb25zZS5kYXRhLmVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGNoYW5uZWxfaWQ6IHJlc3BvbnNlLmRhdGEuY2hhbm5lbF9pZCxcbiAgICAgICAgICAgICAgICBjdXJyZW5jeTogcmVzcG9uc2UuZGF0YS5jdXJyZW5jeSxcbiAgICAgICAgICAgICAgICBwcm9kdWN0X3ZhbHVlOiByZXNwb25zZS5kYXRhLnByb2R1Y3RfdmFsdWUsXG4gICAgICAgICAgICAgICAgbGluZV9pdGVtczogcmVzcG9uc2UuZGF0YS5saW5lX2l0ZW1zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENhcnQ7XG4iLCJleHBvcnQgY29uc3QgaXNCT0RMRW5hYmxlZCA9ICgpID0+IHR5cGVvZiB3aW5kb3cuYm9kbEV2ZW50cyAhPT0gJ3VuZGVmaW5lZCc7XG5cbmV4cG9ydCBjb25zdCBGYWtlQk9ETEV2ZW50cyA9IHtcbiAgICBjYXJ0OiB7XG4gICAgICAgIGFkZEl0ZW06ICgpID0+IHt9LFxuICAgICAgICByZW1vdmVJdGVtOiAoKSA9PiB7fSxcbiAgICAgICAgZW1pdDogKCkgPT4ge30sXG4gICAgfSxcbiAgICBBZGRDYXJ0SXRlbUV2ZW50OiB7XG4gICAgICAgIENSRUFURTogJ2NyZWF0ZV9hZGRfY2FydF9pdGVtJyxcbiAgICB9LFxuICAgIFJlbW92ZUNhcnRJdGVtRXZlbnQ6IHtcbiAgICAgICAgQ1JFQVRFOiAnY3JlYXRlX3JlbW92ZV9jYXJ0X2l0ZW0nLFxuICAgIH0sXG59O1xuXG5leHBvcnQgY29uc3QgZ2V0Qk9ETEV2ZW50cyA9ICgpID0+IHtcbiAgICBpZiAoaXNCT0RMRW5hYmxlZCgpKSB7XG4gICAgICAgIHJldHVybiB3aW5kb3cuYm9kbEV2ZW50cztcbiAgICB9XG5cbiAgICByZXR1cm4gRmFrZUJPRExFdmVudHM7XG59O1xuIiwiaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tICdldmVudGVtaXR0ZXIzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICAgIHN1YnNjcmliZShldmVudE5hbWUsIGVsZW1lbnRTZWxlY3RvciwgaGFuZGxlcikge1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGZvciAobGV0IHsgdGFyZ2V0IH0gPSBlOyB0YXJnZXQgJiYgdGFyZ2V0ICE9PSB0aGlzOyB0YXJnZXQgPSB0YXJnZXQucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgICAgIGlmICh0YXJnZXQubWF0Y2hlcyhlbGVtZW50U2VsZWN0b3IpKSB7XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZXIuY2FsbCh0YXJnZXQsIGUsIHRhcmdldCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZmFsc2UpO1xuICAgIH1cbn1cbiIsImltcG9ydCBCYXNlSG9va3MgZnJvbSAnLi9iYXNlJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgZXh0ZW5kcyBCYXNlSG9va3Mge1xuICAgIC8qKlxuICAgICAqIEBDb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvLyBjYWxsIHBhcmVudFxuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMuaXRlbUFkZCgpO1xuICAgIH1cblxuICAgIGl0ZW1BZGQoKSB7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlKCdzdWJtaXQnLCAnW2RhdGEtY2FydC1pdGVtLWFkZF0nLCAoZXZlbnQsIHRhcmdldCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5lbWl0KCdjYXJ0LWl0ZW0tYWRkJywgZXZlbnQsIHRhcmdldCk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiIsImltcG9ydCBCYXNlSG9va3MgZnJvbSAnLi9iYXNlJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgZXh0ZW5kcyBCYXNlSG9va3Mge31cbiIsImltcG9ydCBCYXNlSG9va3MgZnJvbSAnLi9iYXNlJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgZXh0ZW5kcyBCYXNlSG9va3Mge1xuICAgIC8qKlxuICAgICAqIEBDb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvLyBjYWxsIHBhcmVudFxuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMuY3VycmVuY3lTZWxlY3RvcigpO1xuICAgIH1cblxuICAgIGN1cnJlbmN5U2VsZWN0b3IoKSB7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlKCdpbnB1dCcsICdbZGF0YS1jdXJyZW5jeS1zZWxlY3Rvci10b2dnbGVdJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ2N1cnJlbmN5U2VsZWN0b3ItdG9nZ2xlJywgZXZlbnQpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4iLCJpbXBvcnQgQmFzZUhvb2tzIGZyb20gJy4vYmFzZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIGV4dGVuZHMgQmFzZUhvb2tzIHtcbiAgICAvKipcbiAgICAgKiBAQ29uc3RydWN0b3JcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgLy8gY2FsbCBwYXJlbnRcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLnNlYXJjaEV2ZW50cygpO1xuICAgIH1cblxuICAgIHNlYXJjaEV2ZW50cygpIHtcbiAgICAgICAgdGhpcy5zdWJzY3JpYmUoJ2NsaWNrJywgJ1tkYXRhLWZhY2V0ZWQtc2VhcmNoLWZhY2V0XScsIChldmVudCwgdGFyZ2V0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ2ZhY2V0ZWRTZWFyY2gtZmFjZXQtY2xpY2tlZCcsIGV2ZW50LCB0YXJnZXQpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnN1YnNjcmliZSgnc3VibWl0JywgJ1tkYXRhLWZhY2V0ZWQtc2VhcmNoLXJhbmdlXScsIChldmVudCwgdGFyZ2V0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ2ZhY2V0ZWRTZWFyY2gtcmFuZ2Utc3VibWl0dGVkJywgZXZlbnQsIHRhcmdldCk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiIsImltcG9ydCBDYXJ0SG9va3MgZnJvbSAnLi9jYXJ0JztcbmltcG9ydCBDb29raWVIb29rcyBmcm9tICcuL2Nvb2tpZSc7XG5pbXBvcnQgQ3VycmVuY3lTZWxlY3Rvckhvb2tzIGZyb20gJy4vY3VycmVuY3ktc2VsZWN0b3InO1xuaW1wb3J0IFByb2R1Y3RIb29rcyBmcm9tICcuL3Byb2R1Y3QnO1xuaW1wb3J0IFNlYXJjaEhvb2tzIGZyb20gJy4vc2VhcmNoJztcbmltcG9ydCBGYWNldGVkU2VhcmNoSG9va3MgZnJvbSAnLi9mYWNldGVkLXNlYXJjaCc7XG5pbXBvcnQgU29ydEJ5SG9va3MgZnJvbSAnLi9zb3J0LWJ5JztcblxuY29uc3QgaW50ZXJuYWxzID0ge307XG5cbmludGVybmFscy5jbGFzc2VzID0ge1xuICAgIGNhcnQ6IG5ldyBDYXJ0SG9va3MoKSxcbiAgICBjb29raWU6IG5ldyBDb29raWVIb29rcygpLFxuICAgIGN1cnJlbmN5U2VsZWN0b3I6IG5ldyBDdXJyZW5jeVNlbGVjdG9ySG9va3MoKSxcbiAgICBwcm9kdWN0OiBuZXcgUHJvZHVjdEhvb2tzKCksXG4gICAgc2VhcmNoOiBuZXcgU2VhcmNoSG9va3MoKSxcbiAgICBmYWNldGVkU2VhcmNoOiBuZXcgRmFjZXRlZFNlYXJjaEhvb2tzKCksXG4gICAgc29ydEJ5OiBuZXcgU29ydEJ5SG9va3MoKSxcbn07XG5cbmludGVybmFscy5wYXJzZUhvb2tzID0gZnVuY3Rpb24gKGhvb2tOYW1lKSB7XG4gICAgY29uc3QgaG9va1R5cGUgPSBob29rTmFtZS5zcGxpdCgnLScpWzBdO1xuXG4gICAgaWYgKGludGVybmFscy5jbGFzc2VzW2hvb2tUeXBlXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgJHtob29rVHlwZX0gaXMgbm90IGEgdmFsaWQgaG9va1R5cGVgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW50ZXJuYWxzLmNsYXNzZXNbaG9va1R5cGVdO1xufTtcblxuY2xhc3MgSG9va3Mge1xuICAgIG9uKGhvb2tOYW1lLCBjYWxsYmFjaykge1xuICAgICAgICBjb25zdCBob29rID0gaW50ZXJuYWxzLnBhcnNlSG9va3MoaG9va05hbWUpO1xuXG4gICAgICAgIHJldHVybiBob29rLm9uKGhvb2tOYW1lLCBjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgb2ZmKGhvb2tOYW1lLCBjYWxsYmFjaykge1xuICAgICAgICBjb25zdCBob29rID0gaW50ZXJuYWxzLnBhcnNlSG9va3MoaG9va05hbWUpO1xuXG4gICAgICAgIHJldHVybiBob29rLm9mZihob29rTmFtZSwgY2FsbGJhY2spO1xuICAgIH1cblxuICAgIGVtaXQoaG9va05hbWUpIHtcbiAgICAgICAgY29uc3QgaG9vayA9IGludGVybmFscy5wYXJzZUhvb2tzKGhvb2tOYW1lKTtcblxuICAgICAgICByZXR1cm4gaG9vay5lbWl0KC4uLmFyZ3VtZW50cyk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBuZXcgSG9va3MoKTtcbiIsImltcG9ydCBCYXNlSG9va3MgZnJvbSAnLi9iYXNlJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgZXh0ZW5kcyBCYXNlSG9va3Mge1xuICAgIC8qKlxuICAgICAqIEBDb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvLyBjYWxsIHBhcmVudFxuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMub3B0aW9uc0NoYW5nZSgpO1xuICAgIH1cblxuICAgIG9wdGlvbnNDaGFuZ2UoKSB7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlKCdjaGFuZ2UnLCAnW2RhdGEtcHJvZHVjdC1vcHRpb24tY2hhbmdlXScsIChldmVudCwgdGFyZ2V0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ3Byb2R1Y3Qtb3B0aW9uLWNoYW5nZScsIGV2ZW50LCB0YXJnZXQpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4iLCJpbXBvcnQgQmFzZUhvb2tzIGZyb20gJy4vYmFzZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIGV4dGVuZHMgQmFzZUhvb2tzIHtcbiAgICAvKipcbiAgICAgKiBAQ29uc3RydWN0b3JcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgLy8gY2FsbCBwYXJlbnRcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLnF1aWNrU2VhcmNoKCk7XG4gICAgfVxuXG4gICAgcXVpY2tTZWFyY2goKSB7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlKCdpbnB1dCcsICdbZGF0YS1zZWFyY2gtcXVpY2tdJywgKGV2ZW50LCB0YXJnZXQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZW1pdCgnc2VhcmNoLXF1aWNrJywgZXZlbnQsIHRhcmdldCk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiIsImltcG9ydCBCYXNlSG9va3MgZnJvbSAnLi9iYXNlJztcbmltcG9ydCBjbG9zZXN0IGZyb20gJy4uL2xpYi9jbG9zZXN0JztcblxuLy8gaWUgMTEgZG9lcyBub3Qgc3VwcG9ydCBuYXRpdmUgY2xvc2VzdFxuaWYgKCFFbGVtZW50LnByb3RvdHlwZS5tYXRjaGVzKSB7XG4gICAgRWxlbWVudC5wcm90b3R5cGUubWF0Y2hlcyA9IEVsZW1lbnQucHJvdG90eXBlLm1zTWF0Y2hlc1NlbGVjdG9yIHx8IEVsZW1lbnQucHJvdG90eXBlLndlYmtpdE1hdGNoZXNTZWxlY3Rvcjtcbn1cblxuaWYgKCFFbGVtZW50LnByb3RvdHlwZS5jbG9zZXN0KSB7XG4gICAgRWxlbWVudC5wcm90b3R5cGUuY2xvc2VzdCA9IGNsb3Nlc3Q7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIGV4dGVuZHMgQmFzZUhvb2tzIHtcbiAgICAvKipcbiAgICAgKiBAQ29uc3RydWN0b3JcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgLy8gY2FsbCBwYXJlbnRcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLnNvcnRCeUV2ZW50cygpO1xuICAgIH1cblxuICAgIHNvcnRCeUV2ZW50cygpIHtcbiAgICAgICAgdGhpcy5zdWJzY3JpYmUoJ3N1Ym1pdCcsICdbZGF0YS1zb3J0LWJ5XScsIChldmVudCwgdGFyZ2V0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ3NvcnRCeS1zdWJtaXR0ZWQnLCBldmVudCwgdGFyZ2V0KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5zdWJzY3JpYmUoJ2NoYW5nZScsICdbZGF0YS1zb3J0LWJ5XSBzZWxlY3QnLCAoZXZlbnQsIHRhcmdldCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5lbWl0KCdzb3J0Qnktc2VsZWN0LWNoYW5nZWQnLCBldmVudCwgdGFyZ2V0KTtcblxuICAgICAgICAgICAgaWYgKCFldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdzb3J0Qnktc3VibWl0dGVkJywgZXZlbnQsIHRhcmdldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiIsIi8qKlxuICogaWUgMTEgZG9lcyBub3Qgc3VwcG9ydCBuYXRpdmUgY2xvc2VzdCBzbyB1c2UgdGhpcyBwb2x5ZmlsbCBmdW5jdGlvbiBpbnN0ZWFkIHRvIGZpbmQgY2xvc2VzdCBtYXRjaGluZyBzZWxlY3RvciBzdGFydGluZyBmcm9tIGVsLlxuICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtc1xuICogQHJldHVybnMge2FueX0gbWF0Y2hpbmcgc2VsZWN0b3Igb3IgbnVsbFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjbG9zZXN0KHMpIHtcbiAgICBsZXQgZWwgPSB0aGlzO1xuXG4gICAgZG8ge1xuICAgICAgICBpZiAoZWwubWF0Y2hlcyhzKSkgcmV0dXJuIGVsO1xuICAgICAgICBlbCA9IGVsLnBhcmVudEVsZW1lbnQgfHwgZWwucGFyZW50Tm9kZTtcbiAgICB9IHdoaWxlIChlbCAhPT0gbnVsbCAmJiBlbC5ub2RlVHlwZSA9PT0gMSk7XG5cbiAgICByZXR1cm4gbnVsbDtcbn1cbiIsIi8qKlxuICogRW5jb2RlcyBzdHJpbmcgYnkgc3RyaWN0ZXIgcnVsZXNcbiAqIHNlZSBodHRwczovL2dpdGh1Yi5jb20va2V2dmEvc3RyaWN0LXVyaS1lbmNvZGVcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyaW5nXG4gKi9cbmNvbnN0IGVuY29kZSA9IChzdHJpbmcpID0+IGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmcpLnJlcGxhY2UoL1shJygpKl0vZywgKHgpID0+IGAlJHt4LmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCl9YCk7XG5cbi8qKlxuICogUmV0dXJucyBhbiBhcnJheSwgd2hlcmUgZmlyc3QgZWxlbWVudCBpcyB0aGUgc2xpY2UgdGlsbCBzZXBhcmF0b3IgYW5kIHRoZSBzZWNvbmQgaXMgdGhlIHJlc3QuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0cmluZ1xuICogQHBhcmFtIHtTdHJpbmd9IHNlcGFyYXRvclxuICovXG5jb25zdCBzcGxpdE9uRmlyc3QgPSAoc3RyaW5nLCBzZXBhcmF0b3IpID0+IHtcbiAgICBjb25zdCBzZXBhcmF0b3JJbmRleCA9IHN0cmluZy5pbmRleE9mKHNlcGFyYXRvcik7XG4gICAgaWYgKHNlcGFyYXRvckluZGV4ID09PSAtMSkge1xuICAgICAgICByZXR1cm4gW3N0cmluZ107XG4gICAgfVxuICAgIHJldHVybiBbXG4gICAgICAgIHN0cmluZy5zbGljZSgwLCBzZXBhcmF0b3JJbmRleCksXG4gICAgICAgIHN0cmluZy5zbGljZShzZXBhcmF0b3JJbmRleCArIHNlcGFyYXRvci5sZW5ndGgpLFxuICAgIF07XG59O1xuXG4vKipcbiAqIFNvcnRzIGFycmF5IG9yIG9iamVjdCBieSBrZXlzXG4gKlxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGlucHV0XG4gKi9cbmNvbnN0IHNvcnRCeUtleXMgPSAoaW5wdXQpID0+IHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShpbnB1dCkpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0LnNvcnQoKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gc29ydEJ5S2V5cyhPYmplY3Qua2V5cyhpbnB1dCkpXG4gICAgICAgICAgICAuc29ydCgoYSwgYikgPT4gTnVtYmVyKGEpIC0gTnVtYmVyKGIpKVxuICAgICAgICAgICAgLm1hcCgoa2V5KSA9PiBpbnB1dFtrZXldKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW5wdXQ7XG59O1xuXG4vKipcbiAqIFJldHVybnMgYW4gYXJyYXkgaWYgdGhlIGtleSBleGlzdHMgaW4gdGhlIG9iamVjdCBvciB0aGUgdmFsdWUgaWYgZG9lbid0XG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGtleVxuICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge09iamVjdH0gYWNjdW11bGF0b3JcbiAqL1xuY29uc3QgZ2V0UGFyc2VkVmFsdWUgPSAoa2V5LCB2YWx1ZSwgYWNjdW11bGF0b3IpID0+IHtcbiAgICBpZiAoYWNjdW11bGF0b3Jba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gW10uY29uY2F0KGFjY3VtdWxhdG9yW2tleV0sIHZhbHVlKTtcbn07XG5cbi8qKlxuICogUmVkdWNlciB0aGF0IGZvcm1hdHMgYW5kIGNvbWJpbmVzIGtleS12YWx1ZSBwYWlyXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG9wdGlvbnNcbiAqL1xuY29uc3QgcmVkdWNlQnlLZXkgPSAob3B0aW9ucykgPT4gKGtleSkgPT4gKHJlc3VsdCwgdmFsdWUpID0+IHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gWy4uLnJlc3VsdCwgZW5jb2RlKGtleSldO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmluY2x1ZGVBcnJheUluZGV4KSB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IHJlc3VsdC5sZW5ndGggLyBPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5jb25jYXQoXG4gICAgICAgICAgICAgICAgT2JqZWN0LmtleXModmFsdWUpLm1hcCgoa2V5T2ZWYWx1ZSkgPT4gKFtcbiAgICAgICAgICAgICAgICAgICAgZW5jb2RlKGtleSksXG4gICAgICAgICAgICAgICAgICAgICdbJywgZW5jb2RlKGluZGV4KSwgJ10nLFxuICAgICAgICAgICAgICAgICAgICAnWycsIGVuY29kZShrZXlPZlZhbHVlKSwgJ109JyxcbiAgICAgICAgICAgICAgICAgICAgZW5jb2RlKHZhbHVlW2tleU9mVmFsdWVdKSxcbiAgICAgICAgICAgICAgICBdLmpvaW4oJycpKSksXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGluZGV4ID0gcmVzdWx0Lmxlbmd0aDtcblxuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgLi4ucmVzdWx0LFxuICAgICAgICAgICAgW2VuY29kZShrZXkpLCAnWycsIGVuY29kZShpbmRleCksICddPScsIGVuY29kZSh2YWx1ZSldLmpvaW4oJycpLFxuICAgICAgICBdO1xuICAgIH1cblxuICAgIHJldHVybiBbLi4ucmVzdWx0LCBbZW5jb2RlKGtleSksICc9JywgZW5jb2RlKHZhbHVlKV0uam9pbignJyldO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBxdWVyeSBzdHJpbmcgaW50byBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaW5wdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlKGlucHV0KSB7XG4gICAgY29uc3QgcmV0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgIGlmICh0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG4gICAgY29uc3QgaW5wdXRQYXJzZWQgPSBpbnB1dC50cmltKCkucmVwbGFjZSgvXls/IyZdLywgJycpO1xuXG4gICAgaWYgKCFpbnB1dFBhcnNlZCkge1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH1cblxuICAgIGlucHV0UGFyc2VkLnNwbGl0KCcmJykuZm9yRWFjaCgocGFyYW0pID0+IHtcbiAgICAgICAgLyogZXNsaW50LWRpc2FibGUgcHJlZmVyLWNvbnN0ICovXG4gICAgICAgIGxldCBba2V5LCB2YWx1ZV0gPSBzcGxpdE9uRmlyc3QocGFyYW0ucmVwbGFjZSgvXFwrL2csICcgJyksICc9Jyk7XG5cbiAgICAgICAga2V5ID0gZGVjb2RlVVJJQ29tcG9uZW50KGtleSk7XG4gICAgICAgIHZhbHVlID0gdmFsdWUgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpO1xuICAgICAgICByZXRba2V5XSA9IGdldFBhcnNlZFZhbHVlKGtleSwgdmFsdWUsIHJldCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gT2JqZWN0LmtleXMocmV0KS5zb3J0KCkucmVkdWNlKChyZXN1bHQsIGtleSkgPT4ge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHJldFtrZXldO1xuICAgICAgICBpZiAoQm9vbGVhbih2YWx1ZSkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXBhcmFtLXJlYXNzaWduICovXG4gICAgICAgICAgICByZXN1bHRba2V5XSA9IHNvcnRCeUtleXModmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cbiAgICAgICAgICAgIHJlc3VsdFtrZXldID0gdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sIE9iamVjdC5jcmVhdGUobnVsbCkpO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGFuIG9iamVjdCB0byBxdWVyeSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5maWx0ZXJWYWx1ZXNdIC0gZmlsdGVycyBlbXB0eSBzdHJpbmcgb3IgdW5kZWZpbmVkc1xuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5pbmNsdWRlQXJyYXlJbmRleF0gLSBpbmNsdWRlcyBhcnJheSBpbmRleCBpbiB0aGUgcXVlcnkgc3RyaW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdpZnkob2JqZWN0LCBvcHRpb25zID0ge1xuICAgIGZpbHRlclZhbHVlczogZmFsc2UsXG4gICAgYXJyYXlJbmRleDogZmFsc2UsXG59KSB7XG4gICAgaWYgKCFvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIGNvbnN0IG9iamVjdENvcHkgPSB7fTtcbiAgICBjb25zdCBzaG91bGRGaWx0ZXIgPSAoa2V5KSA9PiAoXG4gICAgICAgIG9wdGlvbnMuZmlsdGVyVmFsdWVzXG4gICAgICAgICYmIChvYmplY3Rba2V5XSA9PT0gJycgfHwgb2JqZWN0W2tleV0gPT09IHVuZGVmaW5lZClcbiAgICApO1xuXG4gICAgT2JqZWN0LmtleXMob2JqZWN0KS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgaWYgKCFzaG91bGRGaWx0ZXIoa2V5KSkge1xuICAgICAgICAgICAgb2JqZWN0Q29weVtrZXldID0gb2JqZWN0W2tleV07XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3RDb3B5KTtcbiAgICBrZXlzLnNvcnQoKTtcblxuICAgIHJldHVybiBrZXlzLm1hcCgoa2V5KSA9PiB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gb2JqZWN0W2tleV07XG5cbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGVuY29kZShrZXkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWVcbiAgICAgICAgICAgICAgICAucmVkdWNlKHJlZHVjZUJ5S2V5KG9wdGlvbnMpKGtleSksIFtdKVxuICAgICAgICAgICAgICAgIC5qb2luKCcmJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYCR7ZW5jb2RlKGtleSl9PSR7ZW5jb2RlKHZhbHVlKX1gO1xuICAgIH0pLmZpbHRlcigoeCkgPT4geC5sZW5ndGggPiAwKS5qb2luKCcmJyk7XG59XG4iLCJpbXBvcnQgJ3doYXR3Zy1mZXRjaCc7XG5pbXBvcnQgeyBzdHJpbmdpZnkgfSBmcm9tICcuL3F1ZXJ5LXN0cmluZyc7XG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIG9yIG5vdCB0aGUgY3VycmVudCBtZXRob2QgcGFzc2VkIGluIGlzIHZhbGlkXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1ldGhvZFxuICogQHJldHVybnMge0Jvb2xlYW59XG4gKi9cbmNvbnN0IGlzVmFsaWRIVFRQTWV0aG9kID0gKG1ldGhvZCkgPT4gWydHRVQnLCAnUE9TVCcsICdQVVQnLCAnREVMRVRFJ10uaW5kZXhPZihtZXRob2QpICE9PSAtMTtcblxuLyoqXG4gKiBDaGVja3MgaWYgcmVxdWVzdGVkIHRlbXBsYXRlIGlzIHVzaW5nIHNlY3Rpb25zXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl8U3RyaW5nfSByZXF1ZXN0ZWRUZW1wbGF0ZVxuICovXG5jb25zdCBpc1VzaW5nU2VjdGlvbnMgPSAocmVxdWVzdGVkVGVtcGxhdGUpID0+IHJlcXVlc3RlZFRlbXBsYXRlICE9PSBudWxsICYmIHR5cGVvZiAocmVxdWVzdGVkVGVtcGxhdGUpID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShyZXF1ZXN0ZWRUZW1wbGF0ZSk7XG5cbi8qKlxuICogUmV0dXJucyB0ZW1wbGF0ZXMgYXJyYXlcbiAqXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheXxTdHJpbmd9IHJlcXVlc3RlZFRlbXBsYXRlXG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKi9cbmNvbnN0IGdldFRlbXBsYXRlcyA9IChyZXF1ZXN0ZWRUZW1wbGF0ZSkgPT4ge1xuICAgIGxldCB0ZW1wbGF0ZXMgPSBbXTtcbiAgICBpZiAoaXNVc2luZ1NlY3Rpb25zKHJlcXVlc3RlZFRlbXBsYXRlKSkge1xuICAgICAgICB0ZW1wbGF0ZXMgPSBPYmplY3QudmFsdWVzKHJlcXVlc3RlZFRlbXBsYXRlKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiAocmVxdWVzdGVkVGVtcGxhdGUpID09PSAnc3RyaW5nJykge1xuICAgICAgICB0ZW1wbGF0ZXMgPSBbcmVxdWVzdGVkVGVtcGxhdGVdO1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShyZXF1ZXN0ZWRUZW1wbGF0ZSkgJiYgcmVxdWVzdGVkVGVtcGxhdGUubGVuZ3RoID4gMCkge1xuICAgICAgICB0ZW1wbGF0ZXMgPSByZXF1ZXN0ZWRUZW1wbGF0ZTtcbiAgICB9XG4gICAgcmV0dXJuIHRlbXBsYXRlcztcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChyZWxhdGl2ZVVybCwgb3B0cywgY2FsbGJhY2spIHtcbiAgICBjb25zdCBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgcmVtb3RlOiBmYWxzZSxcbiAgICAgICAgcmVxdWVzdE9wdGlvbnM6IHtcbiAgICAgICAgICAgIGJhc2VVcmw6IG51bGwsXG4gICAgICAgICAgICBmb3JtRGF0YTogbnVsbCxcbiAgICAgICAgICAgIHBhcmFtczoge30sXG4gICAgICAgICAgICBjb25maWc6IHt9LFxuICAgICAgICAgICAgdGVtcGxhdGU6IFtdLFxuICAgICAgICB9LFxuICAgIH07XG4gICAgY29uc3Qgb3B0aW9ucyA9IHsgLi4uZGVmYXVsdE9wdGlvbnMsIC4uLm9wdHMgfTtcbiAgICBjb25zdCBkYXRhID0gb3B0aW9ucy5yZXF1ZXN0T3B0aW9ucy5mb3JtRGF0YSA/IG9wdGlvbnMucmVxdWVzdE9wdGlvbnMuZm9ybURhdGEgOiBvcHRpb25zLnJlcXVlc3RPcHRpb25zLnBhcmFtcztcbiAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICAnc3RlbmNpbC1jb25maWcnOiBvcHRpb25zLnJlcXVlc3RPcHRpb25zLmNvbmZpZyA/IEpTT04uc3RyaW5naWZ5KG9wdGlvbnMucmVxdWVzdE9wdGlvbnMuY29uZmlnKSA6ICd7fScsXG4gICAgICAgICdzdGVuY2lsLW9wdGlvbnMnOiAne30nLFxuICAgICAgICAneC14c3JmLXRva2VuJzogd2luZG93LkJDRGF0YSAmJiB3aW5kb3cuQkNEYXRhLmNzcmZfdG9rZW4gPyB3aW5kb3cuQkNEYXRhLmNzcmZfdG9rZW4gOiAnJyxcbiAgICAgICAgJ3gtcmVxdWVzdGVkLXdpdGgnOiAnc3RlbmNpbC11dGlscycsXG4gICAgfTtcblxuICAgIGlmICghaXNWYWxpZEhUVFBNZXRob2Qob3B0aW9ucy5tZXRob2QpKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhuZXcgRXJyb3IoJ05vdCBhIHZhbGlkIEhUVFAgbWV0aG9kJykpO1xuICAgIH1cblxuICAgIGNvbnN0IHRlbXBsYXRlcyA9IGdldFRlbXBsYXRlcyhvcHRpb25zLnJlcXVlc3RPcHRpb25zLnRlbXBsYXRlKTtcbiAgICBjb25zdCB1c2luZ1NlY3Rpb25zID0gaXNVc2luZ1NlY3Rpb25zKG9wdGlvbnMucmVxdWVzdE9wdGlvbnMudGVtcGxhdGUpO1xuICAgIGNvbnN0IHVzaW5nVGVtcGxhdGVzID0gdGVtcGxhdGVzLmxlbmd0aCA+IDA7XG5cbiAgICBpZiAoIW9wdGlvbnMucmVxdWVzdE9wdGlvbnMuZm9ybURhdGEpIHtcbiAgICAgICAgaGVhZGVyc1snY29udGVudC10eXBlJ10gPSAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04JztcbiAgICB9XG5cbiAgICBpZiAodXNpbmdUZW1wbGF0ZXMpIHtcbiAgICAgICAgaGVhZGVyc1snc3RlbmNpbC1vcHRpb25zJ10gPSBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICByZW5kZXJfd2l0aDogdGVtcGxhdGVzLmpvaW4oJywnKSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgY29uZmlnID0ge1xuICAgICAgICBtZXRob2Q6IG9wdGlvbnMubWV0aG9kLFxuICAgICAgICBoZWFkZXJzLFxuICAgICAgICBjcmVkZW50aWFsczogJ2luY2x1ZGUnLFxuICAgIH07XG5cbiAgICBsZXQgdXJsID0gb3B0aW9ucy5yZXF1ZXN0T3B0aW9ucy5iYXNlVXJsID8gYCR7b3B0aW9ucy5yZXF1ZXN0T3B0aW9ucy5iYXNlVXJsfSR7cmVsYXRpdmVVcmx9YCA6IHJlbGF0aXZlVXJsO1xuICAgIGlmIChbJ0dFVCcsICdIRUFEJ10uaW5kZXhPZihjb25maWcubWV0aG9kKSA9PT0gLTEpIHtcbiAgICAgICAgY29uZmlnLmJvZHkgPSAhb3B0aW9ucy5yZXF1ZXN0T3B0aW9ucy5mb3JtRGF0YSA/IHN0cmluZ2lmeShkYXRhLCB7IGluY2x1ZGVBcnJheUluZGV4OiB0cnVlIH0pIDogZGF0YTtcbiAgICB9IGVsc2UgaWYgKGRhdGEpIHtcbiAgICAgICAgY29uc3QgZGVsaW1pdGVyID0gIXVybC5pbmNsdWRlcygnPycpID8gJz8nIDogJyYnO1xuICAgICAgICB1cmwgKz0gYCR7ZGVsaW1pdGVyfSR7c3RyaW5naWZ5KGRhdGEpfWA7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZldGNoKHVybCwgY29uZmlnKVxuICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5oZWFkZXJzLmdldCgnY29udGVudC10eXBlJykuaW5kZXhPZignYXBwbGljYXRpb24vanNvbicpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UudGV4dCgpO1xuICAgICAgICB9KVxuICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSBvcHRpb25zLnJlbW90ZSA/IHJlc3BvbnNlLmNvbnRlbnQgOiByZXNwb25zZTtcbiAgICAgICAgICAgIGxldCByZXQgPSByZXNwb25zZTtcblxuICAgICAgICAgICAgaWYgKHVzaW5nVGVtcGxhdGVzKSB7XG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBgY29tcG9uZW50c2AgcHJlZml4IGZyb20gdGhlIHJlc3BvbnNlIGlmIGl0J3MgYW4gb2JqZWN0XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiAoY29udGVudCkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKGNvbnRlbnQpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2xlYW5LZXkgPSBrZXkucmVwbGFjZSgvXmNvbXBvbmVudHNcXC8vLCAnJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRbY2xlYW5LZXldID0gY29udGVudFtrZXldO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIChjb250ZW50W2tleV0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBJZiB1c2luZyBcInNlY3Rpb25zXCIsIG1vcnBoIHRoZSBjb250ZW50IGludG8gdGhlIGFyYml0cmFyeSBrZXlzID0+IGNvbnRlbnQgb2JqZWN0LlxuICAgICAgICAgICAgICAgIGlmICh1c2luZ1NlY3Rpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlcXVlc3RlZFRlbXBsYXRlID0gb3B0aW9ucy5yZXF1ZXN0T3B0aW9ucy50ZW1wbGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmtleXMocmVxdWVzdGVkVGVtcGxhdGUpLmZvckVhY2goKHRlbXBsYXRlVmFyaWFibGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRbdGVtcGxhdGVWYXJpYWJsZV0gPSBjb250ZW50W3JlcXVlc3RlZFRlbXBsYXRlW3RlbXBsYXRlVmFyaWFibGVdXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBjb250ZW50W3JlcXVlc3RlZFRlbXBsYXRlW3RlbXBsYXRlVmFyaWFibGVdXTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCFvcHRpb25zLnJlbW90ZSkge1xuICAgICAgICAgICAgICAgICAgICByZXQgPSBjb250ZW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHJldCk7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaCgoZXJyKSA9PiBjYWxsYmFjayhlcnIpKTtcbn1cbiIsImltcG9ydCBob29rcyBmcm9tICcuL2hvb2tzJztcbmltcG9ydCBhcGkgZnJvbSAnLi9hcGknO1xuaW1wb3J0IHRvb2xzIGZyb20gJy4vdG9vbHMnO1xuXG5jb25zdCBTdGVuY2lsVXRpbHMgPSB7XG4gICAgaG9va3MsXG4gICAgYXBpLFxuICAgIHRvb2xzLFxufTtcbmV4cG9ydCB7IGhvb2tzLCBhcGksIHRvb2xzIH07XG5leHBvcnQgZGVmYXVsdCBTdGVuY2lsVXRpbHM7XG5cbi8qIGdsb2JhbCBkZWZpbmUgKi9cbihmdW5jdGlvbiAocm9vdCkge1xuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgJiYgcm9vdCkge1xuICAgICAgICAvLyBJZ25vcmVzIGJlbG93IGZvciBodHRwczovL2dpdGh1Yi5jb20vZXNsaW50L2VzbGludC9pc3N1ZXMvNTE1MFxuICAgICAgICBkZWZpbmUoZnVuY3Rpb24gKCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHByZWZlci1hcnJvdy1jYWxsYmFja1xuICAgICAgICAgICAgcm9vdC5zdGVuY2lsVXRpbHMgPSBTdGVuY2lsVXRpbHM7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IFN0ZW5jaWxVdGlscztcbiAgICB9IGVsc2Uge1xuICAgICAgICB3aW5kb3cuc3RlbmNpbFV0aWxzID0gU3RlbmNpbFV0aWxzO1xuICAgIH1cbn0odGhpcykpO1xuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3Mge1xuICAgIGdldFNyYyhwYXRoLCBkaW1lbnNpb25zKSB7XG4gICAgICAgIC8vIFJlZ2V4IHRvIHRlc3Qgc2l6ZSBzdHJpbmcgaXMgb2YgdGhlIGZvcm0gMTIzeDEyMyBvciAxMDB3XG4gICAgICAgIGNvbnN0IHNpemVSZWdleCA9IC8oXlxcZCt3JCl8KF4oXFxkKz8peChcXGQrPykkKS9nO1xuICAgICAgICBsZXQgc2l6ZTtcblxuICAgICAgICBpZiAodHlwZW9mIChkaW1lbnNpb25zKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGNvbnN0IHdpZHRoID0gZGltZW5zaW9ucy53aWR0aCB8fCAxMDA7XG4gICAgICAgICAgICBjb25zdCBoZWlnaHQgPSBkaW1lbnNpb25zLmhlaWdodCB8fCAxMDA7XG5cbiAgICAgICAgICAgIHNpemUgPSBgJHt3aWR0aH14JHtoZWlnaHR9YDtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgKGRpbWVuc2lvbnMpID09PSAnc3RyaW5nJyAmJiBzaXplUmVnZXgudGVzdChkaW1lbnNpb25zKSkge1xuICAgICAgICAgICAgLy8gSWYgZGltZW5zaW9ucyBpcyBhIHN0cmluZyBhbmQgbWF0Y2ggdGhlIE5OTnhOTk4gb3IgTk5OdyBmb3JtYXRcbiAgICAgICAgICAgIHNpemUgPSBkaW1lbnNpb25zO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gVXNlIHRoZSBvcmlnaW5hbCBpbWFnZSBzaXplXG4gICAgICAgICAgICBzaXplID0gJ29yaWdpbmFsJztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwYXRoLnJlcGxhY2UoJ3s6c2l6ZX0nLCBzaXplKTtcbiAgICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyB7XG4gICAgZ2V0U3Jjc2V0KHVybCwgc2l6ZXMpIHtcbiAgICAgICAgLy8gUmVnZXggdG8gdGVzdCBzaXplIHN0cmluZyBpcyBvZiB0aGUgZm9ybSAxMjN4MTIzIG9yIDEwMHdcbiAgICAgICAgY29uc3Qgc2l6ZVJlZ2V4ID0gLyheXFxkK3ckKXwoXihcXGQrPyl4KFxcZCs/KSQpLztcbiAgICAgICAgLy8gUmVnZXggdG8gdGVzdCB0byB0aGF0IHNyY3NldCBkZXNjcmlwdG9yIGlzIG9mIHRoZSBmb3JtIDF4IDEuNXggMnggT1IgMTIzd1xuICAgICAgICBjb25zdCBkZXNjcmlwdG9yUmVnZXggPSAvKF5cXGQrdyQpfCheKFswLTldKFxcLlswLTldKyk/KXgpJC87XG5cbiAgICAgICAgbGV0IHNyY3NldHMgPSB7fTtcblxuICAgICAgICBpZiAoIXNpemVzKSB7XG4gICAgICAgICAgICAvLyBVc2UgZGVmYXVsdCBzcmNzZXRzIGlmIG5vbmUgYXJlIHByb3ZpZGVkXG4gICAgICAgICAgICBzcmNzZXRzID0ge1xuICAgICAgICAgICAgICAgICc4MHcnOiAnODB3JyxcbiAgICAgICAgICAgICAgICAnMTYwdyc6ICcxNjB3JyxcbiAgICAgICAgICAgICAgICAnMzIwdyc6ICczMjB3JyxcbiAgICAgICAgICAgICAgICAnNjQwdyc6ICc2NDB3JyxcbiAgICAgICAgICAgICAgICAnOTYwdyc6ICc5NjB3JyxcbiAgICAgICAgICAgICAgICAnMTI4MHcnOiAnMTI4MHcnLFxuICAgICAgICAgICAgICAgICcxOTIwdyc6ICcxOTIwdycsXG4gICAgICAgICAgICAgICAgJzI1NjB3JzogJzI1NjB3JyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZiAoKHNpemVzID09PSBPYmplY3Qoc2l6ZXMpKSAmJiAhT2JqZWN0LmtleXMoc2l6ZXMpLnNvbWUoKGRlc2NyaXB0b3IpID0+ICEoZGVzY3JpcHRvclJlZ2V4LnRlc3QoZGVzY3JpcHRvcikgJiYgc2l6ZVJlZ2V4LnRlc3Qoc2l6ZXNbZGVzY3JpcHRvcl0pKSkpIHtcbiAgICAgICAgICAgIC8vIElmIG9iamVjdCBjb25zaXN0cyBvZiB2YWxpZCBzcmNzZXRzLCB1c2UgaXQgaW5zdGVhZFxuICAgICAgICAgICAgc3Jjc2V0cyA9IHNpemVzO1xuICAgICAgICAgICAgLy8gSWYgdGhlcmUncyBvbmx5IG9uZSBhcmd1bWVudCwgcmV0dXJuIGEgYHNyY2Agb25seSAoYWxzbyB3b3JrcyBmb3IgYHNyY3NldGApXG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMoc3Jjc2V0cykubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICh1cmwucmVwbGFjZSgnezpzaXplfScsIHNyY3NldHNbT2JqZWN0LmtleXMoc3Jjc2V0cylbMF1dKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3Jjc2V0IGRlc2NyaXB0b3Igb3Igc2l6ZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5ldy1jYXBcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHNyY3NldHMpLm1hcCgoZGVzY3JpcHRvcikgPT4gW3VybC5yZXBsYWNlKCd7OnNpemV9Jywgc3Jjc2V0c1tkZXNjcmlwdG9yXSksIGRlc2NyaXB0b3JdLmpvaW4oJyAnKSkuam9pbignLCAnKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgSW1hZ2VUb29sIGZyb20gJy4vaW1hZ2UnO1xuaW1wb3J0IEltYWdlU3Jjc2V0VG9vbCBmcm9tICcuL2ltYWdlU3Jjc2V0JztcbmltcG9ydCBTdG9yYWdlVG9vbHMgZnJvbSAnLi9zdG9yYWdlJztcblxuY29uc3QgdG9vbHMgPSB7XG4gICAgaW1hZ2U6IG5ldyBJbWFnZVRvb2woKSxcbiAgICBpbWFnZVNyY3NldDogbmV3IEltYWdlU3Jjc2V0VG9vbCgpLFxuICAgIHN0b3JhZ2U6IG5ldyBTdG9yYWdlVG9vbHMoKSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHRvb2xzO1xuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3Mge1xuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIGEgc3RvcmFnZSB0eXBlIChsaWtlIGxvY2FsU3RvcmFnZSBvciBzZXNzaW9uU3RvcmFnZSkgaXMgYXZhaWxhYmxlIGZvciB1c2VcbiAgICAgKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvV2ViX1N0b3JhZ2VfQVBJL1VzaW5nX3RoZV9XZWJfU3RvcmFnZV9BUEkjVGVzdGluZ19mb3JfYXZhaWxhYmlsaXR5XG4gICAgICogQHBhcmFtIHR5cGVcbiAgICAgKiBAcmV0dXJucyBib29sZWFuXG4gICAgICovXG4gICAgc3RvcmFnZUF2YWlsYWJsZSh0eXBlKSB7XG4gICAgICAgIGNvbnN0IHN0b3JhZ2UgPSB3aW5kb3dbdHlwZV07XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCB4ID0gJ19fc3RvcmFnZV90ZXN0X18nO1xuICAgICAgICAgICAgc3RvcmFnZS5zZXRJdGVtKHgsIHgpO1xuICAgICAgICAgICAgc3RvcmFnZS5yZW1vdmVJdGVtKHgpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBlIGluc3RhbmNlb2YgRE9NRXhjZXB0aW9uICYmIChcbiAgICAgICAgICAgIC8vIGV2ZXJ5dGhpbmcgZXhjZXB0IEZpcmVmb3hcbiAgICAgICAgICAgICAgICBlLmNvZGUgPT09IDIyXG4gICAgICAgICAgICAgICAgLy8gRmlyZWZveFxuICAgICAgICAgICAgICAgIHx8IGUuY29kZSA9PT0gMTAxNFxuICAgICAgICAgICAgICAgIC8vIHRlc3QgbmFtZSBmaWVsZCB0b28sIGJlY2F1c2UgY29kZSBtaWdodCBub3QgYmUgcHJlc2VudFxuICAgICAgICAgICAgICAgIC8vIGV2ZXJ5dGhpbmcgZXhjZXB0IEZpcmVmb3hcbiAgICAgICAgICAgICAgICB8fCBlLm5hbWUgPT09ICdRdW90YUV4Y2VlZGVkRXJyb3InXG4gICAgICAgICAgICAgICAgLy8gRmlyZWZveFxuICAgICAgICAgICAgICAgIHx8IGUubmFtZSA9PT0gJ05TX0VSUk9SX0RPTV9RVU9UQV9SRUFDSEVEJylcbiAgICAgICAgICAgICAgICAvLyBhY2tub3dsZWRnZSBRdW90YUV4Y2VlZGVkRXJyb3Igb25seSBpZiB0aGVyZSdzIHNvbWV0aGluZyBhbHJlYWR5IHN0b3JlZFxuICAgICAgICAgICAgICAgICYmIHN0b3JhZ2UubGVuZ3RoICE9PSAwO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbG9jYWxTdG9yYWdlQXZhaWxhYmxlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdG9yYWdlQXZhaWxhYmxlKCdsb2NhbFN0b3JhZ2UnKTtcbiAgICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCdnZXQtaW50cmluc2ljJyk7XG5cbnZhciBjYWxsQmluZCA9IHJlcXVpcmUoJy4vJyk7XG5cbnZhciAkaW5kZXhPZiA9IGNhbGxCaW5kKEdldEludHJpbnNpYygnU3RyaW5nLnByb3RvdHlwZS5pbmRleE9mJykpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNhbGxCb3VuZEludHJpbnNpYyhuYW1lLCBhbGxvd01pc3NpbmcpIHtcblx0dmFyIGludHJpbnNpYyA9IEdldEludHJpbnNpYyhuYW1lLCAhIWFsbG93TWlzc2luZyk7XG5cdGlmICh0eXBlb2YgaW50cmluc2ljID09PSAnZnVuY3Rpb24nICYmICRpbmRleE9mKG5hbWUsICcucHJvdG90eXBlLicpID4gLTEpIHtcblx0XHRyZXR1cm4gY2FsbEJpbmQoaW50cmluc2ljKTtcblx0fVxuXHRyZXR1cm4gaW50cmluc2ljO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCdmdW5jdGlvbi1iaW5kJyk7XG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnZ2V0LWludHJpbnNpYycpO1xudmFyIHNldEZ1bmN0aW9uTGVuZ3RoID0gcmVxdWlyZSgnc2V0LWZ1bmN0aW9uLWxlbmd0aCcpO1xuXG52YXIgJFR5cGVFcnJvciA9IHJlcXVpcmUoJ2VzLWVycm9ycy90eXBlJyk7XG52YXIgJGFwcGx5ID0gR2V0SW50cmluc2ljKCclRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5JScpO1xudmFyICRjYWxsID0gR2V0SW50cmluc2ljKCclRnVuY3Rpb24ucHJvdG90eXBlLmNhbGwlJyk7XG52YXIgJHJlZmxlY3RBcHBseSA9IEdldEludHJpbnNpYygnJVJlZmxlY3QuYXBwbHklJywgdHJ1ZSkgfHwgYmluZC5jYWxsKCRjYWxsLCAkYXBwbHkpO1xuXG52YXIgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnZXMtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgJG1heCA9IEdldEludHJpbnNpYygnJU1hdGgubWF4JScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNhbGxCaW5kKG9yaWdpbmFsRnVuY3Rpb24pIHtcblx0aWYgKHR5cGVvZiBvcmlnaW5hbEZ1bmN0aW9uICE9PSAnZnVuY3Rpb24nKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2EgZnVuY3Rpb24gaXMgcmVxdWlyZWQnKTtcblx0fVxuXHR2YXIgZnVuYyA9ICRyZWZsZWN0QXBwbHkoYmluZCwgJGNhbGwsIGFyZ3VtZW50cyk7XG5cdHJldHVybiBzZXRGdW5jdGlvbkxlbmd0aChcblx0XHRmdW5jLFxuXHRcdDEgKyAkbWF4KDAsIG9yaWdpbmFsRnVuY3Rpb24ubGVuZ3RoIC0gKGFyZ3VtZW50cy5sZW5ndGggLSAxKSksXG5cdFx0dHJ1ZVxuXHQpO1xufTtcblxudmFyIGFwcGx5QmluZCA9IGZ1bmN0aW9uIGFwcGx5QmluZCgpIHtcblx0cmV0dXJuICRyZWZsZWN0QXBwbHkoYmluZCwgJGFwcGx5LCBhcmd1bWVudHMpO1xufTtcblxuaWYgKCRkZWZpbmVQcm9wZXJ0eSkge1xuXHQkZGVmaW5lUHJvcGVydHkobW9kdWxlLmV4cG9ydHMsICdhcHBseScsIHsgdmFsdWU6IGFwcGx5QmluZCB9KTtcbn0gZWxzZSB7XG5cdG1vZHVsZS5leHBvcnRzLmFwcGx5ID0gYXBwbHlCaW5kO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnZXMtZGVmaW5lLXByb3BlcnR5Jyk7XG5cbnZhciAkU3ludGF4RXJyb3IgPSByZXF1aXJlKCdlcy1lcnJvcnMvc3ludGF4Jyk7XG52YXIgJFR5cGVFcnJvciA9IHJlcXVpcmUoJ2VzLWVycm9ycy90eXBlJyk7XG5cbnZhciBnb3BkID0gcmVxdWlyZSgnZ29wZCcpO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLicpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkZWZpbmVEYXRhUHJvcGVydHkoXG5cdG9iaixcblx0cHJvcGVydHksXG5cdHZhbHVlXG4pIHtcblx0aWYgKCFvYmogfHwgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnICYmIHR5cGVvZiBvYmogIT09ICdmdW5jdGlvbicpKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2BvYmpgIG11c3QgYmUgYW4gb2JqZWN0IG9yIGEgZnVuY3Rpb25gJyk7XG5cdH1cblx0aWYgKHR5cGVvZiBwcm9wZXJ0eSAhPT0gJ3N0cmluZycgJiYgdHlwZW9mIHByb3BlcnR5ICE9PSAnc3ltYm9sJykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdgcHJvcGVydHlgIG11c3QgYmUgYSBzdHJpbmcgb3IgYSBzeW1ib2xgJyk7XG5cdH1cblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIHR5cGVvZiBhcmd1bWVudHNbM10gIT09ICdib29sZWFuJyAmJiBhcmd1bWVudHNbM10gIT09IG51bGwpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignYG5vbkVudW1lcmFibGVgLCBpZiBwcm92aWRlZCwgbXVzdCBiZSBhIGJvb2xlYW4gb3IgbnVsbCcpO1xuXHR9XG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID4gNCAmJiB0eXBlb2YgYXJndW1lbnRzWzRdICE9PSAnYm9vbGVhbicgJiYgYXJndW1lbnRzWzRdICE9PSBudWxsKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2Bub25Xcml0YWJsZWAsIGlmIHByb3ZpZGVkLCBtdXN0IGJlIGEgYm9vbGVhbiBvciBudWxsJyk7XG5cdH1cblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiA1ICYmIHR5cGVvZiBhcmd1bWVudHNbNV0gIT09ICdib29sZWFuJyAmJiBhcmd1bWVudHNbNV0gIT09IG51bGwpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignYG5vbkNvbmZpZ3VyYWJsZWAsIGlmIHByb3ZpZGVkLCBtdXN0IGJlIGEgYm9vbGVhbiBvciBudWxsJyk7XG5cdH1cblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiA2ICYmIHR5cGVvZiBhcmd1bWVudHNbNl0gIT09ICdib29sZWFuJykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdgbG9vc2VgLCBpZiBwcm92aWRlZCwgbXVzdCBiZSBhIGJvb2xlYW4nKTtcblx0fVxuXG5cdHZhciBub25FbnVtZXJhYmxlID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgPyBhcmd1bWVudHNbM10gOiBudWxsO1xuXHR2YXIgbm9uV3JpdGFibGUgPSBhcmd1bWVudHMubGVuZ3RoID4gNCA/IGFyZ3VtZW50c1s0XSA6IG51bGw7XG5cdHZhciBub25Db25maWd1cmFibGUgPSBhcmd1bWVudHMubGVuZ3RoID4gNSA/IGFyZ3VtZW50c1s1XSA6IG51bGw7XG5cdHZhciBsb29zZSA9IGFyZ3VtZW50cy5sZW5ndGggPiA2ID8gYXJndW1lbnRzWzZdIDogZmFsc2U7XG5cblx0LyogQHR5cGUge2ZhbHNlIHwgVHlwZWRQcm9wZXJ0eURlc2NyaXB0b3I8dW5rbm93bj59ICovXG5cdHZhciBkZXNjID0gISFnb3BkICYmIGdvcGQob2JqLCBwcm9wZXJ0eSk7XG5cblx0aWYgKCRkZWZpbmVQcm9wZXJ0eSkge1xuXHRcdCRkZWZpbmVQcm9wZXJ0eShvYmosIHByb3BlcnR5LCB7XG5cdFx0XHRjb25maWd1cmFibGU6IG5vbkNvbmZpZ3VyYWJsZSA9PT0gbnVsbCAmJiBkZXNjID8gZGVzYy5jb25maWd1cmFibGUgOiAhbm9uQ29uZmlndXJhYmxlLFxuXHRcdFx0ZW51bWVyYWJsZTogbm9uRW51bWVyYWJsZSA9PT0gbnVsbCAmJiBkZXNjID8gZGVzYy5lbnVtZXJhYmxlIDogIW5vbkVudW1lcmFibGUsXG5cdFx0XHR2YWx1ZTogdmFsdWUsXG5cdFx0XHR3cml0YWJsZTogbm9uV3JpdGFibGUgPT09IG51bGwgJiYgZGVzYyA/IGRlc2Mud3JpdGFibGUgOiAhbm9uV3JpdGFibGVcblx0XHR9KTtcblx0fSBlbHNlIGlmIChsb29zZSB8fCAoIW5vbkVudW1lcmFibGUgJiYgIW5vbldyaXRhYmxlICYmICFub25Db25maWd1cmFibGUpKSB7XG5cdFx0Ly8gbXVzdCBmYWxsIGJhY2sgdG8gW1tTZXRdXSwgYW5kIHdhcyBub3QgZXhwbGljaXRseSBhc2tlZCB0byBtYWtlIG5vbi1lbnVtZXJhYmxlLCBub24td3JpdGFibGUsIG9yIG5vbi1jb25maWd1cmFibGVcblx0XHRvYmpbcHJvcGVydHldID0gdmFsdWU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgJFN5bnRheEVycm9yKCdUaGlzIGVudmlyb25tZW50IGRvZXMgbm90IHN1cHBvcnQgZGVmaW5pbmcgYSBwcm9wZXJ0eSBhcyBub24tY29uZmlndXJhYmxlLCBub24td3JpdGFibGUsIG9yIG5vbi1lbnVtZXJhYmxlLicpO1xuXHR9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnZ2V0LWludHJpbnNpYycpO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLicpfSAqL1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IEdldEludHJpbnNpYygnJU9iamVjdC5kZWZpbmVQcm9wZXJ0eSUnLCB0cnVlKSB8fCBmYWxzZTtcbmlmICgkZGVmaW5lUHJvcGVydHkpIHtcblx0dHJ5IHtcblx0XHQkZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyB2YWx1ZTogMSB9KTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdC8vIElFIDggaGFzIGEgYnJva2VuIGRlZmluZVByb3BlcnR5XG5cdFx0JGRlZmluZVByb3BlcnR5ID0gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSAkZGVmaW5lUHJvcGVydHk7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuL2V2YWwnKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gRXZhbEVycm9yO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLicpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBFcnJvcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4vcmFuZ2UnKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gUmFuZ2VFcnJvcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4vcmVmJyl9ICovXG5tb2R1bGUuZXhwb3J0cyA9IFJlZmVyZW5jZUVycm9yO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLi9zeW50YXgnKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gU3ludGF4RXJyb3I7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuL3R5cGUnKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gVHlwZUVycm9yO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLi91cmknKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gVVJJRXJyb3I7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5XG4gICwgcHJlZml4ID0gJ34nO1xuXG4vKipcbiAqIENvbnN0cnVjdG9yIHRvIGNyZWF0ZSBhIHN0b3JhZ2UgZm9yIG91ciBgRUVgIG9iamVjdHMuXG4gKiBBbiBgRXZlbnRzYCBpbnN0YW5jZSBpcyBhIHBsYWluIG9iamVjdCB3aG9zZSBwcm9wZXJ0aWVzIGFyZSBldmVudCBuYW1lcy5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIEV2ZW50cygpIHt9XG5cbi8vXG4vLyBXZSB0cnkgdG8gbm90IGluaGVyaXQgZnJvbSBgT2JqZWN0LnByb3RvdHlwZWAuIEluIHNvbWUgZW5naW5lcyBjcmVhdGluZyBhblxuLy8gaW5zdGFuY2UgaW4gdGhpcyB3YXkgaXMgZmFzdGVyIHRoYW4gY2FsbGluZyBgT2JqZWN0LmNyZWF0ZShudWxsKWAgZGlyZWN0bHkuXG4vLyBJZiBgT2JqZWN0LmNyZWF0ZShudWxsKWAgaXMgbm90IHN1cHBvcnRlZCB3ZSBwcmVmaXggdGhlIGV2ZW50IG5hbWVzIHdpdGggYVxuLy8gY2hhcmFjdGVyIHRvIG1ha2Ugc3VyZSB0aGF0IHRoZSBidWlsdC1pbiBvYmplY3QgcHJvcGVydGllcyBhcmUgbm90XG4vLyBvdmVycmlkZGVuIG9yIHVzZWQgYXMgYW4gYXR0YWNrIHZlY3Rvci5cbi8vXG5pZiAoT2JqZWN0LmNyZWF0ZSkge1xuICBFdmVudHMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAvL1xuICAvLyBUaGlzIGhhY2sgaXMgbmVlZGVkIGJlY2F1c2UgdGhlIGBfX3Byb3RvX19gIHByb3BlcnR5IGlzIHN0aWxsIGluaGVyaXRlZCBpblxuICAvLyBzb21lIG9sZCBicm93c2VycyBsaWtlIEFuZHJvaWQgNCwgaVBob25lIDUuMSwgT3BlcmEgMTEgYW5kIFNhZmFyaSA1LlxuICAvL1xuICBpZiAoIW5ldyBFdmVudHMoKS5fX3Byb3RvX18pIHByZWZpeCA9IGZhbHNlO1xufVxuXG4vKipcbiAqIFJlcHJlc2VudGF0aW9uIG9mIGEgc2luZ2xlIGV2ZW50IGxpc3RlbmVyLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBsaXN0ZW5lciBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Kn0gY29udGV4dCBUaGUgY29udGV4dCB0byBpbnZva2UgdGhlIGxpc3RlbmVyIHdpdGguXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvbmNlPWZhbHNlXSBTcGVjaWZ5IGlmIHRoZSBsaXN0ZW5lciBpcyBhIG9uZS10aW1lIGxpc3RlbmVyLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBFRShmbiwgY29udGV4dCwgb25jZSkge1xuICB0aGlzLmZuID0gZm47XG4gIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMub25jZSA9IG9uY2UgfHwgZmFsc2U7XG59XG5cbi8qKlxuICogQWRkIGEgbGlzdGVuZXIgZm9yIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHtFdmVudEVtaXR0ZXJ9IGVtaXR0ZXIgUmVmZXJlbmNlIHRvIHRoZSBgRXZlbnRFbWl0dGVyYCBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBsaXN0ZW5lciBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Kn0gY29udGV4dCBUaGUgY29udGV4dCB0byBpbnZva2UgdGhlIGxpc3RlbmVyIHdpdGguXG4gKiBAcGFyYW0ge0Jvb2xlYW59IG9uY2UgU3BlY2lmeSBpZiB0aGUgbGlzdGVuZXIgaXMgYSBvbmUtdGltZSBsaXN0ZW5lci5cbiAqIEByZXR1cm5zIHtFdmVudEVtaXR0ZXJ9XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBhZGRMaXN0ZW5lcihlbWl0dGVyLCBldmVudCwgZm4sIGNvbnRleHQsIG9uY2UpIHtcbiAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBsaXN0ZW5lciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lciA9IG5ldyBFRShmbiwgY29udGV4dCB8fCBlbWl0dGVyLCBvbmNlKVxuICAgICwgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudDtcblxuICBpZiAoIWVtaXR0ZXIuX2V2ZW50c1tldnRdKSBlbWl0dGVyLl9ldmVudHNbZXZ0XSA9IGxpc3RlbmVyLCBlbWl0dGVyLl9ldmVudHNDb3VudCsrO1xuICBlbHNlIGlmICghZW1pdHRlci5fZXZlbnRzW2V2dF0uZm4pIGVtaXR0ZXIuX2V2ZW50c1tldnRdLnB1c2gobGlzdGVuZXIpO1xuICBlbHNlIGVtaXR0ZXIuX2V2ZW50c1tldnRdID0gW2VtaXR0ZXIuX2V2ZW50c1tldnRdLCBsaXN0ZW5lcl07XG5cbiAgcmV0dXJuIGVtaXR0ZXI7XG59XG5cbi8qKlxuICogQ2xlYXIgZXZlbnQgYnkgbmFtZS5cbiAqXG4gKiBAcGFyYW0ge0V2ZW50RW1pdHRlcn0gZW1pdHRlciBSZWZlcmVuY2UgdG8gdGhlIGBFdmVudEVtaXR0ZXJgIGluc3RhbmNlLlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IGV2dCBUaGUgRXZlbnQgbmFtZS5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGNsZWFyRXZlbnQoZW1pdHRlciwgZXZ0KSB7XG4gIGlmICgtLWVtaXR0ZXIuX2V2ZW50c0NvdW50ID09PSAwKSBlbWl0dGVyLl9ldmVudHMgPSBuZXcgRXZlbnRzKCk7XG4gIGVsc2UgZGVsZXRlIGVtaXR0ZXIuX2V2ZW50c1tldnRdO1xufVxuXG4vKipcbiAqIE1pbmltYWwgYEV2ZW50RW1pdHRlcmAgaW50ZXJmYWNlIHRoYXQgaXMgbW9sZGVkIGFnYWluc3QgdGhlIE5vZGUuanNcbiAqIGBFdmVudEVtaXR0ZXJgIGludGVyZmFjZS5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkge1xuICB0aGlzLl9ldmVudHMgPSBuZXcgRXZlbnRzKCk7XG4gIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbn1cblxuLyoqXG4gKiBSZXR1cm4gYW4gYXJyYXkgbGlzdGluZyB0aGUgZXZlbnRzIGZvciB3aGljaCB0aGUgZW1pdHRlciBoYXMgcmVnaXN0ZXJlZFxuICogbGlzdGVuZXJzLlxuICpcbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5ldmVudE5hbWVzID0gZnVuY3Rpb24gZXZlbnROYW1lcygpIHtcbiAgdmFyIG5hbWVzID0gW11cbiAgICAsIGV2ZW50c1xuICAgICwgbmFtZTtcblxuICBpZiAodGhpcy5fZXZlbnRzQ291bnQgPT09IDApIHJldHVybiBuYW1lcztcblxuICBmb3IgKG5hbWUgaW4gKGV2ZW50cyA9IHRoaXMuX2V2ZW50cykpIHtcbiAgICBpZiAoaGFzLmNhbGwoZXZlbnRzLCBuYW1lKSkgbmFtZXMucHVzaChwcmVmaXggPyBuYW1lLnNsaWNlKDEpIDogbmFtZSk7XG4gIH1cblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHJldHVybiBuYW1lcy5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhldmVudHMpKTtcbiAgfVxuXG4gIHJldHVybiBuYW1lcztcbn07XG5cbi8qKlxuICogUmV0dXJuIHRoZSBsaXN0ZW5lcnMgcmVnaXN0ZXJlZCBmb3IgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFRoZSByZWdpc3RlcmVkIGxpc3RlbmVycy5cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbiBsaXN0ZW5lcnMoZXZlbnQpIHtcbiAgdmFyIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnRcbiAgICAsIGhhbmRsZXJzID0gdGhpcy5fZXZlbnRzW2V2dF07XG5cbiAgaWYgKCFoYW5kbGVycykgcmV0dXJuIFtdO1xuICBpZiAoaGFuZGxlcnMuZm4pIHJldHVybiBbaGFuZGxlcnMuZm5dO1xuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gaGFuZGxlcnMubGVuZ3RoLCBlZSA9IG5ldyBBcnJheShsKTsgaSA8IGw7IGkrKykge1xuICAgIGVlW2ldID0gaGFuZGxlcnNbaV0uZm47XG4gIH1cblxuICByZXR1cm4gZWU7XG59O1xuXG4vKipcbiAqIFJldHVybiB0aGUgbnVtYmVyIG9mIGxpc3RlbmVycyBsaXN0ZW5pbmcgdG8gYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgbnVtYmVyIG9mIGxpc3RlbmVycy5cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24gbGlzdGVuZXJDb3VudChldmVudCkge1xuICB2YXIgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudFxuICAgICwgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzW2V2dF07XG5cbiAgaWYgKCFsaXN0ZW5lcnMpIHJldHVybiAwO1xuICBpZiAobGlzdGVuZXJzLmZuKSByZXR1cm4gMTtcbiAgcmV0dXJuIGxpc3RlbmVycy5sZW5ndGg7XG59O1xuXG4vKipcbiAqIENhbGxzIGVhY2ggb2YgdGhlIGxpc3RlbmVycyByZWdpc3RlcmVkIGZvciBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBgdHJ1ZWAgaWYgdGhlIGV2ZW50IGhhZCBsaXN0ZW5lcnMsIGVsc2UgYGZhbHNlYC5cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gZW1pdChldmVudCwgYTEsIGEyLCBhMywgYTQsIGE1KSB7XG4gIHZhciBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50O1xuXG4gIGlmICghdGhpcy5fZXZlbnRzW2V2dF0pIHJldHVybiBmYWxzZTtcblxuICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzW2V2dF1cbiAgICAsIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAsIGFyZ3NcbiAgICAsIGk7XG5cbiAgaWYgKGxpc3RlbmVycy5mbikge1xuICAgIGlmIChsaXN0ZW5lcnMub25jZSkgdGhpcy5yZW1vdmVMaXN0ZW5lcihldmVudCwgbGlzdGVuZXJzLmZuLCB1bmRlZmluZWQsIHRydWUpO1xuXG4gICAgc3dpdGNoIChsZW4pIHtcbiAgICAgIGNhc2UgMTogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0KSwgdHJ1ZTtcbiAgICAgIGNhc2UgMjogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0LCBhMSksIHRydWU7XG4gICAgICBjYXNlIDM6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEsIGEyKSwgdHJ1ZTtcbiAgICAgIGNhc2UgNDogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0LCBhMSwgYTIsIGEzKSwgdHJ1ZTtcbiAgICAgIGNhc2UgNTogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0LCBhMSwgYTIsIGEzLCBhNCksIHRydWU7XG4gICAgICBjYXNlIDY6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEsIGEyLCBhMywgYTQsIGE1KSwgdHJ1ZTtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSAxLCBhcmdzID0gbmV3IEFycmF5KGxlbiAtMSk7IGkgPCBsZW47IGkrKykge1xuICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzLmZuLmFwcGx5KGxpc3RlbmVycy5jb250ZXh0LCBhcmdzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbGVuZ3RoID0gbGlzdGVuZXJzLmxlbmd0aFxuICAgICAgLCBqO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAobGlzdGVuZXJzW2ldLm9uY2UpIHRoaXMucmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyc1tpXS5mbiwgdW5kZWZpbmVkLCB0cnVlKTtcblxuICAgICAgc3dpdGNoIChsZW4pIHtcbiAgICAgICAgY2FzZSAxOiBsaXN0ZW5lcnNbaV0uZm4uY2FsbChsaXN0ZW5lcnNbaV0uY29udGV4dCk7IGJyZWFrO1xuICAgICAgICBjYXNlIDI6IGxpc3RlbmVyc1tpXS5mbi5jYWxsKGxpc3RlbmVyc1tpXS5jb250ZXh0LCBhMSk7IGJyZWFrO1xuICAgICAgICBjYXNlIDM6IGxpc3RlbmVyc1tpXS5mbi5jYWxsKGxpc3RlbmVyc1tpXS5jb250ZXh0LCBhMSwgYTIpOyBicmVhaztcbiAgICAgICAgY2FzZSA0OiBsaXN0ZW5lcnNbaV0uZm4uY2FsbChsaXN0ZW5lcnNbaV0uY29udGV4dCwgYTEsIGEyLCBhMyk7IGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGlmICghYXJncykgZm9yIChqID0gMSwgYXJncyA9IG5ldyBBcnJheShsZW4gLTEpOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaiAtIDFdID0gYXJndW1lbnRzW2pdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGxpc3RlbmVyc1tpXS5mbi5hcHBseShsaXN0ZW5lcnNbaV0uY29udGV4dCwgYXJncyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG4vKipcbiAqIEFkZCBhIGxpc3RlbmVyIGZvciBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBsaXN0ZW5lciBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Kn0gW2NvbnRleHQ9dGhpc10gVGhlIGNvbnRleHQgdG8gaW52b2tlIHRoZSBsaXN0ZW5lciB3aXRoLlxuICogQHJldHVybnMge0V2ZW50RW1pdHRlcn0gYHRoaXNgLlxuICogQHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gb24oZXZlbnQsIGZuLCBjb250ZXh0KSB7XG4gIHJldHVybiBhZGRMaXN0ZW5lcih0aGlzLCBldmVudCwgZm4sIGNvbnRleHQsIGZhbHNlKTtcbn07XG5cbi8qKlxuICogQWRkIGEgb25lLXRpbWUgbGlzdGVuZXIgZm9yIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGxpc3RlbmVyIGZ1bmN0aW9uLlxuICogQHBhcmFtIHsqfSBbY29udGV4dD10aGlzXSBUaGUgY29udGV4dCB0byBpbnZva2UgdGhlIGxpc3RlbmVyIHdpdGguXG4gKiBAcmV0dXJucyB7RXZlbnRFbWl0dGVyfSBgdGhpc2AuXG4gKiBAcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uIG9uY2UoZXZlbnQsIGZuLCBjb250ZXh0KSB7XG4gIHJldHVybiBhZGRMaXN0ZW5lcih0aGlzLCBldmVudCwgZm4sIGNvbnRleHQsIHRydWUpO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgdGhlIGxpc3RlbmVycyBvZiBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIE9ubHkgcmVtb3ZlIHRoZSBsaXN0ZW5lcnMgdGhhdCBtYXRjaCB0aGlzIGZ1bmN0aW9uLlxuICogQHBhcmFtIHsqfSBjb250ZXh0IE9ubHkgcmVtb3ZlIHRoZSBsaXN0ZW5lcnMgdGhhdCBoYXZlIHRoaXMgY29udGV4dC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gb25jZSBPbmx5IHJlbW92ZSBvbmUtdGltZSBsaXN0ZW5lcnMuXG4gKiBAcmV0dXJucyB7RXZlbnRFbWl0dGVyfSBgdGhpc2AuXG4gKiBAcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcihldmVudCwgZm4sIGNvbnRleHQsIG9uY2UpIHtcbiAgdmFyIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnQ7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHNbZXZ0XSkgcmV0dXJuIHRoaXM7XG4gIGlmICghZm4pIHtcbiAgICBjbGVhckV2ZW50KHRoaXMsIGV2dCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzW2V2dF07XG5cbiAgaWYgKGxpc3RlbmVycy5mbikge1xuICAgIGlmIChcbiAgICAgIGxpc3RlbmVycy5mbiA9PT0gZm4gJiZcbiAgICAgICghb25jZSB8fCBsaXN0ZW5lcnMub25jZSkgJiZcbiAgICAgICghY29udGV4dCB8fCBsaXN0ZW5lcnMuY29udGV4dCA9PT0gY29udGV4dClcbiAgICApIHtcbiAgICAgIGNsZWFyRXZlbnQodGhpcywgZXZ0KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGV2ZW50cyA9IFtdLCBsZW5ndGggPSBsaXN0ZW5lcnMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChcbiAgICAgICAgbGlzdGVuZXJzW2ldLmZuICE9PSBmbiB8fFxuICAgICAgICAob25jZSAmJiAhbGlzdGVuZXJzW2ldLm9uY2UpIHx8XG4gICAgICAgIChjb250ZXh0ICYmIGxpc3RlbmVyc1tpXS5jb250ZXh0ICE9PSBjb250ZXh0KVxuICAgICAgKSB7XG4gICAgICAgIGV2ZW50cy5wdXNoKGxpc3RlbmVyc1tpXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy9cbiAgICAvLyBSZXNldCB0aGUgYXJyYXksIG9yIHJlbW92ZSBpdCBjb21wbGV0ZWx5IGlmIHdlIGhhdmUgbm8gbW9yZSBsaXN0ZW5lcnMuXG4gICAgLy9cbiAgICBpZiAoZXZlbnRzLmxlbmd0aCkgdGhpcy5fZXZlbnRzW2V2dF0gPSBldmVudHMubGVuZ3RoID09PSAxID8gZXZlbnRzWzBdIDogZXZlbnRzO1xuICAgIGVsc2UgY2xlYXJFdmVudCh0aGlzLCBldnQpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbGwgbGlzdGVuZXJzLCBvciB0aG9zZSBvZiB0aGUgc3BlY2lmaWVkIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBbZXZlbnRdIFRoZSBldmVudCBuYW1lLlxuICogQHJldHVybnMge0V2ZW50RW1pdHRlcn0gYHRoaXNgLlxuICogQHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9IGZ1bmN0aW9uIHJlbW92ZUFsbExpc3RlbmVycyhldmVudCkge1xuICB2YXIgZXZ0O1xuXG4gIGlmIChldmVudCkge1xuICAgIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnQ7XG4gICAgaWYgKHRoaXMuX2V2ZW50c1tldnRdKSBjbGVhckV2ZW50KHRoaXMsIGV2dCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fZXZlbnRzID0gbmV3IEV2ZW50cygpO1xuICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLy9cbi8vIEFsaWFzIG1ldGhvZHMgbmFtZXMgYmVjYXVzZSBwZW9wbGUgcm9sbCBsaWtlIHRoYXQuXG4vL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vZmYgPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUub247XG5cbi8vXG4vLyBFeHBvc2UgdGhlIHByZWZpeC5cbi8vXG5FdmVudEVtaXR0ZXIucHJlZml4ZWQgPSBwcmVmaXg7XG5cbi8vXG4vLyBBbGxvdyBgRXZlbnRFbWl0dGVyYCB0byBiZSBpbXBvcnRlZCBhcyBtb2R1bGUgbmFtZXNwYWNlLlxuLy9cbkV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG5cbi8vXG4vLyBFeHBvc2UgdGhlIG1vZHVsZS5cbi8vXG5pZiAoJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiBtb2R1bGUpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBFdmVudEVtaXR0ZXI7XG59XG4iLCIvKiFcbiogZm9jdXMtdHJhcCA2LjkuNFxuKiBAbGljZW5zZSBNSVQsIGh0dHBzOi8vZ2l0aHViLmNvbS9mb2N1cy10cmFwL2ZvY3VzLXRyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRVxuKi9cbmltcG9ydCB7IHRhYmJhYmxlLCBmb2N1c2FibGUsIGlzVGFiYmFibGUsIGlzRm9jdXNhYmxlIH0gZnJvbSAndGFiYmFibGUnO1xuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7XG4gICAgZW51bWVyYWJsZU9ubHkgJiYgKHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTtcbiAgICB9KSksIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTtcbiAgfVxuXG4gIHJldHVybiBrZXlzO1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkMih0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gbnVsbCAhPSBhcmd1bWVudHNbaV0gPyBhcmd1bWVudHNbaV0gOiB7fTtcbiAgICBpICUgMiA/IG93bktleXMoT2JqZWN0KHNvdXJjZSksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgIH0pIDogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpIDogb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG52YXIgYWN0aXZlRm9jdXNUcmFwcyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRyYXBRdWV1ZSA9IFtdO1xuICByZXR1cm4ge1xuICAgIGFjdGl2YXRlVHJhcDogZnVuY3Rpb24gYWN0aXZhdGVUcmFwKHRyYXApIHtcbiAgICAgIGlmICh0cmFwUXVldWUubGVuZ3RoID4gMCkge1xuICAgICAgICB2YXIgYWN0aXZlVHJhcCA9IHRyYXBRdWV1ZVt0cmFwUXVldWUubGVuZ3RoIC0gMV07XG5cbiAgICAgICAgaWYgKGFjdGl2ZVRyYXAgIT09IHRyYXApIHtcbiAgICAgICAgICBhY3RpdmVUcmFwLnBhdXNlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIHRyYXBJbmRleCA9IHRyYXBRdWV1ZS5pbmRleE9mKHRyYXApO1xuXG4gICAgICBpZiAodHJhcEluZGV4ID09PSAtMSkge1xuICAgICAgICB0cmFwUXVldWUucHVzaCh0cmFwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIG1vdmUgdGhpcyBleGlzdGluZyB0cmFwIHRvIHRoZSBmcm9udCBvZiB0aGUgcXVldWVcbiAgICAgICAgdHJhcFF1ZXVlLnNwbGljZSh0cmFwSW5kZXgsIDEpO1xuICAgICAgICB0cmFwUXVldWUucHVzaCh0cmFwKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGRlYWN0aXZhdGVUcmFwOiBmdW5jdGlvbiBkZWFjdGl2YXRlVHJhcCh0cmFwKSB7XG4gICAgICB2YXIgdHJhcEluZGV4ID0gdHJhcFF1ZXVlLmluZGV4T2YodHJhcCk7XG5cbiAgICAgIGlmICh0cmFwSW5kZXggIT09IC0xKSB7XG4gICAgICAgIHRyYXBRdWV1ZS5zcGxpY2UodHJhcEluZGV4LCAxKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRyYXBRdWV1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHRyYXBRdWV1ZVt0cmFwUXVldWUubGVuZ3RoIC0gMV0udW5wYXVzZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn0oKTtcblxudmFyIGlzU2VsZWN0YWJsZUlucHV0ID0gZnVuY3Rpb24gaXNTZWxlY3RhYmxlSW5wdXQobm9kZSkge1xuICByZXR1cm4gbm9kZS50YWdOYW1lICYmIG5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnaW5wdXQnICYmIHR5cGVvZiBub2RlLnNlbGVjdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG5cbnZhciBpc0VzY2FwZUV2ZW50ID0gZnVuY3Rpb24gaXNFc2NhcGVFdmVudChlKSB7XG4gIHJldHVybiBlLmtleSA9PT0gJ0VzY2FwZScgfHwgZS5rZXkgPT09ICdFc2MnIHx8IGUua2V5Q29kZSA9PT0gMjc7XG59O1xuXG52YXIgaXNUYWJFdmVudCA9IGZ1bmN0aW9uIGlzVGFiRXZlbnQoZSkge1xuICByZXR1cm4gZS5rZXkgPT09ICdUYWInIHx8IGUua2V5Q29kZSA9PT0gOTtcbn07XG5cbnZhciBkZWxheSA9IGZ1bmN0aW9uIGRlbGF5KGZuKSB7XG4gIHJldHVybiBzZXRUaW1lb3V0KGZuLCAwKTtcbn07IC8vIEFycmF5LmZpbmQvZmluZEluZGV4KCkgYXJlIG5vdCBzdXBwb3J0ZWQgb24gSUU7IHRoaXMgcmVwbGljYXRlcyBlbm91Z2hcbi8vICBvZiBBcnJheS5maW5kSW5kZXgoKSBmb3Igb3VyIG5lZWRzXG5cblxudmFyIGZpbmRJbmRleCA9IGZ1bmN0aW9uIGZpbmRJbmRleChhcnIsIGZuKSB7XG4gIHZhciBpZHggPSAtMTtcbiAgYXJyLmV2ZXJ5KGZ1bmN0aW9uICh2YWx1ZSwgaSkge1xuICAgIGlmIChmbih2YWx1ZSkpIHtcbiAgICAgIGlkeCA9IGk7XG4gICAgICByZXR1cm4gZmFsc2U7IC8vIGJyZWFrXG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7IC8vIG5leHRcbiAgfSk7XG4gIHJldHVybiBpZHg7XG59O1xuLyoqXG4gKiBHZXQgYW4gb3B0aW9uJ3MgdmFsdWUgd2hlbiBpdCBjb3VsZCBiZSBhIHBsYWluIHZhbHVlLCBvciBhIGhhbmRsZXIgdGhhdCBwcm92aWRlc1xuICogIHRoZSB2YWx1ZS5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgT3B0aW9uJ3MgdmFsdWUgdG8gY2hlY2suXG4gKiBAcGFyYW0gey4uLip9IFtwYXJhbXNdIEFueSBwYXJhbWV0ZXJzIHRvIHBhc3MgdG8gdGhlIGhhbmRsZXIsIGlmIGB2YWx1ZWAgaXMgYSBmdW5jdGlvbi5cbiAqIEByZXR1cm5zIHsqfSBUaGUgYHZhbHVlYCwgb3IgdGhlIGhhbmRsZXIncyByZXR1cm5lZCB2YWx1ZS5cbiAqL1xuXG5cbnZhciB2YWx1ZU9ySGFuZGxlciA9IGZ1bmN0aW9uIHZhbHVlT3JIYW5kbGVyKHZhbHVlKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBwYXJhbXMgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIHBhcmFtc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nID8gdmFsdWUuYXBwbHkodm9pZCAwLCBwYXJhbXMpIDogdmFsdWU7XG59O1xuXG52YXIgZ2V0QWN0dWFsVGFyZ2V0ID0gZnVuY3Rpb24gZ2V0QWN0dWFsVGFyZ2V0KGV2ZW50KSB7XG4gIC8vIE5PVEU6IElmIHRoZSB0cmFwIGlzIF9pbnNpZGVfIGEgc2hhZG93IERPTSwgZXZlbnQudGFyZ2V0IHdpbGwgYWx3YXlzIGJlIHRoZVxuICAvLyAgc2hhZG93IGhvc3QuIEhvd2V2ZXIsIGV2ZW50LnRhcmdldC5jb21wb3NlZFBhdGgoKSB3aWxsIGJlIGFuIGFycmF5IG9mXG4gIC8vICBub2RlcyBcImNsaWNrZWRcIiBmcm9tIGlubmVyLW1vc3QgKHRoZSBhY3R1YWwgZWxlbWVudCBpbnNpZGUgdGhlIHNoYWRvdykgdG9cbiAgLy8gIG91dGVyLW1vc3QgKHRoZSBob3N0IEhUTUwgZG9jdW1lbnQpLiBJZiB3ZSBoYXZlIGFjY2VzcyB0byBjb21wb3NlZFBhdGgoKSxcbiAgLy8gIHRoZW4gdXNlIGl0cyBmaXJzdCBlbGVtZW50OyBvdGhlcndpc2UsIGZhbGwgYmFjayB0byBldmVudC50YXJnZXQgKGFuZFxuICAvLyAgdGhpcyBvbmx5IHdvcmtzIGZvciBhbiBfb3Blbl8gc2hhZG93IERPTTsgb3RoZXJ3aXNlLFxuICAvLyAgY29tcG9zZWRQYXRoKClbMF0gPT09IGV2ZW50LnRhcmdldCBhbHdheXMpLlxuICByZXR1cm4gZXZlbnQudGFyZ2V0LnNoYWRvd1Jvb3QgJiYgdHlwZW9mIGV2ZW50LmNvbXBvc2VkUGF0aCA9PT0gJ2Z1bmN0aW9uJyA/IGV2ZW50LmNvbXBvc2VkUGF0aCgpWzBdIDogZXZlbnQudGFyZ2V0O1xufTtcblxudmFyIGNyZWF0ZUZvY3VzVHJhcCA9IGZ1bmN0aW9uIGNyZWF0ZUZvY3VzVHJhcChlbGVtZW50cywgdXNlck9wdGlvbnMpIHtcbiAgLy8gU1NSOiBhIGxpdmUgdHJhcCBzaG91bGRuJ3QgYmUgY3JlYXRlZCBpbiB0aGlzIHR5cGUgb2YgZW52aXJvbm1lbnQgc28gdGhpc1xuICAvLyAgc2hvdWxkIGJlIHNhZmUgY29kZSB0byBleGVjdXRlIGlmIHRoZSBgZG9jdW1lbnRgIG9wdGlvbiBpc24ndCBzcGVjaWZpZWRcbiAgdmFyIGRvYyA9ICh1c2VyT3B0aW9ucyA9PT0gbnVsbCB8fCB1c2VyT3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogdXNlck9wdGlvbnMuZG9jdW1lbnQpIHx8IGRvY3VtZW50O1xuXG4gIHZhciBjb25maWcgPSBfb2JqZWN0U3ByZWFkMih7XG4gICAgcmV0dXJuRm9jdXNPbkRlYWN0aXZhdGU6IHRydWUsXG4gICAgZXNjYXBlRGVhY3RpdmF0ZXM6IHRydWUsXG4gICAgZGVsYXlJbml0aWFsRm9jdXM6IHRydWVcbiAgfSwgdXNlck9wdGlvbnMpO1xuXG4gIHZhciBzdGF0ZSA9IHtcbiAgICAvLyBjb250YWluZXJzIGdpdmVuIHRvIGNyZWF0ZUZvY3VzVHJhcCgpXG4gICAgLy8gQHR5cGUge0FycmF5PEhUTUxFbGVtZW50Pn1cbiAgICBjb250YWluZXJzOiBbXSxcbiAgICAvLyBsaXN0IG9mIG9iamVjdHMgaWRlbnRpZnlpbmcgdGFiYmFibGUgbm9kZXMgaW4gYGNvbnRhaW5lcnNgIGluIHRoZSB0cmFwXG4gICAgLy8gTk9URTogaXQncyBwb3NzaWJsZSB0aGF0IGEgZ3JvdXAgaGFzIG5vIHRhYmJhYmxlIG5vZGVzIGlmIG5vZGVzIGdldCByZW1vdmVkIHdoaWxlIHRoZSB0cmFwXG4gICAgLy8gIGlzIGFjdGl2ZSwgYnV0IHRoZSB0cmFwIHNob3VsZCBuZXZlciBnZXQgdG8gYSBzdGF0ZSB3aGVyZSB0aGVyZSBpc24ndCBhdCBsZWFzdCBvbmUgZ3JvdXBcbiAgICAvLyAgd2l0aCBhdCBsZWFzdCBvbmUgdGFiYmFibGUgbm9kZSBpbiBpdCAodGhhdCB3b3VsZCBsZWFkIHRvIGFuIGVycm9yIGNvbmRpdGlvbiB0aGF0IHdvdWxkXG4gICAgLy8gIHJlc3VsdCBpbiBhbiBlcnJvciBiZWluZyB0aHJvd24pXG4gICAgLy8gQHR5cGUge0FycmF5PHtcbiAgICAvLyAgIGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsXG4gICAgLy8gICB0YWJiYWJsZU5vZGVzOiBBcnJheTxIVE1MRWxlbWVudD4sIC8vIGVtcHR5IGlmIG5vbmVcbiAgICAvLyAgIGZvY3VzYWJsZU5vZGVzOiBBcnJheTxIVE1MRWxlbWVudD4sIC8vIGVtcHR5IGlmIG5vbmVcbiAgICAvLyAgIGZpcnN0VGFiYmFibGVOb2RlOiBIVE1MRWxlbWVudHxudWxsLFxuICAgIC8vICAgbGFzdFRhYmJhYmxlTm9kZTogSFRNTEVsZW1lbnR8bnVsbCxcbiAgICAvLyAgIG5leHRUYWJiYWJsZU5vZGU6IChub2RlOiBIVE1MRWxlbWVudCwgZm9yd2FyZDogYm9vbGVhbikgPT4gSFRNTEVsZW1lbnR8dW5kZWZpbmVkXG4gICAgLy8gfT59XG4gICAgY29udGFpbmVyR3JvdXBzOiBbXSxcbiAgICAvLyBzYW1lIG9yZGVyL2xlbmd0aCBhcyBgY29udGFpbmVyc2AgbGlzdFxuICAgIC8vIHJlZmVyZW5jZXMgdG8gb2JqZWN0cyBpbiBgY29udGFpbmVyR3JvdXBzYCwgYnV0IG9ubHkgdGhvc2UgdGhhdCBhY3R1YWxseSBoYXZlXG4gICAgLy8gIHRhYmJhYmxlIG5vZGVzIGluIHRoZW1cbiAgICAvLyBOT1RFOiBzYW1lIG9yZGVyIGFzIGBjb250YWluZXJzYCBhbmQgYGNvbnRhaW5lckdyb3Vwc2AsIGJ1dCBfX25vdCBuZWNlc3NhcmlseV9fXG4gICAgLy8gIHRoZSBzYW1lIGxlbmd0aFxuICAgIHRhYmJhYmxlR3JvdXBzOiBbXSxcbiAgICBub2RlRm9jdXNlZEJlZm9yZUFjdGl2YXRpb246IG51bGwsXG4gICAgbW9zdFJlY2VudGx5Rm9jdXNlZE5vZGU6IG51bGwsXG4gICAgYWN0aXZlOiBmYWxzZSxcbiAgICBwYXVzZWQ6IGZhbHNlLFxuICAgIC8vIHRpbWVyIElEIGZvciB3aGVuIGRlbGF5SW5pdGlhbEZvY3VzIGlzIHRydWUgYW5kIGluaXRpYWwgZm9jdXMgaW4gdGhpcyB0cmFwXG4gICAgLy8gIGhhcyBiZWVuIGRlbGF5ZWQgZHVyaW5nIGFjdGl2YXRpb25cbiAgICBkZWxheUluaXRpYWxGb2N1c1RpbWVyOiB1bmRlZmluZWRcbiAgfTtcbiAgdmFyIHRyYXA7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcHJlZmVyLWNvbnN0IC0tIHNvbWUgcHJpdmF0ZSBmdW5jdGlvbnMgcmVmZXJlbmNlIGl0LCBhbmQgaXRzIG1ldGhvZHMgcmVmZXJlbmNlIHByaXZhdGUgZnVuY3Rpb25zLCBzbyB3ZSBtdXN0IGRlY2xhcmUgaGVyZSBhbmQgZGVmaW5lIGxhdGVyXG5cbiAgLyoqXG4gICAqIEdldHMgYSBjb25maWd1cmF0aW9uIG9wdGlvbiB2YWx1ZS5cbiAgICogQHBhcmFtIHtPYmplY3R8dW5kZWZpbmVkfSBjb25maWdPdmVycmlkZU9wdGlvbnMgSWYgdHJ1ZSwgYW5kIG9wdGlvbiBpcyBkZWZpbmVkIGluIHRoaXMgc2V0LFxuICAgKiAgdmFsdWUgd2lsbCBiZSB0YWtlbiBmcm9tIHRoaXMgb2JqZWN0LiBPdGhlcndpc2UsIHZhbHVlIHdpbGwgYmUgdGFrZW4gZnJvbSBiYXNlIGNvbmZpZ3VyYXRpb24uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25OYW1lIE5hbWUgb2YgdGhlIG9wdGlvbiB3aG9zZSB2YWx1ZSBpcyBzb3VnaHQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfHVuZGVmaW5lZH0gW2NvbmZpZ09wdGlvbk5hbWVdIE5hbWUgb2Ygb3B0aW9uIHRvIHVzZSBfX2luc3RlYWQgb2ZfXyBgb3B0aW9uTmFtZWBcbiAgICogIElJRiBgY29uZmlnT3ZlcnJpZGVPcHRpb25zYCBpcyBub3QgZGVmaW5lZC4gT3RoZXJ3aXNlLCBgb3B0aW9uTmFtZWAgaXMgdXNlZC5cbiAgICovXG5cbiAgdmFyIGdldE9wdGlvbiA9IGZ1bmN0aW9uIGdldE9wdGlvbihjb25maWdPdmVycmlkZU9wdGlvbnMsIG9wdGlvbk5hbWUsIGNvbmZpZ09wdGlvbk5hbWUpIHtcbiAgICByZXR1cm4gY29uZmlnT3ZlcnJpZGVPcHRpb25zICYmIGNvbmZpZ092ZXJyaWRlT3B0aW9uc1tvcHRpb25OYW1lXSAhPT0gdW5kZWZpbmVkID8gY29uZmlnT3ZlcnJpZGVPcHRpb25zW29wdGlvbk5hbWVdIDogY29uZmlnW2NvbmZpZ09wdGlvbk5hbWUgfHwgb3B0aW9uTmFtZV07XG4gIH07XG4gIC8qKlxuICAgKiBGaW5kcyB0aGUgaW5kZXggb2YgdGhlIGNvbnRhaW5lciB0aGF0IGNvbnRhaW5zIHRoZSBlbGVtZW50LlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50XG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IEluZGV4IG9mIHRoZSBjb250YWluZXIgaW4gZWl0aGVyIGBzdGF0ZS5jb250YWluZXJzYCBvclxuICAgKiAgYHN0YXRlLmNvbnRhaW5lckdyb3Vwc2AgKHRoZSBvcmRlci9sZW5ndGggb2YgdGhlc2UgbGlzdHMgYXJlIHRoZSBzYW1lKTsgLTFcbiAgICogIGlmIHRoZSBlbGVtZW50IGlzbid0IGZvdW5kLlxuICAgKi9cblxuXG4gIHZhciBmaW5kQ29udGFpbmVySW5kZXggPSBmdW5jdGlvbiBmaW5kQ29udGFpbmVySW5kZXgoZWxlbWVudCkge1xuICAgIC8vIE5PVEU6IHNlYXJjaCBgY29udGFpbmVyR3JvdXBzYCBiZWNhdXNlIGl0J3MgcG9zc2libGUgYSBncm91cCBjb250YWlucyBubyB0YWJiYWJsZVxuICAgIC8vICBub2RlcywgYnV0IHN0aWxsIGNvbnRhaW5zIGZvY3VzYWJsZSBub2RlcyAoZS5nLiBpZiB0aGV5IGFsbCBoYXZlIGB0YWJpbmRleD0tMWApXG4gICAgLy8gIGFuZCB3ZSBzdGlsbCBuZWVkIHRvIGZpbmQgdGhlIGVsZW1lbnQgaW4gdGhlcmVcbiAgICByZXR1cm4gc3RhdGUuY29udGFpbmVyR3JvdXBzLmZpbmRJbmRleChmdW5jdGlvbiAoX3JlZikge1xuICAgICAgdmFyIGNvbnRhaW5lciA9IF9yZWYuY29udGFpbmVyLFxuICAgICAgICAgIHRhYmJhYmxlTm9kZXMgPSBfcmVmLnRhYmJhYmxlTm9kZXM7XG4gICAgICByZXR1cm4gY29udGFpbmVyLmNvbnRhaW5zKGVsZW1lbnQpIHx8IC8vIGZhbGwgYmFjayB0byBleHBsaWNpdCB0YWJiYWJsZSBzZWFyY2ggd2hpY2ggd2lsbCB0YWtlIGludG8gY29uc2lkZXJhdGlvbiBhbnlcbiAgICAgIC8vICB3ZWIgY29tcG9uZW50cyBpZiB0aGUgYHRhYmJhYmxlT3B0aW9ucy5nZXRTaGFkb3dSb290YCBvcHRpb24gd2FzIHVzZWQgZm9yXG4gICAgICAvLyAgdGhlIHRyYXAsIGVuYWJsaW5nIHNoYWRvdyBET00gc3VwcG9ydCBpbiB0YWJiYWJsZSAoYE5vZGUuY29udGFpbnMoKWAgZG9lc24ndFxuICAgICAgLy8gIGxvb2sgaW5zaWRlIHdlYiBjb21wb25lbnRzIGV2ZW4gaWYgb3BlbilcbiAgICAgIHRhYmJhYmxlTm9kZXMuZmluZChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICByZXR1cm4gbm9kZSA9PT0gZWxlbWVudDtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuICAvKipcbiAgICogR2V0cyB0aGUgbm9kZSBmb3IgdGhlIGdpdmVuIG9wdGlvbiwgd2hpY2ggaXMgZXhwZWN0ZWQgdG8gYmUgYW4gb3B0aW9uIHRoYXRcbiAgICogIGNhbiBiZSBlaXRoZXIgYSBET00gbm9kZSwgYSBzdHJpbmcgdGhhdCBpcyBhIHNlbGVjdG9yIHRvIGdldCBhIG5vZGUsIGBmYWxzZWBcbiAgICogIChpZiBhIG5vZGUgaXMgZXhwbGljaXRseSBOT1QgZ2l2ZW4pLCBvciBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhbnkgb2YgdGhlc2VcbiAgICogIHZhbHVlcy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbk5hbWVcbiAgICogQHJldHVybnMge3VuZGVmaW5lZCB8IGZhbHNlIHwgSFRNTEVsZW1lbnQgfCBTVkdFbGVtZW50fSBSZXR1cm5zXG4gICAqICBgdW5kZWZpbmVkYCBpZiB0aGUgb3B0aW9uIGlzIG5vdCBzcGVjaWZpZWQ7IGBmYWxzZWAgaWYgdGhlIG9wdGlvblxuICAgKiAgcmVzb2x2ZWQgdG8gYGZhbHNlYCAobm9kZSBleHBsaWNpdGx5IG5vdCBnaXZlbik7IG90aGVyd2lzZSwgdGhlIHJlc29sdmVkXG4gICAqICBET00gbm9kZS5cbiAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBvcHRpb24gaXMgc2V0LCBub3QgYGZhbHNlYCwgYW5kIGlzIG5vdCwgb3IgZG9lcyBub3RcbiAgICogIHJlc29sdmUgdG8gYSBub2RlLlxuICAgKi9cblxuXG4gIHZhciBnZXROb2RlRm9yT3B0aW9uID0gZnVuY3Rpb24gZ2V0Tm9kZUZvck9wdGlvbihvcHRpb25OYW1lKSB7XG4gICAgdmFyIG9wdGlvblZhbHVlID0gY29uZmlnW29wdGlvbk5hbWVdO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25WYWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBwYXJhbXMgPSBuZXcgQXJyYXkoX2xlbjIgPiAxID8gX2xlbjIgLSAxIDogMCksIF9rZXkyID0gMTsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgICBwYXJhbXNbX2tleTIgLSAxXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICB9XG5cbiAgICAgIG9wdGlvblZhbHVlID0gb3B0aW9uVmFsdWUuYXBwbHkodm9pZCAwLCBwYXJhbXMpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25WYWx1ZSA9PT0gdHJ1ZSkge1xuICAgICAgb3B0aW9uVmFsdWUgPSB1bmRlZmluZWQ7IC8vIHVzZSBkZWZhdWx0IHZhbHVlXG4gICAgfVxuXG4gICAgaWYgKCFvcHRpb25WYWx1ZSkge1xuICAgICAgaWYgKG9wdGlvblZhbHVlID09PSB1bmRlZmluZWQgfHwgb3B0aW9uVmFsdWUgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiBvcHRpb25WYWx1ZTtcbiAgICAgIH0gLy8gZWxzZSwgZW1wdHkgc3RyaW5nIChpbnZhbGlkKSwgbnVsbCAoaW52YWxpZCksIDAgKGludmFsaWQpXG5cblxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYFwiLmNvbmNhdChvcHRpb25OYW1lLCBcImAgd2FzIHNwZWNpZmllZCBidXQgd2FzIG5vdCBhIG5vZGUsIG9yIGRpZCBub3QgcmV0dXJuIGEgbm9kZVwiKSk7XG4gICAgfVxuXG4gICAgdmFyIG5vZGUgPSBvcHRpb25WYWx1ZTsgLy8gY291bGQgYmUgSFRNTEVsZW1lbnQsIFNWR0VsZW1lbnQsIG9yIG5vbi1lbXB0eSBzdHJpbmcgYXQgdGhpcyBwb2ludFxuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25WYWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIG5vZGUgPSBkb2MucXVlcnlTZWxlY3RvcihvcHRpb25WYWx1ZSk7IC8vIHJlc29sdmUgdG8gbm9kZSwgb3IgbnVsbCBpZiBmYWlsc1xuXG4gICAgICBpZiAoIW5vZGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYFwiLmNvbmNhdChvcHRpb25OYW1lLCBcImAgYXMgc2VsZWN0b3IgcmVmZXJzIHRvIG5vIGtub3duIG5vZGVcIikpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBub2RlO1xuICB9O1xuXG4gIHZhciBnZXRJbml0aWFsRm9jdXNOb2RlID0gZnVuY3Rpb24gZ2V0SW5pdGlhbEZvY3VzTm9kZSgpIHtcbiAgICB2YXIgbm9kZSA9IGdldE5vZGVGb3JPcHRpb24oJ2luaXRpYWxGb2N1cycpOyAvLyBmYWxzZSBleHBsaWNpdGx5IGluZGljYXRlcyB3ZSB3YW50IG5vIGluaXRpYWxGb2N1cyBhdCBhbGxcblxuICAgIGlmIChub2RlID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChub2RlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIG9wdGlvbiBub3Qgc3BlY2lmaWVkOiB1c2UgZmFsbGJhY2sgb3B0aW9uc1xuICAgICAgaWYgKGZpbmRDb250YWluZXJJbmRleChkb2MuYWN0aXZlRWxlbWVudCkgPj0gMCkge1xuICAgICAgICBub2RlID0gZG9jLmFjdGl2ZUVsZW1lbnQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgZmlyc3RUYWJiYWJsZUdyb3VwID0gc3RhdGUudGFiYmFibGVHcm91cHNbMF07XG4gICAgICAgIHZhciBmaXJzdFRhYmJhYmxlTm9kZSA9IGZpcnN0VGFiYmFibGVHcm91cCAmJiBmaXJzdFRhYmJhYmxlR3JvdXAuZmlyc3RUYWJiYWJsZU5vZGU7IC8vIE5PVEU6IGBmYWxsYmFja0ZvY3VzYCBvcHRpb24gZnVuY3Rpb24gY2Fubm90IHJldHVybiBgZmFsc2VgIChub3Qgc3VwcG9ydGVkKVxuXG4gICAgICAgIG5vZGUgPSBmaXJzdFRhYmJhYmxlTm9kZSB8fCBnZXROb2RlRm9yT3B0aW9uKCdmYWxsYmFja0ZvY3VzJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFub2RlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdXIgZm9jdXMtdHJhcCBuZWVkcyB0byBoYXZlIGF0IGxlYXN0IG9uZSBmb2N1c2FibGUgZWxlbWVudCcpO1xuICAgIH1cblxuICAgIHJldHVybiBub2RlO1xuICB9O1xuXG4gIHZhciB1cGRhdGVUYWJiYWJsZU5vZGVzID0gZnVuY3Rpb24gdXBkYXRlVGFiYmFibGVOb2RlcygpIHtcbiAgICBzdGF0ZS5jb250YWluZXJHcm91cHMgPSBzdGF0ZS5jb250YWluZXJzLm1hcChmdW5jdGlvbiAoY29udGFpbmVyKSB7XG4gICAgICB2YXIgdGFiYmFibGVOb2RlcyA9IHRhYmJhYmxlKGNvbnRhaW5lciwgY29uZmlnLnRhYmJhYmxlT3B0aW9ucyk7IC8vIE5PVEU6IGlmIHdlIGhhdmUgdGFiYmFibGUgbm9kZXMsIHdlIG11c3QgaGF2ZSBmb2N1c2FibGUgbm9kZXM7IGZvY3VzYWJsZSBub2Rlc1xuICAgICAgLy8gIGFyZSBhIHN1cGVyc2V0IG9mIHRhYmJhYmxlIG5vZGVzXG5cbiAgICAgIHZhciBmb2N1c2FibGVOb2RlcyA9IGZvY3VzYWJsZShjb250YWluZXIsIGNvbmZpZy50YWJiYWJsZU9wdGlvbnMpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY29udGFpbmVyOiBjb250YWluZXIsXG4gICAgICAgIHRhYmJhYmxlTm9kZXM6IHRhYmJhYmxlTm9kZXMsXG4gICAgICAgIGZvY3VzYWJsZU5vZGVzOiBmb2N1c2FibGVOb2RlcyxcbiAgICAgICAgZmlyc3RUYWJiYWJsZU5vZGU6IHRhYmJhYmxlTm9kZXMubGVuZ3RoID4gMCA/IHRhYmJhYmxlTm9kZXNbMF0gOiBudWxsLFxuICAgICAgICBsYXN0VGFiYmFibGVOb2RlOiB0YWJiYWJsZU5vZGVzLmxlbmd0aCA+IDAgPyB0YWJiYWJsZU5vZGVzW3RhYmJhYmxlTm9kZXMubGVuZ3RoIC0gMV0gOiBudWxsLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGaW5kcyB0aGUgX190YWJiYWJsZV9fIG5vZGUgdGhhdCBmb2xsb3dzIHRoZSBnaXZlbiBub2RlIGluIHRoZSBzcGVjaWZpZWQgZGlyZWN0aW9uLFxuICAgICAgICAgKiAgaW4gdGhpcyBjb250YWluZXIsIGlmIGFueS5cbiAgICAgICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gbm9kZVxuICAgICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmb3J3YXJkXSBUcnVlIGlmIGdvaW5nIGluIGZvcndhcmQgdGFiIG9yZGVyOyBmYWxzZSBpZiBnb2luZ1xuICAgICAgICAgKiAgaW4gcmV2ZXJzZS5cbiAgICAgICAgICogQHJldHVybnMge0hUTUxFbGVtZW50fHVuZGVmaW5lZH0gVGhlIG5leHQgdGFiYmFibGUgbm9kZSwgaWYgYW55LlxuICAgICAgICAgKi9cbiAgICAgICAgbmV4dFRhYmJhYmxlTm9kZTogZnVuY3Rpb24gbmV4dFRhYmJhYmxlTm9kZShub2RlKSB7XG4gICAgICAgICAgdmFyIGZvcndhcmQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRydWU7XG4gICAgICAgICAgLy8gTk9URTogSWYgdGFiaW5kZXggaXMgcG9zaXRpdmUgKGluIG9yZGVyIHRvIG1hbmlwdWxhdGUgdGhlIHRhYiBvcmRlciBzZXBhcmF0ZVxuICAgICAgICAgIC8vICBmcm9tIHRoZSBET00gb3JkZXIpLCB0aGlzIF9fd2lsbCBub3Qgd29ya19fIGJlY2F1c2UgdGhlIGxpc3Qgb2YgZm9jdXNhYmxlTm9kZXMsXG4gICAgICAgICAgLy8gIHdoaWxlIGl0IGNvbnRhaW5zIHRhYmJhYmxlIG5vZGVzLCBkb2VzIG5vdCBzb3J0IGl0cyBub2RlcyBpbiBhbnkgb3JkZXIgb3RoZXJcbiAgICAgICAgICAvLyAgdGhhbiBET00gb3JkZXIsIGJlY2F1c2UgaXQgY2FuJ3Q6IFdoZXJlIHdvdWxkIHlvdSBwbGFjZSBmb2N1c2FibGUgKGJ1dCBub3RcbiAgICAgICAgICAvLyAgdGFiYmFibGUpIG5vZGVzIGluIHRoYXQgb3JkZXI/IFRoZXkgaGF2ZSBubyBvcmRlciwgYmVjYXVzZSB0aGV5IGFyZW4ndCB0YWJiYWxlLi4uXG4gICAgICAgICAgLy8gU3VwcG9ydCBmb3IgcG9zaXRpdmUgdGFiaW5kZXggaXMgYWxyZWFkeSBicm9rZW4gYW5kIGhhcmQgdG8gbWFuYWdlIChwb3NzaWJseVxuICAgICAgICAgIC8vICBub3Qgc3VwcG9ydGFibGUsIFRCRCksIHNvIHRoaXMgaXNuJ3QgZ29pbmcgdG8gbWFrZSB0aGluZ3Mgd29yc2UgdGhhbiB0aGV5XG4gICAgICAgICAgLy8gIGFscmVhZHkgYXJlLCBhbmQgYXQgbGVhc3QgbWFrZXMgdGhpbmdzIGJldHRlciBmb3IgdGhlIG1ham9yaXR5IG9mIGNhc2VzIHdoZXJlXG4gICAgICAgICAgLy8gIHRhYmluZGV4IGlzIGVpdGhlciAwL3Vuc2V0IG9yIG5lZ2F0aXZlLlxuICAgICAgICAgIC8vIEZZSSwgcG9zaXRpdmUgdGFiaW5kZXggaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mb2N1cy10cmFwL2ZvY3VzLXRyYXAvaXNzdWVzLzM3NVxuICAgICAgICAgIHZhciBub2RlSWR4ID0gZm9jdXNhYmxlTm9kZXMuZmluZEluZGV4KGZ1bmN0aW9uIChuKSB7XG4gICAgICAgICAgICByZXR1cm4gbiA9PT0gbm9kZTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGlmIChub2RlSWR4IDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZm9yd2FyZCkge1xuICAgICAgICAgICAgcmV0dXJuIGZvY3VzYWJsZU5vZGVzLnNsaWNlKG5vZGVJZHggKyAxKS5maW5kKGZ1bmN0aW9uIChuKSB7XG4gICAgICAgICAgICAgIHJldHVybiBpc1RhYmJhYmxlKG4sIGNvbmZpZy50YWJiYWJsZU9wdGlvbnMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGZvY3VzYWJsZU5vZGVzLnNsaWNlKDAsIG5vZGVJZHgpLnJldmVyc2UoKS5maW5kKGZ1bmN0aW9uIChuKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNUYWJiYWJsZShuLCBjb25maWcudGFiYmFibGVPcHRpb25zKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KTtcbiAgICBzdGF0ZS50YWJiYWJsZUdyb3VwcyA9IHN0YXRlLmNvbnRhaW5lckdyb3Vwcy5maWx0ZXIoZnVuY3Rpb24gKGdyb3VwKSB7XG4gICAgICByZXR1cm4gZ3JvdXAudGFiYmFibGVOb2Rlcy5sZW5ndGggPiAwO1xuICAgIH0pOyAvLyB0aHJvdyBpZiBubyBncm91cHMgaGF2ZSB0YWJiYWJsZSBub2RlcyBhbmQgd2UgZG9uJ3QgaGF2ZSBhIGZhbGxiYWNrIGZvY3VzIG5vZGUgZWl0aGVyXG5cbiAgICBpZiAoc3RhdGUudGFiYmFibGVHcm91cHMubGVuZ3RoIDw9IDAgJiYgIWdldE5vZGVGb3JPcHRpb24oJ2ZhbGxiYWNrRm9jdXMnKSAvLyByZXR1cm5pbmcgZmFsc2Ugbm90IHN1cHBvcnRlZCBmb3IgdGhpcyBvcHRpb25cbiAgICApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91ciBmb2N1cy10cmFwIG11c3QgaGF2ZSBhdCBsZWFzdCBvbmUgY29udGFpbmVyIHdpdGggYXQgbGVhc3Qgb25lIHRhYmJhYmxlIG5vZGUgaW4gaXQgYXQgYWxsIHRpbWVzJyk7XG4gICAgfVxuICB9O1xuXG4gIHZhciB0cnlGb2N1cyA9IGZ1bmN0aW9uIHRyeUZvY3VzKG5vZGUpIHtcbiAgICBpZiAobm9kZSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAobm9kZSA9PT0gZG9jLmFjdGl2ZUVsZW1lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIW5vZGUgfHwgIW5vZGUuZm9jdXMpIHtcbiAgICAgIHRyeUZvY3VzKGdldEluaXRpYWxGb2N1c05vZGUoKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbm9kZS5mb2N1cyh7XG4gICAgICBwcmV2ZW50U2Nyb2xsOiAhIWNvbmZpZy5wcmV2ZW50U2Nyb2xsXG4gICAgfSk7XG4gICAgc3RhdGUubW9zdFJlY2VudGx5Rm9jdXNlZE5vZGUgPSBub2RlO1xuXG4gICAgaWYgKGlzU2VsZWN0YWJsZUlucHV0KG5vZGUpKSB7XG4gICAgICBub2RlLnNlbGVjdCgpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgZ2V0UmV0dXJuRm9jdXNOb2RlID0gZnVuY3Rpb24gZ2V0UmV0dXJuRm9jdXNOb2RlKHByZXZpb3VzQWN0aXZlRWxlbWVudCkge1xuICAgIHZhciBub2RlID0gZ2V0Tm9kZUZvck9wdGlvbignc2V0UmV0dXJuRm9jdXMnLCBwcmV2aW91c0FjdGl2ZUVsZW1lbnQpO1xuICAgIHJldHVybiBub2RlID8gbm9kZSA6IG5vZGUgPT09IGZhbHNlID8gZmFsc2UgOiBwcmV2aW91c0FjdGl2ZUVsZW1lbnQ7XG4gIH07IC8vIFRoaXMgbmVlZHMgdG8gYmUgZG9uZSBvbiBtb3VzZWRvd24gYW5kIHRvdWNoc3RhcnQgaW5zdGVhZCBvZiBjbGlja1xuICAvLyBzbyB0aGF0IGl0IHByZWNlZGVzIHRoZSBmb2N1cyBldmVudC5cblxuXG4gIHZhciBjaGVja1BvaW50ZXJEb3duID0gZnVuY3Rpb24gY2hlY2tQb2ludGVyRG93bihlKSB7XG4gICAgdmFyIHRhcmdldCA9IGdldEFjdHVhbFRhcmdldChlKTtcblxuICAgIGlmIChmaW5kQ29udGFpbmVySW5kZXgodGFyZ2V0KSA+PSAwKSB7XG4gICAgICAvLyBhbGxvdyB0aGUgY2xpY2sgc2luY2UgaXQgb2N1cnJlZCBpbnNpZGUgdGhlIHRyYXBcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodmFsdWVPckhhbmRsZXIoY29uZmlnLmNsaWNrT3V0c2lkZURlYWN0aXZhdGVzLCBlKSkge1xuICAgICAgLy8gaW1tZWRpYXRlbHkgZGVhY3RpdmF0ZSB0aGUgdHJhcFxuICAgICAgdHJhcC5kZWFjdGl2YXRlKHtcbiAgICAgICAgLy8gaWYsIG9uIGRlYWN0aXZhdGlvbiwgd2Ugc2hvdWxkIHJldHVybiBmb2N1cyB0byB0aGUgbm9kZSBvcmlnaW5hbGx5LWZvY3VzZWRcbiAgICAgICAgLy8gIHdoZW4gdGhlIHRyYXAgd2FzIGFjdGl2YXRlZCAob3IgdGhlIGNvbmZpZ3VyZWQgYHNldFJldHVybkZvY3VzYCBub2RlKSxcbiAgICAgICAgLy8gIHRoZW4gYXNzdW1lIGl0J3MgYWxzbyBPSyB0byByZXR1cm4gZm9jdXMgdG8gdGhlIG91dHNpZGUgbm9kZSB0aGF0IHdhc1xuICAgICAgICAvLyAganVzdCBjbGlja2VkLCBjYXVzaW5nIGRlYWN0aXZhdGlvbiwgYXMgbG9uZyBhcyB0aGF0IG5vZGUgaXMgZm9jdXNhYmxlO1xuICAgICAgICAvLyAgaWYgaXQgaXNuJ3QgZm9jdXNhYmxlLCB0aGVuIHJldHVybiBmb2N1cyB0byB0aGUgb3JpZ2luYWwgbm9kZSBmb2N1c2VkXG4gICAgICAgIC8vICBvbiBhY3RpdmF0aW9uIChvciB0aGUgY29uZmlndXJlZCBgc2V0UmV0dXJuRm9jdXNgIG5vZGUpXG4gICAgICAgIC8vIE5PVEU6IGJ5IHNldHRpbmcgYHJldHVybkZvY3VzOiBmYWxzZWAsIGRlYWN0aXZhdGUoKSB3aWxsIGRvIG5vdGhpbmcsXG4gICAgICAgIC8vICB3aGljaCB3aWxsIHJlc3VsdCBpbiB0aGUgb3V0c2lkZSBjbGljayBzZXR0aW5nIGZvY3VzIHRvIHRoZSBub2RlXG4gICAgICAgIC8vICB0aGF0IHdhcyBjbGlja2VkLCB3aGV0aGVyIGl0J3MgZm9jdXNhYmxlIG9yIG5vdDsgYnkgc2V0dGluZ1xuICAgICAgICAvLyAgYHJldHVybkZvY3VzOiB0cnVlYCwgd2UnbGwgYXR0ZW1wdCB0byByZS1mb2N1cyB0aGUgbm9kZSBvcmlnaW5hbGx5LWZvY3VzZWRcbiAgICAgICAgLy8gIG9uIGFjdGl2YXRpb24gKG9yIHRoZSBjb25maWd1cmVkIGBzZXRSZXR1cm5Gb2N1c2Agbm9kZSlcbiAgICAgICAgcmV0dXJuRm9jdXM6IGNvbmZpZy5yZXR1cm5Gb2N1c09uRGVhY3RpdmF0ZSAmJiAhaXNGb2N1c2FibGUodGFyZ2V0LCBjb25maWcudGFiYmFibGVPcHRpb25zKVxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBUaGlzIGlzIG5lZWRlZCBmb3IgbW9iaWxlIGRldmljZXMuXG4gICAgLy8gKElmIHdlJ2xsIG9ubHkgbGV0IGBjbGlja2AgZXZlbnRzIHRocm91Z2gsXG4gICAgLy8gdGhlbiBvbiBtb2JpbGUgdGhleSB3aWxsIGJlIGJsb2NrZWQgYW55d2F5cyBpZiBgdG91Y2hzdGFydGAgaXMgYmxvY2tlZC4pXG5cblxuICAgIGlmICh2YWx1ZU9ySGFuZGxlcihjb25maWcuYWxsb3dPdXRzaWRlQ2xpY2ssIGUpKSB7XG4gICAgICAvLyBhbGxvdyB0aGUgY2xpY2sgb3V0c2lkZSB0aGUgdHJhcCB0byB0YWtlIHBsYWNlXG4gICAgICByZXR1cm47XG4gICAgfSAvLyBvdGhlcndpc2UsIHByZXZlbnQgdGhlIGNsaWNrXG5cblxuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgfTsgLy8gSW4gY2FzZSBmb2N1cyBlc2NhcGVzIHRoZSB0cmFwIGZvciBzb21lIHN0cmFuZ2UgcmVhc29uLCBwdWxsIGl0IGJhY2sgaW4uXG5cblxuICB2YXIgY2hlY2tGb2N1c0luID0gZnVuY3Rpb24gY2hlY2tGb2N1c0luKGUpIHtcbiAgICB2YXIgdGFyZ2V0ID0gZ2V0QWN0dWFsVGFyZ2V0KGUpO1xuICAgIHZhciB0YXJnZXRDb250YWluZWQgPSBmaW5kQ29udGFpbmVySW5kZXgodGFyZ2V0KSA+PSAwOyAvLyBJbiBGaXJlZm94IHdoZW4geW91IFRhYiBvdXQgb2YgYW4gaWZyYW1lIHRoZSBEb2N1bWVudCBpcyBicmllZmx5IGZvY3VzZWQuXG5cbiAgICBpZiAodGFyZ2V0Q29udGFpbmVkIHx8IHRhcmdldCBpbnN0YW5jZW9mIERvY3VtZW50KSB7XG4gICAgICBpZiAodGFyZ2V0Q29udGFpbmVkKSB7XG4gICAgICAgIHN0YXRlLm1vc3RSZWNlbnRseUZvY3VzZWROb2RlID0gdGFyZ2V0O1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlc2NhcGVkISBwdWxsIGl0IGJhY2sgaW4gdG8gd2hlcmUgaXQganVzdCBsZWZ0XG4gICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgdHJ5Rm9jdXMoc3RhdGUubW9zdFJlY2VudGx5Rm9jdXNlZE5vZGUgfHwgZ2V0SW5pdGlhbEZvY3VzTm9kZSgpKTtcbiAgICB9XG4gIH07IC8vIEhpamFjayBUYWIgZXZlbnRzIG9uIHRoZSBmaXJzdCBhbmQgbGFzdCBmb2N1c2FibGUgbm9kZXMgb2YgdGhlIHRyYXAsXG4gIC8vIGluIG9yZGVyIHRvIHByZXZlbnQgZm9jdXMgZnJvbSBlc2NhcGluZy4gSWYgaXQgZXNjYXBlcyBmb3IgZXZlbiBhXG4gIC8vIG1vbWVudCBpdCBjYW4gZW5kIHVwIHNjcm9sbGluZyB0aGUgcGFnZSBhbmQgY2F1c2luZyBjb25mdXNpb24gc28gd2VcbiAgLy8ga2luZCBvZiBuZWVkIHRvIGNhcHR1cmUgdGhlIGFjdGlvbiBhdCB0aGUga2V5ZG93biBwaGFzZS5cblxuXG4gIHZhciBjaGVja1RhYiA9IGZ1bmN0aW9uIGNoZWNrVGFiKGUpIHtcbiAgICB2YXIgdGFyZ2V0ID0gZ2V0QWN0dWFsVGFyZ2V0KGUpO1xuICAgIHVwZGF0ZVRhYmJhYmxlTm9kZXMoKTtcbiAgICB2YXIgZGVzdGluYXRpb25Ob2RlID0gbnVsbDtcblxuICAgIGlmIChzdGF0ZS50YWJiYWJsZUdyb3Vwcy5sZW5ndGggPiAwKSB7XG4gICAgICAvLyBtYWtlIHN1cmUgdGhlIHRhcmdldCBpcyBhY3R1YWxseSBjb250YWluZWQgaW4gYSBncm91cFxuICAgICAgLy8gTk9URTogdGhlIHRhcmdldCBtYXkgYWxzbyBiZSB0aGUgY29udGFpbmVyIGl0c2VsZiBpZiBpdCdzIGZvY3VzYWJsZVxuICAgICAgLy8gIHdpdGggdGFiSW5kZXg9Jy0xJyBhbmQgd2FzIGdpdmVuIGluaXRpYWwgZm9jdXNcbiAgICAgIHZhciBjb250YWluZXJJbmRleCA9IGZpbmRDb250YWluZXJJbmRleCh0YXJnZXQpO1xuICAgICAgdmFyIGNvbnRhaW5lckdyb3VwID0gY29udGFpbmVySW5kZXggPj0gMCA/IHN0YXRlLmNvbnRhaW5lckdyb3Vwc1tjb250YWluZXJJbmRleF0gOiB1bmRlZmluZWQ7XG5cbiAgICAgIGlmIChjb250YWluZXJJbmRleCA8IDApIHtcbiAgICAgICAgLy8gdGFyZ2V0IG5vdCBmb3VuZCBpbiBhbnkgZ3JvdXA6IHF1aXRlIHBvc3NpYmxlIGZvY3VzIGhhcyBlc2NhcGVkIHRoZSB0cmFwLFxuICAgICAgICAvLyAgc28gYnJpbmcgaXQgYmFjayBpbiB0by4uLlxuICAgICAgICBpZiAoZS5zaGlmdEtleSkge1xuICAgICAgICAgIC8vIC4uLnRoZSBsYXN0IG5vZGUgaW4gdGhlIGxhc3QgZ3JvdXBcbiAgICAgICAgICBkZXN0aW5hdGlvbk5vZGUgPSBzdGF0ZS50YWJiYWJsZUdyb3Vwc1tzdGF0ZS50YWJiYWJsZUdyb3Vwcy5sZW5ndGggLSAxXS5sYXN0VGFiYmFibGVOb2RlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIC4uLnRoZSBmaXJzdCBub2RlIGluIHRoZSBmaXJzdCBncm91cFxuICAgICAgICAgIGRlc3RpbmF0aW9uTm9kZSA9IHN0YXRlLnRhYmJhYmxlR3JvdXBzWzBdLmZpcnN0VGFiYmFibGVOb2RlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGUuc2hpZnRLZXkpIHtcbiAgICAgICAgLy8gUkVWRVJTRVxuICAgICAgICAvLyBpcyB0aGUgdGFyZ2V0IHRoZSBmaXJzdCB0YWJiYWJsZSBub2RlIGluIGEgZ3JvdXA/XG4gICAgICAgIHZhciBzdGFydE9mR3JvdXBJbmRleCA9IGZpbmRJbmRleChzdGF0ZS50YWJiYWJsZUdyb3VwcywgZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgICAgICAgdmFyIGZpcnN0VGFiYmFibGVOb2RlID0gX3JlZjIuZmlyc3RUYWJiYWJsZU5vZGU7XG4gICAgICAgICAgcmV0dXJuIHRhcmdldCA9PT0gZmlyc3RUYWJiYWJsZU5vZGU7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChzdGFydE9mR3JvdXBJbmRleCA8IDAgJiYgKGNvbnRhaW5lckdyb3VwLmNvbnRhaW5lciA9PT0gdGFyZ2V0IHx8IGlzRm9jdXNhYmxlKHRhcmdldCwgY29uZmlnLnRhYmJhYmxlT3B0aW9ucykgJiYgIWlzVGFiYmFibGUodGFyZ2V0LCBjb25maWcudGFiYmFibGVPcHRpb25zKSAmJiAhY29udGFpbmVyR3JvdXAubmV4dFRhYmJhYmxlTm9kZSh0YXJnZXQsIGZhbHNlKSkpIHtcbiAgICAgICAgICAvLyBhbiBleGNlcHRpb24gY2FzZSB3aGVyZSB0aGUgdGFyZ2V0IGlzIGVpdGhlciB0aGUgY29udGFpbmVyIGl0c2VsZiwgb3JcbiAgICAgICAgICAvLyAgYSBub24tdGFiYmFibGUgbm9kZSB0aGF0IHdhcyBnaXZlbiBmb2N1cyAoaS5lLiB0YWJpbmRleCBpcyBuZWdhdGl2ZVxuICAgICAgICAgIC8vICBhbmQgdXNlciBjbGlja2VkIG9uIGl0IG9yIG5vZGUgd2FzIHByb2dyYW1tYXRpY2FsbHkgZ2l2ZW4gZm9jdXMpXG4gICAgICAgICAgLy8gIGFuZCBpcyBub3QgZm9sbG93ZWQgYnkgYW55IG90aGVyIHRhYmJhYmxlIG5vZGUsIGluIHdoaWNoXG4gICAgICAgICAgLy8gIGNhc2UsIHdlIHNob3VsZCBoYW5kbGUgc2hpZnQrdGFiIGFzIGlmIGZvY3VzIHdlcmUgb24gdGhlIGNvbnRhaW5lcidzXG4gICAgICAgICAgLy8gIGZpcnN0IHRhYmJhYmxlIG5vZGUsIGFuZCBnbyB0byB0aGUgbGFzdCB0YWJiYWJsZSBub2RlIG9mIHRoZSBMQVNUIGdyb3VwXG4gICAgICAgICAgc3RhcnRPZkdyb3VwSW5kZXggPSBjb250YWluZXJJbmRleDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdGFydE9mR3JvdXBJbmRleCA+PSAwKSB7XG4gICAgICAgICAgLy8gWUVTOiB0aGVuIHNoaWZ0K3RhYiBzaG91bGQgZ28gdG8gdGhlIGxhc3QgdGFiYmFibGUgbm9kZSBpbiB0aGVcbiAgICAgICAgICAvLyAgcHJldmlvdXMgZ3JvdXAgKGFuZCB3cmFwIGFyb3VuZCB0byB0aGUgbGFzdCB0YWJiYWJsZSBub2RlIG9mXG4gICAgICAgICAgLy8gIHRoZSBMQVNUIGdyb3VwIGlmIGl0J3MgdGhlIGZpcnN0IHRhYmJhYmxlIG5vZGUgb2YgdGhlIEZJUlNUIGdyb3VwKVxuICAgICAgICAgIHZhciBkZXN0aW5hdGlvbkdyb3VwSW5kZXggPSBzdGFydE9mR3JvdXBJbmRleCA9PT0gMCA/IHN0YXRlLnRhYmJhYmxlR3JvdXBzLmxlbmd0aCAtIDEgOiBzdGFydE9mR3JvdXBJbmRleCAtIDE7XG4gICAgICAgICAgdmFyIGRlc3RpbmF0aW9uR3JvdXAgPSBzdGF0ZS50YWJiYWJsZUdyb3Vwc1tkZXN0aW5hdGlvbkdyb3VwSW5kZXhdO1xuICAgICAgICAgIGRlc3RpbmF0aW9uTm9kZSA9IGRlc3RpbmF0aW9uR3JvdXAubGFzdFRhYmJhYmxlTm9kZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRk9SV0FSRFxuICAgICAgICAvLyBpcyB0aGUgdGFyZ2V0IHRoZSBsYXN0IHRhYmJhYmxlIG5vZGUgaW4gYSBncm91cD9cbiAgICAgICAgdmFyIGxhc3RPZkdyb3VwSW5kZXggPSBmaW5kSW5kZXgoc3RhdGUudGFiYmFibGVHcm91cHMsIGZ1bmN0aW9uIChfcmVmMykge1xuICAgICAgICAgIHZhciBsYXN0VGFiYmFibGVOb2RlID0gX3JlZjMubGFzdFRhYmJhYmxlTm9kZTtcbiAgICAgICAgICByZXR1cm4gdGFyZ2V0ID09PSBsYXN0VGFiYmFibGVOb2RlO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAobGFzdE9mR3JvdXBJbmRleCA8IDAgJiYgKGNvbnRhaW5lckdyb3VwLmNvbnRhaW5lciA9PT0gdGFyZ2V0IHx8IGlzRm9jdXNhYmxlKHRhcmdldCwgY29uZmlnLnRhYmJhYmxlT3B0aW9ucykgJiYgIWlzVGFiYmFibGUodGFyZ2V0LCBjb25maWcudGFiYmFibGVPcHRpb25zKSAmJiAhY29udGFpbmVyR3JvdXAubmV4dFRhYmJhYmxlTm9kZSh0YXJnZXQpKSkge1xuICAgICAgICAgIC8vIGFuIGV4Y2VwdGlvbiBjYXNlIHdoZXJlIHRoZSB0YXJnZXQgaXMgdGhlIGNvbnRhaW5lciBpdHNlbGYsIG9yXG4gICAgICAgICAgLy8gIGEgbm9uLXRhYmJhYmxlIG5vZGUgdGhhdCB3YXMgZ2l2ZW4gZm9jdXMgKGkuZS4gdGFiaW5kZXggaXMgbmVnYXRpdmVcbiAgICAgICAgICAvLyAgYW5kIHVzZXIgY2xpY2tlZCBvbiBpdCBvciBub2RlIHdhcyBwcm9ncmFtbWF0aWNhbGx5IGdpdmVuIGZvY3VzKVxuICAgICAgICAgIC8vICBhbmQgaXMgbm90IGZvbGxvd2VkIGJ5IGFueSBvdGhlciB0YWJiYWJsZSBub2RlLCBpbiB3aGljaFxuICAgICAgICAgIC8vICBjYXNlLCB3ZSBzaG91bGQgaGFuZGxlIHRhYiBhcyBpZiBmb2N1cyB3ZXJlIG9uIHRoZSBjb250YWluZXInc1xuICAgICAgICAgIC8vICBsYXN0IHRhYmJhYmxlIG5vZGUsIGFuZCBnbyB0byB0aGUgZmlyc3QgdGFiYmFibGUgbm9kZSBvZiB0aGUgRklSU1QgZ3JvdXBcbiAgICAgICAgICBsYXN0T2ZHcm91cEluZGV4ID0gY29udGFpbmVySW5kZXg7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGFzdE9mR3JvdXBJbmRleCA+PSAwKSB7XG4gICAgICAgICAgLy8gWUVTOiB0aGVuIHRhYiBzaG91bGQgZ28gdG8gdGhlIGZpcnN0IHRhYmJhYmxlIG5vZGUgaW4gdGhlIG5leHRcbiAgICAgICAgICAvLyAgZ3JvdXAgKGFuZCB3cmFwIGFyb3VuZCB0byB0aGUgZmlyc3QgdGFiYmFibGUgbm9kZSBvZiB0aGUgRklSU1RcbiAgICAgICAgICAvLyAgZ3JvdXAgaWYgaXQncyB0aGUgbGFzdCB0YWJiYWJsZSBub2RlIG9mIHRoZSBMQVNUIGdyb3VwKVxuICAgICAgICAgIHZhciBfZGVzdGluYXRpb25Hcm91cEluZGV4ID0gbGFzdE9mR3JvdXBJbmRleCA9PT0gc3RhdGUudGFiYmFibGVHcm91cHMubGVuZ3RoIC0gMSA/IDAgOiBsYXN0T2ZHcm91cEluZGV4ICsgMTtcblxuICAgICAgICAgIHZhciBfZGVzdGluYXRpb25Hcm91cCA9IHN0YXRlLnRhYmJhYmxlR3JvdXBzW19kZXN0aW5hdGlvbkdyb3VwSW5kZXhdO1xuICAgICAgICAgIGRlc3RpbmF0aW9uTm9kZSA9IF9kZXN0aW5hdGlvbkdyb3VwLmZpcnN0VGFiYmFibGVOb2RlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE5PVEU6IHRoZSBmYWxsYmFja0ZvY3VzIG9wdGlvbiBkb2VzIG5vdCBzdXBwb3J0IHJldHVybmluZyBmYWxzZSB0byBvcHQtb3V0XG4gICAgICBkZXN0aW5hdGlvbk5vZGUgPSBnZXROb2RlRm9yT3B0aW9uKCdmYWxsYmFja0ZvY3VzJyk7XG4gICAgfVxuXG4gICAgaWYgKGRlc3RpbmF0aW9uTm9kZSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdHJ5Rm9jdXMoZGVzdGluYXRpb25Ob2RlKTtcbiAgICB9IC8vIGVsc2UsIGxldCB0aGUgYnJvd3NlciB0YWtlIGNhcmUgb2YgW3NoaWZ0K110YWIgYW5kIG1vdmUgdGhlIGZvY3VzXG5cbiAgfTtcblxuICB2YXIgY2hlY2tLZXkgPSBmdW5jdGlvbiBjaGVja0tleShlKSB7XG4gICAgaWYgKGlzRXNjYXBlRXZlbnQoZSkgJiYgdmFsdWVPckhhbmRsZXIoY29uZmlnLmVzY2FwZURlYWN0aXZhdGVzLCBlKSAhPT0gZmFsc2UpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRyYXAuZGVhY3RpdmF0ZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpc1RhYkV2ZW50KGUpKSB7XG4gICAgICBjaGVja1RhYihlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGNoZWNrQ2xpY2sgPSBmdW5jdGlvbiBjaGVja0NsaWNrKGUpIHtcbiAgICB2YXIgdGFyZ2V0ID0gZ2V0QWN0dWFsVGFyZ2V0KGUpO1xuXG4gICAgaWYgKGZpbmRDb250YWluZXJJbmRleCh0YXJnZXQpID49IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodmFsdWVPckhhbmRsZXIoY29uZmlnLmNsaWNrT3V0c2lkZURlYWN0aXZhdGVzLCBlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh2YWx1ZU9ySGFuZGxlcihjb25maWcuYWxsb3dPdXRzaWRlQ2xpY2ssIGUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gIH07IC8vXG4gIC8vIEVWRU5UIExJU1RFTkVSU1xuICAvL1xuXG5cbiAgdmFyIGFkZExpc3RlbmVycyA9IGZ1bmN0aW9uIGFkZExpc3RlbmVycygpIHtcbiAgICBpZiAoIXN0YXRlLmFjdGl2ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gVGhlcmUgY2FuIGJlIG9ubHkgb25lIGxpc3RlbmluZyBmb2N1cyB0cmFwIGF0IGEgdGltZVxuXG5cbiAgICBhY3RpdmVGb2N1c1RyYXBzLmFjdGl2YXRlVHJhcCh0cmFwKTsgLy8gRGVsYXkgZW5zdXJlcyB0aGF0IHRoZSBmb2N1c2VkIGVsZW1lbnQgZG9lc24ndCBjYXB0dXJlIHRoZSBldmVudFxuICAgIC8vIHRoYXQgY2F1c2VkIHRoZSBmb2N1cyB0cmFwIGFjdGl2YXRpb24uXG5cbiAgICBzdGF0ZS5kZWxheUluaXRpYWxGb2N1c1RpbWVyID0gY29uZmlnLmRlbGF5SW5pdGlhbEZvY3VzID8gZGVsYXkoZnVuY3Rpb24gKCkge1xuICAgICAgdHJ5Rm9jdXMoZ2V0SW5pdGlhbEZvY3VzTm9kZSgpKTtcbiAgICB9KSA6IHRyeUZvY3VzKGdldEluaXRpYWxGb2N1c05vZGUoKSk7XG4gICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzaW4nLCBjaGVja0ZvY3VzSW4sIHRydWUpO1xuICAgIGRvYy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBjaGVja1BvaW50ZXJEb3duLCB7XG4gICAgICBjYXB0dXJlOiB0cnVlLFxuICAgICAgcGFzc2l2ZTogZmFsc2VcbiAgICB9KTtcbiAgICBkb2MuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIGNoZWNrUG9pbnRlckRvd24sIHtcbiAgICAgIGNhcHR1cmU6IHRydWUsXG4gICAgICBwYXNzaXZlOiBmYWxzZVxuICAgIH0pO1xuICAgIGRvYy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGNoZWNrQ2xpY2ssIHtcbiAgICAgIGNhcHR1cmU6IHRydWUsXG4gICAgICBwYXNzaXZlOiBmYWxzZVxuICAgIH0pO1xuICAgIGRvYy5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgY2hlY2tLZXksIHtcbiAgICAgIGNhcHR1cmU6IHRydWUsXG4gICAgICBwYXNzaXZlOiBmYWxzZVxuICAgIH0pO1xuICAgIHJldHVybiB0cmFwO1xuICB9O1xuXG4gIHZhciByZW1vdmVMaXN0ZW5lcnMgPSBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcnMoKSB7XG4gICAgaWYgKCFzdGF0ZS5hY3RpdmUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcignZm9jdXNpbicsIGNoZWNrRm9jdXNJbiwgdHJ1ZSk7XG4gICAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGNoZWNrUG9pbnRlckRvd24sIHRydWUpO1xuICAgIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgY2hlY2tQb2ludGVyRG93biwgdHJ1ZSk7XG4gICAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgY2hlY2tDbGljaywgdHJ1ZSk7XG4gICAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBjaGVja0tleSwgdHJ1ZSk7XG4gICAgcmV0dXJuIHRyYXA7XG4gIH07IC8vXG4gIC8vIFRSQVAgREVGSU5JVElPTlxuICAvL1xuXG5cbiAgdHJhcCA9IHtcbiAgICBnZXQgYWN0aXZlKCkge1xuICAgICAgcmV0dXJuIHN0YXRlLmFjdGl2ZTtcbiAgICB9LFxuXG4gICAgZ2V0IHBhdXNlZCgpIHtcbiAgICAgIHJldHVybiBzdGF0ZS5wYXVzZWQ7XG4gICAgfSxcblxuICAgIGFjdGl2YXRlOiBmdW5jdGlvbiBhY3RpdmF0ZShhY3RpdmF0ZU9wdGlvbnMpIHtcbiAgICAgIGlmIChzdGF0ZS5hY3RpdmUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHZhciBvbkFjdGl2YXRlID0gZ2V0T3B0aW9uKGFjdGl2YXRlT3B0aW9ucywgJ29uQWN0aXZhdGUnKTtcbiAgICAgIHZhciBvblBvc3RBY3RpdmF0ZSA9IGdldE9wdGlvbihhY3RpdmF0ZU9wdGlvbnMsICdvblBvc3RBY3RpdmF0ZScpO1xuICAgICAgdmFyIGNoZWNrQ2FuRm9jdXNUcmFwID0gZ2V0T3B0aW9uKGFjdGl2YXRlT3B0aW9ucywgJ2NoZWNrQ2FuRm9jdXNUcmFwJyk7XG5cbiAgICAgIGlmICghY2hlY2tDYW5Gb2N1c1RyYXApIHtcbiAgICAgICAgdXBkYXRlVGFiYmFibGVOb2RlcygpO1xuICAgICAgfVxuXG4gICAgICBzdGF0ZS5hY3RpdmUgPSB0cnVlO1xuICAgICAgc3RhdGUucGF1c2VkID0gZmFsc2U7XG4gICAgICBzdGF0ZS5ub2RlRm9jdXNlZEJlZm9yZUFjdGl2YXRpb24gPSBkb2MuYWN0aXZlRWxlbWVudDtcblxuICAgICAgaWYgKG9uQWN0aXZhdGUpIHtcbiAgICAgICAgb25BY3RpdmF0ZSgpO1xuICAgICAgfVxuXG4gICAgICB2YXIgZmluaXNoQWN0aXZhdGlvbiA9IGZ1bmN0aW9uIGZpbmlzaEFjdGl2YXRpb24oKSB7XG4gICAgICAgIGlmIChjaGVja0NhbkZvY3VzVHJhcCkge1xuICAgICAgICAgIHVwZGF0ZVRhYmJhYmxlTm9kZXMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFkZExpc3RlbmVycygpO1xuXG4gICAgICAgIGlmIChvblBvc3RBY3RpdmF0ZSkge1xuICAgICAgICAgIG9uUG9zdEFjdGl2YXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGlmIChjaGVja0NhbkZvY3VzVHJhcCkge1xuICAgICAgICBjaGVja0NhbkZvY3VzVHJhcChzdGF0ZS5jb250YWluZXJzLmNvbmNhdCgpKS50aGVuKGZpbmlzaEFjdGl2YXRpb24sIGZpbmlzaEFjdGl2YXRpb24pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgZmluaXNoQWN0aXZhdGlvbigpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBkZWFjdGl2YXRlOiBmdW5jdGlvbiBkZWFjdGl2YXRlKGRlYWN0aXZhdGVPcHRpb25zKSB7XG4gICAgICBpZiAoIXN0YXRlLmFjdGl2ZSkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgdmFyIG9wdGlvbnMgPSBfb2JqZWN0U3ByZWFkMih7XG4gICAgICAgIG9uRGVhY3RpdmF0ZTogY29uZmlnLm9uRGVhY3RpdmF0ZSxcbiAgICAgICAgb25Qb3N0RGVhY3RpdmF0ZTogY29uZmlnLm9uUG9zdERlYWN0aXZhdGUsXG4gICAgICAgIGNoZWNrQ2FuUmV0dXJuRm9jdXM6IGNvbmZpZy5jaGVja0NhblJldHVybkZvY3VzXG4gICAgICB9LCBkZWFjdGl2YXRlT3B0aW9ucyk7XG5cbiAgICAgIGNsZWFyVGltZW91dChzdGF0ZS5kZWxheUluaXRpYWxGb2N1c1RpbWVyKTsgLy8gbm9vcCBpZiB1bmRlZmluZWRcblxuICAgICAgc3RhdGUuZGVsYXlJbml0aWFsRm9jdXNUaW1lciA9IHVuZGVmaW5lZDtcbiAgICAgIHJlbW92ZUxpc3RlbmVycygpO1xuICAgICAgc3RhdGUuYWN0aXZlID0gZmFsc2U7XG4gICAgICBzdGF0ZS5wYXVzZWQgPSBmYWxzZTtcbiAgICAgIGFjdGl2ZUZvY3VzVHJhcHMuZGVhY3RpdmF0ZVRyYXAodHJhcCk7XG4gICAgICB2YXIgb25EZWFjdGl2YXRlID0gZ2V0T3B0aW9uKG9wdGlvbnMsICdvbkRlYWN0aXZhdGUnKTtcbiAgICAgIHZhciBvblBvc3REZWFjdGl2YXRlID0gZ2V0T3B0aW9uKG9wdGlvbnMsICdvblBvc3REZWFjdGl2YXRlJyk7XG4gICAgICB2YXIgY2hlY2tDYW5SZXR1cm5Gb2N1cyA9IGdldE9wdGlvbihvcHRpb25zLCAnY2hlY2tDYW5SZXR1cm5Gb2N1cycpO1xuICAgICAgdmFyIHJldHVybkZvY3VzID0gZ2V0T3B0aW9uKG9wdGlvbnMsICdyZXR1cm5Gb2N1cycsICdyZXR1cm5Gb2N1c09uRGVhY3RpdmF0ZScpO1xuXG4gICAgICBpZiAob25EZWFjdGl2YXRlKSB7XG4gICAgICAgIG9uRGVhY3RpdmF0ZSgpO1xuICAgICAgfVxuXG4gICAgICB2YXIgZmluaXNoRGVhY3RpdmF0aW9uID0gZnVuY3Rpb24gZmluaXNoRGVhY3RpdmF0aW9uKCkge1xuICAgICAgICBkZWxheShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKHJldHVybkZvY3VzKSB7XG4gICAgICAgICAgICB0cnlGb2N1cyhnZXRSZXR1cm5Gb2N1c05vZGUoc3RhdGUubm9kZUZvY3VzZWRCZWZvcmVBY3RpdmF0aW9uKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKG9uUG9zdERlYWN0aXZhdGUpIHtcbiAgICAgICAgICAgIG9uUG9zdERlYWN0aXZhdGUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgaWYgKHJldHVybkZvY3VzICYmIGNoZWNrQ2FuUmV0dXJuRm9jdXMpIHtcbiAgICAgICAgY2hlY2tDYW5SZXR1cm5Gb2N1cyhnZXRSZXR1cm5Gb2N1c05vZGUoc3RhdGUubm9kZUZvY3VzZWRCZWZvcmVBY3RpdmF0aW9uKSkudGhlbihmaW5pc2hEZWFjdGl2YXRpb24sIGZpbmlzaERlYWN0aXZhdGlvbik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICBmaW5pc2hEZWFjdGl2YXRpb24oKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgcGF1c2U6IGZ1bmN0aW9uIHBhdXNlKCkge1xuICAgICAgaWYgKHN0YXRlLnBhdXNlZCB8fCAhc3RhdGUuYWN0aXZlKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICBzdGF0ZS5wYXVzZWQgPSB0cnVlO1xuICAgICAgcmVtb3ZlTGlzdGVuZXJzKCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIHVucGF1c2U6IGZ1bmN0aW9uIHVucGF1c2UoKSB7XG4gICAgICBpZiAoIXN0YXRlLnBhdXNlZCB8fCAhc3RhdGUuYWN0aXZlKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICBzdGF0ZS5wYXVzZWQgPSBmYWxzZTtcbiAgICAgIHVwZGF0ZVRhYmJhYmxlTm9kZXMoKTtcbiAgICAgIGFkZExpc3RlbmVycygpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICB1cGRhdGVDb250YWluZXJFbGVtZW50czogZnVuY3Rpb24gdXBkYXRlQ29udGFpbmVyRWxlbWVudHMoY29udGFpbmVyRWxlbWVudHMpIHtcbiAgICAgIHZhciBlbGVtZW50c0FzQXJyYXkgPSBbXS5jb25jYXQoY29udGFpbmVyRWxlbWVudHMpLmZpbHRlcihCb29sZWFuKTtcbiAgICAgIHN0YXRlLmNvbnRhaW5lcnMgPSBlbGVtZW50c0FzQXJyYXkubWFwKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgZWxlbWVudCA9PT0gJ3N0cmluZycgPyBkb2MucXVlcnlTZWxlY3RvcihlbGVtZW50KSA6IGVsZW1lbnQ7XG4gICAgICB9KTtcblxuICAgICAgaWYgKHN0YXRlLmFjdGl2ZSkge1xuICAgICAgICB1cGRhdGVUYWJiYWJsZU5vZGVzKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfTsgLy8gaW5pdGlhbGl6ZSBjb250YWluZXIgZWxlbWVudHNcblxuICB0cmFwLnVwZGF0ZUNvbnRhaW5lckVsZW1lbnRzKGVsZW1lbnRzKTtcbiAgcmV0dXJuIHRyYXA7XG59O1xuXG5leHBvcnQgeyBjcmVhdGVGb2N1c1RyYXAgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZvY3VzLXRyYXAuZXNtLmpzLm1hcFxuIiwiJ3VzZSBzdHJpY3QnOyhmdW5jdGlvbigpeyhmdW5jdGlvbigpe2Z1bmN0aW9uIGUoYSl7Zm9yKHZhciBiPVthXTthPWEucGFyZW50Tm9kZXx8YS5ob3N0fHxhLmRlZmF1bHRWaWV3OyliLnB1c2goYSk7cmV0dXJuIGJ9ZnVuY3Rpb24gZihhKXtyZXR1cm4gZnVuY3Rpb24oYil7dmFyIGM9XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBiLmdldEF0dHJpYnV0ZT9iLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpfHxcIlwiOnZvaWQgMDtcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJi0xPT09Yy5pbmRleE9mKGEpJiZiLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsYy5jb25jYXQoXCIgXCIsYSkudHJpbSgpKX19ZnVuY3Rpb24gZyhhKXtyZXR1cm4gZnVuY3Rpb24oYil7dmFyIGM9XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBiLmdldEF0dHJpYnV0ZT9iLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpfHxcIlwiOnZvaWQgMDtpZihjKXt2YXIgZD1jLmluZGV4T2YoYSk7MDw9ZCYmKDA9PT1kfHwwPD1oLmluZGV4T2YoYy5jaGFyQXQoZC0xKSkpJiZcbihjPWMucmVwbGFjZShhLFwiXCIpLnRyaW0oKSxcIlwiPT09Yz9iLnJlbW92ZUF0dHJpYnV0ZShcImNsYXNzXCIpOmIuc2V0QXR0cmlidXRlKFwiY2xhc3NcIixjKSl9fX1mdW5jdGlvbiBrKCl7dmFyIGE9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYygpe2I9ITE7XCJibHVyXCI9PT1hLnR5cGUmJkFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGUoYS50YXJnZXQpKS5mb3JFYWNoKGcoXCJmb2N1cy13aXRoaW5cIikpO1wiZm9jdXNcIj09PWEudHlwZSYmQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZShhLnRhcmdldCkpLmZvckVhY2goZihcImZvY3VzLXdpdGhpblwiKSl9aWYoIWIpe3dpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYyk7dmFyIGI9ITB9fTtkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNcIixhLCEwKTtkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiYmx1clwiLGEsITApO2YoXCJqcy1mb2N1cy13aXRoaW5cIikoZG9jdW1lbnQuYm9keSk7cmV0dXJuITB9dmFyIGg9W1wiXFxuXCIsXCJcXHRcIixcIiBcIixcblwiXFxyXCJdO3RyeXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIHdpbmRvdyYmIWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCI6Zm9jdXMtd2l0aGluXCIpfWNhdGNoKGEpe3JldHVybiBrKCl9fSkoKX0pKCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mb2N1cy13aXRoaW4tcG9seWZpbGwuanMubWFwXG4iLCI7KGZ1bmN0aW9uICgkLCB3aW5kb3csIGRvY3VtZW50LCB1bmRlZmluZWQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIEZvdW5kYXRpb24ubGlicy5kcm9wZG93biA9IHtcbiAgICBuYW1lIDogJ2Ryb3Bkb3duJyxcblxuICAgIHZlcnNpb24gOiAnNS41LjMnLFxuXG4gICAgc2V0dGluZ3MgOiB7XG4gICAgICBhY3RpdmVfY2xhc3MgOiAnb3BlbicsXG4gICAgICBkaXNhYmxlZF9jbGFzcyA6ICdkaXNhYmxlZCcsXG4gICAgICBtZWdhX2NsYXNzIDogJ21lZ2EnLFxuICAgICAgYWxpZ24gOiAnYm90dG9tJyxcbiAgICAgIGlzX2hvdmVyIDogZmFsc2UsXG4gICAgICBob3Zlcl90aW1lb3V0IDogMTUwLFxuICAgICAgb3BlbmVkIDogZnVuY3Rpb24gKCkge30sXG4gICAgICBjbG9zZWQgOiBmdW5jdGlvbiAoKSB7fVxuICAgIH0sXG5cbiAgICBpbml0IDogZnVuY3Rpb24gKHNjb3BlLCBtZXRob2QsIG9wdGlvbnMpIHtcbiAgICAgIEZvdW5kYXRpb24uaW5oZXJpdCh0aGlzLCAndGhyb3R0bGUnKTtcblxuICAgICAgJC5leHRlbmQodHJ1ZSwgdGhpcy5zZXR0aW5ncywgbWV0aG9kLCBvcHRpb25zKTtcbiAgICAgIHRoaXMuYmluZGluZ3MobWV0aG9kLCBvcHRpb25zKTtcbiAgICB9LFxuXG4gICAgZXZlbnRzIDogZnVuY3Rpb24gKHNjb3BlKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgICAgUyA9IHNlbGYuUztcblxuICAgICAgUyh0aGlzLnNjb3BlKVxuICAgICAgICAub2ZmKCcuZHJvcGRvd24nKVxuICAgICAgICAub24oJ2NsaWNrLmZuZHRuLmRyb3Bkb3duJywgJ1snICsgdGhpcy5hdHRyX25hbWUoKSArICddJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICB2YXIgc2V0dGluZ3MgPSBTKHRoaXMpLmRhdGEoc2VsZi5hdHRyX25hbWUodHJ1ZSkgKyAnLWluaXQnKSB8fCBzZWxmLnNldHRpbmdzO1xuICAgICAgICAgIGlmICghc2V0dGluZ3MuaXNfaG92ZXIgfHwgTW9kZXJuaXpyLnRvdWNoKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBpZiAoUyh0aGlzKS5wYXJlbnQoJ1tkYXRhLXJldmVhbC1pZF0nKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbGYudG9nZ2xlKCQodGhpcykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLm9uKCdtb3VzZWVudGVyLmZuZHRuLmRyb3Bkb3duJywgJ1snICsgdGhpcy5hdHRyX25hbWUoKSArICddLCBbJyArIHRoaXMuYXR0cl9uYW1lKCkgKyAnLWNvbnRlbnRdJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICB2YXIgJHRoaXMgPSBTKHRoaXMpLFxuICAgICAgICAgICAgICBkcm9wZG93bixcbiAgICAgICAgICAgICAgdGFyZ2V0O1xuXG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHNlbGYudGltZW91dCk7XG5cbiAgICAgICAgICBpZiAoJHRoaXMuZGF0YShzZWxmLmRhdGFfYXR0cigpKSkge1xuICAgICAgICAgICAgZHJvcGRvd24gPSBTKCcjJyArICR0aGlzLmRhdGEoc2VsZi5kYXRhX2F0dHIoKSkpO1xuICAgICAgICAgICAgdGFyZ2V0ID0gJHRoaXM7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRyb3Bkb3duID0gJHRoaXM7XG4gICAgICAgICAgICB0YXJnZXQgPSBTKCdbJyArIHNlbGYuYXR0cl9uYW1lKCkgKyAnPVwiJyArIGRyb3Bkb3duLmF0dHIoJ2lkJykgKyAnXCJdJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHNldHRpbmdzID0gdGFyZ2V0LmRhdGEoc2VsZi5hdHRyX25hbWUodHJ1ZSkgKyAnLWluaXQnKSB8fCBzZWxmLnNldHRpbmdzO1xuXG4gICAgICAgICAgaWYgKFMoZS5jdXJyZW50VGFyZ2V0KS5kYXRhKHNlbGYuZGF0YV9hdHRyKCkpICYmIHNldHRpbmdzLmlzX2hvdmVyKSB7XG4gICAgICAgICAgICBzZWxmLmNsb3NlYWxsLmNhbGwoc2VsZik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNldHRpbmdzLmlzX2hvdmVyKSB7XG4gICAgICAgICAgICBzZWxmLm9wZW4uYXBwbHkoc2VsZiwgW2Ryb3Bkb3duLCB0YXJnZXRdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIC5vbignbW91c2VsZWF2ZS5mbmR0bi5kcm9wZG93bicsICdbJyArIHRoaXMuYXR0cl9uYW1lKCkgKyAnXSwgWycgKyB0aGlzLmF0dHJfbmFtZSgpICsgJy1jb250ZW50XScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgdmFyICR0aGlzID0gUyh0aGlzKTtcbiAgICAgICAgICB2YXIgc2V0dGluZ3M7XG5cbiAgICAgICAgICBpZiAoJHRoaXMuZGF0YShzZWxmLmRhdGFfYXR0cigpKSkge1xuICAgICAgICAgICAgICBzZXR0aW5ncyA9ICR0aGlzLmRhdGEoc2VsZi5kYXRhX2F0dHIodHJ1ZSkgKyAnLWluaXQnKSB8fCBzZWxmLnNldHRpbmdzO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHZhciB0YXJnZXQgICA9IFMoJ1snICsgc2VsZi5hdHRyX25hbWUoKSArICc9XCInICsgUyh0aGlzKS5hdHRyKCdpZCcpICsgJ1wiXScpLFxuICAgICAgICAgICAgICAgICAgc2V0dGluZ3MgPSB0YXJnZXQuZGF0YShzZWxmLmF0dHJfbmFtZSh0cnVlKSArICctaW5pdCcpIHx8IHNlbGYuc2V0dGluZ3M7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2VsZi50aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoJHRoaXMuZGF0YShzZWxmLmRhdGFfYXR0cigpKSkge1xuICAgICAgICAgICAgICBpZiAoc2V0dGluZ3MuaXNfaG92ZXIpIHtcbiAgICAgICAgICAgICAgICBzZWxmLmNsb3NlLmNhbGwoc2VsZiwgUygnIycgKyAkdGhpcy5kYXRhKHNlbGYuZGF0YV9hdHRyKCkpKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmIChzZXR0aW5ncy5pc19ob3Zlcikge1xuICAgICAgICAgICAgICAgIHNlbGYuY2xvc2UuY2FsbChzZWxmLCAkdGhpcyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LmJpbmQodGhpcyksIHNldHRpbmdzLmhvdmVyX3RpbWVvdXQpO1xuICAgICAgICB9KVxuICAgICAgICAub24oJ2NsaWNrLmZuZHRuLmRyb3Bkb3duJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICB2YXIgcGFyZW50ID0gUyhlLnRhcmdldCkuY2xvc2VzdCgnWycgKyBzZWxmLmF0dHJfbmFtZSgpICsgJy1jb250ZW50XScpO1xuICAgICAgICAgIHZhciBsaW5rcyAgPSBwYXJlbnQuZmluZCgnYScpO1xuXG4gICAgICAgICAgaWYgKGxpbmtzLmxlbmd0aCA+IDAgJiYgcGFyZW50LmF0dHIoJ2FyaWEtYXV0b2Nsb3NlJykgIT09ICdmYWxzZScpIHtcbiAgICAgICAgICAgICAgc2VsZi5jbG9zZS5jYWxsKHNlbGYsIFMoJ1snICsgc2VsZi5hdHRyX25hbWUoKSArICctY29udGVudF0nKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGUudGFyZ2V0ICE9PSBkb2N1bWVudCAmJiAhJC5jb250YWlucyhkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIGUudGFyZ2V0KSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChTKGUudGFyZ2V0KS5jbG9zZXN0KCdbJyArIHNlbGYuYXR0cl9uYW1lKCkgKyAnXScpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIShTKGUudGFyZ2V0KS5kYXRhKCdyZXZlYWxJZCcpKSAmJlxuICAgICAgICAgICAgKHBhcmVudC5sZW5ndGggPiAwICYmIChTKGUudGFyZ2V0KS5pcygnWycgKyBzZWxmLmF0dHJfbmFtZSgpICsgJy1jb250ZW50XScpIHx8XG4gICAgICAgICAgICAgICQuY29udGFpbnMocGFyZW50LmZpcnN0KClbMF0sIGUudGFyZ2V0KSkpKSB7XG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHNlbGYuY2xvc2UuY2FsbChzZWxmLCBTKCdbJyArIHNlbGYuYXR0cl9uYW1lKCkgKyAnLWNvbnRlbnRdJykpO1xuICAgICAgICB9KVxuICAgICAgICAub24oJ29wZW5lZC5mbmR0bi5kcm9wZG93bicsICdbJyArIHNlbGYuYXR0cl9uYW1lKCkgKyAnLWNvbnRlbnRdJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHNlbGYuc2V0dGluZ3Mub3BlbmVkLmNhbGwodGhpcyk7XG4gICAgICAgIH0pXG4gICAgICAgIC5vbignY2xvc2VkLmZuZHRuLmRyb3Bkb3duJywgJ1snICsgc2VsZi5hdHRyX25hbWUoKSArICctY29udGVudF0nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc2VsZi5zZXR0aW5ncy5jbG9zZWQuY2FsbCh0aGlzKTtcbiAgICAgICAgfSk7XG5cbiAgICAgIFMod2luZG93KVxuICAgICAgICAub2ZmKCcuZHJvcGRvd24nKVxuICAgICAgICAub24oJ3Jlc2l6ZS5mbmR0bi5kcm9wZG93bicsIHNlbGYudGhyb3R0bGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHNlbGYucmVzaXplLmNhbGwoc2VsZik7XG4gICAgICAgIH0sIDUwKSk7XG5cbiAgICAgIHRoaXMucmVzaXplKCk7XG4gICAgfSxcblxuICAgIGNsb3NlIDogZnVuY3Rpb24gKGRyb3Bkb3duKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICBkcm9wZG93bi5lYWNoKGZ1bmN0aW9uIChpZHgpIHtcbiAgICAgICAgdmFyIG9yaWdpbmFsX3RhcmdldCA9ICQoJ1snICsgc2VsZi5hdHRyX25hbWUoKSArICc9JyArIGRyb3Bkb3duW2lkeF0uaWQgKyAnXScpIHx8ICQoJ2FyaWEtY29udHJvbHM9JyArIGRyb3Bkb3duW2lkeF0uaWQgKyAnXScpO1xuICAgICAgICBvcmlnaW5hbF90YXJnZXQuYXR0cignYXJpYS1leHBhbmRlZCcsICdmYWxzZScpO1xuICAgICAgICBpZiAoc2VsZi5TKHRoaXMpLmhhc0NsYXNzKHNlbGYuc2V0dGluZ3MuYWN0aXZlX2NsYXNzKSkge1xuICAgICAgICAgIHNlbGYuUyh0aGlzKVxuICAgICAgICAgICAgLmNzcyhGb3VuZGF0aW9uLnJ0bCA/ICdyaWdodCcgOiAnbGVmdCcsICctOTk5OTlweCcpXG4gICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAndHJ1ZScpXG4gICAgICAgICAgICAucmVtb3ZlQ2xhc3Moc2VsZi5zZXR0aW5ncy5hY3RpdmVfY2xhc3MpXG4gICAgICAgICAgICAucHJldignWycgKyBzZWxmLmF0dHJfbmFtZSgpICsgJ10nKVxuICAgICAgICAgICAgLnJlbW92ZUNsYXNzKHNlbGYuc2V0dGluZ3MuYWN0aXZlX2NsYXNzKVxuICAgICAgICAgICAgLnJlbW92ZURhdGEoJ3RhcmdldCcpO1xuXG4gICAgICAgICAgc2VsZi5TKHRoaXMpLnRyaWdnZXIoJ2Nsb3NlZC5mbmR0bi5kcm9wZG93bicsIFtkcm9wZG93bl0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGRyb3Bkb3duLnJlbW92ZUNsYXNzKCdmLW9wZW4tJyArIHRoaXMuYXR0cl9uYW1lKHRydWUpKTtcbiAgICB9LFxuXG4gICAgY2xvc2VhbGwgOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAkLmVhY2goc2VsZi5TKCcuZi1vcGVuLScgKyB0aGlzLmF0dHJfbmFtZSh0cnVlKSksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2VsZi5jbG9zZS5jYWxsKHNlbGYsIHNlbGYuUyh0aGlzKSk7XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgb3BlbiA6IGZ1bmN0aW9uIChkcm9wZG93biwgdGFyZ2V0KSB7XG4gICAgICB0aGlzXG4gICAgICAgIC5jc3MoZHJvcGRvd25cbiAgICAgICAgLmFkZENsYXNzKHRoaXMuc2V0dGluZ3MuYWN0aXZlX2NsYXNzKSwgdGFyZ2V0KTtcbiAgICAgIGRyb3Bkb3duLnByZXYoJ1snICsgdGhpcy5hdHRyX25hbWUoKSArICddJykuYWRkQ2xhc3ModGhpcy5zZXR0aW5ncy5hY3RpdmVfY2xhc3MpO1xuICAgICAgZHJvcGRvd24uZGF0YSgndGFyZ2V0JywgdGFyZ2V0LmdldCgwKSkudHJpZ2dlcignb3BlbmVkLmZuZHRuLmRyb3Bkb3duJywgW2Ryb3Bkb3duLCB0YXJnZXRdKTtcbiAgICAgIGRyb3Bkb3duLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG4gICAgICB0YXJnZXQuYXR0cignYXJpYS1leHBhbmRlZCcsICd0cnVlJyk7XG4gICAgICBkcm9wZG93bi5mb2N1cygpO1xuICAgICAgZHJvcGRvd24uYWRkQ2xhc3MoJ2Ytb3Blbi0nICsgdGhpcy5hdHRyX25hbWUodHJ1ZSkpO1xuICAgIH0sXG5cbiAgICBkYXRhX2F0dHIgOiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAodGhpcy5uYW1lc3BhY2UubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gdGhpcy5uYW1lc3BhY2UgKyAnLScgKyB0aGlzLm5hbWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLm5hbWU7XG4gICAgfSxcblxuICAgIHRvZ2dsZSA6IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgIGlmICh0YXJnZXQuaGFzQ2xhc3ModGhpcy5zZXR0aW5ncy5kaXNhYmxlZF9jbGFzcykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGRyb3Bkb3duID0gdGhpcy5TKCcjJyArIHRhcmdldC5kYXRhKHRoaXMuZGF0YV9hdHRyKCkpKTtcbiAgICAgIGlmIChkcm9wZG93bi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgLy8gTm8gZHJvcGRvd24gZm91bmQsIG5vdCBjb250aW51aW5nXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5jbG9zZS5jYWxsKHRoaXMsIHRoaXMuUygnWycgKyB0aGlzLmF0dHJfbmFtZSgpICsgJy1jb250ZW50XScpLm5vdChkcm9wZG93bikpO1xuXG4gICAgICBpZiAoZHJvcGRvd24uaGFzQ2xhc3ModGhpcy5zZXR0aW5ncy5hY3RpdmVfY2xhc3MpKSB7XG4gICAgICAgIHRoaXMuY2xvc2UuY2FsbCh0aGlzLCBkcm9wZG93bik7XG4gICAgICAgIGlmIChkcm9wZG93bi5kYXRhKCd0YXJnZXQnKSAhPT0gdGFyZ2V0LmdldCgwKSkge1xuICAgICAgICAgIHRoaXMub3Blbi5jYWxsKHRoaXMsIGRyb3Bkb3duLCB0YXJnZXQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm9wZW4uY2FsbCh0aGlzLCBkcm9wZG93biwgdGFyZ2V0KTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgcmVzaXplIDogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGRyb3Bkb3duID0gdGhpcy5TKCdbJyArIHRoaXMuYXR0cl9uYW1lKCkgKyAnLWNvbnRlbnRdLm9wZW4nKTtcbiAgICAgIHZhciB0YXJnZXQgPSAkKGRyb3Bkb3duLmRhdGEoXCJ0YXJnZXRcIikpO1xuXG4gICAgICBpZiAoZHJvcGRvd24ubGVuZ3RoICYmIHRhcmdldC5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5jc3MoZHJvcGRvd24sIHRhcmdldCk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIGNzcyA6IGZ1bmN0aW9uIChkcm9wZG93biwgdGFyZ2V0KSB7XG4gICAgICB2YXIgbGVmdF9vZmZzZXQgPSBNYXRoLm1heCgodGFyZ2V0LndpZHRoKCkgLSBkcm9wZG93bi53aWR0aCgpKSAvIDIsIDgpLFxuICAgICAgICAgIHNldHRpbmdzID0gdGFyZ2V0LmRhdGEodGhpcy5hdHRyX25hbWUodHJ1ZSkgKyAnLWluaXQnKSB8fCB0aGlzLnNldHRpbmdzLFxuICAgICAgICAgIHBhcmVudE92ZXJmbG93ID0gZHJvcGRvd24ucGFyZW50KCkuY3NzKCdvdmVyZmxvdy15JykgfHwgZHJvcGRvd24ucGFyZW50KCkuY3NzKCdvdmVyZmxvdycpO1xuXG4gICAgICB0aGlzLmNsZWFyX2lkeCgpO1xuXG5cblxuICAgICAgaWYgKHRoaXMuc21hbGwoKSkge1xuICAgICAgICB2YXIgcCA9IHRoaXMuZGlycy5ib3R0b20uY2FsbChkcm9wZG93biwgdGFyZ2V0LCBzZXR0aW5ncyk7XG5cbiAgICAgICAgZHJvcGRvd24uYXR0cignc3R5bGUnLCAnJykucmVtb3ZlQ2xhc3MoJ2Ryb3AtbGVmdCBkcm9wLXJpZ2h0IGRyb3AtdG9wJykuY3NzKHtcbiAgICAgICAgICBwb3NpdGlvbiA6ICdhYnNvbHV0ZScsXG4gICAgICAgICAgd2lkdGggOiAnOTUlJyxcbiAgICAgICAgICAnbWF4LXdpZHRoJyA6ICdub25lJyxcbiAgICAgICAgICB0b3AgOiBwLnRvcFxuICAgICAgICB9KTtcblxuICAgICAgICBkcm9wZG93bi5jc3MoRm91bmRhdGlvbi5ydGwgPyAncmlnaHQnIDogJ2xlZnQnLCBsZWZ0X29mZnNldCk7XG4gICAgICB9XG4gICAgICAvLyBkZXRlY3QgaWYgZHJvcGRvd24gaXMgaW4gYW4gb3ZlcmZsb3cgY29udGFpbmVyXG4gICAgICBlbHNlIGlmIChwYXJlbnRPdmVyZmxvdyAhPT0gJ3Zpc2libGUnKSB7XG4gICAgICAgIHZhciBvZmZzZXQgPSB0YXJnZXRbMF0ub2Zmc2V0VG9wICsgdGFyZ2V0WzBdLm9mZnNldEhlaWdodDtcblxuICAgICAgICBkcm9wZG93bi5hdHRyKCdzdHlsZScsICcnKS5jc3Moe1xuICAgICAgICAgIHBvc2l0aW9uIDogJ2Fic29sdXRlJyxcbiAgICAgICAgICB0b3AgOiBvZmZzZXRcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZHJvcGRvd24uY3NzKEZvdW5kYXRpb24ucnRsID8gJ3JpZ2h0JyA6ICdsZWZ0JywgbGVmdF9vZmZzZXQpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG5cbiAgICAgICAgdGhpcy5zdHlsZShkcm9wZG93biwgdGFyZ2V0LCBzZXR0aW5ncyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBkcm9wZG93bjtcbiAgICB9LFxuXG4gICAgc3R5bGUgOiBmdW5jdGlvbiAoZHJvcGRvd24sIHRhcmdldCwgc2V0dGluZ3MpIHtcbiAgICAgIHZhciBjc3MgPSAkLmV4dGVuZCh7cG9zaXRpb24gOiAnYWJzb2x1dGUnfSxcbiAgICAgICAgdGhpcy5kaXJzW3NldHRpbmdzLmFsaWduXS5jYWxsKGRyb3Bkb3duLCB0YXJnZXQsIHNldHRpbmdzKSk7XG5cbiAgICAgIGRyb3Bkb3duLmF0dHIoJ3N0eWxlJywgJycpLmNzcyhjc3MpO1xuICAgIH0sXG5cbiAgICAvLyByZXR1cm4gQ1NTIHByb3BlcnR5IG9iamVjdFxuICAgIC8vIGB0aGlzYCBpcyB0aGUgZHJvcGRvd25cbiAgICBkaXJzIDoge1xuICAgICAgLy8gQ2FsY3VsYXRlIHRhcmdldCBvZmZzZXRcbiAgICAgIF9iYXNlIDogZnVuY3Rpb24gKHQsIHMpIHtcbiAgICAgICAgdmFyIG9fcCA9IHRoaXMub2Zmc2V0UGFyZW50KCksXG4gICAgICAgICAgICBvID0gb19wLm9mZnNldCgpLFxuICAgICAgICAgICAgcCA9IHQub2Zmc2V0KCk7XG5cbiAgICAgICAgcC50b3AgLT0gby50b3A7XG4gICAgICAgIHAubGVmdCAtPSBvLmxlZnQ7XG5cbiAgICAgICAgLy9zZXQgc29tZSBmbGFncyBvbiB0aGUgcCBvYmplY3QgdG8gcGFzcyBhbG9uZ1xuICAgICAgICBwLm1pc3NSaWdodCA9IGZhbHNlO1xuICAgICAgICBwLm1pc3NUb3AgPSBmYWxzZTtcbiAgICAgICAgcC5taXNzTGVmdCA9IGZhbHNlO1xuICAgICAgICBwLmxlZnRSaWdodEZsYWcgPSBmYWxzZTtcblxuICAgICAgICAvL2xldHMgc2VlIGlmIHRoZSBwYW5lbCB3aWxsIGJlIG9mZiB0aGUgc2NyZWVuXG4gICAgICAgIC8vZ2V0IHRoZSBhY3R1YWwgd2lkdGggb2YgdGhlIHBhZ2UgYW5kIHN0b3JlIGl0XG4gICAgICAgIHZhciBhY3R1YWxCb2R5V2lkdGg7XG4gICAgICAgIHZhciB3aW5kb3dXaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICAgICAgICBcbiAgICAgICAgaWYgKGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3JvdycpWzBdKSB7XG4gICAgICAgICAgYWN0dWFsQm9keVdpZHRoID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgncm93JylbMF0uY2xpZW50V2lkdGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWN0dWFsQm9keVdpZHRoID0gd2luZG93V2lkdGg7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYWN0dWFsTWFyZ2luV2lkdGggPSAod2luZG93V2lkdGggLSBhY3R1YWxCb2R5V2lkdGgpIC8gMjtcbiAgICAgICAgdmFyIGFjdHVhbEJvdW5kYXJ5ID0gYWN0dWFsQm9keVdpZHRoO1xuXG4gICAgICAgIGlmICghdGhpcy5oYXNDbGFzcygnbWVnYScpICYmICFzLmlnbm9yZV9yZXBvc2l0aW9uaW5nKSB7XG4gICAgICAgICAgdmFyIG91dGVyV2lkdGggPSB0aGlzLm91dGVyV2lkdGgoKTtcbiAgICAgICAgICB2YXIgb19sZWZ0ID0gdC5vZmZzZXQoKS5sZWZ0O1xuXHRcdCAgXG4gICAgICAgICAgLy9taXNzIHRvcFxuICAgICAgICAgIGlmICh0Lm9mZnNldCgpLnRvcCA8PSB0aGlzLm91dGVySGVpZ2h0KCkpIHtcbiAgICAgICAgICAgIHAubWlzc1RvcCA9IHRydWU7XG4gICAgICAgICAgICBhY3R1YWxCb3VuZGFyeSA9IHdpbmRvd1dpZHRoIC0gYWN0dWFsTWFyZ2luV2lkdGg7XG4gICAgICAgICAgICBwLmxlZnRSaWdodEZsYWcgPSB0cnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vbWlzcyByaWdodFxuICAgICAgICAgIGlmIChvX2xlZnQgKyBvdXRlcldpZHRoID4gb19sZWZ0ICsgYWN0dWFsTWFyZ2luV2lkdGggJiYgb19sZWZ0IC0gYWN0dWFsTWFyZ2luV2lkdGggPiBvdXRlcldpZHRoKSB7XG4gICAgICAgICAgICBwLm1pc3NSaWdodCA9IHRydWU7XG4gICAgICAgICAgICBwLm1pc3NMZWZ0ID0gZmFsc2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy9taXNzIGxlZnRcbiAgICAgICAgICBpZiAob19sZWZ0IC0gb3V0ZXJXaWR0aCA8PSAwKSB7XG4gICAgICAgICAgICBwLm1pc3NMZWZ0ID0gdHJ1ZTtcbiAgICAgICAgICAgIHAubWlzc1JpZ2h0ID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHA7XG4gICAgICB9LFxuXG4gICAgICB0b3AgOiBmdW5jdGlvbiAodCwgcykge1xuICAgICAgICB2YXIgc2VsZiA9IEZvdW5kYXRpb24ubGlicy5kcm9wZG93bixcbiAgICAgICAgICAgIHAgPSBzZWxmLmRpcnMuX2Jhc2UuY2FsbCh0aGlzLCB0LCBzKTtcblxuICAgICAgICB0aGlzLmFkZENsYXNzKCdkcm9wLXRvcCcpO1xuXG4gICAgICAgIGlmIChwLm1pc3NUb3AgPT0gdHJ1ZSkge1xuICAgICAgICAgIHAudG9wID0gcC50b3AgKyB0Lm91dGVySGVpZ2h0KCkgKyB0aGlzLm91dGVySGVpZ2h0KCk7XG4gICAgICAgICAgdGhpcy5yZW1vdmVDbGFzcygnZHJvcC10b3AnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwLm1pc3NSaWdodCA9PSB0cnVlKSB7XG4gICAgICAgICAgcC5sZWZ0ID0gcC5sZWZ0IC0gdGhpcy5vdXRlcldpZHRoKCkgKyB0Lm91dGVyV2lkdGgoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0Lm91dGVyV2lkdGgoKSA8IHRoaXMub3V0ZXJXaWR0aCgpIHx8IHNlbGYuc21hbGwoKSB8fCB0aGlzLmhhc0NsYXNzKHMubWVnYV9tZW51KSkge1xuICAgICAgICAgIHNlbGYuYWRqdXN0X3BpcCh0aGlzLCB0LCBzLCBwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChGb3VuZGF0aW9uLnJ0bCkge1xuICAgICAgICAgIHJldHVybiB7bGVmdCA6IHAubGVmdCAtIHRoaXMub3V0ZXJXaWR0aCgpICsgdC5vdXRlcldpZHRoKCksXG4gICAgICAgICAgICB0b3AgOiBwLnRvcCAtIHRoaXMub3V0ZXJIZWlnaHQoKX07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge2xlZnQgOiBwLmxlZnQsIHRvcCA6IHAudG9wIC0gdGhpcy5vdXRlckhlaWdodCgpfTtcbiAgICAgIH0sXG5cbiAgICAgIGJvdHRvbSA6IGZ1bmN0aW9uICh0LCBzKSB7XG4gICAgICAgIHZhciBzZWxmID0gRm91bmRhdGlvbi5saWJzLmRyb3Bkb3duLFxuICAgICAgICAgICAgcCA9IHNlbGYuZGlycy5fYmFzZS5jYWxsKHRoaXMsIHQsIHMpO1xuXG4gICAgICAgIGlmIChwLm1pc3NSaWdodCA9PSB0cnVlKSB7XG4gICAgICAgICAgcC5sZWZ0ID0gcC5sZWZ0IC0gdGhpcy5vdXRlcldpZHRoKCkgKyB0Lm91dGVyV2lkdGgoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0Lm91dGVyV2lkdGgoKSA8IHRoaXMub3V0ZXJXaWR0aCgpIHx8IHNlbGYuc21hbGwoKSB8fCB0aGlzLmhhc0NsYXNzKHMubWVnYV9tZW51KSkge1xuICAgICAgICAgIHNlbGYuYWRqdXN0X3BpcCh0aGlzLCB0LCBzLCBwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZWxmLnJ0bCkge1xuICAgICAgICAgIHJldHVybiB7bGVmdCA6IHAubGVmdCAtIHRoaXMub3V0ZXJXaWR0aCgpICsgdC5vdXRlcldpZHRoKCksIHRvcCA6IHAudG9wICsgdC5vdXRlckhlaWdodCgpfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7bGVmdCA6IHAubGVmdCwgdG9wIDogcC50b3AgKyB0Lm91dGVySGVpZ2h0KCl9O1xuICAgICAgfSxcblxuICAgICAgbGVmdCA6IGZ1bmN0aW9uICh0LCBzKSB7XG4gICAgICAgIHZhciBwID0gRm91bmRhdGlvbi5saWJzLmRyb3Bkb3duLmRpcnMuX2Jhc2UuY2FsbCh0aGlzLCB0LCBzKTtcblxuICAgICAgICB0aGlzLmFkZENsYXNzKCdkcm9wLWxlZnQnKTtcblxuICAgICAgICBpZiAocC5taXNzTGVmdCA9PSB0cnVlKSB7XG4gICAgICAgICAgcC5sZWZ0ID0gIHAubGVmdCArIHRoaXMub3V0ZXJXaWR0aCgpO1xuICAgICAgICAgIHAudG9wID0gcC50b3AgKyB0Lm91dGVySGVpZ2h0KCk7XG4gICAgICAgICAgdGhpcy5yZW1vdmVDbGFzcygnZHJvcC1sZWZ0Jyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge2xlZnQgOiBwLmxlZnQgLSB0aGlzLm91dGVyV2lkdGgoKSwgdG9wIDogcC50b3B9O1xuICAgICAgfSxcblxuICAgICAgcmlnaHQgOiBmdW5jdGlvbiAodCwgcykge1xuICAgICAgICB2YXIgcCA9IEZvdW5kYXRpb24ubGlicy5kcm9wZG93bi5kaXJzLl9iYXNlLmNhbGwodGhpcywgdCwgcyk7XG5cbiAgICAgICAgdGhpcy5hZGRDbGFzcygnZHJvcC1yaWdodCcpO1xuXG4gICAgICAgIGlmIChwLm1pc3NSaWdodCA9PSB0cnVlKSB7XG4gICAgICAgICAgcC5sZWZ0ID0gcC5sZWZ0IC0gdGhpcy5vdXRlcldpZHRoKCk7XG4gICAgICAgICAgcC50b3AgPSBwLnRvcCArIHQub3V0ZXJIZWlnaHQoKTtcbiAgICAgICAgICB0aGlzLnJlbW92ZUNsYXNzKCdkcm9wLXJpZ2h0Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcC50cmlnZ2VyZWRSaWdodCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2VsZiA9IEZvdW5kYXRpb24ubGlicy5kcm9wZG93bjtcblxuICAgICAgICBpZiAodC5vdXRlcldpZHRoKCkgPCB0aGlzLm91dGVyV2lkdGgoKSB8fCBzZWxmLnNtYWxsKCkgfHwgdGhpcy5oYXNDbGFzcyhzLm1lZ2FfbWVudSkpIHtcbiAgICAgICAgICBzZWxmLmFkanVzdF9waXAodGhpcywgdCwgcywgcCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge2xlZnQgOiBwLmxlZnQgKyB0Lm91dGVyV2lkdGgoKSwgdG9wIDogcC50b3B9O1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvLyBJbnNlcnQgcnVsZSB0byBzdHlsZSBwc3VlZG8gZWxlbWVudHNcbiAgICBhZGp1c3RfcGlwIDogZnVuY3Rpb24gKGRyb3Bkb3duLCB0YXJnZXQsIHNldHRpbmdzLCBwb3NpdGlvbikge1xuICAgICAgdmFyIHNoZWV0ID0gRm91bmRhdGlvbi5zdHlsZXNoZWV0LFxuICAgICAgICAgIHBpcF9vZmZzZXRfYmFzZSA9IDg7XG5cbiAgICAgIGlmIChkcm9wZG93bi5oYXNDbGFzcyhzZXR0aW5ncy5tZWdhX2NsYXNzKSkge1xuICAgICAgICBwaXBfb2Zmc2V0X2Jhc2UgPSBwb3NpdGlvbi5sZWZ0ICsgKHRhcmdldC5vdXRlcldpZHRoKCkgLyAyKSAtIDg7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuc21hbGwoKSkge1xuICAgICAgICBwaXBfb2Zmc2V0X2Jhc2UgKz0gcG9zaXRpb24ubGVmdCAtIDg7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucnVsZV9pZHggPSBzaGVldC5jc3NSdWxlcy5sZW5ndGg7XG5cbiAgICAgIC8vZGVmYXVsdFxuICAgICAgdmFyIHNlbF9iZWZvcmUgPSAnLmYtZHJvcGRvd24ub3BlbjpiZWZvcmUnLFxuICAgICAgICAgIHNlbF9hZnRlciAgPSAnLmYtZHJvcGRvd24ub3BlbjphZnRlcicsXG4gICAgICAgICAgY3NzX2JlZm9yZSA9ICdsZWZ0OiAnICsgcGlwX29mZnNldF9iYXNlICsgJ3B4OycsXG4gICAgICAgICAgY3NzX2FmdGVyICA9ICdsZWZ0OiAnICsgKHBpcF9vZmZzZXRfYmFzZSAtIDEpICsgJ3B4Oyc7XG5cbiAgICAgIGlmIChwb3NpdGlvbi5taXNzUmlnaHQgPT0gdHJ1ZSkge1xuICAgICAgICBwaXBfb2Zmc2V0X2Jhc2UgPSBkcm9wZG93bi5vdXRlcldpZHRoKCkgLSAyMztcbiAgICAgICAgc2VsX2JlZm9yZSA9ICcuZi1kcm9wZG93bi5vcGVuOmJlZm9yZScsXG4gICAgICAgIHNlbF9hZnRlciAgPSAnLmYtZHJvcGRvd24ub3BlbjphZnRlcicsXG4gICAgICAgIGNzc19iZWZvcmUgPSAnbGVmdDogJyArIHBpcF9vZmZzZXRfYmFzZSArICdweDsnLFxuICAgICAgICBjc3NfYWZ0ZXIgID0gJ2xlZnQ6ICcgKyAocGlwX29mZnNldF9iYXNlIC0gMSkgKyAncHg7JztcbiAgICAgIH1cblxuICAgICAgLy9qdXN0IGEgY2FzZSB3aGVyZSByaWdodCBpcyBmaXJlZCwgYnV0IGl0cyBub3QgbWlzc2luZyByaWdodFxuICAgICAgaWYgKHBvc2l0aW9uLnRyaWdnZXJlZFJpZ2h0ID09IHRydWUpIHtcbiAgICAgICAgc2VsX2JlZm9yZSA9ICcuZi1kcm9wZG93bi5vcGVuOmJlZm9yZScsXG4gICAgICAgIHNlbF9hZnRlciAgPSAnLmYtZHJvcGRvd24ub3BlbjphZnRlcicsXG4gICAgICAgIGNzc19iZWZvcmUgPSAnbGVmdDotMTJweDsnLFxuICAgICAgICBjc3NfYWZ0ZXIgID0gJ2xlZnQ6LTE0cHg7JztcbiAgICAgIH1cblxuICAgICAgaWYgKHNoZWV0Lmluc2VydFJ1bGUpIHtcbiAgICAgICAgc2hlZXQuaW5zZXJ0UnVsZShbc2VsX2JlZm9yZSwgJ3snLCBjc3NfYmVmb3JlLCAnfSddLmpvaW4oJyAnKSwgdGhpcy5ydWxlX2lkeCk7XG4gICAgICAgIHNoZWV0Lmluc2VydFJ1bGUoW3NlbF9hZnRlciwgJ3snLCBjc3NfYWZ0ZXIsICd9J10uam9pbignICcpLCB0aGlzLnJ1bGVfaWR4ICsgMSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzaGVldC5hZGRSdWxlKHNlbF9iZWZvcmUsIGNzc19iZWZvcmUsIHRoaXMucnVsZV9pZHgpO1xuICAgICAgICBzaGVldC5hZGRSdWxlKHNlbF9hZnRlciwgY3NzX2FmdGVyLCB0aGlzLnJ1bGVfaWR4ICsgMSk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8vIFJlbW92ZSBvbGQgZHJvcGRvd24gcnVsZSBpbmRleFxuICAgIGNsZWFyX2lkeCA6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzaGVldCA9IEZvdW5kYXRpb24uc3R5bGVzaGVldDtcblxuICAgICAgaWYgKHR5cGVvZiB0aGlzLnJ1bGVfaWR4ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBzaGVldC5kZWxldGVSdWxlKHRoaXMucnVsZV9pZHgpO1xuICAgICAgICBzaGVldC5kZWxldGVSdWxlKHRoaXMucnVsZV9pZHgpO1xuICAgICAgICBkZWxldGUgdGhpcy5ydWxlX2lkeDtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc21hbGwgOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbWF0Y2hNZWRpYShGb3VuZGF0aW9uLm1lZGlhX3F1ZXJpZXMuc21hbGwpLm1hdGNoZXMgJiZcbiAgICAgICAgIW1hdGNoTWVkaWEoRm91bmRhdGlvbi5tZWRpYV9xdWVyaWVzLm1lZGl1bSkubWF0Y2hlcztcbiAgICB9LFxuXG4gICAgb2ZmIDogZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5TKHRoaXMuc2NvcGUpLm9mZignLmZuZHRuLmRyb3Bkb3duJyk7XG4gICAgICB0aGlzLlMoJ2h0bWwsIGJvZHknKS5vZmYoJy5mbmR0bi5kcm9wZG93bicpO1xuICAgICAgdGhpcy5TKHdpbmRvdykub2ZmKCcuZm5kdG4uZHJvcGRvd24nKTtcbiAgICAgIHRoaXMuUygnW2RhdGEtZHJvcGRvd24tY29udGVudF0nKS5vZmYoJy5mbmR0bi5kcm9wZG93bicpO1xuICAgIH0sXG5cbiAgICByZWZsb3cgOiBmdW5jdGlvbiAoKSB7fVxuICB9O1xufShqUXVlcnksIHdpbmRvdywgd2luZG93LmRvY3VtZW50KSk7XG4iLCIvKlxuICogRm91bmRhdGlvbiBSZXNwb25zaXZlIExpYnJhcnlcbiAqIGh0dHA6Ly9mb3VuZGF0aW9uLnp1cmIuY29tXG4gKiBDb3B5cmlnaHQgMjAxNSwgWlVSQlxuICogRnJlZSB0byB1c2UgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICogaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiovXG5cbihmdW5jdGlvbiAoJCwgd2luZG93LCBkb2N1bWVudCwgdW5kZWZpbmVkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgaGVhZGVyX2hlbHBlcnMgPSBmdW5jdGlvbiAoY2xhc3NfYXJyYXkpIHtcbiAgICB2YXIgaGVhZCA9ICQoJ2hlYWQnKTtcbiAgICBoZWFkLnByZXBlbmQoJC5tYXAoY2xhc3NfYXJyYXksIGZ1bmN0aW9uIChjbGFzc19uYW1lKSB7XG4gICAgICBpZiAoaGVhZC5oYXMoJy4nICsgY2xhc3NfbmFtZSkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiAnPG1ldGEgY2xhc3M9XCInICsgY2xhc3NfbmFtZSArICdcIiAvPic7XG4gICAgICB9XG4gICAgfSkpO1xuICB9O1xuXG4gIGhlYWRlcl9oZWxwZXJzKFtcbiAgICAnZm91bmRhdGlvbi1tcS1zbWFsbCcsXG4gICAgJ2ZvdW5kYXRpb24tbXEtc21hbGwtb25seScsXG4gICAgJ2ZvdW5kYXRpb24tbXEtbWVkaXVtJyxcbiAgICAnZm91bmRhdGlvbi1tcS1tZWRpdW0tb25seScsXG4gICAgJ2ZvdW5kYXRpb24tbXEtbGFyZ2UnLFxuICAgICdmb3VuZGF0aW9uLW1xLWxhcmdlLW9ubHknLFxuICAgICdmb3VuZGF0aW9uLW1xLXhsYXJnZScsXG4gICAgJ2ZvdW5kYXRpb24tbXEteGxhcmdlLW9ubHknLFxuICAgICdmb3VuZGF0aW9uLW1xLXh4bGFyZ2UnLFxuICAgICdmb3VuZGF0aW9uLWRhdGEtYXR0cmlidXRlLW5hbWVzcGFjZSddKTtcblxuICAvLyBFbmFibGUgRmFzdENsaWNrIGlmIHByZXNlbnRcblxuICAkKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodHlwZW9mIEZhc3RDbGljayAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIERvbid0IGF0dGFjaCB0byBib2R5IGlmIHVuZGVmaW5lZFxuICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5ib2R5ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBGYXN0Q2xpY2suYXR0YWNoKGRvY3VtZW50LmJvZHkpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgLy8gcHJpdmF0ZSBGYXN0IFNlbGVjdG9yIHdyYXBwZXIsXG4gIC8vIHJldHVybnMgalF1ZXJ5IG9iamVjdC4gT25seSB1c2Ugd2hlcmVcbiAgLy8gZ2V0RWxlbWVudEJ5SWQgaXMgbm90IGF2YWlsYWJsZS5cbiAgdmFyIFMgPSBmdW5jdGlvbiAoc2VsZWN0b3IsIGNvbnRleHQpIHtcbiAgICBpZiAodHlwZW9mIHNlbGVjdG9yID09PSAnc3RyaW5nJykge1xuICAgICAgaWYgKGNvbnRleHQpIHtcbiAgICAgICAgdmFyIGNvbnQ7XG4gICAgICAgIGlmIChjb250ZXh0LmpxdWVyeSkge1xuICAgICAgICAgIGNvbnQgPSBjb250ZXh0WzBdO1xuICAgICAgICAgIGlmICghY29udCkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnQgPSBjb250ZXh0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAkKGNvbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gJChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuICQoc2VsZWN0b3IsIGNvbnRleHQpO1xuICB9O1xuXG4gIC8vIE5hbWVzcGFjZSBmdW5jdGlvbnMuXG5cbiAgdmFyIGF0dHJfbmFtZSA9IGZ1bmN0aW9uIChpbml0KSB7XG4gICAgdmFyIGFyciA9IFtdO1xuICAgIGlmICghaW5pdCkge1xuICAgICAgYXJyLnB1c2goJ2RhdGEnKTtcbiAgICB9XG4gICAgaWYgKHRoaXMubmFtZXNwYWNlLmxlbmd0aCA+IDApIHtcbiAgICAgIGFyci5wdXNoKHRoaXMubmFtZXNwYWNlKTtcbiAgICB9XG4gICAgYXJyLnB1c2godGhpcy5uYW1lKTtcblxuICAgIHJldHVybiBhcnIuam9pbignLScpO1xuICB9O1xuXG4gIHZhciBhZGRfbmFtZXNwYWNlID0gZnVuY3Rpb24gKHN0cikge1xuICAgIHZhciBwYXJ0cyA9IHN0ci5zcGxpdCgnLScpLFxuICAgICAgICBpID0gcGFydHMubGVuZ3RoLFxuICAgICAgICBhcnIgPSBbXTtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGlmIChpICE9PSAwKSB7XG4gICAgICAgIGFyci5wdXNoKHBhcnRzW2ldKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLm5hbWVzcGFjZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgYXJyLnB1c2godGhpcy5uYW1lc3BhY2UsIHBhcnRzW2ldKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhcnIucHVzaChwYXJ0c1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYXJyLnJldmVyc2UoKS5qb2luKCctJyk7XG4gIH07XG5cbiAgLy8gRXZlbnQgYmluZGluZyBhbmQgZGF0YS1vcHRpb25zIHVwZGF0aW5nLlxuXG4gIHZhciBiaW5kaW5ncyA9IGZ1bmN0aW9uIChtZXRob2QsIG9wdGlvbnMpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgIGJpbmQgPSBmdW5jdGlvbigpe1xuICAgICAgICAgIHZhciAkdGhpcyA9IFModGhpcyksXG4gICAgICAgICAgICAgIHNob3VsZF9iaW5kX2V2ZW50cyA9ICEkdGhpcy5kYXRhKHNlbGYuYXR0cl9uYW1lKHRydWUpICsgJy1pbml0Jyk7XG4gICAgICAgICAgJHRoaXMuZGF0YShzZWxmLmF0dHJfbmFtZSh0cnVlKSArICctaW5pdCcsICQuZXh0ZW5kKHt9LCBzZWxmLnNldHRpbmdzLCAob3B0aW9ucyB8fCBtZXRob2QpLCBzZWxmLmRhdGFfb3B0aW9ucygkdGhpcykpKTtcblxuICAgICAgICAgIGlmIChzaG91bGRfYmluZF9ldmVudHMpIHtcbiAgICAgICAgICAgIHNlbGYuZXZlbnRzKHRoaXMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgIGlmIChTKHRoaXMuc2NvcGUpLmlzKCdbJyArIHRoaXMuYXR0cl9uYW1lKCkgKyddJykpIHtcbiAgICAgIGJpbmQuY2FsbCh0aGlzLnNjb3BlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgUygnWycgKyB0aGlzLmF0dHJfbmFtZSgpICsnXScsIHRoaXMuc2NvcGUpLmVhY2goYmluZCk7XG4gICAgfVxuICAgIC8vICMgUGF0Y2ggdG8gZml4ICM1MDQzIHRvIG1vdmUgdGhpcyAqYWZ0ZXIqIHRoZSBpZi9lbHNlIGNsYXVzZSBpbiBvcmRlciBmb3IgQmFja2JvbmUgYW5kIHNpbWlsYXIgZnJhbWV3b3JrcyB0byBoYXZlIGltcHJvdmVkIGNvbnRyb2wgb3ZlciBldmVudCBiaW5kaW5nIGFuZCBkYXRhLW9wdGlvbnMgdXBkYXRpbmcuXG4gICAgaWYgKHR5cGVvZiBtZXRob2QgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gdGhpc1ttZXRob2RdLmNhbGwodGhpcywgb3B0aW9ucyk7XG4gICAgfVxuXG4gIH07XG5cbiAgdmFyIHNpbmdsZV9pbWFnZV9sb2FkZWQgPSBmdW5jdGlvbiAoaW1hZ2UsIGNhbGxiYWNrKSB7XG4gICAgZnVuY3Rpb24gbG9hZGVkICgpIHtcbiAgICAgIGNhbGxiYWNrKGltYWdlWzBdKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBiaW5kTG9hZCAoKSB7XG4gICAgICB0aGlzLm9uZSgnbG9hZCcsIGxvYWRlZCk7XG5cbiAgICAgIGlmICgvTVNJRSAoXFxkK1xcLlxcZCspOy8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSkge1xuICAgICAgICB2YXIgc3JjID0gdGhpcy5hdHRyKCAnc3JjJyApLFxuICAgICAgICAgICAgcGFyYW0gPSBzcmMubWF0Y2goIC9cXD8vICkgPyAnJicgOiAnPyc7XG5cbiAgICAgICAgcGFyYW0gKz0gJ3JhbmRvbT0nICsgKG5ldyBEYXRlKCkpLmdldFRpbWUoKTtcbiAgICAgICAgdGhpcy5hdHRyKCdzcmMnLCBzcmMgKyBwYXJhbSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFpbWFnZS5hdHRyKCdzcmMnKSkge1xuICAgICAgbG9hZGVkKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGltYWdlWzBdLmNvbXBsZXRlIHx8IGltYWdlWzBdLnJlYWR5U3RhdGUgPT09IDQpIHtcbiAgICAgIGxvYWRlZCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBiaW5kTG9hZC5jYWxsKGltYWdlKTtcbiAgICB9XG4gIH07XG5cbiAgLyohIG1hdGNoTWVkaWEoKSBwb2x5ZmlsbCAtIFRlc3QgYSBDU1MgbWVkaWEgdHlwZS9xdWVyeSBpbiBKUy4gQXV0aG9ycyAmIGNvcHlyaWdodCAoYykgMjAxMjogU2NvdHQgSmVobCwgUGF1bCBJcmlzaCwgTmljaG9sYXMgWmFrYXMsIERhdmlkIEtuaWdodC4gRHVhbCBNSVQvQlNEIGxpY2Vuc2UgKi9cblxuICB3aW5kb3cubWF0Y2hNZWRpYSB8fCAod2luZG93Lm1hdGNoTWVkaWEgPSBmdW5jdGlvbigpIHtcbiAgICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgICAvLyBGb3IgYnJvd3NlcnMgdGhhdCBzdXBwb3J0IG1hdGNoTWVkaXVtIGFwaSBzdWNoIGFzIElFIDkgYW5kIHdlYmtpdFxuICAgICAgdmFyIHN0eWxlTWVkaWEgPSAod2luZG93LnN0eWxlTWVkaWEgfHwgd2luZG93Lm1lZGlhKTtcblxuICAgICAgLy8gRm9yIHRob3NlIHRoYXQgZG9uJ3Qgc3VwcG9ydCBtYXRjaE1lZGl1bVxuICAgICAgaWYgKCFzdHlsZU1lZGlhKSB7XG4gICAgICAgICAgdmFyIHN0eWxlICAgICAgID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKSxcbiAgICAgICAgICAgICAgc2NyaXB0ICAgICAgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0JylbMF0sXG4gICAgICAgICAgICAgIGluZm8gICAgICAgID0gbnVsbDtcblxuICAgICAgICAgIHN0eWxlLnR5cGUgID0gJ3RleHQvY3NzJztcbiAgICAgICAgICBzdHlsZS5pZCAgICA9ICdtYXRjaG1lZGlhanMtdGVzdCc7XG5cbiAgICAgICAgICBzY3JpcHQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoc3R5bGUsIHNjcmlwdCk7XG5cbiAgICAgICAgICAvLyAnc3R5bGUuY3VycmVudFN0eWxlJyBpcyB1c2VkIGJ5IElFIDw9IDggYW5kICd3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZScgZm9yIGFsbCBvdGhlciBicm93c2Vyc1xuICAgICAgICAgIGluZm8gPSAoJ2dldENvbXB1dGVkU3R5bGUnIGluIHdpbmRvdykgJiYgd2luZG93LmdldENvbXB1dGVkU3R5bGUoc3R5bGUsIG51bGwpIHx8IHN0eWxlLmN1cnJlbnRTdHlsZTtcblxuICAgICAgICAgIHN0eWxlTWVkaWEgPSB7XG4gICAgICAgICAgICAgIG1hdGNoTWVkaXVtOiBmdW5jdGlvbihtZWRpYSkge1xuICAgICAgICAgICAgICAgICAgdmFyIHRleHQgPSAnQG1lZGlhICcgKyBtZWRpYSArICd7ICNtYXRjaG1lZGlhanMtdGVzdCB7IHdpZHRoOiAxcHg7IH0gfSc7XG5cbiAgICAgICAgICAgICAgICAgIC8vICdzdHlsZS5zdHlsZVNoZWV0JyBpcyB1c2VkIGJ5IElFIDw9IDggYW5kICdzdHlsZS50ZXh0Q29udGVudCcgZm9yIGFsbCBvdGhlciBicm93c2Vyc1xuICAgICAgICAgICAgICAgICAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSB0ZXh0O1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBzdHlsZS50ZXh0Q29udGVudCA9IHRleHQ7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIC8vIFRlc3QgaWYgbWVkaWEgcXVlcnkgaXMgdHJ1ZSBvciBmYWxzZVxuICAgICAgICAgICAgICAgICAgcmV0dXJuIGluZm8ud2lkdGggPT09ICcxcHgnO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG1lZGlhKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgbWF0Y2hlczogc3R5bGVNZWRpYS5tYXRjaE1lZGl1bShtZWRpYSB8fCAnYWxsJyksXG4gICAgICAgICAgICAgIG1lZGlhOiBtZWRpYSB8fCAnYWxsJ1xuICAgICAgICAgIH07XG4gICAgICB9O1xuICB9KCkpO1xuXG4gIC8qXG4gICAqIGpxdWVyeS5yZXF1ZXN0QW5pbWF0aW9uRnJhbWVcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL2duYXJmMzcvanF1ZXJ5LXJlcXVlc3RBbmltYXRpb25GcmFtZVxuICAgKiBSZXF1aXJlcyBqUXVlcnkgMS44K1xuICAgKlxuICAgKiBDb3B5cmlnaHQgKGMpIDIwMTIgQ29yZXkgRnJhbmdcbiAgICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICAgKi9cblxuICAoZnVuY3Rpb24oalF1ZXJ5KSB7XG5cblxuICAvLyByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgcG9seWZpbGwgYWRhcHRlZCBmcm9tIEVyaWsgTcO2bGxlclxuICAvLyBmaXhlcyBmcm9tIFBhdWwgSXJpc2ggYW5kIFRpbm8gWmlqZGVsXG4gIC8vIGh0dHA6Ly9wYXVsaXJpc2guY29tLzIwMTEvcmVxdWVzdGFuaW1hdGlvbmZyYW1lLWZvci1zbWFydC1hbmltYXRpbmcvXG4gIC8vIGh0dHA6Ly9teS5vcGVyYS5jb20vZW1vbGxlci9ibG9nLzIwMTEvMTIvMjAvcmVxdWVzdGFuaW1hdGlvbmZyYW1lLWZvci1zbWFydC1lci1hbmltYXRpbmdcblxuICB2YXIgYW5pbWF0aW5nLFxuICAgICAgbGFzdFRpbWUgPSAwLFxuICAgICAgdmVuZG9ycyA9IFsnd2Via2l0JywgJ21veiddLFxuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSxcbiAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lID0gd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lLFxuICAgICAganF1ZXJ5RnhBdmFpbGFibGUgPSAndW5kZWZpbmVkJyAhPT0gdHlwZW9mIGpRdWVyeS5meDtcblxuICBmb3IgKDsgbGFzdFRpbWUgPCB2ZW5kb3JzLmxlbmd0aCAmJiAhcmVxdWVzdEFuaW1hdGlvbkZyYW1lOyBsYXN0VGltZSsrKSB7XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gd2luZG93WyB2ZW5kb3JzW2xhc3RUaW1lXSArICdSZXF1ZXN0QW5pbWF0aW9uRnJhbWUnIF07XG4gICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSBjYW5jZWxBbmltYXRpb25GcmFtZSB8fFxuICAgICAgd2luZG93WyB2ZW5kb3JzW2xhc3RUaW1lXSArICdDYW5jZWxBbmltYXRpb25GcmFtZScgXSB8fFxuICAgICAgd2luZG93WyB2ZW5kb3JzW2xhc3RUaW1lXSArICdDYW5jZWxSZXF1ZXN0QW5pbWF0aW9uRnJhbWUnIF07XG4gIH1cblxuICBmdW5jdGlvbiByYWYoKSB7XG4gICAgaWYgKGFuaW1hdGluZykge1xuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJhZik7XG5cbiAgICAgIGlmIChqcXVlcnlGeEF2YWlsYWJsZSkge1xuICAgICAgICBqUXVlcnkuZngudGljaygpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChyZXF1ZXN0QW5pbWF0aW9uRnJhbWUpIHtcbiAgICAvLyB1c2UgckFGXG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IHJlcXVlc3RBbmltYXRpb25GcmFtZTtcbiAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSBjYW5jZWxBbmltYXRpb25GcmFtZTtcblxuICAgIGlmIChqcXVlcnlGeEF2YWlsYWJsZSkge1xuICAgICAgalF1ZXJ5LmZ4LnRpbWVyID0gZnVuY3Rpb24gKHRpbWVyKSB7XG4gICAgICAgIGlmICh0aW1lcigpICYmIGpRdWVyeS50aW1lcnMucHVzaCh0aW1lcikgJiYgIWFuaW1hdGluZykge1xuICAgICAgICAgIGFuaW1hdGluZyA9IHRydWU7XG4gICAgICAgICAgcmFmKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGpRdWVyeS5meC5zdG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBhbmltYXRpbmcgPSBmYWxzZTtcbiAgICAgIH07XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIHBvbHlmaWxsXG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgdmFyIGN1cnJUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCksXG4gICAgICAgIHRpbWVUb0NhbGwgPSBNYXRoLm1heCgwLCAxNiAtIChjdXJyVGltZSAtIGxhc3RUaW1lKSksXG4gICAgICAgIGlkID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGNhbGxiYWNrKGN1cnJUaW1lICsgdGltZVRvQ2FsbCk7XG4gICAgICAgIH0sIHRpbWVUb0NhbGwpO1xuICAgICAgbGFzdFRpbWUgPSBjdXJyVGltZSArIHRpbWVUb0NhbGw7XG4gICAgICByZXR1cm4gaWQ7XG4gICAgfTtcblxuICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgY2xlYXJUaW1lb3V0KGlkKTtcbiAgICB9O1xuXG4gIH1cblxuICB9KCAkICkpO1xuXG4gIGZ1bmN0aW9uIHJlbW92ZVF1b3RlcyAoc3RyaW5nKSB7XG4gICAgaWYgKHR5cGVvZiBzdHJpbmcgPT09ICdzdHJpbmcnIHx8IHN0cmluZyBpbnN0YW5jZW9mIFN0cmluZykge1xuICAgICAgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UoL15bJ1xcXFwvXCJdK3woO1xccz99KSt8WydcXFxcL1wiXSskL2csICcnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RyaW5nO1xuICB9XG5cbiAgZnVuY3Rpb24gTWVkaWFRdWVyeShzZWxlY3Rvcikge1xuICAgIHRoaXMuc2VsZWN0b3IgPSBzZWxlY3RvcjtcbiAgICB0aGlzLnF1ZXJ5ID0gJyc7XG4gIH1cblxuICBNZWRpYVF1ZXJ5LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5xdWVyeSB8fCAodGhpcy5xdWVyeSA9IFModGhpcy5zZWxlY3RvcikuY3NzKCdmb250LWZhbWlseScpLnJlcGxhY2UoL15bXFwvXFxcXCdcIl0rfCg7XFxzP30pK3xbXFwvXFxcXCdcIl0rJC9nLCAnJykpO1xuICB9O1xuXG4gIHdpbmRvdy5Gb3VuZGF0aW9uID0ge1xuICAgIG5hbWUgOiAnRm91bmRhdGlvbicsXG5cbiAgICB2ZXJzaW9uIDogJzUuNS4zJyxcblxuICAgIG1lZGlhX3F1ZXJpZXMgOiB7XG4gICAgICAnc21hbGwnICAgICAgIDogbmV3IE1lZGlhUXVlcnkoJy5mb3VuZGF0aW9uLW1xLXNtYWxsJyksXG4gICAgICAnc21hbGwtb25seScgIDogbmV3IE1lZGlhUXVlcnkoJy5mb3VuZGF0aW9uLW1xLXNtYWxsLW9ubHknKSxcbiAgICAgICdtZWRpdW0nICAgICAgOiBuZXcgTWVkaWFRdWVyeSgnLmZvdW5kYXRpb24tbXEtbWVkaXVtJyksXG4gICAgICAnbWVkaXVtLW9ubHknIDogbmV3IE1lZGlhUXVlcnkoJy5mb3VuZGF0aW9uLW1xLW1lZGl1bS1vbmx5JyksXG4gICAgICAnbGFyZ2UnICAgICAgIDogbmV3IE1lZGlhUXVlcnkoJy5mb3VuZGF0aW9uLW1xLWxhcmdlJyksXG4gICAgICAnbGFyZ2Utb25seScgIDogbmV3IE1lZGlhUXVlcnkoJy5mb3VuZGF0aW9uLW1xLWxhcmdlLW9ubHknKSxcbiAgICAgICd4bGFyZ2UnICAgICAgOiBuZXcgTWVkaWFRdWVyeSgnLmZvdW5kYXRpb24tbXEteGxhcmdlJyksXG4gICAgICAneGxhcmdlLW9ubHknIDogbmV3IE1lZGlhUXVlcnkoJy5mb3VuZGF0aW9uLW1xLXhsYXJnZS1vbmx5JyksXG4gICAgICAneHhsYXJnZScgICAgIDogbmV3IE1lZGlhUXVlcnkoJy5mb3VuZGF0aW9uLW1xLXh4bGFyZ2UnKVxuICAgIH0sXG5cbiAgICBzdHlsZXNoZWV0IDogJCgnPHN0eWxlPjwvc3R5bGU+JykuYXBwZW5kVG8oJ2hlYWQnKVswXS5zaGVldCxcblxuICAgIGdsb2JhbCA6IHtcbiAgICAgIG5hbWVzcGFjZSA6IHVuZGVmaW5lZFxuICAgIH0sXG5cbiAgICBpbml0IDogZnVuY3Rpb24gKHNjb3BlLCBsaWJyYXJpZXMsIG1ldGhvZCwgb3B0aW9ucywgcmVzcG9uc2UpIHtcbiAgICAgIHZhciBhcmdzID0gW3Njb3BlLCBtZXRob2QsIG9wdGlvbnMsIHJlc3BvbnNlXSxcbiAgICAgICAgICByZXNwb25zZXMgPSBbXTtcblxuICAgICAgLy8gY2hlY2sgUlRMXG4gICAgICB0aGlzLnJ0bCA9IC9ydGwvaS50ZXN0KFMoJ2h0bWwnKS5hdHRyKCdkaXInKSk7XG5cbiAgICAgIC8vIHNldCBmb3VuZGF0aW9uIGdsb2JhbCBzY29wZVxuICAgICAgdGhpcy5zY29wZSA9IHNjb3BlIHx8IHRoaXMuc2NvcGU7XG5cbiAgICAgIHRoaXMuc2V0X25hbWVzcGFjZSgpO1xuXG4gICAgICBpZiAobGlicmFyaWVzICYmIHR5cGVvZiBsaWJyYXJpZXMgPT09ICdzdHJpbmcnICYmICEvcmVmbG93L2kudGVzdChsaWJyYXJpZXMpKSB7XG4gICAgICAgIGlmICh0aGlzLmxpYnMuaGFzT3duUHJvcGVydHkobGlicmFyaWVzKSkge1xuICAgICAgICAgIHJlc3BvbnNlcy5wdXNoKHRoaXMuaW5pdF9saWIobGlicmFyaWVzLCBhcmdzKSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAodmFyIGxpYiBpbiB0aGlzLmxpYnMpIHtcbiAgICAgICAgICByZXNwb25zZXMucHVzaCh0aGlzLmluaXRfbGliKGxpYiwgbGlicmFyaWVzKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgUyh3aW5kb3cpLmxvYWQoZnVuY3Rpb24gKCkge1xuICAgICAgICBTKHdpbmRvdylcbiAgICAgICAgICAudHJpZ2dlcigncmVzaXplLmZuZHRuLmNsZWFyaW5nJylcbiAgICAgICAgICAudHJpZ2dlcigncmVzaXplLmZuZHRuLmRyb3Bkb3duJylcbiAgICAgICAgICAudHJpZ2dlcigncmVzaXplLmZuZHRuLmVxdWFsaXplcicpXG4gICAgICAgICAgLnRyaWdnZXIoJ3Jlc2l6ZS5mbmR0bi5pbnRlcmNoYW5nZScpXG4gICAgICAgICAgLnRyaWdnZXIoJ3Jlc2l6ZS5mbmR0bi5qb3lyaWRlJylcbiAgICAgICAgICAudHJpZ2dlcigncmVzaXplLmZuZHRuLm1hZ2VsbGFuJylcbiAgICAgICAgICAudHJpZ2dlcigncmVzaXplLmZuZHRuLnRvcGJhcicpXG4gICAgICAgICAgLnRyaWdnZXIoJ3Jlc2l6ZS5mbmR0bi5zbGlkZXInKTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gc2NvcGU7XG4gICAgfSxcblxuICAgIGluaXRfbGliIDogZnVuY3Rpb24gKGxpYiwgYXJncykge1xuICAgICAgaWYgKHRoaXMubGlicy5oYXNPd25Qcm9wZXJ0eShsaWIpKSB7XG4gICAgICAgIHRoaXMucGF0Y2godGhpcy5saWJzW2xpYl0pO1xuXG4gICAgICAgIGlmIChhcmdzICYmIGFyZ3MuaGFzT3duUHJvcGVydHkobGliKSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmxpYnNbbGliXS5zZXR0aW5ncyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgJC5leHRlbmQodHJ1ZSwgdGhpcy5saWJzW2xpYl0uc2V0dGluZ3MsIGFyZ3NbbGliXSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLmxpYnNbbGliXS5kZWZhdWx0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgJC5leHRlbmQodHJ1ZSwgdGhpcy5saWJzW2xpYl0uZGVmYXVsdHMsIGFyZ3NbbGliXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRoaXMubGlic1tsaWJdLmluaXQuYXBwbHkodGhpcy5saWJzW2xpYl0sIFt0aGlzLnNjb3BlLCBhcmdzW2xpYl1dKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFyZ3MgPSBhcmdzIGluc3RhbmNlb2YgQXJyYXkgPyBhcmdzIDogbmV3IEFycmF5KGFyZ3MpO1xuICAgICAgICByZXR1cm4gdGhpcy5saWJzW2xpYl0uaW5pdC5hcHBseSh0aGlzLmxpYnNbbGliXSwgYXJncyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7fTtcbiAgICB9LFxuXG4gICAgcGF0Y2ggOiBmdW5jdGlvbiAobGliKSB7XG4gICAgICBsaWIuc2NvcGUgPSB0aGlzLnNjb3BlO1xuICAgICAgbGliLm5hbWVzcGFjZSA9IHRoaXMuZ2xvYmFsLm5hbWVzcGFjZTtcbiAgICAgIGxpYi5ydGwgPSB0aGlzLnJ0bDtcbiAgICAgIGxpYlsnZGF0YV9vcHRpb25zJ10gPSB0aGlzLnV0aWxzLmRhdGFfb3B0aW9ucztcbiAgICAgIGxpYlsnYXR0cl9uYW1lJ10gPSBhdHRyX25hbWU7XG4gICAgICBsaWJbJ2FkZF9uYW1lc3BhY2UnXSA9IGFkZF9uYW1lc3BhY2U7XG4gICAgICBsaWJbJ2JpbmRpbmdzJ10gPSBiaW5kaW5ncztcbiAgICAgIGxpYlsnUyddID0gdGhpcy51dGlscy5TO1xuICAgIH0sXG5cbiAgICBpbmhlcml0IDogZnVuY3Rpb24gKHNjb3BlLCBtZXRob2RzKSB7XG4gICAgICB2YXIgbWV0aG9kc19hcnIgPSBtZXRob2RzLnNwbGl0KCcgJyksXG4gICAgICAgICAgaSA9IG1ldGhvZHNfYXJyLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICBpZiAodGhpcy51dGlscy5oYXNPd25Qcm9wZXJ0eShtZXRob2RzX2FycltpXSkpIHtcbiAgICAgICAgICBzY29wZVttZXRob2RzX2FycltpXV0gPSB0aGlzLnV0aWxzW21ldGhvZHNfYXJyW2ldXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBzZXRfbmFtZXNwYWNlIDogZnVuY3Rpb24gKCkge1xuXG4gICAgICAvLyBEZXNjcmlwdGlvbjpcbiAgICAgIC8vICAgIERvbid0IGJvdGhlciByZWFkaW5nIHRoZSBuYW1lc3BhY2Ugb3V0IG9mIHRoZSBtZXRhIHRhZ1xuICAgICAgLy8gICAgaWYgdGhlIG5hbWVzcGFjZSBoYXMgYmVlbiBzZXQgZ2xvYmFsbHkgaW4gamF2YXNjcmlwdFxuICAgICAgLy9cbiAgICAgIC8vIEV4YW1wbGU6XG4gICAgICAvLyAgICBGb3VuZGF0aW9uLmdsb2JhbC5uYW1lc3BhY2UgPSAnbXktbmFtZXNwYWNlJztcbiAgICAgIC8vIG9yIG1ha2UgaXQgYW4gZW1wdHkgc3RyaW5nOlxuICAgICAgLy8gICAgRm91bmRhdGlvbi5nbG9iYWwubmFtZXNwYWNlID0gJyc7XG4gICAgICAvL1xuICAgICAgLy9cblxuICAgICAgLy8gSWYgdGhlIG5hbWVzcGFjZSBoYXMgbm90IGJlZW4gc2V0IChpcyB1bmRlZmluZWQpLCB0cnkgdG8gcmVhZCBpdCBvdXQgb2YgdGhlIG1ldGEgZWxlbWVudC5cbiAgICAgIC8vIE90aGVyd2lzZSB1c2UgdGhlIGdsb2JhbGx5IGRlZmluZWQgbmFtZXNwYWNlLCBldmVuIGlmIGl0J3MgZW1wdHkgKCcnKVxuICAgICAgdmFyIG5hbWVzcGFjZSA9ICggdGhpcy5nbG9iYWwubmFtZXNwYWNlID09PSB1bmRlZmluZWQgKSA/ICQoJy5mb3VuZGF0aW9uLWRhdGEtYXR0cmlidXRlLW5hbWVzcGFjZScpLmNzcygnZm9udC1mYW1pbHknKSA6IHRoaXMuZ2xvYmFsLm5hbWVzcGFjZTtcblxuICAgICAgLy8gRmluYWxseSwgaWYgdGhlIG5hbXNlcGFjZSBpcyBlaXRoZXIgdW5kZWZpbmVkIG9yIGZhbHNlLCBzZXQgaXQgdG8gYW4gZW1wdHkgc3RyaW5nLlxuICAgICAgLy8gT3RoZXJ3aXNlIHVzZSB0aGUgbmFtZXNwYWNlIHZhbHVlLlxuICAgICAgdGhpcy5nbG9iYWwubmFtZXNwYWNlID0gKCBuYW1lc3BhY2UgPT09IHVuZGVmaW5lZCB8fCAvZmFsc2UvaS50ZXN0KG5hbWVzcGFjZSkgKSA/ICcnIDogbmFtZXNwYWNlO1xuICAgIH0sXG5cbiAgICBsaWJzIDoge30sXG5cbiAgICAvLyBtZXRob2RzIHRoYXQgY2FuIGJlIGluaGVyaXRlZCBpbiBsaWJyYXJpZXNcbiAgICB1dGlscyA6IHtcblxuICAgICAgLy8gRGVzY3JpcHRpb246XG4gICAgICAvLyAgICBGYXN0IFNlbGVjdG9yIHdyYXBwZXIgcmV0dXJucyBqUXVlcnkgb2JqZWN0LiBPbmx5IHVzZSB3aGVyZSBnZXRFbGVtZW50QnlJZFxuICAgICAgLy8gICAgaXMgbm90IGF2YWlsYWJsZS5cbiAgICAgIC8vXG4gICAgICAvLyBBcmd1bWVudHM6XG4gICAgICAvLyAgICBTZWxlY3RvciAoU3RyaW5nKTogQ1NTIHNlbGVjdG9yIGRlc2NyaWJpbmcgdGhlIGVsZW1lbnQocykgdG8gYmVcbiAgICAgIC8vICAgIHJldHVybmVkIGFzIGEgalF1ZXJ5IG9iamVjdC5cbiAgICAgIC8vXG4gICAgICAvLyAgICBTY29wZSAoU3RyaW5nKTogQ1NTIHNlbGVjdG9yIGRlc2NyaWJpbmcgdGhlIGFyZWEgdG8gYmUgc2VhcmNoZWQuIERlZmF1bHRcbiAgICAgIC8vICAgIGlzIGRvY3VtZW50LlxuICAgICAgLy9cbiAgICAgIC8vIFJldHVybnM6XG4gICAgICAvLyAgICBFbGVtZW50IChqUXVlcnkgT2JqZWN0KTogalF1ZXJ5IG9iamVjdCBjb250YWluaW5nIGVsZW1lbnRzIG1hdGNoaW5nIHRoZVxuICAgICAgLy8gICAgc2VsZWN0b3Igd2l0aGluIHRoZSBzY29wZS5cbiAgICAgIFMgOiBTLFxuXG4gICAgICAvLyBEZXNjcmlwdGlvbjpcbiAgICAgIC8vICAgIEV4ZWN1dGVzIGEgZnVuY3Rpb24gYSBtYXggb2Ygb25jZSBldmVyeSBuIG1pbGxpc2Vjb25kc1xuICAgICAgLy9cbiAgICAgIC8vIEFyZ3VtZW50czpcbiAgICAgIC8vICAgIEZ1bmMgKEZ1bmN0aW9uKTogRnVuY3Rpb24gdG8gYmUgdGhyb3R0bGVkLlxuICAgICAgLy9cbiAgICAgIC8vICAgIERlbGF5IChJbnRlZ2VyKTogRnVuY3Rpb24gZXhlY3V0aW9uIHRocmVzaG9sZCBpbiBtaWxsaXNlY29uZHMuXG4gICAgICAvL1xuICAgICAgLy8gUmV0dXJuczpcbiAgICAgIC8vICAgIExhenlfZnVuY3Rpb24gKEZ1bmN0aW9uKTogRnVuY3Rpb24gd2l0aCB0aHJvdHRsaW5nIGFwcGxpZWQuXG4gICAgICB0aHJvdHRsZSA6IGZ1bmN0aW9uIChmdW5jLCBkZWxheSkge1xuICAgICAgICB2YXIgdGltZXIgPSBudWxsO1xuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLCBhcmdzID0gYXJndW1lbnRzO1xuXG4gICAgICAgICAgaWYgKHRpbWVyID09IG51bGwpIHtcbiAgICAgICAgICAgIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgICAgICAgIHRpbWVyID0gbnVsbDtcbiAgICAgICAgICAgIH0sIGRlbGF5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9LFxuXG4gICAgICAvLyBEZXNjcmlwdGlvbjpcbiAgICAgIC8vICAgIEV4ZWN1dGVzIGEgZnVuY3Rpb24gd2hlbiBpdCBzdG9wcyBiZWluZyBpbnZva2VkIGZvciBuIHNlY29uZHNcbiAgICAgIC8vICAgIE1vZGlmaWVkIHZlcnNpb24gb2YgXy5kZWJvdW5jZSgpIGh0dHA6Ly91bmRlcnNjb3JlanMub3JnXG4gICAgICAvL1xuICAgICAgLy8gQXJndW1lbnRzOlxuICAgICAgLy8gICAgRnVuYyAoRnVuY3Rpb24pOiBGdW5jdGlvbiB0byBiZSBkZWJvdW5jZWQuXG4gICAgICAvL1xuICAgICAgLy8gICAgRGVsYXkgKEludGVnZXIpOiBGdW5jdGlvbiBleGVjdXRpb24gdGhyZXNob2xkIGluIG1pbGxpc2Vjb25kcy5cbiAgICAgIC8vXG4gICAgICAvLyAgICBJbW1lZGlhdGUgKEJvb2wpOiBXaGV0aGVyIHRoZSBmdW5jdGlvbiBzaG91bGQgYmUgY2FsbGVkIGF0IHRoZSBiZWdpbm5pbmdcbiAgICAgIC8vICAgIG9mIHRoZSBkZWxheSBpbnN0ZWFkIG9mIHRoZSBlbmQuIERlZmF1bHQgaXMgZmFsc2UuXG4gICAgICAvL1xuICAgICAgLy8gUmV0dXJuczpcbiAgICAgIC8vICAgIExhenlfZnVuY3Rpb24gKEZ1bmN0aW9uKTogRnVuY3Rpb24gd2l0aCBkZWJvdW5jaW5nIGFwcGxpZWQuXG4gICAgICBkZWJvdW5jZSA6IGZ1bmN0aW9uIChmdW5jLCBkZWxheSwgaW1tZWRpYXRlKSB7XG4gICAgICAgIHZhciB0aW1lb3V0LCByZXN1bHQ7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLCBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICAgIHZhciBsYXRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgICAgaWYgKCFpbW1lZGlhdGUpIHtcbiAgICAgICAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICAgIHZhciBjYWxsTm93ID0gaW1tZWRpYXRlICYmICF0aW1lb3V0O1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgZGVsYXkpO1xuICAgICAgICAgIGlmIChjYWxsTm93KSB7XG4gICAgICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9O1xuICAgICAgfSxcblxuICAgICAgLy8gRGVzY3JpcHRpb246XG4gICAgICAvLyAgICBQYXJzZXMgZGF0YS1vcHRpb25zIGF0dHJpYnV0ZVxuICAgICAgLy9cbiAgICAgIC8vIEFyZ3VtZW50czpcbiAgICAgIC8vICAgIEVsIChqUXVlcnkgT2JqZWN0KTogRWxlbWVudCB0byBiZSBwYXJzZWQuXG4gICAgICAvL1xuICAgICAgLy8gUmV0dXJuczpcbiAgICAgIC8vICAgIE9wdGlvbnMgKEphdmFzY3JpcHQgT2JqZWN0KTogQ29udGVudHMgb2YgdGhlIGVsZW1lbnQncyBkYXRhLW9wdGlvbnNcbiAgICAgIC8vICAgIGF0dHJpYnV0ZS5cbiAgICAgIGRhdGFfb3B0aW9ucyA6IGZ1bmN0aW9uIChlbCwgZGF0YV9hdHRyX25hbWUpIHtcbiAgICAgICAgZGF0YV9hdHRyX25hbWUgPSBkYXRhX2F0dHJfbmFtZSB8fCAnb3B0aW9ucyc7XG4gICAgICAgIHZhciBvcHRzID0ge30sIGlpLCBwLCBvcHRzX2FycixcbiAgICAgICAgICAgIGRhdGFfb3B0aW9ucyA9IGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgICAgICB2YXIgbmFtZXNwYWNlID0gRm91bmRhdGlvbi5nbG9iYWwubmFtZXNwYWNlO1xuXG4gICAgICAgICAgICAgIGlmIChuYW1lc3BhY2UubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlbC5kYXRhKG5hbWVzcGFjZSArICctJyArIGRhdGFfYXR0cl9uYW1lKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHJldHVybiBlbC5kYXRhKGRhdGFfYXR0cl9uYW1lKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgdmFyIGNhY2hlZF9vcHRpb25zID0gZGF0YV9vcHRpb25zKGVsKTtcblxuICAgICAgICBpZiAodHlwZW9mIGNhY2hlZF9vcHRpb25zID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgIHJldHVybiBjYWNoZWRfb3B0aW9ucztcbiAgICAgICAgfVxuXG4gICAgICAgIG9wdHNfYXJyID0gKGNhY2hlZF9vcHRpb25zIHx8ICc6Jykuc3BsaXQoJzsnKTtcbiAgICAgICAgaWkgPSBvcHRzX2Fyci5sZW5ndGg7XG5cbiAgICAgICAgZnVuY3Rpb24gaXNOdW1iZXIgKG8pIHtcbiAgICAgICAgICByZXR1cm4gIWlzTmFOIChvIC0gMCkgJiYgbyAhPT0gbnVsbCAmJiBvICE9PSAnJyAmJiBvICE9PSBmYWxzZSAmJiBvICE9PSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gdHJpbSAoc3RyKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBzdHIgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gJC50cmltKHN0cik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBzdHI7XG4gICAgICAgIH1cblxuICAgICAgICB3aGlsZSAoaWktLSkge1xuICAgICAgICAgIHAgPSBvcHRzX2FycltpaV0uc3BsaXQoJzonKTtcbiAgICAgICAgICBwID0gW3BbMF0sIHAuc2xpY2UoMSkuam9pbignOicpXTtcblxuICAgICAgICAgIGlmICgvdHJ1ZS9pLnRlc3QocFsxXSkpIHtcbiAgICAgICAgICAgIHBbMV0gPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoL2ZhbHNlL2kudGVzdChwWzFdKSkge1xuICAgICAgICAgICAgcFsxXSA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXNOdW1iZXIocFsxXSkpIHtcbiAgICAgICAgICAgIGlmIChwWzFdLmluZGV4T2YoJy4nKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgcFsxXSA9IHBhcnNlSW50KHBbMV0sIDEwKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBbMV0gPSBwYXJzZUZsb2F0KHBbMV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChwLmxlbmd0aCA9PT0gMiAmJiBwWzBdLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIG9wdHNbdHJpbShwWzBdKV0gPSB0cmltKHBbMV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvcHRzO1xuICAgICAgfSxcblxuICAgICAgLy8gRGVzY3JpcHRpb246XG4gICAgICAvLyAgICBBZGRzIEpTLXJlY29nbml6YWJsZSBtZWRpYSBxdWVyaWVzXG4gICAgICAvL1xuICAgICAgLy8gQXJndW1lbnRzOlxuICAgICAgLy8gICAgTWVkaWEgKFN0cmluZyk6IEtleSBzdHJpbmcgZm9yIHRoZSBtZWRpYSBxdWVyeSB0byBiZSBzdG9yZWQgYXMgaW5cbiAgICAgIC8vICAgIEZvdW5kYXRpb24ubWVkaWFfcXVlcmllc1xuICAgICAgLy9cbiAgICAgIC8vICAgIENsYXNzIChTdHJpbmcpOiBDbGFzcyBuYW1lIGZvciB0aGUgZ2VuZXJhdGVkIDxtZXRhPiB0YWdcbiAgICAgIHJlZ2lzdGVyX21lZGlhIDogZnVuY3Rpb24gKG1lZGlhLCBtZWRpYV9jbGFzcykge1xuICAgICAgICBpZiAoRm91bmRhdGlvbi5tZWRpYV9xdWVyaWVzW21lZGlhXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgJCgnaGVhZCcpLmFwcGVuZCgnPG1ldGEgY2xhc3M9XCInICsgbWVkaWFfY2xhc3MgKyAnXCIvPicpO1xuICAgICAgICAgIEZvdW5kYXRpb24ubWVkaWFfcXVlcmllc1ttZWRpYV0gPSByZW1vdmVRdW90ZXMoJCgnLicgKyBtZWRpYV9jbGFzcykuY3NzKCdmb250LWZhbWlseScpKTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgLy8gRGVzY3JpcHRpb246XG4gICAgICAvLyAgICBBZGQgY3VzdG9tIENTUyB3aXRoaW4gYSBKUy1kZWZpbmVkIG1lZGlhIHF1ZXJ5XG4gICAgICAvL1xuICAgICAgLy8gQXJndW1lbnRzOlxuICAgICAgLy8gICAgUnVsZSAoU3RyaW5nKTogQ1NTIHJ1bGUgdG8gYmUgYXBwZW5kZWQgdG8gdGhlIGRvY3VtZW50LlxuICAgICAgLy9cbiAgICAgIC8vICAgIE1lZGlhIChTdHJpbmcpOiBPcHRpb25hbCBtZWRpYSBxdWVyeSBzdHJpbmcgZm9yIHRoZSBDU1MgcnVsZSB0byBiZVxuICAgICAgLy8gICAgbmVzdGVkIHVuZGVyLlxuICAgICAgYWRkX2N1c3RvbV9ydWxlIDogZnVuY3Rpb24gKHJ1bGUsIG1lZGlhKSB7XG4gICAgICAgIGlmIChtZWRpYSA9PT0gdW5kZWZpbmVkICYmIEZvdW5kYXRpb24uc3R5bGVzaGVldCkge1xuICAgICAgICAgIEZvdW5kYXRpb24uc3R5bGVzaGVldC5pbnNlcnRSdWxlKHJ1bGUsIEZvdW5kYXRpb24uc3R5bGVzaGVldC5jc3NSdWxlcy5sZW5ndGgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBxdWVyeSA9IEZvdW5kYXRpb24ubWVkaWFfcXVlcmllc1ttZWRpYV07XG5cbiAgICAgICAgICBpZiAocXVlcnkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgRm91bmRhdGlvbi5zdHlsZXNoZWV0Lmluc2VydFJ1bGUoJ0BtZWRpYSAnICtcbiAgICAgICAgICAgICAgRm91bmRhdGlvbi5tZWRpYV9xdWVyaWVzW21lZGlhXSArICd7ICcgKyBydWxlICsgJyB9JywgRm91bmRhdGlvbi5zdHlsZXNoZWV0LmNzc1J1bGVzLmxlbmd0aCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICAvLyBEZXNjcmlwdGlvbjpcbiAgICAgIC8vICAgIFBlcmZvcm1zIGEgY2FsbGJhY2sgZnVuY3Rpb24gd2hlbiBhbiBpbWFnZSBpcyBmdWxseSBsb2FkZWRcbiAgICAgIC8vXG4gICAgICAvLyBBcmd1bWVudHM6XG4gICAgICAvLyAgICBJbWFnZSAoalF1ZXJ5IE9iamVjdCk6IEltYWdlKHMpIHRvIGNoZWNrIGlmIGxvYWRlZC5cbiAgICAgIC8vXG4gICAgICAvLyAgICBDYWxsYmFjayAoRnVuY3Rpb24pOiBGdW5jdGlvbiB0byBleGVjdXRlIHdoZW4gaW1hZ2UgaXMgZnVsbHkgbG9hZGVkLlxuICAgICAgaW1hZ2VfbG9hZGVkIDogZnVuY3Rpb24gKGltYWdlcywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICAgICAgdW5sb2FkZWQgPSBpbWFnZXMubGVuZ3RoO1xuXG4gICAgICAgIGZ1bmN0aW9uIHBpY3R1cmVzX2hhc19oZWlnaHQoaW1hZ2VzKSB7XG4gICAgICAgICAgdmFyIHBpY3R1cmVzX251bWJlciA9IGltYWdlcy5sZW5ndGg7XG5cbiAgICAgICAgICBmb3IgKHZhciBpID0gcGljdHVyZXNfbnVtYmVyIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIGlmKGltYWdlcy5hdHRyKCdoZWlnaHQnKSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHVubG9hZGVkID09PSAwIHx8IHBpY3R1cmVzX2hhc19oZWlnaHQoaW1hZ2VzKSkge1xuICAgICAgICAgIGNhbGxiYWNrKGltYWdlcyk7XG4gICAgICAgIH1cblxuICAgICAgICBpbWFnZXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc2luZ2xlX2ltYWdlX2xvYWRlZChzZWxmLlModGhpcyksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHVubG9hZGVkIC09IDE7XG4gICAgICAgICAgICBpZiAodW5sb2FkZWQgPT09IDApIHtcbiAgICAgICAgICAgICAgY2FsbGJhY2soaW1hZ2VzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9LFxuXG4gICAgICAvLyBEZXNjcmlwdGlvbjpcbiAgICAgIC8vICAgIFJldHVybnMgYSByYW5kb20sIGFscGhhbnVtZXJpYyBzdHJpbmdcbiAgICAgIC8vXG4gICAgICAvLyBBcmd1bWVudHM6XG4gICAgICAvLyAgICBMZW5ndGggKEludGVnZXIpOiBMZW5ndGggb2Ygc3RyaW5nIHRvIGJlIGdlbmVyYXRlZC4gRGVmYXVsdHMgdG8gcmFuZG9tXG4gICAgICAvLyAgICBpbnRlZ2VyLlxuICAgICAgLy9cbiAgICAgIC8vIFJldHVybnM6XG4gICAgICAvLyAgICBSYW5kIChTdHJpbmcpOiBQc2V1ZG8tcmFuZG9tLCBhbHBoYW51bWVyaWMgc3RyaW5nLlxuICAgICAgcmFuZG9tX3N0ciA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmZpZHgpIHtcbiAgICAgICAgICB0aGlzLmZpZHggPSAwO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucHJlZml4ID0gdGhpcy5wcmVmaXggfHwgWyh0aGlzLm5hbWUgfHwgJ0YnKSwgKCtuZXcgRGF0ZSkudG9TdHJpbmcoMzYpXS5qb2luKCctJyk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMucHJlZml4ICsgKHRoaXMuZmlkeCsrKS50b1N0cmluZygzNik7XG4gICAgICB9LFxuXG4gICAgICAvLyBEZXNjcmlwdGlvbjpcbiAgICAgIC8vICAgIEhlbHBlciBmb3Igd2luZG93Lm1hdGNoTWVkaWFcbiAgICAgIC8vXG4gICAgICAvLyBBcmd1bWVudHM6XG4gICAgICAvLyAgICBtcSAoU3RyaW5nKTogTWVkaWEgcXVlcnlcbiAgICAgIC8vXG4gICAgICAvLyBSZXR1cm5zOlxuICAgICAgLy8gICAgKEJvb2xlYW4pOiBXaGV0aGVyIHRoZSBtZWRpYSBxdWVyeSBwYXNzZXMgb3Igbm90XG4gICAgICBtYXRjaCA6IGZ1bmN0aW9uIChtcSkge1xuICAgICAgICByZXR1cm4gd2luZG93Lm1hdGNoTWVkaWEobXEpLm1hdGNoZXM7XG4gICAgICB9LFxuXG4gICAgICAvLyBEZXNjcmlwdGlvbjpcbiAgICAgIC8vICAgIEhlbHBlcnMgZm9yIGNoZWNraW5nIEZvdW5kYXRpb24gZGVmYXVsdCBtZWRpYSBxdWVyaWVzIHdpdGggSlNcbiAgICAgIC8vXG4gICAgICAvLyBSZXR1cm5zOlxuICAgICAgLy8gICAgKEJvb2xlYW4pOiBXaGV0aGVyIHRoZSBtZWRpYSBxdWVyeSBwYXNzZXMgb3Igbm90XG5cbiAgICAgIGlzX3NtYWxsX3VwIDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXRjaChGb3VuZGF0aW9uLm1lZGlhX3F1ZXJpZXMuc21hbGwpO1xuICAgICAgfSxcblxuICAgICAgaXNfbWVkaXVtX3VwIDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXRjaChGb3VuZGF0aW9uLm1lZGlhX3F1ZXJpZXMubWVkaXVtKTtcbiAgICAgIH0sXG5cbiAgICAgIGlzX2xhcmdlX3VwIDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXRjaChGb3VuZGF0aW9uLm1lZGlhX3F1ZXJpZXMubGFyZ2UpO1xuICAgICAgfSxcblxuICAgICAgaXNfeGxhcmdlX3VwIDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXRjaChGb3VuZGF0aW9uLm1lZGlhX3F1ZXJpZXMueGxhcmdlKTtcbiAgICAgIH0sXG5cbiAgICAgIGlzX3h4bGFyZ2VfdXAgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1hdGNoKEZvdW5kYXRpb24ubWVkaWFfcXVlcmllcy54eGxhcmdlKTtcbiAgICAgIH0sXG5cbiAgICAgIGlzX3NtYWxsX29ubHkgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy5pc19tZWRpdW1fdXAoKSAmJiAhdGhpcy5pc19sYXJnZV91cCgpICYmICF0aGlzLmlzX3hsYXJnZV91cCgpICYmICF0aGlzLmlzX3h4bGFyZ2VfdXAoKTtcbiAgICAgIH0sXG5cbiAgICAgIGlzX21lZGl1bV9vbmx5IDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc19tZWRpdW1fdXAoKSAmJiAhdGhpcy5pc19sYXJnZV91cCgpICYmICF0aGlzLmlzX3hsYXJnZV91cCgpICYmICF0aGlzLmlzX3h4bGFyZ2VfdXAoKTtcbiAgICAgIH0sXG5cbiAgICAgIGlzX2xhcmdlX29ubHkgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzX21lZGl1bV91cCgpICYmIHRoaXMuaXNfbGFyZ2VfdXAoKSAmJiAhdGhpcy5pc194bGFyZ2VfdXAoKSAmJiAhdGhpcy5pc194eGxhcmdlX3VwKCk7XG4gICAgICB9LFxuXG4gICAgICBpc194bGFyZ2Vfb25seSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNfbWVkaXVtX3VwKCkgJiYgdGhpcy5pc19sYXJnZV91cCgpICYmIHRoaXMuaXNfeGxhcmdlX3VwKCkgJiYgIXRoaXMuaXNfeHhsYXJnZV91cCgpO1xuICAgICAgfSxcblxuICAgICAgaXNfeHhsYXJnZV9vbmx5IDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc19tZWRpdW1fdXAoKSAmJiB0aGlzLmlzX2xhcmdlX3VwKCkgJiYgdGhpcy5pc194bGFyZ2VfdXAoKSAmJiB0aGlzLmlzX3h4bGFyZ2VfdXAoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgJC5mbi5mb3VuZGF0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcblxuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgRm91bmRhdGlvbi5pbml0LmFwcGx5KEZvdW5kYXRpb24sIFt0aGlzXS5jb25jYXQoYXJncykpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSk7XG4gIH07XG5cbn0oalF1ZXJ5LCB3aW5kb3csIHdpbmRvdy5kb2N1bWVudCkpO1xuIiwiOyhmdW5jdGlvbiAoJCwgd2luZG93LCBkb2N1bWVudCwgdW5kZWZpbmVkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgb3Blbk1vZGFscyA9IFtdO1xuXG4gIEZvdW5kYXRpb24ubGlicy5yZXZlYWwgPSB7XG4gICAgbmFtZSA6ICdyZXZlYWwnLFxuXG4gICAgdmVyc2lvbiA6ICc1LjUuMycsXG5cbiAgICBsb2NrZWQgOiBmYWxzZSxcblxuICAgIHNldHRpbmdzIDoge1xuICAgICAgYW5pbWF0aW9uIDogJ2ZhZGVBbmRQb3AnLFxuICAgICAgYW5pbWF0aW9uX3NwZWVkIDogMjUwLFxuICAgICAgY2xvc2Vfb25fYmFja2dyb3VuZF9jbGljayA6IHRydWUsXG4gICAgICBjbG9zZV9vbl9lc2MgOiB0cnVlLFxuICAgICAgZGlzbWlzc19tb2RhbF9jbGFzcyA6ICdjbG9zZS1yZXZlYWwtbW9kYWwnLFxuICAgICAgbXVsdGlwbGVfb3BlbmVkIDogZmFsc2UsXG4gICAgICBiZ19jbGFzcyA6ICdyZXZlYWwtbW9kYWwtYmcnLFxuICAgICAgcm9vdF9lbGVtZW50IDogJ2JvZHknLFxuICAgICAgb3BlbiA6IGZ1bmN0aW9uKCl7fSxcbiAgICAgIG9wZW5lZCA6IGZ1bmN0aW9uKCl7fSxcbiAgICAgIGNsb3NlIDogZnVuY3Rpb24oKXt9LFxuICAgICAgY2xvc2VkIDogZnVuY3Rpb24oKXt9LFxuICAgICAgb25fYWpheF9lcnJvcjogJC5ub29wLFxuICAgICAgYmcgOiAkKCcucmV2ZWFsLW1vZGFsLWJnJyksXG4gICAgICBjc3MgOiB7XG4gICAgICAgIG9wZW4gOiB7XG4gICAgICAgICAgJ29wYWNpdHknIDogMCxcbiAgICAgICAgICAndmlzaWJpbGl0eScgOiAndmlzaWJsZScsXG4gICAgICAgICAgJ2Rpc3BsYXknIDogJ2Jsb2NrJ1xuICAgICAgICB9LFxuICAgICAgICBjbG9zZSA6IHtcbiAgICAgICAgICAnb3BhY2l0eScgOiAxLFxuICAgICAgICAgICd2aXNpYmlsaXR5JyA6ICdoaWRkZW4nLFxuICAgICAgICAgICdkaXNwbGF5JyA6ICdub25lJ1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGluaXQgOiBmdW5jdGlvbiAoc2NvcGUsIG1ldGhvZCwgb3B0aW9ucykge1xuICAgICAgJC5leHRlbmQodHJ1ZSwgdGhpcy5zZXR0aW5ncywgbWV0aG9kLCBvcHRpb25zKTtcbiAgICAgIHRoaXMuYmluZGluZ3MobWV0aG9kLCBvcHRpb25zKTtcbiAgICB9LFxuXG4gICAgZXZlbnRzIDogZnVuY3Rpb24gKHNjb3BlKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgICAgUyA9IHNlbGYuUztcblxuICAgICAgUyh0aGlzLnNjb3BlKVxuICAgICAgICAub2ZmKCcucmV2ZWFsJylcbiAgICAgICAgLm9uKCdjbGljay5mbmR0bi5yZXZlYWwnLCAnWycgKyB0aGlzLmFkZF9uYW1lc3BhY2UoJ2RhdGEtcmV2ZWFsLWlkJykgKyAnXTpub3QoW2Rpc2FibGVkXSknLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgIGlmICghc2VsZi5sb2NrZWQpIHtcbiAgICAgICAgICAgIHZhciBlbGVtZW50ID0gUyh0aGlzKSxcbiAgICAgICAgICAgICAgICBhamF4ID0gZWxlbWVudC5kYXRhKHNlbGYuZGF0YV9hdHRyKCdyZXZlYWwtYWpheCcpKSxcbiAgICAgICAgICAgICAgICByZXBsYWNlQ29udGVudFNlbCA9IGVsZW1lbnQuZGF0YShzZWxmLmRhdGFfYXR0cigncmV2ZWFsLXJlcGxhY2UtY29udGVudCcpKTtcblxuICAgICAgICAgICAgc2VsZi5sb2NrZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGFqYXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIHNlbGYub3Blbi5jYWxsKHNlbGYsIGVsZW1lbnQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdmFyIHVybCA9IGFqYXggPT09IHRydWUgPyBlbGVtZW50LmF0dHIoJ2hyZWYnKSA6IGFqYXg7XG4gICAgICAgICAgICAgIHNlbGYub3Blbi5jYWxsKHNlbGYsIGVsZW1lbnQsIHt1cmwgOiB1cmx9LCB7IHJlcGxhY2VDb250ZW50U2VsIDogcmVwbGFjZUNvbnRlbnRTZWwgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgUyhkb2N1bWVudClcbiAgICAgICAgLm9uKCdjbGljay5mbmR0bi5yZXZlYWwnLCB0aGlzLmNsb3NlX3RhcmdldHMoKSwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgaWYgKCFzZWxmLmxvY2tlZCkge1xuICAgICAgICAgICAgdmFyIHNldHRpbmdzID0gUygnWycgKyBzZWxmLmF0dHJfbmFtZSgpICsgJ10ub3BlbicpLmRhdGEoc2VsZi5hdHRyX25hbWUodHJ1ZSkgKyAnLWluaXQnKSB8fCBzZWxmLnNldHRpbmdzLFxuICAgICAgICAgICAgICAgIGJnX2NsaWNrZWQgPSBTKGUudGFyZ2V0KVswXSA9PT0gUygnLicgKyBzZXR0aW5ncy5iZ19jbGFzcylbMF07XG5cbiAgICAgICAgICAgIGlmIChiZ19jbGlja2VkKSB7XG4gICAgICAgICAgICAgIGlmIChzZXR0aW5ncy5jbG9zZV9vbl9iYWNrZ3JvdW5kX2NsaWNrKSB7XG4gICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2VsZi5sb2NrZWQgPSB0cnVlO1xuICAgICAgICAgICAgc2VsZi5jbG9zZS5jYWxsKHNlbGYsIGJnX2NsaWNrZWQgPyBTKCdbJyArIHNlbGYuYXR0cl9uYW1lKCkgKyAnXS5vcGVuOm5vdCgudG9iYWNrKScpIDogUyh0aGlzKS5jbG9zZXN0KCdbJyArIHNlbGYuYXR0cl9uYW1lKCkgKyAnXScpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICBpZiAoUygnWycgKyBzZWxmLmF0dHJfbmFtZSgpICsgJ10nLCB0aGlzLnNjb3BlKS5sZW5ndGggPiAwKSB7XG4gICAgICAgIFModGhpcy5zY29wZSlcbiAgICAgICAgICAvLyAub2ZmKCcucmV2ZWFsJylcbiAgICAgICAgICAub24oJ29wZW4uZm5kdG4ucmV2ZWFsJywgdGhpcy5zZXR0aW5ncy5vcGVuKVxuICAgICAgICAgIC5vbignb3BlbmVkLmZuZHRuLnJldmVhbCcsIHRoaXMuc2V0dGluZ3Mub3BlbmVkKVxuICAgICAgICAgIC5vbignb3BlbmVkLmZuZHRuLnJldmVhbCcsIHRoaXMub3Blbl92aWRlbylcbiAgICAgICAgICAub24oJ2Nsb3NlLmZuZHRuLnJldmVhbCcsIHRoaXMuc2V0dGluZ3MuY2xvc2UpXG4gICAgICAgICAgLm9uKCdjbG9zZWQuZm5kdG4ucmV2ZWFsJywgdGhpcy5zZXR0aW5ncy5jbG9zZWQpXG4gICAgICAgICAgLm9uKCdjbG9zZWQuZm5kdG4ucmV2ZWFsJywgdGhpcy5jbG9zZV92aWRlbyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBTKHRoaXMuc2NvcGUpXG4gICAgICAgICAgLy8gLm9mZignLnJldmVhbCcpXG4gICAgICAgICAgLm9uKCdvcGVuLmZuZHRuLnJldmVhbCcsICdbJyArIHNlbGYuYXR0cl9uYW1lKCkgKyAnXScsIHRoaXMuc2V0dGluZ3Mub3BlbilcbiAgICAgICAgICAub24oJ29wZW5lZC5mbmR0bi5yZXZlYWwnLCAnWycgKyBzZWxmLmF0dHJfbmFtZSgpICsgJ10nLCB0aGlzLnNldHRpbmdzLm9wZW5lZClcbiAgICAgICAgICAub24oJ29wZW5lZC5mbmR0bi5yZXZlYWwnLCAnWycgKyBzZWxmLmF0dHJfbmFtZSgpICsgJ10nLCB0aGlzLm9wZW5fdmlkZW8pXG4gICAgICAgICAgLm9uKCdjbG9zZS5mbmR0bi5yZXZlYWwnLCAnWycgKyBzZWxmLmF0dHJfbmFtZSgpICsgJ10nLCB0aGlzLnNldHRpbmdzLmNsb3NlKVxuICAgICAgICAgIC5vbignY2xvc2VkLmZuZHRuLnJldmVhbCcsICdbJyArIHNlbGYuYXR0cl9uYW1lKCkgKyAnXScsIHRoaXMuc2V0dGluZ3MuY2xvc2VkKVxuICAgICAgICAgIC5vbignY2xvc2VkLmZuZHRuLnJldmVhbCcsICdbJyArIHNlbGYuYXR0cl9uYW1lKCkgKyAnXScsIHRoaXMuY2xvc2VfdmlkZW8pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuXG4gICAgLy8gUEFUQ0ggIzM6IHR1cm5pbmcgb24ga2V5IHVwIGNhcHR1cmUgb25seSB3aGVuIGEgcmV2ZWFsIHdpbmRvdyBpcyBvcGVuXG4gICAga2V5X3VwX29uIDogZnVuY3Rpb24gKHNjb3BlKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgIC8vIFBBVENIICMxOiBmaXhpbmcgbXVsdGlwbGUga2V5dXAgZXZlbnQgdHJpZ2dlciBmcm9tIHNpbmdsZSBrZXkgcHJlc3NcbiAgICAgIHNlbGYuUygnYm9keScpLm9mZigna2V5dXAuZm5kdG4ucmV2ZWFsJykub24oJ2tleXVwLmZuZHRuLnJldmVhbCcsIGZ1bmN0aW9uICggZXZlbnQgKSB7XG4gICAgICAgIHZhciBvcGVuX21vZGFsID0gc2VsZi5TKCdbJyArIHNlbGYuYXR0cl9uYW1lKCkgKyAnXS5vcGVuJyksXG4gICAgICAgICAgICBzZXR0aW5ncyA9IG9wZW5fbW9kYWwuZGF0YShzZWxmLmF0dHJfbmFtZSh0cnVlKSArICctaW5pdCcpIHx8IHNlbGYuc2V0dGluZ3MgO1xuICAgICAgICAvLyBQQVRDSCAjMjogbWFraW5nIHN1cmUgdGhhdCB0aGUgY2xvc2UgZXZlbnQgY2FuIGJlIGNhbGxlZCBvbmx5IHdoaWxlIHVubG9ja2VkLFxuICAgICAgICAvLyAgICAgICAgICAgc28gdGhhdCBtdWx0aXBsZSBrZXl1cC5mbmR0bi5yZXZlYWwgZXZlbnRzIGRvbid0IHByZXZlbnQgY2xlYW4gY2xvc2luZyBvZiB0aGUgcmV2ZWFsIHdpbmRvdy5cbiAgICAgICAgaWYgKCBzZXR0aW5ncyAmJiBldmVudC53aGljaCA9PT0gMjcgICYmIHNldHRpbmdzLmNsb3NlX29uX2VzYyAmJiAhc2VsZi5sb2NrZWQpIHsgLy8gMjcgaXMgdGhlIGtleWNvZGUgZm9yIHRoZSBFc2NhcGUga2V5XG4gICAgICAgICAgc2VsZi5jbG9zZS5jYWxsKHNlbGYsIG9wZW5fbW9kYWwpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcblxuICAgIC8vIFBBVENIICMzOiB0dXJuaW5nIG9uIGtleSB1cCBjYXB0dXJlIG9ubHkgd2hlbiBhIHJldmVhbCB3aW5kb3cgaXMgb3BlblxuICAgIGtleV91cF9vZmYgOiBmdW5jdGlvbiAoc2NvcGUpIHtcbiAgICAgIHRoaXMuUygnYm9keScpLm9mZigna2V5dXAuZm5kdG4ucmV2ZWFsJyk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuXG4gICAgb3BlbiA6IGZ1bmN0aW9uICh0YXJnZXQsIGFqYXhfc2V0dGluZ3MpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgICAgICBtb2RhbDtcblxuICAgICAgaWYgKHRhcmdldCkge1xuICAgICAgICBpZiAodHlwZW9mIHRhcmdldC5zZWxlY3RvciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAvLyBGaW5kIHRoZSBuYW1lZCBub2RlOyBvbmx5IHVzZSB0aGUgZmlyc3Qgb25lIGZvdW5kLCBzaW5jZSB0aGUgcmVzdCBvZiB0aGUgY29kZSBhc3N1bWVzIHRoZXJlJ3Mgb25seSBvbmUgbm9kZVxuICAgICAgICAgIG1vZGFsID0gc2VsZi5TKCcjJyArIHRhcmdldC5kYXRhKHNlbGYuZGF0YV9hdHRyKCdyZXZlYWwtaWQnKSkpLmZpcnN0KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbW9kYWwgPSBzZWxmLlModGhpcy5zY29wZSk7XG5cbiAgICAgICAgICBhamF4X3NldHRpbmdzID0gdGFyZ2V0O1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtb2RhbCA9IHNlbGYuUyh0aGlzLnNjb3BlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHNldHRpbmdzID0gbW9kYWwuZGF0YShzZWxmLmF0dHJfbmFtZSh0cnVlKSArICctaW5pdCcpO1xuICAgICAgc2V0dGluZ3MgPSBzZXR0aW5ncyB8fCB0aGlzLnNldHRpbmdzO1xuXG5cbiAgICAgIGlmIChtb2RhbC5oYXNDbGFzcygnb3BlbicpICYmIHRhcmdldCAhPT0gdW5kZWZpbmVkICYmIHRhcmdldC5hdHRyKCdkYXRhLXJldmVhbC1pZCcpID09IG1vZGFsLmF0dHIoJ2lkJykpIHtcbiAgICAgICAgcmV0dXJuIHNlbGYuY2xvc2UobW9kYWwpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIW1vZGFsLmhhc0NsYXNzKCdvcGVuJykpIHtcbiAgICAgICAgdmFyIG9wZW5fbW9kYWwgPSBzZWxmLlMoJ1snICsgc2VsZi5hdHRyX25hbWUoKSArICddLm9wZW4nKTtcblxuICAgICAgICBpZiAodHlwZW9mIG1vZGFsLmRhdGEoJ2Nzcy10b3AnKSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBtb2RhbC5kYXRhKCdjc3MtdG9wJywgcGFyc2VJbnQobW9kYWwuY3NzKCd0b3AnKSwgMTApKVxuICAgICAgICAgICAgLmRhdGEoJ29mZnNldCcsIHRoaXMuY2FjaGVfb2Zmc2V0KG1vZGFsKSk7XG4gICAgICAgIH1cblxuICAgICAgICBtb2RhbC5hdHRyKCd0YWJpbmRleCcsJzAnKS5hdHRyKCdhcmlhLWhpZGRlbicsJ2ZhbHNlJyk7XG5cbiAgICAgICAgdGhpcy5rZXlfdXBfb24obW9kYWwpOyAgICAvLyBQQVRDSCAjMzogdHVybmluZyBvbiBrZXkgdXAgY2FwdHVyZSBvbmx5IHdoZW4gYSByZXZlYWwgd2luZG93IGlzIG9wZW5cblxuICAgICAgICAvLyBQcmV2ZW50IG5hbWVzcGFjZSBldmVudCBmcm9tIHRyaWdnZXJpbmcgdHdpY2VcbiAgICAgICAgbW9kYWwub24oJ29wZW4uZm5kdG4ucmV2ZWFsJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgIGlmIChlLm5hbWVzcGFjZSAhPT0gJ2ZuZHRuLnJldmVhbCcpIHJldHVybjtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbW9kYWwub24oJ29wZW4uZm5kdG4ucmV2ZWFsJykudHJpZ2dlcignb3Blbi5mbmR0bi5yZXZlYWwnKTtcblxuICAgICAgICBpZiAob3Blbl9tb2RhbC5sZW5ndGggPCAxKSB7XG4gICAgICAgICAgdGhpcy50b2dnbGVfYmcobW9kYWwsIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBhamF4X3NldHRpbmdzID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGFqYXhfc2V0dGluZ3MgPSB7XG4gICAgICAgICAgICB1cmwgOiBhamF4X3NldHRpbmdzXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvcGVuTW9kYWwgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZihvcGVuX21vZGFsLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGlmKHNldHRpbmdzLm11bHRpcGxlX29wZW5lZCkge1xuICAgICAgICAgICAgICBzZWxmLnRvX2JhY2sob3Blbl9tb2RhbCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzZWxmLmhpZGUob3Blbl9tb2RhbCwgc2V0dGluZ3MuY3NzLmNsb3NlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBibDogYWRkIHRoZSBvcGVuX21vZGFsIHRoYXQgaXNuJ3QgYWxyZWFkeSBpbiB0aGUgYmFja2dyb3VuZCB0byB0aGUgb3Blbk1vZGFscyBhcnJheVxuICAgICAgICAgIGlmKHNldHRpbmdzLm11bHRpcGxlX29wZW5lZCkge1xuICAgICAgICAgICAgb3Blbk1vZGFscy5wdXNoKG1vZGFsKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzZWxmLnNob3cobW9kYWwsIHNldHRpbmdzLmNzcy5vcGVuKTtcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAodHlwZW9mIGFqYXhfc2V0dGluZ3MgPT09ICd1bmRlZmluZWQnIHx8ICFhamF4X3NldHRpbmdzLnVybCkge1xuICAgICAgICAgIG9wZW5Nb2RhbCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBvbGRfc3VjY2VzcyA9IHR5cGVvZiBhamF4X3NldHRpbmdzLnN1Y2Nlc3MgIT09ICd1bmRlZmluZWQnID8gYWpheF9zZXR0aW5ncy5zdWNjZXNzIDogbnVsbDtcbiAgICAgICAgICAkLmV4dGVuZChhamF4X3NldHRpbmdzLCB7XG4gICAgICAgICAgICBzdWNjZXNzIDogZnVuY3Rpb24gKGRhdGEsIHRleHRTdGF0dXMsIGpxWEhSKSB7XG4gICAgICAgICAgICAgIGlmICggJC5pc0Z1bmN0aW9uKG9sZF9zdWNjZXNzKSApIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gb2xkX3N1Y2Nlc3MoZGF0YSwgdGV4dFN0YXR1cywganFYSFIpO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICBkYXRhID0gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG9wdGlvbnMucmVwbGFjZUNvbnRlbnRTZWwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgbW9kYWwuZmluZChvcHRpb25zLnJlcGxhY2VDb250ZW50U2VsKS5odG1sKGRhdGEpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG1vZGFsLmh0bWwoZGF0YSk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBzZWxmLlMobW9kYWwpLmZvdW5kYXRpb24oJ3NlY3Rpb24nLCAncmVmbG93Jyk7XG4gICAgICAgICAgICAgIHNlbGYuUyhtb2RhbCkuY2hpbGRyZW4oKS5mb3VuZGF0aW9uKCk7XG5cbiAgICAgICAgICAgICAgb3Blbk1vZGFsKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICAvLyBjaGVjayBmb3IgaWYgdXNlciBpbml0YWxpemVkIHdpdGggZXJyb3IgY2FsbGJhY2tcbiAgICAgICAgICBpZiAoc2V0dGluZ3Mub25fYWpheF9lcnJvciAhPT0gJC5ub29wKSB7XG4gICAgICAgICAgICAkLmV4dGVuZChhamF4X3NldHRpbmdzLCB7XG4gICAgICAgICAgICAgIGVycm9yIDogc2V0dGluZ3Mub25fYWpheF9lcnJvclxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgJC5hamF4KGFqYXhfc2V0dGluZ3MpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzZWxmLlMod2luZG93KS50cmlnZ2VyKCdyZXNpemUnKTtcbiAgICB9LFxuXG4gICAgY2xvc2UgOiBmdW5jdGlvbiAobW9kYWwpIHtcbiAgICAgIHZhciBtb2RhbCA9IG1vZGFsICYmIG1vZGFsLmxlbmd0aCA/IG1vZGFsIDogdGhpcy5TKHRoaXMuc2NvcGUpLFxuICAgICAgICAgIG9wZW5fbW9kYWxzID0gdGhpcy5TKCdbJyArIHRoaXMuYXR0cl9uYW1lKCkgKyAnXS5vcGVuJyksXG4gICAgICAgICAgc2V0dGluZ3MgPSBtb2RhbC5kYXRhKHRoaXMuYXR0cl9uYW1lKHRydWUpICsgJy1pbml0JykgfHwgdGhpcy5zZXR0aW5ncyxcbiAgICAgICAgICBzZWxmID0gdGhpcztcblxuICAgICAgaWYgKG9wZW5fbW9kYWxzLmxlbmd0aCA+IDApIHtcblxuICAgICAgICBtb2RhbC5yZW1vdmVBdHRyKCd0YWJpbmRleCcsJzAnKS5hdHRyKCdhcmlhLWhpZGRlbicsJ3RydWUnKTtcblxuICAgICAgICB0aGlzLmxvY2tlZCA9IHRydWU7XG4gICAgICAgIHRoaXMua2V5X3VwX29mZihtb2RhbCk7ICAgLy8gUEFUQ0ggIzM6IHR1cm5pbmcgb24ga2V5IHVwIGNhcHR1cmUgb25seSB3aGVuIGEgcmV2ZWFsIHdpbmRvdyBpcyBvcGVuXG5cbiAgICAgICAgbW9kYWwudHJpZ2dlcignY2xvc2UuZm5kdG4ucmV2ZWFsJyk7XG5cbiAgICAgICAgaWYgKChzZXR0aW5ncy5tdWx0aXBsZV9vcGVuZWQgJiYgb3Blbl9tb2RhbHMubGVuZ3RoID09PSAxKSB8fCAhc2V0dGluZ3MubXVsdGlwbGVfb3BlbmVkIHx8IG1vZGFsLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBzZWxmLnRvZ2dsZV9iZyhtb2RhbCwgZmFsc2UpO1xuICAgICAgICAgIHNlbGYudG9fZnJvbnQobW9kYWwpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNldHRpbmdzLm11bHRpcGxlX29wZW5lZCkge1xuICAgICAgICAgIHZhciBpc0N1cnJlbnQgPSBtb2RhbC5pcygnOm5vdCgudG9iYWNrKScpO1xuICAgICAgICAgIHNlbGYuaGlkZShtb2RhbCwgc2V0dGluZ3MuY3NzLmNsb3NlLCBzZXR0aW5ncyk7XG4gICAgICAgICAgaWYoaXNDdXJyZW50KSB7XG4gICAgICAgICAgICAvLyByZW1vdmUgdGhlIGxhc3QgbW9kYWwgc2luY2UgaXQgaXMgbm93IGNsb3NlZFxuICAgICAgICAgICAgb3Blbk1vZGFscy5wb3AoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gaWYgdGhpcyBpc24ndCB0aGUgY3VycmVudCBtb2RhbCwgdGhlbiBmaW5kIGl0IGluIHRoZSBhcnJheSBhbmQgcmVtb3ZlIGl0XG4gICAgICAgICAgICBvcGVuTW9kYWxzID0gJC5ncmVwKG9wZW5Nb2RhbHMsIGZ1bmN0aW9uKGVsdCkge1xuICAgICAgICAgICAgICB2YXIgaXNUaGlzID0gZWx0WzBdPT09bW9kYWxbMF07XG4gICAgICAgICAgICAgIGlmKGlzVGhpcykge1xuICAgICAgICAgICAgICAgIC8vIHNpbmNlIGl0J3Mgbm90IGN1cnJlbnRseSBpbiB0aGUgZnJvbnQsIHB1dCBpdCBpbiB0aGUgZnJvbnQgbm93IHRoYXQgaXQgaXMgaGlkZGVuXG4gICAgICAgICAgICAgICAgLy8gc28gdGhhdCBpZiBpdCdzIHJlLW9wZW5lZCwgaXQgd29uJ3QgYmUgLnRvYmFja1xuICAgICAgICAgICAgICAgIHNlbGYudG9fZnJvbnQobW9kYWwpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiAhaXNUaGlzO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIGZpbmFsbHksIHNob3cgdGhlIG5leHQgbW9kYWwgaW4gdGhlIHN0YWNrLCBpZiB0aGVyZSBpcyBvbmVcbiAgICAgICAgICBpZihvcGVuTW9kYWxzLmxlbmd0aD4wKSB7XG4gICAgICAgICAgICBzZWxmLnRvX2Zyb250KG9wZW5Nb2RhbHNbb3Blbk1vZGFscy5sZW5ndGggLSAxXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlbGYuaGlkZShvcGVuX21vZGFscywgc2V0dGluZ3MuY3NzLmNsb3NlLCBzZXR0aW5ncyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgY2xvc2VfdGFyZ2V0cyA6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBiYXNlID0gJy4nICsgdGhpcy5zZXR0aW5ncy5kaXNtaXNzX21vZGFsX2NsYXNzO1xuXG4gICAgICBpZiAodGhpcy5zZXR0aW5ncy5jbG9zZV9vbl9iYWNrZ3JvdW5kX2NsaWNrKSB7XG4gICAgICAgIHJldHVybiBiYXNlICsgJywgLicgKyB0aGlzLnNldHRpbmdzLmJnX2NsYXNzO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYmFzZTtcbiAgICB9LFxuXG4gICAgdG9nZ2xlX2JnIDogZnVuY3Rpb24gKG1vZGFsLCBzdGF0ZSkge1xuICAgICAgaWYgKHRoaXMuUygnLicgKyB0aGlzLnNldHRpbmdzLmJnX2NsYXNzKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhpcy5zZXR0aW5ncy5iZyA9ICQoJzxkaXYgLz4nLCB7J2NsYXNzJzogdGhpcy5zZXR0aW5ncy5iZ19jbGFzc30pXG4gICAgICAgICAgLmFwcGVuZFRvKCdib2R5JykuaGlkZSgpO1xuICAgICAgfVxuXG4gICAgICB2YXIgdmlzaWJsZSA9IHRoaXMuc2V0dGluZ3MuYmcuZmlsdGVyKCc6dmlzaWJsZScpLmxlbmd0aCA+IDA7XG4gICAgICBpZiAoIHN0YXRlICE9IHZpc2libGUgKSB7XG4gICAgICAgIGlmICggc3RhdGUgPT0gdW5kZWZpbmVkID8gdmlzaWJsZSA6ICFzdGF0ZSApIHtcbiAgICAgICAgICB0aGlzLmhpZGUodGhpcy5zZXR0aW5ncy5iZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5zaG93KHRoaXMuc2V0dGluZ3MuYmcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHNob3cgOiBmdW5jdGlvbiAoZWwsIGNzcykge1xuICAgICAgLy8gaXMgbW9kYWxcbiAgICAgIGlmIChjc3MpIHtcbiAgICAgICAgdmFyIHNldHRpbmdzID0gZWwuZGF0YSh0aGlzLmF0dHJfbmFtZSh0cnVlKSArICctaW5pdCcpIHx8IHRoaXMuc2V0dGluZ3MsXG4gICAgICAgICAgICByb290X2VsZW1lbnQgPSBzZXR0aW5ncy5yb290X2VsZW1lbnQsXG4gICAgICAgICAgICBjb250ZXh0ID0gdGhpcztcblxuICAgICAgICBpZiAoZWwucGFyZW50KHJvb3RfZWxlbWVudCkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgdmFyIHBsYWNlaG9sZGVyID0gZWwud3JhcCgnPGRpdiBzdHlsZT1cImRpc3BsYXk6IG5vbmU7XCIgLz4nKS5wYXJlbnQoKTtcblxuICAgICAgICAgIGVsLm9uKCdjbG9zZWQuZm5kdG4ucmV2ZWFsLndyYXBwZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBlbC5kZXRhY2goKS5hcHBlbmRUbyhwbGFjZWhvbGRlcik7XG4gICAgICAgICAgICBlbC51bndyYXAoKS51bmJpbmQoJ2Nsb3NlZC5mbmR0bi5yZXZlYWwud3JhcHBlZCcpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgZWwuZGV0YWNoKCkuYXBwZW5kVG8ocm9vdF9lbGVtZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBhbmltRGF0YSA9IGdldEFuaW1hdGlvbkRhdGEoc2V0dGluZ3MuYW5pbWF0aW9uKTtcbiAgICAgICAgaWYgKCFhbmltRGF0YS5hbmltYXRlKSB7XG4gICAgICAgICAgdGhpcy5sb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYW5pbURhdGEucG9wKSB7XG4gICAgICAgICAgY3NzLnRvcCA9ICQod2luZG93KS5zY3JvbGxUb3AoKSAtIGVsLmRhdGEoJ29mZnNldCcpICsgJ3B4JztcbiAgICAgICAgICB2YXIgZW5kX2NzcyA9IHtcbiAgICAgICAgICAgIHRvcDogJCh3aW5kb3cpLnNjcm9sbFRvcCgpICsgZWwuZGF0YSgnY3NzLXRvcCcpICsgJ3B4JyxcbiAgICAgICAgICAgIG9wYWNpdHk6IDFcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGVsXG4gICAgICAgICAgICAgIC5jc3MoY3NzKVxuICAgICAgICAgICAgICAuYW5pbWF0ZShlbmRfY3NzLCBzZXR0aW5ncy5hbmltYXRpb25fc3BlZWQsICdsaW5lYXInLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgY29udGV4dC5sb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBlbC50cmlnZ2VyKCdvcGVuZWQuZm5kdG4ucmV2ZWFsJyk7XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIC5hZGRDbGFzcygnb3BlbicpO1xuICAgICAgICAgIH0sIHNldHRpbmdzLmFuaW1hdGlvbl9zcGVlZCAvIDIpO1xuICAgICAgICB9XG5cbiAgICAgICAgY3NzLnRvcCA9ICQod2luZG93KS5zY3JvbGxUb3AoKSArIGVsLmRhdGEoJ2Nzcy10b3AnKSArICdweCc7XG5cbiAgICAgICAgaWYgKGFuaW1EYXRhLmZhZGUpIHtcbiAgICAgICAgICB2YXIgZW5kX2NzcyA9IHtvcGFjaXR5OiAxfTtcblxuICAgICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBlbFxuICAgICAgICAgICAgICAuY3NzKGNzcylcbiAgICAgICAgICAgICAgLmFuaW1hdGUoZW5kX2Nzcywgc2V0dGluZ3MuYW5pbWF0aW9uX3NwZWVkLCAnbGluZWFyJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGNvbnRleHQubG9ja2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZWwudHJpZ2dlcignb3BlbmVkLmZuZHRuLnJldmVhbCcpO1xuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ29wZW4nKTtcbiAgICAgICAgICB9LCBzZXR0aW5ncy5hbmltYXRpb25fc3BlZWQgLyAyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBlbC5jc3MoY3NzKS5zaG93KCkuY3NzKHtvcGFjaXR5IDogMX0pLmFkZENsYXNzKCdvcGVuJykudHJpZ2dlcignb3BlbmVkLmZuZHRuLnJldmVhbCcpO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2V0dGluZ3MgPSB0aGlzLnNldHRpbmdzO1xuXG4gICAgICAvLyBzaG91bGQgd2UgYW5pbWF0ZSB0aGUgYmFja2dyb3VuZD9cbiAgICAgIGlmIChnZXRBbmltYXRpb25EYXRhKHNldHRpbmdzLmFuaW1hdGlvbikuZmFkZSkge1xuICAgICAgICByZXR1cm4gZWwuZmFkZUluKHNldHRpbmdzLmFuaW1hdGlvbl9zcGVlZCAvIDIpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmxvY2tlZCA9IGZhbHNlO1xuXG4gICAgICByZXR1cm4gZWwuc2hvdygpO1xuICAgIH0sXG5cbiAgICB0b19iYWNrIDogZnVuY3Rpb24oZWwpIHtcbiAgICAgIGVsLmFkZENsYXNzKCd0b2JhY2snKTtcbiAgICB9LFxuXG4gICAgdG9fZnJvbnQgOiBmdW5jdGlvbihlbCkge1xuICAgICAgZWwucmVtb3ZlQ2xhc3MoJ3RvYmFjaycpO1xuICAgIH0sXG5cbiAgICBoaWRlIDogZnVuY3Rpb24gKGVsLCBjc3MpIHtcbiAgICAgIC8vIGlzIG1vZGFsXG4gICAgICBpZiAoY3NzKSB7XG4gICAgICAgIHZhciBzZXR0aW5ncyA9IGVsLmRhdGEodGhpcy5hdHRyX25hbWUodHJ1ZSkgKyAnLWluaXQnKSxcbiAgICAgICAgICAgIGNvbnRleHQgPSB0aGlzO1xuICAgICAgICBzZXR0aW5ncyA9IHNldHRpbmdzIHx8IHRoaXMuc2V0dGluZ3M7XG5cbiAgICAgICAgdmFyIGFuaW1EYXRhID0gZ2V0QW5pbWF0aW9uRGF0YShzZXR0aW5ncy5hbmltYXRpb24pO1xuICAgICAgICBpZiAoIWFuaW1EYXRhLmFuaW1hdGUpIHtcbiAgICAgICAgICB0aGlzLmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhbmltRGF0YS5wb3ApIHtcbiAgICAgICAgICB2YXIgZW5kX2NzcyA9IHtcbiAgICAgICAgICAgIHRvcDogLSAkKHdpbmRvdykuc2Nyb2xsVG9wKCkgLSBlbC5kYXRhKCdvZmZzZXQnKSArICdweCcsXG4gICAgICAgICAgICBvcGFjaXR5OiAwXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBlbFxuICAgICAgICAgICAgICAuYW5pbWF0ZShlbmRfY3NzLCBzZXR0aW5ncy5hbmltYXRpb25fc3BlZWQsICdsaW5lYXInLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgY29udGV4dC5sb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBlbC5jc3MoY3NzKS50cmlnZ2VyKCdjbG9zZWQuZm5kdG4ucmV2ZWFsJyk7XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnb3BlbicpO1xuICAgICAgICAgIH0sIHNldHRpbmdzLmFuaW1hdGlvbl9zcGVlZCAvIDIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFuaW1EYXRhLmZhZGUpIHtcbiAgICAgICAgICB2YXIgZW5kX2NzcyA9IHtvcGFjaXR5IDogMH07XG5cbiAgICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gZWxcbiAgICAgICAgICAgICAgLmFuaW1hdGUoZW5kX2Nzcywgc2V0dGluZ3MuYW5pbWF0aW9uX3NwZWVkLCAnbGluZWFyJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGNvbnRleHQubG9ja2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZWwuY3NzKGNzcykudHJpZ2dlcignY2xvc2VkLmZuZHRuLnJldmVhbCcpO1xuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ29wZW4nKTtcbiAgICAgICAgICB9LCBzZXR0aW5ncy5hbmltYXRpb25fc3BlZWQgLyAyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBlbC5oaWRlKCkuY3NzKGNzcykucmVtb3ZlQ2xhc3MoJ29wZW4nKS50cmlnZ2VyKCdjbG9zZWQuZm5kdG4ucmV2ZWFsJyk7XG4gICAgICB9XG5cbiAgICAgIHZhciBzZXR0aW5ncyA9IHRoaXMuc2V0dGluZ3M7XG5cbiAgICAgIC8vIHNob3VsZCB3ZSBhbmltYXRlIHRoZSBiYWNrZ3JvdW5kP1xuICAgICAgaWYgKGdldEFuaW1hdGlvbkRhdGEoc2V0dGluZ3MuYW5pbWF0aW9uKS5mYWRlKSB7XG4gICAgICAgIHJldHVybiBlbC5mYWRlT3V0KHNldHRpbmdzLmFuaW1hdGlvbl9zcGVlZCAvIDIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZWwuaGlkZSgpO1xuICAgIH0sXG5cbiAgICBjbG9zZV92aWRlbyA6IGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgdmlkZW8gPSAkKCcuZmxleC12aWRlbycsIGUudGFyZ2V0KSxcbiAgICAgICAgICBpZnJhbWUgPSAkKCdpZnJhbWUnLCB2aWRlbyk7XG5cbiAgICAgIGlmIChpZnJhbWUubGVuZ3RoID4gMCkge1xuICAgICAgICBpZnJhbWUuYXR0cignZGF0YS1zcmMnLCBpZnJhbWVbMF0uc3JjKTtcbiAgICAgICAgaWZyYW1lLmF0dHIoJ3NyYycsIGlmcmFtZS5hdHRyKCdzcmMnKSk7XG4gICAgICAgIHZpZGVvLmhpZGUoKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgb3Blbl92aWRlbyA6IGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgdmlkZW8gPSAkKCcuZmxleC12aWRlbycsIGUudGFyZ2V0KSxcbiAgICAgICAgICBpZnJhbWUgPSB2aWRlby5maW5kKCdpZnJhbWUnKTtcblxuICAgICAgaWYgKGlmcmFtZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHZhciBkYXRhX3NyYyA9IGlmcmFtZS5hdHRyKCdkYXRhLXNyYycpO1xuICAgICAgICBpZiAodHlwZW9mIGRhdGFfc3JjID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGlmcmFtZVswXS5zcmMgPSBpZnJhbWUuYXR0cignZGF0YS1zcmMnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgc3JjID0gaWZyYW1lWzBdLnNyYztcbiAgICAgICAgICBpZnJhbWVbMF0uc3JjID0gdW5kZWZpbmVkO1xuICAgICAgICAgIGlmcmFtZVswXS5zcmMgPSBzcmM7XG4gICAgICAgIH1cbiAgICAgICAgdmlkZW8uc2hvdygpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBkYXRhX2F0dHIgOiBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICBpZiAodGhpcy5uYW1lc3BhY2UubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gdGhpcy5uYW1lc3BhY2UgKyAnLScgKyBzdHI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdHI7XG4gICAgfSxcblxuICAgIGNhY2hlX29mZnNldCA6IGZ1bmN0aW9uIChtb2RhbCkge1xuICAgICAgdmFyIG9mZnNldCA9IG1vZGFsLnNob3coKS5oZWlnaHQoKSArIHBhcnNlSW50KG1vZGFsLmNzcygndG9wJyksIDEwKSArIG1vZGFsLnNjcm9sbFk7XG5cbiAgICAgIG1vZGFsLmhpZGUoKTtcblxuICAgICAgcmV0dXJuIG9mZnNldDtcbiAgICB9LFxuXG4gICAgb2ZmIDogZnVuY3Rpb24gKCkge1xuICAgICAgJCh0aGlzLnNjb3BlKS5vZmYoJy5mbmR0bi5yZXZlYWwnKTtcbiAgICB9LFxuXG4gICAgcmVmbG93IDogZnVuY3Rpb24gKCkge31cbiAgfTtcblxuICAvKlxuICAgKiBnZXRBbmltYXRpb25EYXRhKCdwb3BBbmRGYWRlJykgLy8ge2FuaW1hdGU6IHRydWUsICBwb3A6IHRydWUsICBmYWRlOiB0cnVlfVxuICAgKiBnZXRBbmltYXRpb25EYXRhKCdmYWRlJykgICAgICAgLy8ge2FuaW1hdGU6IHRydWUsICBwb3A6IGZhbHNlLCBmYWRlOiB0cnVlfVxuICAgKiBnZXRBbmltYXRpb25EYXRhKCdwb3AnKSAgICAgICAgLy8ge2FuaW1hdGU6IHRydWUsICBwb3A6IHRydWUsICBmYWRlOiBmYWxzZX1cbiAgICogZ2V0QW5pbWF0aW9uRGF0YSgnZm9vJykgICAgICAgIC8vIHthbmltYXRlOiBmYWxzZSwgcG9wOiBmYWxzZSwgZmFkZTogZmFsc2V9XG4gICAqIGdldEFuaW1hdGlvbkRhdGEobnVsbCkgICAgICAgICAvLyB7YW5pbWF0ZTogZmFsc2UsIHBvcDogZmFsc2UsIGZhZGU6IGZhbHNlfVxuICAgKi9cbiAgZnVuY3Rpb24gZ2V0QW5pbWF0aW9uRGF0YShzdHIpIHtcbiAgICB2YXIgZmFkZSA9IC9mYWRlL2kudGVzdChzdHIpO1xuICAgIHZhciBwb3AgPSAvcG9wL2kudGVzdChzdHIpO1xuICAgIHJldHVybiB7XG4gICAgICBhbmltYXRlIDogZmFkZSB8fCBwb3AsXG4gICAgICBwb3AgOiBwb3AsXG4gICAgICBmYWRlIDogZmFkZVxuICAgIH07XG4gIH1cbn0oalF1ZXJ5LCB3aW5kb3csIHdpbmRvdy5kb2N1bWVudCkpO1xuIiwiOyhmdW5jdGlvbiAoJCwgd2luZG93LCBkb2N1bWVudCwgdW5kZWZpbmVkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBGb3VuZGF0aW9uLmxpYnMudGFiID0ge1xuICAgIG5hbWUgOiAndGFiJyxcblxuICAgIHZlcnNpb24gOiAnNS41LjMnLFxuXG4gICAgc2V0dGluZ3MgOiB7XG4gICAgICBhY3RpdmVfY2xhc3MgOiAnYWN0aXZlJyxcbiAgICAgIGNhbGxiYWNrIDogZnVuY3Rpb24gKCkge30sXG4gICAgICBkZWVwX2xpbmtpbmcgOiBmYWxzZSxcbiAgICAgIHNjcm9sbF90b19jb250ZW50IDogdHJ1ZSxcbiAgICAgIGlzX2hvdmVyIDogZmFsc2VcbiAgICB9LFxuXG4gICAgZGVmYXVsdF90YWJfaGFzaGVzIDogW10sXG5cbiAgICBpbml0IDogZnVuY3Rpb24gKHNjb3BlLCBtZXRob2QsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgICAgICBTID0gdGhpcy5TO1xuXG4gIFx0ICAvLyBTdG9yZSB0aGUgZGVmYXVsdCBhY3RpdmUgdGFicyB3aGljaCB3aWxsIGJlIHJlZmVyZW5jZWQgd2hlbiB0aGVcbiAgXHQgIC8vIGxvY2F0aW9uIGhhc2ggaXMgYWJzZW50LCBhcyBpbiB0aGUgY2FzZSBvZiBuYXZpZ2F0aW5nIHRoZSB0YWJzIGFuZFxuICBcdCAgLy8gcmV0dXJuaW5nIHRvIHRoZSBmaXJzdCB2aWV3aW5nIHZpYSB0aGUgYnJvd3NlciBCYWNrIGJ1dHRvbi5cbiAgXHQgIFMoJ1snICsgdGhpcy5hdHRyX25hbWUoKSArICddID4gLmFjdGl2ZSA+IGEnLCB0aGlzLnNjb3BlKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgXHQgICAgc2VsZi5kZWZhdWx0X3RhYl9oYXNoZXMucHVzaCh0aGlzLmhhc2gpO1xuICBcdCAgfSk7XG5cbiAgICAgIHRoaXMuYmluZGluZ3MobWV0aG9kLCBvcHRpb25zKTtcbiAgICAgIHRoaXMuaGFuZGxlX2xvY2F0aW9uX2hhc2hfY2hhbmdlKCk7XG4gICAgfSxcblxuICAgIGV2ZW50cyA6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgICAgICBTID0gdGhpcy5TO1xuXG4gICAgICB2YXIgdXN1YWxfdGFiX2JlaGF2aW9yID0gIGZ1bmN0aW9uIChlLCB0YXJnZXQpIHtcbiAgICAgICAgdmFyIHNldHRpbmdzID0gUyh0YXJnZXQpLmNsb3Nlc3QoJ1snICsgc2VsZi5hdHRyX25hbWUoKSArICddJykuZGF0YShzZWxmLmF0dHJfbmFtZSh0cnVlKSArICctaW5pdCcpO1xuICAgICAgICBpZiAoIXNldHRpbmdzLmlzX2hvdmVyIHx8IE1vZGVybml6ci50b3VjaCkge1xuICAgICAgICAgIC8vIGlmIHVzZXIgZGlkIG5vdCBwcmVzc2VkIHRhYiBrZXksIHByZXZlbnQgZGVmYXVsdCBhY3Rpb25cbiAgICAgICAgICB2YXIga2V5Q29kZSA9IGUua2V5Q29kZSB8fCBlLndoaWNoO1xuICAgICAgICAgIGlmIChrZXlDb2RlICE9PSA5KSB7IFxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2VsZi50b2dnbGVfYWN0aXZlX3RhYihTKHRhcmdldCkucGFyZW50KCkpO1xuICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBTKHRoaXMuc2NvcGUpXG4gICAgICAgIC5vZmYoJy50YWInKVxuICAgICAgICAvLyBLZXkgZXZlbnQ6IGZvY3VzL3RhYiBrZXlcbiAgICAgICAgLm9uKCdrZXlkb3duLmZuZHRuLnRhYicsICdbJyArIHRoaXMuYXR0cl9uYW1lKCkgKyAnXSA+ICogPiBhJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgIHZhciBrZXlDb2RlID0gZS5rZXlDb2RlIHx8IGUud2hpY2g7XG4gICAgICAgICAgLy8gaWYgdXNlciBwcmVzc2VkIHRhYiBrZXlcbiAgICAgICAgICBpZiAoa2V5Q29kZSA9PT0gMTMgfHwga2V5Q29kZSA9PT0gMzIpIHsgLy8gZW50ZXIgb3Igc3BhY2VcbiAgICAgICAgICAgIHZhciBlbCA9IHRoaXM7XG4gICAgICAgICAgICB1c3VhbF90YWJfYmVoYXZpb3IoZSwgZWwpO1xuICAgICAgICAgIH0gXG4gICAgICAgIH0pXG4gICAgICAgIC8vIENsaWNrIGV2ZW50OiB0YWIgdGl0bGVcbiAgICAgICAgLm9uKCdjbGljay5mbmR0bi50YWInLCAnWycgKyB0aGlzLmF0dHJfbmFtZSgpICsgJ10gPiAqID4gYScsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICB2YXIgZWwgPSB0aGlzO1xuICAgICAgICAgIHVzdWFsX3RhYl9iZWhhdmlvcihlLCBlbCk7XG4gICAgICAgIH0pXG4gICAgICAgIC8vIEhvdmVyIGV2ZW50OiB0YWIgdGl0bGVcbiAgICAgICAgLm9uKCdtb3VzZWVudGVyLmZuZHRuLnRhYicsICdbJyArIHRoaXMuYXR0cl9uYW1lKCkgKyAnXSA+ICogPiBhJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICB2YXIgc2V0dGluZ3MgPSBTKHRoaXMpLmNsb3Nlc3QoJ1snICsgc2VsZi5hdHRyX25hbWUoKSArICddJykuZGF0YShzZWxmLmF0dHJfbmFtZSh0cnVlKSArICctaW5pdCcpO1xuICAgICAgICAgIGlmIChzZXR0aW5ncy5pc19ob3Zlcikge1xuICAgICAgICAgICAgc2VsZi50b2dnbGVfYWN0aXZlX3RhYihTKHRoaXMpLnBhcmVudCgpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAvLyBMb2NhdGlvbiBoYXNoIGNoYW5nZSBldmVudFxuICAgICAgUyh3aW5kb3cpLm9uKCdoYXNoY2hhbmdlLmZuZHRuLnRhYicsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgc2VsZi5oYW5kbGVfbG9jYXRpb25faGFzaF9jaGFuZ2UoKTtcbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBoYW5kbGVfbG9jYXRpb25faGFzaF9jaGFuZ2UgOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgICAgICBTID0gdGhpcy5TO1xuXG4gICAgICBTKCdbJyArIHRoaXMuYXR0cl9uYW1lKCkgKyAnXScsIHRoaXMuc2NvcGUpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc2V0dGluZ3MgPSBTKHRoaXMpLmRhdGEoc2VsZi5hdHRyX25hbWUodHJ1ZSkgKyAnLWluaXQnKTtcbiAgICAgICAgaWYgKHNldHRpbmdzLmRlZXBfbGlua2luZykge1xuICAgICAgICAgIC8vIE1hdGNoIHRoZSBsb2NhdGlvbiBoYXNoIHRvIGEgbGFiZWxcbiAgICAgICAgICB2YXIgaGFzaDtcbiAgICAgICAgICBpZiAoc2V0dGluZ3Muc2Nyb2xsX3RvX2NvbnRlbnQpIHtcbiAgICAgICAgICAgIGhhc2ggPSBzZWxmLnNjb3BlLmxvY2F0aW9uLmhhc2g7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHByZWZpeCB0aGUgaGFzaCB0byBwcmV2ZW50IGFuY2hvciBzY3JvbGxpbmdcbiAgICAgICAgICAgIGhhc2ggPSBzZWxmLnNjb3BlLmxvY2F0aW9uLmhhc2gucmVwbGFjZSgnZm5kdG4tJywgJycpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaGFzaCAhPSAnJykge1xuICAgICAgICAgICAgLy8gQ2hlY2sgd2hldGhlciB0aGUgbG9jYXRpb24gaGFzaCByZWZlcmVuY2VzIGEgdGFiIGNvbnRlbnQgZGl2IG9yXG4gICAgICAgICAgICAvLyBhbm90aGVyIGVsZW1lbnQgb24gdGhlIHBhZ2UgKGluc2lkZSBvciBvdXRzaWRlIHRoZSB0YWIgY29udGVudCBkaXYpXG4gICAgICAgICAgICB2YXIgaGFzaF9lbGVtZW50ID0gUyhoYXNoKTtcbiAgICAgICAgICAgIGlmIChoYXNoX2VsZW1lbnQuaGFzQ2xhc3MoJ2NvbnRlbnQnKSAmJiBoYXNoX2VsZW1lbnQucGFyZW50KCkuaGFzQ2xhc3MoJ3RhYnMtY29udGVudCcpKSB7XG4gICAgICAgICAgICAgIC8vIFRhYiBjb250ZW50IGRpdlxuICAgICAgICAgICAgICBzZWxmLnRvZ2dsZV9hY3RpdmVfdGFiKCQoJ1snICsgc2VsZi5hdHRyX25hbWUoKSArICddID4gKiA+IGFbaHJlZj0nICsgaGFzaCArICddJykucGFyZW50KCkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gTm90IHRoZSB0YWIgY29udGVudCBkaXYuIElmIGluc2lkZSB0aGUgdGFiIGNvbnRlbnQsIGZpbmQgdGhlXG4gICAgICAgICAgICAgIC8vIGNvbnRhaW5pbmcgdGFiIGFuZCB0b2dnbGUgaXQgYXMgYWN0aXZlLlxuICAgICAgICAgICAgICB2YXIgaGFzaF90YWJfY29udGFpbmVyX2lkID0gaGFzaF9lbGVtZW50LmNsb3Nlc3QoJy5jb250ZW50JykuYXR0cignaWQnKTtcbiAgICAgICAgICAgICAgaWYgKGhhc2hfdGFiX2NvbnRhaW5lcl9pZCAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBzZWxmLnRvZ2dsZV9hY3RpdmVfdGFiKCQoJ1snICsgc2VsZi5hdHRyX25hbWUoKSArICddID4gKiA+IGFbaHJlZj0jJyArIGhhc2hfdGFiX2NvbnRhaW5lcl9pZCArICddJykucGFyZW50KCksIGhhc2gpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIFJlZmVyZW5jZSB0aGUgZGVmYXVsdCB0YWIgaGFzaGVzIHdoaWNoIHdlcmUgaW5pdGlhbGl6ZWQgaW4gdGhlIGluaXQgZnVuY3Rpb25cbiAgICAgICAgICAgIGZvciAodmFyIGluZCA9IDA7IGluZCA8IHNlbGYuZGVmYXVsdF90YWJfaGFzaGVzLmxlbmd0aDsgaW5kKyspIHtcbiAgICAgICAgICAgICAgc2VsZi50b2dnbGVfYWN0aXZlX3RhYigkKCdbJyArIHNlbGYuYXR0cl9uYW1lKCkgKyAnXSA+ICogPiBhW2hyZWY9JyArIHNlbGYuZGVmYXVsdF90YWJfaGFzaGVzW2luZF0gKyAnXScpLnBhcmVudCgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICB9KTtcbiAgICAgfSxcblxuICAgIHRvZ2dsZV9hY3RpdmVfdGFiIDogZnVuY3Rpb24gKHRhYiwgbG9jYXRpb25faGFzaCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICAgIFMgPSBzZWxmLlMsXG4gICAgICAgICAgdGFicyA9IHRhYi5jbG9zZXN0KCdbJyArIHRoaXMuYXR0cl9uYW1lKCkgKyAnXScpLFxuICAgICAgICAgIHRhYl9saW5rID0gdGFiLmZpbmQoJ2EnKSxcbiAgICAgICAgICBhbmNob3IgPSB0YWIuY2hpbGRyZW4oJ2EnKS5maXJzdCgpLFxuICAgICAgICAgIHRhcmdldF9oYXNoID0gJyMnICsgYW5jaG9yLmF0dHIoJ2hyZWYnKS5zcGxpdCgnIycpWzFdLFxuICAgICAgICAgIHRhcmdldCA9IFModGFyZ2V0X2hhc2gpLFxuICAgICAgICAgIHNpYmxpbmdzID0gdGFiLnNpYmxpbmdzKCksXG4gICAgICAgICAgc2V0dGluZ3MgPSB0YWJzLmRhdGEodGhpcy5hdHRyX25hbWUodHJ1ZSkgKyAnLWluaXQnKSxcbiAgICAgICAgICBpbnRlcnByZXRfa2V5dXBfYWN0aW9uID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIC8vIExpZ2h0IG1vZGlmaWNhdGlvbiBvZiBIZXlkb24gUGlja2VyaW5nJ3MgUHJhY3RpY2FsIEFSSUEgRXhhbXBsZXM6IGh0dHA6Ly9oZXlkb253b3Jrcy5jb20vcHJhY3RpY2FsX2FyaWFfZXhhbXBsZXMvanMvYTExeS5qc1xuXG4gICAgICAgICAgICAvLyBkZWZpbmUgY3VycmVudCwgcHJldmlvdXMgYW5kIG5leHQgKHBvc3NpYmxlKSB0YWJzXG5cbiAgICAgICAgICAgIHZhciAkb3JpZ2luYWwgPSAkKHRoaXMpO1xuICAgICAgICAgICAgdmFyICRwcmV2ID0gJCh0aGlzKS5wYXJlbnRzKCdsaScpLnByZXYoKS5jaGlsZHJlbignW3JvbGU9XCJ0YWJcIl0nKTtcbiAgICAgICAgICAgIHZhciAkbmV4dCA9ICQodGhpcykucGFyZW50cygnbGknKS5uZXh0KCkuY2hpbGRyZW4oJ1tyb2xlPVwidGFiXCJdJyk7XG4gICAgICAgICAgICB2YXIgJHRhcmdldDtcblxuICAgICAgICAgICAgLy8gZmluZCB0aGUgZGlyZWN0aW9uIChwcmV2IG9yIG5leHQpXG5cbiAgICAgICAgICAgIHN3aXRjaCAoZS5rZXlDb2RlKSB7XG4gICAgICAgICAgICAgIGNhc2UgMzc6XG4gICAgICAgICAgICAgICAgJHRhcmdldCA9ICRwcmV2O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIDM5OlxuICAgICAgICAgICAgICAgICR0YXJnZXQgPSAkbmV4dDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAkdGFyZ2V0ID0gZmFsc2VcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoJHRhcmdldC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgJG9yaWdpbmFsLmF0dHIoe1xuICAgICAgICAgICAgICAgICd0YWJpbmRleCcgOiAnLTEnLFxuICAgICAgICAgICAgICAgICdhcmlhLXNlbGVjdGVkJyA6IG51bGxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICR0YXJnZXQuYXR0cih7XG4gICAgICAgICAgICAgICAgJ3RhYmluZGV4JyA6ICcwJyxcbiAgICAgICAgICAgICAgICAnYXJpYS1zZWxlY3RlZCcgOiB0cnVlXG4gICAgICAgICAgICAgIH0pLmZvY3VzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEhpZGUgcGFuZWxzXG5cbiAgICAgICAgICAgICQoJ1tyb2xlPVwidGFicGFuZWxcIl0nKVxuICAgICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuXG4gICAgICAgICAgICAvLyBTaG93IHBhbmVsIHdoaWNoIGNvcnJlc3BvbmRzIHRvIHRhcmdldFxuXG4gICAgICAgICAgICAkKCcjJyArICQoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkuYXR0cignaHJlZicpLnN1YnN0cmluZygxKSlcbiAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgbnVsbCk7XG5cbiAgICAgICAgICB9LFxuICAgICAgICAgIGdvX3RvX2hhc2ggPSBmdW5jdGlvbihoYXNoKSB7XG4gICAgICAgICAgICAvLyBUaGlzIGZ1bmN0aW9uIGFsbG93cyBjb3JyZWN0IGJlaGF2aW91ciBvZiB0aGUgYnJvd3NlcidzIGJhY2sgYnV0dG9uIHdoZW4gZGVlcCBsaW5raW5nIGlzIGVuYWJsZWQuIFdpdGhvdXQgaXRcbiAgICAgICAgICAgIC8vIHRoZSB1c2VyIHdvdWxkIGdldCBjb250aW51YWxseSByZWRpcmVjdGVkIHRvIHRoZSBkZWZhdWx0IGhhc2guXG4gICAgICAgICAgICB2YXIgZGVmYXVsdF9oYXNoID0gc2V0dGluZ3Muc2Nyb2xsX3RvX2NvbnRlbnQgPyBzZWxmLmRlZmF1bHRfdGFiX2hhc2hlc1swXSA6ICdmbmR0bi0nICsgc2VsZi5kZWZhdWx0X3RhYl9oYXNoZXNbMF0ucmVwbGFjZSgnIycsICcnKTtcblxuICAgICAgICAgICAgaWYgKGhhc2ggIT09IGRlZmF1bHRfaGFzaCB8fCB3aW5kb3cubG9jYXRpb24uaGFzaCkge1xuICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IGhhc2g7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcblxuICAgICAgLy8gYWxsb3cgdXNhZ2Ugb2YgZGF0YS10YWItY29udGVudCBhdHRyaWJ1dGUgaW5zdGVhZCBvZiBocmVmXG4gICAgICBpZiAoYW5jaG9yLmRhdGEoJ3RhYi1jb250ZW50JykpIHtcbiAgICAgICAgdGFyZ2V0X2hhc2ggPSAnIycgKyBhbmNob3IuZGF0YSgndGFiLWNvbnRlbnQnKS5zcGxpdCgnIycpWzFdO1xuICAgICAgICB0YXJnZXQgPSBTKHRhcmdldF9oYXNoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNldHRpbmdzLmRlZXBfbGlua2luZykge1xuXG4gICAgICAgIGlmIChzZXR0aW5ncy5zY3JvbGxfdG9fY29udGVudCkge1xuXG4gICAgICAgICAgLy8gcmV0YWluIGN1cnJlbnQgaGFzaCB0byBzY3JvbGwgdG8gY29udGVudFxuICAgICAgICAgIGdvX3RvX2hhc2gobG9jYXRpb25faGFzaCB8fCB0YXJnZXRfaGFzaCk7XG5cbiAgICAgICAgICBpZiAobG9jYXRpb25faGFzaCA9PSB1bmRlZmluZWQgfHwgbG9jYXRpb25faGFzaCA9PSB0YXJnZXRfaGFzaCkge1xuICAgICAgICAgICAgdGFiLnBhcmVudCgpWzBdLnNjcm9sbEludG9WaWV3KCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIFModGFyZ2V0X2hhc2gpWzBdLnNjcm9sbEludG9WaWV3KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHByZWZpeCB0aGUgaGFzaGVzIHNvIHRoYXQgdGhlIGJyb3dzZXIgZG9lc24ndCBzY3JvbGwgZG93blxuICAgICAgICAgIGlmIChsb2NhdGlvbl9oYXNoICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZ29fdG9faGFzaCgnZm5kdG4tJyArIGxvY2F0aW9uX2hhc2gucmVwbGFjZSgnIycsICcnKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdvX3RvX2hhc2goJ2ZuZHRuLScgKyB0YXJnZXRfaGFzaC5yZXBsYWNlKCcjJywgJycpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gV0FSTklORzogVGhlIGFjdGl2YXRpb24gYW5kIGRlYWN0aXZhdGlvbiBvZiB0aGUgdGFiIGNvbnRlbnQgbXVzdFxuICAgICAgLy8gb2NjdXIgYWZ0ZXIgdGhlIGRlZXAgbGlua2luZyBpbiBvcmRlciB0byBwcm9wZXJseSByZWZyZXNoIHRoZSBicm93c2VyXG4gICAgICAvLyB3aW5kb3cgKG5vdGFibHkgaW4gQ2hyb21lKS5cbiAgICAgIC8vIENsZWFuIHVwIG11bHRpcGxlIGF0dHIgaW5zdGFuY2VzIHRvIGRvbmUgb25jZVxuICAgICAgdGFiLmFkZENsYXNzKHNldHRpbmdzLmFjdGl2ZV9jbGFzcykudHJpZ2dlckhhbmRsZXIoJ29wZW5lZCcpO1xuICAgICAgdGFiX2xpbmsuYXR0cih7J2FyaWEtc2VsZWN0ZWQnIDogJ3RydWUnLCAgdGFiaW5kZXggOiAwfSk7XG4gICAgICBzaWJsaW5ncy5yZW1vdmVDbGFzcyhzZXR0aW5ncy5hY3RpdmVfY2xhc3MpXG4gICAgICBzaWJsaW5ncy5maW5kKCdhJykuYXR0cih7J2FyaWEtc2VsZWN0ZWQnIDogJ2ZhbHNlJy8qLCAgdGFiaW5kZXggOiAtMSovfSk7XG4gICAgICB0YXJnZXQuc2libGluZ3MoKS5yZW1vdmVDbGFzcyhzZXR0aW5ncy5hY3RpdmVfY2xhc3MpLmF0dHIoeydhcmlhLWhpZGRlbicgOiAndHJ1ZScvKiwgIHRhYmluZGV4IDogLTEqL30pO1xuICAgICAgdGFyZ2V0LmFkZENsYXNzKHNldHRpbmdzLmFjdGl2ZV9jbGFzcykuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKS5yZW1vdmVBdHRyKCd0YWJpbmRleCcpO1xuICAgICAgc2V0dGluZ3MuY2FsbGJhY2sodGFiKTtcbiAgICAgIHRhcmdldC50cmlnZ2VySGFuZGxlcigndG9nZ2xlZCcsIFt0YXJnZXRdKTtcbiAgICAgIHRhYnMudHJpZ2dlckhhbmRsZXIoJ3RvZ2dsZWQnLCBbdGFiXSk7XG5cbiAgICAgIHRhYl9saW5rLm9mZigna2V5ZG93bicpLm9uKCdrZXlkb3duJywgaW50ZXJwcmV0X2tleXVwX2FjdGlvbiApO1xuICAgIH0sXG5cbiAgICBkYXRhX2F0dHIgOiBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICBpZiAodGhpcy5uYW1lc3BhY2UubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gdGhpcy5uYW1lc3BhY2UgKyAnLScgKyBzdHI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdHI7XG4gICAgfSxcblxuICAgIG9mZiA6IGZ1bmN0aW9uICgpIHt9LFxuXG4gICAgcmVmbG93IDogZnVuY3Rpb24gKCkge31cbiAgfTtcbn0oalF1ZXJ5LCB3aW5kb3csIHdpbmRvdy5kb2N1bWVudCkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiBlc2xpbnQgbm8taW52YWxpZC10aGlzOiAxICovXG5cbnZhciBFUlJPUl9NRVNTQUdFID0gJ0Z1bmN0aW9uLnByb3RvdHlwZS5iaW5kIGNhbGxlZCBvbiBpbmNvbXBhdGlibGUgJztcbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgZnVuY1R5cGUgPSAnW29iamVjdCBGdW5jdGlvbl0nO1xuXG52YXIgY29uY2F0dHkgPSBmdW5jdGlvbiBjb25jYXR0eShhLCBiKSB7XG4gICAgdmFyIGFyciA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGFycltpXSA9IGFbaV07XG4gICAgfVxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgYi5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICBhcnJbaiArIGEubGVuZ3RoXSA9IGJbal07XG4gICAgfVxuXG4gICAgcmV0dXJuIGFycjtcbn07XG5cbnZhciBzbGljeSA9IGZ1bmN0aW9uIHNsaWN5KGFyckxpa2UsIG9mZnNldCkge1xuICAgIHZhciBhcnIgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gb2Zmc2V0IHx8IDAsIGogPSAwOyBpIDwgYXJyTGlrZS5sZW5ndGg7IGkgKz0gMSwgaiArPSAxKSB7XG4gICAgICAgIGFycltqXSA9IGFyckxpa2VbaV07XG4gICAgfVxuICAgIHJldHVybiBhcnI7XG59O1xuXG52YXIgam9pbnkgPSBmdW5jdGlvbiAoYXJyLCBqb2luZXIpIHtcbiAgICB2YXIgc3RyID0gJyc7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgc3RyICs9IGFycltpXTtcbiAgICAgICAgaWYgKGkgKyAxIDwgYXJyLmxlbmd0aCkge1xuICAgICAgICAgICAgc3RyICs9IGpvaW5lcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3RyO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBiaW5kKHRoYXQpIHtcbiAgICB2YXIgdGFyZ2V0ID0gdGhpcztcbiAgICBpZiAodHlwZW9mIHRhcmdldCAhPT0gJ2Z1bmN0aW9uJyB8fCB0b1N0ci5hcHBseSh0YXJnZXQpICE9PSBmdW5jVHlwZSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEVSUk9SX01FU1NBR0UgKyB0YXJnZXQpO1xuICAgIH1cbiAgICB2YXIgYXJncyA9IHNsaWN5KGFyZ3VtZW50cywgMSk7XG5cbiAgICB2YXIgYm91bmQ7XG4gICAgdmFyIGJpbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBib3VuZCkge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRhcmdldC5hcHBseShcbiAgICAgICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgICAgIGNvbmNhdHR5KGFyZ3MsIGFyZ3VtZW50cylcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAoT2JqZWN0KHJlc3VsdCkgPT09IHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFyZ2V0LmFwcGx5KFxuICAgICAgICAgICAgdGhhdCxcbiAgICAgICAgICAgIGNvbmNhdHR5KGFyZ3MsIGFyZ3VtZW50cylcbiAgICAgICAgKTtcblxuICAgIH07XG5cbiAgICB2YXIgYm91bmRMZW5ndGggPSBtYXgoMCwgdGFyZ2V0Lmxlbmd0aCAtIGFyZ3MubGVuZ3RoKTtcbiAgICB2YXIgYm91bmRBcmdzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib3VuZExlbmd0aDsgaSsrKSB7XG4gICAgICAgIGJvdW5kQXJnc1tpXSA9ICckJyArIGk7XG4gICAgfVxuXG4gICAgYm91bmQgPSBGdW5jdGlvbignYmluZGVyJywgJ3JldHVybiBmdW5jdGlvbiAoJyArIGpvaW55KGJvdW5kQXJncywgJywnKSArICcpeyByZXR1cm4gYmluZGVyLmFwcGx5KHRoaXMsYXJndW1lbnRzKTsgfScpKGJpbmRlcik7XG5cbiAgICBpZiAodGFyZ2V0LnByb3RvdHlwZSkge1xuICAgICAgICB2YXIgRW1wdHkgPSBmdW5jdGlvbiBFbXB0eSgpIHt9O1xuICAgICAgICBFbXB0eS5wcm90b3R5cGUgPSB0YXJnZXQucHJvdG90eXBlO1xuICAgICAgICBib3VuZC5wcm90b3R5cGUgPSBuZXcgRW1wdHkoKTtcbiAgICAgICAgRW1wdHkucHJvdG90eXBlID0gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gYm91bmQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgfHwgaW1wbGVtZW50YXRpb247XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1bmRlZmluZWQ7XG5cbnZhciAkRXJyb3IgPSByZXF1aXJlKCdlcy1lcnJvcnMnKTtcbnZhciAkRXZhbEVycm9yID0gcmVxdWlyZSgnZXMtZXJyb3JzL2V2YWwnKTtcbnZhciAkUmFuZ2VFcnJvciA9IHJlcXVpcmUoJ2VzLWVycm9ycy9yYW5nZScpO1xudmFyICRSZWZlcmVuY2VFcnJvciA9IHJlcXVpcmUoJ2VzLWVycm9ycy9yZWYnKTtcbnZhciAkU3ludGF4RXJyb3IgPSByZXF1aXJlKCdlcy1lcnJvcnMvc3ludGF4Jyk7XG52YXIgJFR5cGVFcnJvciA9IHJlcXVpcmUoJ2VzLWVycm9ycy90eXBlJyk7XG52YXIgJFVSSUVycm9yID0gcmVxdWlyZSgnZXMtZXJyb3JzL3VyaScpO1xuXG52YXIgJEZ1bmN0aW9uID0gRnVuY3Rpb247XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxudmFyIGdldEV2YWxsZWRDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uIChleHByZXNzaW9uU3ludGF4KSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuICRGdW5jdGlvbignXCJ1c2Ugc3RyaWN0XCI7IHJldHVybiAoJyArIGV4cHJlc3Npb25TeW50YXggKyAnKS5jb25zdHJ1Y3RvcjsnKSgpO1xuXHR9IGNhdGNoIChlKSB7fVxufTtcblxudmFyICRnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbmlmICgkZ09QRCkge1xuXHR0cnkge1xuXHRcdCRnT1BEKHt9LCAnJyk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHQkZ09QRCA9IG51bGw7IC8vIHRoaXMgaXMgSUUgOCwgd2hpY2ggaGFzIGEgYnJva2VuIGdPUERcblx0fVxufVxuXG52YXIgdGhyb3dUeXBlRXJyb3IgPSBmdW5jdGlvbiAoKSB7XG5cdHRocm93IG5ldyAkVHlwZUVycm9yKCk7XG59O1xudmFyIFRocm93VHlwZUVycm9yID0gJGdPUERcblx0PyAoZnVuY3Rpb24gKCkge1xuXHRcdHRyeSB7XG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zLCBuby1jYWxsZXIsIG5vLXJlc3RyaWN0ZWQtcHJvcGVydGllc1xuXHRcdFx0YXJndW1lbnRzLmNhbGxlZTsgLy8gSUUgOCBkb2VzIG5vdCB0aHJvdyBoZXJlXG5cdFx0XHRyZXR1cm4gdGhyb3dUeXBlRXJyb3I7XG5cdFx0fSBjYXRjaCAoY2FsbGVlVGhyb3dzKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHQvLyBJRSA4IHRocm93cyBvbiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGFyZ3VtZW50cywgJycpXG5cdFx0XHRcdHJldHVybiAkZ09QRChhcmd1bWVudHMsICdjYWxsZWUnKS5nZXQ7XG5cdFx0XHR9IGNhdGNoIChnT1BEdGhyb3dzKSB7XG5cdFx0XHRcdHJldHVybiB0aHJvd1R5cGVFcnJvcjtcblx0XHRcdH1cblx0XHR9XG5cdH0oKSlcblx0OiB0aHJvd1R5cGVFcnJvcjtcblxudmFyIGhhc1N5bWJvbHMgPSByZXF1aXJlKCdoYXMtc3ltYm9scycpKCk7XG52YXIgaGFzUHJvdG8gPSByZXF1aXJlKCdoYXMtcHJvdG8nKSgpO1xuXG52YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgKFxuXHRoYXNQcm90b1xuXHRcdD8gZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHguX19wcm90b19fOyB9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcHJvdG9cblx0XHQ6IG51bGxcbik7XG5cbnZhciBuZWVkc0V2YWwgPSB7fTtcblxudmFyIFR5cGVkQXJyYXkgPSB0eXBlb2YgVWludDhBcnJheSA9PT0gJ3VuZGVmaW5lZCcgfHwgIWdldFByb3RvID8gdW5kZWZpbmVkIDogZ2V0UHJvdG8oVWludDhBcnJheSk7XG5cbnZhciBJTlRSSU5TSUNTID0ge1xuXHRfX3Byb3RvX186IG51bGwsXG5cdCclQWdncmVnYXRlRXJyb3IlJzogdHlwZW9mIEFnZ3JlZ2F0ZUVycm9yID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEFnZ3JlZ2F0ZUVycm9yLFxuXHQnJUFycmF5JSc6IEFycmF5LFxuXHQnJUFycmF5QnVmZmVyJSc6IHR5cGVvZiBBcnJheUJ1ZmZlciA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBBcnJheUJ1ZmZlcixcblx0JyVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJSc6IGhhc1N5bWJvbHMgJiYgZ2V0UHJvdG8gPyBnZXRQcm90byhbXVtTeW1ib2wuaXRlcmF0b3JdKCkpIDogdW5kZWZpbmVkLFxuXHQnJUFzeW5jRnJvbVN5bmNJdGVyYXRvclByb3RvdHlwZSUnOiB1bmRlZmluZWQsXG5cdCclQXN5bmNGdW5jdGlvbiUnOiBuZWVkc0V2YWwsXG5cdCclQXN5bmNHZW5lcmF0b3IlJzogbmVlZHNFdmFsLFxuXHQnJUFzeW5jR2VuZXJhdG9yRnVuY3Rpb24lJzogbmVlZHNFdmFsLFxuXHQnJUFzeW5jSXRlcmF0b3JQcm90b3R5cGUlJzogbmVlZHNFdmFsLFxuXHQnJUF0b21pY3MlJzogdHlwZW9mIEF0b21pY3MgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogQXRvbWljcyxcblx0JyVCaWdJbnQlJzogdHlwZW9mIEJpZ0ludCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBCaWdJbnQsXG5cdCclQmlnSW50NjRBcnJheSUnOiB0eXBlb2YgQmlnSW50NjRBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBCaWdJbnQ2NEFycmF5LFxuXHQnJUJpZ1VpbnQ2NEFycmF5JSc6IHR5cGVvZiBCaWdVaW50NjRBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBCaWdVaW50NjRBcnJheSxcblx0JyVCb29sZWFuJSc6IEJvb2xlYW4sXG5cdCclRGF0YVZpZXclJzogdHlwZW9mIERhdGFWaWV3ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IERhdGFWaWV3LFxuXHQnJURhdGUlJzogRGF0ZSxcblx0JyVkZWNvZGVVUkklJzogZGVjb2RlVVJJLFxuXHQnJWRlY29kZVVSSUNvbXBvbmVudCUnOiBkZWNvZGVVUklDb21wb25lbnQsXG5cdCclZW5jb2RlVVJJJSc6IGVuY29kZVVSSSxcblx0JyVlbmNvZGVVUklDb21wb25lbnQlJzogZW5jb2RlVVJJQ29tcG9uZW50LFxuXHQnJUVycm9yJSc6ICRFcnJvcixcblx0JyVldmFsJSc6IGV2YWwsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZXZhbFxuXHQnJUV2YWxFcnJvciUnOiAkRXZhbEVycm9yLFxuXHQnJUZsb2F0MzJBcnJheSUnOiB0eXBlb2YgRmxvYXQzMkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEZsb2F0MzJBcnJheSxcblx0JyVGbG9hdDY0QXJyYXklJzogdHlwZW9mIEZsb2F0NjRBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBGbG9hdDY0QXJyYXksXG5cdCclRmluYWxpemF0aW9uUmVnaXN0cnklJzogdHlwZW9mIEZpbmFsaXphdGlvblJlZ2lzdHJ5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEZpbmFsaXphdGlvblJlZ2lzdHJ5LFxuXHQnJUZ1bmN0aW9uJSc6ICRGdW5jdGlvbixcblx0JyVHZW5lcmF0b3JGdW5jdGlvbiUnOiBuZWVkc0V2YWwsXG5cdCclSW50OEFycmF5JSc6IHR5cGVvZiBJbnQ4QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogSW50OEFycmF5LFxuXHQnJUludDE2QXJyYXklJzogdHlwZW9mIEludDE2QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogSW50MTZBcnJheSxcblx0JyVJbnQzMkFycmF5JSc6IHR5cGVvZiBJbnQzMkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEludDMyQXJyYXksXG5cdCclaXNGaW5pdGUlJzogaXNGaW5pdGUsXG5cdCclaXNOYU4lJzogaXNOYU4sXG5cdCclSXRlcmF0b3JQcm90b3R5cGUlJzogaGFzU3ltYm9scyAmJiBnZXRQcm90byA/IGdldFByb3RvKGdldFByb3RvKFtdW1N5bWJvbC5pdGVyYXRvcl0oKSkpIDogdW5kZWZpbmVkLFxuXHQnJUpTT04lJzogdHlwZW9mIEpTT04gPT09ICdvYmplY3QnID8gSlNPTiA6IHVuZGVmaW5lZCxcblx0JyVNYXAlJzogdHlwZW9mIE1hcCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBNYXAsXG5cdCclTWFwSXRlcmF0b3JQcm90b3R5cGUlJzogdHlwZW9mIE1hcCA9PT0gJ3VuZGVmaW5lZCcgfHwgIWhhc1N5bWJvbHMgfHwgIWdldFByb3RvID8gdW5kZWZpbmVkIDogZ2V0UHJvdG8obmV3IE1hcCgpW1N5bWJvbC5pdGVyYXRvcl0oKSksXG5cdCclTWF0aCUnOiBNYXRoLFxuXHQnJU51bWJlciUnOiBOdW1iZXIsXG5cdCclT2JqZWN0JSc6IE9iamVjdCxcblx0JyVwYXJzZUZsb2F0JSc6IHBhcnNlRmxvYXQsXG5cdCclcGFyc2VJbnQlJzogcGFyc2VJbnQsXG5cdCclUHJvbWlzZSUnOiB0eXBlb2YgUHJvbWlzZSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBQcm9taXNlLFxuXHQnJVByb3h5JSc6IHR5cGVvZiBQcm94eSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBQcm94eSxcblx0JyVSYW5nZUVycm9yJSc6ICRSYW5nZUVycm9yLFxuXHQnJVJlZmVyZW5jZUVycm9yJSc6ICRSZWZlcmVuY2VFcnJvcixcblx0JyVSZWZsZWN0JSc6IHR5cGVvZiBSZWZsZWN0ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFJlZmxlY3QsXG5cdCclUmVnRXhwJSc6IFJlZ0V4cCxcblx0JyVTZXQlJzogdHlwZW9mIFNldCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBTZXQsXG5cdCclU2V0SXRlcmF0b3JQcm90b3R5cGUlJzogdHlwZW9mIFNldCA9PT0gJ3VuZGVmaW5lZCcgfHwgIWhhc1N5bWJvbHMgfHwgIWdldFByb3RvID8gdW5kZWZpbmVkIDogZ2V0UHJvdG8obmV3IFNldCgpW1N5bWJvbC5pdGVyYXRvcl0oKSksXG5cdCclU2hhcmVkQXJyYXlCdWZmZXIlJzogdHlwZW9mIFNoYXJlZEFycmF5QnVmZmVyID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFNoYXJlZEFycmF5QnVmZmVyLFxuXHQnJVN0cmluZyUnOiBTdHJpbmcsXG5cdCclU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlJzogaGFzU3ltYm9scyAmJiBnZXRQcm90byA/IGdldFByb3RvKCcnW1N5bWJvbC5pdGVyYXRvcl0oKSkgOiB1bmRlZmluZWQsXG5cdCclU3ltYm9sJSc6IGhhc1N5bWJvbHMgPyBTeW1ib2wgOiB1bmRlZmluZWQsXG5cdCclU3ludGF4RXJyb3IlJzogJFN5bnRheEVycm9yLFxuXHQnJVRocm93VHlwZUVycm9yJSc6IFRocm93VHlwZUVycm9yLFxuXHQnJVR5cGVkQXJyYXklJzogVHlwZWRBcnJheSxcblx0JyVUeXBlRXJyb3IlJzogJFR5cGVFcnJvcixcblx0JyVVaW50OEFycmF5JSc6IHR5cGVvZiBVaW50OEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFVpbnQ4QXJyYXksXG5cdCclVWludDhDbGFtcGVkQXJyYXklJzogdHlwZW9mIFVpbnQ4Q2xhbXBlZEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFVpbnQ4Q2xhbXBlZEFycmF5LFxuXHQnJVVpbnQxNkFycmF5JSc6IHR5cGVvZiBVaW50MTZBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBVaW50MTZBcnJheSxcblx0JyVVaW50MzJBcnJheSUnOiB0eXBlb2YgVWludDMyQXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogVWludDMyQXJyYXksXG5cdCclVVJJRXJyb3IlJzogJFVSSUVycm9yLFxuXHQnJVdlYWtNYXAlJzogdHlwZW9mIFdlYWtNYXAgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogV2Vha01hcCxcblx0JyVXZWFrUmVmJSc6IHR5cGVvZiBXZWFrUmVmID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFdlYWtSZWYsXG5cdCclV2Vha1NldCUnOiB0eXBlb2YgV2Vha1NldCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBXZWFrU2V0XG59O1xuXG5pZiAoZ2V0UHJvdG8pIHtcblx0dHJ5IHtcblx0XHRudWxsLmVycm9yOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC1leHByZXNzaW9uc1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc2hhZG93cmVhbG0vcHVsbC8zODQjaXNzdWVjb21tZW50LTEzNjQyNjQyMjlcblx0XHR2YXIgZXJyb3JQcm90byA9IGdldFByb3RvKGdldFByb3RvKGUpKTtcblx0XHRJTlRSSU5TSUNTWyclRXJyb3IucHJvdG90eXBlJSddID0gZXJyb3JQcm90bztcblx0fVxufVxuXG52YXIgZG9FdmFsID0gZnVuY3Rpb24gZG9FdmFsKG5hbWUpIHtcblx0dmFyIHZhbHVlO1xuXHRpZiAobmFtZSA9PT0gJyVBc3luY0Z1bmN0aW9uJScpIHtcblx0XHR2YWx1ZSA9IGdldEV2YWxsZWRDb25zdHJ1Y3RvcignYXN5bmMgZnVuY3Rpb24gKCkge30nKTtcblx0fSBlbHNlIGlmIChuYW1lID09PSAnJUdlbmVyYXRvckZ1bmN0aW9uJScpIHtcblx0XHR2YWx1ZSA9IGdldEV2YWxsZWRDb25zdHJ1Y3RvcignZnVuY3Rpb24qICgpIHt9Jyk7XG5cdH0gZWxzZSBpZiAobmFtZSA9PT0gJyVBc3luY0dlbmVyYXRvckZ1bmN0aW9uJScpIHtcblx0XHR2YWx1ZSA9IGdldEV2YWxsZWRDb25zdHJ1Y3RvcignYXN5bmMgZnVuY3Rpb24qICgpIHt9Jyk7XG5cdH0gZWxzZSBpZiAobmFtZSA9PT0gJyVBc3luY0dlbmVyYXRvciUnKSB7XG5cdFx0dmFyIGZuID0gZG9FdmFsKCclQXN5bmNHZW5lcmF0b3JGdW5jdGlvbiUnKTtcblx0XHRpZiAoZm4pIHtcblx0XHRcdHZhbHVlID0gZm4ucHJvdG90eXBlO1xuXHRcdH1cblx0fSBlbHNlIGlmIChuYW1lID09PSAnJUFzeW5jSXRlcmF0b3JQcm90b3R5cGUlJykge1xuXHRcdHZhciBnZW4gPSBkb0V2YWwoJyVBc3luY0dlbmVyYXRvciUnKTtcblx0XHRpZiAoZ2VuICYmIGdldFByb3RvKSB7XG5cdFx0XHR2YWx1ZSA9IGdldFByb3RvKGdlbi5wcm90b3R5cGUpO1xuXHRcdH1cblx0fVxuXG5cdElOVFJJTlNJQ1NbbmFtZV0gPSB2YWx1ZTtcblxuXHRyZXR1cm4gdmFsdWU7XG59O1xuXG52YXIgTEVHQUNZX0FMSUFTRVMgPSB7XG5cdF9fcHJvdG9fXzogbnVsbCxcblx0JyVBcnJheUJ1ZmZlclByb3RvdHlwZSUnOiBbJ0FycmF5QnVmZmVyJywgJ3Byb3RvdHlwZSddLFxuXHQnJUFycmF5UHJvdG90eXBlJSc6IFsnQXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclQXJyYXlQcm90b19lbnRyaWVzJSc6IFsnQXJyYXknLCAncHJvdG90eXBlJywgJ2VudHJpZXMnXSxcblx0JyVBcnJheVByb3RvX2ZvckVhY2glJzogWydBcnJheScsICdwcm90b3R5cGUnLCAnZm9yRWFjaCddLFxuXHQnJUFycmF5UHJvdG9fa2V5cyUnOiBbJ0FycmF5JywgJ3Byb3RvdHlwZScsICdrZXlzJ10sXG5cdCclQXJyYXlQcm90b192YWx1ZXMlJzogWydBcnJheScsICdwcm90b3R5cGUnLCAndmFsdWVzJ10sXG5cdCclQXN5bmNGdW5jdGlvblByb3RvdHlwZSUnOiBbJ0FzeW5jRnVuY3Rpb24nLCAncHJvdG90eXBlJ10sXG5cdCclQXN5bmNHZW5lcmF0b3IlJzogWydBc3luY0dlbmVyYXRvckZ1bmN0aW9uJywgJ3Byb3RvdHlwZSddLFxuXHQnJUFzeW5jR2VuZXJhdG9yUHJvdG90eXBlJSc6IFsnQXN5bmNHZW5lcmF0b3JGdW5jdGlvbicsICdwcm90b3R5cGUnLCAncHJvdG90eXBlJ10sXG5cdCclQm9vbGVhblByb3RvdHlwZSUnOiBbJ0Jvb2xlYW4nLCAncHJvdG90eXBlJ10sXG5cdCclRGF0YVZpZXdQcm90b3R5cGUlJzogWydEYXRhVmlldycsICdwcm90b3R5cGUnXSxcblx0JyVEYXRlUHJvdG90eXBlJSc6IFsnRGF0ZScsICdwcm90b3R5cGUnXSxcblx0JyVFcnJvclByb3RvdHlwZSUnOiBbJ0Vycm9yJywgJ3Byb3RvdHlwZSddLFxuXHQnJUV2YWxFcnJvclByb3RvdHlwZSUnOiBbJ0V2YWxFcnJvcicsICdwcm90b3R5cGUnXSxcblx0JyVGbG9hdDMyQXJyYXlQcm90b3R5cGUlJzogWydGbG9hdDMyQXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclRmxvYXQ2NEFycmF5UHJvdG90eXBlJSc6IFsnRmxvYXQ2NEFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJUZ1bmN0aW9uUHJvdG90eXBlJSc6IFsnRnVuY3Rpb24nLCAncHJvdG90eXBlJ10sXG5cdCclR2VuZXJhdG9yJSc6IFsnR2VuZXJhdG9yRnVuY3Rpb24nLCAncHJvdG90eXBlJ10sXG5cdCclR2VuZXJhdG9yUHJvdG90eXBlJSc6IFsnR2VuZXJhdG9yRnVuY3Rpb24nLCAncHJvdG90eXBlJywgJ3Byb3RvdHlwZSddLFxuXHQnJUludDhBcnJheVByb3RvdHlwZSUnOiBbJ0ludDhBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVJbnQxNkFycmF5UHJvdG90eXBlJSc6IFsnSW50MTZBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVJbnQzMkFycmF5UHJvdG90eXBlJSc6IFsnSW50MzJBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVKU09OUGFyc2UlJzogWydKU09OJywgJ3BhcnNlJ10sXG5cdCclSlNPTlN0cmluZ2lmeSUnOiBbJ0pTT04nLCAnc3RyaW5naWZ5J10sXG5cdCclTWFwUHJvdG90eXBlJSc6IFsnTWFwJywgJ3Byb3RvdHlwZSddLFxuXHQnJU51bWJlclByb3RvdHlwZSUnOiBbJ051bWJlcicsICdwcm90b3R5cGUnXSxcblx0JyVPYmplY3RQcm90b3R5cGUlJzogWydPYmplY3QnLCAncHJvdG90eXBlJ10sXG5cdCclT2JqUHJvdG9fdG9TdHJpbmclJzogWydPYmplY3QnLCAncHJvdG90eXBlJywgJ3RvU3RyaW5nJ10sXG5cdCclT2JqUHJvdG9fdmFsdWVPZiUnOiBbJ09iamVjdCcsICdwcm90b3R5cGUnLCAndmFsdWVPZiddLFxuXHQnJVByb21pc2VQcm90b3R5cGUlJzogWydQcm9taXNlJywgJ3Byb3RvdHlwZSddLFxuXHQnJVByb21pc2VQcm90b190aGVuJSc6IFsnUHJvbWlzZScsICdwcm90b3R5cGUnLCAndGhlbiddLFxuXHQnJVByb21pc2VfYWxsJSc6IFsnUHJvbWlzZScsICdhbGwnXSxcblx0JyVQcm9taXNlX3JlamVjdCUnOiBbJ1Byb21pc2UnLCAncmVqZWN0J10sXG5cdCclUHJvbWlzZV9yZXNvbHZlJSc6IFsnUHJvbWlzZScsICdyZXNvbHZlJ10sXG5cdCclUmFuZ2VFcnJvclByb3RvdHlwZSUnOiBbJ1JhbmdlRXJyb3InLCAncHJvdG90eXBlJ10sXG5cdCclUmVmZXJlbmNlRXJyb3JQcm90b3R5cGUlJzogWydSZWZlcmVuY2VFcnJvcicsICdwcm90b3R5cGUnXSxcblx0JyVSZWdFeHBQcm90b3R5cGUlJzogWydSZWdFeHAnLCAncHJvdG90eXBlJ10sXG5cdCclU2V0UHJvdG90eXBlJSc6IFsnU2V0JywgJ3Byb3RvdHlwZSddLFxuXHQnJVNoYXJlZEFycmF5QnVmZmVyUHJvdG90eXBlJSc6IFsnU2hhcmVkQXJyYXlCdWZmZXInLCAncHJvdG90eXBlJ10sXG5cdCclU3RyaW5nUHJvdG90eXBlJSc6IFsnU3RyaW5nJywgJ3Byb3RvdHlwZSddLFxuXHQnJVN5bWJvbFByb3RvdHlwZSUnOiBbJ1N5bWJvbCcsICdwcm90b3R5cGUnXSxcblx0JyVTeW50YXhFcnJvclByb3RvdHlwZSUnOiBbJ1N5bnRheEVycm9yJywgJ3Byb3RvdHlwZSddLFxuXHQnJVR5cGVkQXJyYXlQcm90b3R5cGUlJzogWydUeXBlZEFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJVR5cGVFcnJvclByb3RvdHlwZSUnOiBbJ1R5cGVFcnJvcicsICdwcm90b3R5cGUnXSxcblx0JyVVaW50OEFycmF5UHJvdG90eXBlJSc6IFsnVWludDhBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVVaW50OENsYW1wZWRBcnJheVByb3RvdHlwZSUnOiBbJ1VpbnQ4Q2xhbXBlZEFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJVVpbnQxNkFycmF5UHJvdG90eXBlJSc6IFsnVWludDE2QXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclVWludDMyQXJyYXlQcm90b3R5cGUlJzogWydVaW50MzJBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVVUklFcnJvclByb3RvdHlwZSUnOiBbJ1VSSUVycm9yJywgJ3Byb3RvdHlwZSddLFxuXHQnJVdlYWtNYXBQcm90b3R5cGUlJzogWydXZWFrTWFwJywgJ3Byb3RvdHlwZSddLFxuXHQnJVdlYWtTZXRQcm90b3R5cGUlJzogWydXZWFrU2V0JywgJ3Byb3RvdHlwZSddXG59O1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJ2Z1bmN0aW9uLWJpbmQnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCdoYXNvd24nKTtcbnZhciAkY29uY2F0ID0gYmluZC5jYWxsKEZ1bmN0aW9uLmNhbGwsIEFycmF5LnByb3RvdHlwZS5jb25jYXQpO1xudmFyICRzcGxpY2VBcHBseSA9IGJpbmQuY2FsbChGdW5jdGlvbi5hcHBseSwgQXJyYXkucHJvdG90eXBlLnNwbGljZSk7XG52YXIgJHJlcGxhY2UgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlKTtcbnZhciAkc3RyU2xpY2UgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgU3RyaW5nLnByb3RvdHlwZS5zbGljZSk7XG52YXIgJGV4ZWMgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgUmVnRXhwLnByb3RvdHlwZS5leGVjKTtcblxuLyogYWRhcHRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9sb2Rhc2gvbG9kYXNoL2Jsb2IvNC4xNy4xNS9kaXN0L2xvZGFzaC5qcyNMNjczNS1MNjc0NCAqL1xudmFyIHJlUHJvcE5hbWUgPSAvW14lLltcXF1dK3xcXFsoPzooLT9cXGQrKD86XFwuXFxkKyk/KXwoW1wiJ10pKCg/Oig/IVxcMilbXlxcXFxdfFxcXFwuKSo/KVxcMilcXF18KD89KD86XFwufFxcW1xcXSkoPzpcXC58XFxbXFxdfCUkKSkvZztcbnZhciByZUVzY2FwZUNoYXIgPSAvXFxcXChcXFxcKT8vZzsgLyoqIFVzZWQgdG8gbWF0Y2ggYmFja3NsYXNoZXMgaW4gcHJvcGVydHkgcGF0aHMuICovXG52YXIgc3RyaW5nVG9QYXRoID0gZnVuY3Rpb24gc3RyaW5nVG9QYXRoKHN0cmluZykge1xuXHR2YXIgZmlyc3QgPSAkc3RyU2xpY2Uoc3RyaW5nLCAwLCAxKTtcblx0dmFyIGxhc3QgPSAkc3RyU2xpY2Uoc3RyaW5nLCAtMSk7XG5cdGlmIChmaXJzdCA9PT0gJyUnICYmIGxhc3QgIT09ICclJykge1xuXHRcdHRocm93IG5ldyAkU3ludGF4RXJyb3IoJ2ludmFsaWQgaW50cmluc2ljIHN5bnRheCwgZXhwZWN0ZWQgY2xvc2luZyBgJWAnKTtcblx0fSBlbHNlIGlmIChsYXN0ID09PSAnJScgJiYgZmlyc3QgIT09ICclJykge1xuXHRcdHRocm93IG5ldyAkU3ludGF4RXJyb3IoJ2ludmFsaWQgaW50cmluc2ljIHN5bnRheCwgZXhwZWN0ZWQgb3BlbmluZyBgJWAnKTtcblx0fVxuXHR2YXIgcmVzdWx0ID0gW107XG5cdCRyZXBsYWNlKHN0cmluZywgcmVQcm9wTmFtZSwgZnVuY3Rpb24gKG1hdGNoLCBudW1iZXIsIHF1b3RlLCBzdWJTdHJpbmcpIHtcblx0XHRyZXN1bHRbcmVzdWx0Lmxlbmd0aF0gPSBxdW90ZSA/ICRyZXBsYWNlKHN1YlN0cmluZywgcmVFc2NhcGVDaGFyLCAnJDEnKSA6IG51bWJlciB8fCBtYXRjaDtcblx0fSk7XG5cdHJldHVybiByZXN1bHQ7XG59O1xuLyogZW5kIGFkYXB0YXRpb24gKi9cblxudmFyIGdldEJhc2VJbnRyaW5zaWMgPSBmdW5jdGlvbiBnZXRCYXNlSW50cmluc2ljKG5hbWUsIGFsbG93TWlzc2luZykge1xuXHR2YXIgaW50cmluc2ljTmFtZSA9IG5hbWU7XG5cdHZhciBhbGlhcztcblx0aWYgKGhhc093bihMRUdBQ1lfQUxJQVNFUywgaW50cmluc2ljTmFtZSkpIHtcblx0XHRhbGlhcyA9IExFR0FDWV9BTElBU0VTW2ludHJpbnNpY05hbWVdO1xuXHRcdGludHJpbnNpY05hbWUgPSAnJScgKyBhbGlhc1swXSArICclJztcblx0fVxuXG5cdGlmIChoYXNPd24oSU5UUklOU0lDUywgaW50cmluc2ljTmFtZSkpIHtcblx0XHR2YXIgdmFsdWUgPSBJTlRSSU5TSUNTW2ludHJpbnNpY05hbWVdO1xuXHRcdGlmICh2YWx1ZSA9PT0gbmVlZHNFdmFsKSB7XG5cdFx0XHR2YWx1ZSA9IGRvRXZhbChpbnRyaW5zaWNOYW1lKTtcblx0XHR9XG5cdFx0aWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgJiYgIWFsbG93TWlzc2luZykge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2ludHJpbnNpYyAnICsgbmFtZSArICcgZXhpc3RzLCBidXQgaXMgbm90IGF2YWlsYWJsZS4gUGxlYXNlIGZpbGUgYW4gaXNzdWUhJyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHtcblx0XHRcdGFsaWFzOiBhbGlhcyxcblx0XHRcdG5hbWU6IGludHJpbnNpY05hbWUsXG5cdFx0XHR2YWx1ZTogdmFsdWVcblx0XHR9O1xuXHR9XG5cblx0dGhyb3cgbmV3ICRTeW50YXhFcnJvcignaW50cmluc2ljICcgKyBuYW1lICsgJyBkb2VzIG5vdCBleGlzdCEnKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gR2V0SW50cmluc2ljKG5hbWUsIGFsbG93TWlzc2luZykge1xuXHRpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnIHx8IG5hbWUubGVuZ3RoID09PSAwKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2ludHJpbnNpYyBuYW1lIG11c3QgYmUgYSBub24tZW1wdHkgc3RyaW5nJyk7XG5cdH1cblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIHR5cGVvZiBhbGxvd01pc3NpbmcgIT09ICdib29sZWFuJykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdcImFsbG93TWlzc2luZ1wiIGFyZ3VtZW50IG11c3QgYmUgYSBib29sZWFuJyk7XG5cdH1cblxuXHRpZiAoJGV4ZWMoL14lP1teJV0qJT8kLywgbmFtZSkgPT09IG51bGwpIHtcblx0XHR0aHJvdyBuZXcgJFN5bnRheEVycm9yKCdgJWAgbWF5IG5vdCBiZSBwcmVzZW50IGFueXdoZXJlIGJ1dCBhdCB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgdGhlIGludHJpbnNpYyBuYW1lJyk7XG5cdH1cblx0dmFyIHBhcnRzID0gc3RyaW5nVG9QYXRoKG5hbWUpO1xuXHR2YXIgaW50cmluc2ljQmFzZU5hbWUgPSBwYXJ0cy5sZW5ndGggPiAwID8gcGFydHNbMF0gOiAnJztcblxuXHR2YXIgaW50cmluc2ljID0gZ2V0QmFzZUludHJpbnNpYygnJScgKyBpbnRyaW5zaWNCYXNlTmFtZSArICclJywgYWxsb3dNaXNzaW5nKTtcblx0dmFyIGludHJpbnNpY1JlYWxOYW1lID0gaW50cmluc2ljLm5hbWU7XG5cdHZhciB2YWx1ZSA9IGludHJpbnNpYy52YWx1ZTtcblx0dmFyIHNraXBGdXJ0aGVyQ2FjaGluZyA9IGZhbHNlO1xuXG5cdHZhciBhbGlhcyA9IGludHJpbnNpYy5hbGlhcztcblx0aWYgKGFsaWFzKSB7XG5cdFx0aW50cmluc2ljQmFzZU5hbWUgPSBhbGlhc1swXTtcblx0XHQkc3BsaWNlQXBwbHkocGFydHMsICRjb25jYXQoWzAsIDFdLCBhbGlhcykpO1xuXHR9XG5cblx0Zm9yICh2YXIgaSA9IDEsIGlzT3duID0gdHJ1ZTsgaSA8IHBhcnRzLmxlbmd0aDsgaSArPSAxKSB7XG5cdFx0dmFyIHBhcnQgPSBwYXJ0c1tpXTtcblx0XHR2YXIgZmlyc3QgPSAkc3RyU2xpY2UocGFydCwgMCwgMSk7XG5cdFx0dmFyIGxhc3QgPSAkc3RyU2xpY2UocGFydCwgLTEpO1xuXHRcdGlmIChcblx0XHRcdChcblx0XHRcdFx0KGZpcnN0ID09PSAnXCInIHx8IGZpcnN0ID09PSBcIidcIiB8fCBmaXJzdCA9PT0gJ2AnKVxuXHRcdFx0XHR8fCAobGFzdCA9PT0gJ1wiJyB8fCBsYXN0ID09PSBcIidcIiB8fCBsYXN0ID09PSAnYCcpXG5cdFx0XHQpXG5cdFx0XHQmJiBmaXJzdCAhPT0gbGFzdFxuXHRcdCkge1xuXHRcdFx0dGhyb3cgbmV3ICRTeW50YXhFcnJvcigncHJvcGVydHkgbmFtZXMgd2l0aCBxdW90ZXMgbXVzdCBoYXZlIG1hdGNoaW5nIHF1b3RlcycpO1xuXHRcdH1cblx0XHRpZiAocGFydCA9PT0gJ2NvbnN0cnVjdG9yJyB8fCAhaXNPd24pIHtcblx0XHRcdHNraXBGdXJ0aGVyQ2FjaGluZyA9IHRydWU7XG5cdFx0fVxuXG5cdFx0aW50cmluc2ljQmFzZU5hbWUgKz0gJy4nICsgcGFydDtcblx0XHRpbnRyaW5zaWNSZWFsTmFtZSA9ICclJyArIGludHJpbnNpY0Jhc2VOYW1lICsgJyUnO1xuXG5cdFx0aWYgKGhhc093bihJTlRSSU5TSUNTLCBpbnRyaW5zaWNSZWFsTmFtZSkpIHtcblx0XHRcdHZhbHVlID0gSU5UUklOU0lDU1tpbnRyaW5zaWNSZWFsTmFtZV07XG5cdFx0fSBlbHNlIGlmICh2YWx1ZSAhPSBudWxsKSB7XG5cdFx0XHRpZiAoIShwYXJ0IGluIHZhbHVlKSkge1xuXHRcdFx0XHRpZiAoIWFsbG93TWlzc2luZykge1xuXHRcdFx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdiYXNlIGludHJpbnNpYyBmb3IgJyArIG5hbWUgKyAnIGV4aXN0cywgYnV0IHRoZSBwcm9wZXJ0eSBpcyBub3QgYXZhaWxhYmxlLicpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB2b2lkIHVuZGVmaW5lZDtcblx0XHRcdH1cblx0XHRcdGlmICgkZ09QRCAmJiAoaSArIDEpID49IHBhcnRzLmxlbmd0aCkge1xuXHRcdFx0XHR2YXIgZGVzYyA9ICRnT1BEKHZhbHVlLCBwYXJ0KTtcblx0XHRcdFx0aXNPd24gPSAhIWRlc2M7XG5cblx0XHRcdFx0Ly8gQnkgY29udmVudGlvbiwgd2hlbiBhIGRhdGEgcHJvcGVydHkgaXMgY29udmVydGVkIHRvIGFuIGFjY2Vzc29yXG5cdFx0XHRcdC8vIHByb3BlcnR5IHRvIGVtdWxhdGUgYSBkYXRhIHByb3BlcnR5IHRoYXQgZG9lcyBub3Qgc3VmZmVyIGZyb21cblx0XHRcdFx0Ly8gdGhlIG92ZXJyaWRlIG1pc3Rha2UsIHRoYXQgYWNjZXNzb3IncyBnZXR0ZXIgaXMgbWFya2VkIHdpdGhcblx0XHRcdFx0Ly8gYW4gYG9yaWdpbmFsVmFsdWVgIHByb3BlcnR5LiBIZXJlLCB3aGVuIHdlIGRldGVjdCB0aGlzLCB3ZVxuXHRcdFx0XHQvLyB1cGhvbGQgdGhlIGlsbHVzaW9uIGJ5IHByZXRlbmRpbmcgdG8gc2VlIHRoYXQgb3JpZ2luYWwgZGF0YVxuXHRcdFx0XHQvLyBwcm9wZXJ0eSwgaS5lLiwgcmV0dXJuaW5nIHRoZSB2YWx1ZSByYXRoZXIgdGhhbiB0aGUgZ2V0dGVyXG5cdFx0XHRcdC8vIGl0c2VsZi5cblx0XHRcdFx0aWYgKGlzT3duICYmICdnZXQnIGluIGRlc2MgJiYgISgnb3JpZ2luYWxWYWx1ZScgaW4gZGVzYy5nZXQpKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSBkZXNjLmdldDtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR2YWx1ZSA9IHZhbHVlW3BhcnRdO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpc093biA9IGhhc093bih2YWx1ZSwgcGFydCk7XG5cdFx0XHRcdHZhbHVlID0gdmFsdWVbcGFydF07XG5cdFx0XHR9XG5cblx0XHRcdGlmIChpc093biAmJiAhc2tpcEZ1cnRoZXJDYWNoaW5nKSB7XG5cdFx0XHRcdElOVFJJTlNJQ1NbaW50cmluc2ljUmVhbE5hbWVdID0gdmFsdWU7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdHJldHVybiB2YWx1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCdnZXQtaW50cmluc2ljJyk7XG5cbnZhciAkZ09QRCA9IEdldEludHJpbnNpYygnJU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IlJywgdHJ1ZSk7XG5cbmlmICgkZ09QRCkge1xuXHR0cnkge1xuXHRcdCRnT1BEKFtdLCAnbGVuZ3RoJyk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHQvLyBJRSA4IGhhcyBhIGJyb2tlbiBnT1BEXG5cdFx0JGdPUEQgPSBudWxsO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gJGdPUEQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCdlcy1kZWZpbmUtcHJvcGVydHknKTtcblxudmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvcnMgPSBmdW5jdGlvbiBoYXNQcm9wZXJ0eURlc2NyaXB0b3JzKCkge1xuXHRyZXR1cm4gISEkZGVmaW5lUHJvcGVydHk7XG59O1xuXG5oYXNQcm9wZXJ0eURlc2NyaXB0b3JzLmhhc0FycmF5TGVuZ3RoRGVmaW5lQnVnID0gZnVuY3Rpb24gaGFzQXJyYXlMZW5ndGhEZWZpbmVCdWcoKSB7XG5cdC8vIG5vZGUgdjAuNiBoYXMgYSBidWcgd2hlcmUgYXJyYXkgbGVuZ3RocyBjYW4gYmUgU2V0IGJ1dCBub3QgRGVmaW5lZFxuXHRpZiAoISRkZWZpbmVQcm9wZXJ0eSkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cdHRyeSB7XG5cdFx0cmV0dXJuICRkZWZpbmVQcm9wZXJ0eShbXSwgJ2xlbmd0aCcsIHsgdmFsdWU6IDEgfSkubGVuZ3RoICE9PSAxO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0Ly8gSW4gRmlyZWZveCA0LTIyLCBkZWZpbmluZyBsZW5ndGggb24gYW4gYXJyYXkgdGhyb3dzIGFuIGV4Y2VwdGlvbi5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3JzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdGVzdCA9IHtcblx0X19wcm90b19fOiBudWxsLFxuXHRmb286IHt9XG59O1xuXG52YXIgJE9iamVjdCA9IE9iamVjdDtcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4nKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaGFzUHJvdG8oKSB7XG5cdC8vIEB0cy1leHBlY3QtZXJyb3I6IFRTIGVycm9ycyBvbiBhbiBpbmhlcml0ZWQgcHJvcGVydHkgZm9yIHNvbWUgcmVhc29uXG5cdHJldHVybiB7IF9fcHJvdG9fXzogdGVzdCB9LmZvbyA9PT0gdGVzdC5mb29cblx0XHQmJiAhKHRlc3QgaW5zdGFuY2VvZiAkT2JqZWN0KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBvcmlnU3ltYm9sID0gdHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sO1xudmFyIGhhc1N5bWJvbFNoYW0gPSByZXF1aXJlKCcuL3NoYW1zJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaGFzTmF0aXZlU3ltYm9scygpIHtcblx0aWYgKHR5cGVvZiBvcmlnU3ltYm9sICE9PSAnZnVuY3Rpb24nKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ2Z1bmN0aW9uJykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKHR5cGVvZiBvcmlnU3ltYm9sKCdmb28nKSAhPT0gJ3N5bWJvbCcpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICh0eXBlb2YgU3ltYm9sKCdiYXInKSAhPT0gJ3N5bWJvbCcpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0cmV0dXJuIGhhc1N5bWJvbFNoYW0oKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qIGVzbGludCBjb21wbGV4aXR5OiBbMiwgMThdLCBtYXgtc3RhdGVtZW50czogWzIsIDMzXSAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBoYXNTeW1ib2xzKCkge1xuXHRpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyAhPT0gJ2Z1bmN0aW9uJykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICdzeW1ib2wnKSB7IHJldHVybiB0cnVlOyB9XG5cblx0dmFyIG9iaiA9IHt9O1xuXHR2YXIgc3ltID0gU3ltYm9sKCd0ZXN0Jyk7XG5cdHZhciBzeW1PYmogPSBPYmplY3Qoc3ltKTtcblx0aWYgKHR5cGVvZiBzeW0gPT09ICdzdHJpbmcnKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoc3ltKSAhPT0gJ1tvYmplY3QgU3ltYm9sXScpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoc3ltT2JqKSAhPT0gJ1tvYmplY3QgU3ltYm9sXScpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0Ly8gdGVtcCBkaXNhYmxlZCBwZXIgaHR0cHM6Ly9naXRodWIuY29tL2xqaGFyYi9vYmplY3QuYXNzaWduL2lzc3Vlcy8xN1xuXHQvLyBpZiAoc3ltIGluc3RhbmNlb2YgU3ltYm9sKSB7IHJldHVybiBmYWxzZTsgfVxuXHQvLyB0ZW1wIGRpc2FibGVkIHBlciBodHRwczovL2dpdGh1Yi5jb20vV2ViUmVmbGVjdGlvbi9nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMvaXNzdWVzLzRcblx0Ly8gaWYgKCEoc3ltT2JqIGluc3RhbmNlb2YgU3ltYm9sKSkgeyByZXR1cm4gZmFsc2U7IH1cblxuXHQvLyBpZiAodHlwZW9mIFN5bWJvbC5wcm90b3R5cGUudG9TdHJpbmcgIT09ICdmdW5jdGlvbicpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdC8vIGlmIChTdHJpbmcoc3ltKSAhPT0gU3ltYm9sLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHN5bSkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0dmFyIHN5bVZhbCA9IDQyO1xuXHRvYmpbc3ltXSA9IHN5bVZhbDtcblx0Zm9yIChzeW0gaW4gb2JqKSB7IHJldHVybiBmYWxzZTsgfSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4LCBuby11bnJlYWNoYWJsZS1sb29wXG5cdGlmICh0eXBlb2YgT2JqZWN0LmtleXMgPT09ICdmdW5jdGlvbicgJiYgT2JqZWN0LmtleXMob2JqKS5sZW5ndGggIT09IDApIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0aWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyA9PT0gJ2Z1bmN0aW9uJyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopLmxlbmd0aCAhPT0gMCkgeyByZXR1cm4gZmFsc2U7IH1cblxuXHR2YXIgc3ltcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqKTtcblx0aWYgKHN5bXMubGVuZ3RoICE9PSAxIHx8IHN5bXNbMF0gIT09IHN5bSkgeyByZXR1cm4gZmFsc2U7IH1cblxuXHRpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChvYmosIHN5bSkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0aWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0dmFyIGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwgc3ltKTtcblx0XHRpZiAoZGVzY3JpcHRvci52YWx1ZSAhPT0gc3ltVmFsIHx8IGRlc2NyaXB0b3IuZW51bWVyYWJsZSAhPT0gdHJ1ZSkgeyByZXR1cm4gZmFsc2U7IH1cblx0fVxuXG5cdHJldHVybiB0cnVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNhbGwgPSBGdW5jdGlvbi5wcm90b3R5cGUuY2FsbDtcbnZhciAkaGFzT3duID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBiaW5kID0gcmVxdWlyZSgnZnVuY3Rpb24tYmluZCcpO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLicpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBiaW5kLmNhbGwoY2FsbCwgJGhhc093bik7XG4iLCIvKiFcblx0Wm9vbSAxLjcuMjFcblx0bGljZW5zZTogTUlUXG5cdGh0dHA6Ly93d3cuamFja2xtb29yZS5jb20vem9vbVxuKi9cbihmdW5jdGlvbiAoJCkge1xuXHR2YXIgZGVmYXVsdHMgPSB7XG5cdFx0dXJsOiBmYWxzZSxcblx0XHRjYWxsYmFjazogZmFsc2UsXG5cdFx0dGFyZ2V0OiBmYWxzZSxcblx0XHRkdXJhdGlvbjogMTIwLFxuXHRcdG9uOiAnbW91c2VvdmVyJywgLy8gb3RoZXIgb3B0aW9uczogZ3JhYiwgY2xpY2ssIHRvZ2dsZVxuXHRcdHRvdWNoOiB0cnVlLCAvLyBlbmFibGVzIGEgdG91Y2ggZmFsbGJhY2tcblx0XHRvblpvb21JbjogZmFsc2UsXG5cdFx0b25ab29tT3V0OiBmYWxzZSxcblx0XHRtYWduaWZ5OiAxXG5cdH07XG5cblx0Ly8gQ29yZSBab29tIExvZ2ljLCBpbmRlcGVuZGVudCBvZiBldmVudCBsaXN0ZW5lcnMuXG5cdCQuem9vbSA9IGZ1bmN0aW9uKHRhcmdldCwgc291cmNlLCBpbWcsIG1hZ25pZnkpIHtcblx0XHR2YXIgdGFyZ2V0SGVpZ2h0LFxuXHRcdFx0dGFyZ2V0V2lkdGgsXG5cdFx0XHRzb3VyY2VIZWlnaHQsXG5cdFx0XHRzb3VyY2VXaWR0aCxcblx0XHRcdHhSYXRpbyxcblx0XHRcdHlSYXRpbyxcblx0XHRcdG9mZnNldCxcblx0XHRcdCR0YXJnZXQgPSAkKHRhcmdldCksXG5cdFx0XHRwb3NpdGlvbiA9ICR0YXJnZXQuY3NzKCdwb3NpdGlvbicpLFxuXHRcdFx0JHNvdXJjZSA9ICQoc291cmNlKTtcblxuXHRcdC8vIFRoZSBwYXJlbnQgZWxlbWVudCBuZWVkcyBwb3NpdGlvbmluZyBzbyB0aGF0IHRoZSB6b29tZWQgZWxlbWVudCBjYW4gYmUgY29ycmVjdGx5IHBvc2l0aW9uZWQgd2l0aGluLlxuXHRcdHRhcmdldC5zdHlsZS5wb3NpdGlvbiA9IC8oYWJzb2x1dGV8Zml4ZWQpLy50ZXN0KHBvc2l0aW9uKSA/IHBvc2l0aW9uIDogJ3JlbGF0aXZlJztcblx0XHR0YXJnZXQuc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJztcblx0XHRpbWcuc3R5bGUud2lkdGggPSBpbWcuc3R5bGUuaGVpZ2h0ID0gJyc7XG5cblx0XHQkKGltZylcblx0XHRcdC5hZGRDbGFzcygnem9vbUltZycpXG5cdFx0XHQuY3NzKHtcblx0XHRcdFx0cG9zaXRpb246ICdhYnNvbHV0ZScsXG5cdFx0XHRcdHRvcDogMCxcblx0XHRcdFx0bGVmdDogMCxcblx0XHRcdFx0b3BhY2l0eTogMCxcblx0XHRcdFx0d2lkdGg6IGltZy53aWR0aCAqIG1hZ25pZnksXG5cdFx0XHRcdGhlaWdodDogaW1nLmhlaWdodCAqIG1hZ25pZnksXG5cdFx0XHRcdGJvcmRlcjogJ25vbmUnLFxuXHRcdFx0XHRtYXhXaWR0aDogJ25vbmUnLFxuXHRcdFx0XHRtYXhIZWlnaHQ6ICdub25lJ1xuXHRcdFx0fSlcblx0XHRcdC5hcHBlbmRUbyh0YXJnZXQpO1xuXG5cdFx0cmV0dXJuIHtcblx0XHRcdGluaXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR0YXJnZXRXaWR0aCA9ICR0YXJnZXQub3V0ZXJXaWR0aCgpO1xuXHRcdFx0XHR0YXJnZXRIZWlnaHQgPSAkdGFyZ2V0Lm91dGVySGVpZ2h0KCk7XG5cblx0XHRcdFx0aWYgKHNvdXJjZSA9PT0gdGFyZ2V0KSB7XG5cdFx0XHRcdFx0c291cmNlV2lkdGggPSB0YXJnZXRXaWR0aDtcblx0XHRcdFx0XHRzb3VyY2VIZWlnaHQgPSB0YXJnZXRIZWlnaHQ7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c291cmNlV2lkdGggPSAkc291cmNlLm91dGVyV2lkdGgoKTtcblx0XHRcdFx0XHRzb3VyY2VIZWlnaHQgPSAkc291cmNlLm91dGVySGVpZ2h0KCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR4UmF0aW8gPSAoaW1nLndpZHRoIC0gdGFyZ2V0V2lkdGgpIC8gc291cmNlV2lkdGg7XG5cdFx0XHRcdHlSYXRpbyA9IChpbWcuaGVpZ2h0IC0gdGFyZ2V0SGVpZ2h0KSAvIHNvdXJjZUhlaWdodDtcblxuXHRcdFx0XHRvZmZzZXQgPSAkc291cmNlLm9mZnNldCgpO1xuXHRcdFx0fSxcblx0XHRcdG1vdmU6IGZ1bmN0aW9uIChlKSB7XG5cdFx0XHRcdHZhciBsZWZ0ID0gKGUucGFnZVggLSBvZmZzZXQubGVmdCksXG5cdFx0XHRcdFx0dG9wID0gKGUucGFnZVkgLSBvZmZzZXQudG9wKTtcblxuXHRcdFx0XHR0b3AgPSBNYXRoLm1heChNYXRoLm1pbih0b3AsIHNvdXJjZUhlaWdodCksIDApO1xuXHRcdFx0XHRsZWZ0ID0gTWF0aC5tYXgoTWF0aC5taW4obGVmdCwgc291cmNlV2lkdGgpLCAwKTtcblxuXHRcdFx0XHRpbWcuc3R5bGUubGVmdCA9IChsZWZ0ICogLXhSYXRpbykgKyAncHgnO1xuXHRcdFx0XHRpbWcuc3R5bGUudG9wID0gKHRvcCAqIC15UmF0aW8pICsgJ3B4Jztcblx0XHRcdH1cblx0XHR9O1xuXHR9O1xuXG5cdCQuZm4uem9vbSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG5cdFx0XHR2YXJcblx0XHRcdHNldHRpbmdzID0gJC5leHRlbmQoe30sIGRlZmF1bHRzLCBvcHRpb25zIHx8IHt9KSxcblx0XHRcdC8vdGFyZ2V0IHdpbGwgZGlzcGxheSB0aGUgem9vbWVkIGltYWdlXG5cdFx0XHR0YXJnZXQgPSBzZXR0aW5ncy50YXJnZXQgJiYgJChzZXR0aW5ncy50YXJnZXQpWzBdIHx8IHRoaXMsXG5cdFx0XHQvL3NvdXJjZSB3aWxsIHByb3ZpZGUgem9vbSBsb2NhdGlvbiBpbmZvICh0aHVtYm5haWwpXG5cdFx0XHRzb3VyY2UgPSB0aGlzLFxuXHRcdFx0JHNvdXJjZSA9ICQoc291cmNlKSxcblx0XHRcdGltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpLFxuXHRcdFx0JGltZyA9ICQoaW1nKSxcblx0XHRcdG1vdXNlbW92ZSA9ICdtb3VzZW1vdmUuem9vbScsXG5cdFx0XHRjbGlja2VkID0gZmFsc2UsXG5cdFx0XHR0b3VjaGVkID0gZmFsc2U7XG5cblx0XHRcdC8vIElmIGEgdXJsIHdhc24ndCBzcGVjaWZpZWQsIGxvb2sgZm9yIGFuIGltYWdlIGVsZW1lbnQuXG5cdFx0XHRpZiAoIXNldHRpbmdzLnVybCkge1xuXHRcdFx0XHR2YXIgc3JjRWxlbWVudCA9IHNvdXJjZS5xdWVyeVNlbGVjdG9yKCdpbWcnKTtcblx0XHRcdFx0aWYgKHNyY0VsZW1lbnQpIHtcblx0XHRcdFx0XHRzZXR0aW5ncy51cmwgPSBzcmNFbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1zcmMnKSB8fCBzcmNFbGVtZW50LmN1cnJlbnRTcmMgfHwgc3JjRWxlbWVudC5zcmM7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCFzZXR0aW5ncy51cmwpIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0JHNvdXJjZS5vbmUoJ3pvb20uZGVzdHJveScsIGZ1bmN0aW9uKHBvc2l0aW9uLCBvdmVyZmxvdyl7XG5cdFx0XHRcdCRzb3VyY2Uub2ZmKFwiLnpvb21cIik7XG5cdFx0XHRcdHRhcmdldC5zdHlsZS5wb3NpdGlvbiA9IHBvc2l0aW9uO1xuXHRcdFx0XHR0YXJnZXQuc3R5bGUub3ZlcmZsb3cgPSBvdmVyZmxvdztcblx0XHRcdFx0aW1nLm9ubG9hZCA9IG51bGw7XG5cdFx0XHRcdCRpbWcucmVtb3ZlKCk7XG5cdFx0XHR9LmJpbmQodGhpcywgdGFyZ2V0LnN0eWxlLnBvc2l0aW9uLCB0YXJnZXQuc3R5bGUub3ZlcmZsb3cpKTtcblxuXHRcdFx0aW1nLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0dmFyIHpvb20gPSAkLnpvb20odGFyZ2V0LCBzb3VyY2UsIGltZywgc2V0dGluZ3MubWFnbmlmeSk7XG5cblx0XHRcdFx0ZnVuY3Rpb24gc3RhcnQoZSkge1xuXHRcdFx0XHRcdHpvb20uaW5pdCgpO1xuXHRcdFx0XHRcdHpvb20ubW92ZShlKTtcblxuXHRcdFx0XHRcdC8vIFNraXAgdGhlIGZhZGUtaW4gZm9yIElFOCBhbmQgbG93ZXIgc2luY2UgaXQgY2hva2VzIG9uIGZhZGluZy1pblxuXHRcdFx0XHRcdC8vIGFuZCBjaGFuZ2luZyBwb3NpdGlvbiBiYXNlZCBvbiBtb3VzZW1vdmVtZW50IGF0IHRoZSBzYW1lIHRpbWUuXG5cdFx0XHRcdFx0JGltZy5zdG9wKClcblx0XHRcdFx0XHQuZmFkZVRvKCQuc3VwcG9ydC5vcGFjaXR5ID8gc2V0dGluZ3MuZHVyYXRpb24gOiAwLCAxLCAkLmlzRnVuY3Rpb24oc2V0dGluZ3Mub25ab29tSW4pID8gc2V0dGluZ3Mub25ab29tSW4uY2FsbChpbWcpIDogZmFsc2UpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZnVuY3Rpb24gc3RvcCgpIHtcblx0XHRcdFx0XHQkaW1nLnN0b3AoKVxuXHRcdFx0XHRcdC5mYWRlVG8oc2V0dGluZ3MuZHVyYXRpb24sIDAsICQuaXNGdW5jdGlvbihzZXR0aW5ncy5vblpvb21PdXQpID8gc2V0dGluZ3Mub25ab29tT3V0LmNhbGwoaW1nKSA6IGZhbHNlKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE1vdXNlIGV2ZW50c1xuXHRcdFx0XHRpZiAoc2V0dGluZ3Mub24gPT09ICdncmFiJykge1xuXHRcdFx0XHRcdCRzb3VyY2Vcblx0XHRcdFx0XHRcdC5vbignbW91c2Vkb3duLnpvb20nLFxuXHRcdFx0XHRcdFx0XHRmdW5jdGlvbiAoZSkge1xuXHRcdFx0XHRcdFx0XHRcdGlmIChlLndoaWNoID09PSAxKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHQkKGRvY3VtZW50KS5vbmUoJ21vdXNldXAuem9vbScsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRzdG9wKCk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQkKGRvY3VtZW50KS5vZmYobW91c2Vtb3ZlLCB6b29tLm1vdmUpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRzdGFydChlKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0JChkb2N1bWVudCkub24obW91c2Vtb3ZlLCB6b29tLm1vdmUpO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHNldHRpbmdzLm9uID09PSAnY2xpY2snKSB7XG5cdFx0XHRcdFx0JHNvdXJjZS5vbignY2xpY2suem9vbScsXG5cdFx0XHRcdFx0XHRmdW5jdGlvbiAoZSkge1xuXHRcdFx0XHRcdFx0XHRpZiAoY2xpY2tlZCkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIGJ1YmJsZSB0aGUgZXZlbnQgdXAgdG8gdGhlIGRvY3VtZW50IHRvIHRyaWdnZXIgdGhlIHVuYmluZC5cblx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0Y2xpY2tlZCA9IHRydWU7XG5cdFx0XHRcdFx0XHRcdFx0c3RhcnQoZSk7XG5cdFx0XHRcdFx0XHRcdFx0JChkb2N1bWVudCkub24obW91c2Vtb3ZlLCB6b29tLm1vdmUpO1xuXHRcdFx0XHRcdFx0XHRcdCQoZG9jdW1lbnQpLm9uZSgnY2xpY2suem9vbScsXG5cdFx0XHRcdFx0XHRcdFx0XHRmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHN0b3AoKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y2xpY2tlZCA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHQkKGRvY3VtZW50KS5vZmYobW91c2Vtb3ZlLCB6b29tLm1vdmUpO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fSBlbHNlIGlmIChzZXR0aW5ncy5vbiA9PT0gJ3RvZ2dsZScpIHtcblx0XHRcdFx0XHQkc291cmNlLm9uKCdjbGljay56b29tJyxcblx0XHRcdFx0XHRcdGZ1bmN0aW9uIChlKSB7XG5cdFx0XHRcdFx0XHRcdGlmIChjbGlja2VkKSB7XG5cdFx0XHRcdFx0XHRcdFx0c3RvcCgpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXJ0KGUpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGNsaWNrZWQgPSAhY2xpY2tlZDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHNldHRpbmdzLm9uID09PSAnbW91c2VvdmVyJykge1xuXHRcdFx0XHRcdHpvb20uaW5pdCgpOyAvLyBQcmVlbXB0aXZlbHkgY2FsbCBpbml0IGJlY2F1c2UgSUU3IHdpbGwgZmlyZSB0aGUgbW91c2Vtb3ZlIGhhbmRsZXIgYmVmb3JlIHRoZSBob3ZlciBoYW5kbGVyLlxuXG5cdFx0XHRcdFx0JHNvdXJjZVxuXHRcdFx0XHRcdFx0Lm9uKCdtb3VzZWVudGVyLnpvb20nLCBzdGFydClcblx0XHRcdFx0XHRcdC5vbignbW91c2VsZWF2ZS56b29tJywgc3RvcClcblx0XHRcdFx0XHRcdC5vbihtb3VzZW1vdmUsIHpvb20ubW92ZSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUb3VjaCBmYWxsYmFja1xuXHRcdFx0XHRpZiAoc2V0dGluZ3MudG91Y2gpIHtcblx0XHRcdFx0XHQkc291cmNlXG5cdFx0XHRcdFx0XHQub24oJ3RvdWNoc3RhcnQuem9vbScsIGZ1bmN0aW9uIChlKSB7XG5cdFx0XHRcdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdFx0aWYgKHRvdWNoZWQpIHtcblx0XHRcdFx0XHRcdFx0XHR0b3VjaGVkID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0c3RvcCgpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHRvdWNoZWQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHRcdHN0YXJ0KCBlLm9yaWdpbmFsRXZlbnQudG91Y2hlc1swXSB8fCBlLm9yaWdpbmFsRXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSlcblx0XHRcdFx0XHRcdC5vbigndG91Y2htb3ZlLnpvb20nLCBmdW5jdGlvbiAoZSkge1xuXHRcdFx0XHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRcdHpvb20ubW92ZSggZS5vcmlnaW5hbEV2ZW50LnRvdWNoZXNbMF0gfHwgZS5vcmlnaW5hbEV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdICk7XG5cdFx0XHRcdFx0XHR9KVxuXHRcdFx0XHRcdFx0Lm9uKCd0b3VjaGVuZC56b29tJywgZnVuY3Rpb24gKGUpIHtcblx0XHRcdFx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0XHRpZiAodG91Y2hlZCkge1xuXHRcdFx0XHRcdFx0XHRcdHRvdWNoZWQgPSBmYWxzZTtcblx0XHRcdFx0XHRcdFx0XHRzdG9wKCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRpZiAoJC5pc0Z1bmN0aW9uKHNldHRpbmdzLmNhbGxiYWNrKSkge1xuXHRcdFx0XHRcdHNldHRpbmdzLmNhbGxiYWNrLmNhbGwoaW1nKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdFx0aW1nLnNldEF0dHJpYnV0ZSgncm9sZScsICdwcmVzZW50YXRpb24nKTtcblx0XHRcdGltZy5hbHQgPSAnJztcblx0XHRcdGltZy5zcmMgPSBzZXR0aW5ncy51cmw7XG5cdFx0fSk7XG5cdH07XG5cblx0JC5mbi56b29tLmRlZmF1bHRzID0gZGVmYXVsdHM7XG59KHdpbmRvdy5qUXVlcnkpKTtcbiIsIi8qIVxuICogalF1ZXJ5IENvb2tpZSBQbHVnaW4gdjEuNC4xXG4gKiBodHRwczovL2dpdGh1Yi5jb20vY2FyaGFydGwvanF1ZXJ5LWNvb2tpZVxuICpcbiAqIENvcHlyaWdodCAyMDEzIEtsYXVzIEhhcnRsXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqL1xuKGZ1bmN0aW9uIChmYWN0b3J5KSB7XG5cdGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyBBTURcblx0XHRkZWZpbmUoWydqcXVlcnknXSwgZmFjdG9yeSk7XG5cdH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRmYWN0b3J5KHJlcXVpcmUoJ2pxdWVyeScpKTtcblx0fSBlbHNlIHtcblx0XHQvLyBCcm93c2VyIGdsb2JhbHNcblx0XHRmYWN0b3J5KGpRdWVyeSk7XG5cdH1cbn0oZnVuY3Rpb24gKCQpIHtcblxuXHR2YXIgcGx1c2VzID0gL1xcKy9nO1xuXG5cdGZ1bmN0aW9uIGVuY29kZShzKSB7XG5cdFx0cmV0dXJuIGNvbmZpZy5yYXcgPyBzIDogZW5jb2RlVVJJQ29tcG9uZW50KHMpO1xuXHR9XG5cblx0ZnVuY3Rpb24gZGVjb2RlKHMpIHtcblx0XHRyZXR1cm4gY29uZmlnLnJhdyA/IHMgOiBkZWNvZGVVUklDb21wb25lbnQocyk7XG5cdH1cblxuXHRmdW5jdGlvbiBzdHJpbmdpZnlDb29raWVWYWx1ZSh2YWx1ZSkge1xuXHRcdHJldHVybiBlbmNvZGUoY29uZmlnLmpzb24gPyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgOiBTdHJpbmcodmFsdWUpKTtcblx0fVxuXG5cdGZ1bmN0aW9uIHBhcnNlQ29va2llVmFsdWUocykge1xuXHRcdGlmIChzLmluZGV4T2YoJ1wiJykgPT09IDApIHtcblx0XHRcdC8vIFRoaXMgaXMgYSBxdW90ZWQgY29va2llIGFzIGFjY29yZGluZyB0byBSRkMyMDY4LCB1bmVzY2FwZS4uLlxuXHRcdFx0cyA9IHMuc2xpY2UoMSwgLTEpLnJlcGxhY2UoL1xcXFxcIi9nLCAnXCInKS5yZXBsYWNlKC9cXFxcXFxcXC9nLCAnXFxcXCcpO1xuXHRcdH1cblxuXHRcdHRyeSB7XG5cdFx0XHQvLyBSZXBsYWNlIHNlcnZlci1zaWRlIHdyaXR0ZW4gcGx1c2VzIHdpdGggc3BhY2VzLlxuXHRcdFx0Ly8gSWYgd2UgY2FuJ3QgZGVjb2RlIHRoZSBjb29raWUsIGlnbm9yZSBpdCwgaXQncyB1bnVzYWJsZS5cblx0XHRcdC8vIElmIHdlIGNhbid0IHBhcnNlIHRoZSBjb29raWUsIGlnbm9yZSBpdCwgaXQncyB1bnVzYWJsZS5cblx0XHRcdHMgPSBkZWNvZGVVUklDb21wb25lbnQocy5yZXBsYWNlKHBsdXNlcywgJyAnKSk7XG5cdFx0XHRyZXR1cm4gY29uZmlnLmpzb24gPyBKU09OLnBhcnNlKHMpIDogcztcblx0XHR9IGNhdGNoKGUpIHt9XG5cdH1cblxuXHRmdW5jdGlvbiByZWFkKHMsIGNvbnZlcnRlcikge1xuXHRcdHZhciB2YWx1ZSA9IGNvbmZpZy5yYXcgPyBzIDogcGFyc2VDb29raWVWYWx1ZShzKTtcblx0XHRyZXR1cm4gJC5pc0Z1bmN0aW9uKGNvbnZlcnRlcikgPyBjb252ZXJ0ZXIodmFsdWUpIDogdmFsdWU7XG5cdH1cblxuXHR2YXIgY29uZmlnID0gJC5jb29raWUgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSwgb3B0aW9ucykge1xuXG5cdFx0Ly8gV3JpdGVcblxuXHRcdGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmICEkLmlzRnVuY3Rpb24odmFsdWUpKSB7XG5cdFx0XHRvcHRpb25zID0gJC5leHRlbmQoe30sIGNvbmZpZy5kZWZhdWx0cywgb3B0aW9ucyk7XG5cblx0XHRcdGlmICh0eXBlb2Ygb3B0aW9ucy5leHBpcmVzID09PSAnbnVtYmVyJykge1xuXHRcdFx0XHR2YXIgZGF5cyA9IG9wdGlvbnMuZXhwaXJlcywgdCA9IG9wdGlvbnMuZXhwaXJlcyA9IG5ldyBEYXRlKCk7XG5cdFx0XHRcdHQuc2V0VGltZSgrdCArIGRheXMgKiA4NjRlKzUpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gKGRvY3VtZW50LmNvb2tpZSA9IFtcblx0XHRcdFx0ZW5jb2RlKGtleSksICc9Jywgc3RyaW5naWZ5Q29va2llVmFsdWUodmFsdWUpLFxuXHRcdFx0XHRvcHRpb25zLmV4cGlyZXMgPyAnOyBleHBpcmVzPScgKyBvcHRpb25zLmV4cGlyZXMudG9VVENTdHJpbmcoKSA6ICcnLCAvLyB1c2UgZXhwaXJlcyBhdHRyaWJ1dGUsIG1heC1hZ2UgaXMgbm90IHN1cHBvcnRlZCBieSBJRVxuXHRcdFx0XHRvcHRpb25zLnBhdGggICAgPyAnOyBwYXRoPScgKyBvcHRpb25zLnBhdGggOiAnJyxcblx0XHRcdFx0b3B0aW9ucy5kb21haW4gID8gJzsgZG9tYWluPScgKyBvcHRpb25zLmRvbWFpbiA6ICcnLFxuXHRcdFx0XHRvcHRpb25zLnNlY3VyZSAgPyAnOyBzZWN1cmUnIDogJydcblx0XHRcdF0uam9pbignJykpO1xuXHRcdH1cblxuXHRcdC8vIFJlYWRcblxuXHRcdHZhciByZXN1bHQgPSBrZXkgPyB1bmRlZmluZWQgOiB7fTtcblxuXHRcdC8vIFRvIHByZXZlbnQgdGhlIGZvciBsb29wIGluIHRoZSBmaXJzdCBwbGFjZSBhc3NpZ24gYW4gZW1wdHkgYXJyYXlcblx0XHQvLyBpbiBjYXNlIHRoZXJlIGFyZSBubyBjb29raWVzIGF0IGFsbC4gQWxzbyBwcmV2ZW50cyBvZGQgcmVzdWx0IHdoZW5cblx0XHQvLyBjYWxsaW5nICQuY29va2llKCkuXG5cdFx0dmFyIGNvb2tpZXMgPSBkb2N1bWVudC5jb29raWUgPyBkb2N1bWVudC5jb29raWUuc3BsaXQoJzsgJykgOiBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwLCBsID0gY29va2llcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0XHRcdHZhciBwYXJ0cyA9IGNvb2tpZXNbaV0uc3BsaXQoJz0nKTtcblx0XHRcdHZhciBuYW1lID0gZGVjb2RlKHBhcnRzLnNoaWZ0KCkpO1xuXHRcdFx0dmFyIGNvb2tpZSA9IHBhcnRzLmpvaW4oJz0nKTtcblxuXHRcdFx0aWYgKGtleSAmJiBrZXkgPT09IG5hbWUpIHtcblx0XHRcdFx0Ly8gSWYgc2Vjb25kIGFyZ3VtZW50ICh2YWx1ZSkgaXMgYSBmdW5jdGlvbiBpdCdzIGEgY29udmVydGVyLi4uXG5cdFx0XHRcdHJlc3VsdCA9IHJlYWQoY29va2llLCB2YWx1ZSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQcmV2ZW50IHN0b3JpbmcgYSBjb29raWUgdGhhdCB3ZSBjb3VsZG4ndCBkZWNvZGUuXG5cdFx0XHRpZiAoIWtleSAmJiAoY29va2llID0gcmVhZChjb29raWUpKSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdHJlc3VsdFtuYW1lXSA9IGNvb2tpZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9O1xuXG5cdGNvbmZpZy5kZWZhdWx0cyA9IHt9O1xuXG5cdCQucmVtb3ZlQ29va2llID0gZnVuY3Rpb24gKGtleSwgb3B0aW9ucykge1xuXHRcdGlmICgkLmNvb2tpZShrZXkpID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBNdXN0IG5vdCBhbHRlciBvcHRpb25zLCB0aHVzIGV4dGVuZGluZyBhIGZyZXNoIG9iamVjdC4uLlxuXHRcdCQuY29va2llKGtleSwgJycsICQuZXh0ZW5kKHt9LCBvcHRpb25zLCB7IGV4cGlyZXM6IC0xIH0pKTtcblx0XHRyZXR1cm4gISQuY29va2llKGtleSk7XG5cdH07XG5cbn0pKTtcbiIsIi8qISBqUXVlcnkgdjMuNy4xIHwgKGMpIE9wZW5KUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgfCBqcXVlcnkub3JnL2xpY2Vuc2UgKi9cbiFmdW5jdGlvbihlLHQpe1widXNlIHN0cmljdFwiO1wib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGUmJlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGUuZXhwb3J0cz9tb2R1bGUuZXhwb3J0cz1lLmRvY3VtZW50P3QoZSwhMCk6ZnVuY3Rpb24oZSl7aWYoIWUuZG9jdW1lbnQpdGhyb3cgbmV3IEVycm9yKFwialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiKTtyZXR1cm4gdChlKX06dChlKX0oXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6dGhpcyxmdW5jdGlvbihpZSxlKXtcInVzZSBzdHJpY3RcIjt2YXIgb2U9W10scj1PYmplY3QuZ2V0UHJvdG90eXBlT2YsYWU9b2Uuc2xpY2UsZz1vZS5mbGF0P2Z1bmN0aW9uKGUpe3JldHVybiBvZS5mbGF0LmNhbGwoZSl9OmZ1bmN0aW9uKGUpe3JldHVybiBvZS5jb25jYXQuYXBwbHkoW10sZSl9LHM9b2UucHVzaCxzZT1vZS5pbmRleE9mLG49e30saT1uLnRvU3RyaW5nLHVlPW4uaGFzT3duUHJvcGVydHksbz11ZS50b1N0cmluZyxhPW8uY2FsbChPYmplY3QpLGxlPXt9LHY9ZnVuY3Rpb24oZSl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgZSYmXCJudW1iZXJcIiE9dHlwZW9mIGUubm9kZVR5cGUmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIGUuaXRlbX0seT1mdW5jdGlvbihlKXtyZXR1cm4gbnVsbCE9ZSYmZT09PWUud2luZG93fSxDPWllLmRvY3VtZW50LHU9e3R5cGU6ITAsc3JjOiEwLG5vbmNlOiEwLG5vTW9kdWxlOiEwfTtmdW5jdGlvbiBtKGUsdCxuKXt2YXIgcixpLG89KG49bnx8QykuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtpZihvLnRleHQ9ZSx0KWZvcihyIGluIHUpKGk9dFtyXXx8dC5nZXRBdHRyaWJ1dGUmJnQuZ2V0QXR0cmlidXRlKHIpKSYmby5zZXRBdHRyaWJ1dGUocixpKTtuLmhlYWQuYXBwZW5kQ2hpbGQobykucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChvKX1mdW5jdGlvbiB4KGUpe3JldHVybiBudWxsPT1lP2UrXCJcIjpcIm9iamVjdFwiPT10eXBlb2YgZXx8XCJmdW5jdGlvblwiPT10eXBlb2YgZT9uW2kuY2FsbChlKV18fFwib2JqZWN0XCI6dHlwZW9mIGV9dmFyIHQ9XCIzLjcuMVwiLGw9L0hUTUwkL2ksY2U9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbmV3IGNlLmZuLmluaXQoZSx0KX07ZnVuY3Rpb24gYyhlKXt2YXIgdD0hIWUmJlwibGVuZ3RoXCJpbiBlJiZlLmxlbmd0aCxuPXgoZSk7cmV0dXJuIXYoZSkmJiF5KGUpJiYoXCJhcnJheVwiPT09bnx8MD09PXR8fFwibnVtYmVyXCI9PXR5cGVvZiB0JiYwPHQmJnQtMSBpbiBlKX1mdW5jdGlvbiBmZShlLHQpe3JldHVybiBlLm5vZGVOYW1lJiZlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk9PT10LnRvTG93ZXJDYXNlKCl9Y2UuZm49Y2UucHJvdG90eXBlPXtqcXVlcnk6dCxjb25zdHJ1Y3RvcjpjZSxsZW5ndGg6MCx0b0FycmF5OmZ1bmN0aW9uKCl7cmV0dXJuIGFlLmNhbGwodGhpcyl9LGdldDpmdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09ZT9hZS5jYWxsKHRoaXMpOmU8MD90aGlzW2UrdGhpcy5sZW5ndGhdOnRoaXNbZV19LHB1c2hTdGFjazpmdW5jdGlvbihlKXt2YXIgdD1jZS5tZXJnZSh0aGlzLmNvbnN0cnVjdG9yKCksZSk7cmV0dXJuIHQucHJldk9iamVjdD10aGlzLHR9LGVhY2g6ZnVuY3Rpb24oZSl7cmV0dXJuIGNlLmVhY2godGhpcyxlKX0sbWFwOmZ1bmN0aW9uKG4pe3JldHVybiB0aGlzLnB1c2hTdGFjayhjZS5tYXAodGhpcyxmdW5jdGlvbihlLHQpe3JldHVybiBuLmNhbGwoZSx0LGUpfSkpfSxzbGljZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnB1c2hTdGFjayhhZS5hcHBseSh0aGlzLGFyZ3VtZW50cykpfSxmaXJzdDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmVxKDApfSxsYXN0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZXEoLTEpfSxldmVuOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucHVzaFN0YWNrKGNlLmdyZXAodGhpcyxmdW5jdGlvbihlLHQpe3JldHVybih0KzEpJTJ9KSl9LG9kZDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnB1c2hTdGFjayhjZS5ncmVwKHRoaXMsZnVuY3Rpb24oZSx0KXtyZXR1cm4gdCUyfSkpfSxlcTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLmxlbmd0aCxuPStlKyhlPDA/dDowKTtyZXR1cm4gdGhpcy5wdXNoU3RhY2soMDw9biYmbjx0P1t0aGlzW25dXTpbXSl9LGVuZDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnByZXZPYmplY3R8fHRoaXMuY29uc3RydWN0b3IoKX0scHVzaDpzLHNvcnQ6b2Uuc29ydCxzcGxpY2U6b2Uuc3BsaWNlfSxjZS5leHRlbmQ9Y2UuZm4uZXh0ZW5kPWZ1bmN0aW9uKCl7dmFyIGUsdCxuLHIsaSxvLGE9YXJndW1lbnRzWzBdfHx7fSxzPTEsdT1hcmd1bWVudHMubGVuZ3RoLGw9ITE7Zm9yKFwiYm9vbGVhblwiPT10eXBlb2YgYSYmKGw9YSxhPWFyZ3VtZW50c1tzXXx8e30scysrKSxcIm9iamVjdFwiPT10eXBlb2YgYXx8dihhKXx8KGE9e30pLHM9PT11JiYoYT10aGlzLHMtLSk7czx1O3MrKylpZihudWxsIT0oZT1hcmd1bWVudHNbc10pKWZvcih0IGluIGUpcj1lW3RdLFwiX19wcm90b19fXCIhPT10JiZhIT09ciYmKGwmJnImJihjZS5pc1BsYWluT2JqZWN0KHIpfHwoaT1BcnJheS5pc0FycmF5KHIpKSk/KG49YVt0XSxvPWkmJiFBcnJheS5pc0FycmF5KG4pP1tdOml8fGNlLmlzUGxhaW5PYmplY3Qobik/bjp7fSxpPSExLGFbdF09Y2UuZXh0ZW5kKGwsbyxyKSk6dm9pZCAwIT09ciYmKGFbdF09cikpO3JldHVybiBhfSxjZS5leHRlbmQoe2V4cGFuZG86XCJqUXVlcnlcIisodCtNYXRoLnJhbmRvbSgpKS5yZXBsYWNlKC9cXEQvZyxcIlwiKSxpc1JlYWR5OiEwLGVycm9yOmZ1bmN0aW9uKGUpe3Rocm93IG5ldyBFcnJvcihlKX0sbm9vcDpmdW5jdGlvbigpe30saXNQbGFpbk9iamVjdDpmdW5jdGlvbihlKXt2YXIgdCxuO3JldHVybiEoIWV8fFwiW29iamVjdCBPYmplY3RdXCIhPT1pLmNhbGwoZSkpJiYoISh0PXIoZSkpfHxcImZ1bmN0aW9uXCI9PXR5cGVvZihuPXVlLmNhbGwodCxcImNvbnN0cnVjdG9yXCIpJiZ0LmNvbnN0cnVjdG9yKSYmby5jYWxsKG4pPT09YSl9LGlzRW1wdHlPYmplY3Q6ZnVuY3Rpb24oZSl7dmFyIHQ7Zm9yKHQgaW4gZSlyZXR1cm4hMTtyZXR1cm4hMH0sZ2xvYmFsRXZhbDpmdW5jdGlvbihlLHQsbil7bShlLHtub25jZTp0JiZ0Lm5vbmNlfSxuKX0sZWFjaDpmdW5jdGlvbihlLHQpe3ZhciBuLHI9MDtpZihjKGUpKXtmb3Iobj1lLmxlbmd0aDtyPG47cisrKWlmKCExPT09dC5jYWxsKGVbcl0scixlW3JdKSlicmVha31lbHNlIGZvcihyIGluIGUpaWYoITE9PT10LmNhbGwoZVtyXSxyLGVbcl0pKWJyZWFrO3JldHVybiBlfSx0ZXh0OmZ1bmN0aW9uKGUpe3ZhciB0LG49XCJcIixyPTAsaT1lLm5vZGVUeXBlO2lmKCFpKXdoaWxlKHQ9ZVtyKytdKW4rPWNlLnRleHQodCk7cmV0dXJuIDE9PT1pfHwxMT09PWk/ZS50ZXh0Q29udGVudDo5PT09aT9lLmRvY3VtZW50RWxlbWVudC50ZXh0Q29udGVudDozPT09aXx8ND09PWk/ZS5ub2RlVmFsdWU6bn0sbWFrZUFycmF5OmZ1bmN0aW9uKGUsdCl7dmFyIG49dHx8W107cmV0dXJuIG51bGwhPWUmJihjKE9iamVjdChlKSk/Y2UubWVyZ2UobixcInN0cmluZ1wiPT10eXBlb2YgZT9bZV06ZSk6cy5jYWxsKG4sZSkpLG59LGluQXJyYXk6ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBudWxsPT10Py0xOnNlLmNhbGwodCxlLG4pfSxpc1hNTERvYzpmdW5jdGlvbihlKXt2YXIgdD1lJiZlLm5hbWVzcGFjZVVSSSxuPWUmJihlLm93bmVyRG9jdW1lbnR8fGUpLmRvY3VtZW50RWxlbWVudDtyZXR1cm4hbC50ZXN0KHR8fG4mJm4ubm9kZU5hbWV8fFwiSFRNTFwiKX0sbWVyZ2U6ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49K3QubGVuZ3RoLHI9MCxpPWUubGVuZ3RoO3I8bjtyKyspZVtpKytdPXRbcl07cmV0dXJuIGUubGVuZ3RoPWksZX0sZ3JlcDpmdW5jdGlvbihlLHQsbil7Zm9yKHZhciByPVtdLGk9MCxvPWUubGVuZ3RoLGE9IW47aTxvO2krKykhdChlW2ldLGkpIT09YSYmci5wdXNoKGVbaV0pO3JldHVybiByfSxtYXA6ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbz0wLGE9W107aWYoYyhlKSlmb3Iocj1lLmxlbmd0aDtvPHI7bysrKW51bGwhPShpPXQoZVtvXSxvLG4pKSYmYS5wdXNoKGkpO2Vsc2UgZm9yKG8gaW4gZSludWxsIT0oaT10KGVbb10sbyxuKSkmJmEucHVzaChpKTtyZXR1cm4gZyhhKX0sZ3VpZDoxLHN1cHBvcnQ6bGV9KSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJihjZS5mbltTeW1ib2wuaXRlcmF0b3JdPW9lW1N5bWJvbC5pdGVyYXRvcl0pLGNlLmVhY2goXCJCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgT2JqZWN0IEVycm9yIFN5bWJvbFwiLnNwbGl0KFwiIFwiKSxmdW5jdGlvbihlLHQpe25bXCJbb2JqZWN0IFwiK3QrXCJdXCJdPXQudG9Mb3dlckNhc2UoKX0pO3ZhciBwZT1vZS5wb3AsZGU9b2Uuc29ydCxoZT1vZS5zcGxpY2UsZ2U9XCJbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXVwiLHZlPW5ldyBSZWdFeHAoXCJeXCIrZ2UrXCIrfCgoPzpefFteXFxcXFxcXFxdKSg/OlxcXFxcXFxcLikqKVwiK2dlK1wiKyRcIixcImdcIik7Y2UuY29udGFpbnM9ZnVuY3Rpb24oZSx0KXt2YXIgbj10JiZ0LnBhcmVudE5vZGU7cmV0dXJuIGU9PT1ufHwhKCFufHwxIT09bi5ub2RlVHlwZXx8IShlLmNvbnRhaW5zP2UuY29udGFpbnMobik6ZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiYmMTYmZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihuKSkpfTt2YXIgZj0vKFtcXDAtXFx4MWZcXHg3Zl18Xi0/XFxkKXxeLSR8W15cXHg4MC1cXHVGRkZGXFx3LV0vZztmdW5jdGlvbiBwKGUsdCl7cmV0dXJuIHQ/XCJcXDBcIj09PWU/XCJcXHVmZmZkXCI6ZS5zbGljZSgwLC0xKStcIlxcXFxcIitlLmNoYXJDb2RlQXQoZS5sZW5ndGgtMSkudG9TdHJpbmcoMTYpK1wiIFwiOlwiXFxcXFwiK2V9Y2UuZXNjYXBlU2VsZWN0b3I9ZnVuY3Rpb24oZSl7cmV0dXJuKGUrXCJcIikucmVwbGFjZShmLHApfTt2YXIgeWU9QyxtZT1zOyFmdW5jdGlvbigpe3ZhciBlLGIsdyxvLGEsVCxyLEMsZCxpLGs9bWUsUz1jZS5leHBhbmRvLEU9MCxuPTAscz1XKCksYz1XKCksdT1XKCksaD1XKCksbD1mdW5jdGlvbihlLHQpe3JldHVybiBlPT09dCYmKGE9ITApLDB9LGY9XCJjaGVja2VkfHNlbGVjdGVkfGFzeW5jfGF1dG9mb2N1c3xhdXRvcGxheXxjb250cm9sc3xkZWZlcnxkaXNhYmxlZHxoaWRkZW58aXNtYXB8bG9vcHxtdWx0aXBsZXxvcGVufHJlYWRvbmx5fHJlcXVpcmVkfHNjb3BlZFwiLHQ9XCIoPzpcXFxcXFxcXFtcXFxcZGEtZkEtRl17MSw2fVwiK2dlK1wiP3xcXFxcXFxcXFteXFxcXHJcXFxcblxcXFxmXXxbXFxcXHctXXxbXlxcMC1cXFxceDdmXSkrXCIscD1cIlxcXFxbXCIrZ2UrXCIqKFwiK3QrXCIpKD86XCIrZ2UrXCIqKFsqXiR8IX5dPz0pXCIrZ2UrXCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIit0K1wiKSl8KVwiK2dlK1wiKlxcXFxdXCIsZz1cIjooXCIrdCtcIikoPzpcXFxcKCgoJygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwiKXwoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKVtcXFxcXV18XCIrcCtcIikqKXwuKilcXFxcKXwpXCIsdj1uZXcgUmVnRXhwKGdlK1wiK1wiLFwiZ1wiKSx5PW5ldyBSZWdFeHAoXCJeXCIrZ2UrXCIqLFwiK2dlK1wiKlwiKSxtPW5ldyBSZWdFeHAoXCJeXCIrZ2UrXCIqKFs+K35dfFwiK2dlK1wiKVwiK2dlK1wiKlwiKSx4PW5ldyBSZWdFeHAoZ2UrXCJ8PlwiKSxqPW5ldyBSZWdFeHAoZyksQT1uZXcgUmVnRXhwKFwiXlwiK3QrXCIkXCIpLEQ9e0lEOm5ldyBSZWdFeHAoXCJeIyhcIit0K1wiKVwiKSxDTEFTUzpuZXcgUmVnRXhwKFwiXlxcXFwuKFwiK3QrXCIpXCIpLFRBRzpuZXcgUmVnRXhwKFwiXihcIit0K1wifFsqXSlcIiksQVRUUjpuZXcgUmVnRXhwKFwiXlwiK3ApLFBTRVVETzpuZXcgUmVnRXhwKFwiXlwiK2cpLENISUxEOm5ldyBSZWdFeHAoXCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXFxcKFwiK2dlK1wiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIrZ2UrXCIqKD86KFsrLV18KVwiK2dlK1wiKihcXFxcZCspfCkpXCIrZ2UrXCIqXFxcXCl8KVwiLFwiaVwiKSxib29sOm5ldyBSZWdFeHAoXCJeKD86XCIrZitcIikkXCIsXCJpXCIpLG5lZWRzQ29udGV4dDpuZXcgUmVnRXhwKFwiXlwiK2dlK1wiKls+K35dfDooZXZlbnxvZGR8ZXF8Z3R8bHR8bnRofGZpcnN0fGxhc3QpKD86XFxcXChcIitnZStcIiooKD86LVxcXFxkKT9cXFxcZCopXCIrZ2UrXCIqXFxcXCl8KSg/PVteLV18JClcIixcImlcIil9LE49L14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxxPS9eaFxcZCQvaSxMPS9eKD86IyhbXFx3LV0rKXwoXFx3Kyl8XFwuKFtcXHctXSspKSQvLEg9L1srfl0vLE89bmV3IFJlZ0V4cChcIlxcXFxcXFxcW1xcXFxkYS1mQS1GXXsxLDZ9XCIrZ2UrXCI/fFxcXFxcXFxcKFteXFxcXHJcXFxcblxcXFxmXSlcIixcImdcIiksUD1mdW5jdGlvbihlLHQpe3ZhciBuPVwiMHhcIitlLnNsaWNlKDEpLTY1NTM2O3JldHVybiB0fHwobjwwP1N0cmluZy5mcm9tQ2hhckNvZGUobis2NTUzNik6U3RyaW5nLmZyb21DaGFyQ29kZShuPj4xMHw1NTI5NiwxMDIzJm58NTYzMjApKX0sTT1mdW5jdGlvbigpe1YoKX0sUj1KKGZ1bmN0aW9uKGUpe3JldHVybiEwPT09ZS5kaXNhYmxlZCYmZmUoZSxcImZpZWxkc2V0XCIpfSx7ZGlyOlwicGFyZW50Tm9kZVwiLG5leHQ6XCJsZWdlbmRcIn0pO3RyeXtrLmFwcGx5KG9lPWFlLmNhbGwoeWUuY2hpbGROb2RlcykseWUuY2hpbGROb2Rlcyksb2VbeWUuY2hpbGROb2Rlcy5sZW5ndGhdLm5vZGVUeXBlfWNhdGNoKGUpe2s9e2FwcGx5OmZ1bmN0aW9uKGUsdCl7bWUuYXBwbHkoZSxhZS5jYWxsKHQpKX0sY2FsbDpmdW5jdGlvbihlKXttZS5hcHBseShlLGFlLmNhbGwoYXJndW1lbnRzLDEpKX19fWZ1bmN0aW9uIEkodCxlLG4scil7dmFyIGksbyxhLHMsdSxsLGMsZj1lJiZlLm93bmVyRG9jdW1lbnQscD1lP2Uubm9kZVR5cGU6OTtpZihuPW58fFtdLFwic3RyaW5nXCIhPXR5cGVvZiB0fHwhdHx8MSE9PXAmJjkhPT1wJiYxMSE9PXApcmV0dXJuIG47aWYoIXImJihWKGUpLGU9ZXx8VCxDKSl7aWYoMTEhPT1wJiYodT1MLmV4ZWModCkpKWlmKGk9dVsxXSl7aWYoOT09PXApe2lmKCEoYT1lLmdldEVsZW1lbnRCeUlkKGkpKSlyZXR1cm4gbjtpZihhLmlkPT09aSlyZXR1cm4gay5jYWxsKG4sYSksbn1lbHNlIGlmKGYmJihhPWYuZ2V0RWxlbWVudEJ5SWQoaSkpJiZJLmNvbnRhaW5zKGUsYSkmJmEuaWQ9PT1pKXJldHVybiBrLmNhbGwobixhKSxufWVsc2V7aWYodVsyXSlyZXR1cm4gay5hcHBseShuLGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUodCkpLG47aWYoKGk9dVszXSkmJmUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSlyZXR1cm4gay5hcHBseShuLGUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShpKSksbn1pZighKGhbdCtcIiBcIl18fGQmJmQudGVzdCh0KSkpe2lmKGM9dCxmPWUsMT09PXAmJih4LnRlc3QodCl8fG0udGVzdCh0KSkpeyhmPUgudGVzdCh0KSYmVShlLnBhcmVudE5vZGUpfHxlKT09ZSYmbGUuc2NvcGV8fCgocz1lLmdldEF0dHJpYnV0ZShcImlkXCIpKT9zPWNlLmVzY2FwZVNlbGVjdG9yKHMpOmUuc2V0QXR0cmlidXRlKFwiaWRcIixzPVMpKSxvPShsPVkodCkpLmxlbmd0aDt3aGlsZShvLS0pbFtvXT0ocz9cIiNcIitzOlwiOnNjb3BlXCIpK1wiIFwiK1EobFtvXSk7Yz1sLmpvaW4oXCIsXCIpfXRyeXtyZXR1cm4gay5hcHBseShuLGYucXVlcnlTZWxlY3RvckFsbChjKSksbn1jYXRjaChlKXtoKHQsITApfWZpbmFsbHl7cz09PVMmJmUucmVtb3ZlQXR0cmlidXRlKFwiaWRcIil9fX1yZXR1cm4gcmUodC5yZXBsYWNlKHZlLFwiJDFcIiksZSxuLHIpfWZ1bmN0aW9uIFcoKXt2YXIgcj1bXTtyZXR1cm4gZnVuY3Rpb24gZSh0LG4pe3JldHVybiByLnB1c2godCtcIiBcIik+Yi5jYWNoZUxlbmd0aCYmZGVsZXRlIGVbci5zaGlmdCgpXSxlW3QrXCIgXCJdPW59fWZ1bmN0aW9uIEYoZSl7cmV0dXJuIGVbU109ITAsZX1mdW5jdGlvbiAkKGUpe3ZhciB0PVQuY3JlYXRlRWxlbWVudChcImZpZWxkc2V0XCIpO3RyeXtyZXR1cm4hIWUodCl9Y2F0Y2goZSl7cmV0dXJuITF9ZmluYWxseXt0LnBhcmVudE5vZGUmJnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0KSx0PW51bGx9fWZ1bmN0aW9uIEIodCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiBmZShlLFwiaW5wdXRcIikmJmUudHlwZT09PXR9fWZ1bmN0aW9uIF8odCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybihmZShlLFwiaW5wdXRcIil8fGZlKGUsXCJidXR0b25cIikpJiZlLnR5cGU9PT10fX1mdW5jdGlvbiB6KHQpe3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm5cImZvcm1cImluIGU/ZS5wYXJlbnROb2RlJiYhMT09PWUuZGlzYWJsZWQ/XCJsYWJlbFwiaW4gZT9cImxhYmVsXCJpbiBlLnBhcmVudE5vZGU/ZS5wYXJlbnROb2RlLmRpc2FibGVkPT09dDplLmRpc2FibGVkPT09dDplLmlzRGlzYWJsZWQ9PT10fHxlLmlzRGlzYWJsZWQhPT0hdCYmUihlKT09PXQ6ZS5kaXNhYmxlZD09PXQ6XCJsYWJlbFwiaW4gZSYmZS5kaXNhYmxlZD09PXR9fWZ1bmN0aW9uIFgoYSl7cmV0dXJuIEYoZnVuY3Rpb24obyl7cmV0dXJuIG89K28sRihmdW5jdGlvbihlLHQpe3ZhciBuLHI9YShbXSxlLmxlbmd0aCxvKSxpPXIubGVuZ3RoO3doaWxlKGktLSllW249cltpXV0mJihlW25dPSEodFtuXT1lW25dKSl9KX0pfWZ1bmN0aW9uIFUoZSl7cmV0dXJuIGUmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBlLmdldEVsZW1lbnRzQnlUYWdOYW1lJiZlfWZ1bmN0aW9uIFYoZSl7dmFyIHQsbj1lP2Uub3duZXJEb2N1bWVudHx8ZTp5ZTtyZXR1cm4gbiE9VCYmOT09PW4ubm9kZVR5cGUmJm4uZG9jdW1lbnRFbGVtZW50JiYocj0oVD1uKS5kb2N1bWVudEVsZW1lbnQsQz0hY2UuaXNYTUxEb2MoVCksaT1yLm1hdGNoZXN8fHIud2Via2l0TWF0Y2hlc1NlbGVjdG9yfHxyLm1zTWF0Y2hlc1NlbGVjdG9yLHIubXNNYXRjaGVzU2VsZWN0b3ImJnllIT1UJiYodD1ULmRlZmF1bHRWaWV3KSYmdC50b3AhPT10JiZ0LmFkZEV2ZW50TGlzdGVuZXIoXCJ1bmxvYWRcIixNKSxsZS5nZXRCeUlkPSQoZnVuY3Rpb24oZSl7cmV0dXJuIHIuYXBwZW5kQ2hpbGQoZSkuaWQ9Y2UuZXhwYW5kbywhVC5nZXRFbGVtZW50c0J5TmFtZXx8IVQuZ2V0RWxlbWVudHNCeU5hbWUoY2UuZXhwYW5kbykubGVuZ3RofSksbGUuZGlzY29ubmVjdGVkTWF0Y2g9JChmdW5jdGlvbihlKXtyZXR1cm4gaS5jYWxsKGUsXCIqXCIpfSksbGUuc2NvcGU9JChmdW5jdGlvbigpe3JldHVybiBULnF1ZXJ5U2VsZWN0b3JBbGwoXCI6c2NvcGVcIil9KSxsZS5jc3NIYXM9JChmdW5jdGlvbigpe3RyeXtyZXR1cm4gVC5xdWVyeVNlbGVjdG9yKFwiOmhhcygqLDpqcWZha2UpXCIpLCExfWNhdGNoKGUpe3JldHVybiEwfX0pLGxlLmdldEJ5SWQ/KGIuZmlsdGVyLklEPWZ1bmN0aW9uKGUpe3ZhciB0PWUucmVwbGFjZShPLFApO3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm4gZS5nZXRBdHRyaWJ1dGUoXCJpZFwiKT09PXR9fSxiLmZpbmQuSUQ9ZnVuY3Rpb24oZSx0KXtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgdC5nZXRFbGVtZW50QnlJZCYmQyl7dmFyIG49dC5nZXRFbGVtZW50QnlJZChlKTtyZXR1cm4gbj9bbl06W119fSk6KGIuZmlsdGVyLklEPWZ1bmN0aW9uKGUpe3ZhciBuPWUucmVwbGFjZShPLFApO3JldHVybiBmdW5jdGlvbihlKXt2YXIgdD1cInVuZGVmaW5lZFwiIT10eXBlb2YgZS5nZXRBdHRyaWJ1dGVOb2RlJiZlLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtyZXR1cm4gdCYmdC52YWx1ZT09PW59fSxiLmZpbmQuSUQ9ZnVuY3Rpb24oZSx0KXtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgdC5nZXRFbGVtZW50QnlJZCYmQyl7dmFyIG4scixpLG89dC5nZXRFbGVtZW50QnlJZChlKTtpZihvKXtpZigobj1vLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKSkmJm4udmFsdWU9PT1lKXJldHVybltvXTtpPXQuZ2V0RWxlbWVudHNCeU5hbWUoZSkscj0wO3doaWxlKG89aVtyKytdKWlmKChuPW8uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpKSYmbi52YWx1ZT09PWUpcmV0dXJuW29dfXJldHVybltdfX0pLGIuZmluZC5UQUc9ZnVuY3Rpb24oZSx0KXtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgdC5nZXRFbGVtZW50c0J5VGFnTmFtZT90LmdldEVsZW1lbnRzQnlUYWdOYW1lKGUpOnQucXVlcnlTZWxlY3RvckFsbChlKX0sYi5maW5kLkNMQVNTPWZ1bmN0aW9uKGUsdCl7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSYmQylyZXR1cm4gdC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGUpfSxkPVtdLCQoZnVuY3Rpb24oZSl7dmFyIHQ7ci5hcHBlbmRDaGlsZChlKS5pbm5lckhUTUw9XCI8YSBpZD0nXCIrUytcIicgaHJlZj0nJyBkaXNhYmxlZD0nZGlzYWJsZWQnPjwvYT48c2VsZWN0IGlkPSdcIitTK1wiLVxcclxcXFwnIGRpc2FibGVkPSdkaXNhYmxlZCc+PG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIixlLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbc2VsZWN0ZWRdXCIpLmxlbmd0aHx8ZC5wdXNoKFwiXFxcXFtcIitnZStcIiooPzp2YWx1ZXxcIitmK1wiKVwiKSxlLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbaWR+PVwiK1MrXCItXVwiKS5sZW5ndGh8fGQucHVzaChcIn49XCIpLGUucXVlcnlTZWxlY3RvckFsbChcImEjXCIrUytcIisqXCIpLmxlbmd0aHx8ZC5wdXNoKFwiLiMuK1srfl1cIiksZS5xdWVyeVNlbGVjdG9yQWxsKFwiOmNoZWNrZWRcIikubGVuZ3RofHxkLnB1c2goXCI6Y2hlY2tlZFwiKSwodD1ULmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKSkuc2V0QXR0cmlidXRlKFwidHlwZVwiLFwiaGlkZGVuXCIpLGUuYXBwZW5kQ2hpbGQodCkuc2V0QXR0cmlidXRlKFwibmFtZVwiLFwiRFwiKSxyLmFwcGVuZENoaWxkKGUpLmRpc2FibGVkPSEwLDIhPT1lLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZGlzYWJsZWRcIikubGVuZ3RoJiZkLnB1c2goXCI6ZW5hYmxlZFwiLFwiOmRpc2FibGVkXCIpLCh0PVQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpKS5zZXRBdHRyaWJ1dGUoXCJuYW1lXCIsXCJcIiksZS5hcHBlbmRDaGlsZCh0KSxlLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbmFtZT0nJ11cIikubGVuZ3RofHxkLnB1c2goXCJcXFxcW1wiK2dlK1wiKm5hbWVcIitnZStcIio9XCIrZ2UrXCIqKD86Jyd8XFxcIlxcXCIpXCIpfSksbGUuY3NzSGFzfHxkLnB1c2goXCI6aGFzXCIpLGQ9ZC5sZW5ndGgmJm5ldyBSZWdFeHAoZC5qb2luKFwifFwiKSksbD1mdW5jdGlvbihlLHQpe2lmKGU9PT10KXJldHVybiBhPSEwLDA7dmFyIG49IWUuY29tcGFyZURvY3VtZW50UG9zaXRpb24tIXQuY29tcGFyZURvY3VtZW50UG9zaXRpb247cmV0dXJuIG58fCgxJihuPShlLm93bmVyRG9jdW1lbnR8fGUpPT0odC5vd25lckRvY3VtZW50fHx0KT9lLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKHQpOjEpfHwhbGUuc29ydERldGFjaGVkJiZ0LmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGUpPT09bj9lPT09VHx8ZS5vd25lckRvY3VtZW50PT15ZSYmSS5jb250YWlucyh5ZSxlKT8tMTp0PT09VHx8dC5vd25lckRvY3VtZW50PT15ZSYmSS5jb250YWlucyh5ZSx0KT8xOm8/c2UuY2FsbChvLGUpLXNlLmNhbGwobyx0KTowOjQmbj8tMToxKX0pLFR9Zm9yKGUgaW4gSS5tYXRjaGVzPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIEkoZSxudWxsLG51bGwsdCl9LEkubWF0Y2hlc1NlbGVjdG9yPWZ1bmN0aW9uKGUsdCl7aWYoVihlKSxDJiYhaFt0K1wiIFwiXSYmKCFkfHwhZC50ZXN0KHQpKSl0cnl7dmFyIG49aS5jYWxsKGUsdCk7aWYobnx8bGUuZGlzY29ubmVjdGVkTWF0Y2h8fGUuZG9jdW1lbnQmJjExIT09ZS5kb2N1bWVudC5ub2RlVHlwZSlyZXR1cm4gbn1jYXRjaChlKXtoKHQsITApfXJldHVybiAwPEkodCxULG51bGwsW2VdKS5sZW5ndGh9LEkuY29udGFpbnM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4oZS5vd25lckRvY3VtZW50fHxlKSE9VCYmVihlKSxjZS5jb250YWlucyhlLHQpfSxJLmF0dHI9ZnVuY3Rpb24oZSx0KXsoZS5vd25lckRvY3VtZW50fHxlKSE9VCYmVihlKTt2YXIgbj1iLmF0dHJIYW5kbGVbdC50b0xvd2VyQ2FzZSgpXSxyPW4mJnVlLmNhbGwoYi5hdHRySGFuZGxlLHQudG9Mb3dlckNhc2UoKSk/bihlLHQsIUMpOnZvaWQgMDtyZXR1cm4gdm9pZCAwIT09cj9yOmUuZ2V0QXR0cmlidXRlKHQpfSxJLmVycm9yPWZ1bmN0aW9uKGUpe3Rocm93IG5ldyBFcnJvcihcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiK2UpfSxjZS51bmlxdWVTb3J0PWZ1bmN0aW9uKGUpe3ZhciB0LG49W10scj0wLGk9MDtpZihhPSFsZS5zb3J0U3RhYmxlLG89IWxlLnNvcnRTdGFibGUmJmFlLmNhbGwoZSwwKSxkZS5jYWxsKGUsbCksYSl7d2hpbGUodD1lW2krK10pdD09PWVbaV0mJihyPW4ucHVzaChpKSk7d2hpbGUoci0tKWhlLmNhbGwoZSxuW3JdLDEpfXJldHVybiBvPW51bGwsZX0sY2UuZm4udW5pcXVlU29ydD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnB1c2hTdGFjayhjZS51bmlxdWVTb3J0KGFlLmFwcGx5KHRoaXMpKSl9LChiPWNlLmV4cHI9e2NhY2hlTGVuZ3RoOjUwLGNyZWF0ZVBzZXVkbzpGLG1hdGNoOkQsYXR0ckhhbmRsZTp7fSxmaW5kOnt9LHJlbGF0aXZlOntcIj5cIjp7ZGlyOlwicGFyZW50Tm9kZVwiLGZpcnN0OiEwfSxcIiBcIjp7ZGlyOlwicGFyZW50Tm9kZVwifSxcIitcIjp7ZGlyOlwicHJldmlvdXNTaWJsaW5nXCIsZmlyc3Q6ITB9LFwiflwiOntkaXI6XCJwcmV2aW91c1NpYmxpbmdcIn19LHByZUZpbHRlcjp7QVRUUjpmdW5jdGlvbihlKXtyZXR1cm4gZVsxXT1lWzFdLnJlcGxhY2UoTyxQKSxlWzNdPShlWzNdfHxlWzRdfHxlWzVdfHxcIlwiKS5yZXBsYWNlKE8sUCksXCJ+PVwiPT09ZVsyXSYmKGVbM109XCIgXCIrZVszXStcIiBcIiksZS5zbGljZSgwLDQpfSxDSElMRDpmdW5jdGlvbihlKXtyZXR1cm4gZVsxXT1lWzFdLnRvTG93ZXJDYXNlKCksXCJudGhcIj09PWVbMV0uc2xpY2UoMCwzKT8oZVszXXx8SS5lcnJvcihlWzBdKSxlWzRdPSsoZVs0XT9lWzVdKyhlWzZdfHwxKToyKihcImV2ZW5cIj09PWVbM118fFwib2RkXCI9PT1lWzNdKSksZVs1XT0rKGVbN10rZVs4XXx8XCJvZGRcIj09PWVbM10pKTplWzNdJiZJLmVycm9yKGVbMF0pLGV9LFBTRVVETzpmdW5jdGlvbihlKXt2YXIgdCxuPSFlWzZdJiZlWzJdO3JldHVybiBELkNISUxELnRlc3QoZVswXSk/bnVsbDooZVszXT9lWzJdPWVbNF18fGVbNV18fFwiXCI6biYmai50ZXN0KG4pJiYodD1ZKG4sITApKSYmKHQ9bi5pbmRleE9mKFwiKVwiLG4ubGVuZ3RoLXQpLW4ubGVuZ3RoKSYmKGVbMF09ZVswXS5zbGljZSgwLHQpLGVbMl09bi5zbGljZSgwLHQpKSxlLnNsaWNlKDAsMykpfX0sZmlsdGVyOntUQUc6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5yZXBsYWNlKE8sUCkudG9Mb3dlckNhc2UoKTtyZXR1cm5cIipcIj09PWU/ZnVuY3Rpb24oKXtyZXR1cm4hMH06ZnVuY3Rpb24oZSl7cmV0dXJuIGZlKGUsdCl9fSxDTEFTUzpmdW5jdGlvbihlKXt2YXIgdD1zW2UrXCIgXCJdO3JldHVybiB0fHwodD1uZXcgUmVnRXhwKFwiKF58XCIrZ2UrXCIpXCIrZStcIihcIitnZStcInwkKVwiKSkmJnMoZSxmdW5jdGlvbihlKXtyZXR1cm4gdC50ZXN0KFwic3RyaW5nXCI9PXR5cGVvZiBlLmNsYXNzTmFtZSYmZS5jbGFzc05hbWV8fFwidW5kZWZpbmVkXCIhPXR5cGVvZiBlLmdldEF0dHJpYnV0ZSYmZS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKXx8XCJcIil9KX0sQVRUUjpmdW5jdGlvbihuLHIsaSl7cmV0dXJuIGZ1bmN0aW9uKGUpe3ZhciB0PUkuYXR0cihlLG4pO3JldHVybiBudWxsPT10P1wiIT1cIj09PXI6IXJ8fCh0Kz1cIlwiLFwiPVwiPT09cj90PT09aTpcIiE9XCI9PT1yP3QhPT1pOlwiXj1cIj09PXI/aSYmMD09PXQuaW5kZXhPZihpKTpcIio9XCI9PT1yP2kmJi0xPHQuaW5kZXhPZihpKTpcIiQ9XCI9PT1yP2kmJnQuc2xpY2UoLWkubGVuZ3RoKT09PWk6XCJ+PVwiPT09cj8tMTwoXCIgXCIrdC5yZXBsYWNlKHYsXCIgXCIpK1wiIFwiKS5pbmRleE9mKGkpOlwifD1cIj09PXImJih0PT09aXx8dC5zbGljZSgwLGkubGVuZ3RoKzEpPT09aStcIi1cIikpfX0sQ0hJTEQ6ZnVuY3Rpb24oZCxlLHQsaCxnKXt2YXIgdj1cIm50aFwiIT09ZC5zbGljZSgwLDMpLHk9XCJsYXN0XCIhPT1kLnNsaWNlKC00KSxtPVwib2YtdHlwZVwiPT09ZTtyZXR1cm4gMT09PWgmJjA9PT1nP2Z1bmN0aW9uKGUpe3JldHVybiEhZS5wYXJlbnROb2RlfTpmdW5jdGlvbihlLHQsbil7dmFyIHIsaSxvLGEscyx1PXYhPT15P1wibmV4dFNpYmxpbmdcIjpcInByZXZpb3VzU2libGluZ1wiLGw9ZS5wYXJlbnROb2RlLGM9bSYmZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLGY9IW4mJiFtLHA9ITE7aWYobCl7aWYodil7d2hpbGUodSl7bz1lO3doaWxlKG89b1t1XSlpZihtP2ZlKG8sYyk6MT09PW8ubm9kZVR5cGUpcmV0dXJuITE7cz11PVwib25seVwiPT09ZCYmIXMmJlwibmV4dFNpYmxpbmdcIn1yZXR1cm4hMH1pZihzPVt5P2wuZmlyc3RDaGlsZDpsLmxhc3RDaGlsZF0seSYmZil7cD0oYT0ocj0oaT1sW1NdfHwobFtTXT17fSkpW2RdfHxbXSlbMF09PT1FJiZyWzFdKSYmclsyXSxvPWEmJmwuY2hpbGROb2Rlc1thXTt3aGlsZShvPSsrYSYmbyYmb1t1XXx8KHA9YT0wKXx8cy5wb3AoKSlpZigxPT09by5ub2RlVHlwZSYmKytwJiZvPT09ZSl7aVtkXT1bRSxhLHBdO2JyZWFrfX1lbHNlIGlmKGYmJihwPWE9KHI9KGk9ZVtTXXx8KGVbU109e30pKVtkXXx8W10pWzBdPT09RSYmclsxXSksITE9PT1wKXdoaWxlKG89KythJiZvJiZvW3VdfHwocD1hPTApfHxzLnBvcCgpKWlmKChtP2ZlKG8sYyk6MT09PW8ubm9kZVR5cGUpJiYrK3AmJihmJiYoKGk9b1tTXXx8KG9bU109e30pKVtkXT1bRSxwXSksbz09PWUpKWJyZWFrO3JldHVybihwLT1nKT09PWh8fHAlaD09MCYmMDw9cC9ofX19LFBTRVVETzpmdW5jdGlvbihlLG8pe3ZhciB0LGE9Yi5wc2V1ZG9zW2VdfHxiLnNldEZpbHRlcnNbZS50b0xvd2VyQ2FzZSgpXXx8SS5lcnJvcihcInVuc3VwcG9ydGVkIHBzZXVkbzogXCIrZSk7cmV0dXJuIGFbU10/YShvKToxPGEubGVuZ3RoPyh0PVtlLGUsXCJcIixvXSxiLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkoZS50b0xvd2VyQ2FzZSgpKT9GKGZ1bmN0aW9uKGUsdCl7dmFyIG4scj1hKGUsbyksaT1yLmxlbmd0aDt3aGlsZShpLS0pZVtuPXNlLmNhbGwoZSxyW2ldKV09ISh0W25dPXJbaV0pfSk6ZnVuY3Rpb24oZSl7cmV0dXJuIGEoZSwwLHQpfSk6YX19LHBzZXVkb3M6e25vdDpGKGZ1bmN0aW9uKGUpe3ZhciByPVtdLGk9W10scz1uZShlLnJlcGxhY2UodmUsXCIkMVwiKSk7cmV0dXJuIHNbU10/RihmdW5jdGlvbihlLHQsbixyKXt2YXIgaSxvPXMoZSxudWxsLHIsW10pLGE9ZS5sZW5ndGg7d2hpbGUoYS0tKShpPW9bYV0pJiYoZVthXT0hKHRbYV09aSkpfSk6ZnVuY3Rpb24oZSx0LG4pe3JldHVybiByWzBdPWUscyhyLG51bGwsbixpKSxyWzBdPW51bGwsIWkucG9wKCl9fSksaGFzOkYoZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiAwPEkodCxlKS5sZW5ndGh9fSksY29udGFpbnM6RihmdW5jdGlvbih0KXtyZXR1cm4gdD10LnJlcGxhY2UoTyxQKSxmdW5jdGlvbihlKXtyZXR1cm4tMTwoZS50ZXh0Q29udGVudHx8Y2UudGV4dChlKSkuaW5kZXhPZih0KX19KSxsYW5nOkYoZnVuY3Rpb24obil7cmV0dXJuIEEudGVzdChufHxcIlwiKXx8SS5lcnJvcihcInVuc3VwcG9ydGVkIGxhbmc6IFwiK24pLG49bi5yZXBsYWNlKE8sUCkudG9Mb3dlckNhc2UoKSxmdW5jdGlvbihlKXt2YXIgdDtkb3tpZih0PUM/ZS5sYW5nOmUuZ2V0QXR0cmlidXRlKFwieG1sOmxhbmdcIil8fGUuZ2V0QXR0cmlidXRlKFwibGFuZ1wiKSlyZXR1cm4odD10LnRvTG93ZXJDYXNlKCkpPT09bnx8MD09PXQuaW5kZXhPZihuK1wiLVwiKX13aGlsZSgoZT1lLnBhcmVudE5vZGUpJiYxPT09ZS5ub2RlVHlwZSk7cmV0dXJuITF9fSksdGFyZ2V0OmZ1bmN0aW9uKGUpe3ZhciB0PWllLmxvY2F0aW9uJiZpZS5sb2NhdGlvbi5oYXNoO3JldHVybiB0JiZ0LnNsaWNlKDEpPT09ZS5pZH0scm9vdDpmdW5jdGlvbihlKXtyZXR1cm4gZT09PXJ9LGZvY3VzOmZ1bmN0aW9uKGUpe3JldHVybiBlPT09ZnVuY3Rpb24oKXt0cnl7cmV0dXJuIFQuYWN0aXZlRWxlbWVudH1jYXRjaChlKXt9fSgpJiZULmhhc0ZvY3VzKCkmJiEhKGUudHlwZXx8ZS5ocmVmfHx+ZS50YWJJbmRleCl9LGVuYWJsZWQ6eighMSksZGlzYWJsZWQ6eighMCksY2hlY2tlZDpmdW5jdGlvbihlKXtyZXR1cm4gZmUoZSxcImlucHV0XCIpJiYhIWUuY2hlY2tlZHx8ZmUoZSxcIm9wdGlvblwiKSYmISFlLnNlbGVjdGVkfSxzZWxlY3RlZDpmdW5jdGlvbihlKXtyZXR1cm4gZS5wYXJlbnROb2RlJiZlLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleCwhMD09PWUuc2VsZWN0ZWR9LGVtcHR5OmZ1bmN0aW9uKGUpe2ZvcihlPWUuZmlyc3RDaGlsZDtlO2U9ZS5uZXh0U2libGluZylpZihlLm5vZGVUeXBlPDYpcmV0dXJuITE7cmV0dXJuITB9LHBhcmVudDpmdW5jdGlvbihlKXtyZXR1cm4hYi5wc2V1ZG9zLmVtcHR5KGUpfSxoZWFkZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIHEudGVzdChlLm5vZGVOYW1lKX0saW5wdXQ6ZnVuY3Rpb24oZSl7cmV0dXJuIE4udGVzdChlLm5vZGVOYW1lKX0sYnV0dG9uOmZ1bmN0aW9uKGUpe3JldHVybiBmZShlLFwiaW5wdXRcIikmJlwiYnV0dG9uXCI9PT1lLnR5cGV8fGZlKGUsXCJidXR0b25cIil9LHRleHQ6ZnVuY3Rpb24oZSl7dmFyIHQ7cmV0dXJuIGZlKGUsXCJpbnB1dFwiKSYmXCJ0ZXh0XCI9PT1lLnR5cGUmJihudWxsPT0odD1lLmdldEF0dHJpYnV0ZShcInR5cGVcIikpfHxcInRleHRcIj09PXQudG9Mb3dlckNhc2UoKSl9LGZpcnN0OlgoZnVuY3Rpb24oKXtyZXR1cm5bMF19KSxsYXN0OlgoZnVuY3Rpb24oZSx0KXtyZXR1cm5bdC0xXX0pLGVxOlgoZnVuY3Rpb24oZSx0LG4pe3JldHVybltuPDA/bit0Om5dfSksZXZlbjpYKGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPTA7bjx0O24rPTIpZS5wdXNoKG4pO3JldHVybiBlfSksb2RkOlgoZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49MTtuPHQ7bis9MillLnB1c2gobik7cmV0dXJuIGV9KSxsdDpYKGZ1bmN0aW9uKGUsdCxuKXt2YXIgcjtmb3Iocj1uPDA/bit0OnQ8bj90Om47MDw9LS1yOyllLnB1c2gocik7cmV0dXJuIGV9KSxndDpYKGZ1bmN0aW9uKGUsdCxuKXtmb3IodmFyIHI9bjwwP24rdDpuOysrcjx0OyllLnB1c2gocik7cmV0dXJuIGV9KX19KS5wc2V1ZG9zLm50aD1iLnBzZXVkb3MuZXEse3JhZGlvOiEwLGNoZWNrYm94OiEwLGZpbGU6ITAscGFzc3dvcmQ6ITAsaW1hZ2U6ITB9KWIucHNldWRvc1tlXT1CKGUpO2ZvcihlIGlue3N1Ym1pdDohMCxyZXNldDohMH0pYi5wc2V1ZG9zW2VdPV8oZSk7ZnVuY3Rpb24gRygpe31mdW5jdGlvbiBZKGUsdCl7dmFyIG4scixpLG8sYSxzLHUsbD1jW2UrXCIgXCJdO2lmKGwpcmV0dXJuIHQ/MDpsLnNsaWNlKDApO2E9ZSxzPVtdLHU9Yi5wcmVGaWx0ZXI7d2hpbGUoYSl7Zm9yKG8gaW4gbiYmIShyPXkuZXhlYyhhKSl8fChyJiYoYT1hLnNsaWNlKHJbMF0ubGVuZ3RoKXx8YSkscy5wdXNoKGk9W10pKSxuPSExLChyPW0uZXhlYyhhKSkmJihuPXIuc2hpZnQoKSxpLnB1c2goe3ZhbHVlOm4sdHlwZTpyWzBdLnJlcGxhY2UodmUsXCIgXCIpfSksYT1hLnNsaWNlKG4ubGVuZ3RoKSksYi5maWx0ZXIpIShyPURbb10uZXhlYyhhKSl8fHVbb10mJiEocj11W29dKHIpKXx8KG49ci5zaGlmdCgpLGkucHVzaCh7dmFsdWU6bix0eXBlOm8sbWF0Y2hlczpyfSksYT1hLnNsaWNlKG4ubGVuZ3RoKSk7aWYoIW4pYnJlYWt9cmV0dXJuIHQ/YS5sZW5ndGg6YT9JLmVycm9yKGUpOmMoZSxzKS5zbGljZSgwKX1mdW5jdGlvbiBRKGUpe2Zvcih2YXIgdD0wLG49ZS5sZW5ndGgscj1cIlwiO3Q8bjt0Kyspcis9ZVt0XS52YWx1ZTtyZXR1cm4gcn1mdW5jdGlvbiBKKGEsZSx0KXt2YXIgcz1lLmRpcix1PWUubmV4dCxsPXV8fHMsYz10JiZcInBhcmVudE5vZGVcIj09PWwsZj1uKys7cmV0dXJuIGUuZmlyc3Q/ZnVuY3Rpb24oZSx0LG4pe3doaWxlKGU9ZVtzXSlpZigxPT09ZS5ub2RlVHlwZXx8YylyZXR1cm4gYShlLHQsbik7cmV0dXJuITF9OmZ1bmN0aW9uKGUsdCxuKXt2YXIgcixpLG89W0UsZl07aWYobil7d2hpbGUoZT1lW3NdKWlmKCgxPT09ZS5ub2RlVHlwZXx8YykmJmEoZSx0LG4pKXJldHVybiEwfWVsc2Ugd2hpbGUoZT1lW3NdKWlmKDE9PT1lLm5vZGVUeXBlfHxjKWlmKGk9ZVtTXXx8KGVbU109e30pLHUmJmZlKGUsdSkpZT1lW3NdfHxlO2Vsc2V7aWYoKHI9aVtsXSkmJnJbMF09PT1FJiZyWzFdPT09ZilyZXR1cm4gb1syXT1yWzJdO2lmKChpW2xdPW8pWzJdPWEoZSx0LG4pKXJldHVybiEwfXJldHVybiExfX1mdW5jdGlvbiBLKGkpe3JldHVybiAxPGkubGVuZ3RoP2Z1bmN0aW9uKGUsdCxuKXt2YXIgcj1pLmxlbmd0aDt3aGlsZShyLS0paWYoIWlbcl0oZSx0LG4pKXJldHVybiExO3JldHVybiEwfTppWzBdfWZ1bmN0aW9uIFooZSx0LG4scixpKXtmb3IodmFyIG8sYT1bXSxzPTAsdT1lLmxlbmd0aCxsPW51bGwhPXQ7czx1O3MrKykobz1lW3NdKSYmKG4mJiFuKG8scixpKXx8KGEucHVzaChvKSxsJiZ0LnB1c2gocykpKTtyZXR1cm4gYX1mdW5jdGlvbiBlZShkLGgsZyx2LHksZSl7cmV0dXJuIHYmJiF2W1NdJiYodj1lZSh2KSkseSYmIXlbU10mJih5PWVlKHksZSkpLEYoZnVuY3Rpb24oZSx0LG4scil7dmFyIGksbyxhLHMsdT1bXSxsPVtdLGM9dC5sZW5ndGgsZj1lfHxmdW5jdGlvbihlLHQsbil7Zm9yKHZhciByPTAsaT10Lmxlbmd0aDtyPGk7cisrKUkoZSx0W3JdLG4pO3JldHVybiBufShofHxcIipcIixuLm5vZGVUeXBlP1tuXTpuLFtdKSxwPSFkfHwhZSYmaD9mOlooZix1LGQsbixyKTtpZihnP2cocCxzPXl8fChlP2Q6Y3x8dik/W106dCxuLHIpOnM9cCx2KXtpPVoocyxsKSx2KGksW10sbixyKSxvPWkubGVuZ3RoO3doaWxlKG8tLSkoYT1pW29dKSYmKHNbbFtvXV09IShwW2xbb11dPWEpKX1pZihlKXtpZih5fHxkKXtpZih5KXtpPVtdLG89cy5sZW5ndGg7d2hpbGUoby0tKShhPXNbb10pJiZpLnB1c2gocFtvXT1hKTt5KG51bGwscz1bXSxpLHIpfW89cy5sZW5ndGg7d2hpbGUoby0tKShhPXNbb10pJiYtMTwoaT15P3NlLmNhbGwoZSxhKTp1W29dKSYmKGVbaV09ISh0W2ldPWEpKX19ZWxzZSBzPVoocz09PXQ/cy5zcGxpY2UoYyxzLmxlbmd0aCk6cykseT95KG51bGwsdCxzLHIpOmsuYXBwbHkodCxzKX0pfWZ1bmN0aW9uIHRlKGUpe2Zvcih2YXIgaSx0LG4scj1lLmxlbmd0aCxvPWIucmVsYXRpdmVbZVswXS50eXBlXSxhPW98fGIucmVsYXRpdmVbXCIgXCJdLHM9bz8xOjAsdT1KKGZ1bmN0aW9uKGUpe3JldHVybiBlPT09aX0sYSwhMCksbD1KKGZ1bmN0aW9uKGUpe3JldHVybi0xPHNlLmNhbGwoaSxlKX0sYSwhMCksYz1bZnVuY3Rpb24oZSx0LG4pe3ZhciByPSFvJiYobnx8dCE9dyl8fCgoaT10KS5ub2RlVHlwZT91KGUsdCxuKTpsKGUsdCxuKSk7cmV0dXJuIGk9bnVsbCxyfV07czxyO3MrKylpZih0PWIucmVsYXRpdmVbZVtzXS50eXBlXSljPVtKKEsoYyksdCldO2Vsc2V7aWYoKHQ9Yi5maWx0ZXJbZVtzXS50eXBlXS5hcHBseShudWxsLGVbc10ubWF0Y2hlcykpW1NdKXtmb3Iobj0rK3M7bjxyO24rKylpZihiLnJlbGF0aXZlW2Vbbl0udHlwZV0pYnJlYWs7cmV0dXJuIGVlKDE8cyYmSyhjKSwxPHMmJlEoZS5zbGljZSgwLHMtMSkuY29uY2F0KHt2YWx1ZTpcIiBcIj09PWVbcy0yXS50eXBlP1wiKlwiOlwiXCJ9KSkucmVwbGFjZSh2ZSxcIiQxXCIpLHQsczxuJiZ0ZShlLnNsaWNlKHMsbikpLG48ciYmdGUoZT1lLnNsaWNlKG4pKSxuPHImJlEoZSkpfWMucHVzaCh0KX1yZXR1cm4gSyhjKX1mdW5jdGlvbiBuZShlLHQpe3ZhciBuLHYseSxtLHgscixpPVtdLG89W10sYT11W2UrXCIgXCJdO2lmKCFhKXt0fHwodD1ZKGUpKSxuPXQubGVuZ3RoO3doaWxlKG4tLSkoYT10ZSh0W25dKSlbU10/aS5wdXNoKGEpOm8ucHVzaChhKTsoYT11KGUsKHY9byxtPTA8KHk9aSkubGVuZ3RoLHg9MDx2Lmxlbmd0aCxyPWZ1bmN0aW9uKGUsdCxuLHIsaSl7dmFyIG8sYSxzLHU9MCxsPVwiMFwiLGM9ZSYmW10sZj1bXSxwPXcsZD1lfHx4JiZiLmZpbmQuVEFHKFwiKlwiLGkpLGg9RSs9bnVsbD09cD8xOk1hdGgucmFuZG9tKCl8fC4xLGc9ZC5sZW5ndGg7Zm9yKGkmJih3PXQ9PVR8fHR8fGkpO2whPT1nJiZudWxsIT0obz1kW2xdKTtsKyspe2lmKHgmJm8pe2E9MCx0fHxvLm93bmVyRG9jdW1lbnQ9PVR8fChWKG8pLG49IUMpO3doaWxlKHM9dlthKytdKWlmKHMobyx0fHxULG4pKXtrLmNhbGwocixvKTticmVha31pJiYoRT1oKX1tJiYoKG89IXMmJm8pJiZ1LS0sZSYmYy5wdXNoKG8pKX1pZih1Kz1sLG0mJmwhPT11KXthPTA7d2hpbGUocz15W2ErK10pcyhjLGYsdCxuKTtpZihlKXtpZigwPHUpd2hpbGUobC0tKWNbbF18fGZbbF18fChmW2xdPXBlLmNhbGwocikpO2Y9WihmKX1rLmFwcGx5KHIsZiksaSYmIWUmJjA8Zi5sZW5ndGgmJjE8dSt5Lmxlbmd0aCYmY2UudW5pcXVlU29ydChyKX1yZXR1cm4gaSYmKEU9aCx3PXApLGN9LG0/RihyKTpyKSkpLnNlbGVjdG9yPWV9cmV0dXJuIGF9ZnVuY3Rpb24gcmUoZSx0LG4scil7dmFyIGksbyxhLHMsdSxsPVwiZnVuY3Rpb25cIj09dHlwZW9mIGUmJmUsYz0hciYmWShlPWwuc2VsZWN0b3J8fGUpO2lmKG49bnx8W10sMT09PWMubGVuZ3RoKXtpZigyPChvPWNbMF09Y1swXS5zbGljZSgwKSkubGVuZ3RoJiZcIklEXCI9PT0oYT1vWzBdKS50eXBlJiY5PT09dC5ub2RlVHlwZSYmQyYmYi5yZWxhdGl2ZVtvWzFdLnR5cGVdKXtpZighKHQ9KGIuZmluZC5JRChhLm1hdGNoZXNbMF0ucmVwbGFjZShPLFApLHQpfHxbXSlbMF0pKXJldHVybiBuO2wmJih0PXQucGFyZW50Tm9kZSksZT1lLnNsaWNlKG8uc2hpZnQoKS52YWx1ZS5sZW5ndGgpfWk9RC5uZWVkc0NvbnRleHQudGVzdChlKT8wOm8ubGVuZ3RoO3doaWxlKGktLSl7aWYoYT1vW2ldLGIucmVsYXRpdmVbcz1hLnR5cGVdKWJyZWFrO2lmKCh1PWIuZmluZFtzXSkmJihyPXUoYS5tYXRjaGVzWzBdLnJlcGxhY2UoTyxQKSxILnRlc3Qob1swXS50eXBlKSYmVSh0LnBhcmVudE5vZGUpfHx0KSkpe2lmKG8uc3BsaWNlKGksMSksIShlPXIubGVuZ3RoJiZRKG8pKSlyZXR1cm4gay5hcHBseShuLHIpLG47YnJlYWt9fX1yZXR1cm4obHx8bmUoZSxjKSkocix0LCFDLG4sIXR8fEgudGVzdChlKSYmVSh0LnBhcmVudE5vZGUpfHx0KSxufUcucHJvdG90eXBlPWIuZmlsdGVycz1iLnBzZXVkb3MsYi5zZXRGaWx0ZXJzPW5ldyBHLGxlLnNvcnRTdGFibGU9Uy5zcGxpdChcIlwiKS5zb3J0KGwpLmpvaW4oXCJcIik9PT1TLFYoKSxsZS5zb3J0RGV0YWNoZWQ9JChmdW5jdGlvbihlKXtyZXR1cm4gMSZlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKFQuY3JlYXRlRWxlbWVudChcImZpZWxkc2V0XCIpKX0pLGNlLmZpbmQ9SSxjZS5leHByW1wiOlwiXT1jZS5leHByLnBzZXVkb3MsY2UudW5pcXVlPWNlLnVuaXF1ZVNvcnQsSS5jb21waWxlPW5lLEkuc2VsZWN0PXJlLEkuc2V0RG9jdW1lbnQ9VixJLnRva2VuaXplPVksSS5lc2NhcGU9Y2UuZXNjYXBlU2VsZWN0b3IsSS5nZXRUZXh0PWNlLnRleHQsSS5pc1hNTD1jZS5pc1hNTERvYyxJLnNlbGVjdG9ycz1jZS5leHByLEkuc3VwcG9ydD1jZS5zdXBwb3J0LEkudW5pcXVlU29ydD1jZS51bmlxdWVTb3J0fSgpO3ZhciBkPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1bXSxpPXZvaWQgMCE9PW47d2hpbGUoKGU9ZVt0XSkmJjkhPT1lLm5vZGVUeXBlKWlmKDE9PT1lLm5vZGVUeXBlKXtpZihpJiZjZShlKS5pcyhuKSlicmVhaztyLnB1c2goZSl9cmV0dXJuIHJ9LGg9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49W107ZTtlPWUubmV4dFNpYmxpbmcpMT09PWUubm9kZVR5cGUmJmUhPT10JiZuLnB1c2goZSk7cmV0dXJuIG59LGI9Y2UuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQsdz0vXjwoW2Etel1bXlxcL1xcMD46XFx4MjBcXHRcXHJcXG5cXGZdKilbXFx4MjBcXHRcXHJcXG5cXGZdKlxcLz8+KD86PFxcL1xcMT58KSQvaTtmdW5jdGlvbiBUKGUsbixyKXtyZXR1cm4gdihuKT9jZS5ncmVwKGUsZnVuY3Rpb24oZSx0KXtyZXR1cm4hIW4uY2FsbChlLHQsZSkhPT1yfSk6bi5ub2RlVHlwZT9jZS5ncmVwKGUsZnVuY3Rpb24oZSl7cmV0dXJuIGU9PT1uIT09cn0pOlwic3RyaW5nXCIhPXR5cGVvZiBuP2NlLmdyZXAoZSxmdW5jdGlvbihlKXtyZXR1cm4tMTxzZS5jYWxsKG4sZSkhPT1yfSk6Y2UuZmlsdGVyKG4sZSxyKX1jZS5maWx0ZXI9ZnVuY3Rpb24oZSx0LG4pe3ZhciByPXRbMF07cmV0dXJuIG4mJihlPVwiOm5vdChcIitlK1wiKVwiKSwxPT09dC5sZW5ndGgmJjE9PT1yLm5vZGVUeXBlP2NlLmZpbmQubWF0Y2hlc1NlbGVjdG9yKHIsZSk/W3JdOltdOmNlLmZpbmQubWF0Y2hlcyhlLGNlLmdyZXAodCxmdW5jdGlvbihlKXtyZXR1cm4gMT09PWUubm9kZVR5cGV9KSl9LGNlLmZuLmV4dGVuZCh7ZmluZDpmdW5jdGlvbihlKXt2YXIgdCxuLHI9dGhpcy5sZW5ndGgsaT10aGlzO2lmKFwic3RyaW5nXCIhPXR5cGVvZiBlKXJldHVybiB0aGlzLnB1c2hTdGFjayhjZShlKS5maWx0ZXIoZnVuY3Rpb24oKXtmb3IodD0wO3Q8cjt0KyspaWYoY2UuY29udGFpbnMoaVt0XSx0aGlzKSlyZXR1cm4hMH0pKTtmb3Iobj10aGlzLnB1c2hTdGFjayhbXSksdD0wO3Q8cjt0KyspY2UuZmluZChlLGlbdF0sbik7cmV0dXJuIDE8cj9jZS51bmlxdWVTb3J0KG4pOm59LGZpbHRlcjpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5wdXNoU3RhY2soVCh0aGlzLGV8fFtdLCExKSl9LG5vdDpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5wdXNoU3RhY2soVCh0aGlzLGV8fFtdLCEwKSl9LGlzOmZ1bmN0aW9uKGUpe3JldHVybiEhVCh0aGlzLFwic3RyaW5nXCI9PXR5cGVvZiBlJiZiLnRlc3QoZSk/Y2UoZSk6ZXx8W10sITEpLmxlbmd0aH19KTt2YXIgayxTPS9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSspKSQvOyhjZS5mbi5pbml0PWZ1bmN0aW9uKGUsdCxuKXt2YXIgcixpO2lmKCFlKXJldHVybiB0aGlzO2lmKG49bnx8ayxcInN0cmluZ1wiPT10eXBlb2YgZSl7aWYoIShyPVwiPFwiPT09ZVswXSYmXCI+XCI9PT1lW2UubGVuZ3RoLTFdJiYzPD1lLmxlbmd0aD9bbnVsbCxlLG51bGxdOlMuZXhlYyhlKSl8fCFyWzFdJiZ0KXJldHVybiF0fHx0LmpxdWVyeT8odHx8bikuZmluZChlKTp0aGlzLmNvbnN0cnVjdG9yKHQpLmZpbmQoZSk7aWYoclsxXSl7aWYodD10IGluc3RhbmNlb2YgY2U/dFswXTp0LGNlLm1lcmdlKHRoaXMsY2UucGFyc2VIVE1MKHJbMV0sdCYmdC5ub2RlVHlwZT90Lm93bmVyRG9jdW1lbnR8fHQ6QywhMCkpLHcudGVzdChyWzFdKSYmY2UuaXNQbGFpbk9iamVjdCh0KSlmb3IociBpbiB0KXYodGhpc1tyXSk/dGhpc1tyXSh0W3JdKTp0aGlzLmF0dHIocix0W3JdKTtyZXR1cm4gdGhpc31yZXR1cm4oaT1DLmdldEVsZW1lbnRCeUlkKHJbMl0pKSYmKHRoaXNbMF09aSx0aGlzLmxlbmd0aD0xKSx0aGlzfXJldHVybiBlLm5vZGVUeXBlPyh0aGlzWzBdPWUsdGhpcy5sZW5ndGg9MSx0aGlzKTp2KGUpP3ZvaWQgMCE9PW4ucmVhZHk/bi5yZWFkeShlKTplKGNlKTpjZS5tYWtlQXJyYXkoZSx0aGlzKX0pLnByb3RvdHlwZT1jZS5mbixrPWNlKEMpO3ZhciBFPS9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLGo9e2NoaWxkcmVuOiEwLGNvbnRlbnRzOiEwLG5leHQ6ITAscHJldjohMH07ZnVuY3Rpb24gQShlLHQpe3doaWxlKChlPWVbdF0pJiYxIT09ZS5ub2RlVHlwZSk7cmV0dXJuIGV9Y2UuZm4uZXh0ZW5kKHtoYXM6ZnVuY3Rpb24oZSl7dmFyIHQ9Y2UoZSx0aGlzKSxuPXQubGVuZ3RoO3JldHVybiB0aGlzLmZpbHRlcihmdW5jdGlvbigpe2Zvcih2YXIgZT0wO2U8bjtlKyspaWYoY2UuY29udGFpbnModGhpcyx0W2VdKSlyZXR1cm4hMH0pfSxjbG9zZXN0OmZ1bmN0aW9uKGUsdCl7dmFyIG4scj0wLGk9dGhpcy5sZW5ndGgsbz1bXSxhPVwic3RyaW5nXCIhPXR5cGVvZiBlJiZjZShlKTtpZighYi50ZXN0KGUpKWZvcig7cjxpO3IrKylmb3Iobj10aGlzW3JdO24mJm4hPT10O249bi5wYXJlbnROb2RlKWlmKG4ubm9kZVR5cGU8MTEmJihhPy0xPGEuaW5kZXgobik6MT09PW4ubm9kZVR5cGUmJmNlLmZpbmQubWF0Y2hlc1NlbGVjdG9yKG4sZSkpKXtvLnB1c2gobik7YnJlYWt9cmV0dXJuIHRoaXMucHVzaFN0YWNrKDE8by5sZW5ndGg/Y2UudW5pcXVlU29ydChvKTpvKX0saW5kZXg6ZnVuY3Rpb24oZSl7cmV0dXJuIGU/XCJzdHJpbmdcIj09dHlwZW9mIGU/c2UuY2FsbChjZShlKSx0aGlzWzBdKTpzZS5jYWxsKHRoaXMsZS5qcXVlcnk/ZVswXTplKTp0aGlzWzBdJiZ0aGlzWzBdLnBhcmVudE5vZGU/dGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGg6LTF9LGFkZDpmdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLnB1c2hTdGFjayhjZS51bmlxdWVTb3J0KGNlLm1lcmdlKHRoaXMuZ2V0KCksY2UoZSx0KSkpKX0sYWRkQmFjazpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5hZGQobnVsbD09ZT90aGlzLnByZXZPYmplY3Q6dGhpcy5wcmV2T2JqZWN0LmZpbHRlcihlKSl9fSksY2UuZWFjaCh7cGFyZW50OmZ1bmN0aW9uKGUpe3ZhciB0PWUucGFyZW50Tm9kZTtyZXR1cm4gdCYmMTEhPT10Lm5vZGVUeXBlP3Q6bnVsbH0scGFyZW50czpmdW5jdGlvbihlKXtyZXR1cm4gZChlLFwicGFyZW50Tm9kZVwiKX0scGFyZW50c1VudGlsOmZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gZChlLFwicGFyZW50Tm9kZVwiLG4pfSxuZXh0OmZ1bmN0aW9uKGUpe3JldHVybiBBKGUsXCJuZXh0U2libGluZ1wiKX0scHJldjpmdW5jdGlvbihlKXtyZXR1cm4gQShlLFwicHJldmlvdXNTaWJsaW5nXCIpfSxuZXh0QWxsOmZ1bmN0aW9uKGUpe3JldHVybiBkKGUsXCJuZXh0U2libGluZ1wiKX0scHJldkFsbDpmdW5jdGlvbihlKXtyZXR1cm4gZChlLFwicHJldmlvdXNTaWJsaW5nXCIpfSxuZXh0VW50aWw6ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBkKGUsXCJuZXh0U2libGluZ1wiLG4pfSxwcmV2VW50aWw6ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBkKGUsXCJwcmV2aW91c1NpYmxpbmdcIixuKX0sc2libGluZ3M6ZnVuY3Rpb24oZSl7cmV0dXJuIGgoKGUucGFyZW50Tm9kZXx8e30pLmZpcnN0Q2hpbGQsZSl9LGNoaWxkcmVuOmZ1bmN0aW9uKGUpe3JldHVybiBoKGUuZmlyc3RDaGlsZCl9LGNvbnRlbnRzOmZ1bmN0aW9uKGUpe3JldHVybiBudWxsIT1lLmNvbnRlbnREb2N1bWVudCYmcihlLmNvbnRlbnREb2N1bWVudCk/ZS5jb250ZW50RG9jdW1lbnQ6KGZlKGUsXCJ0ZW1wbGF0ZVwiKSYmKGU9ZS5jb250ZW50fHxlKSxjZS5tZXJnZShbXSxlLmNoaWxkTm9kZXMpKX19LGZ1bmN0aW9uKHIsaSl7Y2UuZm5bcl09ZnVuY3Rpb24oZSx0KXt2YXIgbj1jZS5tYXAodGhpcyxpLGUpO3JldHVyblwiVW50aWxcIiE9PXIuc2xpY2UoLTUpJiYodD1lKSx0JiZcInN0cmluZ1wiPT10eXBlb2YgdCYmKG49Y2UuZmlsdGVyKHQsbikpLDE8dGhpcy5sZW5ndGgmJihqW3JdfHxjZS51bmlxdWVTb3J0KG4pLEUudGVzdChyKSYmbi5yZXZlcnNlKCkpLHRoaXMucHVzaFN0YWNrKG4pfX0pO3ZhciBEPS9bXlxceDIwXFx0XFxyXFxuXFxmXSsvZztmdW5jdGlvbiBOKGUpe3JldHVybiBlfWZ1bmN0aW9uIHEoZSl7dGhyb3cgZX1mdW5jdGlvbiBMKGUsdCxuLHIpe3ZhciBpO3RyeXtlJiZ2KGk9ZS5wcm9taXNlKT9pLmNhbGwoZSkuZG9uZSh0KS5mYWlsKG4pOmUmJnYoaT1lLnRoZW4pP2kuY2FsbChlLHQsbik6dC5hcHBseSh2b2lkIDAsW2VdLnNsaWNlKHIpKX1jYXRjaChlKXtuLmFwcGx5KHZvaWQgMCxbZV0pfX1jZS5DYWxsYmFja3M9ZnVuY3Rpb24ocil7dmFyIGUsbjtyPVwic3RyaW5nXCI9PXR5cGVvZiByPyhlPXIsbj17fSxjZS5lYWNoKGUubWF0Y2goRCl8fFtdLGZ1bmN0aW9uKGUsdCl7blt0XT0hMH0pLG4pOmNlLmV4dGVuZCh7fSxyKTt2YXIgaSx0LG8sYSxzPVtdLHU9W10sbD0tMSxjPWZ1bmN0aW9uKCl7Zm9yKGE9YXx8ci5vbmNlLG89aT0hMDt1Lmxlbmd0aDtsPS0xKXt0PXUuc2hpZnQoKTt3aGlsZSgrK2w8cy5sZW5ndGgpITE9PT1zW2xdLmFwcGx5KHRbMF0sdFsxXSkmJnIuc3RvcE9uRmFsc2UmJihsPXMubGVuZ3RoLHQ9ITEpfXIubWVtb3J5fHwodD0hMSksaT0hMSxhJiYocz10P1tdOlwiXCIpfSxmPXthZGQ6ZnVuY3Rpb24oKXtyZXR1cm4gcyYmKHQmJiFpJiYobD1zLmxlbmd0aC0xLHUucHVzaCh0KSksZnVuY3Rpb24gbihlKXtjZS5lYWNoKGUsZnVuY3Rpb24oZSx0KXt2KHQpP3IudW5pcXVlJiZmLmhhcyh0KXx8cy5wdXNoKHQpOnQmJnQubGVuZ3RoJiZcInN0cmluZ1wiIT09eCh0KSYmbih0KX0pfShhcmd1bWVudHMpLHQmJiFpJiZjKCkpLHRoaXN9LHJlbW92ZTpmdW5jdGlvbigpe3JldHVybiBjZS5lYWNoKGFyZ3VtZW50cyxmdW5jdGlvbihlLHQpe3ZhciBuO3doaWxlKC0xPChuPWNlLmluQXJyYXkodCxzLG4pKSlzLnNwbGljZShuLDEpLG48PWwmJmwtLX0pLHRoaXN9LGhhczpmdW5jdGlvbihlKXtyZXR1cm4gZT8tMTxjZS5pbkFycmF5KGUscyk6MDxzLmxlbmd0aH0sZW1wdHk6ZnVuY3Rpb24oKXtyZXR1cm4gcyYmKHM9W10pLHRoaXN9LGRpc2FibGU6ZnVuY3Rpb24oKXtyZXR1cm4gYT11PVtdLHM9dD1cIlwiLHRoaXN9LGRpc2FibGVkOmZ1bmN0aW9uKCl7cmV0dXJuIXN9LGxvY2s6ZnVuY3Rpb24oKXtyZXR1cm4gYT11PVtdLHR8fGl8fChzPXQ9XCJcIiksdGhpc30sbG9ja2VkOmZ1bmN0aW9uKCl7cmV0dXJuISFhfSxmaXJlV2l0aDpmdW5jdGlvbihlLHQpe3JldHVybiBhfHwodD1bZSwodD10fHxbXSkuc2xpY2U/dC5zbGljZSgpOnRdLHUucHVzaCh0KSxpfHxjKCkpLHRoaXN9LGZpcmU6ZnVuY3Rpb24oKXtyZXR1cm4gZi5maXJlV2l0aCh0aGlzLGFyZ3VtZW50cyksdGhpc30sZmlyZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hIW99fTtyZXR1cm4gZn0sY2UuZXh0ZW5kKHtEZWZlcnJlZDpmdW5jdGlvbihlKXt2YXIgbz1bW1wibm90aWZ5XCIsXCJwcm9ncmVzc1wiLGNlLkNhbGxiYWNrcyhcIm1lbW9yeVwiKSxjZS5DYWxsYmFja3MoXCJtZW1vcnlcIiksMl0sW1wicmVzb2x2ZVwiLFwiZG9uZVwiLGNlLkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLGNlLkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLDAsXCJyZXNvbHZlZFwiXSxbXCJyZWplY3RcIixcImZhaWxcIixjZS5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSxjZS5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSwxLFwicmVqZWN0ZWRcIl1dLGk9XCJwZW5kaW5nXCIsYT17c3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gaX0sYWx3YXlzOmZ1bmN0aW9uKCl7cmV0dXJuIHMuZG9uZShhcmd1bWVudHMpLmZhaWwoYXJndW1lbnRzKSx0aGlzfSxcImNhdGNoXCI6ZnVuY3Rpb24oZSl7cmV0dXJuIGEudGhlbihudWxsLGUpfSxwaXBlOmZ1bmN0aW9uKCl7dmFyIGk9YXJndW1lbnRzO3JldHVybiBjZS5EZWZlcnJlZChmdW5jdGlvbihyKXtjZS5lYWNoKG8sZnVuY3Rpb24oZSx0KXt2YXIgbj12KGlbdFs0XV0pJiZpW3RbNF1dO3NbdFsxXV0oZnVuY3Rpb24oKXt2YXIgZT1uJiZuLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtlJiZ2KGUucHJvbWlzZSk/ZS5wcm9taXNlKCkucHJvZ3Jlc3Moci5ub3RpZnkpLmRvbmUoci5yZXNvbHZlKS5mYWlsKHIucmVqZWN0KTpyW3RbMF0rXCJXaXRoXCJdKHRoaXMsbj9bZV06YXJndW1lbnRzKX0pfSksaT1udWxsfSkucHJvbWlzZSgpfSx0aGVuOmZ1bmN0aW9uKHQsbixyKXt2YXIgdT0wO2Z1bmN0aW9uIGwoaSxvLGEscyl7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIG49dGhpcyxyPWFyZ3VtZW50cyxlPWZ1bmN0aW9uKCl7dmFyIGUsdDtpZighKGk8dSkpe2lmKChlPWEuYXBwbHkobixyKSk9PT1vLnByb21pc2UoKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiVGhlbmFibGUgc2VsZi1yZXNvbHV0aW9uXCIpO3Q9ZSYmKFwib2JqZWN0XCI9PXR5cGVvZiBlfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlKSYmZS50aGVuLHYodCk/cz90LmNhbGwoZSxsKHUsbyxOLHMpLGwodSxvLHEscykpOih1KyssdC5jYWxsKGUsbCh1LG8sTixzKSxsKHUsbyxxLHMpLGwodSxvLE4sby5ub3RpZnlXaXRoKSkpOihhIT09TiYmKG49dm9pZCAwLHI9W2VdKSwoc3x8by5yZXNvbHZlV2l0aCkobixyKSl9fSx0PXM/ZTpmdW5jdGlvbigpe3RyeXtlKCl9Y2F0Y2goZSl7Y2UuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayYmY2UuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayhlLHQuZXJyb3IpLHU8PWkrMSYmKGEhPT1xJiYobj12b2lkIDAscj1bZV0pLG8ucmVqZWN0V2l0aChuLHIpKX19O2k/dCgpOihjZS5EZWZlcnJlZC5nZXRFcnJvckhvb2s/dC5lcnJvcj1jZS5EZWZlcnJlZC5nZXRFcnJvckhvb2soKTpjZS5EZWZlcnJlZC5nZXRTdGFja0hvb2smJih0LmVycm9yPWNlLkRlZmVycmVkLmdldFN0YWNrSG9vaygpKSxpZS5zZXRUaW1lb3V0KHQpKX19cmV0dXJuIGNlLkRlZmVycmVkKGZ1bmN0aW9uKGUpe29bMF1bM10uYWRkKGwoMCxlLHYocik/cjpOLGUubm90aWZ5V2l0aCkpLG9bMV1bM10uYWRkKGwoMCxlLHYodCk/dDpOKSksb1syXVszXS5hZGQobCgwLGUsdihuKT9uOnEpKX0pLnByb21pc2UoKX0scHJvbWlzZTpmdW5jdGlvbihlKXtyZXR1cm4gbnVsbCE9ZT9jZS5leHRlbmQoZSxhKTphfX0scz17fTtyZXR1cm4gY2UuZWFjaChvLGZ1bmN0aW9uKGUsdCl7dmFyIG49dFsyXSxyPXRbNV07YVt0WzFdXT1uLmFkZCxyJiZuLmFkZChmdW5jdGlvbigpe2k9cn0sb1szLWVdWzJdLmRpc2FibGUsb1szLWVdWzNdLmRpc2FibGUsb1swXVsyXS5sb2NrLG9bMF1bM10ubG9jayksbi5hZGQodFszXS5maXJlKSxzW3RbMF1dPWZ1bmN0aW9uKCl7cmV0dXJuIHNbdFswXStcIldpdGhcIl0odGhpcz09PXM/dm9pZCAwOnRoaXMsYXJndW1lbnRzKSx0aGlzfSxzW3RbMF0rXCJXaXRoXCJdPW4uZmlyZVdpdGh9KSxhLnByb21pc2UocyksZSYmZS5jYWxsKHMscyksc30sd2hlbjpmdW5jdGlvbihlKXt2YXIgbj1hcmd1bWVudHMubGVuZ3RoLHQ9bixyPUFycmF5KHQpLGk9YWUuY2FsbChhcmd1bWVudHMpLG89Y2UuRGVmZXJyZWQoKSxhPWZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbihlKXtyW3RdPXRoaXMsaVt0XT0xPGFyZ3VtZW50cy5sZW5ndGg/YWUuY2FsbChhcmd1bWVudHMpOmUsLS1ufHxvLnJlc29sdmVXaXRoKHIsaSl9fTtpZihuPD0xJiYoTChlLG8uZG9uZShhKHQpKS5yZXNvbHZlLG8ucmVqZWN0LCFuKSxcInBlbmRpbmdcIj09PW8uc3RhdGUoKXx8dihpW3RdJiZpW3RdLnRoZW4pKSlyZXR1cm4gby50aGVuKCk7d2hpbGUodC0tKUwoaVt0XSxhKHQpLG8ucmVqZWN0KTtyZXR1cm4gby5wcm9taXNlKCl9fSk7dmFyIEg9L14oRXZhbHxJbnRlcm5hbHxSYW5nZXxSZWZlcmVuY2V8U3ludGF4fFR5cGV8VVJJKUVycm9yJC87Y2UuRGVmZXJyZWQuZXhjZXB0aW9uSG9vaz1mdW5jdGlvbihlLHQpe2llLmNvbnNvbGUmJmllLmNvbnNvbGUud2FybiYmZSYmSC50ZXN0KGUubmFtZSkmJmllLmNvbnNvbGUud2FybihcImpRdWVyeS5EZWZlcnJlZCBleGNlcHRpb246IFwiK2UubWVzc2FnZSxlLnN0YWNrLHQpfSxjZS5yZWFkeUV4Y2VwdGlvbj1mdW5jdGlvbihlKXtpZS5zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgZX0pfTt2YXIgTz1jZS5EZWZlcnJlZCgpO2Z1bmN0aW9uIFAoKXtDLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsUCksaWUucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImxvYWRcIixQKSxjZS5yZWFkeSgpfWNlLmZuLnJlYWR5PWZ1bmN0aW9uKGUpe3JldHVybiBPLnRoZW4oZSlbXCJjYXRjaFwiXShmdW5jdGlvbihlKXtjZS5yZWFkeUV4Y2VwdGlvbihlKX0pLHRoaXN9LGNlLmV4dGVuZCh7aXNSZWFkeTohMSxyZWFkeVdhaXQ6MSxyZWFkeTpmdW5jdGlvbihlKXsoITA9PT1lPy0tY2UucmVhZHlXYWl0OmNlLmlzUmVhZHkpfHwoY2UuaXNSZWFkeT0hMCkhPT1lJiYwPC0tY2UucmVhZHlXYWl0fHxPLnJlc29sdmVXaXRoKEMsW2NlXSl9fSksY2UucmVhZHkudGhlbj1PLnRoZW4sXCJjb21wbGV0ZVwiPT09Qy5yZWFkeVN0YXRlfHxcImxvYWRpbmdcIiE9PUMucmVhZHlTdGF0ZSYmIUMuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsP2llLnNldFRpbWVvdXQoY2UucmVhZHkpOihDLmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsUCksaWUuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIixQKSk7dmFyIE09ZnVuY3Rpb24oZSx0LG4scixpLG8sYSl7dmFyIHM9MCx1PWUubGVuZ3RoLGw9bnVsbD09bjtpZihcIm9iamVjdFwiPT09eChuKSlmb3IocyBpbiBpPSEwLG4pTShlLHQscyxuW3NdLCEwLG8sYSk7ZWxzZSBpZih2b2lkIDAhPT1yJiYoaT0hMCx2KHIpfHwoYT0hMCksbCYmKGE/KHQuY2FsbChlLHIpLHQ9bnVsbCk6KGw9dCx0PWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gbC5jYWxsKGNlKGUpLG4pfSkpLHQpKWZvcig7czx1O3MrKyl0KGVbc10sbixhP3I6ci5jYWxsKGVbc10scyx0KGVbc10sbikpKTtyZXR1cm4gaT9lOmw/dC5jYWxsKGUpOnU/dChlWzBdLG4pOm99LFI9L14tbXMtLyxJPS8tKFthLXpdKS9nO2Z1bmN0aW9uIFcoZSx0KXtyZXR1cm4gdC50b1VwcGVyQ2FzZSgpfWZ1bmN0aW9uIEYoZSl7cmV0dXJuIGUucmVwbGFjZShSLFwibXMtXCIpLnJlcGxhY2UoSSxXKX12YXIgJD1mdW5jdGlvbihlKXtyZXR1cm4gMT09PWUubm9kZVR5cGV8fDk9PT1lLm5vZGVUeXBlfHwhK2Uubm9kZVR5cGV9O2Z1bmN0aW9uIEIoKXt0aGlzLmV4cGFuZG89Y2UuZXhwYW5kbytCLnVpZCsrfUIudWlkPTEsQi5wcm90b3R5cGU9e2NhY2hlOmZ1bmN0aW9uKGUpe3ZhciB0PWVbdGhpcy5leHBhbmRvXTtyZXR1cm4gdHx8KHQ9e30sJChlKSYmKGUubm9kZVR5cGU/ZVt0aGlzLmV4cGFuZG9dPXQ6T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdGhpcy5leHBhbmRvLHt2YWx1ZTp0LGNvbmZpZ3VyYWJsZTohMH0pKSksdH0sc2V0OmZ1bmN0aW9uKGUsdCxuKXt2YXIgcixpPXRoaXMuY2FjaGUoZSk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQpaVtGKHQpXT1uO2Vsc2UgZm9yKHIgaW4gdClpW0YocildPXRbcl07cmV0dXJuIGl9LGdldDpmdW5jdGlvbihlLHQpe3JldHVybiB2b2lkIDA9PT10P3RoaXMuY2FjaGUoZSk6ZVt0aGlzLmV4cGFuZG9dJiZlW3RoaXMuZXhwYW5kb11bRih0KV19LGFjY2VzczpmdW5jdGlvbihlLHQsbil7cmV0dXJuIHZvaWQgMD09PXR8fHQmJlwic3RyaW5nXCI9PXR5cGVvZiB0JiZ2b2lkIDA9PT1uP3RoaXMuZ2V0KGUsdCk6KHRoaXMuc2V0KGUsdCxuKSx2b2lkIDAhPT1uP246dCl9LHJlbW92ZTpmdW5jdGlvbihlLHQpe3ZhciBuLHI9ZVt0aGlzLmV4cGFuZG9dO2lmKHZvaWQgMCE9PXIpe2lmKHZvaWQgMCE9PXQpe249KHQ9QXJyYXkuaXNBcnJheSh0KT90Lm1hcChGKToodD1GKHQpKWluIHI/W3RdOnQubWF0Y2goRCl8fFtdKS5sZW5ndGg7d2hpbGUobi0tKWRlbGV0ZSByW3Rbbl1dfSh2b2lkIDA9PT10fHxjZS5pc0VtcHR5T2JqZWN0KHIpKSYmKGUubm9kZVR5cGU/ZVt0aGlzLmV4cGFuZG9dPXZvaWQgMDpkZWxldGUgZVt0aGlzLmV4cGFuZG9dKX19LGhhc0RhdGE6ZnVuY3Rpb24oZSl7dmFyIHQ9ZVt0aGlzLmV4cGFuZG9dO3JldHVybiB2b2lkIDAhPT10JiYhY2UuaXNFbXB0eU9iamVjdCh0KX19O3ZhciBfPW5ldyBCLHo9bmV3IEIsWD0vXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sVT0vW0EtWl0vZztmdW5jdGlvbiBWKGUsdCxuKXt2YXIgcixpO2lmKHZvaWQgMD09PW4mJjE9PT1lLm5vZGVUeXBlKWlmKHI9XCJkYXRhLVwiK3QucmVwbGFjZShVLFwiLSQmXCIpLnRvTG93ZXJDYXNlKCksXCJzdHJpbmdcIj09dHlwZW9mKG49ZS5nZXRBdHRyaWJ1dGUocikpKXt0cnl7bj1cInRydWVcIj09PShpPW4pfHxcImZhbHNlXCIhPT1pJiYoXCJudWxsXCI9PT1pP251bGw6aT09PStpK1wiXCI/K2k6WC50ZXN0KGkpP0pTT04ucGFyc2UoaSk6aSl9Y2F0Y2goZSl7fXouc2V0KGUsdCxuKX1lbHNlIG49dm9pZCAwO3JldHVybiBufWNlLmV4dGVuZCh7aGFzRGF0YTpmdW5jdGlvbihlKXtyZXR1cm4gei5oYXNEYXRhKGUpfHxfLmhhc0RhdGEoZSl9LGRhdGE6ZnVuY3Rpb24oZSx0LG4pe3JldHVybiB6LmFjY2VzcyhlLHQsbil9LHJlbW92ZURhdGE6ZnVuY3Rpb24oZSx0KXt6LnJlbW92ZShlLHQpfSxfZGF0YTpmdW5jdGlvbihlLHQsbil7cmV0dXJuIF8uYWNjZXNzKGUsdCxuKX0sX3JlbW92ZURhdGE6ZnVuY3Rpb24oZSx0KXtfLnJlbW92ZShlLHQpfX0pLGNlLmZuLmV4dGVuZCh7ZGF0YTpmdW5jdGlvbihuLGUpe3ZhciB0LHIsaSxvPXRoaXNbMF0sYT1vJiZvLmF0dHJpYnV0ZXM7aWYodm9pZCAwPT09bil7aWYodGhpcy5sZW5ndGgmJihpPXouZ2V0KG8pLDE9PT1vLm5vZGVUeXBlJiYhXy5nZXQobyxcImhhc0RhdGFBdHRyc1wiKSkpe3Q9YS5sZW5ndGg7d2hpbGUodC0tKWFbdF0mJjA9PT0ocj1hW3RdLm5hbWUpLmluZGV4T2YoXCJkYXRhLVwiKSYmKHI9RihyLnNsaWNlKDUpKSxWKG8scixpW3JdKSk7Xy5zZXQobyxcImhhc0RhdGFBdHRyc1wiLCEwKX1yZXR1cm4gaX1yZXR1cm5cIm9iamVjdFwiPT10eXBlb2Ygbj90aGlzLmVhY2goZnVuY3Rpb24oKXt6LnNldCh0aGlzLG4pfSk6TSh0aGlzLGZ1bmN0aW9uKGUpe3ZhciB0O2lmKG8mJnZvaWQgMD09PWUpcmV0dXJuIHZvaWQgMCE9PSh0PXouZ2V0KG8sbikpP3Q6dm9pZCAwIT09KHQ9VihvLG4pKT90OnZvaWQgMDt0aGlzLmVhY2goZnVuY3Rpb24oKXt6LnNldCh0aGlzLG4sZSl9KX0sbnVsbCxlLDE8YXJndW1lbnRzLmxlbmd0aCxudWxsLCEwKX0scmVtb3ZlRGF0YTpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7ei5yZW1vdmUodGhpcyxlKX0pfX0pLGNlLmV4dGVuZCh7cXVldWU6ZnVuY3Rpb24oZSx0LG4pe3ZhciByO2lmKGUpcmV0dXJuIHQ9KHR8fFwiZnhcIikrXCJxdWV1ZVwiLHI9Xy5nZXQoZSx0KSxuJiYoIXJ8fEFycmF5LmlzQXJyYXkobik/cj1fLmFjY2VzcyhlLHQsY2UubWFrZUFycmF5KG4pKTpyLnB1c2gobikpLHJ8fFtdfSxkZXF1ZXVlOmZ1bmN0aW9uKGUsdCl7dD10fHxcImZ4XCI7dmFyIG49Y2UucXVldWUoZSx0KSxyPW4ubGVuZ3RoLGk9bi5zaGlmdCgpLG89Y2UuX3F1ZXVlSG9va3MoZSx0KTtcImlucHJvZ3Jlc3NcIj09PWkmJihpPW4uc2hpZnQoKSxyLS0pLGkmJihcImZ4XCI9PT10JiZuLnVuc2hpZnQoXCJpbnByb2dyZXNzXCIpLGRlbGV0ZSBvLnN0b3AsaS5jYWxsKGUsZnVuY3Rpb24oKXtjZS5kZXF1ZXVlKGUsdCl9LG8pKSwhciYmbyYmby5lbXB0eS5maXJlKCl9LF9xdWV1ZUhvb2tzOmZ1bmN0aW9uKGUsdCl7dmFyIG49dCtcInF1ZXVlSG9va3NcIjtyZXR1cm4gXy5nZXQoZSxuKXx8Xy5hY2Nlc3MoZSxuLHtlbXB0eTpjZS5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKS5hZGQoZnVuY3Rpb24oKXtfLnJlbW92ZShlLFt0K1wicXVldWVcIixuXSl9KX0pfX0pLGNlLmZuLmV4dGVuZCh7cXVldWU6ZnVuY3Rpb24odCxuKXt2YXIgZT0yO3JldHVyblwic3RyaW5nXCIhPXR5cGVvZiB0JiYobj10LHQ9XCJmeFwiLGUtLSksYXJndW1lbnRzLmxlbmd0aDxlP2NlLnF1ZXVlKHRoaXNbMF0sdCk6dm9pZCAwPT09bj90aGlzOnRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBlPWNlLnF1ZXVlKHRoaXMsdCxuKTtjZS5fcXVldWVIb29rcyh0aGlzLHQpLFwiZnhcIj09PXQmJlwiaW5wcm9ncmVzc1wiIT09ZVswXSYmY2UuZGVxdWV1ZSh0aGlzLHQpfSl9LGRlcXVldWU6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe2NlLmRlcXVldWUodGhpcyxlKX0pfSxjbGVhclF1ZXVlOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnF1ZXVlKGV8fFwiZnhcIixbXSl9LHByb21pc2U6ZnVuY3Rpb24oZSx0KXt2YXIgbixyPTEsaT1jZS5EZWZlcnJlZCgpLG89dGhpcyxhPXRoaXMubGVuZ3RoLHM9ZnVuY3Rpb24oKXstLXJ8fGkucmVzb2x2ZVdpdGgobyxbb10pfTtcInN0cmluZ1wiIT10eXBlb2YgZSYmKHQ9ZSxlPXZvaWQgMCksZT1lfHxcImZ4XCI7d2hpbGUoYS0tKShuPV8uZ2V0KG9bYV0sZStcInF1ZXVlSG9va3NcIikpJiZuLmVtcHR5JiYocisrLG4uZW1wdHkuYWRkKHMpKTtyZXR1cm4gcygpLGkucHJvbWlzZSh0KX19KTt2YXIgRz0vWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLy5zb3VyY2UsWT1uZXcgUmVnRXhwKFwiXig/OihbKy1dKT18KShcIitHK1wiKShbYS16JV0qKSRcIixcImlcIiksUT1bXCJUb3BcIixcIlJpZ2h0XCIsXCJCb3R0b21cIixcIkxlZnRcIl0sSj1DLmRvY3VtZW50RWxlbWVudCxLPWZ1bmN0aW9uKGUpe3JldHVybiBjZS5jb250YWlucyhlLm93bmVyRG9jdW1lbnQsZSl9LFo9e2NvbXBvc2VkOiEwfTtKLmdldFJvb3ROb2RlJiYoSz1mdW5jdGlvbihlKXtyZXR1cm4gY2UuY29udGFpbnMoZS5vd25lckRvY3VtZW50LGUpfHxlLmdldFJvb3ROb2RlKFopPT09ZS5vd25lckRvY3VtZW50fSk7dmFyIGVlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuXCJub25lXCI9PT0oZT10fHxlKS5zdHlsZS5kaXNwbGF5fHxcIlwiPT09ZS5zdHlsZS5kaXNwbGF5JiZLKGUpJiZcIm5vbmVcIj09PWNlLmNzcyhlLFwiZGlzcGxheVwiKX07ZnVuY3Rpb24gdGUoZSx0LG4scil7dmFyIGksbyxhPTIwLHM9cj9mdW5jdGlvbigpe3JldHVybiByLmN1cigpfTpmdW5jdGlvbigpe3JldHVybiBjZS5jc3MoZSx0LFwiXCIpfSx1PXMoKSxsPW4mJm5bM118fChjZS5jc3NOdW1iZXJbdF0/XCJcIjpcInB4XCIpLGM9ZS5ub2RlVHlwZSYmKGNlLmNzc051bWJlclt0XXx8XCJweFwiIT09bCYmK3UpJiZZLmV4ZWMoY2UuY3NzKGUsdCkpO2lmKGMmJmNbM10hPT1sKXt1Lz0yLGw9bHx8Y1szXSxjPSt1fHwxO3doaWxlKGEtLSljZS5zdHlsZShlLHQsYytsKSwoMS1vKSooMS0obz1zKCkvdXx8LjUpKTw9MCYmKGE9MCksYy89bztjKj0yLGNlLnN0eWxlKGUsdCxjK2wpLG49bnx8W119cmV0dXJuIG4mJihjPStjfHwrdXx8MCxpPW5bMV0/YysoblsxXSsxKSpuWzJdOituWzJdLHImJihyLnVuaXQ9bCxyLnN0YXJ0PWMsci5lbmQ9aSkpLGl9dmFyIG5lPXt9O2Z1bmN0aW9uIHJlKGUsdCl7Zm9yKHZhciBuLHIsaSxvLGEscyx1LGw9W10sYz0wLGY9ZS5sZW5ndGg7YzxmO2MrKykocj1lW2NdKS5zdHlsZSYmKG49ci5zdHlsZS5kaXNwbGF5LHQ/KFwibm9uZVwiPT09biYmKGxbY109Xy5nZXQocixcImRpc3BsYXlcIil8fG51bGwsbFtjXXx8KHIuc3R5bGUuZGlzcGxheT1cIlwiKSksXCJcIj09PXIuc3R5bGUuZGlzcGxheSYmZWUocikmJihsW2NdPSh1PWE9bz12b2lkIDAsYT0oaT1yKS5vd25lckRvY3VtZW50LHM9aS5ub2RlTmFtZSwodT1uZVtzXSl8fChvPWEuYm9keS5hcHBlbmRDaGlsZChhLmNyZWF0ZUVsZW1lbnQocykpLHU9Y2UuY3NzKG8sXCJkaXNwbGF5XCIpLG8ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChvKSxcIm5vbmVcIj09PXUmJih1PVwiYmxvY2tcIiksbmVbc109dSkpKSk6XCJub25lXCIhPT1uJiYobFtjXT1cIm5vbmVcIixfLnNldChyLFwiZGlzcGxheVwiLG4pKSk7Zm9yKGM9MDtjPGY7YysrKW51bGwhPWxbY10mJihlW2NdLnN0eWxlLmRpc3BsYXk9bFtjXSk7cmV0dXJuIGV9Y2UuZm4uZXh0ZW5kKHtzaG93OmZ1bmN0aW9uKCl7cmV0dXJuIHJlKHRoaXMsITApfSxoaWRlOmZ1bmN0aW9uKCl7cmV0dXJuIHJlKHRoaXMpfSx0b2dnbGU6ZnVuY3Rpb24oZSl7cmV0dXJuXCJib29sZWFuXCI9PXR5cGVvZiBlP2U/dGhpcy5zaG93KCk6dGhpcy5oaWRlKCk6dGhpcy5lYWNoKGZ1bmN0aW9uKCl7ZWUodGhpcyk/Y2UodGhpcykuc2hvdygpOmNlKHRoaXMpLmhpZGUoKX0pfX0pO3ZhciB4ZSxiZSx3ZT0vXig/OmNoZWNrYm94fHJhZGlvKSQvaSxUZT0vPChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSopL2ksQ2U9L14kfF5tb2R1bGUkfFxcLyg/OmphdmF8ZWNtYSlzY3JpcHQvaTt4ZT1DLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKS5hcHBlbmRDaGlsZChDLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikpLChiZT1DLmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKSkuc2V0QXR0cmlidXRlKFwidHlwZVwiLFwicmFkaW9cIiksYmUuc2V0QXR0cmlidXRlKFwiY2hlY2tlZFwiLFwiY2hlY2tlZFwiKSxiZS5zZXRBdHRyaWJ1dGUoXCJuYW1lXCIsXCJ0XCIpLHhlLmFwcGVuZENoaWxkKGJlKSxsZS5jaGVja0Nsb25lPXhlLmNsb25lTm9kZSghMCkuY2xvbmVOb2RlKCEwKS5sYXN0Q2hpbGQuY2hlY2tlZCx4ZS5pbm5lckhUTUw9XCI8dGV4dGFyZWE+eDwvdGV4dGFyZWE+XCIsbGUubm9DbG9uZUNoZWNrZWQ9ISF4ZS5jbG9uZU5vZGUoITApLmxhc3RDaGlsZC5kZWZhdWx0VmFsdWUseGUuaW5uZXJIVE1MPVwiPG9wdGlvbj48L29wdGlvbj5cIixsZS5vcHRpb249ISF4ZS5sYXN0Q2hpbGQ7dmFyIGtlPXt0aGVhZDpbMSxcIjx0YWJsZT5cIixcIjwvdGFibGU+XCJdLGNvbDpbMixcIjx0YWJsZT48Y29sZ3JvdXA+XCIsXCI8L2NvbGdyb3VwPjwvdGFibGU+XCJdLHRyOlsyLFwiPHRhYmxlPjx0Ym9keT5cIixcIjwvdGJvZHk+PC90YWJsZT5cIl0sdGQ6WzMsXCI8dGFibGU+PHRib2R5Pjx0cj5cIixcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiXSxfZGVmYXVsdDpbMCxcIlwiLFwiXCJdfTtmdW5jdGlvbiBTZShlLHQpe3ZhciBuO3JldHVybiBuPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBlLmdldEVsZW1lbnRzQnlUYWdOYW1lP2UuZ2V0RWxlbWVudHNCeVRhZ05hbWUodHx8XCIqXCIpOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBlLnF1ZXJ5U2VsZWN0b3JBbGw/ZS5xdWVyeVNlbGVjdG9yQWxsKHR8fFwiKlwiKTpbXSx2b2lkIDA9PT10fHx0JiZmZShlLHQpP2NlLm1lcmdlKFtlXSxuKTpufWZ1bmN0aW9uIEVlKGUsdCl7Zm9yKHZhciBuPTAscj1lLmxlbmd0aDtuPHI7bisrKV8uc2V0KGVbbl0sXCJnbG9iYWxFdmFsXCIsIXR8fF8uZ2V0KHRbbl0sXCJnbG9iYWxFdmFsXCIpKX1rZS50Ym9keT1rZS50Zm9vdD1rZS5jb2xncm91cD1rZS5jYXB0aW9uPWtlLnRoZWFkLGtlLnRoPWtlLnRkLGxlLm9wdGlvbnx8KGtlLm9wdGdyb3VwPWtlLm9wdGlvbj1bMSxcIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz5cIixcIjwvc2VsZWN0PlwiXSk7dmFyIGplPS88fCYjP1xcdys7LztmdW5jdGlvbiBBZShlLHQsbixyLGkpe2Zvcih2YXIgbyxhLHMsdSxsLGMsZj10LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxwPVtdLGQ9MCxoPWUubGVuZ3RoO2Q8aDtkKyspaWYoKG89ZVtkXSl8fDA9PT1vKWlmKFwib2JqZWN0XCI9PT14KG8pKWNlLm1lcmdlKHAsby5ub2RlVHlwZT9bb106byk7ZWxzZSBpZihqZS50ZXN0KG8pKXthPWF8fGYuYXBwZW5kQ2hpbGQodC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpKSxzPShUZS5leGVjKG8pfHxbXCJcIixcIlwiXSlbMV0udG9Mb3dlckNhc2UoKSx1PWtlW3NdfHxrZS5fZGVmYXVsdCxhLmlubmVySFRNTD11WzFdK2NlLmh0bWxQcmVmaWx0ZXIobykrdVsyXSxjPXVbMF07d2hpbGUoYy0tKWE9YS5sYXN0Q2hpbGQ7Y2UubWVyZ2UocCxhLmNoaWxkTm9kZXMpLChhPWYuZmlyc3RDaGlsZCkudGV4dENvbnRlbnQ9XCJcIn1lbHNlIHAucHVzaCh0LmNyZWF0ZVRleHROb2RlKG8pKTtmLnRleHRDb250ZW50PVwiXCIsZD0wO3doaWxlKG89cFtkKytdKWlmKHImJi0xPGNlLmluQXJyYXkobyxyKSlpJiZpLnB1c2gobyk7ZWxzZSBpZihsPUsobyksYT1TZShmLmFwcGVuZENoaWxkKG8pLFwic2NyaXB0XCIpLGwmJkVlKGEpLG4pe2M9MDt3aGlsZShvPWFbYysrXSlDZS50ZXN0KG8udHlwZXx8XCJcIikmJm4ucHVzaChvKX1yZXR1cm4gZn12YXIgRGU9L14oW14uXSopKD86XFwuKC4rKXwpLztmdW5jdGlvbiBOZSgpe3JldHVybiEwfWZ1bmN0aW9uIHFlKCl7cmV0dXJuITF9ZnVuY3Rpb24gTGUoZSx0LG4scixpLG8pe3ZhciBhLHM7aWYoXCJvYmplY3RcIj09dHlwZW9mIHQpe2ZvcihzIGluXCJzdHJpbmdcIiE9dHlwZW9mIG4mJihyPXJ8fG4sbj12b2lkIDApLHQpTGUoZSxzLG4scix0W3NdLG8pO3JldHVybiBlfWlmKG51bGw9PXImJm51bGw9PWk/KGk9bixyPW49dm9pZCAwKTpudWxsPT1pJiYoXCJzdHJpbmdcIj09dHlwZW9mIG4/KGk9cixyPXZvaWQgMCk6KGk9cixyPW4sbj12b2lkIDApKSwhMT09PWkpaT1xZTtlbHNlIGlmKCFpKXJldHVybiBlO3JldHVybiAxPT09byYmKGE9aSwoaT1mdW5jdGlvbihlKXtyZXR1cm4gY2UoKS5vZmYoZSksYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9KS5ndWlkPWEuZ3VpZHx8KGEuZ3VpZD1jZS5ndWlkKyspKSxlLmVhY2goZnVuY3Rpb24oKXtjZS5ldmVudC5hZGQodGhpcyx0LGkscixuKX0pfWZ1bmN0aW9uIEhlKGUscix0KXt0PyhfLnNldChlLHIsITEpLGNlLmV2ZW50LmFkZChlLHIse25hbWVzcGFjZTohMSxoYW5kbGVyOmZ1bmN0aW9uKGUpe3ZhciB0LG49Xy5nZXQodGhpcyxyKTtpZigxJmUuaXNUcmlnZ2VyJiZ0aGlzW3JdKXtpZihuKShjZS5ldmVudC5zcGVjaWFsW3JdfHx7fSkuZGVsZWdhdGVUeXBlJiZlLnN0b3BQcm9wYWdhdGlvbigpO2Vsc2UgaWYobj1hZS5jYWxsKGFyZ3VtZW50cyksXy5zZXQodGhpcyxyLG4pLHRoaXNbcl0oKSx0PV8uZ2V0KHRoaXMsciksXy5zZXQodGhpcyxyLCExKSxuIT09dClyZXR1cm4gZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKSxlLnByZXZlbnREZWZhdWx0KCksdH1lbHNlIG4mJihfLnNldCh0aGlzLHIsY2UuZXZlbnQudHJpZ2dlcihuWzBdLG4uc2xpY2UoMSksdGhpcykpLGUuc3RvcFByb3BhZ2F0aW9uKCksZS5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZD1OZSl9fSkpOnZvaWQgMD09PV8uZ2V0KGUscikmJmNlLmV2ZW50LmFkZChlLHIsTmUpfWNlLmV2ZW50PXtnbG9iYWw6e30sYWRkOmZ1bmN0aW9uKHQsZSxuLHIsaSl7dmFyIG8sYSxzLHUsbCxjLGYscCxkLGgsZyx2PV8uZ2V0KHQpO2lmKCQodCkpe24uaGFuZGxlciYmKG49KG89bikuaGFuZGxlcixpPW8uc2VsZWN0b3IpLGkmJmNlLmZpbmQubWF0Y2hlc1NlbGVjdG9yKEosaSksbi5ndWlkfHwobi5ndWlkPWNlLmd1aWQrKyksKHU9di5ldmVudHMpfHwodT12LmV2ZW50cz1PYmplY3QuY3JlYXRlKG51bGwpKSwoYT12LmhhbmRsZSl8fChhPXYuaGFuZGxlPWZ1bmN0aW9uKGUpe3JldHVyblwidW5kZWZpbmVkXCIhPXR5cGVvZiBjZSYmY2UuZXZlbnQudHJpZ2dlcmVkIT09ZS50eXBlP2NlLmV2ZW50LmRpc3BhdGNoLmFwcGx5KHQsYXJndW1lbnRzKTp2b2lkIDB9KSxsPShlPShlfHxcIlwiKS5tYXRjaChEKXx8W1wiXCJdKS5sZW5ndGg7d2hpbGUobC0tKWQ9Zz0ocz1EZS5leGVjKGVbbF0pfHxbXSlbMV0saD0oc1syXXx8XCJcIikuc3BsaXQoXCIuXCIpLnNvcnQoKSxkJiYoZj1jZS5ldmVudC5zcGVjaWFsW2RdfHx7fSxkPShpP2YuZGVsZWdhdGVUeXBlOmYuYmluZFR5cGUpfHxkLGY9Y2UuZXZlbnQuc3BlY2lhbFtkXXx8e30sYz1jZS5leHRlbmQoe3R5cGU6ZCxvcmlnVHlwZTpnLGRhdGE6cixoYW5kbGVyOm4sZ3VpZDpuLmd1aWQsc2VsZWN0b3I6aSxuZWVkc0NvbnRleHQ6aSYmY2UuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQudGVzdChpKSxuYW1lc3BhY2U6aC5qb2luKFwiLlwiKX0sbyksKHA9dVtkXSl8fCgocD11W2RdPVtdKS5kZWxlZ2F0ZUNvdW50PTAsZi5zZXR1cCYmITEhPT1mLnNldHVwLmNhbGwodCxyLGgsYSl8fHQuYWRkRXZlbnRMaXN0ZW5lciYmdC5hZGRFdmVudExpc3RlbmVyKGQsYSkpLGYuYWRkJiYoZi5hZGQuY2FsbCh0LGMpLGMuaGFuZGxlci5ndWlkfHwoYy5oYW5kbGVyLmd1aWQ9bi5ndWlkKSksaT9wLnNwbGljZShwLmRlbGVnYXRlQ291bnQrKywwLGMpOnAucHVzaChjKSxjZS5ldmVudC5nbG9iYWxbZF09ITApfX0scmVtb3ZlOmZ1bmN0aW9uKGUsdCxuLHIsaSl7dmFyIG8sYSxzLHUsbCxjLGYscCxkLGgsZyx2PV8uaGFzRGF0YShlKSYmXy5nZXQoZSk7aWYodiYmKHU9di5ldmVudHMpKXtsPSh0PSh0fHxcIlwiKS5tYXRjaChEKXx8W1wiXCJdKS5sZW5ndGg7d2hpbGUobC0tKWlmKGQ9Zz0ocz1EZS5leGVjKHRbbF0pfHxbXSlbMV0saD0oc1syXXx8XCJcIikuc3BsaXQoXCIuXCIpLnNvcnQoKSxkKXtmPWNlLmV2ZW50LnNwZWNpYWxbZF18fHt9LHA9dVtkPShyP2YuZGVsZWdhdGVUeXBlOmYuYmluZFR5cGUpfHxkXXx8W10scz1zWzJdJiZuZXcgUmVnRXhwKFwiKF58XFxcXC4pXCIraC5qb2luKFwiXFxcXC4oPzouKlxcXFwufClcIikrXCIoXFxcXC58JClcIiksYT1vPXAubGVuZ3RoO3doaWxlKG8tLSljPXBbb10sIWkmJmchPT1jLm9yaWdUeXBlfHxuJiZuLmd1aWQhPT1jLmd1aWR8fHMmJiFzLnRlc3QoYy5uYW1lc3BhY2UpfHxyJiZyIT09Yy5zZWxlY3RvciYmKFwiKipcIiE9PXJ8fCFjLnNlbGVjdG9yKXx8KHAuc3BsaWNlKG8sMSksYy5zZWxlY3RvciYmcC5kZWxlZ2F0ZUNvdW50LS0sZi5yZW1vdmUmJmYucmVtb3ZlLmNhbGwoZSxjKSk7YSYmIXAubGVuZ3RoJiYoZi50ZWFyZG93biYmITEhPT1mLnRlYXJkb3duLmNhbGwoZSxoLHYuaGFuZGxlKXx8Y2UucmVtb3ZlRXZlbnQoZSxkLHYuaGFuZGxlKSxkZWxldGUgdVtkXSl9ZWxzZSBmb3IoZCBpbiB1KWNlLmV2ZW50LnJlbW92ZShlLGQrdFtsXSxuLHIsITApO2NlLmlzRW1wdHlPYmplY3QodSkmJl8ucmVtb3ZlKGUsXCJoYW5kbGUgZXZlbnRzXCIpfX0sZGlzcGF0Y2g6ZnVuY3Rpb24oZSl7dmFyIHQsbixyLGksbyxhLHM9bmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpLHU9Y2UuZXZlbnQuZml4KGUpLGw9KF8uZ2V0KHRoaXMsXCJldmVudHNcIil8fE9iamVjdC5jcmVhdGUobnVsbCkpW3UudHlwZV18fFtdLGM9Y2UuZXZlbnQuc3BlY2lhbFt1LnR5cGVdfHx7fTtmb3Ioc1swXT11LHQ9MTt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKXNbdF09YXJndW1lbnRzW3RdO2lmKHUuZGVsZWdhdGVUYXJnZXQ9dGhpcywhYy5wcmVEaXNwYXRjaHx8ITEhPT1jLnByZURpc3BhdGNoLmNhbGwodGhpcyx1KSl7YT1jZS5ldmVudC5oYW5kbGVycy5jYWxsKHRoaXMsdSxsKSx0PTA7d2hpbGUoKGk9YVt0KytdKSYmIXUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSl7dS5jdXJyZW50VGFyZ2V0PWkuZWxlbSxuPTA7d2hpbGUoKG89aS5oYW5kbGVyc1tuKytdKSYmIXUuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSl1LnJuYW1lc3BhY2UmJiExIT09by5uYW1lc3BhY2UmJiF1LnJuYW1lc3BhY2UudGVzdChvLm5hbWVzcGFjZSl8fCh1LmhhbmRsZU9iaj1vLHUuZGF0YT1vLmRhdGEsdm9pZCAwIT09KHI9KChjZS5ldmVudC5zcGVjaWFsW28ub3JpZ1R5cGVdfHx7fSkuaGFuZGxlfHxvLmhhbmRsZXIpLmFwcGx5KGkuZWxlbSxzKSkmJiExPT09KHUucmVzdWx0PXIpJiYodS5wcmV2ZW50RGVmYXVsdCgpLHUuc3RvcFByb3BhZ2F0aW9uKCkpKX1yZXR1cm4gYy5wb3N0RGlzcGF0Y2gmJmMucG9zdERpc3BhdGNoLmNhbGwodGhpcyx1KSx1LnJlc3VsdH19LGhhbmRsZXJzOmZ1bmN0aW9uKGUsdCl7dmFyIG4scixpLG8sYSxzPVtdLHU9dC5kZWxlZ2F0ZUNvdW50LGw9ZS50YXJnZXQ7aWYodSYmbC5ub2RlVHlwZSYmIShcImNsaWNrXCI9PT1lLnR5cGUmJjE8PWUuYnV0dG9uKSlmb3IoO2whPT10aGlzO2w9bC5wYXJlbnROb2RlfHx0aGlzKWlmKDE9PT1sLm5vZGVUeXBlJiYoXCJjbGlja1wiIT09ZS50eXBlfHwhMCE9PWwuZGlzYWJsZWQpKXtmb3Iobz1bXSxhPXt9LG49MDtuPHU7bisrKXZvaWQgMD09PWFbaT0ocj10W25dKS5zZWxlY3RvcitcIiBcIl0mJihhW2ldPXIubmVlZHNDb250ZXh0Py0xPGNlKGksdGhpcykuaW5kZXgobCk6Y2UuZmluZChpLHRoaXMsbnVsbCxbbF0pLmxlbmd0aCksYVtpXSYmby5wdXNoKHIpO28ubGVuZ3RoJiZzLnB1c2goe2VsZW06bCxoYW5kbGVyczpvfSl9cmV0dXJuIGw9dGhpcyx1PHQubGVuZ3RoJiZzLnB1c2goe2VsZW06bCxoYW5kbGVyczp0LnNsaWNlKHUpfSksc30sYWRkUHJvcDpmdW5jdGlvbih0LGUpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShjZS5FdmVudC5wcm90b3R5cGUsdCx7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsZ2V0OnYoZSk/ZnVuY3Rpb24oKXtpZih0aGlzLm9yaWdpbmFsRXZlbnQpcmV0dXJuIGUodGhpcy5vcmlnaW5hbEV2ZW50KX06ZnVuY3Rpb24oKXtpZih0aGlzLm9yaWdpbmFsRXZlbnQpcmV0dXJuIHRoaXMub3JpZ2luYWxFdmVudFt0XX0sc2V0OmZ1bmN0aW9uKGUpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLHQse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwLHZhbHVlOmV9KX19KX0sZml4OmZ1bmN0aW9uKGUpe3JldHVybiBlW2NlLmV4cGFuZG9dP2U6bmV3IGNlLkV2ZW50KGUpfSxzcGVjaWFsOntsb2FkOntub0J1YmJsZTohMH0sY2xpY2s6e3NldHVwOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXN8fGU7cmV0dXJuIHdlLnRlc3QodC50eXBlKSYmdC5jbGljayYmZmUodCxcImlucHV0XCIpJiZIZSh0LFwiY2xpY2tcIiwhMCksITF9LHRyaWdnZXI6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpc3x8ZTtyZXR1cm4gd2UudGVzdCh0LnR5cGUpJiZ0LmNsaWNrJiZmZSh0LFwiaW5wdXRcIikmJkhlKHQsXCJjbGlja1wiKSwhMH0sX2RlZmF1bHQ6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS50YXJnZXQ7cmV0dXJuIHdlLnRlc3QodC50eXBlKSYmdC5jbGljayYmZmUodCxcImlucHV0XCIpJiZfLmdldCh0LFwiY2xpY2tcIil8fGZlKHQsXCJhXCIpfX0sYmVmb3JldW5sb2FkOntwb3N0RGlzcGF0Y2g6ZnVuY3Rpb24oZSl7dm9pZCAwIT09ZS5yZXN1bHQmJmUub3JpZ2luYWxFdmVudCYmKGUub3JpZ2luYWxFdmVudC5yZXR1cm5WYWx1ZT1lLnJlc3VsdCl9fX19LGNlLnJlbW92ZUV2ZW50PWZ1bmN0aW9uKGUsdCxuKXtlLnJlbW92ZUV2ZW50TGlzdGVuZXImJmUucmVtb3ZlRXZlbnRMaXN0ZW5lcih0LG4pfSxjZS5FdmVudD1mdW5jdGlvbihlLHQpe2lmKCEodGhpcyBpbnN0YW5jZW9mIGNlLkV2ZW50KSlyZXR1cm4gbmV3IGNlLkV2ZW50KGUsdCk7ZSYmZS50eXBlPyh0aGlzLm9yaWdpbmFsRXZlbnQ9ZSx0aGlzLnR5cGU9ZS50eXBlLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPWUuZGVmYXVsdFByZXZlbnRlZHx8dm9pZCAwPT09ZS5kZWZhdWx0UHJldmVudGVkJiYhMT09PWUucmV0dXJuVmFsdWU/TmU6cWUsdGhpcy50YXJnZXQ9ZS50YXJnZXQmJjM9PT1lLnRhcmdldC5ub2RlVHlwZT9lLnRhcmdldC5wYXJlbnROb2RlOmUudGFyZ2V0LHRoaXMuY3VycmVudFRhcmdldD1lLmN1cnJlbnRUYXJnZXQsdGhpcy5yZWxhdGVkVGFyZ2V0PWUucmVsYXRlZFRhcmdldCk6dGhpcy50eXBlPWUsdCYmY2UuZXh0ZW5kKHRoaXMsdCksdGhpcy50aW1lU3RhbXA9ZSYmZS50aW1lU3RhbXB8fERhdGUubm93KCksdGhpc1tjZS5leHBhbmRvXT0hMH0sY2UuRXZlbnQucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpjZS5FdmVudCxpc0RlZmF1bHRQcmV2ZW50ZWQ6cWUsaXNQcm9wYWdhdGlvblN0b3BwZWQ6cWUsaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6cWUsaXNTaW11bGF0ZWQ6ITEscHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLm9yaWdpbmFsRXZlbnQ7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9TmUsZSYmIXRoaXMuaXNTaW11bGF0ZWQmJmUucHJldmVudERlZmF1bHQoKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5vcmlnaW5hbEV2ZW50O3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9TmUsZSYmIXRoaXMuaXNTaW11bGF0ZWQmJmUuc3RvcFByb3BhZ2F0aW9uKCl9LHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBlPXRoaXMub3JpZ2luYWxFdmVudDt0aGlzLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkPU5lLGUmJiF0aGlzLmlzU2ltdWxhdGVkJiZlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpLHRoaXMuc3RvcFByb3BhZ2F0aW9uKCl9fSxjZS5lYWNoKHthbHRLZXk6ITAsYnViYmxlczohMCxjYW5jZWxhYmxlOiEwLGNoYW5nZWRUb3VjaGVzOiEwLGN0cmxLZXk6ITAsZGV0YWlsOiEwLGV2ZW50UGhhc2U6ITAsbWV0YUtleTohMCxwYWdlWDohMCxwYWdlWTohMCxzaGlmdEtleTohMCx2aWV3OiEwLFwiY2hhclwiOiEwLGNvZGU6ITAsY2hhckNvZGU6ITAsa2V5OiEwLGtleUNvZGU6ITAsYnV0dG9uOiEwLGJ1dHRvbnM6ITAsY2xpZW50WDohMCxjbGllbnRZOiEwLG9mZnNldFg6ITAsb2Zmc2V0WTohMCxwb2ludGVySWQ6ITAscG9pbnRlclR5cGU6ITAsc2NyZWVuWDohMCxzY3JlZW5ZOiEwLHRhcmdldFRvdWNoZXM6ITAsdG9FbGVtZW50OiEwLHRvdWNoZXM6ITAsd2hpY2g6ITB9LGNlLmV2ZW50LmFkZFByb3ApLGNlLmVhY2goe2ZvY3VzOlwiZm9jdXNpblwiLGJsdXI6XCJmb2N1c291dFwifSxmdW5jdGlvbihyLGkpe2Z1bmN0aW9uIG8oZSl7aWYoQy5kb2N1bWVudE1vZGUpe3ZhciB0PV8uZ2V0KHRoaXMsXCJoYW5kbGVcIiksbj1jZS5ldmVudC5maXgoZSk7bi50eXBlPVwiZm9jdXNpblwiPT09ZS50eXBlP1wiZm9jdXNcIjpcImJsdXJcIixuLmlzU2ltdWxhdGVkPSEwLHQoZSksbi50YXJnZXQ9PT1uLmN1cnJlbnRUYXJnZXQmJnQobil9ZWxzZSBjZS5ldmVudC5zaW11bGF0ZShpLGUudGFyZ2V0LGNlLmV2ZW50LmZpeChlKSl9Y2UuZXZlbnQuc3BlY2lhbFtyXT17c2V0dXA6ZnVuY3Rpb24oKXt2YXIgZTtpZihIZSh0aGlzLHIsITApLCFDLmRvY3VtZW50TW9kZSlyZXR1cm4hMTsoZT1fLmdldCh0aGlzLGkpKXx8dGhpcy5hZGRFdmVudExpc3RlbmVyKGksbyksXy5zZXQodGhpcyxpLChlfHwwKSsxKX0sdHJpZ2dlcjpmdW5jdGlvbigpe3JldHVybiBIZSh0aGlzLHIpLCEwfSx0ZWFyZG93bjpmdW5jdGlvbigpe3ZhciBlO2lmKCFDLmRvY3VtZW50TW9kZSlyZXR1cm4hMTsoZT1fLmdldCh0aGlzLGkpLTEpP18uc2V0KHRoaXMsaSxlKToodGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKGksbyksXy5yZW1vdmUodGhpcyxpKSl9LF9kZWZhdWx0OmZ1bmN0aW9uKGUpe3JldHVybiBfLmdldChlLnRhcmdldCxyKX0sZGVsZWdhdGVUeXBlOml9LGNlLmV2ZW50LnNwZWNpYWxbaV09e3NldHVwOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5vd25lckRvY3VtZW50fHx0aGlzLmRvY3VtZW50fHx0aGlzLHQ9Qy5kb2N1bWVudE1vZGU/dGhpczplLG49Xy5nZXQodCxpKTtufHwoQy5kb2N1bWVudE1vZGU/dGhpcy5hZGRFdmVudExpc3RlbmVyKGksbyk6ZS5hZGRFdmVudExpc3RlbmVyKHIsbywhMCkpLF8uc2V0KHQsaSwobnx8MCkrMSl9LHRlYXJkb3duOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5vd25lckRvY3VtZW50fHx0aGlzLmRvY3VtZW50fHx0aGlzLHQ9Qy5kb2N1bWVudE1vZGU/dGhpczplLG49Xy5nZXQodCxpKS0xO24/Xy5zZXQodCxpLG4pOihDLmRvY3VtZW50TW9kZT90aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoaSxvKTplLnJlbW92ZUV2ZW50TGlzdGVuZXIocixvLCEwKSxfLnJlbW92ZSh0LGkpKX19fSksY2UuZWFjaCh7bW91c2VlbnRlcjpcIm1vdXNlb3ZlclwiLG1vdXNlbGVhdmU6XCJtb3VzZW91dFwiLHBvaW50ZXJlbnRlcjpcInBvaW50ZXJvdmVyXCIscG9pbnRlcmxlYXZlOlwicG9pbnRlcm91dFwifSxmdW5jdGlvbihlLGkpe2NlLmV2ZW50LnNwZWNpYWxbZV09e2RlbGVnYXRlVHlwZTppLGJpbmRUeXBlOmksaGFuZGxlOmZ1bmN0aW9uKGUpe3ZhciB0LG49ZS5yZWxhdGVkVGFyZ2V0LHI9ZS5oYW5kbGVPYmo7cmV0dXJuIG4mJihuPT09dGhpc3x8Y2UuY29udGFpbnModGhpcyxuKSl8fChlLnR5cGU9ci5vcmlnVHlwZSx0PXIuaGFuZGxlci5hcHBseSh0aGlzLGFyZ3VtZW50cyksZS50eXBlPWkpLHR9fX0pLGNlLmZuLmV4dGVuZCh7b246ZnVuY3Rpb24oZSx0LG4scil7cmV0dXJuIExlKHRoaXMsZSx0LG4scil9LG9uZTpmdW5jdGlvbihlLHQsbixyKXtyZXR1cm4gTGUodGhpcyxlLHQsbixyLDEpfSxvZmY6ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGk7aWYoZSYmZS5wcmV2ZW50RGVmYXVsdCYmZS5oYW5kbGVPYmopcmV0dXJuIHI9ZS5oYW5kbGVPYmosY2UoZS5kZWxlZ2F0ZVRhcmdldCkub2ZmKHIubmFtZXNwYWNlP3Iub3JpZ1R5cGUrXCIuXCIrci5uYW1lc3BhY2U6ci5vcmlnVHlwZSxyLnNlbGVjdG9yLHIuaGFuZGxlciksdGhpcztpZihcIm9iamVjdFwiPT10eXBlb2YgZSl7Zm9yKGkgaW4gZSl0aGlzLm9mZihpLHQsZVtpXSk7cmV0dXJuIHRoaXN9cmV0dXJuITEhPT10JiZcImZ1bmN0aW9uXCIhPXR5cGVvZiB0fHwobj10LHQ9dm9pZCAwKSwhMT09PW4mJihuPXFlKSx0aGlzLmVhY2goZnVuY3Rpb24oKXtjZS5ldmVudC5yZW1vdmUodGhpcyxlLG4sdCl9KX19KTt2YXIgT2U9LzxzY3JpcHR8PHN0eWxlfDxsaW5rL2ksUGU9L2NoZWNrZWRcXHMqKD86W149XXw9XFxzKi5jaGVja2VkLikvaSxNZT0vXlxccyo8IVxcW0NEQVRBXFxbfFxcXVxcXT5cXHMqJC9nO2Z1bmN0aW9uIFJlKGUsdCl7cmV0dXJuIGZlKGUsXCJ0YWJsZVwiKSYmZmUoMTEhPT10Lm5vZGVUeXBlP3Q6dC5maXJzdENoaWxkLFwidHJcIikmJmNlKGUpLmNoaWxkcmVuKFwidGJvZHlcIilbMF18fGV9ZnVuY3Rpb24gSWUoZSl7cmV0dXJuIGUudHlwZT0obnVsbCE9PWUuZ2V0QXR0cmlidXRlKFwidHlwZVwiKSkrXCIvXCIrZS50eXBlLGV9ZnVuY3Rpb24gV2UoZSl7cmV0dXJuXCJ0cnVlL1wiPT09KGUudHlwZXx8XCJcIikuc2xpY2UoMCw1KT9lLnR5cGU9ZS50eXBlLnNsaWNlKDUpOmUucmVtb3ZlQXR0cmlidXRlKFwidHlwZVwiKSxlfWZ1bmN0aW9uIEZlKGUsdCl7dmFyIG4scixpLG8sYSxzO2lmKDE9PT10Lm5vZGVUeXBlKXtpZihfLmhhc0RhdGEoZSkmJihzPV8uZ2V0KGUpLmV2ZW50cykpZm9yKGkgaW4gXy5yZW1vdmUodCxcImhhbmRsZSBldmVudHNcIikscylmb3Iobj0wLHI9c1tpXS5sZW5ndGg7bjxyO24rKyljZS5ldmVudC5hZGQodCxpLHNbaV1bbl0pO3ouaGFzRGF0YShlKSYmKG89ei5hY2Nlc3MoZSksYT1jZS5leHRlbmQoe30sbyksei5zZXQodCxhKSl9fWZ1bmN0aW9uICRlKG4scixpLG8pe3I9ZyhyKTt2YXIgZSx0LGEscyx1LGwsYz0wLGY9bi5sZW5ndGgscD1mLTEsZD1yWzBdLGg9dihkKTtpZihofHwxPGYmJlwic3RyaW5nXCI9PXR5cGVvZiBkJiYhbGUuY2hlY2tDbG9uZSYmUGUudGVzdChkKSlyZXR1cm4gbi5lYWNoKGZ1bmN0aW9uKGUpe3ZhciB0PW4uZXEoZSk7aCYmKHJbMF09ZC5jYWxsKHRoaXMsZSx0Lmh0bWwoKSkpLCRlKHQscixpLG8pfSk7aWYoZiYmKHQ9KGU9QWUocixuWzBdLm93bmVyRG9jdW1lbnQsITEsbixvKSkuZmlyc3RDaGlsZCwxPT09ZS5jaGlsZE5vZGVzLmxlbmd0aCYmKGU9dCksdHx8bykpe2ZvcihzPShhPWNlLm1hcChTZShlLFwic2NyaXB0XCIpLEllKSkubGVuZ3RoO2M8ZjtjKyspdT1lLGMhPT1wJiYodT1jZS5jbG9uZSh1LCEwLCEwKSxzJiZjZS5tZXJnZShhLFNlKHUsXCJzY3JpcHRcIikpKSxpLmNhbGwobltjXSx1LGMpO2lmKHMpZm9yKGw9YVthLmxlbmd0aC0xXS5vd25lckRvY3VtZW50LGNlLm1hcChhLFdlKSxjPTA7YzxzO2MrKyl1PWFbY10sQ2UudGVzdCh1LnR5cGV8fFwiXCIpJiYhXy5hY2Nlc3ModSxcImdsb2JhbEV2YWxcIikmJmNlLmNvbnRhaW5zKGwsdSkmJih1LnNyYyYmXCJtb2R1bGVcIiE9PSh1LnR5cGV8fFwiXCIpLnRvTG93ZXJDYXNlKCk/Y2UuX2V2YWxVcmwmJiF1Lm5vTW9kdWxlJiZjZS5fZXZhbFVybCh1LnNyYyx7bm9uY2U6dS5ub25jZXx8dS5nZXRBdHRyaWJ1dGUoXCJub25jZVwiKX0sbCk6bSh1LnRleHRDb250ZW50LnJlcGxhY2UoTWUsXCJcIiksdSxsKSl9cmV0dXJuIG59ZnVuY3Rpb24gQmUoZSx0LG4pe2Zvcih2YXIgcixpPXQ/Y2UuZmlsdGVyKHQsZSk6ZSxvPTA7bnVsbCE9KHI9aVtvXSk7bysrKW58fDEhPT1yLm5vZGVUeXBlfHxjZS5jbGVhbkRhdGEoU2UocikpLHIucGFyZW50Tm9kZSYmKG4mJksocikmJkVlKFNlKHIsXCJzY3JpcHRcIikpLHIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChyKSk7cmV0dXJuIGV9Y2UuZXh0ZW5kKHtodG1sUHJlZmlsdGVyOmZ1bmN0aW9uKGUpe3JldHVybiBlfSxjbG9uZTpmdW5jdGlvbihlLHQsbil7dmFyIHIsaSxvLGEscyx1LGwsYz1lLmNsb25lTm9kZSghMCksZj1LKGUpO2lmKCEobGUubm9DbG9uZUNoZWNrZWR8fDEhPT1lLm5vZGVUeXBlJiYxMSE9PWUubm9kZVR5cGV8fGNlLmlzWE1MRG9jKGUpKSlmb3IoYT1TZShjKSxyPTAsaT0obz1TZShlKSkubGVuZ3RoO3I8aTtyKyspcz1vW3JdLHU9YVtyXSx2b2lkIDAsXCJpbnB1dFwiPT09KGw9dS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKSYmd2UudGVzdChzLnR5cGUpP3UuY2hlY2tlZD1zLmNoZWNrZWQ6XCJpbnB1dFwiIT09bCYmXCJ0ZXh0YXJlYVwiIT09bHx8KHUuZGVmYXVsdFZhbHVlPXMuZGVmYXVsdFZhbHVlKTtpZih0KWlmKG4pZm9yKG89b3x8U2UoZSksYT1hfHxTZShjKSxyPTAsaT1vLmxlbmd0aDtyPGk7cisrKUZlKG9bcl0sYVtyXSk7ZWxzZSBGZShlLGMpO3JldHVybiAwPChhPVNlKGMsXCJzY3JpcHRcIikpLmxlbmd0aCYmRWUoYSwhZiYmU2UoZSxcInNjcmlwdFwiKSksY30sY2xlYW5EYXRhOmZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxuLHIsaT1jZS5ldmVudC5zcGVjaWFsLG89MDt2b2lkIDAhPT0obj1lW29dKTtvKyspaWYoJChuKSl7aWYodD1uW18uZXhwYW5kb10pe2lmKHQuZXZlbnRzKWZvcihyIGluIHQuZXZlbnRzKWlbcl0/Y2UuZXZlbnQucmVtb3ZlKG4scik6Y2UucmVtb3ZlRXZlbnQobixyLHQuaGFuZGxlKTtuW18uZXhwYW5kb109dm9pZCAwfW5bei5leHBhbmRvXSYmKG5bei5leHBhbmRvXT12b2lkIDApfX19KSxjZS5mbi5leHRlbmQoe2RldGFjaDpmdW5jdGlvbihlKXtyZXR1cm4gQmUodGhpcyxlLCEwKX0scmVtb3ZlOmZ1bmN0aW9uKGUpe3JldHVybiBCZSh0aGlzLGUpfSx0ZXh0OmZ1bmN0aW9uKGUpe3JldHVybiBNKHRoaXMsZnVuY3Rpb24oZSl7cmV0dXJuIHZvaWQgMD09PWU/Y2UudGV4dCh0aGlzKTp0aGlzLmVtcHR5KCkuZWFjaChmdW5jdGlvbigpezEhPT10aGlzLm5vZGVUeXBlJiYxMSE9PXRoaXMubm9kZVR5cGUmJjkhPT10aGlzLm5vZGVUeXBlfHwodGhpcy50ZXh0Q29udGVudD1lKX0pfSxudWxsLGUsYXJndW1lbnRzLmxlbmd0aCl9LGFwcGVuZDpmdW5jdGlvbigpe3JldHVybiAkZSh0aGlzLGFyZ3VtZW50cyxmdW5jdGlvbihlKXsxIT09dGhpcy5ub2RlVHlwZSYmMTEhPT10aGlzLm5vZGVUeXBlJiY5IT09dGhpcy5ub2RlVHlwZXx8UmUodGhpcyxlKS5hcHBlbmRDaGlsZChlKX0pfSxwcmVwZW5kOmZ1bmN0aW9uKCl7cmV0dXJuICRlKHRoaXMsYXJndW1lbnRzLGZ1bmN0aW9uKGUpe2lmKDE9PT10aGlzLm5vZGVUeXBlfHwxMT09PXRoaXMubm9kZVR5cGV8fDk9PT10aGlzLm5vZGVUeXBlKXt2YXIgdD1SZSh0aGlzLGUpO3QuaW5zZXJ0QmVmb3JlKGUsdC5maXJzdENoaWxkKX19KX0sYmVmb3JlOmZ1bmN0aW9uKCl7cmV0dXJuICRlKHRoaXMsYXJndW1lbnRzLGZ1bmN0aW9uKGUpe3RoaXMucGFyZW50Tm9kZSYmdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShlLHRoaXMpfSl9LGFmdGVyOmZ1bmN0aW9uKCl7cmV0dXJuICRlKHRoaXMsYXJndW1lbnRzLGZ1bmN0aW9uKGUpe3RoaXMucGFyZW50Tm9kZSYmdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShlLHRoaXMubmV4dFNpYmxpbmcpfSl9LGVtcHR5OmZ1bmN0aW9uKCl7Zm9yKHZhciBlLHQ9MDtudWxsIT0oZT10aGlzW3RdKTt0KyspMT09PWUubm9kZVR5cGUmJihjZS5jbGVhbkRhdGEoU2UoZSwhMSkpLGUudGV4dENvbnRlbnQ9XCJcIik7cmV0dXJuIHRoaXN9LGNsb25lOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU9bnVsbCE9ZSYmZSx0PW51bGw9PXQ/ZTp0LHRoaXMubWFwKGZ1bmN0aW9uKCl7cmV0dXJuIGNlLmNsb25lKHRoaXMsZSx0KX0pfSxodG1sOmZ1bmN0aW9uKGUpe3JldHVybiBNKHRoaXMsZnVuY3Rpb24oZSl7dmFyIHQ9dGhpc1swXXx8e30sbj0wLHI9dGhpcy5sZW5ndGg7aWYodm9pZCAwPT09ZSYmMT09PXQubm9kZVR5cGUpcmV0dXJuIHQuaW5uZXJIVE1MO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlJiYhT2UudGVzdChlKSYmIWtlWyhUZS5leGVjKGUpfHxbXCJcIixcIlwiXSlbMV0udG9Mb3dlckNhc2UoKV0pe2U9Y2UuaHRtbFByZWZpbHRlcihlKTt0cnl7Zm9yKDtuPHI7bisrKTE9PT0odD10aGlzW25dfHx7fSkubm9kZVR5cGUmJihjZS5jbGVhbkRhdGEoU2UodCwhMSkpLHQuaW5uZXJIVE1MPWUpO3Q9MH1jYXRjaChlKXt9fXQmJnRoaXMuZW1wdHkoKS5hcHBlbmQoZSl9LG51bGwsZSxhcmd1bWVudHMubGVuZ3RoKX0scmVwbGFjZVdpdGg6ZnVuY3Rpb24oKXt2YXIgbj1bXTtyZXR1cm4gJGUodGhpcyxhcmd1bWVudHMsZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5wYXJlbnROb2RlO2NlLmluQXJyYXkodGhpcyxuKTwwJiYoY2UuY2xlYW5EYXRhKFNlKHRoaXMpKSx0JiZ0LnJlcGxhY2VDaGlsZChlLHRoaXMpKX0sbil9fSksY2UuZWFjaCh7YXBwZW5kVG86XCJhcHBlbmRcIixwcmVwZW5kVG86XCJwcmVwZW5kXCIsaW5zZXJ0QmVmb3JlOlwiYmVmb3JlXCIsaW5zZXJ0QWZ0ZXI6XCJhZnRlclwiLHJlcGxhY2VBbGw6XCJyZXBsYWNlV2l0aFwifSxmdW5jdGlvbihlLGEpe2NlLmZuW2VdPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxuPVtdLHI9Y2UoZSksaT1yLmxlbmd0aC0xLG89MDtvPD1pO28rKyl0PW89PT1pP3RoaXM6dGhpcy5jbG9uZSghMCksY2UocltvXSlbYV0odCkscy5hcHBseShuLHQuZ2V0KCkpO3JldHVybiB0aGlzLnB1c2hTdGFjayhuKX19KTt2YXIgX2U9bmV3IFJlZ0V4cChcIl4oXCIrRytcIikoPyFweClbYS16JV0rJFwiLFwiaVwiKSx6ZT0vXi0tLyxYZT1mdW5jdGlvbihlKXt2YXIgdD1lLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7cmV0dXJuIHQmJnQub3BlbmVyfHwodD1pZSksdC5nZXRDb21wdXRlZFN0eWxlKGUpfSxVZT1mdW5jdGlvbihlLHQsbil7dmFyIHIsaSxvPXt9O2ZvcihpIGluIHQpb1tpXT1lLnN0eWxlW2ldLGUuc3R5bGVbaV09dFtpXTtmb3IoaSBpbiByPW4uY2FsbChlKSx0KWUuc3R5bGVbaV09b1tpXTtyZXR1cm4gcn0sVmU9bmV3IFJlZ0V4cChRLmpvaW4oXCJ8XCIpLFwiaVwiKTtmdW5jdGlvbiBHZShlLHQsbil7dmFyIHIsaSxvLGEscz16ZS50ZXN0KHQpLHU9ZS5zdHlsZTtyZXR1cm4obj1ufHxYZShlKSkmJihhPW4uZ2V0UHJvcGVydHlWYWx1ZSh0KXx8blt0XSxzJiZhJiYoYT1hLnJlcGxhY2UodmUsXCIkMVwiKXx8dm9pZCAwKSxcIlwiIT09YXx8SyhlKXx8KGE9Y2Uuc3R5bGUoZSx0KSksIWxlLnBpeGVsQm94U3R5bGVzKCkmJl9lLnRlc3QoYSkmJlZlLnRlc3QodCkmJihyPXUud2lkdGgsaT11Lm1pbldpZHRoLG89dS5tYXhXaWR0aCx1Lm1pbldpZHRoPXUubWF4V2lkdGg9dS53aWR0aD1hLGE9bi53aWR0aCx1LndpZHRoPXIsdS5taW5XaWR0aD1pLHUubWF4V2lkdGg9bykpLHZvaWQgMCE9PWE/YStcIlwiOmF9ZnVuY3Rpb24gWWUoZSx0KXtyZXR1cm57Z2V0OmZ1bmN0aW9uKCl7aWYoIWUoKSlyZXR1cm4odGhpcy5nZXQ9dCkuYXBwbHkodGhpcyxhcmd1bWVudHMpO2RlbGV0ZSB0aGlzLmdldH19fSFmdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXtpZihsKXt1LnN0eWxlLmNzc1RleHQ9XCJwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0Oi0xMTExMXB4O3dpZHRoOjYwcHg7bWFyZ2luLXRvcDoxcHg7cGFkZGluZzowO2JvcmRlcjowXCIsbC5zdHlsZS5jc3NUZXh0PVwicG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTpibG9jaztib3gtc2l6aW5nOmJvcmRlci1ib3g7b3ZlcmZsb3c6c2Nyb2xsO21hcmdpbjphdXRvO2JvcmRlcjoxcHg7cGFkZGluZzoxcHg7d2lkdGg6NjAlO3RvcDoxJVwiLEouYXBwZW5kQ2hpbGQodSkuYXBwZW5kQ2hpbGQobCk7dmFyIGU9aWUuZ2V0Q29tcHV0ZWRTdHlsZShsKTtuPVwiMSVcIiE9PWUudG9wLHM9MTI9PT10KGUubWFyZ2luTGVmdCksbC5zdHlsZS5yaWdodD1cIjYwJVwiLG89MzY9PT10KGUucmlnaHQpLHI9MzY9PT10KGUud2lkdGgpLGwuc3R5bGUucG9zaXRpb249XCJhYnNvbHV0ZVwiLGk9MTI9PT10KGwub2Zmc2V0V2lkdGgvMyksSi5yZW1vdmVDaGlsZCh1KSxsPW51bGx9fWZ1bmN0aW9uIHQoZSl7cmV0dXJuIE1hdGgucm91bmQocGFyc2VGbG9hdChlKSl9dmFyIG4scixpLG8sYSxzLHU9Qy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGw9Qy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO2wuc3R5bGUmJihsLnN0eWxlLmJhY2tncm91bmRDbGlwPVwiY29udGVudC1ib3hcIixsLmNsb25lTm9kZSghMCkuc3R5bGUuYmFja2dyb3VuZENsaXA9XCJcIixsZS5jbGVhckNsb25lU3R5bGU9XCJjb250ZW50LWJveFwiPT09bC5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCxjZS5leHRlbmQobGUse2JveFNpemluZ1JlbGlhYmxlOmZ1bmN0aW9uKCl7cmV0dXJuIGUoKSxyfSxwaXhlbEJveFN0eWxlczpmdW5jdGlvbigpe3JldHVybiBlKCksb30scGl4ZWxQb3NpdGlvbjpmdW5jdGlvbigpe3JldHVybiBlKCksbn0scmVsaWFibGVNYXJnaW5MZWZ0OmZ1bmN0aW9uKCl7cmV0dXJuIGUoKSxzfSxzY3JvbGxib3hTaXplOmZ1bmN0aW9uKCl7cmV0dXJuIGUoKSxpfSxyZWxpYWJsZVRyRGltZW5zaW9uczpmdW5jdGlvbigpe3ZhciBlLHQsbixyO3JldHVybiBudWxsPT1hJiYoZT1DLmNyZWF0ZUVsZW1lbnQoXCJ0YWJsZVwiKSx0PUMuY3JlYXRlRWxlbWVudChcInRyXCIpLG49Qy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGUuc3R5bGUuY3NzVGV4dD1cInBvc2l0aW9uOmFic29sdXRlO2xlZnQ6LTExMTExcHg7Ym9yZGVyLWNvbGxhcHNlOnNlcGFyYXRlXCIsdC5zdHlsZS5jc3NUZXh0PVwiYm94LXNpemluZzpjb250ZW50LWJveDtib3JkZXI6MXB4IHNvbGlkXCIsdC5zdHlsZS5oZWlnaHQ9XCIxcHhcIixuLnN0eWxlLmhlaWdodD1cIjlweFwiLG4uc3R5bGUuZGlzcGxheT1cImJsb2NrXCIsSi5hcHBlbmRDaGlsZChlKS5hcHBlbmRDaGlsZCh0KS5hcHBlbmRDaGlsZChuKSxyPWllLmdldENvbXB1dGVkU3R5bGUodCksYT1wYXJzZUludChyLmhlaWdodCwxMCkrcGFyc2VJbnQoci5ib3JkZXJUb3BXaWR0aCwxMCkrcGFyc2VJbnQoci5ib3JkZXJCb3R0b21XaWR0aCwxMCk9PT10Lm9mZnNldEhlaWdodCxKLnJlbW92ZUNoaWxkKGUpKSxhfX0pKX0oKTt2YXIgUWU9W1wiV2Via2l0XCIsXCJNb3pcIixcIm1zXCJdLEplPUMuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSxLZT17fTtmdW5jdGlvbiBaZShlKXt2YXIgdD1jZS5jc3NQcm9wc1tlXXx8S2VbZV07cmV0dXJuIHR8fChlIGluIEplP2U6S2VbZV09ZnVuY3Rpb24oZSl7dmFyIHQ9ZVswXS50b1VwcGVyQ2FzZSgpK2Uuc2xpY2UoMSksbj1RZS5sZW5ndGg7d2hpbGUobi0tKWlmKChlPVFlW25dK3QpaW4gSmUpcmV0dXJuIGV9KGUpfHxlKX12YXIgZXQ9L14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLHR0PXtwb3NpdGlvbjpcImFic29sdXRlXCIsdmlzaWJpbGl0eTpcImhpZGRlblwiLGRpc3BsYXk6XCJibG9ja1wifSxudD17bGV0dGVyU3BhY2luZzpcIjBcIixmb250V2VpZ2h0OlwiNDAwXCJ9O2Z1bmN0aW9uIHJ0KGUsdCxuKXt2YXIgcj1ZLmV4ZWModCk7cmV0dXJuIHI/TWF0aC5tYXgoMCxyWzJdLShufHwwKSkrKHJbM118fFwicHhcIik6dH1mdW5jdGlvbiBpdChlLHQsbixyLGksbyl7dmFyIGE9XCJ3aWR0aFwiPT09dD8xOjAscz0wLHU9MCxsPTA7aWYobj09PShyP1wiYm9yZGVyXCI6XCJjb250ZW50XCIpKXJldHVybiAwO2Zvcig7YTw0O2ErPTIpXCJtYXJnaW5cIj09PW4mJihsKz1jZS5jc3MoZSxuK1FbYV0sITAsaSkpLHI/KFwiY29udGVudFwiPT09biYmKHUtPWNlLmNzcyhlLFwicGFkZGluZ1wiK1FbYV0sITAsaSkpLFwibWFyZ2luXCIhPT1uJiYodS09Y2UuY3NzKGUsXCJib3JkZXJcIitRW2FdK1wiV2lkdGhcIiwhMCxpKSkpOih1Kz1jZS5jc3MoZSxcInBhZGRpbmdcIitRW2FdLCEwLGkpLFwicGFkZGluZ1wiIT09bj91Kz1jZS5jc3MoZSxcImJvcmRlclwiK1FbYV0rXCJXaWR0aFwiLCEwLGkpOnMrPWNlLmNzcyhlLFwiYm9yZGVyXCIrUVthXStcIldpZHRoXCIsITAsaSkpO3JldHVybiFyJiYwPD1vJiYodSs9TWF0aC5tYXgoMCxNYXRoLmNlaWwoZVtcIm9mZnNldFwiK3RbMF0udG9VcHBlckNhc2UoKSt0LnNsaWNlKDEpXS1vLXUtcy0uNSkpfHwwKSx1K2x9ZnVuY3Rpb24gb3QoZSx0LG4pe3ZhciByPVhlKGUpLGk9KCFsZS5ib3hTaXppbmdSZWxpYWJsZSgpfHxuKSYmXCJib3JkZXItYm94XCI9PT1jZS5jc3MoZSxcImJveFNpemluZ1wiLCExLHIpLG89aSxhPUdlKGUsdCxyKSxzPVwib2Zmc2V0XCIrdFswXS50b1VwcGVyQ2FzZSgpK3Quc2xpY2UoMSk7aWYoX2UudGVzdChhKSl7aWYoIW4pcmV0dXJuIGE7YT1cImF1dG9cIn1yZXR1cm4oIWxlLmJveFNpemluZ1JlbGlhYmxlKCkmJml8fCFsZS5yZWxpYWJsZVRyRGltZW5zaW9ucygpJiZmZShlLFwidHJcIil8fFwiYXV0b1wiPT09YXx8IXBhcnNlRmxvYXQoYSkmJlwiaW5saW5lXCI9PT1jZS5jc3MoZSxcImRpc3BsYXlcIiwhMSxyKSkmJmUuZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGgmJihpPVwiYm9yZGVyLWJveFwiPT09Y2UuY3NzKGUsXCJib3hTaXppbmdcIiwhMSxyKSwobz1zIGluIGUpJiYoYT1lW3NdKSksKGE9cGFyc2VGbG9hdChhKXx8MCkraXQoZSx0LG58fChpP1wiYm9yZGVyXCI6XCJjb250ZW50XCIpLG8scixhKStcInB4XCJ9ZnVuY3Rpb24gYXQoZSx0LG4scixpKXtyZXR1cm4gbmV3IGF0LnByb3RvdHlwZS5pbml0KGUsdCxuLHIsaSl9Y2UuZXh0ZW5kKHtjc3NIb29rczp7b3BhY2l0eTp7Z2V0OmZ1bmN0aW9uKGUsdCl7aWYodCl7dmFyIG49R2UoZSxcIm9wYWNpdHlcIik7cmV0dXJuXCJcIj09PW4/XCIxXCI6bn19fX0sY3NzTnVtYmVyOnthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxhc3BlY3RSYXRpbzohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGNvbHVtbkNvdW50OiEwLGZsZXhHcm93OiEwLGZsZXhTaHJpbms6ITAsZm9udFdlaWdodDohMCxncmlkQXJlYTohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3RhcnQ6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsc2NhbGU6ITAsd2lkb3dzOiEwLHpJbmRleDohMCx6b29tOiEwLGZpbGxPcGFjaXR5OiEwLGZsb29kT3BhY2l0eTohMCxzdG9wT3BhY2l0eTohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITB9LGNzc1Byb3BzOnt9LHN0eWxlOmZ1bmN0aW9uKGUsdCxuLHIpe2lmKGUmJjMhPT1lLm5vZGVUeXBlJiY4IT09ZS5ub2RlVHlwZSYmZS5zdHlsZSl7dmFyIGksbyxhLHM9Rih0KSx1PXplLnRlc3QodCksbD1lLnN0eWxlO2lmKHV8fCh0PVplKHMpKSxhPWNlLmNzc0hvb2tzW3RdfHxjZS5jc3NIb29rc1tzXSx2b2lkIDA9PT1uKXJldHVybiBhJiZcImdldFwiaW4gYSYmdm9pZCAwIT09KGk9YS5nZXQoZSwhMSxyKSk/aTpsW3RdO1wic3RyaW5nXCI9PT0obz10eXBlb2YgbikmJihpPVkuZXhlYyhuKSkmJmlbMV0mJihuPXRlKGUsdCxpKSxvPVwibnVtYmVyXCIpLG51bGwhPW4mJm49PW4mJihcIm51bWJlclwiIT09b3x8dXx8KG4rPWkmJmlbM118fChjZS5jc3NOdW1iZXJbc10/XCJcIjpcInB4XCIpKSxsZS5jbGVhckNsb25lU3R5bGV8fFwiXCIhPT1ufHwwIT09dC5pbmRleE9mKFwiYmFja2dyb3VuZFwiKXx8KGxbdF09XCJpbmhlcml0XCIpLGEmJlwic2V0XCJpbiBhJiZ2b2lkIDA9PT0obj1hLnNldChlLG4scikpfHwodT9sLnNldFByb3BlcnR5KHQsbik6bFt0XT1uKSl9fSxjc3M6ZnVuY3Rpb24oZSx0LG4scil7dmFyIGksbyxhLHM9Rih0KTtyZXR1cm4gemUudGVzdCh0KXx8KHQ9WmUocykpLChhPWNlLmNzc0hvb2tzW3RdfHxjZS5jc3NIb29rc1tzXSkmJlwiZ2V0XCJpbiBhJiYoaT1hLmdldChlLCEwLG4pKSx2b2lkIDA9PT1pJiYoaT1HZShlLHQscikpLFwibm9ybWFsXCI9PT1pJiZ0IGluIG50JiYoaT1udFt0XSksXCJcIj09PW58fG4/KG89cGFyc2VGbG9hdChpKSwhMD09PW58fGlzRmluaXRlKG8pP298fDA6aSk6aX19KSxjZS5lYWNoKFtcImhlaWdodFwiLFwid2lkdGhcIl0sZnVuY3Rpb24oZSx1KXtjZS5jc3NIb29rc1t1XT17Z2V0OmZ1bmN0aW9uKGUsdCxuKXtpZih0KXJldHVybiFldC50ZXN0KGNlLmNzcyhlLFwiZGlzcGxheVwiKSl8fGUuZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGgmJmUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg/b3QoZSx1LG4pOlVlKGUsdHQsZnVuY3Rpb24oKXtyZXR1cm4gb3QoZSx1LG4pfSl9LHNldDpmdW5jdGlvbihlLHQsbil7dmFyIHIsaT1YZShlKSxvPSFsZS5zY3JvbGxib3hTaXplKCkmJlwiYWJzb2x1dGVcIj09PWkucG9zaXRpb24sYT0ob3x8bikmJlwiYm9yZGVyLWJveFwiPT09Y2UuY3NzKGUsXCJib3hTaXppbmdcIiwhMSxpKSxzPW4/aXQoZSx1LG4sYSxpKTowO3JldHVybiBhJiZvJiYocy09TWF0aC5jZWlsKGVbXCJvZmZzZXRcIit1WzBdLnRvVXBwZXJDYXNlKCkrdS5zbGljZSgxKV0tcGFyc2VGbG9hdChpW3VdKS1pdChlLHUsXCJib3JkZXJcIiwhMSxpKS0uNSkpLHMmJihyPVkuZXhlYyh0KSkmJlwicHhcIiE9PShyWzNdfHxcInB4XCIpJiYoZS5zdHlsZVt1XT10LHQ9Y2UuY3NzKGUsdSkpLHJ0KDAsdCxzKX19fSksY2UuY3NzSG9va3MubWFyZ2luTGVmdD1ZZShsZS5yZWxpYWJsZU1hcmdpbkxlZnQsZnVuY3Rpb24oZSx0KXtpZih0KXJldHVybihwYXJzZUZsb2F0KEdlKGUsXCJtYXJnaW5MZWZ0XCIpKXx8ZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0LVVlKGUse21hcmdpbkxlZnQ6MH0sZnVuY3Rpb24oKXtyZXR1cm4gZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0fSkpK1wicHhcIn0pLGNlLmVhY2goe21hcmdpbjpcIlwiLHBhZGRpbmc6XCJcIixib3JkZXI6XCJXaWR0aFwifSxmdW5jdGlvbihpLG8pe2NlLmNzc0hvb2tzW2krb109e2V4cGFuZDpmdW5jdGlvbihlKXtmb3IodmFyIHQ9MCxuPXt9LHI9XCJzdHJpbmdcIj09dHlwZW9mIGU/ZS5zcGxpdChcIiBcIik6W2VdO3Q8NDt0KyspbltpK1FbdF0rb109clt0XXx8clt0LTJdfHxyWzBdO3JldHVybiBufX0sXCJtYXJnaW5cIiE9PWkmJihjZS5jc3NIb29rc1tpK29dLnNldD1ydCl9KSxjZS5mbi5leHRlbmQoe2NzczpmdW5jdGlvbihlLHQpe3JldHVybiBNKHRoaXMsZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbz17fSxhPTA7aWYoQXJyYXkuaXNBcnJheSh0KSl7Zm9yKHI9WGUoZSksaT10Lmxlbmd0aDthPGk7YSsrKW9bdFthXV09Y2UuY3NzKGUsdFthXSwhMSxyKTtyZXR1cm4gb31yZXR1cm4gdm9pZCAwIT09bj9jZS5zdHlsZShlLHQsbik6Y2UuY3NzKGUsdCl9LGUsdCwxPGFyZ3VtZW50cy5sZW5ndGgpfX0pLCgoY2UuVHdlZW49YXQpLnByb3RvdHlwZT17Y29uc3RydWN0b3I6YXQsaW5pdDpmdW5jdGlvbihlLHQsbixyLGksbyl7dGhpcy5lbGVtPWUsdGhpcy5wcm9wPW4sdGhpcy5lYXNpbmc9aXx8Y2UuZWFzaW5nLl9kZWZhdWx0LHRoaXMub3B0aW9ucz10LHRoaXMuc3RhcnQ9dGhpcy5ub3c9dGhpcy5jdXIoKSx0aGlzLmVuZD1yLHRoaXMudW5pdD1vfHwoY2UuY3NzTnVtYmVyW25dP1wiXCI6XCJweFwiKX0sY3VyOmZ1bmN0aW9uKCl7dmFyIGU9YXQucHJvcEhvb2tzW3RoaXMucHJvcF07cmV0dXJuIGUmJmUuZ2V0P2UuZ2V0KHRoaXMpOmF0LnByb3BIb29rcy5fZGVmYXVsdC5nZXQodGhpcyl9LHJ1bjpmdW5jdGlvbihlKXt2YXIgdCxuPWF0LnByb3BIb29rc1t0aGlzLnByb3BdO3JldHVybiB0aGlzLm9wdGlvbnMuZHVyYXRpb24/dGhpcy5wb3M9dD1jZS5lYXNpbmdbdGhpcy5lYXNpbmddKGUsdGhpcy5vcHRpb25zLmR1cmF0aW9uKmUsMCwxLHRoaXMub3B0aW9ucy5kdXJhdGlvbik6dGhpcy5wb3M9dD1lLHRoaXMubm93PSh0aGlzLmVuZC10aGlzLnN0YXJ0KSp0K3RoaXMuc3RhcnQsdGhpcy5vcHRpb25zLnN0ZXAmJnRoaXMub3B0aW9ucy5zdGVwLmNhbGwodGhpcy5lbGVtLHRoaXMubm93LHRoaXMpLG4mJm4uc2V0P24uc2V0KHRoaXMpOmF0LnByb3BIb29rcy5fZGVmYXVsdC5zZXQodGhpcyksdGhpc319KS5pbml0LnByb3RvdHlwZT1hdC5wcm90b3R5cGUsKGF0LnByb3BIb29rcz17X2RlZmF1bHQ6e2dldDpmdW5jdGlvbihlKXt2YXIgdDtyZXR1cm4gMSE9PWUuZWxlbS5ub2RlVHlwZXx8bnVsbCE9ZS5lbGVtW2UucHJvcF0mJm51bGw9PWUuZWxlbS5zdHlsZVtlLnByb3BdP2UuZWxlbVtlLnByb3BdOih0PWNlLmNzcyhlLmVsZW0sZS5wcm9wLFwiXCIpKSYmXCJhdXRvXCIhPT10P3Q6MH0sc2V0OmZ1bmN0aW9uKGUpe2NlLmZ4LnN0ZXBbZS5wcm9wXT9jZS5meC5zdGVwW2UucHJvcF0oZSk6MSE9PWUuZWxlbS5ub2RlVHlwZXx8IWNlLmNzc0hvb2tzW2UucHJvcF0mJm51bGw9PWUuZWxlbS5zdHlsZVtaZShlLnByb3ApXT9lLmVsZW1bZS5wcm9wXT1lLm5vdzpjZS5zdHlsZShlLmVsZW0sZS5wcm9wLGUubm93K2UudW5pdCl9fX0pLnNjcm9sbFRvcD1hdC5wcm9wSG9va3Muc2Nyb2xsTGVmdD17c2V0OmZ1bmN0aW9uKGUpe2UuZWxlbS5ub2RlVHlwZSYmZS5lbGVtLnBhcmVudE5vZGUmJihlLmVsZW1bZS5wcm9wXT1lLm5vdyl9fSxjZS5lYXNpbmc9e2xpbmVhcjpmdW5jdGlvbihlKXtyZXR1cm4gZX0sc3dpbmc6ZnVuY3Rpb24oZSl7cmV0dXJuLjUtTWF0aC5jb3MoZSpNYXRoLlBJKS8yfSxfZGVmYXVsdDpcInN3aW5nXCJ9LGNlLmZ4PWF0LnByb3RvdHlwZS5pbml0LGNlLmZ4LnN0ZXA9e307dmFyIHN0LHV0LGx0LGN0LGZ0PS9eKD86dG9nZ2xlfHNob3d8aGlkZSkkLyxwdD0vcXVldWVIb29rcyQvO2Z1bmN0aW9uIGR0KCl7dXQmJighMT09PUMuaGlkZGVuJiZpZS5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU/aWUucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGR0KTppZS5zZXRUaW1lb3V0KGR0LGNlLmZ4LmludGVydmFsKSxjZS5meC50aWNrKCkpfWZ1bmN0aW9uIGh0KCl7cmV0dXJuIGllLnNldFRpbWVvdXQoZnVuY3Rpb24oKXtzdD12b2lkIDB9KSxzdD1EYXRlLm5vdygpfWZ1bmN0aW9uIGd0KGUsdCl7dmFyIG4scj0wLGk9e2hlaWdodDplfTtmb3IodD10PzE6MDtyPDQ7cis9Mi10KWlbXCJtYXJnaW5cIisobj1RW3JdKV09aVtcInBhZGRpbmdcIituXT1lO3JldHVybiB0JiYoaS5vcGFjaXR5PWkud2lkdGg9ZSksaX1mdW5jdGlvbiB2dChlLHQsbil7Zm9yKHZhciByLGk9KHl0LnR3ZWVuZXJzW3RdfHxbXSkuY29uY2F0KHl0LnR3ZWVuZXJzW1wiKlwiXSksbz0wLGE9aS5sZW5ndGg7bzxhO28rKylpZihyPWlbb10uY2FsbChuLHQsZSkpcmV0dXJuIHJ9ZnVuY3Rpb24geXQobyxlLHQpe3ZhciBuLGEscj0wLGk9eXQucHJlZmlsdGVycy5sZW5ndGgscz1jZS5EZWZlcnJlZCgpLmFsd2F5cyhmdW5jdGlvbigpe2RlbGV0ZSB1LmVsZW19KSx1PWZ1bmN0aW9uKCl7aWYoYSlyZXR1cm4hMTtmb3IodmFyIGU9c3R8fGh0KCksdD1NYXRoLm1heCgwLGwuc3RhcnRUaW1lK2wuZHVyYXRpb24tZSksbj0xLSh0L2wuZHVyYXRpb258fDApLHI9MCxpPWwudHdlZW5zLmxlbmd0aDtyPGk7cisrKWwudHdlZW5zW3JdLnJ1bihuKTtyZXR1cm4gcy5ub3RpZnlXaXRoKG8sW2wsbix0XSksbjwxJiZpP3Q6KGl8fHMubm90aWZ5V2l0aChvLFtsLDEsMF0pLHMucmVzb2x2ZVdpdGgobyxbbF0pLCExKX0sbD1zLnByb21pc2Uoe2VsZW06byxwcm9wczpjZS5leHRlbmQoe30sZSksb3B0czpjZS5leHRlbmQoITAse3NwZWNpYWxFYXNpbmc6e30sZWFzaW5nOmNlLmVhc2luZy5fZGVmYXVsdH0sdCksb3JpZ2luYWxQcm9wZXJ0aWVzOmUsb3JpZ2luYWxPcHRpb25zOnQsc3RhcnRUaW1lOnN0fHxodCgpLGR1cmF0aW9uOnQuZHVyYXRpb24sdHdlZW5zOltdLGNyZWF0ZVR3ZWVuOmZ1bmN0aW9uKGUsdCl7dmFyIG49Y2UuVHdlZW4obyxsLm9wdHMsZSx0LGwub3B0cy5zcGVjaWFsRWFzaW5nW2VdfHxsLm9wdHMuZWFzaW5nKTtyZXR1cm4gbC50d2VlbnMucHVzaChuKSxufSxzdG9wOmZ1bmN0aW9uKGUpe3ZhciB0PTAsbj1lP2wudHdlZW5zLmxlbmd0aDowO2lmKGEpcmV0dXJuIHRoaXM7Zm9yKGE9ITA7dDxuO3QrKylsLnR3ZWVuc1t0XS5ydW4oMSk7cmV0dXJuIGU/KHMubm90aWZ5V2l0aChvLFtsLDEsMF0pLHMucmVzb2x2ZVdpdGgobyxbbCxlXSkpOnMucmVqZWN0V2l0aChvLFtsLGVdKSx0aGlzfX0pLGM9bC5wcm9wcztmb3IoIWZ1bmN0aW9uKGUsdCl7dmFyIG4scixpLG8sYTtmb3IobiBpbiBlKWlmKGk9dFtyPUYobildLG89ZVtuXSxBcnJheS5pc0FycmF5KG8pJiYoaT1vWzFdLG89ZVtuXT1vWzBdKSxuIT09ciYmKGVbcl09byxkZWxldGUgZVtuXSksKGE9Y2UuY3NzSG9va3Nbcl0pJiZcImV4cGFuZFwiaW4gYSlmb3IobiBpbiBvPWEuZXhwYW5kKG8pLGRlbGV0ZSBlW3JdLG8pbiBpbiBlfHwoZVtuXT1vW25dLHRbbl09aSk7ZWxzZSB0W3JdPWl9KGMsbC5vcHRzLnNwZWNpYWxFYXNpbmcpO3I8aTtyKyspaWYobj15dC5wcmVmaWx0ZXJzW3JdLmNhbGwobCxvLGMsbC5vcHRzKSlyZXR1cm4gdihuLnN0b3ApJiYoY2UuX3F1ZXVlSG9va3MobC5lbGVtLGwub3B0cy5xdWV1ZSkuc3RvcD1uLnN0b3AuYmluZChuKSksbjtyZXR1cm4gY2UubWFwKGMsdnQsbCksdihsLm9wdHMuc3RhcnQpJiZsLm9wdHMuc3RhcnQuY2FsbChvLGwpLGwucHJvZ3Jlc3MobC5vcHRzLnByb2dyZXNzKS5kb25lKGwub3B0cy5kb25lLGwub3B0cy5jb21wbGV0ZSkuZmFpbChsLm9wdHMuZmFpbCkuYWx3YXlzKGwub3B0cy5hbHdheXMpLGNlLmZ4LnRpbWVyKGNlLmV4dGVuZCh1LHtlbGVtOm8sYW5pbTpsLHF1ZXVlOmwub3B0cy5xdWV1ZX0pKSxsfWNlLkFuaW1hdGlvbj1jZS5leHRlbmQoeXQse3R3ZWVuZXJzOntcIipcIjpbZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzLmNyZWF0ZVR3ZWVuKGUsdCk7cmV0dXJuIHRlKG4uZWxlbSxlLFkuZXhlYyh0KSxuKSxufV19LHR3ZWVuZXI6ZnVuY3Rpb24oZSx0KXt2KGUpPyh0PWUsZT1bXCIqXCJdKTplPWUubWF0Y2goRCk7Zm9yKHZhciBuLHI9MCxpPWUubGVuZ3RoO3I8aTtyKyspbj1lW3JdLHl0LnR3ZWVuZXJzW25dPXl0LnR3ZWVuZXJzW25dfHxbXSx5dC50d2VlbmVyc1tuXS51bnNoaWZ0KHQpfSxwcmVmaWx0ZXJzOltmdW5jdGlvbihlLHQsbil7dmFyIHIsaSxvLGEscyx1LGwsYyxmPVwid2lkdGhcImluIHR8fFwiaGVpZ2h0XCJpbiB0LHA9dGhpcyxkPXt9LGg9ZS5zdHlsZSxnPWUubm9kZVR5cGUmJmVlKGUpLHY9Xy5nZXQoZSxcImZ4c2hvd1wiKTtmb3IociBpbiBuLnF1ZXVlfHwobnVsbD09KGE9Y2UuX3F1ZXVlSG9va3MoZSxcImZ4XCIpKS51bnF1ZXVlZCYmKGEudW5xdWV1ZWQ9MCxzPWEuZW1wdHkuZmlyZSxhLmVtcHR5LmZpcmU9ZnVuY3Rpb24oKXthLnVucXVldWVkfHxzKCl9KSxhLnVucXVldWVkKysscC5hbHdheXMoZnVuY3Rpb24oKXtwLmFsd2F5cyhmdW5jdGlvbigpe2EudW5xdWV1ZWQtLSxjZS5xdWV1ZShlLFwiZnhcIikubGVuZ3RofHxhLmVtcHR5LmZpcmUoKX0pfSkpLHQpaWYoaT10W3JdLGZ0LnRlc3QoaSkpe2lmKGRlbGV0ZSB0W3JdLG89b3x8XCJ0b2dnbGVcIj09PWksaT09PShnP1wiaGlkZVwiOlwic2hvd1wiKSl7aWYoXCJzaG93XCIhPT1pfHwhdnx8dm9pZCAwPT09dltyXSljb250aW51ZTtnPSEwfWRbcl09diYmdltyXXx8Y2Uuc3R5bGUoZSxyKX1pZigodT0hY2UuaXNFbXB0eU9iamVjdCh0KSl8fCFjZS5pc0VtcHR5T2JqZWN0KGQpKWZvcihyIGluIGYmJjE9PT1lLm5vZGVUeXBlJiYobi5vdmVyZmxvdz1baC5vdmVyZmxvdyxoLm92ZXJmbG93WCxoLm92ZXJmbG93WV0sbnVsbD09KGw9diYmdi5kaXNwbGF5KSYmKGw9Xy5nZXQoZSxcImRpc3BsYXlcIikpLFwibm9uZVwiPT09KGM9Y2UuY3NzKGUsXCJkaXNwbGF5XCIpKSYmKGw/Yz1sOihyZShbZV0sITApLGw9ZS5zdHlsZS5kaXNwbGF5fHxsLGM9Y2UuY3NzKGUsXCJkaXNwbGF5XCIpLHJlKFtlXSkpKSwoXCJpbmxpbmVcIj09PWN8fFwiaW5saW5lLWJsb2NrXCI9PT1jJiZudWxsIT1sKSYmXCJub25lXCI9PT1jZS5jc3MoZSxcImZsb2F0XCIpJiYodXx8KHAuZG9uZShmdW5jdGlvbigpe2guZGlzcGxheT1sfSksbnVsbD09bCYmKGM9aC5kaXNwbGF5LGw9XCJub25lXCI9PT1jP1wiXCI6YykpLGguZGlzcGxheT1cImlubGluZS1ibG9ja1wiKSksbi5vdmVyZmxvdyYmKGgub3ZlcmZsb3c9XCJoaWRkZW5cIixwLmFsd2F5cyhmdW5jdGlvbigpe2gub3ZlcmZsb3c9bi5vdmVyZmxvd1swXSxoLm92ZXJmbG93WD1uLm92ZXJmbG93WzFdLGgub3ZlcmZsb3dZPW4ub3ZlcmZsb3dbMl19KSksdT0hMSxkKXV8fCh2P1wiaGlkZGVuXCJpbiB2JiYoZz12LmhpZGRlbik6dj1fLmFjY2VzcyhlLFwiZnhzaG93XCIse2Rpc3BsYXk6bH0pLG8mJih2LmhpZGRlbj0hZyksZyYmcmUoW2VdLCEwKSxwLmRvbmUoZnVuY3Rpb24oKXtmb3IociBpbiBnfHxyZShbZV0pLF8ucmVtb3ZlKGUsXCJmeHNob3dcIiksZCljZS5zdHlsZShlLHIsZFtyXSl9KSksdT12dChnP3Zbcl06MCxyLHApLHIgaW4gdnx8KHZbcl09dS5zdGFydCxnJiYodS5lbmQ9dS5zdGFydCx1LnN0YXJ0PTApKX1dLHByZWZpbHRlcjpmdW5jdGlvbihlLHQpe3Q/eXQucHJlZmlsdGVycy51bnNoaWZ0KGUpOnl0LnByZWZpbHRlcnMucHVzaChlKX19KSxjZS5zcGVlZD1mdW5jdGlvbihlLHQsbil7dmFyIHI9ZSYmXCJvYmplY3RcIj09dHlwZW9mIGU/Y2UuZXh0ZW5kKHt9LGUpOntjb21wbGV0ZTpufHwhbiYmdHx8dihlKSYmZSxkdXJhdGlvbjplLGVhc2luZzpuJiZ0fHx0JiYhdih0KSYmdH07cmV0dXJuIGNlLmZ4Lm9mZj9yLmR1cmF0aW9uPTA6XCJudW1iZXJcIiE9dHlwZW9mIHIuZHVyYXRpb24mJihyLmR1cmF0aW9uIGluIGNlLmZ4LnNwZWVkcz9yLmR1cmF0aW9uPWNlLmZ4LnNwZWVkc1tyLmR1cmF0aW9uXTpyLmR1cmF0aW9uPWNlLmZ4LnNwZWVkcy5fZGVmYXVsdCksbnVsbCE9ci5xdWV1ZSYmITAhPT1yLnF1ZXVlfHwoci5xdWV1ZT1cImZ4XCIpLHIub2xkPXIuY29tcGxldGUsci5jb21wbGV0ZT1mdW5jdGlvbigpe3Yoci5vbGQpJiZyLm9sZC5jYWxsKHRoaXMpLHIucXVldWUmJmNlLmRlcXVldWUodGhpcyxyLnF1ZXVlKX0scn0sY2UuZm4uZXh0ZW5kKHtmYWRlVG86ZnVuY3Rpb24oZSx0LG4scil7cmV0dXJuIHRoaXMuZmlsdGVyKGVlKS5jc3MoXCJvcGFjaXR5XCIsMCkuc2hvdygpLmVuZCgpLmFuaW1hdGUoe29wYWNpdHk6dH0sZSxuLHIpfSxhbmltYXRlOmZ1bmN0aW9uKHQsZSxuLHIpe3ZhciBpPWNlLmlzRW1wdHlPYmplY3QodCksbz1jZS5zcGVlZChlLG4sciksYT1mdW5jdGlvbigpe3ZhciBlPXl0KHRoaXMsY2UuZXh0ZW5kKHt9LHQpLG8pOyhpfHxfLmdldCh0aGlzLFwiZmluaXNoXCIpKSYmZS5zdG9wKCEwKX07cmV0dXJuIGEuZmluaXNoPWEsaXx8ITE9PT1vLnF1ZXVlP3RoaXMuZWFjaChhKTp0aGlzLnF1ZXVlKG8ucXVldWUsYSl9LHN0b3A6ZnVuY3Rpb24oaSxlLG8pe3ZhciBhPWZ1bmN0aW9uKGUpe3ZhciB0PWUuc3RvcDtkZWxldGUgZS5zdG9wLHQobyl9O3JldHVyblwic3RyaW5nXCIhPXR5cGVvZiBpJiYobz1lLGU9aSxpPXZvaWQgMCksZSYmdGhpcy5xdWV1ZShpfHxcImZ4XCIsW10pLHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBlPSEwLHQ9bnVsbCE9aSYmaStcInF1ZXVlSG9va3NcIixuPWNlLnRpbWVycyxyPV8uZ2V0KHRoaXMpO2lmKHQpclt0XSYmclt0XS5zdG9wJiZhKHJbdF0pO2Vsc2UgZm9yKHQgaW4gcilyW3RdJiZyW3RdLnN0b3AmJnB0LnRlc3QodCkmJmEoclt0XSk7Zm9yKHQ9bi5sZW5ndGg7dC0tOyluW3RdLmVsZW0hPT10aGlzfHxudWxsIT1pJiZuW3RdLnF1ZXVlIT09aXx8KG5bdF0uYW5pbS5zdG9wKG8pLGU9ITEsbi5zcGxpY2UodCwxKSk7IWUmJm98fGNlLmRlcXVldWUodGhpcyxpKX0pfSxmaW5pc2g6ZnVuY3Rpb24oYSl7cmV0dXJuITEhPT1hJiYoYT1hfHxcImZ4XCIpLHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBlLHQ9Xy5nZXQodGhpcyksbj10W2ErXCJxdWV1ZVwiXSxyPXRbYStcInF1ZXVlSG9va3NcIl0saT1jZS50aW1lcnMsbz1uP24ubGVuZ3RoOjA7Zm9yKHQuZmluaXNoPSEwLGNlLnF1ZXVlKHRoaXMsYSxbXSksciYmci5zdG9wJiZyLnN0b3AuY2FsbCh0aGlzLCEwKSxlPWkubGVuZ3RoO2UtLTspaVtlXS5lbGVtPT09dGhpcyYmaVtlXS5xdWV1ZT09PWEmJihpW2VdLmFuaW0uc3RvcCghMCksaS5zcGxpY2UoZSwxKSk7Zm9yKGU9MDtlPG87ZSsrKW5bZV0mJm5bZV0uZmluaXNoJiZuW2VdLmZpbmlzaC5jYWxsKHRoaXMpO2RlbGV0ZSB0LmZpbmlzaH0pfX0pLGNlLmVhY2goW1widG9nZ2xlXCIsXCJzaG93XCIsXCJoaWRlXCJdLGZ1bmN0aW9uKGUscil7dmFyIGk9Y2UuZm5bcl07Y2UuZm5bcl09ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBudWxsPT1lfHxcImJvb2xlYW5cIj09dHlwZW9mIGU/aS5hcHBseSh0aGlzLGFyZ3VtZW50cyk6dGhpcy5hbmltYXRlKGd0KHIsITApLGUsdCxuKX19KSxjZS5lYWNoKHtzbGlkZURvd246Z3QoXCJzaG93XCIpLHNsaWRlVXA6Z3QoXCJoaWRlXCIpLHNsaWRlVG9nZ2xlOmd0KFwidG9nZ2xlXCIpLGZhZGVJbjp7b3BhY2l0eTpcInNob3dcIn0sZmFkZU91dDp7b3BhY2l0eTpcImhpZGVcIn0sZmFkZVRvZ2dsZTp7b3BhY2l0eTpcInRvZ2dsZVwifX0sZnVuY3Rpb24oZSxyKXtjZS5mbltlXT1mdW5jdGlvbihlLHQsbil7cmV0dXJuIHRoaXMuYW5pbWF0ZShyLGUsdCxuKX19KSxjZS50aW1lcnM9W10sY2UuZngudGljaz1mdW5jdGlvbigpe3ZhciBlLHQ9MCxuPWNlLnRpbWVycztmb3Ioc3Q9RGF0ZS5ub3coKTt0PG4ubGVuZ3RoO3QrKykoZT1uW3RdKSgpfHxuW3RdIT09ZXx8bi5zcGxpY2UodC0tLDEpO24ubGVuZ3RofHxjZS5meC5zdG9wKCksc3Q9dm9pZCAwfSxjZS5meC50aW1lcj1mdW5jdGlvbihlKXtjZS50aW1lcnMucHVzaChlKSxjZS5meC5zdGFydCgpfSxjZS5meC5pbnRlcnZhbD0xMyxjZS5meC5zdGFydD1mdW5jdGlvbigpe3V0fHwodXQ9ITAsZHQoKSl9LGNlLmZ4LnN0b3A9ZnVuY3Rpb24oKXt1dD1udWxsfSxjZS5meC5zcGVlZHM9e3Nsb3c6NjAwLGZhc3Q6MjAwLF9kZWZhdWx0OjQwMH0sY2UuZm4uZGVsYXk9ZnVuY3Rpb24ocixlKXtyZXR1cm4gcj1jZS5meCYmY2UuZnguc3BlZWRzW3JdfHxyLGU9ZXx8XCJmeFwiLHRoaXMucXVldWUoZSxmdW5jdGlvbihlLHQpe3ZhciBuPWllLnNldFRpbWVvdXQoZSxyKTt0LnN0b3A9ZnVuY3Rpb24oKXtpZS5jbGVhclRpbWVvdXQobil9fSl9LGx0PUMuY3JlYXRlRWxlbWVudChcImlucHV0XCIpLGN0PUMuY3JlYXRlRWxlbWVudChcInNlbGVjdFwiKS5hcHBlbmRDaGlsZChDLmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIikpLGx0LnR5cGU9XCJjaGVja2JveFwiLGxlLmNoZWNrT249XCJcIiE9PWx0LnZhbHVlLGxlLm9wdFNlbGVjdGVkPWN0LnNlbGVjdGVkLChsdD1DLmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKSkudmFsdWU9XCJ0XCIsbHQudHlwZT1cInJhZGlvXCIsbGUucmFkaW9WYWx1ZT1cInRcIj09PWx0LnZhbHVlO3ZhciBtdCx4dD1jZS5leHByLmF0dHJIYW5kbGU7Y2UuZm4uZXh0ZW5kKHthdHRyOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIE0odGhpcyxjZS5hdHRyLGUsdCwxPGFyZ3VtZW50cy5sZW5ndGgpfSxyZW1vdmVBdHRyOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXtjZS5yZW1vdmVBdHRyKHRoaXMsZSl9KX19KSxjZS5leHRlbmQoe2F0dHI6ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbz1lLm5vZGVUeXBlO2lmKDMhPT1vJiY4IT09byYmMiE9PW8pcmV0dXJuXCJ1bmRlZmluZWRcIj09dHlwZW9mIGUuZ2V0QXR0cmlidXRlP2NlLnByb3AoZSx0LG4pOigxPT09byYmY2UuaXNYTUxEb2MoZSl8fChpPWNlLmF0dHJIb29rc1t0LnRvTG93ZXJDYXNlKCldfHwoY2UuZXhwci5tYXRjaC5ib29sLnRlc3QodCk/bXQ6dm9pZCAwKSksdm9pZCAwIT09bj9udWxsPT09bj92b2lkIGNlLnJlbW92ZUF0dHIoZSx0KTppJiZcInNldFwiaW4gaSYmdm9pZCAwIT09KHI9aS5zZXQoZSxuLHQpKT9yOihlLnNldEF0dHJpYnV0ZSh0LG4rXCJcIiksbik6aSYmXCJnZXRcImluIGkmJm51bGwhPT0ocj1pLmdldChlLHQpKT9yOm51bGw9PShyPWNlLmZpbmQuYXR0cihlLHQpKT92b2lkIDA6cil9LGF0dHJIb29rczp7dHlwZTp7c2V0OmZ1bmN0aW9uKGUsdCl7aWYoIWxlLnJhZGlvVmFsdWUmJlwicmFkaW9cIj09PXQmJmZlKGUsXCJpbnB1dFwiKSl7dmFyIG49ZS52YWx1ZTtyZXR1cm4gZS5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsdCksbiYmKGUudmFsdWU9biksdH19fX0scmVtb3ZlQXR0cjpmdW5jdGlvbihlLHQpe3ZhciBuLHI9MCxpPXQmJnQubWF0Y2goRCk7aWYoaSYmMT09PWUubm9kZVR5cGUpd2hpbGUobj1pW3IrK10pZS5yZW1vdmVBdHRyaWJ1dGUobil9fSksbXQ9e3NldDpmdW5jdGlvbihlLHQsbil7cmV0dXJuITE9PT10P2NlLnJlbW92ZUF0dHIoZSxuKTplLnNldEF0dHJpYnV0ZShuLG4pLG59fSxjZS5lYWNoKGNlLmV4cHIubWF0Y2guYm9vbC5zb3VyY2UubWF0Y2goL1xcdysvZyksZnVuY3Rpb24oZSx0KXt2YXIgYT14dFt0XXx8Y2UuZmluZC5hdHRyO3h0W3RdPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcixpLG89dC50b0xvd2VyQ2FzZSgpO3JldHVybiBufHwoaT14dFtvXSx4dFtvXT1yLHI9bnVsbCE9YShlLHQsbik/bzpudWxsLHh0W29dPWkpLHJ9fSk7dmFyIGJ0PS9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksd3Q9L14oPzphfGFyZWEpJC9pO2Z1bmN0aW9uIFR0KGUpe3JldHVybihlLm1hdGNoKEQpfHxbXSkuam9pbihcIiBcIil9ZnVuY3Rpb24gQ3QoZSl7cmV0dXJuIGUuZ2V0QXR0cmlidXRlJiZlLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpfHxcIlwifWZ1bmN0aW9uIGt0KGUpe3JldHVybiBBcnJheS5pc0FycmF5KGUpP2U6XCJzdHJpbmdcIj09dHlwZW9mIGUmJmUubWF0Y2goRCl8fFtdfWNlLmZuLmV4dGVuZCh7cHJvcDpmdW5jdGlvbihlLHQpe3JldHVybiBNKHRoaXMsY2UucHJvcCxlLHQsMTxhcmd1bWVudHMubGVuZ3RoKX0scmVtb3ZlUHJvcDpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7ZGVsZXRlIHRoaXNbY2UucHJvcEZpeFtlXXx8ZV19KX19KSxjZS5leHRlbmQoe3Byb3A6ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbz1lLm5vZGVUeXBlO2lmKDMhPT1vJiY4IT09byYmMiE9PW8pcmV0dXJuIDE9PT1vJiZjZS5pc1hNTERvYyhlKXx8KHQ9Y2UucHJvcEZpeFt0XXx8dCxpPWNlLnByb3BIb29rc1t0XSksdm9pZCAwIT09bj9pJiZcInNldFwiaW4gaSYmdm9pZCAwIT09KHI9aS5zZXQoZSxuLHQpKT9yOmVbdF09bjppJiZcImdldFwiaW4gaSYmbnVsbCE9PShyPWkuZ2V0KGUsdCkpP3I6ZVt0XX0scHJvcEhvb2tzOnt0YWJJbmRleDp7Z2V0OmZ1bmN0aW9uKGUpe3ZhciB0PWNlLmZpbmQuYXR0cihlLFwidGFiaW5kZXhcIik7cmV0dXJuIHQ/cGFyc2VJbnQodCwxMCk6YnQudGVzdChlLm5vZGVOYW1lKXx8d3QudGVzdChlLm5vZGVOYW1lKSYmZS5ocmVmPzA6LTF9fX0scHJvcEZpeDp7XCJmb3JcIjpcImh0bWxGb3JcIixcImNsYXNzXCI6XCJjbGFzc05hbWVcIn19KSxsZS5vcHRTZWxlY3RlZHx8KGNlLnByb3BIb29rcy5zZWxlY3RlZD17Z2V0OmZ1bmN0aW9uKGUpe3ZhciB0PWUucGFyZW50Tm9kZTtyZXR1cm4gdCYmdC5wYXJlbnROb2RlJiZ0LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleCxudWxsfSxzZXQ6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5wYXJlbnROb2RlO3QmJih0LnNlbGVjdGVkSW5kZXgsdC5wYXJlbnROb2RlJiZ0LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleCl9fSksY2UuZWFjaChbXCJ0YWJJbmRleFwiLFwicmVhZE9ubHlcIixcIm1heExlbmd0aFwiLFwiY2VsbFNwYWNpbmdcIixcImNlbGxQYWRkaW5nXCIsXCJyb3dTcGFuXCIsXCJjb2xTcGFuXCIsXCJ1c2VNYXBcIixcImZyYW1lQm9yZGVyXCIsXCJjb250ZW50RWRpdGFibGVcIl0sZnVuY3Rpb24oKXtjZS5wcm9wRml4W3RoaXMudG9Mb3dlckNhc2UoKV09dGhpc30pLGNlLmZuLmV4dGVuZCh7YWRkQ2xhc3M6ZnVuY3Rpb24odCl7dmFyIGUsbixyLGksbyxhO3JldHVybiB2KHQpP3RoaXMuZWFjaChmdW5jdGlvbihlKXtjZSh0aGlzKS5hZGRDbGFzcyh0LmNhbGwodGhpcyxlLEN0KHRoaXMpKSl9KTooZT1rdCh0KSkubGVuZ3RoP3RoaXMuZWFjaChmdW5jdGlvbigpe2lmKHI9Q3QodGhpcyksbj0xPT09dGhpcy5ub2RlVHlwZSYmXCIgXCIrVHQocikrXCIgXCIpe2ZvcihvPTA7bzxlLmxlbmd0aDtvKyspaT1lW29dLG4uaW5kZXhPZihcIiBcIitpK1wiIFwiKTwwJiYobis9aStcIiBcIik7YT1UdChuKSxyIT09YSYmdGhpcy5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLGEpfX0pOnRoaXN9LHJlbW92ZUNsYXNzOmZ1bmN0aW9uKHQpe3ZhciBlLG4scixpLG8sYTtyZXR1cm4gdih0KT90aGlzLmVhY2goZnVuY3Rpb24oZSl7Y2UodGhpcykucmVtb3ZlQ2xhc3ModC5jYWxsKHRoaXMsZSxDdCh0aGlzKSkpfSk6YXJndW1lbnRzLmxlbmd0aD8oZT1rdCh0KSkubGVuZ3RoP3RoaXMuZWFjaChmdW5jdGlvbigpe2lmKHI9Q3QodGhpcyksbj0xPT09dGhpcy5ub2RlVHlwZSYmXCIgXCIrVHQocikrXCIgXCIpe2ZvcihvPTA7bzxlLmxlbmd0aDtvKyspe2k9ZVtvXTt3aGlsZSgtMTxuLmluZGV4T2YoXCIgXCIraStcIiBcIikpbj1uLnJlcGxhY2UoXCIgXCIraStcIiBcIixcIiBcIil9YT1UdChuKSxyIT09YSYmdGhpcy5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLGEpfX0pOnRoaXM6dGhpcy5hdHRyKFwiY2xhc3NcIixcIlwiKX0sdG9nZ2xlQ2xhc3M6ZnVuY3Rpb24odCxuKXt2YXIgZSxyLGksbyxhPXR5cGVvZiB0LHM9XCJzdHJpbmdcIj09PWF8fEFycmF5LmlzQXJyYXkodCk7cmV0dXJuIHYodCk/dGhpcy5lYWNoKGZ1bmN0aW9uKGUpe2NlKHRoaXMpLnRvZ2dsZUNsYXNzKHQuY2FsbCh0aGlzLGUsQ3QodGhpcyksbiksbil9KTpcImJvb2xlYW5cIj09dHlwZW9mIG4mJnM/bj90aGlzLmFkZENsYXNzKHQpOnRoaXMucmVtb3ZlQ2xhc3ModCk6KGU9a3QodCksdGhpcy5lYWNoKGZ1bmN0aW9uKCl7aWYocylmb3Iobz1jZSh0aGlzKSxpPTA7aTxlLmxlbmd0aDtpKyspcj1lW2ldLG8uaGFzQ2xhc3Mocik/by5yZW1vdmVDbGFzcyhyKTpvLmFkZENsYXNzKHIpO2Vsc2Ugdm9pZCAwIT09dCYmXCJib29sZWFuXCIhPT1hfHwoKHI9Q3QodGhpcykpJiZfLnNldCh0aGlzLFwiX19jbGFzc05hbWVfX1wiLHIpLHRoaXMuc2V0QXR0cmlidXRlJiZ0aGlzLnNldEF0dHJpYnV0ZShcImNsYXNzXCIscnx8ITE9PT10P1wiXCI6Xy5nZXQodGhpcyxcIl9fY2xhc3NOYW1lX19cIil8fFwiXCIpKX0pKX0saGFzQ2xhc3M6ZnVuY3Rpb24oZSl7dmFyIHQsbixyPTA7dD1cIiBcIitlK1wiIFwiO3doaWxlKG49dGhpc1tyKytdKWlmKDE9PT1uLm5vZGVUeXBlJiYtMTwoXCIgXCIrVHQoQ3QobikpK1wiIFwiKS5pbmRleE9mKHQpKXJldHVybiEwO3JldHVybiExfX0pO3ZhciBTdD0vXFxyL2c7Y2UuZm4uZXh0ZW5kKHt2YWw6ZnVuY3Rpb24obil7dmFyIHIsZSxpLHQ9dGhpc1swXTtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8oaT12KG4pLHRoaXMuZWFjaChmdW5jdGlvbihlKXt2YXIgdDsxPT09dGhpcy5ub2RlVHlwZSYmKG51bGw9PSh0PWk/bi5jYWxsKHRoaXMsZSxjZSh0aGlzKS52YWwoKSk6bik/dD1cIlwiOlwibnVtYmVyXCI9PXR5cGVvZiB0P3QrPVwiXCI6QXJyYXkuaXNBcnJheSh0KSYmKHQ9Y2UubWFwKHQsZnVuY3Rpb24oZSl7cmV0dXJuIG51bGw9PWU/XCJcIjplK1wiXCJ9KSksKHI9Y2UudmFsSG9va3NbdGhpcy50eXBlXXx8Y2UudmFsSG9va3NbdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpXSkmJlwic2V0XCJpbiByJiZ2b2lkIDAhPT1yLnNldCh0aGlzLHQsXCJ2YWx1ZVwiKXx8KHRoaXMudmFsdWU9dCkpfSkpOnQ/KHI9Y2UudmFsSG9va3NbdC50eXBlXXx8Y2UudmFsSG9va3NbdC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpXSkmJlwiZ2V0XCJpbiByJiZ2b2lkIDAhPT0oZT1yLmdldCh0LFwidmFsdWVcIikpP2U6XCJzdHJpbmdcIj09dHlwZW9mKGU9dC52YWx1ZSk/ZS5yZXBsYWNlKFN0LFwiXCIpOm51bGw9PWU/XCJcIjplOnZvaWQgMH19KSxjZS5leHRlbmQoe3ZhbEhvb2tzOntvcHRpb246e2dldDpmdW5jdGlvbihlKXt2YXIgdD1jZS5maW5kLmF0dHIoZSxcInZhbHVlXCIpO3JldHVybiBudWxsIT10P3Q6VHQoY2UudGV4dChlKSl9fSxzZWxlY3Q6e2dldDpmdW5jdGlvbihlKXt2YXIgdCxuLHIsaT1lLm9wdGlvbnMsbz1lLnNlbGVjdGVkSW5kZXgsYT1cInNlbGVjdC1vbmVcIj09PWUudHlwZSxzPWE/bnVsbDpbXSx1PWE/bysxOmkubGVuZ3RoO2ZvcihyPW88MD91OmE/bzowO3I8dTtyKyspaWYoKChuPWlbcl0pLnNlbGVjdGVkfHxyPT09bykmJiFuLmRpc2FibGVkJiYoIW4ucGFyZW50Tm9kZS5kaXNhYmxlZHx8IWZlKG4ucGFyZW50Tm9kZSxcIm9wdGdyb3VwXCIpKSl7aWYodD1jZShuKS52YWwoKSxhKXJldHVybiB0O3MucHVzaCh0KX1yZXR1cm4gc30sc2V0OmZ1bmN0aW9uKGUsdCl7dmFyIG4scixpPWUub3B0aW9ucyxvPWNlLm1ha2VBcnJheSh0KSxhPWkubGVuZ3RoO3doaWxlKGEtLSkoKHI9aVthXSkuc2VsZWN0ZWQ9LTE8Y2UuaW5BcnJheShjZS52YWxIb29rcy5vcHRpb24uZ2V0KHIpLG8pKSYmKG49ITApO3JldHVybiBufHwoZS5zZWxlY3RlZEluZGV4PS0xKSxvfX19fSksY2UuZWFjaChbXCJyYWRpb1wiLFwiY2hlY2tib3hcIl0sZnVuY3Rpb24oKXtjZS52YWxIb29rc1t0aGlzXT17c2V0OmZ1bmN0aW9uKGUsdCl7aWYoQXJyYXkuaXNBcnJheSh0KSlyZXR1cm4gZS5jaGVja2VkPS0xPGNlLmluQXJyYXkoY2UoZSkudmFsKCksdCl9fSxsZS5jaGVja09ufHwoY2UudmFsSG9va3NbdGhpc10uZ2V0PWZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT09ZS5nZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKT9cIm9uXCI6ZS52YWx1ZX0pfSk7dmFyIEV0PWllLmxvY2F0aW9uLGp0PXtndWlkOkRhdGUubm93KCl9LEF0PS9cXD8vO2NlLnBhcnNlWE1MPWZ1bmN0aW9uKGUpe3ZhciB0LG47aWYoIWV8fFwic3RyaW5nXCIhPXR5cGVvZiBlKXJldHVybiBudWxsO3RyeXt0PShuZXcgaWUuRE9NUGFyc2VyKS5wYXJzZUZyb21TdHJpbmcoZSxcInRleHQveG1sXCIpfWNhdGNoKGUpe31yZXR1cm4gbj10JiZ0LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwicGFyc2VyZXJyb3JcIilbMF0sdCYmIW58fGNlLmVycm9yKFwiSW52YWxpZCBYTUw6IFwiKyhuP2NlLm1hcChuLmNoaWxkTm9kZXMsZnVuY3Rpb24oZSl7cmV0dXJuIGUudGV4dENvbnRlbnR9KS5qb2luKFwiXFxuXCIpOmUpKSx0fTt2YXIgRHQ9L14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvLE50PWZ1bmN0aW9uKGUpe2Uuc3RvcFByb3BhZ2F0aW9uKCl9O2NlLmV4dGVuZChjZS5ldmVudCx7dHJpZ2dlcjpmdW5jdGlvbihlLHQsbixyKXt2YXIgaSxvLGEscyx1LGwsYyxmLHA9W258fENdLGQ9dWUuY2FsbChlLFwidHlwZVwiKT9lLnR5cGU6ZSxoPXVlLmNhbGwoZSxcIm5hbWVzcGFjZVwiKT9lLm5hbWVzcGFjZS5zcGxpdChcIi5cIik6W107aWYobz1mPWE9bj1ufHxDLDMhPT1uLm5vZGVUeXBlJiY4IT09bi5ub2RlVHlwZSYmIUR0LnRlc3QoZCtjZS5ldmVudC50cmlnZ2VyZWQpJiYoLTE8ZC5pbmRleE9mKFwiLlwiKSYmKGQ9KGg9ZC5zcGxpdChcIi5cIikpLnNoaWZ0KCksaC5zb3J0KCkpLHU9ZC5pbmRleE9mKFwiOlwiKTwwJiZcIm9uXCIrZCwoZT1lW2NlLmV4cGFuZG9dP2U6bmV3IGNlLkV2ZW50KGQsXCJvYmplY3RcIj09dHlwZW9mIGUmJmUpKS5pc1RyaWdnZXI9cj8yOjMsZS5uYW1lc3BhY2U9aC5qb2luKFwiLlwiKSxlLnJuYW1lc3BhY2U9ZS5uYW1lc3BhY2U/bmV3IFJlZ0V4cChcIihefFxcXFwuKVwiK2guam9pbihcIlxcXFwuKD86LipcXFxcLnwpXCIpK1wiKFxcXFwufCQpXCIpOm51bGwsZS5yZXN1bHQ9dm9pZCAwLGUudGFyZ2V0fHwoZS50YXJnZXQ9biksdD1udWxsPT10P1tlXTpjZS5tYWtlQXJyYXkodCxbZV0pLGM9Y2UuZXZlbnQuc3BlY2lhbFtkXXx8e30scnx8IWMudHJpZ2dlcnx8ITEhPT1jLnRyaWdnZXIuYXBwbHkobix0KSkpe2lmKCFyJiYhYy5ub0J1YmJsZSYmIXkobikpe2ZvcihzPWMuZGVsZWdhdGVUeXBlfHxkLER0LnRlc3QocytkKXx8KG89by5wYXJlbnROb2RlKTtvO289by5wYXJlbnROb2RlKXAucHVzaChvKSxhPW87YT09PShuLm93bmVyRG9jdW1lbnR8fEMpJiZwLnB1c2goYS5kZWZhdWx0Vmlld3x8YS5wYXJlbnRXaW5kb3d8fGllKX1pPTA7d2hpbGUoKG89cFtpKytdKSYmIWUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlmPW8sZS50eXBlPTE8aT9zOmMuYmluZFR5cGV8fGQsKGw9KF8uZ2V0KG8sXCJldmVudHNcIil8fE9iamVjdC5jcmVhdGUobnVsbCkpW2UudHlwZV0mJl8uZ2V0KG8sXCJoYW5kbGVcIikpJiZsLmFwcGx5KG8sdCksKGw9dSYmb1t1XSkmJmwuYXBwbHkmJiQobykmJihlLnJlc3VsdD1sLmFwcGx5KG8sdCksITE9PT1lLnJlc3VsdCYmZS5wcmV2ZW50RGVmYXVsdCgpKTtyZXR1cm4gZS50eXBlPWQscnx8ZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKXx8Yy5fZGVmYXVsdCYmITEhPT1jLl9kZWZhdWx0LmFwcGx5KHAucG9wKCksdCl8fCEkKG4pfHx1JiZ2KG5bZF0pJiYheShuKSYmKChhPW5bdV0pJiYoblt1XT1udWxsKSxjZS5ldmVudC50cmlnZ2VyZWQ9ZCxlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkmJmYuYWRkRXZlbnRMaXN0ZW5lcihkLE50KSxuW2RdKCksZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpJiZmLnJlbW92ZUV2ZW50TGlzdGVuZXIoZCxOdCksY2UuZXZlbnQudHJpZ2dlcmVkPXZvaWQgMCxhJiYoblt1XT1hKSksZS5yZXN1bHR9fSxzaW11bGF0ZTpmdW5jdGlvbihlLHQsbil7dmFyIHI9Y2UuZXh0ZW5kKG5ldyBjZS5FdmVudCxuLHt0eXBlOmUsaXNTaW11bGF0ZWQ6ITB9KTtjZS5ldmVudC50cmlnZ2VyKHIsbnVsbCx0KX19KSxjZS5mbi5leHRlbmQoe3RyaWdnZXI6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7Y2UuZXZlbnQudHJpZ2dlcihlLHQsdGhpcyl9KX0sdHJpZ2dlckhhbmRsZXI6ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzWzBdO2lmKG4pcmV0dXJuIGNlLmV2ZW50LnRyaWdnZXIoZSx0LG4sITApfX0pO3ZhciBxdD0vXFxbXFxdJC8sTHQ9L1xccj9cXG4vZyxIdD0vXig/OnN1Ym1pdHxidXR0b258aW1hZ2V8cmVzZXR8ZmlsZSkkL2ksT3Q9L14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pO2Z1bmN0aW9uIFB0KG4sZSxyLGkpe3ZhciB0O2lmKEFycmF5LmlzQXJyYXkoZSkpY2UuZWFjaChlLGZ1bmN0aW9uKGUsdCl7cnx8cXQudGVzdChuKT9pKG4sdCk6UHQobitcIltcIisoXCJvYmplY3RcIj09dHlwZW9mIHQmJm51bGwhPXQ/ZTpcIlwiKStcIl1cIix0LHIsaSl9KTtlbHNlIGlmKHJ8fFwib2JqZWN0XCIhPT14KGUpKWkobixlKTtlbHNlIGZvcih0IGluIGUpUHQobitcIltcIit0K1wiXVwiLGVbdF0scixpKX1jZS5wYXJhbT1mdW5jdGlvbihlLHQpe3ZhciBuLHI9W10saT1mdW5jdGlvbihlLHQpe3ZhciBuPXYodCk/dCgpOnQ7cltyLmxlbmd0aF09ZW5jb2RlVVJJQ29tcG9uZW50KGUpK1wiPVwiK2VuY29kZVVSSUNvbXBvbmVudChudWxsPT1uP1wiXCI6bil9O2lmKG51bGw9PWUpcmV0dXJuXCJcIjtpZihBcnJheS5pc0FycmF5KGUpfHxlLmpxdWVyeSYmIWNlLmlzUGxhaW5PYmplY3QoZSkpY2UuZWFjaChlLGZ1bmN0aW9uKCl7aSh0aGlzLm5hbWUsdGhpcy52YWx1ZSl9KTtlbHNlIGZvcihuIGluIGUpUHQobixlW25dLHQsaSk7cmV0dXJuIHIuam9pbihcIiZcIil9LGNlLmZuLmV4dGVuZCh7c2VyaWFsaXplOmZ1bmN0aW9uKCl7cmV0dXJuIGNlLnBhcmFtKHRoaXMuc2VyaWFsaXplQXJyYXkoKSl9LHNlcmlhbGl6ZUFycmF5OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKCl7dmFyIGU9Y2UucHJvcCh0aGlzLFwiZWxlbWVudHNcIik7cmV0dXJuIGU/Y2UubWFrZUFycmF5KGUpOnRoaXN9KS5maWx0ZXIoZnVuY3Rpb24oKXt2YXIgZT10aGlzLnR5cGU7cmV0dXJuIHRoaXMubmFtZSYmIWNlKHRoaXMpLmlzKFwiOmRpc2FibGVkXCIpJiZPdC50ZXN0KHRoaXMubm9kZU5hbWUpJiYhSHQudGVzdChlKSYmKHRoaXMuY2hlY2tlZHx8IXdlLnRlc3QoZSkpfSkubWFwKGZ1bmN0aW9uKGUsdCl7dmFyIG49Y2UodGhpcykudmFsKCk7cmV0dXJuIG51bGw9PW4/bnVsbDpBcnJheS5pc0FycmF5KG4pP2NlLm1hcChuLGZ1bmN0aW9uKGUpe3JldHVybntuYW1lOnQubmFtZSx2YWx1ZTplLnJlcGxhY2UoTHQsXCJcXHJcXG5cIil9fSk6e25hbWU6dC5uYW1lLHZhbHVlOm4ucmVwbGFjZShMdCxcIlxcclxcblwiKX19KS5nZXQoKX19KTt2YXIgTXQ9LyUyMC9nLFJ0PS8jLiokLyxJdD0vKFs/Jl0pXz1bXiZdKi8sV3Q9L14oLio/KTpbIFxcdF0qKFteXFxyXFxuXSopJC9nbSxGdD0vXig/OkdFVHxIRUFEKSQvLCR0PS9eXFwvXFwvLyxCdD17fSxfdD17fSx6dD1cIiovXCIuY29uY2F0KFwiKlwiKSxYdD1DLmNyZWF0ZUVsZW1lbnQoXCJhXCIpO2Z1bmN0aW9uIFV0KG8pe3JldHVybiBmdW5jdGlvbihlLHQpe1wic3RyaW5nXCIhPXR5cGVvZiBlJiYodD1lLGU9XCIqXCIpO3ZhciBuLHI9MCxpPWUudG9Mb3dlckNhc2UoKS5tYXRjaChEKXx8W107aWYodih0KSl3aGlsZShuPWlbcisrXSlcIitcIj09PW5bMF0/KG49bi5zbGljZSgxKXx8XCIqXCIsKG9bbl09b1tuXXx8W10pLnVuc2hpZnQodCkpOihvW25dPW9bbl18fFtdKS5wdXNoKHQpfX1mdW5jdGlvbiBWdCh0LGksbyxhKXt2YXIgcz17fSx1PXQ9PT1fdDtmdW5jdGlvbiBsKGUpe3ZhciByO3JldHVybiBzW2VdPSEwLGNlLmVhY2godFtlXXx8W10sZnVuY3Rpb24oZSx0KXt2YXIgbj10KGksbyxhKTtyZXR1cm5cInN0cmluZ1wiIT10eXBlb2Ygbnx8dXx8c1tuXT91PyEocj1uKTp2b2lkIDA6KGkuZGF0YVR5cGVzLnVuc2hpZnQobiksbChuKSwhMSl9KSxyfXJldHVybiBsKGkuZGF0YVR5cGVzWzBdKXx8IXNbXCIqXCJdJiZsKFwiKlwiKX1mdW5jdGlvbiBHdChlLHQpe3ZhciBuLHIsaT1jZS5hamF4U2V0dGluZ3MuZmxhdE9wdGlvbnN8fHt9O2ZvcihuIGluIHQpdm9pZCAwIT09dFtuXSYmKChpW25dP2U6cnx8KHI9e30pKVtuXT10W25dKTtyZXR1cm4gciYmY2UuZXh0ZW5kKCEwLGUsciksZX1YdC5ocmVmPUV0LmhyZWYsY2UuZXh0ZW5kKHthY3RpdmU6MCxsYXN0TW9kaWZpZWQ6e30sZXRhZzp7fSxhamF4U2V0dGluZ3M6e3VybDpFdC5ocmVmLHR5cGU6XCJHRVRcIixpc0xvY2FsOi9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLnRlc3QoRXQucHJvdG9jb2wpLGdsb2JhbDohMCxwcm9jZXNzRGF0YTohMCxhc3luYzohMCxjb250ZW50VHlwZTpcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOFwiLGFjY2VwdHM6e1wiKlwiOnp0LHRleHQ6XCJ0ZXh0L3BsYWluXCIsaHRtbDpcInRleHQvaHRtbFwiLHhtbDpcImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWxcIixqc29uOlwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCJ9LGNvbnRlbnRzOnt4bWw6L1xcYnhtbFxcYi8saHRtbDovXFxiaHRtbC8sanNvbjovXFxianNvblxcYi99LHJlc3BvbnNlRmllbGRzOnt4bWw6XCJyZXNwb25zZVhNTFwiLHRleHQ6XCJyZXNwb25zZVRleHRcIixqc29uOlwicmVzcG9uc2VKU09OXCJ9LGNvbnZlcnRlcnM6e1wiKiB0ZXh0XCI6U3RyaW5nLFwidGV4dCBodG1sXCI6ITAsXCJ0ZXh0IGpzb25cIjpKU09OLnBhcnNlLFwidGV4dCB4bWxcIjpjZS5wYXJzZVhNTH0sZmxhdE9wdGlvbnM6e3VybDohMCxjb250ZXh0OiEwfX0sYWpheFNldHVwOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ/R3QoR3QoZSxjZS5hamF4U2V0dGluZ3MpLHQpOkd0KGNlLmFqYXhTZXR0aW5ncyxlKX0sYWpheFByZWZpbHRlcjpVdChCdCksYWpheFRyYW5zcG9ydDpVdChfdCksYWpheDpmdW5jdGlvbihlLHQpe1wib2JqZWN0XCI9PXR5cGVvZiBlJiYodD1lLGU9dm9pZCAwKSx0PXR8fHt9O3ZhciBjLGYscCxuLGQscixoLGcsaSxvLHY9Y2UuYWpheFNldHVwKHt9LHQpLHk9di5jb250ZXh0fHx2LG09di5jb250ZXh0JiYoeS5ub2RlVHlwZXx8eS5qcXVlcnkpP2NlKHkpOmNlLmV2ZW50LHg9Y2UuRGVmZXJyZWQoKSxiPWNlLkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLHc9di5zdGF0dXNDb2RlfHx7fSxhPXt9LHM9e30sdT1cImNhbmNlbGVkXCIsVD17cmVhZHlTdGF0ZTowLGdldFJlc3BvbnNlSGVhZGVyOmZ1bmN0aW9uKGUpe3ZhciB0O2lmKGgpe2lmKCFuKXtuPXt9O3doaWxlKHQ9V3QuZXhlYyhwKSluW3RbMV0udG9Mb3dlckNhc2UoKStcIiBcIl09KG5bdFsxXS50b0xvd2VyQ2FzZSgpK1wiIFwiXXx8W10pLmNvbmNhdCh0WzJdKX10PW5bZS50b0xvd2VyQ2FzZSgpK1wiIFwiXX1yZXR1cm4gbnVsbD09dD9udWxsOnQuam9pbihcIiwgXCIpfSxnZXRBbGxSZXNwb25zZUhlYWRlcnM6ZnVuY3Rpb24oKXtyZXR1cm4gaD9wOm51bGx9LHNldFJlcXVlc3RIZWFkZXI6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbnVsbD09aCYmKGU9c1tlLnRvTG93ZXJDYXNlKCldPXNbZS50b0xvd2VyQ2FzZSgpXXx8ZSxhW2VdPXQpLHRoaXN9LG92ZXJyaWRlTWltZVR5cGU6ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGw9PWgmJih2Lm1pbWVUeXBlPWUpLHRoaXN9LHN0YXR1c0NvZGU6ZnVuY3Rpb24oZSl7dmFyIHQ7aWYoZSlpZihoKVQuYWx3YXlzKGVbVC5zdGF0dXNdKTtlbHNlIGZvcih0IGluIGUpd1t0XT1bd1t0XSxlW3RdXTtyZXR1cm4gdGhpc30sYWJvcnQ6ZnVuY3Rpb24oZSl7dmFyIHQ9ZXx8dTtyZXR1cm4gYyYmYy5hYm9ydCh0KSxsKDAsdCksdGhpc319O2lmKHgucHJvbWlzZShUKSx2LnVybD0oKGV8fHYudXJsfHxFdC5ocmVmKStcIlwiKS5yZXBsYWNlKCR0LEV0LnByb3RvY29sK1wiLy9cIiksdi50eXBlPXQubWV0aG9kfHx0LnR5cGV8fHYubWV0aG9kfHx2LnR5cGUsdi5kYXRhVHlwZXM9KHYuZGF0YVR5cGV8fFwiKlwiKS50b0xvd2VyQ2FzZSgpLm1hdGNoKEQpfHxbXCJcIl0sbnVsbD09di5jcm9zc0RvbWFpbil7cj1DLmNyZWF0ZUVsZW1lbnQoXCJhXCIpO3RyeXtyLmhyZWY9di51cmwsci5ocmVmPXIuaHJlZix2LmNyb3NzRG9tYWluPVh0LnByb3RvY29sK1wiLy9cIitYdC5ob3N0IT1yLnByb3RvY29sK1wiLy9cIityLmhvc3R9Y2F0Y2goZSl7di5jcm9zc0RvbWFpbj0hMH19aWYodi5kYXRhJiZ2LnByb2Nlc3NEYXRhJiZcInN0cmluZ1wiIT10eXBlb2Ygdi5kYXRhJiYodi5kYXRhPWNlLnBhcmFtKHYuZGF0YSx2LnRyYWRpdGlvbmFsKSksVnQoQnQsdix0LFQpLGgpcmV0dXJuIFQ7Zm9yKGkgaW4oZz1jZS5ldmVudCYmdi5nbG9iYWwpJiYwPT1jZS5hY3RpdmUrKyYmY2UuZXZlbnQudHJpZ2dlcihcImFqYXhTdGFydFwiKSx2LnR5cGU9di50eXBlLnRvVXBwZXJDYXNlKCksdi5oYXNDb250ZW50PSFGdC50ZXN0KHYudHlwZSksZj12LnVybC5yZXBsYWNlKFJ0LFwiXCIpLHYuaGFzQ29udGVudD92LmRhdGEmJnYucHJvY2Vzc0RhdGEmJjA9PT0odi5jb250ZW50VHlwZXx8XCJcIikuaW5kZXhPZihcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiKSYmKHYuZGF0YT12LmRhdGEucmVwbGFjZShNdCxcIitcIikpOihvPXYudXJsLnNsaWNlKGYubGVuZ3RoKSx2LmRhdGEmJih2LnByb2Nlc3NEYXRhfHxcInN0cmluZ1wiPT10eXBlb2Ygdi5kYXRhKSYmKGYrPShBdC50ZXN0KGYpP1wiJlwiOlwiP1wiKSt2LmRhdGEsZGVsZXRlIHYuZGF0YSksITE9PT12LmNhY2hlJiYoZj1mLnJlcGxhY2UoSXQsXCIkMVwiKSxvPShBdC50ZXN0KGYpP1wiJlwiOlwiP1wiKStcIl89XCIranQuZ3VpZCsrK28pLHYudXJsPWYrbyksdi5pZk1vZGlmaWVkJiYoY2UubGFzdE1vZGlmaWVkW2ZdJiZULnNldFJlcXVlc3RIZWFkZXIoXCJJZi1Nb2RpZmllZC1TaW5jZVwiLGNlLmxhc3RNb2RpZmllZFtmXSksY2UuZXRhZ1tmXSYmVC5zZXRSZXF1ZXN0SGVhZGVyKFwiSWYtTm9uZS1NYXRjaFwiLGNlLmV0YWdbZl0pKSwodi5kYXRhJiZ2Lmhhc0NvbnRlbnQmJiExIT09di5jb250ZW50VHlwZXx8dC5jb250ZW50VHlwZSkmJlQuc2V0UmVxdWVzdEhlYWRlcihcIkNvbnRlbnQtVHlwZVwiLHYuY29udGVudFR5cGUpLFQuc2V0UmVxdWVzdEhlYWRlcihcIkFjY2VwdFwiLHYuZGF0YVR5cGVzWzBdJiZ2LmFjY2VwdHNbdi5kYXRhVHlwZXNbMF1dP3YuYWNjZXB0c1t2LmRhdGFUeXBlc1swXV0rKFwiKlwiIT09di5kYXRhVHlwZXNbMF0/XCIsIFwiK3p0K1wiOyBxPTAuMDFcIjpcIlwiKTp2LmFjY2VwdHNbXCIqXCJdKSx2LmhlYWRlcnMpVC5zZXRSZXF1ZXN0SGVhZGVyKGksdi5oZWFkZXJzW2ldKTtpZih2LmJlZm9yZVNlbmQmJighMT09PXYuYmVmb3JlU2VuZC5jYWxsKHksVCx2KXx8aCkpcmV0dXJuIFQuYWJvcnQoKTtpZih1PVwiYWJvcnRcIixiLmFkZCh2LmNvbXBsZXRlKSxULmRvbmUodi5zdWNjZXNzKSxULmZhaWwodi5lcnJvciksYz1WdChfdCx2LHQsVCkpe2lmKFQucmVhZHlTdGF0ZT0xLGcmJm0udHJpZ2dlcihcImFqYXhTZW5kXCIsW1Qsdl0pLGgpcmV0dXJuIFQ7di5hc3luYyYmMDx2LnRpbWVvdXQmJihkPWllLnNldFRpbWVvdXQoZnVuY3Rpb24oKXtULmFib3J0KFwidGltZW91dFwiKX0sdi50aW1lb3V0KSk7dHJ5e2g9ITEsYy5zZW5kKGEsbCl9Y2F0Y2goZSl7aWYoaCl0aHJvdyBlO2woLTEsZSl9fWVsc2UgbCgtMSxcIk5vIFRyYW5zcG9ydFwiKTtmdW5jdGlvbiBsKGUsdCxuLHIpe3ZhciBpLG8sYSxzLHUsbD10O2h8fChoPSEwLGQmJmllLmNsZWFyVGltZW91dChkKSxjPXZvaWQgMCxwPXJ8fFwiXCIsVC5yZWFkeVN0YXRlPTA8ZT80OjAsaT0yMDA8PWUmJmU8MzAwfHwzMDQ9PT1lLG4mJihzPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcixpLG8sYSxzPWUuY29udGVudHMsdT1lLmRhdGFUeXBlczt3aGlsZShcIipcIj09PXVbMF0pdS5zaGlmdCgpLHZvaWQgMD09PXImJihyPWUubWltZVR5cGV8fHQuZ2V0UmVzcG9uc2VIZWFkZXIoXCJDb250ZW50LVR5cGVcIikpO2lmKHIpZm9yKGkgaW4gcylpZihzW2ldJiZzW2ldLnRlc3Qocikpe3UudW5zaGlmdChpKTticmVha31pZih1WzBdaW4gbilvPXVbMF07ZWxzZXtmb3IoaSBpbiBuKXtpZighdVswXXx8ZS5jb252ZXJ0ZXJzW2krXCIgXCIrdVswXV0pe289aTticmVha31hfHwoYT1pKX1vPW98fGF9aWYobylyZXR1cm4gbyE9PXVbMF0mJnUudW5zaGlmdChvKSxuW29dfSh2LFQsbikpLCFpJiYtMTxjZS5pbkFycmF5KFwic2NyaXB0XCIsdi5kYXRhVHlwZXMpJiZjZS5pbkFycmF5KFwianNvblwiLHYuZGF0YVR5cGVzKTwwJiYodi5jb252ZXJ0ZXJzW1widGV4dCBzY3JpcHRcIl09ZnVuY3Rpb24oKXt9KSxzPWZ1bmN0aW9uKGUsdCxuLHIpe3ZhciBpLG8sYSxzLHUsbD17fSxjPWUuZGF0YVR5cGVzLnNsaWNlKCk7aWYoY1sxXSlmb3IoYSBpbiBlLmNvbnZlcnRlcnMpbFthLnRvTG93ZXJDYXNlKCldPWUuY29udmVydGVyc1thXTtvPWMuc2hpZnQoKTt3aGlsZShvKWlmKGUucmVzcG9uc2VGaWVsZHNbb10mJihuW2UucmVzcG9uc2VGaWVsZHNbb11dPXQpLCF1JiZyJiZlLmRhdGFGaWx0ZXImJih0PWUuZGF0YUZpbHRlcih0LGUuZGF0YVR5cGUpKSx1PW8sbz1jLnNoaWZ0KCkpaWYoXCIqXCI9PT1vKW89dTtlbHNlIGlmKFwiKlwiIT09dSYmdSE9PW8pe2lmKCEoYT1sW3UrXCIgXCIrb118fGxbXCIqIFwiK29dKSlmb3IoaSBpbiBsKWlmKChzPWkuc3BsaXQoXCIgXCIpKVsxXT09PW8mJihhPWxbdStcIiBcIitzWzBdXXx8bFtcIiogXCIrc1swXV0pKXshMD09PWE/YT1sW2ldOiEwIT09bFtpXSYmKG89c1swXSxjLnVuc2hpZnQoc1sxXSkpO2JyZWFrfWlmKCEwIT09YSlpZihhJiZlW1widGhyb3dzXCJdKXQ9YSh0KTtlbHNlIHRyeXt0PWEodCl9Y2F0Y2goZSl7cmV0dXJue3N0YXRlOlwicGFyc2VyZXJyb3JcIixlcnJvcjphP2U6XCJObyBjb252ZXJzaW9uIGZyb20gXCIrdStcIiB0byBcIitvfX19cmV0dXJue3N0YXRlOlwic3VjY2Vzc1wiLGRhdGE6dH19KHYscyxULGkpLGk/KHYuaWZNb2RpZmllZCYmKCh1PVQuZ2V0UmVzcG9uc2VIZWFkZXIoXCJMYXN0LU1vZGlmaWVkXCIpKSYmKGNlLmxhc3RNb2RpZmllZFtmXT11KSwodT1ULmdldFJlc3BvbnNlSGVhZGVyKFwiZXRhZ1wiKSkmJihjZS5ldGFnW2ZdPXUpKSwyMDQ9PT1lfHxcIkhFQURcIj09PXYudHlwZT9sPVwibm9jb250ZW50XCI6MzA0PT09ZT9sPVwibm90bW9kaWZpZWRcIjoobD1zLnN0YXRlLG89cy5kYXRhLGk9IShhPXMuZXJyb3IpKSk6KGE9bCwhZSYmbHx8KGw9XCJlcnJvclwiLGU8MCYmKGU9MCkpKSxULnN0YXR1cz1lLFQuc3RhdHVzVGV4dD0odHx8bCkrXCJcIixpP3gucmVzb2x2ZVdpdGgoeSxbbyxsLFRdKTp4LnJlamVjdFdpdGgoeSxbVCxsLGFdKSxULnN0YXR1c0NvZGUodyksdz12b2lkIDAsZyYmbS50cmlnZ2VyKGk/XCJhamF4U3VjY2Vzc1wiOlwiYWpheEVycm9yXCIsW1QsdixpP286YV0pLGIuZmlyZVdpdGgoeSxbVCxsXSksZyYmKG0udHJpZ2dlcihcImFqYXhDb21wbGV0ZVwiLFtULHZdKSwtLWNlLmFjdGl2ZXx8Y2UuZXZlbnQudHJpZ2dlcihcImFqYXhTdG9wXCIpKSl9cmV0dXJuIFR9LGdldEpTT046ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBjZS5nZXQoZSx0LG4sXCJqc29uXCIpfSxnZXRTY3JpcHQ6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gY2UuZ2V0KGUsdm9pZCAwLHQsXCJzY3JpcHRcIil9fSksY2UuZWFjaChbXCJnZXRcIixcInBvc3RcIl0sZnVuY3Rpb24oZSxpKXtjZVtpXT1mdW5jdGlvbihlLHQsbixyKXtyZXR1cm4gdih0KSYmKHI9cnx8bixuPXQsdD12b2lkIDApLGNlLmFqYXgoY2UuZXh0ZW5kKHt1cmw6ZSx0eXBlOmksZGF0YVR5cGU6cixkYXRhOnQsc3VjY2VzczpufSxjZS5pc1BsYWluT2JqZWN0KGUpJiZlKSl9fSksY2UuYWpheFByZWZpbHRlcihmdW5jdGlvbihlKXt2YXIgdDtmb3IodCBpbiBlLmhlYWRlcnMpXCJjb250ZW50LXR5cGVcIj09PXQudG9Mb3dlckNhc2UoKSYmKGUuY29udGVudFR5cGU9ZS5oZWFkZXJzW3RdfHxcIlwiKX0pLGNlLl9ldmFsVXJsPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gY2UuYWpheCh7dXJsOmUsdHlwZTpcIkdFVFwiLGRhdGFUeXBlOlwic2NyaXB0XCIsY2FjaGU6ITAsYXN5bmM6ITEsZ2xvYmFsOiExLGNvbnZlcnRlcnM6e1widGV4dCBzY3JpcHRcIjpmdW5jdGlvbigpe319LGRhdGFGaWx0ZXI6ZnVuY3Rpb24oZSl7Y2UuZ2xvYmFsRXZhbChlLHQsbil9fSl9LGNlLmZuLmV4dGVuZCh7d3JhcEFsbDpmdW5jdGlvbihlKXt2YXIgdDtyZXR1cm4gdGhpc1swXSYmKHYoZSkmJihlPWUuY2FsbCh0aGlzWzBdKSksdD1jZShlLHRoaXNbMF0ub3duZXJEb2N1bWVudCkuZXEoMCkuY2xvbmUoITApLHRoaXNbMF0ucGFyZW50Tm9kZSYmdC5pbnNlcnRCZWZvcmUodGhpc1swXSksdC5tYXAoZnVuY3Rpb24oKXt2YXIgZT10aGlzO3doaWxlKGUuZmlyc3RFbGVtZW50Q2hpbGQpZT1lLmZpcnN0RWxlbWVudENoaWxkO3JldHVybiBlfSkuYXBwZW5kKHRoaXMpKSx0aGlzfSx3cmFwSW5uZXI6ZnVuY3Rpb24obil7cmV0dXJuIHYobik/dGhpcy5lYWNoKGZ1bmN0aW9uKGUpe2NlKHRoaXMpLndyYXBJbm5lcihuLmNhbGwodGhpcyxlKSl9KTp0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgZT1jZSh0aGlzKSx0PWUuY29udGVudHMoKTt0Lmxlbmd0aD90LndyYXBBbGwobik6ZS5hcHBlbmQobil9KX0sd3JhcDpmdW5jdGlvbih0KXt2YXIgbj12KHQpO3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oZSl7Y2UodGhpcykud3JhcEFsbChuP3QuY2FsbCh0aGlzLGUpOnQpfSl9LHVud3JhcDpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5wYXJlbnQoZSkubm90KFwiYm9keVwiKS5lYWNoKGZ1bmN0aW9uKCl7Y2UodGhpcykucmVwbGFjZVdpdGgodGhpcy5jaGlsZE5vZGVzKX0pLHRoaXN9fSksY2UuZXhwci5wc2V1ZG9zLmhpZGRlbj1mdW5jdGlvbihlKXtyZXR1cm4hY2UuZXhwci5wc2V1ZG9zLnZpc2libGUoZSl9LGNlLmV4cHIucHNldWRvcy52aXNpYmxlPWZ1bmN0aW9uKGUpe3JldHVybiEhKGUub2Zmc2V0V2lkdGh8fGUub2Zmc2V0SGVpZ2h0fHxlLmdldENsaWVudFJlY3RzKCkubGVuZ3RoKX0sY2UuYWpheFNldHRpbmdzLnhocj1mdW5jdGlvbigpe3RyeXtyZXR1cm4gbmV3IGllLlhNTEh0dHBSZXF1ZXN0fWNhdGNoKGUpe319O3ZhciBZdD17MDoyMDAsMTIyMzoyMDR9LFF0PWNlLmFqYXhTZXR0aW5ncy54aHIoKTtsZS5jb3JzPSEhUXQmJlwid2l0aENyZWRlbnRpYWxzXCJpbiBRdCxsZS5hamF4PVF0PSEhUXQsY2UuYWpheFRyYW5zcG9ydChmdW5jdGlvbihpKXt2YXIgbyxhO2lmKGxlLmNvcnN8fFF0JiYhaS5jcm9zc0RvbWFpbilyZXR1cm57c2VuZDpmdW5jdGlvbihlLHQpe3ZhciBuLHI9aS54aHIoKTtpZihyLm9wZW4oaS50eXBlLGkudXJsLGkuYXN5bmMsaS51c2VybmFtZSxpLnBhc3N3b3JkKSxpLnhockZpZWxkcylmb3IobiBpbiBpLnhockZpZWxkcylyW25dPWkueGhyRmllbGRzW25dO2ZvcihuIGluIGkubWltZVR5cGUmJnIub3ZlcnJpZGVNaW1lVHlwZSYmci5vdmVycmlkZU1pbWVUeXBlKGkubWltZVR5cGUpLGkuY3Jvc3NEb21haW58fGVbXCJYLVJlcXVlc3RlZC1XaXRoXCJdfHwoZVtcIlgtUmVxdWVzdGVkLVdpdGhcIl09XCJYTUxIdHRwUmVxdWVzdFwiKSxlKXIuc2V0UmVxdWVzdEhlYWRlcihuLGVbbl0pO289ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKCl7byYmKG89YT1yLm9ubG9hZD1yLm9uZXJyb3I9ci5vbmFib3J0PXIub250aW1lb3V0PXIub25yZWFkeXN0YXRlY2hhbmdlPW51bGwsXCJhYm9ydFwiPT09ZT9yLmFib3J0KCk6XCJlcnJvclwiPT09ZT9cIm51bWJlclwiIT10eXBlb2Ygci5zdGF0dXM/dCgwLFwiZXJyb3JcIik6dChyLnN0YXR1cyxyLnN0YXR1c1RleHQpOnQoWXRbci5zdGF0dXNdfHxyLnN0YXR1cyxyLnN0YXR1c1RleHQsXCJ0ZXh0XCIhPT0oci5yZXNwb25zZVR5cGV8fFwidGV4dFwiKXx8XCJzdHJpbmdcIiE9dHlwZW9mIHIucmVzcG9uc2VUZXh0P3tiaW5hcnk6ci5yZXNwb25zZX06e3RleHQ6ci5yZXNwb25zZVRleHR9LHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpKX19LHIub25sb2FkPW8oKSxhPXIub25lcnJvcj1yLm9udGltZW91dD1vKFwiZXJyb3JcIiksdm9pZCAwIT09ci5vbmFib3J0P3Iub25hYm9ydD1hOnIub25yZWFkeXN0YXRlY2hhbmdlPWZ1bmN0aW9uKCl7ND09PXIucmVhZHlTdGF0ZSYmaWUuc2V0VGltZW91dChmdW5jdGlvbigpe28mJmEoKX0pfSxvPW8oXCJhYm9ydFwiKTt0cnl7ci5zZW5kKGkuaGFzQ29udGVudCYmaS5kYXRhfHxudWxsKX1jYXRjaChlKXtpZihvKXRocm93IGV9fSxhYm9ydDpmdW5jdGlvbigpe28mJm8oKX19fSksY2UuYWpheFByZWZpbHRlcihmdW5jdGlvbihlKXtlLmNyb3NzRG9tYWluJiYoZS5jb250ZW50cy5zY3JpcHQ9ITEpfSksY2UuYWpheFNldHVwKHthY2NlcHRzOntzY3JpcHQ6XCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2VjbWFzY3JpcHQsIGFwcGxpY2F0aW9uL3gtZWNtYXNjcmlwdFwifSxjb250ZW50czp7c2NyaXB0Oi9cXGIoPzpqYXZhfGVjbWEpc2NyaXB0XFxiL30sY29udmVydGVyczp7XCJ0ZXh0IHNjcmlwdFwiOmZ1bmN0aW9uKGUpe3JldHVybiBjZS5nbG9iYWxFdmFsKGUpLGV9fX0pLGNlLmFqYXhQcmVmaWx0ZXIoXCJzY3JpcHRcIixmdW5jdGlvbihlKXt2b2lkIDA9PT1lLmNhY2hlJiYoZS5jYWNoZT0hMSksZS5jcm9zc0RvbWFpbiYmKGUudHlwZT1cIkdFVFwiKX0pLGNlLmFqYXhUcmFuc3BvcnQoXCJzY3JpcHRcIixmdW5jdGlvbihuKXt2YXIgcixpO2lmKG4uY3Jvc3NEb21haW58fG4uc2NyaXB0QXR0cnMpcmV0dXJue3NlbmQ6ZnVuY3Rpb24oZSx0KXtyPWNlKFwiPHNjcmlwdD5cIikuYXR0cihuLnNjcmlwdEF0dHJzfHx7fSkucHJvcCh7Y2hhcnNldDpuLnNjcmlwdENoYXJzZXQsc3JjOm4udXJsfSkub24oXCJsb2FkIGVycm9yXCIsaT1mdW5jdGlvbihlKXtyLnJlbW92ZSgpLGk9bnVsbCxlJiZ0KFwiZXJyb3JcIj09PWUudHlwZT80MDQ6MjAwLGUudHlwZSl9KSxDLmhlYWQuYXBwZW5kQ2hpbGQoclswXSl9LGFib3J0OmZ1bmN0aW9uKCl7aSYmaSgpfX19KTt2YXIgSnQsS3Q9W10sWnQ9Lyg9KVxcPyg/PSZ8JCl8XFw/XFw/LztjZS5hamF4U2V0dXAoe2pzb25wOlwiY2FsbGJhY2tcIixqc29ucENhbGxiYWNrOmZ1bmN0aW9uKCl7dmFyIGU9S3QucG9wKCl8fGNlLmV4cGFuZG8rXCJfXCIranQuZ3VpZCsrO3JldHVybiB0aGlzW2VdPSEwLGV9fSksY2UuYWpheFByZWZpbHRlcihcImpzb24ganNvbnBcIixmdW5jdGlvbihlLHQsbil7dmFyIHIsaSxvLGE9ITEhPT1lLmpzb25wJiYoWnQudGVzdChlLnVybCk/XCJ1cmxcIjpcInN0cmluZ1wiPT10eXBlb2YgZS5kYXRhJiYwPT09KGUuY29udGVudFR5cGV8fFwiXCIpLmluZGV4T2YoXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIikmJlp0LnRlc3QoZS5kYXRhKSYmXCJkYXRhXCIpO2lmKGF8fFwianNvbnBcIj09PWUuZGF0YVR5cGVzWzBdKXJldHVybiByPWUuanNvbnBDYWxsYmFjaz12KGUuanNvbnBDYWxsYmFjayk/ZS5qc29ucENhbGxiYWNrKCk6ZS5qc29ucENhbGxiYWNrLGE/ZVthXT1lW2FdLnJlcGxhY2UoWnQsXCIkMVwiK3IpOiExIT09ZS5qc29ucCYmKGUudXJsKz0oQXQudGVzdChlLnVybCk/XCImXCI6XCI/XCIpK2UuanNvbnArXCI9XCIrciksZS5jb252ZXJ0ZXJzW1wic2NyaXB0IGpzb25cIl09ZnVuY3Rpb24oKXtyZXR1cm4gb3x8Y2UuZXJyb3IocitcIiB3YXMgbm90IGNhbGxlZFwiKSxvWzBdfSxlLmRhdGFUeXBlc1swXT1cImpzb25cIixpPWllW3JdLGllW3JdPWZ1bmN0aW9uKCl7bz1hcmd1bWVudHN9LG4uYWx3YXlzKGZ1bmN0aW9uKCl7dm9pZCAwPT09aT9jZShpZSkucmVtb3ZlUHJvcChyKTppZVtyXT1pLGVbcl0mJihlLmpzb25wQ2FsbGJhY2s9dC5qc29ucENhbGxiYWNrLEt0LnB1c2gocikpLG8mJnYoaSkmJmkob1swXSksbz1pPXZvaWQgMH0pLFwic2NyaXB0XCJ9KSxsZS5jcmVhdGVIVE1MRG9jdW1lbnQ9KChKdD1DLmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudChcIlwiKS5ib2R5KS5pbm5lckhUTUw9XCI8Zm9ybT48L2Zvcm0+PGZvcm0+PC9mb3JtPlwiLDI9PT1KdC5jaGlsZE5vZGVzLmxlbmd0aCksY2UucGFyc2VIVE1MPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm5cInN0cmluZ1wiIT10eXBlb2YgZT9bXTooXCJib29sZWFuXCI9PXR5cGVvZiB0JiYobj10LHQ9ITEpLHR8fChsZS5jcmVhdGVIVE1MRG9jdW1lbnQ/KChyPSh0PUMuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KFwiXCIpKS5jcmVhdGVFbGVtZW50KFwiYmFzZVwiKSkuaHJlZj1DLmxvY2F0aW9uLmhyZWYsdC5oZWFkLmFwcGVuZENoaWxkKHIpKTp0PUMpLG89IW4mJltdLChpPXcuZXhlYyhlKSk/W3QuY3JlYXRlRWxlbWVudChpWzFdKV06KGk9QWUoW2VdLHQsbyksbyYmby5sZW5ndGgmJmNlKG8pLnJlbW92ZSgpLGNlLm1lcmdlKFtdLGkuY2hpbGROb2RlcykpKTt2YXIgcixpLG99LGNlLmZuLmxvYWQ9ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbyxhPXRoaXMscz1lLmluZGV4T2YoXCIgXCIpO3JldHVybi0xPHMmJihyPVR0KGUuc2xpY2UocykpLGU9ZS5zbGljZSgwLHMpKSx2KHQpPyhuPXQsdD12b2lkIDApOnQmJlwib2JqZWN0XCI9PXR5cGVvZiB0JiYoaT1cIlBPU1RcIiksMDxhLmxlbmd0aCYmY2UuYWpheCh7dXJsOmUsdHlwZTppfHxcIkdFVFwiLGRhdGFUeXBlOlwiaHRtbFwiLGRhdGE6dH0pLmRvbmUoZnVuY3Rpb24oZSl7bz1hcmd1bWVudHMsYS5odG1sKHI/Y2UoXCI8ZGl2PlwiKS5hcHBlbmQoY2UucGFyc2VIVE1MKGUpKS5maW5kKHIpOmUpfSkuYWx3YXlzKG4mJmZ1bmN0aW9uKGUsdCl7YS5lYWNoKGZ1bmN0aW9uKCl7bi5hcHBseSh0aGlzLG98fFtlLnJlc3BvbnNlVGV4dCx0LGVdKX0pfSksdGhpc30sY2UuZXhwci5wc2V1ZG9zLmFuaW1hdGVkPWZ1bmN0aW9uKHQpe3JldHVybiBjZS5ncmVwKGNlLnRpbWVycyxmdW5jdGlvbihlKXtyZXR1cm4gdD09PWUuZWxlbX0pLmxlbmd0aH0sY2Uub2Zmc2V0PXtzZXRPZmZzZXQ6ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbyxhLHMsdSxsPWNlLmNzcyhlLFwicG9zaXRpb25cIiksYz1jZShlKSxmPXt9O1wic3RhdGljXCI9PT1sJiYoZS5zdHlsZS5wb3NpdGlvbj1cInJlbGF0aXZlXCIpLHM9Yy5vZmZzZXQoKSxvPWNlLmNzcyhlLFwidG9wXCIpLHU9Y2UuY3NzKGUsXCJsZWZ0XCIpLChcImFic29sdXRlXCI9PT1sfHxcImZpeGVkXCI9PT1sKSYmLTE8KG8rdSkuaW5kZXhPZihcImF1dG9cIik/KGE9KHI9Yy5wb3NpdGlvbigpKS50b3AsaT1yLmxlZnQpOihhPXBhcnNlRmxvYXQobyl8fDAsaT1wYXJzZUZsb2F0KHUpfHwwKSx2KHQpJiYodD10LmNhbGwoZSxuLGNlLmV4dGVuZCh7fSxzKSkpLG51bGwhPXQudG9wJiYoZi50b3A9dC50b3Atcy50b3ArYSksbnVsbCE9dC5sZWZ0JiYoZi5sZWZ0PXQubGVmdC1zLmxlZnQraSksXCJ1c2luZ1wiaW4gdD90LnVzaW5nLmNhbGwoZSxmKTpjLmNzcyhmKX19LGNlLmZuLmV4dGVuZCh7b2Zmc2V0OmZ1bmN0aW9uKHQpe2lmKGFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIHZvaWQgMD09PXQ/dGhpczp0aGlzLmVhY2goZnVuY3Rpb24oZSl7Y2Uub2Zmc2V0LnNldE9mZnNldCh0aGlzLHQsZSl9KTt2YXIgZSxuLHI9dGhpc1swXTtyZXR1cm4gcj9yLmdldENsaWVudFJlY3RzKCkubGVuZ3RoPyhlPXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksbj1yLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcse3RvcDplLnRvcCtuLnBhZ2VZT2Zmc2V0LGxlZnQ6ZS5sZWZ0K24ucGFnZVhPZmZzZXR9KTp7dG9wOjAsbGVmdDowfTp2b2lkIDB9LHBvc2l0aW9uOmZ1bmN0aW9uKCl7aWYodGhpc1swXSl7dmFyIGUsdCxuLHI9dGhpc1swXSxpPXt0b3A6MCxsZWZ0OjB9O2lmKFwiZml4ZWRcIj09PWNlLmNzcyhyLFwicG9zaXRpb25cIikpdD1yLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO2Vsc2V7dD10aGlzLm9mZnNldCgpLG49ci5vd25lckRvY3VtZW50LGU9ci5vZmZzZXRQYXJlbnR8fG4uZG9jdW1lbnRFbGVtZW50O3doaWxlKGUmJihlPT09bi5ib2R5fHxlPT09bi5kb2N1bWVudEVsZW1lbnQpJiZcInN0YXRpY1wiPT09Y2UuY3NzKGUsXCJwb3NpdGlvblwiKSllPWUucGFyZW50Tm9kZTtlJiZlIT09ciYmMT09PWUubm9kZVR5cGUmJigoaT1jZShlKS5vZmZzZXQoKSkudG9wKz1jZS5jc3MoZSxcImJvcmRlclRvcFdpZHRoXCIsITApLGkubGVmdCs9Y2UuY3NzKGUsXCJib3JkZXJMZWZ0V2lkdGhcIiwhMCkpfXJldHVybnt0b3A6dC50b3AtaS50b3AtY2UuY3NzKHIsXCJtYXJnaW5Ub3BcIiwhMCksbGVmdDp0LmxlZnQtaS5sZWZ0LWNlLmNzcyhyLFwibWFyZ2luTGVmdFwiLCEwKX19fSxvZmZzZXRQYXJlbnQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oKXt2YXIgZT10aGlzLm9mZnNldFBhcmVudDt3aGlsZShlJiZcInN0YXRpY1wiPT09Y2UuY3NzKGUsXCJwb3NpdGlvblwiKSllPWUub2Zmc2V0UGFyZW50O3JldHVybiBlfHxKfSl9fSksY2UuZWFjaCh7c2Nyb2xsTGVmdDpcInBhZ2VYT2Zmc2V0XCIsc2Nyb2xsVG9wOlwicGFnZVlPZmZzZXRcIn0sZnVuY3Rpb24odCxpKXt2YXIgbz1cInBhZ2VZT2Zmc2V0XCI9PT1pO2NlLmZuW3RdPWZ1bmN0aW9uKGUpe3JldHVybiBNKHRoaXMsZnVuY3Rpb24oZSx0LG4pe3ZhciByO2lmKHkoZSk/cj1lOjk9PT1lLm5vZGVUeXBlJiYocj1lLmRlZmF1bHRWaWV3KSx2b2lkIDA9PT1uKXJldHVybiByP3JbaV06ZVt0XTtyP3Iuc2Nyb2xsVG8obz9yLnBhZ2VYT2Zmc2V0Om4sbz9uOnIucGFnZVlPZmZzZXQpOmVbdF09bn0sdCxlLGFyZ3VtZW50cy5sZW5ndGgpfX0pLGNlLmVhY2goW1widG9wXCIsXCJsZWZ0XCJdLGZ1bmN0aW9uKGUsbil7Y2UuY3NzSG9va3Nbbl09WWUobGUucGl4ZWxQb3NpdGlvbixmdW5jdGlvbihlLHQpe2lmKHQpcmV0dXJuIHQ9R2UoZSxuKSxfZS50ZXN0KHQpP2NlKGUpLnBvc2l0aW9uKClbbl0rXCJweFwiOnR9KX0pLGNlLmVhY2goe0hlaWdodDpcImhlaWdodFwiLFdpZHRoOlwid2lkdGhcIn0sZnVuY3Rpb24oYSxzKXtjZS5lYWNoKHtwYWRkaW5nOlwiaW5uZXJcIithLGNvbnRlbnQ6cyxcIlwiOlwib3V0ZXJcIithfSxmdW5jdGlvbihyLG8pe2NlLmZuW29dPWZ1bmN0aW9uKGUsdCl7dmFyIG49YXJndW1lbnRzLmxlbmd0aCYmKHJ8fFwiYm9vbGVhblwiIT10eXBlb2YgZSksaT1yfHwoITA9PT1lfHwhMD09PXQ/XCJtYXJnaW5cIjpcImJvcmRlclwiKTtyZXR1cm4gTSh0aGlzLGZ1bmN0aW9uKGUsdCxuKXt2YXIgcjtyZXR1cm4geShlKT8wPT09by5pbmRleE9mKFwib3V0ZXJcIik/ZVtcImlubmVyXCIrYV06ZS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbXCJjbGllbnRcIithXTo5PT09ZS5ub2RlVHlwZT8ocj1lLmRvY3VtZW50RWxlbWVudCxNYXRoLm1heChlLmJvZHlbXCJzY3JvbGxcIithXSxyW1wic2Nyb2xsXCIrYV0sZS5ib2R5W1wib2Zmc2V0XCIrYV0scltcIm9mZnNldFwiK2FdLHJbXCJjbGllbnRcIithXSkpOnZvaWQgMD09PW4/Y2UuY3NzKGUsdCxpKTpjZS5zdHlsZShlLHQsbixpKX0scyxuP2U6dm9pZCAwLG4pfX0pfSksY2UuZWFjaChbXCJhamF4U3RhcnRcIixcImFqYXhTdG9wXCIsXCJhamF4Q29tcGxldGVcIixcImFqYXhFcnJvclwiLFwiYWpheFN1Y2Nlc3NcIixcImFqYXhTZW5kXCJdLGZ1bmN0aW9uKGUsdCl7Y2UuZm5bdF09ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMub24odCxlKX19KSxjZS5mbi5leHRlbmQoe2JpbmQ6ZnVuY3Rpb24oZSx0LG4pe3JldHVybiB0aGlzLm9uKGUsbnVsbCx0LG4pfSx1bmJpbmQ6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5vZmYoZSxudWxsLHQpfSxkZWxlZ2F0ZTpmdW5jdGlvbihlLHQsbixyKXtyZXR1cm4gdGhpcy5vbih0LGUsbixyKX0sdW5kZWxlZ2F0ZTpmdW5jdGlvbihlLHQsbil7cmV0dXJuIDE9PT1hcmd1bWVudHMubGVuZ3RoP3RoaXMub2ZmKGUsXCIqKlwiKTp0aGlzLm9mZih0LGV8fFwiKipcIixuKX0saG92ZXI6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5vbihcIm1vdXNlZW50ZXJcIixlKS5vbihcIm1vdXNlbGVhdmVcIix0fHxlKX19KSxjZS5lYWNoKFwiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IHJlc2l6ZSBzY3JvbGwgY2xpY2sgZGJsY2xpY2sgbW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBjb250ZXh0bWVudVwiLnNwbGl0KFwiIFwiKSxmdW5jdGlvbihlLG4pe2NlLmZuW25dPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIDA8YXJndW1lbnRzLmxlbmd0aD90aGlzLm9uKG4sbnVsbCxlLHQpOnRoaXMudHJpZ2dlcihuKX19KTt2YXIgZW49L15bXFxzXFx1RkVGRlxceEEwXSt8KFteXFxzXFx1RkVGRlxceEEwXSlbXFxzXFx1RkVGRlxceEEwXSskL2c7Y2UucHJveHk9ZnVuY3Rpb24oZSx0KXt2YXIgbixyLGk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQmJihuPWVbdF0sdD1lLGU9biksdihlKSlyZXR1cm4gcj1hZS5jYWxsKGFyZ3VtZW50cywyKSwoaT1mdW5jdGlvbigpe3JldHVybiBlLmFwcGx5KHR8fHRoaXMsci5jb25jYXQoYWUuY2FsbChhcmd1bWVudHMpKSl9KS5ndWlkPWUuZ3VpZD1lLmd1aWR8fGNlLmd1aWQrKyxpfSxjZS5ob2xkUmVhZHk9ZnVuY3Rpb24oZSl7ZT9jZS5yZWFkeVdhaXQrKzpjZS5yZWFkeSghMCl9LGNlLmlzQXJyYXk9QXJyYXkuaXNBcnJheSxjZS5wYXJzZUpTT049SlNPTi5wYXJzZSxjZS5ub2RlTmFtZT1mZSxjZS5pc0Z1bmN0aW9uPXYsY2UuaXNXaW5kb3c9eSxjZS5jYW1lbENhc2U9RixjZS50eXBlPXgsY2Uubm93PURhdGUubm93LGNlLmlzTnVtZXJpYz1mdW5jdGlvbihlKXt2YXIgdD1jZS50eXBlKGUpO3JldHVybihcIm51bWJlclwiPT09dHx8XCJzdHJpbmdcIj09PXQpJiYhaXNOYU4oZS1wYXJzZUZsb2F0KGUpKX0sY2UudHJpbT1mdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09ZT9cIlwiOihlK1wiXCIpLnJlcGxhY2UoZW4sXCIkMVwiKX0sXCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kJiZkZWZpbmUoXCJqcXVlcnlcIixbXSxmdW5jdGlvbigpe3JldHVybiBjZX0pO3ZhciB0bj1pZS5qUXVlcnksbm49aWUuJDtyZXR1cm4gY2Uubm9Db25mbGljdD1mdW5jdGlvbihlKXtyZXR1cm4gaWUuJD09PWNlJiYoaWUuJD1ubiksZSYmaWUualF1ZXJ5PT09Y2UmJihpZS5qUXVlcnk9dG4pLGNlfSxcInVuZGVmaW5lZFwiPT10eXBlb2YgZSYmKGllLmpRdWVyeT1pZS4kPWNlKSxjZX0pO1xuIiwidmFyIGxpc3RDYWNoZUNsZWFyID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlQ2xlYXInKSxcbiAgICBsaXN0Q2FjaGVEZWxldGUgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVEZWxldGUnKSxcbiAgICBsaXN0Q2FjaGVHZXQgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVHZXQnKSxcbiAgICBsaXN0Q2FjaGVIYXMgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVIYXMnKSxcbiAgICBsaXN0Q2FjaGVTZXQgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVTZXQnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGxpc3QgY2FjaGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBMaXN0Q2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTGlzdENhY2hlYC5cbkxpc3RDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBsaXN0Q2FjaGVDbGVhcjtcbkxpc3RDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbGlzdENhY2hlRGVsZXRlO1xuTGlzdENhY2hlLnByb3RvdHlwZS5nZXQgPSBsaXN0Q2FjaGVHZXQ7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmhhcyA9IGxpc3RDYWNoZUhhcztcbkxpc3RDYWNoZS5wcm90b3R5cGUuc2V0ID0gbGlzdENhY2hlU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IExpc3RDYWNoZTtcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW1ib2w7XG4iLCIvKipcbiAqIEEgZmFzdGVyIGFsdGVybmF0aXZlIHRvIGBGdW5jdGlvbiNhcHBseWAsIHRoaXMgZnVuY3Rpb24gaW52b2tlcyBgZnVuY2BcbiAqIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGB0aGlzQXJnYCBhbmQgdGhlIGFyZ3VtZW50cyBvZiBgYXJnc2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAqIEBwYXJhbSB7Kn0gdGhpc0FyZyBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgYGZ1bmNgLlxuICovXG5mdW5jdGlvbiBhcHBseShmdW5jLCB0aGlzQXJnLCBhcmdzKSB7XG4gIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICBjYXNlIDA6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZyk7XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0pO1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gIH1cbiAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXBwbHk7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5mb3JFYWNoYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlFYWNoKGFycmF5LCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgaWYgKGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSA9PT0gZmFsc2UpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlFYWNoO1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubWFwYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAqIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGFycmF5TWFwKGFycmF5LCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheU1hcDtcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnJlZHVjZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICogQHBhcmFtIHtib29sZWFufSBbaW5pdEFjY3VtXSBTcGVjaWZ5IHVzaW5nIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAgYXNcbiAqICB0aGUgaW5pdGlhbCB2YWx1ZS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlSZWR1Y2UoYXJyYXksIGl0ZXJhdGVlLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgaWYgKGluaXRBY2N1bSAmJiBsZW5ndGgpIHtcbiAgICBhY2N1bXVsYXRvciA9IGFycmF5WysraW5kZXhdO1xuICB9XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgYWNjdW11bGF0b3IgPSBpdGVyYXRlZShhY2N1bXVsYXRvciwgYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICB9XG4gIHJldHVybiBhY2N1bXVsYXRvcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheVJlZHVjZTtcbiIsIi8qKlxuICogQ29udmVydHMgYW4gQVNDSUkgYHN0cmluZ2AgdG8gYW4gYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGFzY2lpVG9BcnJheShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5zcGxpdCgnJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXNjaWlUb0FycmF5O1xuIiwiLyoqIFVzZWQgdG8gbWF0Y2ggd29yZHMgY29tcG9zZWQgb2YgYWxwaGFudW1lcmljIGNoYXJhY3RlcnMuICovXG52YXIgcmVBc2NpaVdvcmQgPSAvW15cXHgwMC1cXHgyZlxceDNhLVxceDQwXFx4NWItXFx4NjBcXHg3Yi1cXHg3Zl0rL2c7XG5cbi8qKlxuICogU3BsaXRzIGFuIEFTQ0lJIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3b3JkcyBvZiBgc3RyaW5nYC5cbiAqL1xuZnVuY3Rpb24gYXNjaWlXb3JkcyhzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5tYXRjaChyZUFzY2lpV29yZCkgfHwgW107XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXNjaWlXb3JkcztcbiIsInZhciBiYXNlQXNzaWduVmFsdWUgPSByZXF1aXJlKCcuL19iYXNlQXNzaWduVmFsdWUnKSxcbiAgICBlcSA9IHJlcXVpcmUoJy4vZXEnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBBc3NpZ25zIGB2YWx1ZWAgdG8gYGtleWAgb2YgYG9iamVjdGAgaWYgdGhlIGV4aXN0aW5nIHZhbHVlIGlzIG5vdCBlcXVpdmFsZW50XG4gKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gKi9cbmZ1bmN0aW9uIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XTtcbiAgaWYgKCEoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYgZXEob2JqVmFsdWUsIHZhbHVlKSkgfHxcbiAgICAgICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpKSB7XG4gICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhc3NpZ25WYWx1ZTtcbiIsInZhciBlcSA9IHJlcXVpcmUoJy4vZXEnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgYGtleWAgaXMgZm91bmQgaW4gYGFycmF5YCBvZiBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSBrZXkgVGhlIGtleSB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAqL1xuZnVuY3Rpb24gYXNzb2NJbmRleE9mKGFycmF5LCBrZXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgaWYgKGVxKGFycmF5W2xlbmd0aF1bMF0sIGtleSkpIHtcbiAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhc3NvY0luZGV4T2Y7XG4iLCJ2YXIgY29weU9iamVjdCA9IHJlcXVpcmUoJy4vX2NvcHlPYmplY3QnKSxcbiAgICBrZXlzID0gcmVxdWlyZSgnLi9rZXlzJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uYXNzaWduYCB3aXRob3V0IHN1cHBvcnQgZm9yIG11bHRpcGxlIHNvdXJjZXNcbiAqIG9yIGBjdXN0b21pemVyYCBmdW5jdGlvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBiYXNlQXNzaWduKG9iamVjdCwgc291cmNlKSB7XG4gIHJldHVybiBvYmplY3QgJiYgY29weU9iamVjdChzb3VyY2UsIGtleXMoc291cmNlKSwgb2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlQXNzaWduO1xuIiwidmFyIGNvcHlPYmplY3QgPSByZXF1aXJlKCcuL19jb3B5T2JqZWN0JyksXG4gICAga2V5c0luID0gcmVxdWlyZSgnLi9rZXlzSW4nKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5hc3NpZ25JbmAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzXG4gKiBvciBgY3VzdG9taXplcmAgZnVuY3Rpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gYmFzZUFzc2lnbkluKG9iamVjdCwgc291cmNlKSB7XG4gIHJldHVybiBvYmplY3QgJiYgY29weU9iamVjdChzb3VyY2UsIGtleXNJbihzb3VyY2UpLCBvYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VBc3NpZ25JbjtcbiIsInZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2RlZmluZVByb3BlcnR5Jyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGFzc2lnblZhbHVlYCBhbmQgYGFzc2lnbk1lcmdlVmFsdWVgIHdpdGhvdXRcbiAqIHZhbHVlIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICovXG5mdW5jdGlvbiBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgPT0gJ19fcHJvdG9fXycgJiYgZGVmaW5lUHJvcGVydHkpIHtcbiAgICBkZWZpbmVQcm9wZXJ0eShvYmplY3QsIGtleSwge1xuICAgICAgJ2NvbmZpZ3VyYWJsZSc6IHRydWUsXG4gICAgICAnZW51bWVyYWJsZSc6IHRydWUsXG4gICAgICAndmFsdWUnOiB2YWx1ZSxcbiAgICAgICd3cml0YWJsZSc6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUFzc2lnblZhbHVlO1xuIiwidmFyIFN0YWNrID0gcmVxdWlyZSgnLi9fU3RhY2snKSxcbiAgICBhcnJheUVhY2ggPSByZXF1aXJlKCcuL19hcnJheUVhY2gnKSxcbiAgICBhc3NpZ25WYWx1ZSA9IHJlcXVpcmUoJy4vX2Fzc2lnblZhbHVlJyksXG4gICAgYmFzZUFzc2lnbiA9IHJlcXVpcmUoJy4vX2Jhc2VBc3NpZ24nKSxcbiAgICBiYXNlQXNzaWduSW4gPSByZXF1aXJlKCcuL19iYXNlQXNzaWduSW4nKSxcbiAgICBjbG9uZUJ1ZmZlciA9IHJlcXVpcmUoJy4vX2Nsb25lQnVmZmVyJyksXG4gICAgY29weUFycmF5ID0gcmVxdWlyZSgnLi9fY29weUFycmF5JyksXG4gICAgY29weVN5bWJvbHMgPSByZXF1aXJlKCcuL19jb3B5U3ltYm9scycpLFxuICAgIGNvcHlTeW1ib2xzSW4gPSByZXF1aXJlKCcuL19jb3B5U3ltYm9sc0luJyksXG4gICAgZ2V0QWxsS2V5cyA9IHJlcXVpcmUoJy4vX2dldEFsbEtleXMnKSxcbiAgICBnZXRBbGxLZXlzSW4gPSByZXF1aXJlKCcuL19nZXRBbGxLZXlzSW4nKSxcbiAgICBnZXRUYWcgPSByZXF1aXJlKCcuL19nZXRUYWcnKSxcbiAgICBpbml0Q2xvbmVBcnJheSA9IHJlcXVpcmUoJy4vX2luaXRDbG9uZUFycmF5JyksXG4gICAgaW5pdENsb25lQnlUYWcgPSByZXF1aXJlKCcuL19pbml0Q2xvbmVCeVRhZycpLFxuICAgIGluaXRDbG9uZU9iamVjdCA9IHJlcXVpcmUoJy4vX2luaXRDbG9uZU9iamVjdCcpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc0J1ZmZlciA9IHJlcXVpcmUoJy4vaXNCdWZmZXInKSxcbiAgICBpc01hcCA9IHJlcXVpcmUoJy4vaXNNYXAnKSxcbiAgICBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKSxcbiAgICBpc1NldCA9IHJlcXVpcmUoJy4vaXNTZXQnKSxcbiAgICBrZXlzID0gcmVxdWlyZSgnLi9rZXlzJyksXG4gICAga2V5c0luID0gcmVxdWlyZSgnLi9rZXlzSW4nKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgY2xvbmluZy4gKi9cbnZhciBDTE9ORV9ERUVQX0ZMQUcgPSAxLFxuICAgIENMT05FX0ZMQVRfRkxBRyA9IDIsXG4gICAgQ0xPTkVfU1lNQk9MU19GTEFHID0gNDtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nLFxuICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nLFxuICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLFxuICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICBmbG9hdDY0VGFnID0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScsXG4gICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgIGludDMyVGFnID0gJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgdWludDE2VGFnID0gJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4vKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBzdXBwb3J0ZWQgYnkgYF8uY2xvbmVgLiAqL1xudmFyIGNsb25lYWJsZVRhZ3MgPSB7fTtcbmNsb25lYWJsZVRhZ3NbYXJnc1RhZ10gPSBjbG9uZWFibGVUYWdzW2FycmF5VGFnXSA9XG5jbG9uZWFibGVUYWdzW2FycmF5QnVmZmVyVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0YVZpZXdUYWddID1cbmNsb25lYWJsZVRhZ3NbYm9vbFRhZ10gPSBjbG9uZWFibGVUYWdzW2RhdGVUYWddID1cbmNsb25lYWJsZVRhZ3NbZmxvYXQzMlRhZ10gPSBjbG9uZWFibGVUYWdzW2Zsb2F0NjRUYWddID1cbmNsb25lYWJsZVRhZ3NbaW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW2ludDE2VGFnXSA9XG5jbG9uZWFibGVUYWdzW2ludDMyVGFnXSA9IGNsb25lYWJsZVRhZ3NbbWFwVGFnXSA9XG5jbG9uZWFibGVUYWdzW251bWJlclRhZ10gPSBjbG9uZWFibGVUYWdzW29iamVjdFRhZ10gPVxuY2xvbmVhYmxlVGFnc1tyZWdleHBUYWddID0gY2xvbmVhYmxlVGFnc1tzZXRUYWddID1cbmNsb25lYWJsZVRhZ3Nbc3RyaW5nVGFnXSA9IGNsb25lYWJsZVRhZ3Nbc3ltYm9sVGFnXSA9XG5jbG9uZWFibGVUYWdzW3VpbnQ4VGFnXSA9IGNsb25lYWJsZVRhZ3NbdWludDhDbGFtcGVkVGFnXSA9XG5jbG9uZWFibGVUYWdzW3VpbnQxNlRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xuY2xvbmVhYmxlVGFnc1tlcnJvclRhZ10gPSBjbG9uZWFibGVUYWdzW2Z1bmNUYWddID1cbmNsb25lYWJsZVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jbG9uZWAgYW5kIGBfLmNsb25lRGVlcGAgd2hpY2ggdHJhY2tzXG4gKiB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2xvbmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gKiAgMSAtIERlZXAgY2xvbmVcbiAqICAyIC0gRmxhdHRlbiBpbmhlcml0ZWQgcHJvcGVydGllc1xuICogIDQgLSBDbG9uZSBzeW1ib2xzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjbG9uaW5nLlxuICogQHBhcmFtIHtzdHJpbmd9IFtrZXldIFRoZSBrZXkgb2YgYHZhbHVlYC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgcGFyZW50IG9iamVjdCBvZiBgdmFsdWVgLlxuICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGFuZCB0aGVpciBjbG9uZSBjb3VudGVycGFydHMuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgY2xvbmVkIHZhbHVlLlxuICovXG5mdW5jdGlvbiBiYXNlQ2xvbmUodmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGtleSwgb2JqZWN0LCBzdGFjaykge1xuICB2YXIgcmVzdWx0LFxuICAgICAgaXNEZWVwID0gYml0bWFzayAmIENMT05FX0RFRVBfRkxBRyxcbiAgICAgIGlzRmxhdCA9IGJpdG1hc2sgJiBDTE9ORV9GTEFUX0ZMQUcsXG4gICAgICBpc0Z1bGwgPSBiaXRtYXNrICYgQ0xPTkVfU1lNQk9MU19GTEFHO1xuXG4gIGlmIChjdXN0b21pemVyKSB7XG4gICAgcmVzdWx0ID0gb2JqZWN0ID8gY3VzdG9taXplcih2YWx1ZSwga2V5LCBvYmplY3QsIHN0YWNrKSA6IGN1c3RvbWl6ZXIodmFsdWUpO1xuICB9XG4gIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSk7XG4gIGlmIChpc0Fycikge1xuICAgIHJlc3VsdCA9IGluaXRDbG9uZUFycmF5KHZhbHVlKTtcbiAgICBpZiAoIWlzRGVlcCkge1xuICAgICAgcmV0dXJuIGNvcHlBcnJheSh2YWx1ZSwgcmVzdWx0KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIHRhZyA9IGdldFRhZyh2YWx1ZSksXG4gICAgICAgIGlzRnVuYyA9IHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWc7XG5cbiAgICBpZiAoaXNCdWZmZXIodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY2xvbmVCdWZmZXIodmFsdWUsIGlzRGVlcCk7XG4gICAgfVxuICAgIGlmICh0YWcgPT0gb2JqZWN0VGFnIHx8IHRhZyA9PSBhcmdzVGFnIHx8IChpc0Z1bmMgJiYgIW9iamVjdCkpIHtcbiAgICAgIHJlc3VsdCA9IChpc0ZsYXQgfHwgaXNGdW5jKSA/IHt9IDogaW5pdENsb25lT2JqZWN0KHZhbHVlKTtcbiAgICAgIGlmICghaXNEZWVwKSB7XG4gICAgICAgIHJldHVybiBpc0ZsYXRcbiAgICAgICAgICA/IGNvcHlTeW1ib2xzSW4odmFsdWUsIGJhc2VBc3NpZ25JbihyZXN1bHQsIHZhbHVlKSlcbiAgICAgICAgICA6IGNvcHlTeW1ib2xzKHZhbHVlLCBiYXNlQXNzaWduKHJlc3VsdCwgdmFsdWUpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFjbG9uZWFibGVUYWdzW3RhZ10pIHtcbiAgICAgICAgcmV0dXJuIG9iamVjdCA/IHZhbHVlIDoge307XG4gICAgICB9XG4gICAgICByZXN1bHQgPSBpbml0Q2xvbmVCeVRhZyh2YWx1ZSwgdGFnLCBpc0RlZXApO1xuICAgIH1cbiAgfVxuICAvLyBDaGVjayBmb3IgY2lyY3VsYXIgcmVmZXJlbmNlcyBhbmQgcmV0dXJuIGl0cyBjb3JyZXNwb25kaW5nIGNsb25lLlxuICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldCh2YWx1ZSk7XG4gIGlmIChzdGFja2VkKSB7XG4gICAgcmV0dXJuIHN0YWNrZWQ7XG4gIH1cbiAgc3RhY2suc2V0KHZhbHVlLCByZXN1bHQpO1xuXG4gIGlmIChpc1NldCh2YWx1ZSkpIHtcbiAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uKHN1YlZhbHVlKSB7XG4gICAgICByZXN1bHQuYWRkKGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3ViVmFsdWUsIHZhbHVlLCBzdGFjaykpO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKGlzTWFwKHZhbHVlKSkge1xuICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24oc3ViVmFsdWUsIGtleSkge1xuICAgICAgcmVzdWx0LnNldChrZXksIGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCB2YWx1ZSwgc3RhY2spKTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBrZXlzRnVuYyA9IGlzRnVsbFxuICAgID8gKGlzRmxhdCA/IGdldEFsbEtleXNJbiA6IGdldEFsbEtleXMpXG4gICAgOiAoaXNGbGF0ID8ga2V5c0luIDoga2V5cyk7XG5cbiAgdmFyIHByb3BzID0gaXNBcnIgPyB1bmRlZmluZWQgOiBrZXlzRnVuYyh2YWx1ZSk7XG4gIGFycmF5RWFjaChwcm9wcyB8fCB2YWx1ZSwgZnVuY3Rpb24oc3ViVmFsdWUsIGtleSkge1xuICAgIGlmIChwcm9wcykge1xuICAgICAga2V5ID0gc3ViVmFsdWU7XG4gICAgICBzdWJWYWx1ZSA9IHZhbHVlW2tleV07XG4gICAgfVxuICAgIC8vIFJlY3Vyc2l2ZWx5IHBvcHVsYXRlIGNsb25lIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgYXNzaWduVmFsdWUocmVzdWx0LCBrZXksIGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCB2YWx1ZSwgc3RhY2spKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUNsb25lO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RDcmVhdGUgPSBPYmplY3QuY3JlYXRlO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNyZWF0ZWAgd2l0aG91dCBzdXBwb3J0IGZvciBhc3NpZ25pbmdcbiAqIHByb3BlcnRpZXMgdG8gdGhlIGNyZWF0ZWQgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvdG8gVGhlIG9iamVjdCB0byBpbmhlcml0IGZyb20uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICovXG52YXIgYmFzZUNyZWF0ZSA9IChmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gb2JqZWN0KCkge31cbiAgcmV0dXJuIGZ1bmN0aW9uKHByb3RvKSB7XG4gICAgaWYgKCFpc09iamVjdChwcm90bykpIHtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgaWYgKG9iamVjdENyZWF0ZSkge1xuICAgICAgcmV0dXJuIG9iamVjdENyZWF0ZShwcm90byk7XG4gICAgfVxuICAgIG9iamVjdC5wcm90b3R5cGUgPSBwcm90bztcbiAgICB2YXIgcmVzdWx0ID0gbmV3IG9iamVjdDtcbiAgICBvYmplY3QucHJvdG90eXBlID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59KCkpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VDcmVhdGU7XG4iLCJ2YXIgY3JlYXRlQmFzZUZvciA9IHJlcXVpcmUoJy4vX2NyZWF0ZUJhc2VGb3InKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgYmFzZUZvck93bmAgd2hpY2ggaXRlcmF0ZXMgb3ZlciBgb2JqZWN0YFxuICogcHJvcGVydGllcyByZXR1cm5lZCBieSBga2V5c0Z1bmNgIGFuZCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggcHJvcGVydHkuXG4gKiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbnZhciBiYXNlRm9yID0gY3JlYXRlQmFzZUZvcigpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VGb3I7XG4iLCJ2YXIgYmFzZUZvciA9IHJlcXVpcmUoJy4vX2Jhc2VGb3InKSxcbiAgICBrZXlzID0gcmVxdWlyZSgnLi9rZXlzJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yT3duYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gYmFzZUZvck93bihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gIHJldHVybiBvYmplY3QgJiYgYmFzZUZvcihvYmplY3QsIGl0ZXJhdGVlLCBrZXlzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlRm9yT3duO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyB1c2luZyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gb2JqZWN0VG9TdHJpbmc7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5pbmRleE9mYCB3aGljaCBwZXJmb3JtcyBzdHJpY3QgZXF1YWxpdHlcbiAqIGNvbXBhcmlzb25zIG9mIHZhbHVlcywgaS5lLiBgPT09YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICovXG5mdW5jdGlvbiBzdHJpY3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gIHZhciBpbmRleCA9IGZyb21JbmRleCAtIDEsXG4gICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBpZiAoYXJyYXlbaW5kZXhdID09PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RyaWN0SW5kZXhPZjtcbiIsIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyB0aGUgZmlyc3QgYXJndW1lbnQgaXQgcmVjZWl2ZXMuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgQW55IHZhbHVlLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgYHZhbHVlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gKlxuICogY29uc29sZS5sb2coXy5pZGVudGl0eShvYmplY3QpID09PSBvYmplY3QpO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBpZGVudGl0eSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaWRlbnRpdHk7XG4iLCJ2YXIgb3ZlckFyZyA9IHJlcXVpcmUoJy4vX292ZXJBcmcnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUtleXMgPSBvdmVyQXJnKE9iamVjdC5rZXlzLCBPYmplY3QpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5hdGl2ZUtleXM7XG4iLCJ2YXIgaWRlbnRpdHkgPSByZXF1aXJlKCcuL2lkZW50aXR5JyksXG4gICAgb3ZlclJlc3QgPSByZXF1aXJlKCcuL19vdmVyUmVzdCcpLFxuICAgIHNldFRvU3RyaW5nID0gcmVxdWlyZSgnLi9fc2V0VG9TdHJpbmcnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yZXN0YCB3aGljaCBkb2Vzbid0IHZhbGlkYXRlIG9yIGNvZXJjZSBhcmd1bWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVJlc3QoZnVuYywgc3RhcnQpIHtcbiAgcmV0dXJuIHNldFRvU3RyaW5nKG92ZXJSZXN0KGZ1bmMsIHN0YXJ0LCBpZGVudGl0eSksIGZ1bmMgKyAnJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVJlc3Q7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNsaWNlYCB3aXRob3V0IGFuIGl0ZXJhdGVlIGNhbGwgZ3VhcmQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzbGljZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBiYXNlU2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgaWYgKHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ID0gLXN0YXJ0ID4gbGVuZ3RoID8gMCA6IChsZW5ndGggKyBzdGFydCk7XG4gIH1cbiAgZW5kID0gZW5kID4gbGVuZ3RoID8gbGVuZ3RoIDogZW5kO1xuICBpZiAoZW5kIDwgMCkge1xuICAgIGVuZCArPSBsZW5ndGg7XG4gIH1cbiAgbGVuZ3RoID0gc3RhcnQgPiBlbmQgPyAwIDogKChlbmQgLSBzdGFydCkgPj4+IDApO1xuICBzdGFydCA+Pj49IDA7XG5cbiAgdmFyIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IGFycmF5W2luZGV4ICsgc3RhcnRdO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVNsaWNlO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpLFxuICAgIGFycmF5TWFwID0gcmVxdWlyZSgnLi9fYXJyYXlNYXAnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNTeW1ib2wgPSByZXF1aXJlKCcuL2lzU3ltYm9sJyk7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIElORklOSVRZID0gMSAvIDA7XG5cbi8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL1xudmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICBzeW1ib2xUb1N0cmluZyA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udG9TdHJpbmcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9TdHJpbmdgIHdoaWNoIGRvZXNuJ3QgY29udmVydCBudWxsaXNoXG4gKiB2YWx1ZXMgdG8gZW1wdHkgc3RyaW5ncy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gYmFzZVRvU3RyaW5nKHZhbHVlKSB7XG4gIC8vIEV4aXQgZWFybHkgZm9yIHN0cmluZ3MgdG8gYXZvaWQgYSBwZXJmb3JtYW5jZSBoaXQgaW4gc29tZSBlbnZpcm9ubWVudHMuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgLy8gUmVjdXJzaXZlbHkgY29udmVydCB2YWx1ZXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICByZXR1cm4gYXJyYXlNYXAodmFsdWUsIGJhc2VUb1N0cmluZykgKyAnJztcbiAgfVxuICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIHN5bWJvbFRvU3RyaW5nID8gc3ltYm9sVG9TdHJpbmcuY2FsbCh2YWx1ZSkgOiAnJztcbiAgfVxuICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVRvU3RyaW5nO1xuIiwidmFyIHRyaW1tZWRFbmRJbmRleCA9IHJlcXVpcmUoJy4vX3RyaW1tZWRFbmRJbmRleCcpO1xuXG4vKiogVXNlZCB0byBtYXRjaCBsZWFkaW5nIHdoaXRlc3BhY2UuICovXG52YXIgcmVUcmltU3RhcnQgPSAvXlxccysvO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRyaW1gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHRyaW1tZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBiYXNlVHJpbShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZ1xuICAgID8gc3RyaW5nLnNsaWNlKDAsIHRyaW1tZWRFbmRJbmRleChzdHJpbmcpICsgMSkucmVwbGFjZShyZVRyaW1TdGFydCwgJycpXG4gICAgOiBzdHJpbmc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVRyaW07XG4iLCJ2YXIgYmFzZVNsaWNlID0gcmVxdWlyZSgnLi9fYmFzZVNsaWNlJyk7XG5cbi8qKlxuICogQ2FzdHMgYGFycmF5YCB0byBhIHNsaWNlIGlmIGl0J3MgbmVlZGVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgcG9zaXRpb24uXG4gKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNhc3Qgc2xpY2UuXG4gKi9cbmZ1bmN0aW9uIGNhc3RTbGljZShhcnJheSwgc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IGVuZDtcbiAgcmV0dXJuICghc3RhcnQgJiYgZW5kID49IGxlbmd0aCkgPyBhcnJheSA6IGJhc2VTbGljZShhcnJheSwgc3RhcnQsIGVuZCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2FzdFNsaWNlO1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG52YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbnZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbi8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG52YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgQnVmZmVyID0gbW9kdWxlRXhwb3J0cyA/IHJvb3QuQnVmZmVyIDogdW5kZWZpbmVkLFxuICAgIGFsbG9jVW5zYWZlID0gQnVmZmVyID8gQnVmZmVyLmFsbG9jVW5zYWZlIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiAgYGJ1ZmZlcmAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QnVmZmVyfSBidWZmZXIgVGhlIGJ1ZmZlciB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gKiBAcmV0dXJucyB7QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYnVmZmVyLlxuICovXG5mdW5jdGlvbiBjbG9uZUJ1ZmZlcihidWZmZXIsIGlzRGVlcCkge1xuICBpZiAoaXNEZWVwKSB7XG4gICAgcmV0dXJuIGJ1ZmZlci5zbGljZSgpO1xuICB9XG4gIHZhciBsZW5ndGggPSBidWZmZXIubGVuZ3RoLFxuICAgICAgcmVzdWx0ID0gYWxsb2NVbnNhZmUgPyBhbGxvY1Vuc2FmZShsZW5ndGgpIDogbmV3IGJ1ZmZlci5jb25zdHJ1Y3RvcihsZW5ndGgpO1xuXG4gIGJ1ZmZlci5jb3B5KHJlc3VsdCk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xvbmVCdWZmZXI7XG4iLCIvKipcbiAqIENvcGllcyB0aGUgdmFsdWVzIG9mIGBzb3VyY2VgIHRvIGBhcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IHNvdXJjZSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgZnJvbS5cbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheT1bXV0gVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIHRvLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGNvcHlBcnJheShzb3VyY2UsIGFycmF5KSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gc291cmNlLmxlbmd0aDtcblxuICBhcnJheSB8fCAoYXJyYXkgPSBBcnJheShsZW5ndGgpKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBhcnJheVtpbmRleF0gPSBzb3VyY2VbaW5kZXhdO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb3B5QXJyYXk7XG4iLCJ2YXIgYXNzaWduVmFsdWUgPSByZXF1aXJlKCcuL19hc3NpZ25WYWx1ZScpLFxuICAgIGJhc2VBc3NpZ25WYWx1ZSA9IHJlcXVpcmUoJy4vX2Jhc2VBc3NpZ25WYWx1ZScpO1xuXG4vKipcbiAqIENvcGllcyBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb20uXG4gKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMgdG8gY29weS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyB0by5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvcGllZCB2YWx1ZXMuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBjb3B5T2JqZWN0KHNvdXJjZSwgcHJvcHMsIG9iamVjdCwgY3VzdG9taXplcikge1xuICB2YXIgaXNOZXcgPSAhb2JqZWN0O1xuICBvYmplY3QgfHwgKG9iamVjdCA9IHt9KTtcblxuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBrZXkgPSBwcm9wc1tpbmRleF07XG5cbiAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICA/IGN1c3RvbWl6ZXIob2JqZWN0W2tleV0sIHNvdXJjZVtrZXldLCBrZXksIG9iamVjdCwgc291cmNlKVxuICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICBpZiAobmV3VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgbmV3VmFsdWUgPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gICAgaWYgKGlzTmV3KSB7XG4gICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG9iamVjdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb3B5T2JqZWN0O1xuIiwidmFyIGNvcHlPYmplY3QgPSByZXF1aXJlKCcuL19jb3B5T2JqZWN0JyksXG4gICAgZ2V0U3ltYm9scyA9IHJlcXVpcmUoJy4vX2dldFN5bWJvbHMnKTtcblxuLyoqXG4gKiBDb3BpZXMgb3duIHN5bWJvbHMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgZnJvbS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyB0by5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGNvcHlTeW1ib2xzKHNvdXJjZSwgb2JqZWN0KSB7XG4gIHJldHVybiBjb3B5T2JqZWN0KHNvdXJjZSwgZ2V0U3ltYm9scyhzb3VyY2UpLCBvYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvcHlTeW1ib2xzO1xuIiwidmFyIGNvcHlPYmplY3QgPSByZXF1aXJlKCcuL19jb3B5T2JqZWN0JyksXG4gICAgZ2V0U3ltYm9sc0luID0gcmVxdWlyZSgnLi9fZ2V0U3ltYm9sc0luJyk7XG5cbi8qKlxuICogQ29waWVzIG93biBhbmQgaW5oZXJpdGVkIHN5bWJvbHMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgZnJvbS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyB0by5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGNvcHlTeW1ib2xzSW4oc291cmNlLCBvYmplY3QpIHtcbiAgcmV0dXJuIGNvcHlPYmplY3Qoc291cmNlLCBnZXRTeW1ib2xzSW4oc291cmNlKSwgb2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb3B5U3ltYm9sc0luO1xuIiwidmFyIGJhc2VSZXN0ID0gcmVxdWlyZSgnLi9fYmFzZVJlc3QnKSxcbiAgICBpc0l0ZXJhdGVlQ2FsbCA9IHJlcXVpcmUoJy4vX2lzSXRlcmF0ZWVDYWxsJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8uYXNzaWduYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gYXNzaWduZXIgVGhlIGZ1bmN0aW9uIHRvIGFzc2lnbiB2YWx1ZXMuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhc3NpZ25lciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQXNzaWduZXIoYXNzaWduZXIpIHtcbiAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwgc291cmNlcykge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBzb3VyY2VzLmxlbmd0aCxcbiAgICAgICAgY3VzdG9taXplciA9IGxlbmd0aCA+IDEgPyBzb3VyY2VzW2xlbmd0aCAtIDFdIDogdW5kZWZpbmVkLFxuICAgICAgICBndWFyZCA9IGxlbmd0aCA+IDIgPyBzb3VyY2VzWzJdIDogdW5kZWZpbmVkO1xuXG4gICAgY3VzdG9taXplciA9IChhc3NpZ25lci5sZW5ndGggPiAzICYmIHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicpXG4gICAgICA/IChsZW5ndGgtLSwgY3VzdG9taXplcilcbiAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKHNvdXJjZXNbMF0sIHNvdXJjZXNbMV0sIGd1YXJkKSkge1xuICAgICAgY3VzdG9taXplciA9IGxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiBjdXN0b21pemVyO1xuICAgICAgbGVuZ3RoID0gMTtcbiAgICB9XG4gICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHZhciBzb3VyY2UgPSBzb3VyY2VzW2luZGV4XTtcbiAgICAgIGlmIChzb3VyY2UpIHtcbiAgICAgICAgYXNzaWduZXIob2JqZWN0LCBzb3VyY2UsIGluZGV4LCBjdXN0b21pemVyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdDtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlQXNzaWduZXI7XG4iLCIvKipcbiAqIENyZWF0ZXMgYSBiYXNlIGZ1bmN0aW9uIGZvciBtZXRob2RzIGxpa2UgYF8uZm9ySW5gIGFuZCBgXy5mb3JPd25gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJhc2UgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJhc2VGb3IoZnJvbVJpZ2h0KSB7XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QsIGl0ZXJhdGVlLCBrZXlzRnVuYykge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBpdGVyYWJsZSA9IE9iamVjdChvYmplY3QpLFxuICAgICAgICBwcm9wcyA9IGtleXNGdW5jKG9iamVjdCksXG4gICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgdmFyIGtleSA9IHByb3BzW2Zyb21SaWdodCA/IGxlbmd0aCA6ICsraW5kZXhdO1xuICAgICAgaWYgKGl0ZXJhdGVlKGl0ZXJhYmxlW2tleV0sIGtleSwgaXRlcmFibGUpID09PSBmYWxzZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdDtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVCYXNlRm9yO1xuIiwidmFyIGNhc3RTbGljZSA9IHJlcXVpcmUoJy4vX2Nhc3RTbGljZScpLFxuICAgIGhhc1VuaWNvZGUgPSByZXF1aXJlKCcuL19oYXNVbmljb2RlJyksXG4gICAgc3RyaW5nVG9BcnJheSA9IHJlcXVpcmUoJy4vX3N0cmluZ1RvQXJyYXknKSxcbiAgICB0b1N0cmluZyA9IHJlcXVpcmUoJy4vdG9TdHJpbmcnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5sb3dlckZpcnN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZE5hbWUgVGhlIG5hbWUgb2YgdGhlIGBTdHJpbmdgIGNhc2UgbWV0aG9kIHRvIHVzZS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhc2UgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNhc2VGaXJzdChtZXRob2ROYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuXG4gICAgdmFyIHN0clN5bWJvbHMgPSBoYXNVbmljb2RlKHN0cmluZylcbiAgICAgID8gc3RyaW5nVG9BcnJheShzdHJpbmcpXG4gICAgICA6IHVuZGVmaW5lZDtcblxuICAgIHZhciBjaHIgPSBzdHJTeW1ib2xzXG4gICAgICA/IHN0clN5bWJvbHNbMF1cbiAgICAgIDogc3RyaW5nLmNoYXJBdCgwKTtcblxuICAgIHZhciB0cmFpbGluZyA9IHN0clN5bWJvbHNcbiAgICAgID8gY2FzdFNsaWNlKHN0clN5bWJvbHMsIDEpLmpvaW4oJycpXG4gICAgICA6IHN0cmluZy5zbGljZSgxKTtcblxuICAgIHJldHVybiBjaHJbbWV0aG9kTmFtZV0oKSArIHRyYWlsaW5nO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZUNhc2VGaXJzdDtcbiIsInZhciBhcnJheVJlZHVjZSA9IHJlcXVpcmUoJy4vX2FycmF5UmVkdWNlJyksXG4gICAgZGVidXJyID0gcmVxdWlyZSgnLi9kZWJ1cnInKSxcbiAgICB3b3JkcyA9IHJlcXVpcmUoJy4vd29yZHMnKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNhcHR1cmUgZ3JvdXBzLiAqL1xudmFyIHJzQXBvcyA9IFwiWydcXHUyMDE5XVwiO1xuXG4vKiogVXNlZCB0byBtYXRjaCBhcG9zdHJvcGhlcy4gKi9cbnZhciByZUFwb3MgPSBSZWdFeHAocnNBcG9zLCAnZycpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmNhbWVsQ2FzZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0byBjb21iaW5lIGVhY2ggd29yZC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbXBvdW5kZXIgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNvbXBvdW5kZXIoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xuICAgIHJldHVybiBhcnJheVJlZHVjZSh3b3JkcyhkZWJ1cnIoc3RyaW5nKS5yZXBsYWNlKHJlQXBvcywgJycpKSwgY2FsbGJhY2ssICcnKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVDb21wb3VuZGVyO1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpO1xuXG52YXIgZGVmaW5lUHJvcGVydHkgPSAoZnVuY3Rpb24oKSB7XG4gIHRyeSB7XG4gICAgdmFyIGZ1bmMgPSBnZXROYXRpdmUoT2JqZWN0LCAnZGVmaW5lUHJvcGVydHknKTtcbiAgICBmdW5jKHt9LCAnJywge30pO1xuICAgIHJldHVybiBmdW5jO1xuICB9IGNhdGNoIChlKSB7fVxufSgpKTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZpbmVQcm9wZXJ0eTtcbiIsIi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbm1vZHVsZS5leHBvcnRzID0gZnJlZUdsb2JhbDtcbiIsInZhciBvdmVyQXJnID0gcmVxdWlyZSgnLi9fb3ZlckFyZycpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlS2V5cyA9IG92ZXJBcmcoT2JqZWN0LmtleXMsIE9iamVjdCk7XG5cbm1vZHVsZS5leHBvcnRzID0gbmF0aXZlS2V5cztcbiIsIi8qKlxuICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlXG4gKiBbYE9iamVjdC5rZXlzYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gKiBleGNlcHQgdGhhdCBpdCBpbmNsdWRlcyBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0aWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBuYXRpdmVLZXlzSW4ob2JqZWN0KSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgaWYgKG9iamVjdCAhPSBudWxsKSB7XG4gICAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5hdGl2ZUtleXNJbjtcbiIsIi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGdldFZhbHVlKG9iamVjdCwga2V5KSB7XG4gIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFZhbHVlO1xuIiwidmFyIG92ZXJBcmcgPSByZXF1aXJlKCcuL19vdmVyQXJnJyk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIGdldFByb3RvdHlwZSA9IG92ZXJBcmcoT2JqZWN0LmdldFByb3RvdHlwZU9mLCBPYmplY3QpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFByb3RvdHlwZTtcbiIsIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBlbXB0eSBhcnJheS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGVtcHR5IGFycmF5LlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgYXJyYXlzID0gXy50aW1lcygyLCBfLnN0dWJBcnJheSk7XG4gKlxuICogY29uc29sZS5sb2coYXJyYXlzKTtcbiAqIC8vID0+IFtbXSwgW11dXG4gKlxuICogY29uc29sZS5sb2coYXJyYXlzWzBdID09PSBhcnJheXNbMV0pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gc3R1YkFycmF5KCkge1xuICByZXR1cm4gW107XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R1YkFycmF5O1xuIiwiLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGVtcHR5IGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xMy4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZW1wdHkgYXJyYXkuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBhcnJheXMgPSBfLnRpbWVzKDIsIF8uc3R1YkFycmF5KTtcbiAqXG4gKiBjb25zb2xlLmxvZyhhcnJheXMpO1xuICogLy8gPT4gW1tdLCBbXV1cbiAqXG4gKiBjb25zb2xlLmxvZyhhcnJheXNbMF0gPT09IGFycmF5c1sxXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBzdHViQXJyYXkoKSB7XG4gIHJldHVybiBbXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHViQXJyYXk7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvYmplY3RUb1N0cmluZztcbiIsIi8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSBjaGFyYWN0ZXIgY2xhc3Nlcy4gKi9cbnZhciByc0FzdHJhbFJhbmdlID0gJ1xcXFx1ZDgwMC1cXFxcdWRmZmYnLFxuICAgIHJzQ29tYm9NYXJrc1JhbmdlID0gJ1xcXFx1MDMwMC1cXFxcdTAzNmYnLFxuICAgIHJlQ29tYm9IYWxmTWFya3NSYW5nZSA9ICdcXFxcdWZlMjAtXFxcXHVmZTJmJyxcbiAgICByc0NvbWJvU3ltYm9sc1JhbmdlID0gJ1xcXFx1MjBkMC1cXFxcdTIwZmYnLFxuICAgIHJzQ29tYm9SYW5nZSA9IHJzQ29tYm9NYXJrc1JhbmdlICsgcmVDb21ib0hhbGZNYXJrc1JhbmdlICsgcnNDb21ib1N5bWJvbHNSYW5nZSxcbiAgICByc1ZhclJhbmdlID0gJ1xcXFx1ZmUwZVxcXFx1ZmUwZic7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSBjYXB0dXJlIGdyb3Vwcy4gKi9cbnZhciByc1pXSiA9ICdcXFxcdTIwMGQnO1xuXG4vKiogVXNlZCB0byBkZXRlY3Qgc3RyaW5ncyB3aXRoIFt6ZXJvLXdpZHRoIGpvaW5lcnMgb3IgY29kZSBwb2ludHMgZnJvbSB0aGUgYXN0cmFsIHBsYW5lc10oaHR0cDovL2Vldi5lZS9ibG9nLzIwMTUvMDkvMTIvZGFyay1jb3JuZXJzLW9mLXVuaWNvZGUvKS4gKi9cbnZhciByZUhhc1VuaWNvZGUgPSBSZWdFeHAoJ1snICsgcnNaV0ogKyByc0FzdHJhbFJhbmdlICArIHJzQ29tYm9SYW5nZSArIHJzVmFyUmFuZ2UgKyAnXScpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgc3RyaW5nYCBjb250YWlucyBVbmljb2RlIHN5bWJvbHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGEgc3ltYm9sIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc1VuaWNvZGUoc3RyaW5nKSB7XG4gIHJldHVybiByZUhhc1VuaWNvZGUudGVzdChzdHJpbmcpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc1VuaWNvZGU7XG4iLCIvKiogVXNlZCB0byBkZXRlY3Qgc3RyaW5ncyB0aGF0IG5lZWQgYSBtb3JlIHJvYnVzdCByZWdleHAgdG8gbWF0Y2ggd29yZHMuICovXG52YXIgcmVIYXNVbmljb2RlV29yZCA9IC9bYS16XVtBLVpdfFtBLVpdezJ9W2Etel18WzAtOV1bYS16QS1aXXxbYS16QS1aXVswLTldfFteYS16QS1aMC05IF0vO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgc3RyaW5nYCBjb250YWlucyBhIHdvcmQgY29tcG9zZWQgb2YgVW5pY29kZSBzeW1ib2xzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhIHdvcmQgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzVW5pY29kZVdvcmQoc3RyaW5nKSB7XG4gIHJldHVybiByZUhhc1VuaWNvZGVXb3JkLnRlc3Qoc3RyaW5nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNVbmljb2RlV29yZDtcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgYW4gYXJyYXkgY2xvbmUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gKi9cbmZ1bmN0aW9uIGluaXRDbG9uZUFycmF5KGFycmF5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBuZXcgYXJyYXkuY29uc3RydWN0b3IobGVuZ3RoKTtcblxuICAvLyBBZGQgcHJvcGVydGllcyBhc3NpZ25lZCBieSBgUmVnRXhwI2V4ZWNgLlxuICBpZiAobGVuZ3RoICYmIHR5cGVvZiBhcnJheVswXSA9PSAnc3RyaW5nJyAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGFycmF5LCAnaW5kZXgnKSkge1xuICAgIHJlc3VsdC5pbmRleCA9IGFycmF5LmluZGV4O1xuICAgIHJlc3VsdC5pbnB1dCA9IGFycmF5LmlucHV0O1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5pdENsb25lQXJyYXk7XG4iLCIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGZpcnN0IGFyZ3VtZW50IGl0IHJlY2VpdmVzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0geyp9IHZhbHVlIEFueSB2YWx1ZS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGB2YWx1ZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICpcbiAqIGNvbnNvbGUubG9nKF8uaWRlbnRpdHkob2JqZWN0KSA9PT0gb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gaWRlbnRpdHkodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlkZW50aXR5O1xuIiwidmFyIGJhc2VDcmVhdGUgPSByZXF1aXJlKCcuL19iYXNlQ3JlYXRlJyksXG4gICAgZ2V0UHJvdG90eXBlID0gcmVxdWlyZSgnLi9fZ2V0UHJvdG90eXBlJyksXG4gICAgaXNQcm90b3R5cGUgPSByZXF1aXJlKCcuL19pc1Byb3RvdHlwZScpO1xuXG4vKipcbiAqIEluaXRpYWxpemVzIGFuIG9iamVjdCBjbG9uZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNsb25lLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gKi9cbmZ1bmN0aW9uIGluaXRDbG9uZU9iamVjdChvYmplY3QpIHtcbiAgcmV0dXJuICh0eXBlb2Ygb2JqZWN0LmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgIWlzUHJvdG90eXBlKG9iamVjdCkpXG4gICAgPyBiYXNlQ3JlYXRlKGdldFByb3RvdHlwZShvYmplY3QpKVxuICAgIDoge307XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5pdENsb25lT2JqZWN0O1xuIiwiLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIGBmYWxzZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjEzLjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRpbWVzKDIsIF8uc3R1YkZhbHNlKTtcbiAqIC8vID0+IFtmYWxzZSwgZmFsc2VdXG4gKi9cbmZ1bmN0aW9uIHN0dWJGYWxzZSgpIHtcbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0dWJGYWxzZTtcbiIsIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyBgZmFsc2VgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xMy4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50aW1lcygyLCBfLnN0dWJGYWxzZSk7XG4gKiAvLyA9PiBbZmFsc2UsIGZhbHNlXVxuICovXG5mdW5jdGlvbiBzdHViRmFsc2UoKSB7XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHViRmFsc2U7XG4iLCIvKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUNsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gW107XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlQ2xlYXI7XG4iLCJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzcGxpY2UgPSBhcnJheVByb3RvLnNwbGljZTtcblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlRGVsZXRlKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGxhc3RJbmRleCA9IGRhdGEubGVuZ3RoIC0gMTtcbiAgaWYgKGluZGV4ID09IGxhc3RJbmRleCkge1xuICAgIGRhdGEucG9wKCk7XG4gIH0gZWxzZSB7XG4gICAgc3BsaWNlLmNhbGwoZGF0YSwgaW5kZXgsIDEpO1xuICB9XG4gIC0tdGhpcy5zaXplO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVEZWxldGU7XG4iLCJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICByZXR1cm4gaW5kZXggPCAwID8gdW5kZWZpbmVkIDogZGF0YVtpbmRleF1bMV07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlR2V0O1xuIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlSGFzKGtleSkge1xuICByZXR1cm4gYXNzb2NJbmRleE9mKHRoaXMuX19kYXRhX18sIGtleSkgPiAtMTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVIYXM7XG4iLCJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKlxuICogU2V0cyB0aGUgbGlzdCBjYWNoZSBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbGlzdCBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgKyt0aGlzLnNpemU7XG4gICAgZGF0YS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH0gZWxzZSB7XG4gICAgZGF0YVtpbmRleF1bMV0gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVTZXQ7XG4iLCIvKipcbiAqIENyZWF0ZXMgYSB1bmFyeSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50IHRyYW5zZm9ybWVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSBhcmd1bWVudCB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gb3ZlckFyZyhmdW5jLCB0cmFuc2Zvcm0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiBmdW5jKHRyYW5zZm9ybShhcmcpKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvdmVyQXJnO1xuIiwidmFyIGFwcGx5ID0gcmVxdWlyZSgnLi9fYXBwbHknKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZU1heCA9IE1hdGgubWF4O1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVJlc3RgIHdoaWNoIHRyYW5zZm9ybXMgdGhlIHJlc3QgYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIHJlc3QgYXJyYXkgdHJhbnNmb3JtLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG92ZXJSZXN0KGZ1bmMsIHN0YXJ0LCB0cmFuc2Zvcm0pIHtcbiAgc3RhcnQgPSBuYXRpdmVNYXgoc3RhcnQgPT09IHVuZGVmaW5lZCA/IChmdW5jLmxlbmd0aCAtIDEpIDogc3RhcnQsIDApO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heChhcmdzLmxlbmd0aCAtIHN0YXJ0LCAwKSxcbiAgICAgICAgYXJyYXkgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGFycmF5W2luZGV4XSA9IGFyZ3Nbc3RhcnQgKyBpbmRleF07XG4gICAgfVxuICAgIGluZGV4ID0gLTE7XG4gICAgdmFyIG90aGVyQXJncyA9IEFycmF5KHN0YXJ0ICsgMSk7XG4gICAgd2hpbGUgKCsraW5kZXggPCBzdGFydCkge1xuICAgICAgb3RoZXJBcmdzW2luZGV4XSA9IGFyZ3NbaW5kZXhdO1xuICAgIH1cbiAgICBvdGhlckFyZ3Nbc3RhcnRdID0gdHJhbnNmb3JtKGFycmF5KTtcbiAgICByZXR1cm4gYXBwbHkoZnVuYywgdGhpcywgb3RoZXJBcmdzKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvdmVyUmVzdDtcbiIsInZhciBmcmVlR2xvYmFsID0gcmVxdWlyZSgnLi9fZnJlZUdsb2JhbCcpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbi8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gcm9vdDtcbiIsIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyB0aGUgZmlyc3QgYXJndW1lbnQgaXQgcmVjZWl2ZXMuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgQW55IHZhbHVlLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgYHZhbHVlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gKlxuICogY29uc29sZS5sb2coXy5pZGVudGl0eShvYmplY3QpID09PSBvYmplY3QpO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBpZGVudGl0eSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaWRlbnRpdHk7XG4iLCJ2YXIgYXNjaWlUb0FycmF5ID0gcmVxdWlyZSgnLi9fYXNjaWlUb0FycmF5JyksXG4gICAgaGFzVW5pY29kZSA9IHJlcXVpcmUoJy4vX2hhc1VuaWNvZGUnKSxcbiAgICB1bmljb2RlVG9BcnJheSA9IHJlcXVpcmUoJy4vX3VuaWNvZGVUb0FycmF5Jyk7XG5cbi8qKlxuICogQ29udmVydHMgYHN0cmluZ2AgdG8gYW4gYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIHN0cmluZ1RvQXJyYXkoc3RyaW5nKSB7XG4gIHJldHVybiBoYXNVbmljb2RlKHN0cmluZylcbiAgICA/IHVuaWNvZGVUb0FycmF5KHN0cmluZylcbiAgICA6IGFzY2lpVG9BcnJheShzdHJpbmcpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0cmluZ1RvQXJyYXk7XG4iLCIvKiogVXNlZCB0byBtYXRjaCBhIHNpbmdsZSB3aGl0ZXNwYWNlIGNoYXJhY3Rlci4gKi9cbnZhciByZVdoaXRlc3BhY2UgPSAvXFxzLztcblxuLyoqXG4gKiBVc2VkIGJ5IGBfLnRyaW1gIGFuZCBgXy50cmltRW5kYCB0byBnZXQgdGhlIGluZGV4IG9mIHRoZSBsYXN0IG5vbi13aGl0ZXNwYWNlXG4gKiBjaGFyYWN0ZXIgb2YgYHN0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVyLlxuICovXG5mdW5jdGlvbiB0cmltbWVkRW5kSW5kZXgoc3RyaW5nKSB7XG4gIHZhciBpbmRleCA9IHN0cmluZy5sZW5ndGg7XG5cbiAgd2hpbGUgKGluZGV4LS0gJiYgcmVXaGl0ZXNwYWNlLnRlc3Qoc3RyaW5nLmNoYXJBdChpbmRleCkpKSB7fVxuICByZXR1cm4gaW5kZXg7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdHJpbW1lZEVuZEluZGV4O1xuIiwiLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNoYXJhY3RlciBjbGFzc2VzLiAqL1xudmFyIHJzQXN0cmFsUmFuZ2UgPSAnXFxcXHVkODAwLVxcXFx1ZGZmZicsXG4gICAgcnNDb21ib01hcmtzUmFuZ2UgPSAnXFxcXHUwMzAwLVxcXFx1MDM2ZicsXG4gICAgcmVDb21ib0hhbGZNYXJrc1JhbmdlID0gJ1xcXFx1ZmUyMC1cXFxcdWZlMmYnLFxuICAgIHJzQ29tYm9TeW1ib2xzUmFuZ2UgPSAnXFxcXHUyMGQwLVxcXFx1MjBmZicsXG4gICAgcnNDb21ib1JhbmdlID0gcnNDb21ib01hcmtzUmFuZ2UgKyByZUNvbWJvSGFsZk1hcmtzUmFuZ2UgKyByc0NvbWJvU3ltYm9sc1JhbmdlLFxuICAgIHJzVmFyUmFuZ2UgPSAnXFxcXHVmZTBlXFxcXHVmZTBmJztcblxuLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNhcHR1cmUgZ3JvdXBzLiAqL1xudmFyIHJzQXN0cmFsID0gJ1snICsgcnNBc3RyYWxSYW5nZSArICddJyxcbiAgICByc0NvbWJvID0gJ1snICsgcnNDb21ib1JhbmdlICsgJ10nLFxuICAgIHJzRml0eiA9ICdcXFxcdWQ4M2NbXFxcXHVkZmZiLVxcXFx1ZGZmZl0nLFxuICAgIHJzTW9kaWZpZXIgPSAnKD86JyArIHJzQ29tYm8gKyAnfCcgKyByc0ZpdHogKyAnKScsXG4gICAgcnNOb25Bc3RyYWwgPSAnW14nICsgcnNBc3RyYWxSYW5nZSArICddJyxcbiAgICByc1JlZ2lvbmFsID0gJyg/OlxcXFx1ZDgzY1tcXFxcdWRkZTYtXFxcXHVkZGZmXSl7Mn0nLFxuICAgIHJzU3VyclBhaXIgPSAnW1xcXFx1ZDgwMC1cXFxcdWRiZmZdW1xcXFx1ZGMwMC1cXFxcdWRmZmZdJyxcbiAgICByc1pXSiA9ICdcXFxcdTIwMGQnO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgcmVnZXhlcy4gKi9cbnZhciByZU9wdE1vZCA9IHJzTW9kaWZpZXIgKyAnPycsXG4gICAgcnNPcHRWYXIgPSAnWycgKyByc1ZhclJhbmdlICsgJ10/JyxcbiAgICByc09wdEpvaW4gPSAnKD86JyArIHJzWldKICsgJyg/OicgKyBbcnNOb25Bc3RyYWwsIHJzUmVnaW9uYWwsIHJzU3VyclBhaXJdLmpvaW4oJ3wnKSArICcpJyArIHJzT3B0VmFyICsgcmVPcHRNb2QgKyAnKSonLFxuICAgIHJzU2VxID0gcnNPcHRWYXIgKyByZU9wdE1vZCArIHJzT3B0Sm9pbixcbiAgICByc1N5bWJvbCA9ICcoPzonICsgW3JzTm9uQXN0cmFsICsgcnNDb21ibyArICc/JywgcnNDb21ibywgcnNSZWdpb25hbCwgcnNTdXJyUGFpciwgcnNBc3RyYWxdLmpvaW4oJ3wnKSArICcpJztcblxuLyoqIFVzZWQgdG8gbWF0Y2ggW3N0cmluZyBzeW1ib2xzXShodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC11bmljb2RlKS4gKi9cbnZhciByZVVuaWNvZGUgPSBSZWdFeHAocnNGaXR6ICsgJyg/PScgKyByc0ZpdHogKyAnKXwnICsgcnNTeW1ib2wgKyByc1NlcSwgJ2cnKTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIFVuaWNvZGUgYHN0cmluZ2AgdG8gYW4gYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIHVuaWNvZGVUb0FycmF5KHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlVW5pY29kZSkgfHwgW107XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdW5pY29kZVRvQXJyYXk7XG4iLCIvKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2hhcmFjdGVyIGNsYXNzZXMuICovXG52YXIgcnNBc3RyYWxSYW5nZSA9ICdcXFxcdWQ4MDAtXFxcXHVkZmZmJyxcbiAgICByc0NvbWJvTWFya3NSYW5nZSA9ICdcXFxcdTAzMDAtXFxcXHUwMzZmJyxcbiAgICByZUNvbWJvSGFsZk1hcmtzUmFuZ2UgPSAnXFxcXHVmZTIwLVxcXFx1ZmUyZicsXG4gICAgcnNDb21ib1N5bWJvbHNSYW5nZSA9ICdcXFxcdTIwZDAtXFxcXHUyMGZmJyxcbiAgICByc0NvbWJvUmFuZ2UgPSByc0NvbWJvTWFya3NSYW5nZSArIHJlQ29tYm9IYWxmTWFya3NSYW5nZSArIHJzQ29tYm9TeW1ib2xzUmFuZ2UsXG4gICAgcnNEaW5nYmF0UmFuZ2UgPSAnXFxcXHUyNzAwLVxcXFx1MjdiZicsXG4gICAgcnNMb3dlclJhbmdlID0gJ2EtelxcXFx4ZGYtXFxcXHhmNlxcXFx4ZjgtXFxcXHhmZicsXG4gICAgcnNNYXRoT3BSYW5nZSA9ICdcXFxceGFjXFxcXHhiMVxcXFx4ZDdcXFxceGY3JyxcbiAgICByc05vbkNoYXJSYW5nZSA9ICdcXFxceDAwLVxcXFx4MmZcXFxceDNhLVxcXFx4NDBcXFxceDViLVxcXFx4NjBcXFxceDdiLVxcXFx4YmYnLFxuICAgIHJzUHVuY3R1YXRpb25SYW5nZSA9ICdcXFxcdTIwMDAtXFxcXHUyMDZmJyxcbiAgICByc1NwYWNlUmFuZ2UgPSAnIFxcXFx0XFxcXHgwYlxcXFxmXFxcXHhhMFxcXFx1ZmVmZlxcXFxuXFxcXHJcXFxcdTIwMjhcXFxcdTIwMjlcXFxcdTE2ODBcXFxcdTE4MGVcXFxcdTIwMDBcXFxcdTIwMDFcXFxcdTIwMDJcXFxcdTIwMDNcXFxcdTIwMDRcXFxcdTIwMDVcXFxcdTIwMDZcXFxcdTIwMDdcXFxcdTIwMDhcXFxcdTIwMDlcXFxcdTIwMGFcXFxcdTIwMmZcXFxcdTIwNWZcXFxcdTMwMDAnLFxuICAgIHJzVXBwZXJSYW5nZSA9ICdBLVpcXFxceGMwLVxcXFx4ZDZcXFxceGQ4LVxcXFx4ZGUnLFxuICAgIHJzVmFyUmFuZ2UgPSAnXFxcXHVmZTBlXFxcXHVmZTBmJyxcbiAgICByc0JyZWFrUmFuZ2UgPSByc01hdGhPcFJhbmdlICsgcnNOb25DaGFyUmFuZ2UgKyByc1B1bmN0dWF0aW9uUmFuZ2UgKyByc1NwYWNlUmFuZ2U7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSBjYXB0dXJlIGdyb3Vwcy4gKi9cbnZhciByc0Fwb3MgPSBcIlsnXFx1MjAxOV1cIixcbiAgICByc0JyZWFrID0gJ1snICsgcnNCcmVha1JhbmdlICsgJ10nLFxuICAgIHJzQ29tYm8gPSAnWycgKyByc0NvbWJvUmFuZ2UgKyAnXScsXG4gICAgcnNEaWdpdHMgPSAnXFxcXGQrJyxcbiAgICByc0RpbmdiYXQgPSAnWycgKyByc0RpbmdiYXRSYW5nZSArICddJyxcbiAgICByc0xvd2VyID0gJ1snICsgcnNMb3dlclJhbmdlICsgJ10nLFxuICAgIHJzTWlzYyA9ICdbXicgKyByc0FzdHJhbFJhbmdlICsgcnNCcmVha1JhbmdlICsgcnNEaWdpdHMgKyByc0RpbmdiYXRSYW5nZSArIHJzTG93ZXJSYW5nZSArIHJzVXBwZXJSYW5nZSArICddJyxcbiAgICByc0ZpdHogPSAnXFxcXHVkODNjW1xcXFx1ZGZmYi1cXFxcdWRmZmZdJyxcbiAgICByc01vZGlmaWVyID0gJyg/OicgKyByc0NvbWJvICsgJ3wnICsgcnNGaXR6ICsgJyknLFxuICAgIHJzTm9uQXN0cmFsID0gJ1teJyArIHJzQXN0cmFsUmFuZ2UgKyAnXScsXG4gICAgcnNSZWdpb25hbCA9ICcoPzpcXFxcdWQ4M2NbXFxcXHVkZGU2LVxcXFx1ZGRmZl0pezJ9JyxcbiAgICByc1N1cnJQYWlyID0gJ1tcXFxcdWQ4MDAtXFxcXHVkYmZmXVtcXFxcdWRjMDAtXFxcXHVkZmZmXScsXG4gICAgcnNVcHBlciA9ICdbJyArIHJzVXBwZXJSYW5nZSArICddJyxcbiAgICByc1pXSiA9ICdcXFxcdTIwMGQnO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgcmVnZXhlcy4gKi9cbnZhciByc01pc2NMb3dlciA9ICcoPzonICsgcnNMb3dlciArICd8JyArIHJzTWlzYyArICcpJyxcbiAgICByc01pc2NVcHBlciA9ICcoPzonICsgcnNVcHBlciArICd8JyArIHJzTWlzYyArICcpJyxcbiAgICByc09wdENvbnRyTG93ZXIgPSAnKD86JyArIHJzQXBvcyArICcoPzpkfGxsfG18cmV8c3x0fHZlKSk/JyxcbiAgICByc09wdENvbnRyVXBwZXIgPSAnKD86JyArIHJzQXBvcyArICcoPzpEfExMfE18UkV8U3xUfFZFKSk/JyxcbiAgICByZU9wdE1vZCA9IHJzTW9kaWZpZXIgKyAnPycsXG4gICAgcnNPcHRWYXIgPSAnWycgKyByc1ZhclJhbmdlICsgJ10/JyxcbiAgICByc09wdEpvaW4gPSAnKD86JyArIHJzWldKICsgJyg/OicgKyBbcnNOb25Bc3RyYWwsIHJzUmVnaW9uYWwsIHJzU3VyclBhaXJdLmpvaW4oJ3wnKSArICcpJyArIHJzT3B0VmFyICsgcmVPcHRNb2QgKyAnKSonLFxuICAgIHJzT3JkTG93ZXIgPSAnXFxcXGQqKD86MXN0fDJuZHwzcmR8KD8hWzEyM10pXFxcXGR0aCkoPz1cXFxcYnxbQS1aX10pJyxcbiAgICByc09yZFVwcGVyID0gJ1xcXFxkKig/OjFTVHwyTkR8M1JEfCg/IVsxMjNdKVxcXFxkVEgpKD89XFxcXGJ8W2Etel9dKScsXG4gICAgcnNTZXEgPSByc09wdFZhciArIHJlT3B0TW9kICsgcnNPcHRKb2luLFxuICAgIHJzRW1vamkgPSAnKD86JyArIFtyc0RpbmdiYXQsIHJzUmVnaW9uYWwsIHJzU3VyclBhaXJdLmpvaW4oJ3wnKSArICcpJyArIHJzU2VxO1xuXG4vKiogVXNlZCB0byBtYXRjaCBjb21wbGV4IG9yIGNvbXBvdW5kIHdvcmRzLiAqL1xudmFyIHJlVW5pY29kZVdvcmQgPSBSZWdFeHAoW1xuICByc1VwcGVyICsgJz8nICsgcnNMb3dlciArICcrJyArIHJzT3B0Q29udHJMb3dlciArICcoPz0nICsgW3JzQnJlYWssIHJzVXBwZXIsICckJ10uam9pbignfCcpICsgJyknLFxuICByc01pc2NVcHBlciArICcrJyArIHJzT3B0Q29udHJVcHBlciArICcoPz0nICsgW3JzQnJlYWssIHJzVXBwZXIgKyByc01pc2NMb3dlciwgJyQnXS5qb2luKCd8JykgKyAnKScsXG4gIHJzVXBwZXIgKyAnPycgKyByc01pc2NMb3dlciArICcrJyArIHJzT3B0Q29udHJMb3dlcixcbiAgcnNVcHBlciArICcrJyArIHJzT3B0Q29udHJVcHBlcixcbiAgcnNPcmRVcHBlcixcbiAgcnNPcmRMb3dlcixcbiAgcnNEaWdpdHMsXG4gIHJzRW1vamlcbl0uam9pbignfCcpLCAnZycpO1xuXG4vKipcbiAqIFNwbGl0cyBhIFVuaWNvZGUgYHN0cmluZ2AgaW50byBhbiBhcnJheSBvZiBpdHMgd29yZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdvcmRzIG9mIGBzdHJpbmdgLlxuICovXG5mdW5jdGlvbiB1bmljb2RlV29yZHMoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcubWF0Y2gocmVVbmljb2RlV29yZCkgfHwgW107XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdW5pY29kZVdvcmRzO1xuIiwidmFyIGNvcHlPYmplY3QgPSByZXF1aXJlKCcuL19jb3B5T2JqZWN0JyksXG4gICAgY3JlYXRlQXNzaWduZXIgPSByZXF1aXJlKCcuL19jcmVhdGVBc3NpZ25lcicpLFxuICAgIGtleXNJbiA9IHJlcXVpcmUoJy4va2V5c0luJyk7XG5cbi8qKlxuICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5hc3NpZ25gIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgb3duIGFuZFxuICogaW5oZXJpdGVkIHNvdXJjZSBwcm9wZXJ0aWVzLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBhbGlhcyBleHRlbmRcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqIEBzZWUgXy5hc3NpZ25cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogfVxuICpcbiAqIGZ1bmN0aW9uIEJhcigpIHtcbiAqICAgdGhpcy5jID0gMztcbiAqIH1cbiAqXG4gKiBGb28ucHJvdG90eXBlLmIgPSAyO1xuICogQmFyLnByb3RvdHlwZS5kID0gNDtcbiAqXG4gKiBfLmFzc2lnbkluKHsgJ2EnOiAwIH0sIG5ldyBGb28sIG5ldyBCYXIpO1xuICogLy8gPT4geyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzLCAnZCc6IDQgfVxuICovXG52YXIgYXNzaWduSW4gPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSkge1xuICBjb3B5T2JqZWN0KHNvdXJjZSwga2V5c0luKHNvdXJjZSksIG9iamVjdCk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBhc3NpZ25JbjtcbiIsInZhciBjYXBpdGFsaXplID0gcmVxdWlyZSgnLi9jYXBpdGFsaXplJyksXG4gICAgY3JlYXRlQ29tcG91bmRlciA9IHJlcXVpcmUoJy4vX2NyZWF0ZUNvbXBvdW5kZXInKTtcblxuLyoqXG4gKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBbY2FtZWwgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ2FtZWxDYXNlKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgU3RyaW5nXG4gKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY2FtZWwgY2FzZWQgc3RyaW5nLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmNhbWVsQ2FzZSgnRm9vIEJhcicpO1xuICogLy8gPT4gJ2Zvb0JhcidcbiAqXG4gKiBfLmNhbWVsQ2FzZSgnLS1mb28tYmFyLS0nKTtcbiAqIC8vID0+ICdmb29CYXInXG4gKlxuICogXy5jYW1lbENhc2UoJ19fRk9PX0JBUl9fJyk7XG4gKiAvLyA9PiAnZm9vQmFyJ1xuICovXG52YXIgY2FtZWxDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gIHdvcmQgPSB3b3JkLnRvTG93ZXJDYXNlKCk7XG4gIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyBjYXBpdGFsaXplKHdvcmQpIDogd29yZCk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBjYW1lbENhc2U7XG4iLCJ2YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuL3RvU3RyaW5nJyksXG4gICAgdXBwZXJGaXJzdCA9IHJlcXVpcmUoJy4vdXBwZXJGaXJzdCcpO1xuXG4vKipcbiAqIENvbnZlcnRzIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgYHN0cmluZ2AgdG8gdXBwZXIgY2FzZSBhbmQgdGhlIHJlbWFpbmluZ1xuICogdG8gbG93ZXIgY2FzZS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgU3RyaW5nXG4gKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjYXBpdGFsaXplLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY2FwaXRhbGl6ZWQgc3RyaW5nLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmNhcGl0YWxpemUoJ0ZSRUQnKTtcbiAqIC8vID0+ICdGcmVkJ1xuICovXG5mdW5jdGlvbiBjYXBpdGFsaXplKHN0cmluZykge1xuICByZXR1cm4gdXBwZXJGaXJzdCh0b1N0cmluZyhzdHJpbmcpLnRvTG93ZXJDYXNlKCkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNhcGl0YWxpemU7XG4iLCJ2YXIgYmFzZUNsb25lID0gcmVxdWlyZSgnLi9fYmFzZUNsb25lJyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGNsb25pbmcuICovXG52YXIgQ0xPTkVfU1lNQk9MU19GTEFHID0gNDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgc2hhbGxvdyBjbG9uZSBvZiBgdmFsdWVgLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uIHRoZVxuICogW3N0cnVjdHVyZWQgY2xvbmUgYWxnb3JpdGhtXShodHRwczovL21kbi5pby9TdHJ1Y3R1cmVkX2Nsb25lX2FsZ29yaXRobSlcbiAqIGFuZCBzdXBwb3J0cyBjbG9uaW5nIGFycmF5cywgYXJyYXkgYnVmZmVycywgYm9vbGVhbnMsIGRhdGUgb2JqZWN0cywgbWFwcyxcbiAqIG51bWJlcnMsIGBPYmplY3RgIG9iamVjdHMsIHJlZ2V4ZXMsIHNldHMsIHN0cmluZ3MsIHN5bWJvbHMsIGFuZCB0eXBlZFxuICogYXJyYXlzLiBUaGUgb3duIGVudW1lcmFibGUgcHJvcGVydGllcyBvZiBgYXJndW1lbnRzYCBvYmplY3RzIGFyZSBjbG9uZWRcbiAqIGFzIHBsYWluIG9iamVjdHMuIEFuIGVtcHR5IG9iamVjdCBpcyByZXR1cm5lZCBmb3IgdW5jbG9uZWFibGUgdmFsdWVzIHN1Y2hcbiAqIGFzIGVycm9yIG9iamVjdHMsIGZ1bmN0aW9ucywgRE9NIG5vZGVzLCBhbmQgV2Vha01hcHMuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNsb25lLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS5cbiAqIEBzZWUgXy5jbG9uZURlZXBcbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdHMgPSBbeyAnYSc6IDEgfSwgeyAnYic6IDIgfV07XG4gKlxuICogdmFyIHNoYWxsb3cgPSBfLmNsb25lKG9iamVjdHMpO1xuICogY29uc29sZS5sb2coc2hhbGxvd1swXSA9PT0gb2JqZWN0c1swXSk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGNsb25lKHZhbHVlKSB7XG4gIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX1NZTUJPTFNfRkxBRyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xvbmU7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0JyksXG4gICAgbm93ID0gcmVxdWlyZSgnLi9ub3cnKSxcbiAgICB0b051bWJlciA9IHJlcXVpcmUoJy4vdG9OdW1iZXInKTtcblxuLyoqIEVycm9yIG1lc3NhZ2UgY29uc3RhbnRzLiAqL1xudmFyIEZVTkNfRVJST1JfVEVYVCA9ICdFeHBlY3RlZCBhIGZ1bmN0aW9uJztcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZU1heCA9IE1hdGgubWF4LFxuICAgIG5hdGl2ZU1pbiA9IE1hdGgubWluO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBkZWJvdW5jZWQgZnVuY3Rpb24gdGhhdCBkZWxheXMgaW52b2tpbmcgYGZ1bmNgIHVudGlsIGFmdGVyIGB3YWl0YFxuICogbWlsbGlzZWNvbmRzIGhhdmUgZWxhcHNlZCBzaW5jZSB0aGUgbGFzdCB0aW1lIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gd2FzXG4gKiBpbnZva2VkLiBUaGUgZGVib3VuY2VkIGZ1bmN0aW9uIGNvbWVzIHdpdGggYSBgY2FuY2VsYCBtZXRob2QgdG8gY2FuY2VsXG4gKiBkZWxheWVkIGBmdW5jYCBpbnZvY2F0aW9ucyBhbmQgYSBgZmx1c2hgIG1ldGhvZCB0byBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS5cbiAqIFByb3ZpZGUgYG9wdGlvbnNgIHRvIGluZGljYXRlIHdoZXRoZXIgYGZ1bmNgIHNob3VsZCBiZSBpbnZva2VkIG9uIHRoZVxuICogbGVhZGluZyBhbmQvb3IgdHJhaWxpbmcgZWRnZSBvZiB0aGUgYHdhaXRgIHRpbWVvdXQuIFRoZSBgZnVuY2AgaXMgaW52b2tlZFxuICogd2l0aCB0aGUgbGFzdCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbi4gU3Vic2VxdWVudFxuICogY2FsbHMgdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbiByZXR1cm4gdGhlIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2BcbiAqIGludm9jYXRpb24uXG4gKlxuICogKipOb3RlOioqIElmIGBsZWFkaW5nYCBhbmQgYHRyYWlsaW5nYCBvcHRpb25zIGFyZSBgdHJ1ZWAsIGBmdW5jYCBpc1xuICogaW52b2tlZCBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dCBvbmx5IGlmIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb25cbiAqIGlzIGludm9rZWQgbW9yZSB0aGFuIG9uY2UgZHVyaW5nIHRoZSBgd2FpdGAgdGltZW91dC5cbiAqXG4gKiBJZiBgd2FpdGAgaXMgYDBgIGFuZCBgbGVhZGluZ2AgaXMgYGZhbHNlYCwgYGZ1bmNgIGludm9jYXRpb24gaXMgZGVmZXJyZWRcbiAqIHVudGlsIHRvIHRoZSBuZXh0IHRpY2ssIHNpbWlsYXIgdG8gYHNldFRpbWVvdXRgIHdpdGggYSB0aW1lb3V0IG9mIGAwYC5cbiAqXG4gKiBTZWUgW0RhdmlkIENvcmJhY2hvJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9kZWJvdW5jaW5nLXRocm90dGxpbmctZXhwbGFpbmVkLWV4YW1wbGVzLylcbiAqIGZvciBkZXRhaWxzIG92ZXIgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gYF8uZGVib3VuY2VgIGFuZCBgXy50aHJvdHRsZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWJvdW5jZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbd2FpdD0wXSBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sZWFkaW5nPWZhbHNlXVxuICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIGxlYWRpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5tYXhXYWl0XVxuICogIFRoZSBtYXhpbXVtIHRpbWUgYGZ1bmNgIGlzIGFsbG93ZWQgdG8gYmUgZGVsYXllZCBiZWZvcmUgaXQncyBpbnZva2VkLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFpbGluZz10cnVlXVxuICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBkZWJvdW5jZWQgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIC8vIEF2b2lkIGNvc3RseSBjYWxjdWxhdGlvbnMgd2hpbGUgdGhlIHdpbmRvdyBzaXplIGlzIGluIGZsdXguXG4gKiBqUXVlcnkod2luZG93KS5vbigncmVzaXplJywgXy5kZWJvdW5jZShjYWxjdWxhdGVMYXlvdXQsIDE1MCkpO1xuICpcbiAqIC8vIEludm9rZSBgc2VuZE1haWxgIHdoZW4gY2xpY2tlZCwgZGVib3VuY2luZyBzdWJzZXF1ZW50IGNhbGxzLlxuICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIF8uZGVib3VuY2Uoc2VuZE1haWwsIDMwMCwge1xuICogICAnbGVhZGluZyc6IHRydWUsXG4gKiAgICd0cmFpbGluZyc6IGZhbHNlXG4gKiB9KSk7XG4gKlxuICogLy8gRW5zdXJlIGBiYXRjaExvZ2AgaXMgaW52b2tlZCBvbmNlIGFmdGVyIDEgc2Vjb25kIG9mIGRlYm91bmNlZCBjYWxscy5cbiAqIHZhciBkZWJvdW5jZWQgPSBfLmRlYm91bmNlKGJhdGNoTG9nLCAyNTAsIHsgJ21heFdhaXQnOiAxMDAwIH0pO1xuICogdmFyIHNvdXJjZSA9IG5ldyBFdmVudFNvdXJjZSgnL3N0cmVhbScpO1xuICogalF1ZXJ5KHNvdXJjZSkub24oJ21lc3NhZ2UnLCBkZWJvdW5jZWQpO1xuICpcbiAqIC8vIENhbmNlbCB0aGUgdHJhaWxpbmcgZGVib3VuY2VkIGludm9jYXRpb24uXG4gKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCBkZWJvdW5jZWQuY2FuY2VsKTtcbiAqL1xuZnVuY3Rpb24gZGVib3VuY2UoZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICB2YXIgbGFzdEFyZ3MsXG4gICAgICBsYXN0VGhpcyxcbiAgICAgIG1heFdhaXQsXG4gICAgICByZXN1bHQsXG4gICAgICB0aW1lcklkLFxuICAgICAgbGFzdENhbGxUaW1lLFxuICAgICAgbGFzdEludm9rZVRpbWUgPSAwLFxuICAgICAgbGVhZGluZyA9IGZhbHNlLFxuICAgICAgbWF4aW5nID0gZmFsc2UsXG4gICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gIH1cbiAgd2FpdCA9IHRvTnVtYmVyKHdhaXQpIHx8IDA7XG4gIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgIGxlYWRpbmcgPSAhIW9wdGlvbnMubGVhZGluZztcbiAgICBtYXhpbmcgPSAnbWF4V2FpdCcgaW4gb3B0aW9ucztcbiAgICBtYXhXYWl0ID0gbWF4aW5nID8gbmF0aXZlTWF4KHRvTnVtYmVyKG9wdGlvbnMubWF4V2FpdCkgfHwgMCwgd2FpdCkgOiBtYXhXYWl0O1xuICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gIH1cblxuICBmdW5jdGlvbiBpbnZva2VGdW5jKHRpbWUpIHtcbiAgICB2YXIgYXJncyA9IGxhc3RBcmdzLFxuICAgICAgICB0aGlzQXJnID0gbGFzdFRoaXM7XG5cbiAgICBsYXN0QXJncyA9IGxhc3RUaGlzID0gdW5kZWZpbmVkO1xuICAgIGxhc3RJbnZva2VUaW1lID0gdGltZTtcbiAgICByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBsZWFkaW5nRWRnZSh0aW1lKSB7XG4gICAgLy8gUmVzZXQgYW55IGBtYXhXYWl0YCB0aW1lci5cbiAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgLy8gU3RhcnQgdGhlIHRpbWVyIGZvciB0aGUgdHJhaWxpbmcgZWRnZS5cbiAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgIC8vIEludm9rZSB0aGUgbGVhZGluZyBlZGdlLlxuICAgIHJldHVybiBsZWFkaW5nID8gaW52b2tlRnVuYyh0aW1lKSA6IHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbWFpbmluZ1dhaXQodGltZSkge1xuICAgIHZhciB0aW1lU2luY2VMYXN0Q2FsbCA9IHRpbWUgLSBsYXN0Q2FsbFRpbWUsXG4gICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWUsXG4gICAgICAgIHRpbWVXYWl0aW5nID0gd2FpdCAtIHRpbWVTaW5jZUxhc3RDYWxsO1xuXG4gICAgcmV0dXJuIG1heGluZ1xuICAgICAgPyBuYXRpdmVNaW4odGltZVdhaXRpbmcsIG1heFdhaXQgLSB0aW1lU2luY2VMYXN0SW52b2tlKVxuICAgICAgOiB0aW1lV2FpdGluZztcbiAgfVxuXG4gIGZ1bmN0aW9uIHNob3VsZEludm9rZSh0aW1lKSB7XG4gICAgdmFyIHRpbWVTaW5jZUxhc3RDYWxsID0gdGltZSAtIGxhc3RDYWxsVGltZSxcbiAgICAgICAgdGltZVNpbmNlTGFzdEludm9rZSA9IHRpbWUgLSBsYXN0SW52b2tlVGltZTtcblxuICAgIC8vIEVpdGhlciB0aGlzIGlzIHRoZSBmaXJzdCBjYWxsLCBhY3Rpdml0eSBoYXMgc3RvcHBlZCBhbmQgd2UncmUgYXQgdGhlXG4gICAgLy8gdHJhaWxpbmcgZWRnZSwgdGhlIHN5c3RlbSB0aW1lIGhhcyBnb25lIGJhY2t3YXJkcyBhbmQgd2UncmUgdHJlYXRpbmdcbiAgICAvLyBpdCBhcyB0aGUgdHJhaWxpbmcgZWRnZSwgb3Igd2UndmUgaGl0IHRoZSBgbWF4V2FpdGAgbGltaXQuXG4gICAgcmV0dXJuIChsYXN0Q2FsbFRpbWUgPT09IHVuZGVmaW5lZCB8fCAodGltZVNpbmNlTGFzdENhbGwgPj0gd2FpdCkgfHxcbiAgICAgICh0aW1lU2luY2VMYXN0Q2FsbCA8IDApIHx8IChtYXhpbmcgJiYgdGltZVNpbmNlTGFzdEludm9rZSA+PSBtYXhXYWl0KSk7XG4gIH1cblxuICBmdW5jdGlvbiB0aW1lckV4cGlyZWQoKSB7XG4gICAgdmFyIHRpbWUgPSBub3coKTtcbiAgICBpZiAoc2hvdWxkSW52b2tlKHRpbWUpKSB7XG4gICAgICByZXR1cm4gdHJhaWxpbmdFZGdlKHRpbWUpO1xuICAgIH1cbiAgICAvLyBSZXN0YXJ0IHRoZSB0aW1lci5cbiAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHJlbWFpbmluZ1dhaXQodGltZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhaWxpbmdFZGdlKHRpbWUpIHtcbiAgICB0aW1lcklkID0gdW5kZWZpbmVkO1xuXG4gICAgLy8gT25seSBpbnZva2UgaWYgd2UgaGF2ZSBgbGFzdEFyZ3NgIHdoaWNoIG1lYW5zIGBmdW5jYCBoYXMgYmVlblxuICAgIC8vIGRlYm91bmNlZCBhdCBsZWFzdCBvbmNlLlxuICAgIGlmICh0cmFpbGluZyAmJiBsYXN0QXJncykge1xuICAgICAgcmV0dXJuIGludm9rZUZ1bmModGltZSk7XG4gICAgfVxuICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICBpZiAodGltZXJJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZXJJZCk7XG4gICAgfVxuICAgIGxhc3RJbnZva2VUaW1lID0gMDtcbiAgICBsYXN0QXJncyA9IGxhc3RDYWxsVGltZSA9IGxhc3RUaGlzID0gdGltZXJJZCA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgIHJldHVybiB0aW1lcklkID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiB0cmFpbGluZ0VkZ2Uobm93KCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVib3VuY2VkKCkge1xuICAgIHZhciB0aW1lID0gbm93KCksXG4gICAgICAgIGlzSW52b2tpbmcgPSBzaG91bGRJbnZva2UodGltZSk7XG5cbiAgICBsYXN0QXJncyA9IGFyZ3VtZW50cztcbiAgICBsYXN0VGhpcyA9IHRoaXM7XG4gICAgbGFzdENhbGxUaW1lID0gdGltZTtcblxuICAgIGlmIChpc0ludm9raW5nKSB7XG4gICAgICBpZiAodGltZXJJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBsZWFkaW5nRWRnZShsYXN0Q2FsbFRpbWUpO1xuICAgICAgfVxuICAgICAgaWYgKG1heGluZykge1xuICAgICAgICAvLyBIYW5kbGUgaW52b2NhdGlvbnMgaW4gYSB0aWdodCBsb29wLlxuICAgICAgICBjbGVhclRpbWVvdXQodGltZXJJZCk7XG4gICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgIHJldHVybiBpbnZva2VGdW5jKGxhc3RDYWxsVGltZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgZGVib3VuY2VkLmNhbmNlbCA9IGNhbmNlbDtcbiAgZGVib3VuY2VkLmZsdXNoID0gZmx1c2g7XG4gIHJldHVybiBkZWJvdW5jZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZGVib3VuY2U7XG4iLCJ2YXIgYmFzZVRvU3RyaW5nID0gcmVxdWlyZSgnLi9fYmFzZVRvU3RyaW5nJyk7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZy4gQW4gZW1wdHkgc3RyaW5nIGlzIHJldHVybmVkIGZvciBgbnVsbGBcbiAqIGFuZCBgdW5kZWZpbmVkYCB2YWx1ZXMuIFRoZSBzaWduIG9mIGAtMGAgaXMgcHJlc2VydmVkLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50b1N0cmluZyhudWxsKTtcbiAqIC8vID0+ICcnXG4gKlxuICogXy50b1N0cmluZygtMCk7XG4gKiAvLyA9PiAnLTAnXG4gKlxuICogXy50b1N0cmluZyhbMSwgMiwgM10pO1xuICogLy8gPT4gJzEsMiwzJ1xuICovXG5mdW5jdGlvbiB0b1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/ICcnIDogYmFzZVRvU3RyaW5nKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b1N0cmluZztcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZvckVhY2hgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBhcnJheUVhY2goYXJyYXksIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBpZiAoaXRlcmF0ZWUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpID09PSBmYWxzZSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheUVhY2g7XG4iLCIvKipcbiAqIFBlcmZvcm1zIGFcbiAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmUgZXF1aXZhbGVudC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gKlxuICogXy5lcShvYmplY3QsIG9iamVjdCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcShvYmplY3QsIG90aGVyKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcSgnYScsICdhJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcSgnYScsIE9iamVjdCgnYScpKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcShOYU4sIE5hTik7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGVxKHZhbHVlLCBvdGhlcikge1xuICByZXR1cm4gdmFsdWUgPT09IG90aGVyIHx8ICh2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlcTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9hc3NpZ25JbicpO1xuIiwiLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIHRoZSBmaXJzdCBhcmd1bWVudCBpdCByZWNlaXZlcy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHsqfSB2YWx1ZSBBbnkgdmFsdWUuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyBgdmFsdWVgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqXG4gKiBjb25zb2xlLmxvZyhfLmlkZW50aXR5KG9iamVjdCkgPT09IG9iamVjdCk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGlkZW50aXR5KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpZGVudGl0eTtcbiIsInZhciBiYXNlSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Jhc2VJbmRleE9mJyk7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmluY2x1ZGVzYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAqIHNwZWNpZnlpbmcgYW4gaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IHRhcmdldCBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdGFyZ2V0YCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBhcnJheUluY2x1ZGVzKGFycmF5LCB2YWx1ZSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gIHJldHVybiAhIWxlbmd0aCAmJiBiYXNlSW5kZXhPZihhcnJheSwgdmFsdWUsIDApID4gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlJbmNsdWRlcztcbiIsIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyBgZmFsc2VgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xMy4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50aW1lcygyLCBfLnN0dWJGYWxzZSk7XG4gKiAvLyA9PiBbZmFsc2UsIGZhbHNlXVxuICovXG5mdW5jdGlvbiBzdHViRmFsc2UoKSB7XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHViRmFsc2U7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0FycmF5O1xuIiwidmFyIGlzRnVuY3Rpb24gPSByZXF1aXJlKCcuL2lzRnVuY3Rpb24nKSxcbiAgICBpc0xlbmd0aCA9IHJlcXVpcmUoJy4vaXNMZW5ndGgnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLiBBIHZhbHVlIGlzIGNvbnNpZGVyZWQgYXJyYXktbGlrZSBpZiBpdCdzXG4gKiBub3QgYSBmdW5jdGlvbiBhbmQgaGFzIGEgYHZhbHVlLmxlbmd0aGAgdGhhdCdzIGFuIGludGVnZXIgZ3JlYXRlciB0aGFuIG9yXG4gKiBlcXVhbCB0byBgMGAgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZSgnYWJjJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhaXNGdW5jdGlvbih2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNBcnJheUxpa2U7XG4iLCIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYGZhbHNlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udGltZXMoMiwgXy5zdHViRmFsc2UpO1xuICogLy8gPT4gW2ZhbHNlLCBmYWxzZV1cbiAqL1xuZnVuY3Rpb24gc3R1YkZhbHNlKCkge1xuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R1YkZhbHNlO1xuIiwidmFyIGJhc2VLZXlzID0gcmVxdWlyZSgnLi9fYmFzZUtleXMnKSxcbiAgICBnZXRUYWcgPSByZXF1aXJlKCcuL19nZXRUYWcnKSxcbiAgICBpc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vaXNBcmd1bWVudHMnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyksXG4gICAgaXNCdWZmZXIgPSByZXF1aXJlKCcuL2lzQnVmZmVyJyksXG4gICAgaXNQcm90b3R5cGUgPSByZXF1aXJlKCcuL19pc1Byb3RvdHlwZScpLFxuICAgIGlzVHlwZWRBcnJheSA9IHJlcXVpcmUoJy4vaXNUeXBlZEFycmF5Jyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhbiBlbXB0eSBvYmplY3QsIGNvbGxlY3Rpb24sIG1hcCwgb3Igc2V0LlxuICpcbiAqIE9iamVjdHMgYXJlIGNvbnNpZGVyZWQgZW1wdHkgaWYgdGhleSBoYXZlIG5vIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZFxuICogcHJvcGVydGllcy5cbiAqXG4gKiBBcnJheS1saWtlIHZhbHVlcyBzdWNoIGFzIGBhcmd1bWVudHNgIG9iamVjdHMsIGFycmF5cywgYnVmZmVycywgc3RyaW5ncywgb3JcbiAqIGpRdWVyeS1saWtlIGNvbGxlY3Rpb25zIGFyZSBjb25zaWRlcmVkIGVtcHR5IGlmIHRoZXkgaGF2ZSBhIGBsZW5ndGhgIG9mIGAwYC5cbiAqIFNpbWlsYXJseSwgbWFwcyBhbmQgc2V0cyBhcmUgY29uc2lkZXJlZCBlbXB0eSBpZiB0aGV5IGhhdmUgYSBgc2l6ZWAgb2YgYDBgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGVtcHR5LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNFbXB0eShudWxsKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzRW1wdHkodHJ1ZSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0VtcHR5KDEpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNFbXB0eShbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzRW1wdHkoeyAnYSc6IDEgfSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0VtcHR5KHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKGlzQXJyYXlMaWtlKHZhbHVlKSAmJlxuICAgICAgKGlzQXJyYXkodmFsdWUpIHx8IHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fCB0eXBlb2YgdmFsdWUuc3BsaWNlID09ICdmdW5jdGlvbicgfHxcbiAgICAgICAgaXNCdWZmZXIodmFsdWUpIHx8IGlzVHlwZWRBcnJheSh2YWx1ZSkgfHwgaXNBcmd1bWVudHModmFsdWUpKSkge1xuICAgIHJldHVybiAhdmFsdWUubGVuZ3RoO1xuICB9XG4gIHZhciB0YWcgPSBnZXRUYWcodmFsdWUpO1xuICBpZiAodGFnID09IG1hcFRhZyB8fCB0YWcgPT0gc2V0VGFnKSB7XG4gICAgcmV0dXJuICF2YWx1ZS5zaXplO1xuICB9XG4gIGlmIChpc1Byb3RvdHlwZSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gIWJhc2VLZXlzKHZhbHVlKS5sZW5ndGg7XG4gIH1cbiAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGtleSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNFbXB0eTtcbiIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXN5bmNUYWcgPSAnW29iamVjdCBBc3luY0Z1bmN0aW9uXScsXG4gICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJyxcbiAgICBwcm94eVRhZyA9ICdbb2JqZWN0IFByb3h5XSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0Z1bmN0aW9uKF8pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvclxuICAvLyBpbiBTYWZhcmkgOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheXMgYW5kIG90aGVyIGNvbnN0cnVjdG9ycy5cbiAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICByZXR1cm4gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZyB8fCB0YWcgPT0gYXN5bmNUYWcgfHwgdGFnID09IHByb3h5VGFnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRnVuY3Rpb247XG4iLCIvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgbGVuZ3RoLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gKiBbYFRvTGVuZ3RoYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9sZW5ndGgpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgbGVuZ3RoLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNMZW5ndGgoMyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aChJbmZpbml0eSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoJzMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTGVuZ3RoKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiZcbiAgICB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNMZW5ndGg7XG4iLCIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYGZhbHNlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udGltZXMoMiwgXy5zdHViRmFsc2UpO1xuICogLy8gPT4gW2ZhbHNlLCBmYWxzZV1cbiAqL1xuZnVuY3Rpb24gc3R1YkZhbHNlKCkge1xuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R1YkZhbHNlO1xuIiwidmFyIGlzTnVtYmVyID0gcmVxdWlyZSgnLi9pc051bWJlcicpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGBOYU5gLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICogW2BOdW1iZXIuaXNOYU5gXShodHRwczovL21kbi5pby9OdW1iZXIvaXNOYU4pIGFuZCBpcyBub3QgdGhlIHNhbWUgYXNcbiAqIGdsb2JhbCBbYGlzTmFOYF0oaHR0cHM6Ly9tZG4uaW8vaXNOYU4pIHdoaWNoIHJldHVybnMgYHRydWVgIGZvclxuICogYHVuZGVmaW5lZGAgYW5kIG90aGVyIG5vbi1udW1iZXIgdmFsdWVzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGBOYU5gLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNOYU4oTmFOKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzTmFOKG5ldyBOdW1iZXIoTmFOKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogaXNOYU4odW5kZWZpbmVkKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzTmFOKHVuZGVmaW5lZCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc05hTih2YWx1ZSkge1xuICAvLyBBbiBgTmFOYCBwcmltaXRpdmUgaXMgdGhlIG9ubHkgdmFsdWUgdGhhdCBpcyBub3QgZXF1YWwgdG8gaXRzZWxmLlxuICAvLyBQZXJmb3JtIHRoZSBgdG9TdHJpbmdUYWdgIGNoZWNrIGZpcnN0IHRvIGF2b2lkIGVycm9ycyB3aXRoIHNvbWVcbiAgLy8gQWN0aXZlWCBvYmplY3RzIGluIElFLlxuICByZXR1cm4gaXNOdW1iZXIodmFsdWUpICYmIHZhbHVlICE9ICt2YWx1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc05hTjtcbiIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYE51bWJlcmAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAqXG4gKiAqKk5vdGU6KiogVG8gZXhjbHVkZSBgSW5maW5pdHlgLCBgLUluZmluaXR5YCwgYW5kIGBOYU5gLCB3aGljaCBhcmVcbiAqIGNsYXNzaWZpZWQgYXMgbnVtYmVycywgdXNlIHRoZSBgXy5pc0Zpbml0ZWAgbWV0aG9kLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbnVtYmVyLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNOdW1iZXIoMyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc051bWJlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzTnVtYmVyKEluZmluaXR5KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzTnVtYmVyKCczJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc051bWJlcih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInIHx8XG4gICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gbnVtYmVyVGFnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc051bWJlcjtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0O1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNPYmplY3RMaWtlO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgZ2V0UHJvdG90eXBlID0gcmVxdWlyZSgnLi9fZ2V0UHJvdG90eXBlJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIFVzZWQgdG8gaW5mZXIgdGhlIGBPYmplY3RgIGNvbnN0cnVjdG9yLiAqL1xudmFyIG9iamVjdEN0b3JTdHJpbmcgPSBmdW5jVG9TdHJpbmcuY2FsbChPYmplY3QpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCB0aGF0IGlzLCBhbiBvYmplY3QgY3JlYXRlZCBieSB0aGVcbiAqIGBPYmplY3RgIGNvbnN0cnVjdG9yIG9yIG9uZSB3aXRoIGEgYFtbUHJvdG90eXBlXV1gIG9mIGBudWxsYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuOC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiB9XG4gKlxuICogXy5pc1BsYWluT2JqZWN0KG5ldyBGb28pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KHsgJ3gnOiAwLCAneSc6IDAgfSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3RMaWtlKHZhbHVlKSB8fCBiYXNlR2V0VGFnKHZhbHVlKSAhPSBvYmplY3RUYWcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHByb3RvID0gZ2V0UHJvdG90eXBlKHZhbHVlKTtcbiAgaWYgKHByb3RvID09PSBudWxsKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdmFyIEN0b3IgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3RvLCAnY29uc3RydWN0b3InKSAmJiBwcm90by5jb25zdHJ1Y3RvcjtcbiAgcmV0dXJuIHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3RvciBpbnN0YW5jZW9mIEN0b3IgJiZcbiAgICBmdW5jVG9TdHJpbmcuY2FsbChDdG9yKSA9PSBvYmplY3RDdG9yU3RyaW5nO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzUGxhaW5PYmplY3Q7XG4iLCIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYGZhbHNlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udGltZXMoMiwgXy5zdHViRmFsc2UpO1xuICogLy8gPT4gW2ZhbHNlLCBmYWxzZV1cbiAqL1xuZnVuY3Rpb24gc3R1YkZhbHNlKCkge1xuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R1YkZhbHNlO1xuIiwiLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIGBmYWxzZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjEzLjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRpbWVzKDIsIF8uc3R1YkZhbHNlKTtcbiAqIC8vID0+IFtmYWxzZSwgZmFsc2VdXG4gKi9cbmZ1bmN0aW9uIHN0dWJGYWxzZSgpIHtcbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0dWJGYWxzZTtcbiIsIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyBgZmFsc2VgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xMy4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50aW1lcygyLCBfLnN0dWJGYWxzZSk7XG4gKiAvLyA9PiBbZmFsc2UsIGZhbHNlXVxuICovXG5mdW5jdGlvbiBzdHViRmFsc2UoKSB7XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHViRmFsc2U7XG4iLCJ2YXIgb3ZlckFyZyA9IHJlcXVpcmUoJy4vX292ZXJBcmcnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUtleXMgPSBvdmVyQXJnKE9iamVjdC5rZXlzLCBPYmplY3QpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5hdGl2ZUtleXM7XG4iLCIvKipcbiAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZVxuICogW2BPYmplY3Qua2V5c2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICogZXhjZXB0IHRoYXQgaXQgaW5jbHVkZXMgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydGllcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gbmF0aXZlS2V5c0luKG9iamVjdCkge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGlmIChvYmplY3QgIT0gbnVsbCkge1xuICAgIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuYXRpdmVLZXlzSW47XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSB0aW1lc3RhbXAgb2YgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdGhhdCBoYXZlIGVsYXBzZWQgc2luY2VcbiAqIHRoZSBVbml4IGVwb2NoICgxIEphbnVhcnkgMTk3MCAwMDowMDowMCBVVEMpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi40LjBcbiAqIEBjYXRlZ29yeSBEYXRlXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lc3RhbXAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uZGVmZXIoZnVuY3Rpb24oc3RhbXApIHtcbiAqICAgY29uc29sZS5sb2coXy5ub3coKSAtIHN0YW1wKTtcbiAqIH0sIF8ubm93KCkpO1xuICogLy8gPT4gTG9ncyB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpdCB0b29rIGZvciB0aGUgZGVmZXJyZWQgaW52b2NhdGlvbi5cbiAqL1xudmFyIG5vdyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gcm9vdC5EYXRlLm5vdygpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBub3c7XG4iLCJ2YXIgZGVib3VuY2UgPSByZXF1aXJlKCcuL2RlYm91bmNlJyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0Jyk7XG5cbi8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbnZhciBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHRocm90dGxlZCBmdW5jdGlvbiB0aGF0IG9ubHkgaW52b2tlcyBgZnVuY2AgYXQgbW9zdCBvbmNlIHBlclxuICogZXZlcnkgYHdhaXRgIG1pbGxpc2Vjb25kcy4gVGhlIHRocm90dGxlZCBmdW5jdGlvbiBjb21lcyB3aXRoIGEgYGNhbmNlbGBcbiAqIG1ldGhvZCB0byBjYW5jZWwgZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG9cbiAqIGltbWVkaWF0ZWx5IGludm9rZSB0aGVtLiBQcm92aWRlIGBvcHRpb25zYCB0byBpbmRpY2F0ZSB3aGV0aGVyIGBmdW5jYFxuICogc2hvdWxkIGJlIGludm9rZWQgb24gdGhlIGxlYWRpbmcgYW5kL29yIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIGB3YWl0YFxuICogdGltZW91dC4gVGhlIGBmdW5jYCBpcyBpbnZva2VkIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZVxuICogdGhyb3R0bGVkIGZ1bmN0aW9uLiBTdWJzZXF1ZW50IGNhbGxzIHRvIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gcmV0dXJuIHRoZVxuICogcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYCBpbnZvY2F0aW9uLlxuICpcbiAqICoqTm90ZToqKiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgLCBgZnVuY2AgaXNcbiAqIGludm9rZWQgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uXG4gKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gKlxuICogSWYgYHdhaXRgIGlzIGAwYCBhbmQgYGxlYWRpbmdgIGlzIGBmYWxzZWAsIGBmdW5jYCBpbnZvY2F0aW9uIGlzIGRlZmVycmVkXG4gKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuXG4gKlxuICogU2VlIFtEYXZpZCBDb3JiYWNobydzIGFydGljbGVdKGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vZGVib3VuY2luZy10aHJvdHRsaW5nLWV4cGxhaW5lZC1leGFtcGxlcy8pXG4gKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLnRocm90dGxlYCBhbmQgYF8uZGVib3VuY2VgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gdGhyb3R0bGUuXG4gKiBAcGFyYW0ge251bWJlcn0gW3dhaXQ9MF0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gdGhyb3R0bGUgaW52b2NhdGlvbnMgdG8uXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz10cnVlXVxuICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIGxlYWRpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgdGhyb3R0bGVkIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiAvLyBBdm9pZCBleGNlc3NpdmVseSB1cGRhdGluZyB0aGUgcG9zaXRpb24gd2hpbGUgc2Nyb2xsaW5nLlxuICogalF1ZXJ5KHdpbmRvdykub24oJ3Njcm9sbCcsIF8udGhyb3R0bGUodXBkYXRlUG9zaXRpb24sIDEwMCkpO1xuICpcbiAqIC8vIEludm9rZSBgcmVuZXdUb2tlbmAgd2hlbiB0aGUgY2xpY2sgZXZlbnQgaXMgZmlyZWQsIGJ1dCBub3QgbW9yZSB0aGFuIG9uY2UgZXZlcnkgNSBtaW51dGVzLlxuICogdmFyIHRocm90dGxlZCA9IF8udGhyb3R0bGUocmVuZXdUb2tlbiwgMzAwMDAwLCB7ICd0cmFpbGluZyc6IGZhbHNlIH0pO1xuICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIHRocm90dGxlZCk7XG4gKlxuICogLy8gQ2FuY2VsIHRoZSB0cmFpbGluZyB0aHJvdHRsZWQgaW52b2NhdGlvbi5cbiAqIGpRdWVyeSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIHRocm90dGxlZC5jYW5jZWwpO1xuICovXG5mdW5jdGlvbiB0aHJvdHRsZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gIHZhciBsZWFkaW5nID0gdHJ1ZSxcbiAgICAgIHRyYWlsaW5nID0gdHJ1ZTtcblxuICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgfVxuICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICBsZWFkaW5nID0gJ2xlYWRpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMubGVhZGluZyA6IGxlYWRpbmc7XG4gICAgdHJhaWxpbmcgPSAndHJhaWxpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMudHJhaWxpbmcgOiB0cmFpbGluZztcbiAgfVxuICByZXR1cm4gZGVib3VuY2UoZnVuYywgd2FpdCwge1xuICAgICdsZWFkaW5nJzogbGVhZGluZyxcbiAgICAnbWF4V2FpdCc6IHdhaXQsXG4gICAgJ3RyYWlsaW5nJzogdHJhaWxpbmdcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdGhyb3R0bGU7XG4iLCJ2YXIgYmFzZVRyaW0gPSByZXF1aXJlKCcuL19iYXNlVHJpbScpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIGlzU3ltYm9sID0gcmVxdWlyZSgnLi9pc1N5bWJvbCcpO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBOQU4gPSAwIC8gMDtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGJhZCBzaWduZWQgaGV4YWRlY2ltYWwgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzQmFkSGV4ID0gL15bLStdMHhbMC05YS1mXSskL2k7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBiaW5hcnkgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzQmluYXJ5ID0gL14wYlswMV0rJC9pO1xuXG4vKiogVXNlZCB0byBkZXRlY3Qgb2N0YWwgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzT2N0YWwgPSAvXjBvWzAtN10rJC9pO1xuXG4vKiogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgd2l0aG91dCBhIGRlcGVuZGVuY3kgb24gYHJvb3RgLiAqL1xudmFyIGZyZWVQYXJzZUludCA9IHBhcnNlSW50O1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBudW1iZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBudW1iZXIuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9OdW1iZXIoMy4yKTtcbiAqIC8vID0+IDMuMlxuICpcbiAqIF8udG9OdW1iZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiA1ZS0zMjRcbiAqXG4gKiBfLnRvTnVtYmVyKEluZmluaXR5KTtcbiAqIC8vID0+IEluZmluaXR5XG4gKlxuICogXy50b051bWJlcignMy4yJyk7XG4gKiAvLyA9PiAzLjJcbiAqL1xuZnVuY3Rpb24gdG9OdW1iZXIodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIE5BTjtcbiAgfVxuICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgdmFyIG90aGVyID0gdHlwZW9mIHZhbHVlLnZhbHVlT2YgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLnZhbHVlT2YoKSA6IHZhbHVlO1xuICAgIHZhbHVlID0gaXNPYmplY3Qob3RoZXIpID8gKG90aGVyICsgJycpIDogb3RoZXI7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gMCA/IHZhbHVlIDogK3ZhbHVlO1xuICB9XG4gIHZhbHVlID0gYmFzZVRyaW0odmFsdWUpO1xuICB2YXIgaXNCaW5hcnkgPSByZUlzQmluYXJ5LnRlc3QodmFsdWUpO1xuICByZXR1cm4gKGlzQmluYXJ5IHx8IHJlSXNPY3RhbC50ZXN0KHZhbHVlKSlcbiAgICA/IGZyZWVQYXJzZUludCh2YWx1ZS5zbGljZSgyKSwgaXNCaW5hcnkgPyAyIDogOClcbiAgICA6IChyZUlzQmFkSGV4LnRlc3QodmFsdWUpID8gTkFOIDogK3ZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b051bWJlcjtcbiIsInZhciBiYXNlVG9TdHJpbmcgPSByZXF1aXJlKCcuL19iYXNlVG9TdHJpbmcnKTtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nLiBBbiBlbXB0eSBzdHJpbmcgaXMgcmV0dXJuZWQgZm9yIGBudWxsYFxuICogYW5kIGB1bmRlZmluZWRgIHZhbHVlcy4gVGhlIHNpZ24gb2YgYC0wYCBpcyBwcmVzZXJ2ZWQuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvU3RyaW5nKG51bGwpO1xuICogLy8gPT4gJydcbiAqXG4gKiBfLnRvU3RyaW5nKC0wKTtcbiAqIC8vID0+ICctMCdcbiAqXG4gKiBfLnRvU3RyaW5nKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiAnMSwyLDMnXG4gKi9cbmZ1bmN0aW9uIHRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PSBudWxsID8gJycgOiBiYXNlVG9TdHJpbmcodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvU3RyaW5nO1xuIiwidmFyIGFycmF5RWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5RWFjaCcpLFxuICAgIGJhc2VDcmVhdGUgPSByZXF1aXJlKCcuL19iYXNlQ3JlYXRlJyksXG4gICAgYmFzZUZvck93biA9IHJlcXVpcmUoJy4vX2Jhc2VGb3JPd24nKSxcbiAgICBiYXNlSXRlcmF0ZWUgPSByZXF1aXJlKCcuL19iYXNlSXRlcmF0ZWUnKSxcbiAgICBnZXRQcm90b3R5cGUgPSByZXF1aXJlKCcuL19nZXRQcm90b3R5cGUnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNCdWZmZXIgPSByZXF1aXJlKCcuL2lzQnVmZmVyJyksXG4gICAgaXNGdW5jdGlvbiA9IHJlcXVpcmUoJy4vaXNGdW5jdGlvbicpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIGlzVHlwZWRBcnJheSA9IHJlcXVpcmUoJy4vaXNUeXBlZEFycmF5Jyk7XG5cbi8qKlxuICogQW4gYWx0ZXJuYXRpdmUgdG8gYF8ucmVkdWNlYDsgdGhpcyBtZXRob2QgdHJhbnNmb3JtcyBgb2JqZWN0YCB0byBhIG5ld1xuICogYGFjY3VtdWxhdG9yYCBvYmplY3Qgd2hpY2ggaXMgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGVhY2ggb2YgaXRzIG93blxuICogZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyB0aHJ1IGBpdGVyYXRlZWAsIHdpdGggZWFjaCBpbnZvY2F0aW9uXG4gKiBwb3RlbnRpYWxseSBtdXRhdGluZyB0aGUgYGFjY3VtdWxhdG9yYCBvYmplY3QuIElmIGBhY2N1bXVsYXRvcmAgaXMgbm90XG4gKiBwcm92aWRlZCwgYSBuZXcgb2JqZWN0IHdpdGggdGhlIHNhbWUgYFtbUHJvdG90eXBlXV1gIHdpbGwgYmUgdXNlZC4gVGhlXG4gKiBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggZm91ciBhcmd1bWVudHM6IChhY2N1bXVsYXRvciwgdmFsdWUsIGtleSwgb2JqZWN0KS5cbiAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDEuMy4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGN1c3RvbSBhY2N1bXVsYXRvciB2YWx1ZS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50cmFuc2Zvcm0oWzIsIDMsIDRdLCBmdW5jdGlvbihyZXN1bHQsIG4pIHtcbiAqICAgcmVzdWx0LnB1c2gobiAqPSBuKTtcbiAqICAgcmV0dXJuIG4gJSAyID09IDA7XG4gKiB9LCBbXSk7XG4gKiAvLyA9PiBbNCwgOV1cbiAqXG4gKiBfLnRyYW5zZm9ybSh7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfSwgZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gKiAgIChyZXN1bHRbdmFsdWVdIHx8IChyZXN1bHRbdmFsdWVdID0gW10pKS5wdXNoKGtleSk7XG4gKiB9LCB7fSk7XG4gKiAvLyA9PiB7ICcxJzogWydhJywgJ2MnXSwgJzInOiBbJ2InXSB9XG4gKi9cbmZ1bmN0aW9uIHRyYW5zZm9ybShvYmplY3QsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICB2YXIgaXNBcnIgPSBpc0FycmF5KG9iamVjdCksXG4gICAgICBpc0Fyckxpa2UgPSBpc0FyciB8fCBpc0J1ZmZlcihvYmplY3QpIHx8IGlzVHlwZWRBcnJheShvYmplY3QpO1xuXG4gIGl0ZXJhdGVlID0gYmFzZUl0ZXJhdGVlKGl0ZXJhdGVlLCA0KTtcbiAgaWYgKGFjY3VtdWxhdG9yID09IG51bGwpIHtcbiAgICB2YXIgQ3RvciA9IG9iamVjdCAmJiBvYmplY3QuY29uc3RydWN0b3I7XG4gICAgaWYgKGlzQXJyTGlrZSkge1xuICAgICAgYWNjdW11bGF0b3IgPSBpc0FyciA/IG5ldyBDdG9yIDogW107XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgIGFjY3VtdWxhdG9yID0gaXNGdW5jdGlvbihDdG9yKSA/IGJhc2VDcmVhdGUoZ2V0UHJvdG90eXBlKG9iamVjdCkpIDoge307XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgYWNjdW11bGF0b3IgPSB7fTtcbiAgICB9XG4gIH1cbiAgKGlzQXJyTGlrZSA/IGFycmF5RWFjaCA6IGJhc2VGb3JPd24pKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBvYmplY3QpIHtcbiAgICByZXR1cm4gaXRlcmF0ZWUoYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleCwgb2JqZWN0KTtcbiAgfSk7XG4gIHJldHVybiBhY2N1bXVsYXRvcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0cmFuc2Zvcm07XG4iLCJ2YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuL3RvU3RyaW5nJyk7XG5cbi8qKiBVc2VkIHRvIGdlbmVyYXRlIHVuaXF1ZSBJRHMuICovXG52YXIgaWRDb3VudGVyID0gMDtcblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSB1bmlxdWUgSUQuIElmIGBwcmVmaXhgIGlzIGdpdmVuLCB0aGUgSUQgaXMgYXBwZW5kZWQgdG8gaXQuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBwYXJhbSB7c3RyaW5nfSBbcHJlZml4PScnXSBUaGUgdmFsdWUgdG8gcHJlZml4IHRoZSBJRCB3aXRoLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdW5pcXVlIElELlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnVuaXF1ZUlkKCdjb250YWN0XycpO1xuICogLy8gPT4gJ2NvbnRhY3RfMTA0J1xuICpcbiAqIF8udW5pcXVlSWQoKTtcbiAqIC8vID0+ICcxMDUnXG4gKi9cbmZ1bmN0aW9uIHVuaXF1ZUlkKHByZWZpeCkge1xuICB2YXIgaWQgPSArK2lkQ291bnRlcjtcbiAgcmV0dXJuIHRvU3RyaW5nKHByZWZpeCkgKyBpZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB1bmlxdWVJZDtcbiIsInZhciBjcmVhdGVDYXNlRmlyc3QgPSByZXF1aXJlKCcuL19jcmVhdGVDYXNlRmlyc3QnKTtcblxuLyoqXG4gKiBDb252ZXJ0cyB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGBzdHJpbmdgIHRvIHVwcGVyIGNhc2UuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IFN0cmluZ1xuICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udXBwZXJGaXJzdCgnZnJlZCcpO1xuICogLy8gPT4gJ0ZyZWQnXG4gKlxuICogXy51cHBlckZpcnN0KCdGUkVEJyk7XG4gKiAvLyA9PiAnRlJFRCdcbiAqL1xudmFyIHVwcGVyRmlyc3QgPSBjcmVhdGVDYXNlRmlyc3QoJ3RvVXBwZXJDYXNlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gdXBwZXJGaXJzdDtcbiIsInZhciBhc2NpaVdvcmRzID0gcmVxdWlyZSgnLi9fYXNjaWlXb3JkcycpLFxuICAgIGhhc1VuaWNvZGVXb3JkID0gcmVxdWlyZSgnLi9faGFzVW5pY29kZVdvcmQnKSxcbiAgICB0b1N0cmluZyA9IHJlcXVpcmUoJy4vdG9TdHJpbmcnKSxcbiAgICB1bmljb2RlV29yZHMgPSByZXF1aXJlKCcuL191bmljb2RlV29yZHMnKTtcblxuLyoqXG4gKiBTcGxpdHMgYHN0cmluZ2AgaW50byBhbiBhcnJheSBvZiBpdHMgd29yZHMuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IFN0cmluZ1xuICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gW3BhdHRlcm5dIFRoZSBwYXR0ZXJuIHRvIG1hdGNoIHdvcmRzLlxuICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgd29yZHMgb2YgYHN0cmluZ2AuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8ud29yZHMoJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJyk7XG4gKiAvLyA9PiBbJ2ZyZWQnLCAnYmFybmV5JywgJ3BlYmJsZXMnXVxuICpcbiAqIF8ud29yZHMoJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJywgL1teLCBdKy9nKTtcbiAqIC8vID0+IFsnZnJlZCcsICdiYXJuZXknLCAnJicsICdwZWJibGVzJ11cbiAqL1xuZnVuY3Rpb24gd29yZHMoc3RyaW5nLCBwYXR0ZXJuLCBndWFyZCkge1xuICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICBwYXR0ZXJuID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBwYXR0ZXJuO1xuXG4gIGlmIChwYXR0ZXJuID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gaGFzVW5pY29kZVdvcmQoc3RyaW5nKSA/IHVuaWNvZGVXb3JkcyhzdHJpbmcpIDogYXNjaWlXb3JkcyhzdHJpbmcpO1xuICB9XG4gIHJldHVybiBzdHJpbmcubWF0Y2gocGF0dGVybikgfHwgW107XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd29yZHM7XG4iLCIoZnVuY3Rpb24ocm9vdCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGNzcz1cIi5uYW5vYmFye3dpZHRoOjEwMCU7aGVpZ2h0OjRweDt6LWluZGV4Ojk5OTk7dG9wOjB9LmJhcnt3aWR0aDowO2hlaWdodDoxMDAlO3RyYW5zaXRpb246aGVpZ2h0IC4zcztiYWNrZ3JvdW5kOiMwMDB9XCI7ZnVuY3Rpb24gYWRkQ3NzKCl7dmFyIHM9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJuYW5vYmFyY3NzXCIpO2lmKHM9PT1udWxsKXtzPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtzLnR5cGU9XCJ0ZXh0L2Nzc1wiO3MuaWQ9XCJuYW5vYmFyY3NzXCI7ZG9jdW1lbnQuaGVhZC5pbnNlcnRCZWZvcmUocyxkb2N1bWVudC5oZWFkLmZpcnN0Q2hpbGQpO2lmKCFzLnN0eWxlU2hlZXQpcmV0dXJuIHMuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7cy5zdHlsZVNoZWV0LmNzc1RleHQ9Y3NzfX1mdW5jdGlvbiBhZGRDbGFzcyhlbCxjbHMpe2lmKGVsLmNsYXNzTGlzdCllbC5jbGFzc0xpc3QuYWRkKGNscyk7ZWxzZSBlbC5jbGFzc05hbWUrPVwiIFwiK2Nsc31mdW5jdGlvbiBjcmVhdGVCYXIocm0pe3ZhciBlbD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLHdpZHRoPTAsaGVyZT0wLG9uPTAsYmFyPXtlbDplbCxnbzpnb307YWRkQ2xhc3MoZWwsXCJiYXJcIik7ZnVuY3Rpb24gbW92ZSgpe3ZhciBkaXN0PXdpZHRoLWhlcmU7aWYoZGlzdDwuMSYmZGlzdD4tLjEpe3BsYWNlKGhlcmUpO29uPTA7aWYod2lkdGg9PT0xMDApe2VsLnN0eWxlLmhlaWdodD0wO3NldFRpbWVvdXQoZnVuY3Rpb24oKXtybShlbCl9LDMwMCl9fWVsc2V7cGxhY2Uod2lkdGgtZGlzdC80KTtzZXRUaW1lb3V0KGdvLDE2KX19ZnVuY3Rpb24gcGxhY2UobnVtKXt3aWR0aD1udW07ZWwuc3R5bGUud2lkdGg9d2lkdGgrXCIlXCJ9ZnVuY3Rpb24gZ28obnVtKXtpZihudW0+PTApe2hlcmU9bnVtO2lmKCFvbil7b249MTttb3ZlKCl9fWVsc2UgaWYob24pe21vdmUoKX19cmV0dXJuIGJhcn1mdW5jdGlvbiBOYW5vYmFyKG9wdHMpe29wdHM9b3B0c3x8e307dmFyIGVsPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYXBwbHlHbyxuYW5vYmFyPXtlbDplbCxnbzpmdW5jdGlvbihwKXthcHBseUdvKHApO2lmKHA9PT0xMDApe2luaXQoKX19fTtmdW5jdGlvbiBybShjaGlsZCl7ZWwucmVtb3ZlQ2hpbGQoY2hpbGQpfWZ1bmN0aW9uIGluaXQoKXt2YXIgYmFyPWNyZWF0ZUJhcihybSk7ZWwuYXBwZW5kQ2hpbGQoYmFyLmVsKTthcHBseUdvPWJhci5nb31hZGRDc3MoKTthZGRDbGFzcyhlbCxcIm5hbm9iYXJcIik7aWYob3B0cy5pZCllbC5pZD1vcHRzLmlkO2lmKG9wdHMuY2xhc3NuYW1lKWFkZENsYXNzKGVsLG9wdHMuY2xhc3NuYW1lKTtpZihvcHRzLnRhcmdldCl7ZWwuc3R5bGUucG9zaXRpb249XCJyZWxhdGl2ZVwiO29wdHMudGFyZ2V0Lmluc2VydEJlZm9yZShlbCxvcHRzLnRhcmdldC5maXJzdENoaWxkKX1lbHNle2VsLnN0eWxlLnBvc2l0aW9uPVwiZml4ZWRcIjtkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImJvZHlcIilbMF0uYXBwZW5kQ2hpbGQoZWwpfWluaXQoKTtyZXR1cm4gbmFub2Jhcn1pZih0eXBlb2YgZXhwb3J0cz09PVwib2JqZWN0XCIpe21vZHVsZS5leHBvcnRzPU5hbm9iYXJ9ZWxzZSBpZih0eXBlb2YgZGVmaW5lPT09XCJmdW5jdGlvblwiJiZkZWZpbmUuYW1kKXtkZWZpbmUoW10sZnVuY3Rpb24oKXtyZXR1cm4gTmFub2Jhcn0pfWVsc2V7cm9vdC5OYW5vYmFyPU5hbm9iYXJ9fSkodGhpcyk7IiwiXG4vKipcbiAqXG4gKlxuICogbm9kIHYuMi4wLjEyXG4gKiBHb3JtIENhc3BlclxuICpcbiAqXG4gKlxuICogVGhpcyBpcyBhIHNob3J0IGJyZWFrZG93biBvZiB0aGUgY29kZSB0byBoZWxwIHlvdSBmaW5kIHlvdXIgd2F5IGFyb3VuZC5cbiAqXG4gKlxuICogQW4gYGVsZW1lbnRgIGFsd2F5cyByZWZlciB0byBzb21lIGlucHV0IGVsZW1lbnQgZGVmaW5lZCBieSB0aGUgdXNlciB2aWEgdGhlXG4gKiBgc2VsZWN0b3JgIGtleS5cbiAqXG4gKiBBIGBtZXRyaWNgIGlzIHRoZSB1c2VyIGNyZWF0ZWQgb2JqZWN0cyB0aGF0IGlzIHVzZWQgdG8gYWRkIGNoZWNrcyB0b1xuICogbm9kLlxuICpcbiAqIEVhY2ggYGVsZW1lbnRgIHdpbGwgaGF2ZSBhdCBtb3N0IG9uZSBvZiBhIGBsaXN0ZW5lcmAsIGEgYGNoZWNrZXJgLCBhXG4gKiBgY2hlY2tIYW5kbGVyYCwgYW5kIGEgYGRvbU5vZGVgIFwiYXR0YWNoZWRcIiB0byBpdC4gVGhlIGBsaXN0ZW5lcmAgbGlzdGVuc1xuICogZm9yIGlucHV0cyBvciBjaGFuZ2VzIHRvIHRoZSBgZWxlbWVudGAgYW5kIHBhc3NlcyB0aGUgbmV3IHZhbHVlIG9uIHRvIHRvIHRoZVxuICogYGNoZWNrZXJgIHdoaWNoIHBlcmZvcm1zIGl0cyBjaGVja3MgYW5kIHBhc3NlcyB0aGUgdGhlIHJlc3VsdHMgb24gdG8gdGhlXG4gKiBgY2hlY2tIYW5kbGVyYCB3aGljaCBjYWxjdWxhdGVzIHRoZSBuZXcgc3RhdGUgb2YgdGhlIGBlbGVtZW50YCB3aGljaCBpdFxuICogcGFzc2VzIG9uIHRvIHRoZSBgZG9tTm9kZWAgd2hpY2ggd2lsbCB1cGRhdGUgdGhlIGRvbS5cbiAqXG4gKiBUaGUgZm91ciBtYWluIHBhcnRzLCB0aGUgbGlzdGVuZXIsIHRoZSBjaGVja2VyLCB0aGUgY2hlY2tIYW5kbGVyLCBhbmQgdGhlXG4gKiBkb21Ob2RlIGFsbCBjb21tdW5pY2F0ZSB0aHJvdWdoIHRoZSBgbWVkaWF0b3JgIGJ5IGZpcmluZyBldmVudHMgaWRlbnRpZmllZFxuICogYnkgYSB1bmlxdWUgaWQuIFRoZXkgZG8gbm90IGtub3cgb2YgZWFjaCBvdGhlcidzIGV4aXN0YW5jZSwgYW5kIHNvIG5vXG4gKiBjb21tdW5pY2F0aW9uIGZsb3dzIGRpcmVjdGx5IGJldHdlZW4gdGhlbS5cbiAqXG4gKiBBbGwgbGlzdGVuZXJzLCBjaGVja2VycywgaGFuZGxlcnMsIGFuZCBkb21Ob2RlcyBhcmUgZ3JvdXBlZCB0b2dldGhlciBpblxuICogYGNvbGxlY3Rpb25zYCwgd2hpY2ggYXJlIGJhc2ljYWxseSBhIGdsb3JpZmllZCBhcnJheSB0aGF0IG1ha2VzIGl0IGVhc3lcbiAqIG5vdCB0byBnZXQgZHVwbGljYXRlIGl0ZW1zIGZvciBlYWNoIGVsZW1lbnQgKGZvciBpbnN0YW5jZSB0d28gbGlzdGVuZXJzXG4gKiBsaXN0ZW5pbmcgdG8gdGhlIHNhbWUgZWxlbWVudCkuXG4gKlxuICogVGhlIGNvbW11bmljYXRpb24gZmxvdyBsb29rcyBsaWtlIHRoaXM6XG4gKiBsaXN0ZW5lciAtPiBjaGVja2VyIC0+IGNoZWNrSGFuZGxlciAtPiBkb21Ob2RlXG4gKlxuICogQmV0d2VlbiBlYWNoIHBhcnQsIHlvdSBoYXZlIHRoZSBtZWRpYXRvci5cbiAqXG4gKlxuICogYE1ldHJpY3NgIGFyZSBhZGRlZCBieSB0aGUgdXNlciwgd2hpY2ggc2V0cyB1cCB0aGUgc3lzdGVtIGFib3ZlLiBOb3RpY2VcbiAqIHRoYXQgYSBtZXRyaWMgY2FuIHRhcmdldCBtdWx0aXBsZSBlbGVtZW50cyBhdCBvbmNlLCBhbmQgdGhhdCB0aGVyZSBjYW5cbiAqIGJlIG92ZXJsYXBzLiBPbmUgbWV0cmljIGRlZmluaXRlbHkgZG9lcyBub3QgZXF1YWwgb25lIGVsZW1lbnQgb3Igb25lXG4gKiBjaGVjay5cbiAqXG4gKi9cblxuZnVuY3Rpb24gbm9kIChjb25maWcpIHtcbiAgICB2YXIgZm9ybSxcbiAgICAgICAgY29uZmlndXJhdGlvbiAgID0ge30sXG4gICAgICAgIG1lZGlhdG9yICAgICAgICA9IG5vZC5tYWtlTWVkaWF0b3IoKSxcbiAgICAgICAgZXZlbnRFbWl0dGVyICAgID0gbm9kLm1ha2VFdmVudEVtaXR0ZXIobWVkaWF0b3IpLFxuXG4gICAgICAgIC8vIENyZWF0aW5nIChlbXB0eSkgY29sbGVjdGlvbnNcbiAgICAgICAgbGlzdGVuZXJzICAgICAgID0gbm9kLm1ha2VDb2xsZWN0aW9uKG5vZC5tYWtlTGlzdGVuZXIpLFxuICAgICAgICBjaGVja2VycyAgICAgICAgPSBub2QubWFrZUNvbGxlY3Rpb24obm9kLm1ha2VDaGVja2VyKSxcbiAgICAgICAgY2hlY2tIYW5kbGVycyAgID0gbm9kLm1ha2VDb2xsZWN0aW9uKG5vZC5tYWtlQ2hlY2tIYW5kbGVyKSxcbiAgICAgICAgZG9tTm9kZXMgICAgICAgID0gbm9kLm1ha2VDb2xsZWN0aW9uKG5vZC5tYWtlRG9tTm9kZSk7XG5cbiAgICAvKipcbiAgICAgKiBFbnRyeSBwb2ludCBmb3IgdGhlIHVzZXIuIFRoZSB1c2VyIHBhc3NlcyBpbiBhbiBhcnJheSBvZiBtZXRyaWNzIChhblxuICAgICAqIG9iamVjdCBjb250YWluaW5nIGEgc2VsZWN0b3IsIGEgdmFsaWRhdGUgc3RyaW5nL2Z1bmN0aW9uLCBldGMuKSBhbmQgaXRcbiAgICAgKiBnZXRzIHByb2Nlc3NlZCBmcm9tIGhlcmUuXG4gICAgICpcbiAgICAgKiBUaGlzIGZ1bmN0aW9uLCBpcyBtb3N0bHkgYWJvdXQgY2xlYW5pbmcgdXAgd2hhdCB0aGUgdXNlciBwYXNzZWQgdXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYWRkTWV0cmljcyAobWV0cmljcykge1xuICAgICAgICAvLyBNYWtlIHN1cmUgd2UgYXJlIGRlYWxpbmcgd2l0aCBhbiBhcnJheSBvZiBtZXRyaWNzLlxuICAgICAgICB2YXIgYXJyYXlNZXRyaWNzID0gQXJyYXkuaXNBcnJheShtZXRyaWNzKSA/IG1ldHJpY3MgOiBbbWV0cmljc107XG5cbiAgICAgICAgYXJyYXlNZXRyaWNzLmZvckVhY2goZnVuY3Rpb24gKG1ldHJpYykge1xuICAgICAgICAgICAgdmFyIHZhbGlkYXRlQXJyYXksIGVycm9yTWVzc2FnZUFycmF5LFxuICAgICAgICAgICAgICAgIG5vdEFycmF5ID0gIUFycmF5LmlzQXJyYXkobWV0cmljLnZhbGlkYXRlKTtcblxuICAgICAgICAgICAgLy8gSWYgdGhlICd2YWxpZGF0ZScgaXMgbm90IGFuIGFycmF5LCB0aGVuIHdlJ3JlIGdvb2QgdG8gZ28uXG4gICAgICAgICAgICBpZiAobm90QXJyYXkpIHtcbiAgICAgICAgICAgICAgICBhZGRNZXRyaWMobWV0cmljKTtcblxuICAgICAgICAgICAgLy8gSWYgaXQgaXMgYW4gYXJyYXkgKGUuZy4sIHZhbGlkYXRlOiBbJ2VtYWlsJywgJ21heC1sZW5ndGg6MTAnXSksXG4gICAgICAgICAgICAvLyB0aGVuIHdlIG5lZWQgdG8gc3BsaXQgdGhlbSB1cCBpbnRvIG11bHRpcGxlIG1ldHJpY3MsIGFuZCBhZGRcbiAgICAgICAgICAgIC8vIHRoZW0gaW5kaXZpZHVhbGx5LlxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkobWV0cmljLmVycm9yTWVzc2FnZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVycm9yTXNnID0gJ0lmIHlvdSBwYXNzIGluIGB2YWxpZGF0ZTouLi5gIGFzIGFuICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJyBhcnJheSwgdGhlbiBgZXJyb3JNZXNzYWdlOi4uLmAgYWxzbyBuZWVkcyB0byBiZSBhbiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICcgYXJyYXkuIFwiJyArIG1ldHJpYy52YWxpZGF0ZSArICdcIiwgYW5kIFwiJyArXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRyaWMuZXJyb3JNZXNzYWdlICsgJ1wiJztcblxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihlcnJvck1zZyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gV2Ugc3RvcmUgZWFjaCBhcyBhcnJheXMsIGFuZCB0aGVuIHJ1biB0aHJvdWdoIHRoZW0sXG4gICAgICAgICAgICAgICAgLy8gb3ZlcndyaXRpbmcgZWFjaCBvZiB0aGUga2V5cyBhY2NvcmRpbmdseS5cbiAgICAgICAgICAgICAgICB2YWxpZGF0ZUFycmF5ICAgICA9IG1ldHJpYy52YWxpZGF0ZTtcbiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2VBcnJheSA9IG1ldHJpYy5lcnJvck1lc3NhZ2U7XG5cbiAgICAgICAgICAgICAgICB2YWxpZGF0ZUFycmF5LmZvckVhY2goZnVuY3Rpb24gKHZhbGlkYXRlLCBpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE92ZXJ3cml0ZSB0aGUgYXJyYXkgd2l0aCB0aGUgaW5kaXZpZHVhbCAndmFsaWRhdGUnIGFuZFxuICAgICAgICAgICAgICAgICAgICAvLyAnZXJyb3JNZXNzYWdlJy5cbiAgICAgICAgICAgICAgICAgICAgbWV0cmljLnZhbGlkYXRlICAgICA9IHZhbGlkYXRlO1xuICAgICAgICAgICAgICAgICAgICBtZXRyaWMuZXJyb3JNZXNzYWdlID0gZXJyb3JNZXNzYWdlQXJyYXlbaV07XG5cbiAgICAgICAgICAgICAgICAgICAgYWRkTWV0cmljKG1ldHJpYyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZE1ldHJpYyAobWV0cmljKSB7XG4gICAgICAgIHZhciBzcGVjaWFsVHJpZ2dlcnMgPSBbXSxcblxuICAgICAgICAgICAgLy8gVGhlIGZ1bmN0aW9uIHRoYXQgd2lsbCBjaGVjayB0aGUgdmFsdWUgb2YgdGhlIGVsZW1lbnQuXG4gICAgICAgICAgICBjaGVja0Z1bmN0aW9uID0gbm9kLmdldENoZWNrRnVuY3Rpb24obWV0cmljKSxcblxuICAgICAgICAgICAgLy8gQSBsaXN0IG9mIGVsZW1lbnRzIHRoYXQgdGhpcyBtZXRyaWMgd2lsbCB0YXJnZXQuXG4gICAgICAgICAgICBlbGVtZW50cyA9IG5vZC5nZXRFbGVtZW50cyhtZXRyaWMuc2VsZWN0b3IpLFxuXG4gICAgICAgICAgICAvLyBBIFwic2V0XCIgaGVyZSwgcmVmZXJzIHRvIGFuIG9iaiB3aXRoIG9uZSBsaXN0ZW5lciwgb25lIGNoZWNrZXIsXG4gICAgICAgICAgICAvLyBhbmQgb25lIGNoZWNrSGFuZGxlci4gT25seSBldmVyeSBvbmUgZm9yIGVhY2ggZWxlbWVudCBpbiB0aGVcbiAgICAgICAgICAgIC8vIGRvbS5cbiAgICAgICAgICAgIG1ldHJpY1NldHMgPSBlbGVtZW50cy5tYXAoZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lcjogICAgICAgbGlzdGVuZXJzLmZpbmRPck1ha2UoZWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lZGlhdG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0cmljLnRyaWdnZXJFdmVudHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uKSxcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tlcjogICAgICAgIGNoZWNrZXJzLmZpbmRPck1ha2UoZWxlbWVudCwgbWVkaWF0b3IpLFxuICAgICAgICAgICAgICAgICAgICBjaGVja0hhbmRsZXI6ICAgY2hlY2tIYW5kbGVycy5maW5kT3JNYWtlKGVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVkaWF0b3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbiksXG4gICAgICAgICAgICAgICAgICAgIGRvbU5vZGU6ICAgICAgICBkb21Ob2Rlcy5maW5kT3JNYWtlKGVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lZGlhdG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uKVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAvLyBTYXZlZCBmb3IgbGF0ZXIgcmVmZXJlbmNlIGluIGNhc2UgdGhlIHVzZXIgaGFzIGEgYHRhcGAgZnVuY3Rpb25cbiAgICAgICAgLy8gZGVmaW5lZC5cbiAgICAgICAgY2hlY2tGdW5jdGlvbi52YWxpZGF0ZSA9ICh0eXBlb2YgbWV0cmljLnZhbGlkYXRlID09PSAnZnVuY3Rpb24nKVxuICAgICAgICAgICAgPyBtZXRyaWMudmFsaWRhdGUudG9TdHJpbmcoKVxuICAgICAgICAgICAgOiBtZXRyaWMudmFsaWRhdGU7XG5cbiAgICAgICAgLy8gU3BlY2lhbCBjYXNlcy4gVGhlc2UgYHZhbGlkYXRlc2AgYWZmZWN0IGVhY2ggb3RoZXIsIGFuZCB0aGVpciBzdGF0ZVxuICAgICAgICAvLyBuZWVkcyB0byB1cGRhdGUgZWFjaCB0aW1lIGVpdGhlciBvZiB0aGUgZWxlbWVudHMnIHZhbHVlcyBjaGFuZ2UuXG4gICAgICAgIGlmIChtZXRyaWMudmFsaWRhdGUgPT09ICdvbmUtb2YnXG4gICAgICAgICAgICB8fCBtZXRyaWMudmFsaWRhdGUgPT09ICdvbmx5LW9uZS1vZidcbiAgICAgICAgICAgIHx8IG1ldHJpYy52YWxpZGF0ZSA9PT0gJ3NvbWUtcmFkaW8nKSB7XG4gICAgICAgICAgICBzcGVjaWFsVHJpZ2dlcnMucHVzaChtZXRyaWMuc2VsZWN0b3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBtZXRyaWMudmFsaWRhdGUgPT09ICdzdHJpbmcnXG4gICAgICAgICAgICAmJiBtZXRyaWMudmFsaWRhdGUuaW5kZXhPZignc2FtZS1hcycpID4gLTEpIHtcbiAgICAgICAgICAgIHNwZWNpYWxUcmlnZ2Vycy5wdXNoKG1ldHJpYy52YWxpZGF0ZS5zcGxpdCgnOicpWzFdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEhlbHBlciBmdW5jdGlvbiwgdXNlZCBpbiB0aGUgbG9vcCBiZWxvdy5cbiAgICAgICAgZnVuY3Rpb24gc3Vic2NyaWJlVG9UcmlnZ2VycyAoY2hlY2tlciwgc2VsZWN0b3IpIHtcbiAgICAgICAgICAgIHZhciB0cmlnZ2VyRWxlbWVudHMgPSBub2QuZ2V0RWxlbWVudHMoc2VsZWN0b3IpO1xuXG4gICAgICAgICAgICB0cmlnZ2VyRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVycy5maW5kT3JNYWtlKGVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVkaWF0b3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uKTtcblxuICAgICAgICAgICAgICAgIGNoZWNrZXIuc3Vic2NyaWJlVG8obGlzdGVuZXIuaWQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBIZXJlIHdlIHNldCB1cCB0aGUgXCJjb25uZWN0aW9uc1wiIGJldHdlZW4gZWFjaCBvZiBvdXIgbWFpbiBwYXJ0cy5cbiAgICAgICAgLy8gVGhleSBjb21tdW5pY2F0ZSBvbmx5IHRocm91Z2ggdGhlIG1lZGlhdG9yLlxuICAgICAgICBtZXRyaWNTZXRzLmZvckVhY2goZnVuY3Rpb24gKG1ldHJpY1NldCkge1xuICAgICAgICAgICAgLy8gOjogTGlzdGVuZXIgLT4gQ2hlY2tlclxuXG4gICAgICAgICAgICAvLyBXZSB3YW50IG91ciBjaGVja2VyIHRvIGxpc3RlbiB0byB0aGUgbGlzdGVuZXIuIEEgbGlzdGVuZXIgaGFzIGFuXG4gICAgICAgICAgICAvLyBpZCwgd2hpY2ggaXQgdXNlcyB3aGVuIGl0IGZpcmVzIGV2ZW50cyB0byB0aGUgbWVkaWF0b3IgKHdoaWNoXG4gICAgICAgICAgICAvLyB3YXMgc2V0IHVwIHdoZW4gdGhlIGxpc3RlbmVyIHdhcyBjcmVhdGVkKS5cbiAgICAgICAgICAgIG1ldHJpY1NldC5jaGVja2VyLnN1YnNjcmliZVRvKG1ldHJpY1NldC5saXN0ZW5lci5pZCk7XG5cbiAgICAgICAgICAgIC8vIElmIHRoZSB1c2VyIHNldCBhIGB0cmlnZ2VyZWRCeWAsIHRoZSBjaGVja2VyIG5lZWQgdG8gbGlzdGVuIHRvXG4gICAgICAgICAgICAvLyBjaGFuZ2VzIG9uIHRoaXMgZWxlbWVudCBhcyB3ZWxsLlxuICAgICAgICAgICAgLy8gU2FtZSBnb2VzIGZvciBzcGVjaWFsIHRyaWdnZXJzIHRoYXQgd2Ugc2V0LlxuICAgICAgICAgICAgc3Vic2NyaWJlVG9UcmlnZ2VycyhtZXRyaWNTZXQuY2hlY2tlciwgbWV0cmljLnRyaWdnZXJlZEJ5KTtcbiAgICAgICAgICAgIHN1YnNjcmliZVRvVHJpZ2dlcnMobWV0cmljU2V0LmNoZWNrZXIsIHNwZWNpYWxUcmlnZ2Vycyk7XG5cbiAgICAgICAgICAgIC8vIDo6IENoZWNrZXIgLT4gY2hlY2tIYW5kbGVyXG5cbiAgICAgICAgICAgIHZhciBjaGVja0lkID0gbm9kLnVuaXF1ZSgpO1xuXG4gICAgICAgICAgICAvLyBXZSBhZGQgdGhlIGNoZWNrIGZ1bmN0aW9uIGFzIG9uZSB0byBiZSBjaGVja2VkIHdoZW4gdGhlIHVzZXJcbiAgICAgICAgICAgIC8vIGlucHV0cyBzb21ldGhpbmcuIChUaGVyZSBtaWdodCBiZSBtb3JlIHRoYW4gdGhpcyBvbmUpLlxuICAgICAgICAgICAgbWV0cmljU2V0LmNoZWNrZXIuYWRkQ2hlY2soY2hlY2tGdW5jdGlvbiwgY2hlY2tJZCk7XG5cbiAgICAgICAgICAgIC8vIFdlIHdhbnQgdGhlIGNoZWNrIGhhbmRsZXIgdG8gbGlzdGVuIGZvciByZXN1bHRzIGZyb20gdGhlIGNoZWNrZXJcbiAgICAgICAgICAgIG1ldHJpY1NldC5jaGVja0hhbmRsZXIuc3Vic2NyaWJlVG8oY2hlY2tJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0cmljLmVycm9yTWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0cmljLmRlZmF1bHRTdGF0dXMpO1xuXG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbi5ub0RvbSkge1xuICAgICAgICAgICAgICAgIGV2ZW50RW1pdHRlci5zdWJzY3JpYmUobWV0cmljU2V0LmNoZWNrSGFuZGxlci5pZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIDo6IGNoZWNrSGFuZGxlciAtPiBkb21Ob2RlXG5cbiAgICAgICAgICAgICAgICAvLyBUaGUgY2hlY2tIYW5kbGVyIGhhcyBpdHMgb3duIGlkIChhbmQgb25seSBldmVyIG5lZWRzIG9uZSksIHNvXG4gICAgICAgICAgICAgICAgLy8gd2UganVzdCBhc2sgdGhlIGRvbU5vZGUgdG8gbGlzdGVuIGZvciB0aGF0LlxuICAgICAgICAgICAgICAgIG1ldHJpY1NldC5kb21Ob2RlLnN1YnNjcmliZVRvKG1ldHJpY1NldC5jaGVja0hhbmRsZXIuaWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBBZnRlciBhbGwgaXMgZG9uZSwgd2UgbWF5IGhhdmUgdG8gZW5hYmxlL2Rpc2FibGUgYSBzdWJtaXQgYnV0dG9uLlxuICAgICAgICB0b2dnbGVTdWJtaXQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJZiBhIGZvcm0gaXMgYWRkZWQsIHdlIGxpc3RlbiBmb3Igc3VibWl0cywgYW5kIGlmIHRoZSBoYXMgYWxzbyBzZXRcbiAgICAgKiBgcHJldmVudFN1Ym1pdGAgaW4gdGhlIGNvbmZpZ3VyYXRpb24sIHRoZW4gd2Ugc3RvcCB0aGUgY29tbWl0IGZyb21cbiAgICAgKiBoYXBwZW5pbmcgdW5sZXNzIGFsbCB0aGUgZWxlbWVudHMgYXJlIHZhbGlkLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFkZEZvcm0gKHNlbGVjdG9yKSB7XG4gICAgICAgIHZhciBmb3JtID0gbm9kLmdldEVsZW1lbnQoc2VsZWN0b3IpO1xuXG4gICAgICAgIGZvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgcG9zc2libGVQcmV2ZW50U3VibWl0LCBmYWxzZSk7XG4gICAgfVxuXG4gICAgLy8gUHJldmVudCBmdW5jdGlvbiwgdXNlZCBhYm92ZVxuICAgIGZ1bmN0aW9uIHBvc3NpYmxlUHJldmVudFN1Ym1pdCAoZXZlbnQpIHtcbiAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24ucHJldmVudFN1Ym1pdCAmJiAhYXJlQWxsKG5vZC5jb25zdGFudHMuVkFMSUQpKSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICAvLyBTaG93IGVycm9ycyB0byB0aGUgdXNlclxuICAgICAgICAgICAgY2hlY2tlcnMuZm9yRWFjaChmdW5jdGlvbiAoY2hlY2tlcikge1xuICAgICAgICAgICAgICAgIGNoZWNrZXIucGVyZm9ybUNoZWNrKHtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQ6IGV2ZW50XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gRm9jdXMgb24gdGhlIGZpcnN0IGludmFsaWQgZWxlbWVudFxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNoZWNrSGFuZGxlcnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgY2hlY2tIYW5kbGVyID0gY2hlY2tIYW5kbGVyc1tpXTtcblxuICAgICAgICAgICAgICAgIGlmIChjaGVja0hhbmRsZXIuZ2V0U3RhdHVzKCkuc3RhdHVzID09PSBub2QuY29uc3RhbnRzLklOVkFMSUQpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tIYW5kbGVyLmVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBlbGVtZW50cyBjb21wbGV0ZWx5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlbW92ZUVsZW1lbnQgKHNlbGVjdG9yKSB7XG4gICAgICAgIHZhciBlbGVtZW50cyA9IG5vZC5nZXRFbGVtZW50cyhzZWxlY3Rvcik7XG5cbiAgICAgICAgZWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICAgICAgbGlzdGVuZXJzLnJlbW92ZUl0ZW0oZWxlbWVudCk7XG4gICAgICAgICAgICBjaGVja2Vycy5yZW1vdmVJdGVtKGVsZW1lbnQpO1xuICAgICAgICAgICAgY2hlY2tIYW5kbGVycy5yZW1vdmVJdGVtKGVsZW1lbnQpO1xuICAgICAgICAgICAgZG9tTm9kZXMucmVtb3ZlSXRlbShlbGVtZW50KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogY29uZmlndXJlXG4gICAgICpcbiAgICAgKiBDaGFuZ2VzIHRoZSBjb25maWd1cmF0aW9uIG9iamVjdCB1c2VkIHRocm91Z2hvdXQgdGhlIGNvZGUgZm9yIGNsYXNzZXMsXG4gICAgICogZGVsYXlzLCBtZXNzYWdlcywgZXRjLlxuICAgICAqXG4gICAgICogSXQgY2FuIGVpdGhlciBiZSBjYWxsZWQgd2l0aCBhIGtleS92YWx1ZSBwYWlyICh0d28gYXJndW1lbnRzKSwgb3Igd2l0aFxuICAgICAqIGFuIG9iamVjdCB3aXRoIGtleS92YWx1ZSBwYWlycy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb25maWd1cmUgKGtleSwgdmFsdWUpIHtcbiAgICAgICAgdmFyIGF0dHJpYnV0ZXMgPSB7fTtcblxuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZXNba2V5XSA9IHZhbHVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXR0cmlidXRlcyA9IGtleTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGsgaW4gYXR0cmlidXRlcykge1xuICAgICAgICAgICAgY29uZmlndXJhdGlvbltrXSA9IGF0dHJpYnV0ZXNba107XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYXR0cmlidXRlcy5zdWJtaXQgfHwgYXR0cmlidXRlcy5kaXNhYmxlU3VibWl0KSB7XG4gICAgICAgICAgICB0b2dnbGVTdWJtaXQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhdHRyaWJ1dGVzLmZvcm0pIHtcbiAgICAgICAgICAgIGFkZEZvcm0oYXR0cmlidXRlcy5mb3JtKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHRvZ2dsZVN1Ym1pdFxuICAgICAqXG4gICAgICogVG9nZ2xlcyB0aGUgc3VibWl0IGJ1dHRvbiAoZW5hYmxlZCBpZiBldmVyeSBlbGVtZW50IGlzIHZhbGlkLCBvdGhlcndpc2VcbiAgICAgKiBkaXNhYmxlZCkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9nZ2xlU3VibWl0ICgpIHtcbiAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24uc3VibWl0ICYmIGNvbmZpZ3VyYXRpb24uZGlzYWJsZVN1Ym1pdCkge1xuICAgICAgICAgICAgbm9kLmdldEVsZW1lbnRzKGNvbmZpZ3VyYXRpb24uc3VibWl0KS5mb3JFYWNoKGZ1bmN0aW9uIChzdWJtaXRCdG4pIHtcbiAgICAgICAgICAgICAgICBzdWJtaXRCdG4uZGlzYWJsZWQgPSAhYXJlQWxsKG5vZC5jb25zdGFudHMuVkFMSUQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMaXN0ZW4gdG8gYWxsIGNoZWNrcywgYW5kIGlmIHRoZSB1c2VyIGhhcyBzZXQgaW4gdGhlIGNvbmZpZ3VyYXRpb24gdG9cbiAgICAgKiBlbmFibGUvZGlzYWJsZWQgdGhlIHN1Ym1pdCBidXR0b24sIHdlIGRvIHRoYXQuXG4gICAgICovXG4gICAgbWVkaWF0b3Iuc3Vic2NyaWJlKCdhbGwnLCB0b2dnbGVTdWJtaXQpO1xuXG4gICAgZnVuY3Rpb24gYXJlQWxsIChzdGF0dXMpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNoZWNrSGFuZGxlcnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChjaGVja0hhbmRsZXJzW2ldLmdldFN0YXR1cygpLnN0YXR1cyAhPT0gc3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0TWVzc2FnZU9wdGlvbnMgKG9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IEFycmF5LmlzQXJyYXkob3B0aW9ucykgPyBvcHRpb25zIDogW29wdGlvbnNdO1xuXG4gICAgICAgIG9wdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAob3B0aW9uKSB7XG4gICAgICAgICAgICB2YXIgZWxlbWVudHMgPSBub2QuZ2V0RWxlbWVudHMob3B0aW9uLnNlbGVjdG9yKTtcblxuICAgICAgICAgICAgZWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHZhciBkb21Ob2RlID0gZG9tTm9kZXMuZmluZE9yTWFrZShlbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZWRpYXRvcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbik7XG5cbiAgICAgICAgICAgICAgICBkb21Ob2RlLnNldE1lc3NhZ2VPcHRpb25zKG9wdGlvbi5wYXJlbnQsIG9wdGlvbi5lcnJvclNwYW4pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExpc3RlbiB0byBhbGwgY2hlY2tzIGFuZCBhbGxvdyB0aGUgdXNlciB0byBsaXN0ZW4gaW4sIGlmIGhlIHNldCBhIGB0YXBgXG4gICAgICogZnVuY3Rpb24gaW4gdGhlIGNvbmZpZ3VyYXRpb24uXG4gICAgICovXG4gICAgbWVkaWF0b3Iuc3Vic2NyaWJlKCdhbGwnLCBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZ3VyYXRpb24udGFwID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICAmJiBvcHRpb25zLnR5cGUgPT09ICdjaGVjaycpIHtcbiAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24udGFwKG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBnZXRTdGF0dXMgKHNlbGVjdG9yLCBzaG93RXJyb3JNZXNzYWdlKSB7XG4gICAgICAgIHZhciBlbGVtZW50ID0gbm9kLmdldEVsZW1lbnQoc2VsZWN0b3IpLFxuICAgICAgICAgICAgc3RhdHVzICA9IGNoZWNrSGFuZGxlcnMuZmluZE9yTWFrZShlbGVtZW50KS5nZXRTdGF0dXMoKTtcblxuICAgICAgICByZXR1cm4gc2hvd0Vycm9yTWVzc2FnZSA/IHN0YXR1cyA6IHN0YXR1cy5zdGF0dXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGVyZm9ybUNoZWNrIChzZWxlY3Rvcikge1xuICAgICAgICB2YXIgY3MgPSBzZWxlY3RvclxuICAgICAgICAgICAgPyBub2QuZ2V0RWxlbWVudHMoc2VsZWN0b3IpLm1hcChjaGVja2Vycy5maW5kT3JNYWtlKVxuICAgICAgICAgICAgOiBjaGVja2VycztcblxuICAgICAgICBjcy5mb3JFYWNoKGZ1bmN0aW9uIChjaGVja2VyKSB7XG4gICAgICAgICAgICBjaGVja2VyLnBlcmZvcm1DaGVjaygpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRJbnZhbGlkIChzZWxlY3RvciwgZXJyb3JNZXNzYWdlKSB7XG4gICAgICAgIHZhciBlbGVtZW50ID0gbm9kLmdldEVsZW1lbnQoc2VsZWN0b3IpLFxuICAgICAgICAgICAgZG9tTm9kZSAgPSBkb21Ob2Rlcy5maW5kT3JNYWtlKGVsZW1lbnQpO1xuXG4gICAgICAgIGRvbU5vZGUuc2V0KHtcbiAgICAgICAgICAgIHJlc3VsdDogbm9kLmNvbnN0YW50cy5JTlZBTElELFxuICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBlcnJvck1lc3NhZ2UgfHwgJydcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0VmFsaWQgKHNlbGVjdG9yKSB7XG4gICAgICAgIHZhciBlbGVtZW50ID0gbm9kLmdldEVsZW1lbnQoc2VsZWN0b3IpLFxuICAgICAgICAgICAgZG9tTm9kZSAgPSBkb21Ob2Rlcy5maW5kT3JNYWtlKGVsZW1lbnQpO1xuXG4gICAgICAgIGRvbU5vZGUuc2V0KHtcbiAgICAgICAgICAgIHJlc3VsdDogbm9kLmNvbnN0YW50cy5WQUxJRCxcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZTogJydcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0QWxsTm9kZVZhbGlkICgpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGRvbU5vZGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBzZXRWYWxpZChkb21Ob2Rlc1tpXS5lbGVtZW50KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEludGVybmFsIGZ1bmN0aW9ucyB0aGF0IGFyZSBleHBvc2VkIHRvIHRoZSBwdWJsaWMuXG4gICAgICovXG4gICAgdmFyIG5vZEluc3RhY2UgPSB7XG4gICAgICAgIGFkZDogICAgICAgICAgICAgICAgICAgIGFkZE1ldHJpY3MsXG4gICAgICAgIHJlbW92ZTogICAgICAgICAgICAgICAgIHJlbW92ZUVsZW1lbnQsXG4gICAgICAgIGFyZUFsbDogICAgICAgICAgICAgICAgIGFyZUFsbCxcbiAgICAgICAgZ2V0U3RhdHVzOiAgICAgICAgICAgICAgZ2V0U3RhdHVzLFxuICAgICAgICBjb25maWd1cmU6ICAgICAgICAgICAgICBjb25maWd1cmUsXG4gICAgICAgIHNldE1lc3NhZ2VPcHRpb25zOiAgICAgIHNldE1lc3NhZ2VPcHRpb25zLFxuICAgICAgICBwZXJmb3JtQ2hlY2s6ICAgICAgICAgICBwZXJmb3JtQ2hlY2ssXG4gICAgICAgIHNldEludmFsaWQ6ICAgICAgICAgICAgIHNldEludmFsaWQsXG4gICAgICAgIHNldFZhbGlkOiAgICAgICAgICAgICAgIHNldFZhbGlkLFxuICAgICAgICBzZXRBbGxOb2RlVmFsaWQ6ICAgICAgICBzZXRBbGxOb2RlVmFsaWRcbiAgICB9O1xuXG4gICAgaWYgKGNvbmZpZykge1xuICAgICAgICBub2RJbnN0YWNlLmNvbmZpZ3VyZShjb25maWcpO1xuICAgIH1cblxuICAgIHJldHVybiBub2RJbnN0YWNlO1xufVxuXG5ub2QuY29uc3RhbnRzID0ge1xuICAgIFZBTElEOiAgICAgICAgICAndmFsaWQnLFxuICAgIElOVkFMSUQ6ICAgICAgICAnaW52YWxpZCcsXG4gICAgVU5DSEVDS0VEOiAgICAgICd1bmNoZWNrZWQnLFxuXG4gICAgREVMQVk6ICAgICAgICAgIDcwMFxufTtcblxubm9kLmNsYXNzZXMgPSB7XG4gICAgc3VjY2Vzc0NsYXNzOiAgICAgICAgICdub2Qtc3VjY2VzcycsXG4gICAgc3VjY2Vzc01lc3NhZ2VDbGFzczogICdub2Qtc3VjY2Vzcy1tZXNzYWdlJyxcbiAgICBlcnJvckNsYXNzOiAgICAgICAgICAgJ25vZC1lcnJvcicsXG4gICAgZXJyb3JNZXNzYWdlQ2xhc3M6ICAgICdub2QtZXJyb3ItbWVzc2FnZSdcbn07XG5cbi8vIEhlbHBlciBmdW5jdGlvbiB0byBjcmVhdGUgdW5pcXVlIGlkJ3Ncbm5vZC51bmlxdWUgPSAoZnVuY3Rpb24gKCkge1xuICAgIHZhciB1bmlxdWVDb3VudGVyID0gMDtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB1bmlxdWVDb3VudGVyKys7XG4gICAgfTtcbn0pKCk7XG5cbi8qKiBtYWtlTWVkaWF0b3JcbiAqXG4gKiBNaW5pbWFsIGltcGxlbWVudGF0aW9uIG9mIGEgbWVkaWF0b3IgcGF0dGVybiwgdXNlZCBmb3IgY29tbXVuaWNhdGlvbiBiZXR3ZWVuXG4gKiBjaGVja2VycyBhbmQgY2hlY2tIYW5kbGVycyAoY2hlY2tlcnMgZmlyZXMgZXZlbnRzIHdoaWNoIGhhbmRsZXJzIGNhblxuICogc3Vic2NyaWJlIHRvKS4gVW5pcXVlIElEJ3MgYXJlIHVzZWQgdG8gdGVsbCBldmVudHMgYXBhcnQuXG4gKlxuICogU3Vic2NyaWJpbmcgdG8gJ2FsbCcgd2lsbCBnaXZlIHlvdSBhbGwgcmVzdWx0cyBmcm9tIGFsbCBjaGVja3MuXG4gKi9cbm5vZC5tYWtlTWVkaWF0b3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN1YnNjcmliZXJzID0gW10sXG4gICAgICAgIGFsbCA9IFtdO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUgKGlkLCBmbikge1xuICAgICAgICAgICAgaWYgKGlkID09PSAnYWxsJykge1xuICAgICAgICAgICAgICAgIGFsbC5wdXNoKGZuKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKCFzdWJzY3JpYmVyc1tpZF0pIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlcnNbaWRdID0gW107XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHN1YnNjcmliZXJzW2lkXS5pbmRleE9mKGZuKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlcnNbaWRdLnB1c2goZm4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBmaXJlOiBmdW5jdGlvbiBmaXJlIChvcHRpb25zKSB7XG4gICAgICAgICAgICB2YXIgc3Vic2NyaWJlZEZ1bmN0aW9ucyA9IHN1YnNjcmliZXJzW29wdGlvbnMuaWRdLmNvbmNhdChhbGwpO1xuXG4gICAgICAgICAgICBzdWJzY3JpYmVkRnVuY3Rpb25zLmZvckVhY2goZnVuY3Rpb24gKHN1YnNjcmliZWRGdW5jdGlvbikge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZWRGdW5jdGlvbihvcHRpb25zKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbn07XG5cbm5vZC5maW5kQ29sbGVjdGlvbkluZGV4ID0gZnVuY3Rpb24gKGNvbGxlY3Rpb24sIGVsZW1lbnQpIHtcbiAgICBmb3IgKHZhciBpIGluIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgaWYgKGNvbGxlY3Rpb25baV0uZWxlbWVudCA9PT0gZWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gLTE7XG59O1xuXG4vKipcbiAqIG1ha2VDb2xsZWN0aW9uXG4gKlxuICogQSBtaW5pbWFsIGltcGxlbWVudGF0aW9uIG9mIGEgXCJjb2xsZWN0aW9uXCIsIGluc3BpcmVkIGJ5IGNvbGxlY3Rpb25zIGZyb21cbiAqIEJhY2tib25lSlMuIFVzZWQgYnkgbGlzdGVuZXJzLCBjaGVja2VycywgYW5kIGNoZWNrSGFuZGxlcnMuXG4gKi9cbm5vZC5tYWtlQ29sbGVjdGlvbiA9IGZ1bmN0aW9uIChtYWtlcikge1xuICAgIHZhciBjb2xsZWN0aW9uID0gW107XG5cbiAgICBjb2xsZWN0aW9uLmZpbmRPck1ha2UgPSBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICB2YXIgaW5kZXggPSBub2QuZmluZENvbGxlY3Rpb25JbmRleChjb2xsZWN0aW9uLCBlbGVtZW50KTtcblxuICAgICAgICAvLyBGb3VuZFxuICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gY29sbGVjdGlvbltpbmRleF07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBOb25lIGZvdW5kLCBsZXQncyBtYWtlIG9uZSB0aGVuLlxuICAgICAgICB2YXIgaXRlbSA9IG1ha2VyLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG5cbiAgICAgICAgY29sbGVjdGlvbi5wdXNoKGl0ZW0pO1xuXG4gICAgICAgIHJldHVybiBpdGVtO1xuICAgIH07XG5cbiAgICBjb2xsZWN0aW9uLnJlbW92ZUl0ZW0gPSBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICB2YXIgaW5kZXggPSBub2QuZmluZENvbGxlY3Rpb25JbmRleChjb2xsZWN0aW9uLCBlbGVtZW50KSxcbiAgICAgICAgICAgIGl0ZW0gPSBjb2xsZWN0aW9uW2luZGV4XTtcblxuICAgICAgICBpZiAoIWl0ZW0pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENhbGwgLmRpc3Bvc2UoKSBpZiBpdCBleGlzdHNcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtLmRpc3Bvc2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGl0ZW0uZGlzcG9zZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVtb3ZlIGl0ZW1cbiAgICAgICAgY29sbGVjdGlvbi5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH07XG5cbiAgICByZXR1cm4gY29sbGVjdGlvbjtcbn07XG5cbi8qKlxuICogbWFrZUxpc3RlbmVyXG4gKlxuICogVGFrZXMgY2FyZSBvZiBsaXN0ZW5pbmcgdG8gY2hhbmdlcyB0byBpdHMgZWxlbWVudCBhbmQgZmlyZSB0aGVtIG9mZiBhc1xuICogZXZlbnRzIG9uIHRoZSBtZWRpYXRvciBmb3IgY2hlY2tlcnMgdG8gbGlzdGVuIHRvLlxuICovXG5ub2QubWFrZUxpc3RlbmVyID0gZnVuY3Rpb24gKGVsZW1lbnQsIG1lZGlhdG9yLCB0cmlnZ2VyRXZlbnRzLCBjb25maWd1cmF0aW9uKSB7XG4gICAgdmFyIGlkID0gbm9kLnVuaXF1ZSgpLFxuICAgICAgICAkZWxlbWVudDtcblxuICAgIGZ1bmN0aW9uIGNoYW5nZWQgKGV2ZW50KSB7XG4gICAgICAgIG1lZGlhdG9yLmZpcmUoe1xuICAgICAgICAgICAgaWQ6ICAgICBpZCxcbiAgICAgICAgICAgIGV2ZW50OiAgZXZlbnQsXG4gICAgICAgICAgICB0eXBlOiAgICdjaGFuZ2UnXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBjaGFuZ2VkLCBmYWxzZSk7XG4gICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBjaGFuZ2VkLCBmYWxzZSk7XG4gICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgY2hhbmdlZCwgZmFsc2UpO1xuXG4gICAgaWYgKGNvbmZpZ3VyYXRpb24ualF1ZXJ5KSB7XG4gICAgICAgICRlbGVtZW50ID0gY29uZmlndXJhdGlvbi5qUXVlcnkoZWxlbWVudCk7XG5cbiAgICAgICAgJGVsZW1lbnQub24oJ3Byb3BlcnR5Y2hhbmdlIGNoYW5nZSBjbGljayBrZXl1cCBpbnB1dCBwYXN0ZScsIGNoYW5nZWQpO1xuICAgIH1cblxuICAgIGlmICh0cmlnZ2VyRXZlbnRzKSB7XG4gICAgICAgIHRyaWdnZXJFdmVudHMgPSBBcnJheS5pc0FycmF5KHRyaWdnZXJFdmVudHMpXG4gICAgICAgICAgICA/IHRyaWdnZXJFdmVudHNcbiAgICAgICAgICAgIDogW3RyaWdnZXJFdmVudHNdO1xuXG4gICAgICAgIHRyaWdnZXJFdmVudHMuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnROYW1lKSB7XG4gICAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBjaGFuZ2VkLCBmYWxzZSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRpc3Bvc2UgKCkge1xuICAgICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2lucHV0JywgY2hhbmdlZCwgZmFsc2UpO1xuICAgICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGNoYW5nZWQsIGZhbHNlKTtcbiAgICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdibHVyJywgY2hhbmdlZCwgZmFsc2UpO1xuXG4gICAgICAgIGlmICgkZWxlbWVudCkge1xuICAgICAgICAgICAgJGVsZW1lbnQub2ZmKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHJpZ2dlckV2ZW50cykge1xuICAgICAgICAgICAgdHJpZ2dlckV2ZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChldmVudE5hbWUpIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBjaGFuZ2VkLCBmYWxzZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIGVsZW1lbnQ6ICAgIGVsZW1lbnQsXG4gICAgICAgIGRpc3Bvc2U6ICAgIGRpc3Bvc2UsXG4gICAgICAgIGlkOiAgICAgICAgIGlkXG4gICAgfTtcbn07XG5cbi8qKlxuICogbWFrZUNoZWNrZXJcbiAqXG4gKiBBbiBcImNoZWNrZXJcIiBjb21tdW5pY2F0ZXMgcHJpbWFyaWx5IHdpdGggdGhlIG1lZGlhdG9yLiBJdCBsaXN0ZW5zIGZvciBpbnB1dFxuICogY2hhbmdlcyAoY29taW5nIGZyb20gbGlzdGVuZXJzKSwgcGVyZm9ybXMgaXRzIGNoZWNrcyBhbmQgZmlyZXMgb2ZmIHJlc3VsdHNcbiAqIGJhY2sgdG8gdGhlIG1lZGlhdG9yIGZvciBjaGVja0hhbmRsZXJzIHRvIGhhbmRsZS5cbiAqXG4gKiBUaGUgY2hlY2tlciBoYXMgYSAxIHRvIDEgcmVsYXRpb25zaGlwIHdpdGggYW4gZWxlbWVudCwgYW4gbGlzdGVuZXJzLCBhbmQgYW5cbiAqIGNoZWNrSGFuZGxlcjsgYWx0aG91Z2ggdGhleSBtYXkgY29tbXVuaWNhdGUgd2l0aCBvdGhlciBcInNldHNcIiBvZiBsaXN0ZW5lcnMsXG4gKiBjaGVja2VycyBhbmQgaGFuZGxlcnMuXG4gKlxuICogQ2hlY2tzIGFyZSBhZGRlZCwgZnJvbSB0aGUgb3V0c2lkZSwgYW5kIGNvbnNpc3RzIG9mIGEgY2hlY2tGdW5jdGlvbiAoc2VlXG4gKiBub2QuY2hlY2tGdW5jdGlvbnMpIGFuZCBhIHVuaXF1ZSBpZC5cbiAqL1xubm9kLm1ha2VDaGVja2VyID0gZnVuY3Rpb24gKGVsZW1lbnQsIG1lZGlhdG9yKSB7XG4gICAgdmFyIGNoZWNrcyA9IFtdO1xuXG4gICAgZnVuY3Rpb24gc3Vic2NyaWJlVG8gKGlkKSB7XG4gICAgICAgIG1lZGlhdG9yLnN1YnNjcmliZShpZCwgcGVyZm9ybUNoZWNrKTtcbiAgICB9XG5cbiAgICAvLyBSdW4gZXZlcnkgY2hlY2sgZnVuY3Rpb24gYWdhaW5zdCB0aGUgdmFsdWUgb2YgdGhlIGVsZW1lbnQuXG4gICAgZnVuY3Rpb24gcGVyZm9ybUNoZWNrIChvcHRpb25zKSB7XG4gICAgICAgIGNoZWNrcy5mb3JFYWNoKGZ1bmN0aW9uIChjaGVjaykge1xuICAgICAgICAgICAgY2hlY2sob3B0aW9ucyB8fCB7fSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEFkZCBhIGNoZWNrIGZ1bmN0aW9uIHRvIHRoZSBlbGVtZW50LiBUaGUgcmVzdWx0IHdpbGwgYmUgaGFuZGVkIG9mZiB0byB0aGVcbiAgICAvLyBtZWRpYXRvciAoZm9yIGNoZWNrSGFuZGxlcnMgdG8gZXZhbHVhdGUpLlxuICAgIGZ1bmN0aW9uIGFkZENoZWNrIChjaGVja0Z1bmN0aW9uLCBpZCkge1xuICAgICAgICBmdW5jdGlvbiBjYWxsYmFjayAocmVzdWx0KSB7XG4gICAgICAgICAgICBtZWRpYXRvci5maXJlKHtcbiAgICAgICAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgICAgICAgdHlwZTogJ2NoZWNrJyxcbiAgICAgICAgICAgICAgICByZXN1bHQ6IHJlc3VsdCxcbiAgICAgICAgICAgICAgICBlbGVtZW50OiBlbGVtZW50LFxuICAgICAgICAgICAgICAgIHZhbGlkYXRlOiBjaGVja0Z1bmN0aW9uLnZhbGlkYXRlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNoZWNrcy5wdXNoKGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgICAgICAvLyBJZiBlbGVtZW50LnZhbHVlIGlzIHVuZGVmaW5lZCwgdGhlbiB3ZSBtaWdodCBiZSBkZWFsaW5nIHdpdGhcbiAgICAgICAgICAgIC8vIGFub3RoZXIgdHlwZSBvZiBlbGVtZW50OyBsaWtlIDxkaXYgY29udGVudGVkaXRhYmxlPSd0cnVlJz5cbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IGVsZW1lbnQudmFsdWUgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgID8gZWxlbWVudC5pbm5lckhUTUxcbiAgICAgICAgICAgICAgICA6IGVsZW1lbnQudmFsdWU7XG5cbiAgICAgICAgICAgIG9wdGlvbnMuZWxlbWVudCA9IGVsZW1lbnQ7XG5cbiAgICAgICAgICAgIGNoZWNrRnVuY3Rpb24oY2FsbGJhY2ssIHZhbHVlLCBvcHRpb25zKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3Vic2NyaWJlVG86ICAgIHN1YnNjcmliZVRvLFxuICAgICAgICBhZGRDaGVjazogICAgICAgYWRkQ2hlY2ssXG4gICAgICAgIHBlcmZvcm1DaGVjazogICBwZXJmb3JtQ2hlY2ssXG4gICAgICAgIGVsZW1lbnQ6ICAgICAgICBlbGVtZW50XG4gICAgfTtcbn07XG5cbi8qKlxuICogbWFrZUNoZWNrSGFuZGxlclxuICpcbiAqIEhhbmRsZXMgY2hlY2tzIGNvbWluZyBpbiBmcm9tIHRoZSBtZWRpYXRvciBhbmQgdGFrZXMgY2FyZSBvZiBjYWxjdWxhdGluZyB0aGVcbiAqIHN0YXRlIGFuZCBlcnJvciBtZXNzYWdlcy5cbiAqXG4gKiBUaGUgY2hlY2tIYW5kbGVycyBsaXZlcyBpbiBvbmUgdG8gb25lIHdpdGggdGhlIGVsZW1lbnQgcGFyc2VkIGluLCBhbmQgbGlzdGVuc1xuICogZm9yICh1c3VhbGx5KSBtdWx0aXBsZSBlcnJvciBjaGVja3MuXG4gKi9cbm5vZC5tYWtlQ2hlY2tIYW5kbGVyID0gZnVuY3Rpb24gKGVsZW1lbnQsIG1lZGlhdG9yLCBjb25maWd1cmF0aW9uKSB7XG4gICAgdmFyIHJlc3VsdHMgICAgID0ge30sXG4gICAgICAgIGlkICAgICAgICAgID0gbm9kLnVuaXF1ZSgpO1xuXG4gICAgZnVuY3Rpb24gc3Vic2NyaWJlVG8gKGlkLCBlcnJvck1lc3NhZ2UsIGRlZmF1bHRTdGF0dXMpIHtcbiAgICAgICAgLy8gQ3JlYXRlIGEgcmVwcmVzZW50YXRpb24gb2YgdGhlIHR5cGUgb2YgZXJyb3IgaW4gdGhlIHJlc3VsdHMgb2JqZWN0LlxuICAgICAgICBpZiAoIXJlc3VsdHNbaWRdKSB7XG4gICAgICAgICAgICByZXN1bHRzW2lkXSA9IHtcbiAgICAgICAgICAgICAgICBzdGF0dXM6IGRlZmF1bHRTdGF0dXMgfHwgbm9kLmNvbnN0YW50cy5VTkNIRUNLRUQsXG4gICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBlcnJvck1lc3NhZ2VcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTdWJzY3JpYmUgdG8gZXJyb3IgaWQuXG4gICAgICAgIG1lZGlhdG9yLnN1YnNjcmliZShpZCwgY2hlY2tIYW5kbGVyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjaGVja0hhbmRsZXIgKHJlc3VsdCkge1xuICAgICAgICByZXN1bHRzW3Jlc3VsdC5pZF0uc3RhdHVzID0gcmVzdWx0LnJlc3VsdFxuICAgICAgICAgICAgPyBub2QuY29uc3RhbnRzLlZBTElEXG4gICAgICAgICAgICA6IG5vZC5jb25zdGFudHMuSU5WQUxJRDtcblxuICAgICAgICBub3RpZnlNZWRpYXRvcigpO1xuICAgIH1cblxuICAgIC8vIFJ1bnMgdGhyb3VnaCBhbGwgcmVzdWx0cyB0byBzZWUgd2hhdCBraW5kIG9mIGZlZWRiYWNrIHRvIHNob3cgdGhlIHVzZXIuXG4gICAgZnVuY3Rpb24gbm90aWZ5TWVkaWF0b3IgKCkge1xuICAgICAgICB2YXIgc3RhdHVzID0gZ2V0U3RhdHVzKCk7XG5cbiAgICAgICAgLy8gRXZlbnQgaWYgbWlnaHQgYmUgdmFsaWQgd2UgcGFzcyBhbG9uZyBhbiB1bmRlZmluZWQgZXJyb3JNZXNzYWdlLlxuICAgICAgICBtZWRpYXRvci5maXJlKHtcbiAgICAgICAgICAgIGlkOiAgICAgICAgICAgICBpZCxcbiAgICAgICAgICAgIHR5cGU6ICAgICAgICAgICAncmVzdWx0JyxcbiAgICAgICAgICAgIHJlc3VsdDogICAgICAgICBzdGF0dXMuc3RhdHVzLFxuICAgICAgICAgICAgZWxlbWVudDogICAgICAgIGVsZW1lbnQsXG4gICAgICAgICAgICBlcnJvck1lc3NhZ2U6ICAgc3RhdHVzLmVycm9yTWVzc2FnZVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTdGF0dXMgKCkge1xuICAgICAgICB2YXIgc3RhdHVzLCBlcnJvck1lc3NhZ2U7XG5cbiAgICAgICAgZm9yICh2YXIgaWQgaW4gcmVzdWx0cykge1xuICAgICAgICAgICAgc3RhdHVzID0gcmVzdWx0c1tpZF0uc3RhdHVzO1xuXG4gICAgICAgICAgICBpZiAocmVzdWx0c1tpZF0uc3RhdHVzID09PSBub2QuY29uc3RhbnRzLklOVkFMSUQpIHtcbiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSByZXN1bHRzW2lkXS5lcnJvck1lc3NhZ2U7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3RhdHVzOiAgICAgICAgc3RhdHVzLFxuICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiAgZXJyb3JNZXNzYWdlXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgaWQ6ICAgICAgICAgICAgIGlkLFxuICAgICAgICBzdWJzY3JpYmVUbzogICAgc3Vic2NyaWJlVG8sXG4gICAgICAgIGNoZWNrSGFuZGxlcjogICBjaGVja0hhbmRsZXIsXG4gICAgICAgIGdldFN0YXR1czogICAgICBnZXRTdGF0dXMsXG4gICAgICAgIGVsZW1lbnQ6ICAgICAgICBlbGVtZW50XG4gICAgfTtcbn07XG5cbi8vIEhlbHBlciBmdW5jdGlvbnMgZm9yIGBtYWtlRG9tTm9kZWAuXG5ub2QuaGFzQ2xhc3MgPSBmdW5jdGlvbiAoY2xhc3NOYW1lLCBlbCkge1xuICAgIGlmIChlbC5jbGFzc0xpc3QpIHtcbiAgICAgICAgcmV0dXJuIGVsLmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZWdleCA9IG5ldyBSZWdFeHAoJyhcXFxcc3xeKScgKyBjbGFzc05hbWUgKyAnKFxcXFxzfCQpJyk7XG4gICAgICAgIHJldHVybiAhIWVsLmNsYXNzTmFtZS5tYXRjaChyZWdleCk7XG4gICAgfVxufTtcblxubm9kLnJlbW92ZUNsYXNzID0gZnVuY3Rpb24gKGNsYXNzTmFtZSwgZWwpIHtcbiAgICBpZiAoZWwuY2xhc3NMaXN0KSB7XG4gICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtcbiAgICB9IGVsc2UgaWYgKG5vZC5oYXNDbGFzcyhjbGFzc05hbWUsIGVsKSkge1xuICAgICAgICB2YXIgcmVnZXggPSBuZXcgUmVnRXhwKCcoPzpefFxcXFxzKScgKyBjbGFzc05hbWUgKyAnKD8hXFxcXFMpJyk7XG4gICAgICAgIGVsLmNsYXNzTmFtZSA9IGVsLmNsYXNzTmFtZS5yZXBsYWNlKHJlZ2V4LCAnJyk7XG4gICAgfVxufTtcblxubm9kLmFkZENsYXNzID0gZnVuY3Rpb24gKGNsYXNzTmFtZSwgZWwpIHtcbiAgICBpZiAoZWwuY2xhc3NMaXN0KSB7XG4gICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcbiAgICB9IGVsc2UgaWYgKCFub2QuaGFzQ2xhc3MoY2xhc3NOYW1lLCBlbCkpIHtcbiAgICAgICAgZWwuY2xhc3NOYW1lICs9ICcgJyArIGNsYXNzTmFtZTtcbiAgICB9XG59O1xuXG5ub2QuZ2V0UGFyZW50ID0gZnVuY3Rpb24gKGVsZW1lbnQsIGNvbmZpZ3VyYXRpb24pIHtcbiAgICB2YXIga2xhc3MgPSBjb25maWd1cmF0aW9uLnBhcmVudENsYXNzO1xuXG4gICAgaWYgKGtsYXNzKSB7XG4gICAgICAgIGtsYXNzID0ga2xhc3MuY2hhckF0KDApID09PSAnLicgPyBrbGFzcy5zbGljZSgxKSA6IGtsYXNzO1xuICAgICAgICByZXR1cm4gbm9kLmZpbmRQYXJlbnRXaXRoQ2xhc3MoZWxlbWVudC5wYXJlbnROb2RlLCBrbGFzcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICB9XG59O1xuXG5ub2QuZmluZFBhcmVudFdpdGhDbGFzcyA9IGZ1bmN0aW9uIChwYXJlbnQsIGtsYXNzKSB7XG4gICAgLy8gR3VhcmQgKG9ubHkgdGhlIGB3aW5kb3dgIGRvZXMgbm90IGhhdmUgYSBwYXJlbnQpLlxuICAgIGlmICghcGFyZW50LnBhcmVudE5vZGUpIHtcbiAgICAgICAgcmV0dXJuIHBhcmVudDtcbiAgICB9XG5cbiAgICAvLyBGb3VuZCBpdFxuICAgIGlmIChub2QuaGFzQ2xhc3Moa2xhc3MsIHBhcmVudCkpIHtcbiAgICAgICAgcmV0dXJuIHBhcmVudDtcbiAgICB9XG5cbiAgICAvLyBUcnkgbmV4dCBwYXJlbnQgKHJlY3Vyc2lvbilcbiAgICByZXR1cm4gbm9kLmZpbmRQYXJlbnRXaXRoQ2xhc3MocGFyZW50LnBhcmVudE5vZGUsIGtsYXNzKTtcbn07XG5cbi8qKlxuICogbWFrZURvbU5vZGVcbiAqXG4gKiBUaGlzIGNyZWF0ZXMgdGhlIGVycm9yL3N1Y2Nlc3MgbWVzc2FnZSBiZWhpbmQgdGhlIGlucHV0IGVsZW1lbnQsIGFzIHdlbGwgYXNcbiAqIHRha2VzIGNhcmUgb2YgdXBkYXRpbmcgY2xhc3NlcyBhbmQgdGFraW5nIGNhcmUgb2YgaXRzIG93biBzdGF0ZS5cbiAqXG4gKiBUaGUgZG9tIG5vZGUgaXMgb3duZWQgYnkgY2hlY2tIYW5kbGVyLCBhbmQgaGFzIGEgb25lIHRvIG9uZSByZWxhdGlvbnNoaXAgd2l0aFxuICogYm90aCB0aGUgY2hlY2tIYW5kbGVyIGFuZCB0aGUgaW5wdXQgZWxlbWVudCBiZWluZyBjaGVja2VkLlxuICpcbiAqL1xubm9kLm1ha2VEb21Ob2RlID0gZnVuY3Rpb24gKGVsZW1lbnQsIG1lZGlhdG9yLCBjb25maWd1cmF0aW9uKSB7XG4gICAgLy8gQSAnZG9tTm9kZScgY29uc2lzdHMgb2YgdHdvIGVsZW1lbnRzOiBhICdwYXJlbnQnLCBhbmQgYSAnc3BhbicuIFRoZVxuICAgIC8vIHBhcmVudCBpcyBnaXZlbiBhcyBhIHBhcmVtZXRlciwgd2hpbGUgdGhlIHNwYW4gaXMgY3JlYXRlZCBhbmQgYWRkZWQgYXMgYVxuICAgIC8vIGNoaWxkIHRvIHRoZSBwYXJlbnQuXG4gICAgdmFyIHBhcmVudCAgICAgICAgICAgICAgPSBub2QuZ2V0UGFyZW50KGVsZW1lbnQsIGNvbmZpZ3VyYXRpb24pLFxuICAgICAgICBfc3RhdHVzICAgICAgICAgICAgID0gbm9kLmNvbnN0YW50cy5VTkNIRUNLRUQsXG4gICAgICAgIHBlbmRpbmdVcGRhdGUgICAgICAgPSBudWxsLFxuICAgICAgICBzcGFuICAgICAgICAgICAgICAgID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpLFxuICAgICAgICBjdXN0b21TcGFuICAgICAgICAgID0gZmFsc2U7XG5cbiAgICBzcGFuLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG5cbiAgICBpZiAoIWNvbmZpZ3VyYXRpb24ubm9Eb20pIHtcbiAgICAgICAgcGFyZW50LmFwcGVuZENoaWxkKHNwYW4pO1xuICAgIH1cblxuICAgIC8vIFVwZGF0ZXMgdGhlIGNsYXNzIG9mIHRoZSBwYXJlbnQgdG8gbWF0Y2ggdGhlIHN0YXR1cyBvZiB0aGUgZWxlbWVudC5cbiAgICBmdW5jdGlvbiB1cGRhdGVQYXJlbnQgKHN0YXR1cykge1xuICAgICAgICB2YXIgc3VjY2Vzc0NsYXNzID0gY29uZmlndXJhdGlvbi5zdWNjZXNzQ2xhc3NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IG5vZC5jbGFzc2VzLnN1Y2Nlc3NDbGFzcyxcbiAgICAgICAgICAgIGVycm9yQ2xhc3MgPSBjb25maWd1cmF0aW9uLmVycm9yQ2xhc3NcbiAgICAgICAgICAgICAgICAgICAgICAgICB8fCBub2QuY2xhc3Nlcy5lcnJvckNsYXNzO1xuXG4gICAgICAgIHN3aXRjaCAoc3RhdHVzKSB7XG4gICAgICAgIGNhc2Ugbm9kLmNvbnN0YW50cy5WQUxJRDpcbiAgICAgICAgICAgIG5vZC5yZW1vdmVDbGFzcyhlcnJvckNsYXNzLCBwYXJlbnQpO1xuICAgICAgICAgICAgbm9kLmFkZENsYXNzKHN1Y2Nlc3NDbGFzcywgcGFyZW50KTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2Ugbm9kLmNvbnN0YW50cy5JTlZBTElEOlxuICAgICAgICAgICAgbm9kLnJlbW92ZUNsYXNzKHN1Y2Nlc3NDbGFzcywgcGFyZW50KTtcbiAgICAgICAgICAgIG5vZC5hZGRDbGFzcyhlcnJvckNsYXNzLCBwYXJlbnQpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBVcGRhdGVzIHRoZSB0ZXh0IGFuZCBjbGFzcyBhY2NvcmRpbmcgdG8gdGhlIHN0YXR1cy5cbiAgICBmdW5jdGlvbiB1cGRhdGVTcGFuIChzdGF0dXMsIGVycm9yTWVzc2FnZSkge1xuICAgICAgICB2YXIgc3VjY2Vzc01lc3NhZ2VDbGFzcyA9IGNvbmZpZ3VyYXRpb24uc3VjY2Vzc01lc3NhZ2VDbGFzc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IG5vZC5jbGFzc2VzLnN1Y2Nlc3NNZXNzYWdlQ2xhc3MsXG4gICAgICAgICAgZXJyb3JNZXNzYWdlQ2xhc3MgICA9IGNvbmZpZ3VyYXRpb24uZXJyb3JNZXNzYWdlQ2xhc3NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgbm9kLmNsYXNzZXMuZXJyb3JNZXNzYWdlQ2xhc3M7XG5cbiAgICAgICAgc3Bhbi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuXG4gICAgICAgIHN3aXRjaCAoc3RhdHVzKSB7XG4gICAgICAgIGNhc2Ugbm9kLmNvbnN0YW50cy5WQUxJRDpcbiAgICAgICAgICAgIG5vZC5yZW1vdmVDbGFzcyhlcnJvck1lc3NhZ2VDbGFzcywgc3Bhbik7XG4gICAgICAgICAgICBub2QuYWRkQ2xhc3Moc3VjY2Vzc01lc3NhZ2VDbGFzcywgc3Bhbik7XG5cbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uLnN1Y2Nlc3NNZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgc3Bhbi50ZXh0Q29udGVudCA9IGNvbmZpZ3VyYXRpb24uc3VjY2Vzc01lc3NhZ2U7XG4gICAgICAgICAgICAgICAgc3Bhbi5zdHlsZS5kaXNwbGF5ID0gJyc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2Ugbm9kLmNvbnN0YW50cy5JTlZBTElEOlxuICAgICAgICAgICAgbm9kLnJlbW92ZUNsYXNzKHN1Y2Nlc3NNZXNzYWdlQ2xhc3MsIHNwYW4pO1xuICAgICAgICAgICAgbm9kLmFkZENsYXNzKGVycm9yTWVzc2FnZUNsYXNzLCBzcGFuKTtcbiAgICAgICAgICAgIHNwYW4udGV4dENvbnRlbnQgPSBlcnJvck1lc3NhZ2U7XG4gICAgICAgICAgICBzcGFuLnN0eWxlLmRpc3BsYXkgPSAnJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0IChvcHRpb25zKSB7XG4gICAgICAgIHZhciBzdGF0dXMgICAgICAgICAgICAgID0gb3B0aW9ucy5yZXN1bHQsXG4gICAgICAgICAgICBlcnJvck1lc3NhZ2UgICAgICAgID0gb3B0aW9ucy5lcnJvck1lc3NhZ2U7XG5cbiAgICAgICAgLy8gSWYgdGhlIGRvbSBpcyBzaG93aW5nIGFuIGludmFsaWQgbWVzc2FnZSwgd2Ugd2FudCB0byB1cGRhdGUgdGhlIGRvbVxuICAgICAgICAvLyByaWdodCBhd2F5LlxuICAgICAgICBpZiAoX3N0YXR1cyA9PT0gbm9kLmNvbnN0YW50cy5JTlZBTElEIHx8IGNvbmZpZ3VyYXRpb24uZGVsYXkgPT09IDApIHtcbiAgICAgICAgICAgIF9zdGF0dXMgPSBzdGF0dXM7XG4gICAgICAgICAgICB1cGRhdGVQYXJlbnQoc3RhdHVzKTtcbiAgICAgICAgICAgIHVwZGF0ZVNwYW4oc3RhdHVzLCBlcnJvck1lc3NhZ2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gSWYgdGhlIGRvbSBzaG93cyBlaXRoZXIgYW4gdW5jaGVja2VkIG9yIGEgdmFsaWQgc3RhdGUgd2Ugd29uJ3RcbiAgICAgICAgICAgIC8vIHJ1c2ggdG8gdGVsbCB0aGVtIHRoZXkgYXJlIHdyb25nLiBJbnN0ZWFkIHdlIHVzZSBhIG1ldGhvZCBzaW1pbGFyXG4gICAgICAgICAgICAvLyB0byBcImRlYm91bmNpbmdcIiB0aGUgdXBkYXRlXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQocGVuZGluZ1VwZGF0ZSk7XG5cbiAgICAgICAgICAgIHBlbmRpbmdVcGRhdGUgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfc3RhdHVzID0gc3RhdHVzO1xuICAgICAgICAgICAgICAgIHVwZGF0ZVBhcmVudChzdGF0dXMpO1xuICAgICAgICAgICAgICAgIHVwZGF0ZVNwYW4oc3RhdHVzLCBlcnJvck1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIHBlbmRpbmdVcGRhdGUgPSBudWxsO1xuICAgICAgICAgICAgfSwgY29uZmlndXJhdGlvbi5kZWxheSB8fCBub2QuY29uc3RhbnRzLkRFTEFZKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHN1YnNjcmliZVRvIChpZCkge1xuICAgICAgICBtZWRpYXRvci5zdWJzY3JpYmUoaWQsIHNldCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0TWVzc2FnZU9wdGlvbnMgKHBhcmVudENvbnRhaW5lciwgbWVzc2FnZSkge1xuICAgICAgICBpZiAocGFyZW50Q29udGFpbmVyKSB7XG4gICAgICAgICAgICBwYXJlbnQgPSBub2QuZ2V0RWxlbWVudChwYXJlbnRDb250YWluZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1lc3NhZ2UpIHtcbiAgICAgICAgICAgIHNwYW4ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzcGFuKTsgICAgICAvLyBSZW1vdmUgb2xkIHNwYW4uXG4gICAgICAgICAgICBzcGFuID0gbm9kLmdldEVsZW1lbnQobWVzc2FnZSk7ICAgICAgICAgLy8gU2V0IHRoZSBuZXcgb25lLlxuICAgICAgICAgICAgY3VzdG9tU3BhbiA9IHRydWU7ICAgICAgICAgICAgICAgICAgICAgIC8vIFNvIHdlIHdvbid0IGRlbGV0ZSBpdC5cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRpc3Bvc2UgKCkge1xuICAgICAgICAvLyBGaXJzdCByZW1vdmUgYW55IGNsYXNzZXNcbiAgICAgICAgbm9kLnJlbW92ZUNsYXNzKGNvbmZpZ3VyYXRpb24uZXJyb3JDbGFzc1xuICAgICAgICAgICAgICAgICAgICAgICAgfHwgbm9kLmNsYXNzZXMuZXJyb3JDbGFzcywgcGFyZW50KTtcbiAgICAgICAgbm9kLnJlbW92ZUNsYXNzKGNvbmZpZ3VyYXRpb24uc3VjY2Vzc0NsYXNzXG4gICAgICAgICAgICAgICAgICAgICAgICB8fCBub2QuY2xhc3Nlcy5zdWNjZXNzQ2xhc3MsIHBhcmVudCk7XG5cbiAgICAgICAgLy8gVGhlbiB3ZSByZW1vdmUgdGhlIHNwYW4gaWYgaXQgd2Fzbid0IG9uZSB0aGF0IHdhcyBzZXQgYnkgdGhlIHVzZXIuXG4gICAgICAgIC8vIElmIGBub0RvbWAgd2FzIHVzZWQsIHRoZW4gdGhlcmUgd29uJ3QgYmUgYW55IHRvIHJlbW92ZS5cbiAgICAgICAgaWYgKHNwYW4ucGFyZW50Tm9kZSAmJiAhY3VzdG9tU3Bhbikge1xuICAgICAgICAgICAgc3Bhbi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHNwYW4pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3Vic2NyaWJlVG86ICAgICAgICBzdWJzY3JpYmVUbyxcbiAgICAgICAgZWxlbWVudDogICAgICAgICAgICBlbGVtZW50LFxuICAgICAgICBzZXRNZXNzYWdlT3B0aW9uczogIHNldE1lc3NhZ2VPcHRpb25zLFxuICAgICAgICBkaXNwb3NlOiAgICAgICAgICAgIGRpc3Bvc2UsXG4gICAgICAgIHNldDogICAgICAgICAgICAgICAgc2V0XG4gICAgfTtcbn07XG5cbm5vZC5tYWtlRXZlbnRFbWl0dGVyID0gZnVuY3Rpb24gKG1lZGlhdG9yKSB7XG4gICAgdmFyIGN1c3RvbUV2ZW50O1xuXG4gICAgZnVuY3Rpb24gZW1pdCAob3B0aW9ucykge1xuICAgICAgICBpZiAoQ3VzdG9tRXZlbnQpIHtcbiAgICAgICAgICAgIGN1c3RvbUV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KCdub2QudmFsaWRhdGlvbicsIHtkZXRhaWw6IG9wdGlvbnN9KTtcblxuICAgICAgICAgICAgb3B0aW9ucy5lbGVtZW50LmRpc3BhdGNoRXZlbnQoY3VzdG9tRXZlbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGVycm9yTXNnID0gJ25vZC52YWxpZGF0ZSB0cmllZCB0byBmaXJlIGEgY3VzdG9tIGV2ZW50LCBidXQgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAndGhlIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBDdXN0b21FdmVudFxcJ3MnO1xuXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihlcnJvck1zZyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzdWJzY3JpYmUgKGlkKSB7XG4gICAgICAgIG1lZGlhdG9yLnN1YnNjcmliZShpZCwgZW1pdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3Vic2NyaWJlOiBzdWJzY3JpYmVcbiAgICB9O1xufTtcblxuLyoqXG4gKiBnZXRFbGVtZW50XG4gKlxuICogUmV0dXJucyB0aGUgZmlyc3QgZWxlbWVudCB0YXJnZXRlZCBieSB0aGUgc2VsZWN0b3IuIChzZWUgYGdldEVsZW1lbnRzYClcbiAqL1xubm9kLmdldEVsZW1lbnQgPSBmdW5jdGlvbiAoc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gbm9kLmdldEVsZW1lbnRzKHNlbGVjdG9yKVswXTtcbn07XG5cbi8qKlxuICogZ2V0RWxlbWVudHNcbiAqXG4gKiBUYWtlcyBzb21lIHNvcnQgb2Ygc2VsZWN0b3IsIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIGVsZW1lbnQocykuIFRoZSBhcHBsaWVkXG4gKiBzZWxlY3RvciBjYW4gYmUgb25lIG9mOlxuICpcbiAqIC0gQ3NzIHR5cGUgc2VsZWN0b3IgKGUuZy4sIFwiLmZvb1wiKVxuICogLSBBIGpRdWVyeSBlbGVtZW50IChlLmcuLCAkKCcuZm9vKSlcbiAqIC0gQSBzaW5nbGUgcmF3IGRvbSBlbGVtZW50IChlLmcuLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZm9vJykpXG4gKiAtIEEgbGlzdCBvZiByYXcgZG9tIGVsZW1lbnQgKGUuZy4sICQoJy5mb28nKS5nZXQoKSlcbiAqL1xubm9kLmdldEVsZW1lbnRzID0gZnVuY3Rpb24gKHNlbGVjdG9yKSB7XG4gICAgaWYgKCFzZWxlY3Rvcikge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgLy8gTm9ybWFsIGNzcyB0eXBlIHNlbGVjdG9yIGlzIGFzc3VtZWRcbiAgICBpZiAodHlwZW9mIHNlbGVjdG9yID09PSAnc3RyaW5nJykge1xuICAgICAgICAvLyBJZiB3ZSBoYXZlIGpRdWVyeSwgdGhlbiB3ZSB1c2UgdGhhdCB0byBjcmVhdGUgYSBkb20gbGlzdCBmb3IgdXMuXG4gICAgICAgIGlmICh3aW5kb3cualF1ZXJ5KSB7XG4gICAgICAgICAgICByZXR1cm4gd2luZG93LmpRdWVyeShzZWxlY3RvcikuZ2V0KCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiBub3QsIHRoZW4gd2UgZG8gaXQgdGhlIG1hbnVhbCB3YXkuXG4gICAgICAgIHZhciBub2RlTGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuXG4gICAgICAgIHJldHVybiBbXS5tYXAuY2FsbChub2RlTGlzdCwgZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgICByZXR1cm4gZWw7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIGlmIHVzZXIgZ2F2ZSB1cyBqUXVlcnkgZWxlbWVudHNcbiAgICBpZiAoc2VsZWN0b3IuanF1ZXJ5KSB7XG4gICAgICAgIHJldHVybiBzZWxlY3Rvci5nZXQoKTtcbiAgICB9XG5cbiAgICAvLyBSYXcgRE9NIGVsZW1lbnRcbiAgICBpZiAoc2VsZWN0b3Iubm9kZVR5cGUgPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIFtzZWxlY3Rvcl07XG4gICAgfVxuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc2VsZWN0b3IpKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBbXTtcblxuICAgICAgICBzZWxlY3Rvci5mb3JFYWNoKGZ1bmN0aW9uIChzZWwpIHtcbiAgICAgICAgICAgIHZhciBlbGVtZW50cyA9IG5vZC5nZXRFbGVtZW50cyhzZWwpO1xuXG4gICAgICAgICAgICByZXN1bHQgPSByZXN1bHQuY29uY2F0KGVsZW1lbnRzKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICB0aHJvdyBFcnJvcignVW5rbm93biB0eXBlIG9mIGVsZW1lbnRzIGluIHlvdXIgYHNlbGVjdG9yYDogJyArIHNlbGVjdG9yKTtcbn07XG5cbm5vZC5nZXRDaGVja0Z1bmN0aW9uID0gZnVuY3Rpb24gKG1ldHJpYykge1xuICAgIGlmICh0eXBlb2YgbWV0cmljLnZhbGlkYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBtZXRyaWMudmFsaWRhdGU7XG4gICAgfVxuXG4gICAgaWYgKG1ldHJpYy52YWxpZGF0ZSBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgICByZXR1cm4gbm9kLmNoZWNrRnVuY3Rpb25zLnJlZ2V4cChtZXRyaWMudmFsaWRhdGUpO1xuICAgIH1cblxuICAgIHZhciBhcmdzICAgPSBtZXRyaWMudmFsaWRhdGUuc3BsaXQoJzonKSxcbiAgICAgICAgZm5OYW1lID0gYXJncy5zaGlmdCgpO1xuXG4gICAgaWYgKGZuTmFtZSA9PT0gJ29uZS1vZicgfHwgZm5OYW1lID09PSAnb25seS1vbmUtb2YnIHx8XG4gICAgICAgIGZuTmFtZSA9PT0gJ3NhbWUtYXMnIHx8IGZuTmFtZSA9PT0gJ3NvbWUtcmFkaW8nKSB7XG4gICAgICAgIGFyZ3MucHVzaChtZXRyaWMuc2VsZWN0b3IpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygbm9kLmNoZWNrRnVuY3Rpb25zW2ZuTmFtZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIG5vZC5jaGVja0Z1bmN0aW9uc1tmbk5hbWVdLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBlcnJvck1zZyA9ICdDb3VsZG5cXCd0IGZpbmQgeW91ciB2YWxpZGF0b3IgZnVuY3Rpb24gXCInICtcbiAgICAgICAgICAgICAgICAgICAgICAgZm5OYW1lICsgJ1wiIGZvciBcIicgKyBtZXRyaWMuc2VsZWN0b3IgKyAnXCInO1xuXG4gICAgICAgIHRocm93IEVycm9yKGVycm9yTXNnKTtcbiAgICB9XG59O1xuXG4vLyBDb2xsZWN0aW9uIG9mIGJ1aWx0LWluIGNoZWNrIGZ1bmN0aW9uc1xubm9kLmNoZWNrRnVuY3Rpb25zID0ge1xuICAgICdwcmVzZW5jZSc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIHByZXNlbmNlIChjYWxsYmFjaywgdmFsdWUpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKHZhbHVlLmxlbmd0aCA+IDApO1xuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICAnZXhhY3QnOiBmdW5jdGlvbiAoZXhhY3RWYWx1ZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gZXhhY3QgKGNhbGxiYWNrLCB2YWx1ZSkge1xuICAgICAgICAgICAgY2FsbGJhY2sodmFsdWUgPT09IGV4YWN0VmFsdWUpO1xuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICAnY29udGFpbnMnOiBmdW5jdGlvbiAoY29udGFpbnNWYWx1ZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gY29udGFpbnMgKGNhbGxiYWNrLCB2YWx1ZSkge1xuICAgICAgICAgICAgY2FsbGJhY2sodmFsdWUuaW5kZXhPZihjb250YWluc1ZhbHVlKSA+IC0xKTtcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgJ25vdCc6IGZ1bmN0aW9uIChleGFjdFZhbHVlKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBub3QgKGNhbGxiYWNrLCB2YWx1ZSkge1xuICAgICAgICAgICAgY2FsbGJhY2sodmFsdWUgIT09IGV4YWN0VmFsdWUpO1xuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICAnbWluLWxlbmd0aCc6IGZ1bmN0aW9uIChtaW5pbXVtTGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBtaW5MZW5ndGggKGNhbGxiYWNrLCB2YWx1ZSkge1xuICAgICAgICAgICAgY2FsbGJhY2sodmFsdWUubGVuZ3RoID49IG1pbmltdW1MZW5ndGgpO1xuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICAnbWF4LWxlbmd0aCc6IGZ1bmN0aW9uIChtYXhpbXVtTGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBtYXhMZW5ndGggKGNhbGxiYWNrLCB2YWx1ZSkge1xuICAgICAgICAgICAgY2FsbGJhY2sodmFsdWUubGVuZ3RoIDw9IG1heGltdW1MZW5ndGgpO1xuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICAnZXhhY3QtbGVuZ3RoJzogZnVuY3Rpb24gKGV4YWN0TGVuKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBleGFjdExlbmd0aCAoY2FsbGJhY2ssIHZhbHVlKSB7XG4gICAgICAgICAgICBjYWxsYmFjayh2YWx1ZS5sZW5ndGggPT09ICtleGFjdExlbik7XG4gICAgICAgIH07XG4gICAgfSxcblxuICAgICdiZXR3ZWVuLWxlbmd0aCc6IGZ1bmN0aW9uIChtaW5pbXVtTGVuZ3RoLCBtYXhpbXVtTGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBiZXR3ZWVuTGVuZ3RoIChjYWxsYmFjaywgdmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBhYm92ZU1pbkxlbmd0aCA9IHZhbHVlLmxlbmd0aCA+PSBtaW5pbXVtTGVuZ3RoLFxuICAgICAgICAgICAgICAgIGJlbG93TWF4TGVuZ3RoID0gdmFsdWUubGVuZ3RoIDw9IG1heGltdW1MZW5ndGg7XG5cbiAgICAgICAgICAgIGNhbGxiYWNrKGFib3ZlTWluTGVuZ3RoICYmIGJlbG93TWF4TGVuZ3RoKTtcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgJ21heC1udW1iZXInOiBmdW5jdGlvbiAobWF4aW11bU51bWJlcikge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gbWF4TnVtYmVyIChjYWxsYmFjaywgdmFsdWUpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKCt2YWx1ZSA8PSBtYXhpbXVtTnVtYmVyKTtcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgJ21pbi1udW1iZXInOiBmdW5jdGlvbiAobWluaW11bU51bWJlcikge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gbWluTnVtYmVyIChjYWxsYmFjaywgdmFsdWUpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKCt2YWx1ZSA+PSBtaW5pbXVtTnVtYmVyKTtcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgJ2JldHdlZW4tbnVtYmVyJzogZnVuY3Rpb24gKG1pbmltdW1OdW1iZXIsIG1heGltdW1OdW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGJldHdlZW5OdW1iZXIgKGNhbGxiYWNrLCB2YWx1ZSkge1xuICAgICAgICAgICAgY2FsbGJhY2soK3ZhbHVlID49IG1pbmltdW1OdW1iZXIgJiYgK3ZhbHVlIDw9IG1heGltdW1OdW1iZXIpO1xuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICAnaW50ZWdlcic6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChjYWxsYmFjaywgdmFsdWUpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKC9eXFxzKlxcZCtcXHMqJC8udGVzdCh2YWx1ZSkpO1xuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICAnZmxvYXQnOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoY2FsbGJhY2ssIHZhbHVlKSB7XG4gICAgICAgICAgICBjYWxsYmFjaygvXlstK10/WzAtOV0rKFxcLlswLTldKyk/JC8udGVzdCh2YWx1ZSkpO1xuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICAnc2FtZS1hcyc6IGZ1bmN0aW9uIChzZWxlY3Rvcikge1xuICAgICAgICB2YXIgc2FtZUFzRWxlbWVudCA9IG5vZC5nZXRFbGVtZW50KHNlbGVjdG9yKTtcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gc2FtZUFzIChjYWxsYmFjaywgdmFsdWUsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIC8vICdzYW1lLWFzJyBpcyBzcGVjaWFsLCBpbiB0aGF0IGlmIGl0IGlzIHRyaWdnZXJlZCBieSBhbm90aGVyIGZpZWxkXG4gICAgICAgICAgICAvLyAodGhlIG9uZSBpdCBzaG91bGQgYmUgc2ltaWxhciB0byksIGFuZCB0aGUgZmllbGQgaXRzZWxmIGlzIGVtcHR5LFxuICAgICAgICAgICAgLy8gdGhlbiBpdCBiYWlscyBvdXQgd2l0aG91dCBhIGNoZWNrLiBUaGlzIGlzIHRvIGF2b2lkIHNob3dpbmcgYW5cbiAgICAgICAgICAgIC8vIGVycm9yIG1lc3NhZ2UgYmVmb3JlIHRoZSB1c2VyIGhhcyBldmVuIHJlYWNoZWQgdGhlIGVsZW1lbnQuXG4gICAgICAgICAgICBpZiAob3B0aW9ucyAmJlxuICAgICAgICAgICAgICAgIG9wdGlvbnMuZXZlbnQgJiZcbiAgICAgICAgICAgICAgICBvcHRpb25zLmV2ZW50LnRhcmdldCAmJlxuICAgICAgICAgICAgICAgIG9wdGlvbnMuZXZlbnQudGFyZ2V0ICE9PSBvcHRpb25zLmVsZW1lbnQgJiZcbiAgICAgICAgICAgICAgICB2YWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNhbGxiYWNrKHZhbHVlID09PSBzYW1lQXNFbGVtZW50LnZhbHVlKTtcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgJ29uZS1vZic6IGZ1bmN0aW9uIChzZWxlY3Rvcikge1xuICAgICAgICB2YXIgZWxlbWVudHMgPSBub2QuZ2V0RWxlbWVudHMoc2VsZWN0b3IpO1xuXG4gICAgICAgIGZ1bmN0aW9uIGdldFZhbHVlcyAoKSB7XG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudHMucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1lbW8gKyAnJyArIChlbGVtZW50LnZhbHVlIHx8ICcnKTtcbiAgICAgICAgICAgIH0sICcnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBvbmVPZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGdldFZhbHVlcygpLnRyaW0oKS5sZW5ndGggPiAwKTtcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgJ29ubHktb25lLW9mJzogZnVuY3Rpb24gKHNlbGVjdG9yKSB7XG4gICAgICAgIHZhciBlbGVtZW50cyA9IG5vZC5nZXRFbGVtZW50cyhzZWxlY3Rvcik7XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIG9ubHlPbmVPZiAoY2FsbGJhY2ssIHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgbnVtT2ZWYWx1ZXMgPSAwO1xuXG4gICAgICAgICAgICBlbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgbnVtT2ZWYWx1ZXMrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgY2FsbGJhY2sobnVtT2ZWYWx1ZXMgPT09IDEpO1xuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICAnY2hlY2tlZCc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGNoZWNrZWQgKGNhbGxiYWNrLCB2YWx1ZSwgb3B0aW9ucykge1xuICAgICAgICAgICAgY2FsbGJhY2sob3B0aW9ucy5lbGVtZW50LmNoZWNrZWQpO1xuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICAnc29tZS1yYWRpbyc6IGZ1bmN0aW9uIChzZWxlY3Rvcikge1xuICAgICAgICB2YXIgcmFkaW9FbGVtZW50cyA9IG5vZC5nZXRFbGVtZW50cyhzZWxlY3Rvcik7XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIHNvbWVSYWRpbyAoY2FsbGJhY2ssIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gcmFkaW9FbGVtZW50cy5yZWR1Y2UoZnVuY3Rpb24gKG1lbW8sIGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWVtbyB8fCBlbGVtZW50LmNoZWNrZWQ7XG4gICAgICAgICAgICB9LCBmYWxzZSk7XG5cbiAgICAgICAgICAgIGNhbGxiYWNrKHJlc3VsdCk7XG4gICAgICAgIH07XG4gICAgfSxcblxuICAgICdyZWdleHAnOiBmdW5jdGlvbiAocmVnKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiByZWdFeHAgKGNhbGxiYWNrLCB2YWx1ZSkge1xuICAgICAgICAgICAgY2FsbGJhY2socmVnLnRlc3QodmFsdWUpKTtcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgJ2VtYWlsJzogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgUkZDODIyID0gL14oW15cXHgwMC1cXHgyMFxceDIyXFx4MjhcXHgyOVxceDJjXFx4MmVcXHgzYS1cXHgzY1xceDNlXFx4NDBcXHg1Yi1cXHg1ZFxceDdmLVxceGZmXSt8XFx4MjIoW15cXHgwZFxceDIyXFx4NWNcXHg4MC1cXHhmZl18XFx4NWNbXFx4MDAtXFx4N2ZdKSpcXHgyMikoXFx4MmUoW15cXHgwMC1cXHgyMFxceDIyXFx4MjhcXHgyOVxceDJjXFx4MmVcXHgzYS1cXHgzY1xceDNlXFx4NDBcXHg1Yi1cXHg1ZFxceDdmLVxceGZmXSt8XFx4MjIoW15cXHgwZFxceDIyXFx4NWNcXHg4MC1cXHhmZl18XFx4NWNbXFx4MDAtXFx4N2ZdKSpcXHgyMikpKlxceDQwKFteXFx4MDAtXFx4MjBcXHgyMlxceDI4XFx4MjlcXHgyY1xceDJlXFx4M2EtXFx4M2NcXHgzZVxceDQwXFx4NWItXFx4NWRcXHg3Zi1cXHhmZl0rfFxceDViKFteXFx4MGRcXHg1Yi1cXHg1ZFxceDgwLVxceGZmXXxcXHg1Y1tcXHgwMC1cXHg3Zl0pKlxceDVkKShcXHgyZShbXlxceDAwLVxceDIwXFx4MjJcXHgyOFxceDI5XFx4MmNcXHgyZVxceDNhLVxceDNjXFx4M2VcXHg0MFxceDViLVxceDVkXFx4N2YtXFx4ZmZdK3xcXHg1YihbXlxceDBkXFx4NWItXFx4NWRcXHg4MC1cXHhmZl18XFx4NWNbXFx4MDAtXFx4N2ZdKSpcXHg1ZCkpKiQvO1xuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBlbWFpbCAoY2FsbGJhY2ssIHZhbHVlKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhSRkM4MjIudGVzdCh2YWx1ZSkpO1xuICAgICAgICB9O1xuICAgIH1cbn07XG5cbi8vIEN1c3RvbUV2ZW50IHBvbHlmaWxsIGZvciBvbGRlciBJRSB2ZXJzaW9ucy4gVGFrZW4gZnJvbVxuLy8gZ2l0aHViLmNvbS9kNHRvY2NoaW5pL2N1c3RvbWV2ZW50LXBvbHlmaWxsL2Jsb2IvbWFzdGVyL0N1c3RvbUV2ZW50LmpzXG50cnkge1xuICAgIG5ldyBDdXN0b21FdmVudChcInRlc3RcIik7XG59IGNhdGNoIChlKSB7XG4gICAgdmFyIEN1c3RvbUV2ZW50ID0gZnVuY3Rpb24gKGV2ZW50LCBwYXJhbXMpIHtcbiAgICAgICAgdmFyIGV2dDtcbiAgICAgICAgcGFyYW1zID0gcGFyYW1zIHx8IHtcbiAgICAgICAgICAgIGJ1YmJsZXM6IGZhbHNlLFxuICAgICAgICAgICAgY2FuY2VsYWJsZTogZmFsc2UsXG4gICAgICAgICAgICBkZXRhaWw6IHVuZGVmaW5lZFxuICAgICAgICB9O1xuXG4gICAgICAgIGV2dCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiQ3VzdG9tRXZlbnRcIik7XG4gICAgICAgIGV2dC5pbml0Q3VzdG9tRXZlbnQoZXZlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zLmJ1YmJsZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zLmNhbmNlbGFibGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zLmRldGFpbCk7XG4gICAgICAgIHJldHVybiBldnQ7XG4gICAgfTtcblxuICAgIEN1c3RvbUV2ZW50LnByb3RvdHlwZSA9IHdpbmRvdy5FdmVudC5wcm90b3R5cGU7XG4gICAgd2luZG93LkN1c3RvbUV2ZW50ID0gQ3VzdG9tRXZlbnQ7XG59XG5cbi8vIFNhZmVseSBleHBvcnQgbm9kLlxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBub2Q7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLy8gcmVmOiBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1nbG9iYWxcbnZhciBnZXRHbG9iYWwgPSBmdW5jdGlvbiAoKSB7XG5cdC8vIHRoZSBvbmx5IHJlbGlhYmxlIG1lYW5zIHRvIGdldCB0aGUgZ2xvYmFsIG9iamVjdCBpc1xuXHQvLyBgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKWBcblx0Ly8gSG93ZXZlciwgdGhpcyBjYXVzZXMgQ1NQIHZpb2xhdGlvbnMgaW4gQ2hyb21lIGFwcHMuXG5cdGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHsgcmV0dXJuIHNlbGY7IH1cblx0aWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7IHJldHVybiB3aW5kb3c7IH1cblx0aWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7IHJldHVybiBnbG9iYWw7IH1cblx0dGhyb3cgbmV3IEVycm9yKCd1bmFibGUgdG8gbG9jYXRlIGdsb2JhbCBvYmplY3QnKTtcbn1cblxudmFyIGdsb2JhbE9iamVjdCA9IGdldEdsb2JhbCgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBnbG9iYWxPYmplY3QuZmV0Y2g7XG5cbi8vIE5lZWRlZCBmb3IgVHlwZVNjcmlwdCBhbmQgV2VicGFjay5cbmlmIChnbG9iYWxPYmplY3QuZmV0Y2gpIHtcblx0ZXhwb3J0cy5kZWZhdWx0ID0gZ2xvYmFsT2JqZWN0LmZldGNoLmJpbmQoZ2xvYmFsT2JqZWN0KTtcbn1cblxuZXhwb3J0cy5IZWFkZXJzID0gZ2xvYmFsT2JqZWN0LkhlYWRlcnM7XG5leHBvcnRzLlJlcXVlc3QgPSBnbG9iYWxPYmplY3QuUmVxdWVzdDtcbmV4cG9ydHMuUmVzcG9uc2UgPSBnbG9iYWxPYmplY3QuUmVzcG9uc2U7XG4iLCJ2YXIgaGFzTWFwID0gdHlwZW9mIE1hcCA9PT0gJ2Z1bmN0aW9uJyAmJiBNYXAucHJvdG90eXBlO1xudmFyIG1hcFNpemVEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciAmJiBoYXNNYXAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE1hcC5wcm90b3R5cGUsICdzaXplJykgOiBudWxsO1xudmFyIG1hcFNpemUgPSBoYXNNYXAgJiYgbWFwU2l6ZURlc2NyaXB0b3IgJiYgdHlwZW9mIG1hcFNpemVEZXNjcmlwdG9yLmdldCA9PT0gJ2Z1bmN0aW9uJyA/IG1hcFNpemVEZXNjcmlwdG9yLmdldCA6IG51bGw7XG52YXIgbWFwRm9yRWFjaCA9IGhhc01hcCAmJiBNYXAucHJvdG90eXBlLmZvckVhY2g7XG52YXIgaGFzU2V0ID0gdHlwZW9mIFNldCA9PT0gJ2Z1bmN0aW9uJyAmJiBTZXQucHJvdG90eXBlO1xudmFyIHNldFNpemVEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciAmJiBoYXNTZXQgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFNldC5wcm90b3R5cGUsICdzaXplJykgOiBudWxsO1xudmFyIHNldFNpemUgPSBoYXNTZXQgJiYgc2V0U2l6ZURlc2NyaXB0b3IgJiYgdHlwZW9mIHNldFNpemVEZXNjcmlwdG9yLmdldCA9PT0gJ2Z1bmN0aW9uJyA/IHNldFNpemVEZXNjcmlwdG9yLmdldCA6IG51bGw7XG52YXIgc2V0Rm9yRWFjaCA9IGhhc1NldCAmJiBTZXQucHJvdG90eXBlLmZvckVhY2g7XG52YXIgaGFzV2Vha01hcCA9IHR5cGVvZiBXZWFrTWFwID09PSAnZnVuY3Rpb24nICYmIFdlYWtNYXAucHJvdG90eXBlO1xudmFyIHdlYWtNYXBIYXMgPSBoYXNXZWFrTWFwID8gV2Vha01hcC5wcm90b3R5cGUuaGFzIDogbnVsbDtcbnZhciBoYXNXZWFrU2V0ID0gdHlwZW9mIFdlYWtTZXQgPT09ICdmdW5jdGlvbicgJiYgV2Vha1NldC5wcm90b3R5cGU7XG52YXIgd2Vha1NldEhhcyA9IGhhc1dlYWtTZXQgPyBXZWFrU2V0LnByb3RvdHlwZS5oYXMgOiBudWxsO1xudmFyIGhhc1dlYWtSZWYgPSB0eXBlb2YgV2Vha1JlZiA9PT0gJ2Z1bmN0aW9uJyAmJiBXZWFrUmVmLnByb3RvdHlwZTtcbnZhciB3ZWFrUmVmRGVyZWYgPSBoYXNXZWFrUmVmID8gV2Vha1JlZi5wcm90b3R5cGUuZGVyZWYgOiBudWxsO1xudmFyIGJvb2xlYW5WYWx1ZU9mID0gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZjtcbnZhciBvYmplY3RUb1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgZnVuY3Rpb25Ub1N0cmluZyA9IEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZztcbnZhciAkbWF0Y2ggPSBTdHJpbmcucHJvdG90eXBlLm1hdGNoO1xudmFyICRzbGljZSA9IFN0cmluZy5wcm90b3R5cGUuc2xpY2U7XG52YXIgJHJlcGxhY2UgPSBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2U7XG52YXIgJHRvVXBwZXJDYXNlID0gU3RyaW5nLnByb3RvdHlwZS50b1VwcGVyQ2FzZTtcbnZhciAkdG9Mb3dlckNhc2UgPSBTdHJpbmcucHJvdG90eXBlLnRvTG93ZXJDYXNlO1xudmFyICR0ZXN0ID0gUmVnRXhwLnByb3RvdHlwZS50ZXN0O1xudmFyICRjb25jYXQgPSBBcnJheS5wcm90b3R5cGUuY29uY2F0O1xudmFyICRqb2luID0gQXJyYXkucHJvdG90eXBlLmpvaW47XG52YXIgJGFyclNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xudmFyICRmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgYmlnSW50VmFsdWVPZiA9IHR5cGVvZiBCaWdJbnQgPT09ICdmdW5jdGlvbicgPyBCaWdJbnQucHJvdG90eXBlLnZhbHVlT2YgOiBudWxsO1xudmFyIGdPUFMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIHN5bVRvU3RyaW5nID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAnc3ltYm9sJyA/IFN5bWJvbC5wcm90b3R5cGUudG9TdHJpbmcgOiBudWxsO1xudmFyIGhhc1NoYW1tZWRTeW1ib2xzID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAnb2JqZWN0Jztcbi8vIGllLCBgaGFzLXRvc3RyaW5ndGFnL3NoYW1zXG52YXIgdG9TdHJpbmdUYWcgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC50b1N0cmluZ1RhZyAmJiAodHlwZW9mIFN5bWJvbC50b1N0cmluZ1RhZyA9PT0gaGFzU2hhbW1lZFN5bWJvbHMgPyAnb2JqZWN0JyA6ICdzeW1ib2wnKVxuICAgID8gU3ltYm9sLnRvU3RyaW5nVGFnXG4gICAgOiBudWxsO1xudmFyIGlzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbnZhciBnUE8gPSAodHlwZW9mIFJlZmxlY3QgPT09ICdmdW5jdGlvbicgPyBSZWZsZWN0LmdldFByb3RvdHlwZU9mIDogT2JqZWN0LmdldFByb3RvdHlwZU9mKSB8fCAoXG4gICAgW10uX19wcm90b19fID09PSBBcnJheS5wcm90b3R5cGUgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wcm90b1xuICAgICAgICA/IGZ1bmN0aW9uIChPKSB7XG4gICAgICAgICAgICByZXR1cm4gTy5fX3Byb3RvX187IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcHJvdG9cbiAgICAgICAgfVxuICAgICAgICA6IG51bGxcbik7XG5cbmZ1bmN0aW9uIGFkZE51bWVyaWNTZXBhcmF0b3IobnVtLCBzdHIpIHtcbiAgICBpZiAoXG4gICAgICAgIG51bSA9PT0gSW5maW5pdHlcbiAgICAgICAgfHwgbnVtID09PSAtSW5maW5pdHlcbiAgICAgICAgfHwgbnVtICE9PSBudW1cbiAgICAgICAgfHwgKG51bSAmJiBudW0gPiAtMTAwMCAmJiBudW0gPCAxMDAwKVxuICAgICAgICB8fCAkdGVzdC5jYWxsKC9lLywgc3RyKVxuICAgICkge1xuICAgICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgICB2YXIgc2VwUmVnZXggPSAvWzAtOV0oPz0oPzpbMC05XXszfSkrKD8hWzAtOV0pKS9nO1xuICAgIGlmICh0eXBlb2YgbnVtID09PSAnbnVtYmVyJykge1xuICAgICAgICB2YXIgaW50ID0gbnVtIDwgMCA/IC0kZmxvb3IoLW51bSkgOiAkZmxvb3IobnVtKTsgLy8gdHJ1bmMobnVtKVxuICAgICAgICBpZiAoaW50ICE9PSBudW0pIHtcbiAgICAgICAgICAgIHZhciBpbnRTdHIgPSBTdHJpbmcoaW50KTtcbiAgICAgICAgICAgIHZhciBkZWMgPSAkc2xpY2UuY2FsbChzdHIsIGludFN0ci5sZW5ndGggKyAxKTtcbiAgICAgICAgICAgIHJldHVybiAkcmVwbGFjZS5jYWxsKGludFN0ciwgc2VwUmVnZXgsICckJl8nKSArICcuJyArICRyZXBsYWNlLmNhbGwoJHJlcGxhY2UuY2FsbChkZWMsIC8oWzAtOV17M30pL2csICckJl8nKSwgL18kLywgJycpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAkcmVwbGFjZS5jYWxsKHN0ciwgc2VwUmVnZXgsICckJl8nKTtcbn1cblxudmFyIHV0aWxJbnNwZWN0ID0gcmVxdWlyZSgnLi91dGlsLmluc3BlY3QnKTtcbnZhciBpbnNwZWN0Q3VzdG9tID0gdXRpbEluc3BlY3QuY3VzdG9tO1xudmFyIGluc3BlY3RTeW1ib2wgPSBpc1N5bWJvbChpbnNwZWN0Q3VzdG9tKSA/IGluc3BlY3RDdXN0b20gOiBudWxsO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluc3BlY3RfKG9iaiwgb3B0aW9ucywgZGVwdGgsIHNlZW4pIHtcbiAgICB2YXIgb3B0cyA9IG9wdGlvbnMgfHwge307XG5cbiAgICBpZiAoaGFzKG9wdHMsICdxdW90ZVN0eWxlJykgJiYgKG9wdHMucXVvdGVTdHlsZSAhPT0gJ3NpbmdsZScgJiYgb3B0cy5xdW90ZVN0eWxlICE9PSAnZG91YmxlJykpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9uIFwicXVvdGVTdHlsZVwiIG11c3QgYmUgXCJzaW5nbGVcIiBvciBcImRvdWJsZVwiJyk7XG4gICAgfVxuICAgIGlmIChcbiAgICAgICAgaGFzKG9wdHMsICdtYXhTdHJpbmdMZW5ndGgnKSAmJiAodHlwZW9mIG9wdHMubWF4U3RyaW5nTGVuZ3RoID09PSAnbnVtYmVyJ1xuICAgICAgICAgICAgPyBvcHRzLm1heFN0cmluZ0xlbmd0aCA8IDAgJiYgb3B0cy5tYXhTdHJpbmdMZW5ndGggIT09IEluZmluaXR5XG4gICAgICAgICAgICA6IG9wdHMubWF4U3RyaW5nTGVuZ3RoICE9PSBudWxsXG4gICAgICAgIClcbiAgICApIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9uIFwibWF4U3RyaW5nTGVuZ3RoXCIsIGlmIHByb3ZpZGVkLCBtdXN0IGJlIGEgcG9zaXRpdmUgaW50ZWdlciwgSW5maW5pdHksIG9yIGBudWxsYCcpO1xuICAgIH1cbiAgICB2YXIgY3VzdG9tSW5zcGVjdCA9IGhhcyhvcHRzLCAnY3VzdG9tSW5zcGVjdCcpID8gb3B0cy5jdXN0b21JbnNwZWN0IDogdHJ1ZTtcbiAgICBpZiAodHlwZW9mIGN1c3RvbUluc3BlY3QgIT09ICdib29sZWFuJyAmJiBjdXN0b21JbnNwZWN0ICE9PSAnc3ltYm9sJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb24gXCJjdXN0b21JbnNwZWN0XCIsIGlmIHByb3ZpZGVkLCBtdXN0IGJlIGB0cnVlYCwgYGZhbHNlYCwgb3IgYFxcJ3N5bWJvbFxcJ2AnKTtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICAgIGhhcyhvcHRzLCAnaW5kZW50JylcbiAgICAgICAgJiYgb3B0cy5pbmRlbnQgIT09IG51bGxcbiAgICAgICAgJiYgb3B0cy5pbmRlbnQgIT09ICdcXHQnXG4gICAgICAgICYmICEocGFyc2VJbnQob3B0cy5pbmRlbnQsIDEwKSA9PT0gb3B0cy5pbmRlbnQgJiYgb3B0cy5pbmRlbnQgPiAwKVxuICAgICkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb24gXCJpbmRlbnRcIiBtdXN0IGJlIFwiXFxcXHRcIiwgYW4gaW50ZWdlciA+IDAsIG9yIGBudWxsYCcpO1xuICAgIH1cbiAgICBpZiAoaGFzKG9wdHMsICdudW1lcmljU2VwYXJhdG9yJykgJiYgdHlwZW9mIG9wdHMubnVtZXJpY1NlcGFyYXRvciAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbiBcIm51bWVyaWNTZXBhcmF0b3JcIiwgaWYgcHJvdmlkZWQsIG11c3QgYmUgYHRydWVgIG9yIGBmYWxzZWAnKTtcbiAgICB9XG4gICAgdmFyIG51bWVyaWNTZXBhcmF0b3IgPSBvcHRzLm51bWVyaWNTZXBhcmF0b3I7XG5cbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuICd1bmRlZmluZWQnO1xuICAgIH1cbiAgICBpZiAob2JqID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAnbnVsbCc7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb2JqID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgcmV0dXJuIG9iaiA/ICd0cnVlJyA6ICdmYWxzZSc7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBpbnNwZWN0U3RyaW5nKG9iaiwgb3B0cyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb2JqID09PSAnbnVtYmVyJykge1xuICAgICAgICBpZiAob2JqID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gSW5maW5pdHkgLyBvYmogPiAwID8gJzAnIDogJy0wJztcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3RyID0gU3RyaW5nKG9iaik7XG4gICAgICAgIHJldHVybiBudW1lcmljU2VwYXJhdG9yID8gYWRkTnVtZXJpY1NlcGFyYXRvcihvYmosIHN0cikgOiBzdHI7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb2JqID09PSAnYmlnaW50Jykge1xuICAgICAgICB2YXIgYmlnSW50U3RyID0gU3RyaW5nKG9iaikgKyAnbic7XG4gICAgICAgIHJldHVybiBudW1lcmljU2VwYXJhdG9yID8gYWRkTnVtZXJpY1NlcGFyYXRvcihvYmosIGJpZ0ludFN0cikgOiBiaWdJbnRTdHI7XG4gICAgfVxuXG4gICAgdmFyIG1heERlcHRoID0gdHlwZW9mIG9wdHMuZGVwdGggPT09ICd1bmRlZmluZWQnID8gNSA6IG9wdHMuZGVwdGg7XG4gICAgaWYgKHR5cGVvZiBkZXB0aCA9PT0gJ3VuZGVmaW5lZCcpIHsgZGVwdGggPSAwOyB9XG4gICAgaWYgKGRlcHRoID49IG1heERlcHRoICYmIG1heERlcHRoID4gMCAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gaXNBcnJheShvYmopID8gJ1tBcnJheV0nIDogJ1tPYmplY3RdJztcbiAgICB9XG5cbiAgICB2YXIgaW5kZW50ID0gZ2V0SW5kZW50KG9wdHMsIGRlcHRoKTtcblxuICAgIGlmICh0eXBlb2Ygc2VlbiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgc2VlbiA9IFtdO1xuICAgIH0gZWxzZSBpZiAoaW5kZXhPZihzZWVuLCBvYmopID49IDApIHtcbiAgICAgICAgcmV0dXJuICdbQ2lyY3VsYXJdJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnNwZWN0KHZhbHVlLCBmcm9tLCBub0luZGVudCkge1xuICAgICAgICBpZiAoZnJvbSkge1xuICAgICAgICAgICAgc2VlbiA9ICRhcnJTbGljZS5jYWxsKHNlZW4pO1xuICAgICAgICAgICAgc2Vlbi5wdXNoKGZyb20pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChub0luZGVudCkge1xuICAgICAgICAgICAgdmFyIG5ld09wdHMgPSB7XG4gICAgICAgICAgICAgICAgZGVwdGg6IG9wdHMuZGVwdGhcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoaGFzKG9wdHMsICdxdW90ZVN0eWxlJykpIHtcbiAgICAgICAgICAgICAgICBuZXdPcHRzLnF1b3RlU3R5bGUgPSBvcHRzLnF1b3RlU3R5bGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaW5zcGVjdF8odmFsdWUsIG5ld09wdHMsIGRlcHRoICsgMSwgc2Vlbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGluc3BlY3RfKHZhbHVlLCBvcHRzLCBkZXB0aCArIDEsIHNlZW4pO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nICYmICFpc1JlZ0V4cChvYmopKSB7IC8vIGluIG9sZGVyIGVuZ2luZXMsIHJlZ2V4ZXMgYXJlIGNhbGxhYmxlXG4gICAgICAgIHZhciBuYW1lID0gbmFtZU9mKG9iaik7XG4gICAgICAgIHZhciBrZXlzID0gYXJyT2JqS2V5cyhvYmosIGluc3BlY3QpO1xuICAgICAgICByZXR1cm4gJ1tGdW5jdGlvbicgKyAobmFtZSA/ICc6ICcgKyBuYW1lIDogJyAoYW5vbnltb3VzKScpICsgJ10nICsgKGtleXMubGVuZ3RoID4gMCA/ICcgeyAnICsgJGpvaW4uY2FsbChrZXlzLCAnLCAnKSArICcgfScgOiAnJyk7XG4gICAgfVxuICAgIGlmIChpc1N5bWJvbChvYmopKSB7XG4gICAgICAgIHZhciBzeW1TdHJpbmcgPSBoYXNTaGFtbWVkU3ltYm9scyA/ICRyZXBsYWNlLmNhbGwoU3RyaW5nKG9iaiksIC9eKFN5bWJvbFxcKC4qXFwpKV9bXildKiQvLCAnJDEnKSA6IHN5bVRvU3RyaW5nLmNhbGwob2JqKTtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmICFoYXNTaGFtbWVkU3ltYm9scyA/IG1hcmtCb3hlZChzeW1TdHJpbmcpIDogc3ltU3RyaW5nO1xuICAgIH1cbiAgICBpZiAoaXNFbGVtZW50KG9iaikpIHtcbiAgICAgICAgdmFyIHMgPSAnPCcgKyAkdG9Mb3dlckNhc2UuY2FsbChTdHJpbmcob2JqLm5vZGVOYW1lKSk7XG4gICAgICAgIHZhciBhdHRycyA9IG9iai5hdHRyaWJ1dGVzIHx8IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGF0dHJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBzICs9ICcgJyArIGF0dHJzW2ldLm5hbWUgKyAnPScgKyB3cmFwUXVvdGVzKHF1b3RlKGF0dHJzW2ldLnZhbHVlKSwgJ2RvdWJsZScsIG9wdHMpO1xuICAgICAgICB9XG4gICAgICAgIHMgKz0gJz4nO1xuICAgICAgICBpZiAob2JqLmNoaWxkTm9kZXMgJiYgb2JqLmNoaWxkTm9kZXMubGVuZ3RoKSB7IHMgKz0gJy4uLic7IH1cbiAgICAgICAgcyArPSAnPC8nICsgJHRvTG93ZXJDYXNlLmNhbGwoU3RyaW5nKG9iai5ub2RlTmFtZSkpICsgJz4nO1xuICAgICAgICByZXR1cm4gcztcbiAgICB9XG4gICAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgICAgICBpZiAob2JqLmxlbmd0aCA9PT0gMCkgeyByZXR1cm4gJ1tdJzsgfVxuICAgICAgICB2YXIgeHMgPSBhcnJPYmpLZXlzKG9iaiwgaW5zcGVjdCk7XG4gICAgICAgIGlmIChpbmRlbnQgJiYgIXNpbmdsZUxpbmVWYWx1ZXMoeHMpKSB7XG4gICAgICAgICAgICByZXR1cm4gJ1snICsgaW5kZW50ZWRKb2luKHhzLCBpbmRlbnQpICsgJ10nO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnWyAnICsgJGpvaW4uY2FsbCh4cywgJywgJykgKyAnIF0nO1xuICAgIH1cbiAgICBpZiAoaXNFcnJvcihvYmopKSB7XG4gICAgICAgIHZhciBwYXJ0cyA9IGFyck9iaktleXMob2JqLCBpbnNwZWN0KTtcbiAgICAgICAgaWYgKCEoJ2NhdXNlJyBpbiBFcnJvci5wcm90b3R5cGUpICYmICdjYXVzZScgaW4gb2JqICYmICFpc0VudW1lcmFibGUuY2FsbChvYmosICdjYXVzZScpKSB7XG4gICAgICAgICAgICByZXR1cm4gJ3sgWycgKyBTdHJpbmcob2JqKSArICddICcgKyAkam9pbi5jYWxsKCRjb25jYXQuY2FsbCgnW2NhdXNlXTogJyArIGluc3BlY3Qob2JqLmNhdXNlKSwgcGFydHMpLCAnLCAnKSArICcgfSc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnRzLmxlbmd0aCA9PT0gMCkgeyByZXR1cm4gJ1snICsgU3RyaW5nKG9iaikgKyAnXSc7IH1cbiAgICAgICAgcmV0dXJuICd7IFsnICsgU3RyaW5nKG9iaikgKyAnXSAnICsgJGpvaW4uY2FsbChwYXJ0cywgJywgJykgKyAnIH0nO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgY3VzdG9tSW5zcGVjdCkge1xuICAgICAgICBpZiAoaW5zcGVjdFN5bWJvbCAmJiB0eXBlb2Ygb2JqW2luc3BlY3RTeW1ib2xdID09PSAnZnVuY3Rpb24nICYmIHV0aWxJbnNwZWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gdXRpbEluc3BlY3Qob2JqLCB7IGRlcHRoOiBtYXhEZXB0aCAtIGRlcHRoIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKGN1c3RvbUluc3BlY3QgIT09ICdzeW1ib2wnICYmIHR5cGVvZiBvYmouaW5zcGVjdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIG9iai5pbnNwZWN0KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzTWFwKG9iaikpIHtcbiAgICAgICAgdmFyIG1hcFBhcnRzID0gW107XG4gICAgICAgIGlmIChtYXBGb3JFYWNoKSB7XG4gICAgICAgICAgICBtYXBGb3JFYWNoLmNhbGwob2JqLCBmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgICAgICAgICAgIG1hcFBhcnRzLnB1c2goaW5zcGVjdChrZXksIG9iaiwgdHJ1ZSkgKyAnID0+ICcgKyBpbnNwZWN0KHZhbHVlLCBvYmopKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb2xsZWN0aW9uT2YoJ01hcCcsIG1hcFNpemUuY2FsbChvYmopLCBtYXBQYXJ0cywgaW5kZW50KTtcbiAgICB9XG4gICAgaWYgKGlzU2V0KG9iaikpIHtcbiAgICAgICAgdmFyIHNldFBhcnRzID0gW107XG4gICAgICAgIGlmIChzZXRGb3JFYWNoKSB7XG4gICAgICAgICAgICBzZXRGb3JFYWNoLmNhbGwob2JqLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBzZXRQYXJ0cy5wdXNoKGluc3BlY3QodmFsdWUsIG9iaikpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb25PZignU2V0Jywgc2V0U2l6ZS5jYWxsKG9iaiksIHNldFBhcnRzLCBpbmRlbnQpO1xuICAgIH1cbiAgICBpZiAoaXNXZWFrTWFwKG9iaikpIHtcbiAgICAgICAgcmV0dXJuIHdlYWtDb2xsZWN0aW9uT2YoJ1dlYWtNYXAnKTtcbiAgICB9XG4gICAgaWYgKGlzV2Vha1NldChvYmopKSB7XG4gICAgICAgIHJldHVybiB3ZWFrQ29sbGVjdGlvbk9mKCdXZWFrU2V0Jyk7XG4gICAgfVxuICAgIGlmIChpc1dlYWtSZWYob2JqKSkge1xuICAgICAgICByZXR1cm4gd2Vha0NvbGxlY3Rpb25PZignV2Vha1JlZicpO1xuICAgIH1cbiAgICBpZiAoaXNOdW1iZXIob2JqKSkge1xuICAgICAgICByZXR1cm4gbWFya0JveGVkKGluc3BlY3QoTnVtYmVyKG9iaikpKTtcbiAgICB9XG4gICAgaWYgKGlzQmlnSW50KG9iaikpIHtcbiAgICAgICAgcmV0dXJuIG1hcmtCb3hlZChpbnNwZWN0KGJpZ0ludFZhbHVlT2YuY2FsbChvYmopKSk7XG4gICAgfVxuICAgIGlmIChpc0Jvb2xlYW4ob2JqKSkge1xuICAgICAgICByZXR1cm4gbWFya0JveGVkKGJvb2xlYW5WYWx1ZU9mLmNhbGwob2JqKSk7XG4gICAgfVxuICAgIGlmIChpc1N0cmluZyhvYmopKSB7XG4gICAgICAgIHJldHVybiBtYXJrQm94ZWQoaW5zcGVjdChTdHJpbmcob2JqKSkpO1xuICAgIH1cbiAgICAvLyBub3RlOiBpbiBJRSA4LCBzb21ldGltZXMgYGdsb2JhbCAhPT0gd2luZG93YCBidXQgYm90aCBhcmUgdGhlIHByb3RvdHlwZXMgb2YgZWFjaCBvdGhlclxuICAgIC8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiBvYmogPT09IHdpbmRvdykge1xuICAgICAgICByZXR1cm4gJ3sgW29iamVjdCBXaW5kb3ddIH0nO1xuICAgIH1cbiAgICBpZiAoXG4gICAgICAgICh0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgJiYgb2JqID09PSBnbG9iYWxUaGlzKVxuICAgICAgICB8fCAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgJiYgb2JqID09PSBnbG9iYWwpXG4gICAgKSB7XG4gICAgICAgIHJldHVybiAneyBbb2JqZWN0IGdsb2JhbFRoaXNdIH0nO1xuICAgIH1cbiAgICBpZiAoIWlzRGF0ZShvYmopICYmICFpc1JlZ0V4cChvYmopKSB7XG4gICAgICAgIHZhciB5cyA9IGFyck9iaktleXMob2JqLCBpbnNwZWN0KTtcbiAgICAgICAgdmFyIGlzUGxhaW5PYmplY3QgPSBnUE8gPyBnUE8ob2JqKSA9PT0gT2JqZWN0LnByb3RvdHlwZSA6IG9iaiBpbnN0YW5jZW9mIE9iamVjdCB8fCBvYmouY29uc3RydWN0b3IgPT09IE9iamVjdDtcbiAgICAgICAgdmFyIHByb3RvVGFnID0gb2JqIGluc3RhbmNlb2YgT2JqZWN0ID8gJycgOiAnbnVsbCBwcm90b3R5cGUnO1xuICAgICAgICB2YXIgc3RyaW5nVGFnID0gIWlzUGxhaW5PYmplY3QgJiYgdG9TdHJpbmdUYWcgJiYgT2JqZWN0KG9iaikgPT09IG9iaiAmJiB0b1N0cmluZ1RhZyBpbiBvYmogPyAkc2xpY2UuY2FsbCh0b1N0cihvYmopLCA4LCAtMSkgOiBwcm90b1RhZyA/ICdPYmplY3QnIDogJyc7XG4gICAgICAgIHZhciBjb25zdHJ1Y3RvclRhZyA9IGlzUGxhaW5PYmplY3QgfHwgdHlwZW9mIG9iai5jb25zdHJ1Y3RvciAhPT0gJ2Z1bmN0aW9uJyA/ICcnIDogb2JqLmNvbnN0cnVjdG9yLm5hbWUgPyBvYmouY29uc3RydWN0b3IubmFtZSArICcgJyA6ICcnO1xuICAgICAgICB2YXIgdGFnID0gY29uc3RydWN0b3JUYWcgKyAoc3RyaW5nVGFnIHx8IHByb3RvVGFnID8gJ1snICsgJGpvaW4uY2FsbCgkY29uY2F0LmNhbGwoW10sIHN0cmluZ1RhZyB8fCBbXSwgcHJvdG9UYWcgfHwgW10pLCAnOiAnKSArICddICcgOiAnJyk7XG4gICAgICAgIGlmICh5cy5sZW5ndGggPT09IDApIHsgcmV0dXJuIHRhZyArICd7fSc7IH1cbiAgICAgICAgaWYgKGluZGVudCkge1xuICAgICAgICAgICAgcmV0dXJuIHRhZyArICd7JyArIGluZGVudGVkSm9pbih5cywgaW5kZW50KSArICd9JztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFnICsgJ3sgJyArICRqb2luLmNhbGwoeXMsICcsICcpICsgJyB9JztcbiAgICB9XG4gICAgcmV0dXJuIFN0cmluZyhvYmopO1xufTtcblxuZnVuY3Rpb24gd3JhcFF1b3RlcyhzLCBkZWZhdWx0U3R5bGUsIG9wdHMpIHtcbiAgICB2YXIgcXVvdGVDaGFyID0gKG9wdHMucXVvdGVTdHlsZSB8fCBkZWZhdWx0U3R5bGUpID09PSAnZG91YmxlJyA/ICdcIicgOiBcIidcIjtcbiAgICByZXR1cm4gcXVvdGVDaGFyICsgcyArIHF1b3RlQ2hhcjtcbn1cblxuZnVuY3Rpb24gcXVvdGUocykge1xuICAgIHJldHVybiAkcmVwbGFjZS5jYWxsKFN0cmluZyhzKSwgL1wiL2csICcmcXVvdDsnKTtcbn1cblxuZnVuY3Rpb24gaXNBcnJheShvYmopIHsgcmV0dXJuIHRvU3RyKG9iaikgPT09ICdbb2JqZWN0IEFycmF5XScgJiYgKCF0b1N0cmluZ1RhZyB8fCAhKHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIHRvU3RyaW5nVGFnIGluIG9iaikpOyB9XG5mdW5jdGlvbiBpc0RhdGUob2JqKSB7IHJldHVybiB0b1N0cihvYmopID09PSAnW29iamVjdCBEYXRlXScgJiYgKCF0b1N0cmluZ1RhZyB8fCAhKHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIHRvU3RyaW5nVGFnIGluIG9iaikpOyB9XG5mdW5jdGlvbiBpc1JlZ0V4cChvYmopIHsgcmV0dXJuIHRvU3RyKG9iaikgPT09ICdbb2JqZWN0IFJlZ0V4cF0nICYmICghdG9TdHJpbmdUYWcgfHwgISh0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiB0b1N0cmluZ1RhZyBpbiBvYmopKTsgfVxuZnVuY3Rpb24gaXNFcnJvcihvYmopIHsgcmV0dXJuIHRvU3RyKG9iaikgPT09ICdbb2JqZWN0IEVycm9yXScgJiYgKCF0b1N0cmluZ1RhZyB8fCAhKHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIHRvU3RyaW5nVGFnIGluIG9iaikpOyB9XG5mdW5jdGlvbiBpc1N0cmluZyhvYmopIHsgcmV0dXJuIHRvU3RyKG9iaikgPT09ICdbb2JqZWN0IFN0cmluZ10nICYmICghdG9TdHJpbmdUYWcgfHwgISh0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiB0b1N0cmluZ1RhZyBpbiBvYmopKTsgfVxuZnVuY3Rpb24gaXNOdW1iZXIob2JqKSB7IHJldHVybiB0b1N0cihvYmopID09PSAnW29iamVjdCBOdW1iZXJdJyAmJiAoIXRvU3RyaW5nVGFnIHx8ICEodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgdG9TdHJpbmdUYWcgaW4gb2JqKSk7IH1cbmZ1bmN0aW9uIGlzQm9vbGVhbihvYmopIHsgcmV0dXJuIHRvU3RyKG9iaikgPT09ICdbb2JqZWN0IEJvb2xlYW5dJyAmJiAoIXRvU3RyaW5nVGFnIHx8ICEodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgdG9TdHJpbmdUYWcgaW4gb2JqKSk7IH1cblxuLy8gU3ltYm9sIGFuZCBCaWdJbnQgZG8gaGF2ZSBTeW1ib2wudG9TdHJpbmdUYWcgYnkgc3BlYywgc28gdGhhdCBjYW4ndCBiZSB1c2VkIHRvIGVsaW1pbmF0ZSBmYWxzZSBwb3NpdGl2ZXNcbmZ1bmN0aW9uIGlzU3ltYm9sKG9iaikge1xuICAgIGlmIChoYXNTaGFtbWVkU3ltYm9scykge1xuICAgICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIG9iaiBpbnN0YW5jZW9mIFN5bWJvbDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICdzeW1ib2wnKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoIW9iaiB8fCB0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCAhc3ltVG9TdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBzeW1Ub1N0cmluZy5jYWxsKG9iaik7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0JpZ0ludChvYmopIHtcbiAgICBpZiAoIW9iaiB8fCB0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCAhYmlnSW50VmFsdWVPZikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGJpZ0ludFZhbHVlT2YuY2FsbChvYmopO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxudmFyIGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkgfHwgZnVuY3Rpb24gKGtleSkgeyByZXR1cm4ga2V5IGluIHRoaXM7IH07XG5mdW5jdGlvbiBoYXMob2JqLCBrZXkpIHtcbiAgICByZXR1cm4gaGFzT3duLmNhbGwob2JqLCBrZXkpO1xufVxuXG5mdW5jdGlvbiB0b1N0cihvYmopIHtcbiAgICByZXR1cm4gb2JqZWN0VG9TdHJpbmcuY2FsbChvYmopO1xufVxuXG5mdW5jdGlvbiBuYW1lT2YoZikge1xuICAgIGlmIChmLm5hbWUpIHsgcmV0dXJuIGYubmFtZTsgfVxuICAgIHZhciBtID0gJG1hdGNoLmNhbGwoZnVuY3Rpb25Ub1N0cmluZy5jYWxsKGYpLCAvXmZ1bmN0aW9uXFxzKihbXFx3JF0rKS8pO1xuICAgIGlmIChtKSB7IHJldHVybiBtWzFdOyB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGluZGV4T2YoeHMsIHgpIHtcbiAgICBpZiAoeHMuaW5kZXhPZikgeyByZXR1cm4geHMuaW5kZXhPZih4KTsgfVxuICAgIGZvciAodmFyIGkgPSAwLCBsID0geHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGlmICh4c1tpXSA9PT0geCkgeyByZXR1cm4gaTsgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG59XG5cbmZ1bmN0aW9uIGlzTWFwKHgpIHtcbiAgICBpZiAoIW1hcFNpemUgfHwgIXggfHwgdHlwZW9mIHggIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgbWFwU2l6ZS5jYWxsKHgpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgc2V0U2l6ZS5jYWxsKHgpO1xuICAgICAgICB9IGNhdGNoIChzKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geCBpbnN0YW5jZW9mIE1hcDsgLy8gY29yZS1qcyB3b3JrYXJvdW5kLCBwcmUtdjIuNS4wXG4gICAgfSBjYXRjaCAoZSkge31cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzV2Vha01hcCh4KSB7XG4gICAgaWYgKCF3ZWFrTWFwSGFzIHx8ICF4IHx8IHR5cGVvZiB4ICE9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIHdlYWtNYXBIYXMuY2FsbCh4LCB3ZWFrTWFwSGFzKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHdlYWtTZXRIYXMuY2FsbCh4LCB3ZWFrU2V0SGFzKTtcbiAgICAgICAgfSBjYXRjaCAocykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHggaW5zdGFuY2VvZiBXZWFrTWFwOyAvLyBjb3JlLWpzIHdvcmthcm91bmQsIHByZS12Mi41LjBcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNXZWFrUmVmKHgpIHtcbiAgICBpZiAoIXdlYWtSZWZEZXJlZiB8fCAheCB8fCB0eXBlb2YgeCAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICB3ZWFrUmVmRGVyZWYuY2FsbCh4KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzU2V0KHgpIHtcbiAgICBpZiAoIXNldFNpemUgfHwgIXggfHwgdHlwZW9mIHggIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgc2V0U2l6ZS5jYWxsKHgpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbWFwU2l6ZS5jYWxsKHgpO1xuICAgICAgICB9IGNhdGNoIChtKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geCBpbnN0YW5jZW9mIFNldDsgLy8gY29yZS1qcyB3b3JrYXJvdW5kLCBwcmUtdjIuNS4wXG4gICAgfSBjYXRjaCAoZSkge31cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzV2Vha1NldCh4KSB7XG4gICAgaWYgKCF3ZWFrU2V0SGFzIHx8ICF4IHx8IHR5cGVvZiB4ICE9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIHdlYWtTZXRIYXMuY2FsbCh4LCB3ZWFrU2V0SGFzKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHdlYWtNYXBIYXMuY2FsbCh4LCB3ZWFrTWFwSGFzKTtcbiAgICAgICAgfSBjYXRjaCAocykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHggaW5zdGFuY2VvZiBXZWFrU2V0OyAvLyBjb3JlLWpzIHdvcmthcm91bmQsIHByZS12Mi41LjBcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNFbGVtZW50KHgpIHtcbiAgICBpZiAoIXggfHwgdHlwZW9mIHggIT09ICdvYmplY3QnKSB7IHJldHVybiBmYWxzZTsgfVxuICAgIGlmICh0eXBlb2YgSFRNTEVsZW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHggaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHR5cGVvZiB4Lm5vZGVOYW1lID09PSAnc3RyaW5nJyAmJiB0eXBlb2YgeC5nZXRBdHRyaWJ1dGUgPT09ICdmdW5jdGlvbic7XG59XG5cbmZ1bmN0aW9uIGluc3BlY3RTdHJpbmcoc3RyLCBvcHRzKSB7XG4gICAgaWYgKHN0ci5sZW5ndGggPiBvcHRzLm1heFN0cmluZ0xlbmd0aCkge1xuICAgICAgICB2YXIgcmVtYWluaW5nID0gc3RyLmxlbmd0aCAtIG9wdHMubWF4U3RyaW5nTGVuZ3RoO1xuICAgICAgICB2YXIgdHJhaWxlciA9ICcuLi4gJyArIHJlbWFpbmluZyArICcgbW9yZSBjaGFyYWN0ZXInICsgKHJlbWFpbmluZyA+IDEgPyAncycgOiAnJyk7XG4gICAgICAgIHJldHVybiBpbnNwZWN0U3RyaW5nKCRzbGljZS5jYWxsKHN0ciwgMCwgb3B0cy5tYXhTdHJpbmdMZW5ndGgpLCBvcHRzKSArIHRyYWlsZXI7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250cm9sLXJlZ2V4XG4gICAgdmFyIHMgPSAkcmVwbGFjZS5jYWxsKCRyZXBsYWNlLmNhbGwoc3RyLCAvKFsnXFxcXF0pL2csICdcXFxcJDEnKSwgL1tcXHgwMC1cXHgxZl0vZywgbG93Ynl0ZSk7XG4gICAgcmV0dXJuIHdyYXBRdW90ZXMocywgJ3NpbmdsZScsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBsb3dieXRlKGMpIHtcbiAgICB2YXIgbiA9IGMuY2hhckNvZGVBdCgwKTtcbiAgICB2YXIgeCA9IHtcbiAgICAgICAgODogJ2InLFxuICAgICAgICA5OiAndCcsXG4gICAgICAgIDEwOiAnbicsXG4gICAgICAgIDEyOiAnZicsXG4gICAgICAgIDEzOiAncidcbiAgICB9W25dO1xuICAgIGlmICh4KSB7IHJldHVybiAnXFxcXCcgKyB4OyB9XG4gICAgcmV0dXJuICdcXFxceCcgKyAobiA8IDB4MTAgPyAnMCcgOiAnJykgKyAkdG9VcHBlckNhc2UuY2FsbChuLnRvU3RyaW5nKDE2KSk7XG59XG5cbmZ1bmN0aW9uIG1hcmtCb3hlZChzdHIpIHtcbiAgICByZXR1cm4gJ09iamVjdCgnICsgc3RyICsgJyknO1xufVxuXG5mdW5jdGlvbiB3ZWFrQ29sbGVjdGlvbk9mKHR5cGUpIHtcbiAgICByZXR1cm4gdHlwZSArICcgeyA/IH0nO1xufVxuXG5mdW5jdGlvbiBjb2xsZWN0aW9uT2YodHlwZSwgc2l6ZSwgZW50cmllcywgaW5kZW50KSB7XG4gICAgdmFyIGpvaW5lZEVudHJpZXMgPSBpbmRlbnQgPyBpbmRlbnRlZEpvaW4oZW50cmllcywgaW5kZW50KSA6ICRqb2luLmNhbGwoZW50cmllcywgJywgJyk7XG4gICAgcmV0dXJuIHR5cGUgKyAnICgnICsgc2l6ZSArICcpIHsnICsgam9pbmVkRW50cmllcyArICd9Jztcbn1cblxuZnVuY3Rpb24gc2luZ2xlTGluZVZhbHVlcyh4cykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgeHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGluZGV4T2YoeHNbaV0sICdcXG4nKSA+PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGdldEluZGVudChvcHRzLCBkZXB0aCkge1xuICAgIHZhciBiYXNlSW5kZW50O1xuICAgIGlmIChvcHRzLmluZGVudCA9PT0gJ1xcdCcpIHtcbiAgICAgICAgYmFzZUluZGVudCA9ICdcXHQnO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIG9wdHMuaW5kZW50ID09PSAnbnVtYmVyJyAmJiBvcHRzLmluZGVudCA+IDApIHtcbiAgICAgICAgYmFzZUluZGVudCA9ICRqb2luLmNhbGwoQXJyYXkob3B0cy5pbmRlbnQgKyAxKSwgJyAnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYmFzZTogYmFzZUluZGVudCxcbiAgICAgICAgcHJldjogJGpvaW4uY2FsbChBcnJheShkZXB0aCArIDEpLCBiYXNlSW5kZW50KVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGluZGVudGVkSm9pbih4cywgaW5kZW50KSB7XG4gICAgaWYgKHhzLmxlbmd0aCA9PT0gMCkgeyByZXR1cm4gJyc7IH1cbiAgICB2YXIgbGluZUpvaW5lciA9ICdcXG4nICsgaW5kZW50LnByZXYgKyBpbmRlbnQuYmFzZTtcbiAgICByZXR1cm4gbGluZUpvaW5lciArICRqb2luLmNhbGwoeHMsICcsJyArIGxpbmVKb2luZXIpICsgJ1xcbicgKyBpbmRlbnQucHJldjtcbn1cblxuZnVuY3Rpb24gYXJyT2JqS2V5cyhvYmosIGluc3BlY3QpIHtcbiAgICB2YXIgaXNBcnIgPSBpc0FycmF5KG9iaik7XG4gICAgdmFyIHhzID0gW107XG4gICAgaWYgKGlzQXJyKSB7XG4gICAgICAgIHhzLmxlbmd0aCA9IG9iai5sZW5ndGg7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB4c1tpXSA9IGhhcyhvYmosIGkpID8gaW5zcGVjdChvYmpbaV0sIG9iaikgOiAnJztcbiAgICAgICAgfVxuICAgIH1cbiAgICB2YXIgc3ltcyA9IHR5cGVvZiBnT1BTID09PSAnZnVuY3Rpb24nID8gZ09QUyhvYmopIDogW107XG4gICAgdmFyIHN5bU1hcDtcbiAgICBpZiAoaGFzU2hhbW1lZFN5bWJvbHMpIHtcbiAgICAgICAgc3ltTWFwID0ge307XG4gICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgc3ltcy5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgc3ltTWFwWyckJyArIHN5bXNba11dID0gc3ltc1trXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgICBpZiAoIWhhcyhvYmosIGtleSkpIHsgY29udGludWU7IH0gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheCwgbm8tY29udGludWVcbiAgICAgICAgaWYgKGlzQXJyICYmIFN0cmluZyhOdW1iZXIoa2V5KSkgPT09IGtleSAmJiBrZXkgPCBvYmoubGVuZ3RoKSB7IGNvbnRpbnVlOyB9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXgsIG5vLWNvbnRpbnVlXG4gICAgICAgIGlmIChoYXNTaGFtbWVkU3ltYm9scyAmJiBzeW1NYXBbJyQnICsga2V5XSBpbnN0YW5jZW9mIFN5bWJvbCkge1xuICAgICAgICAgICAgLy8gdGhpcyBpcyB0byBwcmV2ZW50IHNoYW1tZWQgU3ltYm9scywgd2hpY2ggYXJlIHN0b3JlZCBhcyBzdHJpbmdzLCBmcm9tIGJlaW5nIGluY2x1ZGVkIGluIHRoZSBzdHJpbmcga2V5IHNlY3Rpb25cbiAgICAgICAgICAgIGNvbnRpbnVlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4LCBuby1jb250aW51ZVxuICAgICAgICB9IGVsc2UgaWYgKCR0ZXN0LmNhbGwoL1teXFx3JF0vLCBrZXkpKSB7XG4gICAgICAgICAgICB4cy5wdXNoKGluc3BlY3Qoa2V5LCBvYmopICsgJzogJyArIGluc3BlY3Qob2JqW2tleV0sIG9iaikpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgeHMucHVzaChrZXkgKyAnOiAnICsgaW5zcGVjdChvYmpba2V5XSwgb2JqKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHR5cGVvZiBnT1BTID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc3ltcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgaWYgKGlzRW51bWVyYWJsZS5jYWxsKG9iaiwgc3ltc1tqXSkpIHtcbiAgICAgICAgICAgICAgICB4cy5wdXNoKCdbJyArIGluc3BlY3Qoc3ltc1tqXSkgKyAnXTogJyArIGluc3BlY3Qob2JqW3N5bXNbal1dLCBvYmopKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4geHM7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciByZXBsYWNlID0gU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlO1xudmFyIHBlcmNlbnRUd2VudGllcyA9IC8lMjAvZztcblxudmFyIEZvcm1hdCA9IHtcbiAgICBSRkMxNzM4OiAnUkZDMTczOCcsXG4gICAgUkZDMzk4NjogJ1JGQzM5ODYnXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAnZGVmYXVsdCc6IEZvcm1hdC5SRkMzOTg2LFxuICAgIGZvcm1hdHRlcnM6IHtcbiAgICAgICAgUkZDMTczODogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVwbGFjZS5jYWxsKHZhbHVlLCBwZXJjZW50VHdlbnRpZXMsICcrJyk7XG4gICAgICAgIH0sXG4gICAgICAgIFJGQzM5ODY6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIFN0cmluZyh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIFJGQzE3Mzg6IEZvcm1hdC5SRkMxNzM4LFxuICAgIFJGQzM5ODY6IEZvcm1hdC5SRkMzOTg2XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgc3RyaW5naWZ5ID0gcmVxdWlyZSgnLi9zdHJpbmdpZnknKTtcbnZhciBwYXJzZSA9IHJlcXVpcmUoJy4vcGFyc2UnKTtcbnZhciBmb3JtYXRzID0gcmVxdWlyZSgnLi9mb3JtYXRzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGZvcm1hdHM6IGZvcm1hdHMsXG4gICAgcGFyc2U6IHBhcnNlLFxuICAgIHN0cmluZ2lmeTogc3RyaW5naWZ5XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbnZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG52YXIgZGVmYXVsdHMgPSB7XG4gICAgYWxsb3dEb3RzOiBmYWxzZSxcbiAgICBhbGxvd0VtcHR5QXJyYXlzOiBmYWxzZSxcbiAgICBhbGxvd1Byb3RvdHlwZXM6IGZhbHNlLFxuICAgIGFsbG93U3BhcnNlOiBmYWxzZSxcbiAgICBhcnJheUxpbWl0OiAyMCxcbiAgICBjaGFyc2V0OiAndXRmLTgnLFxuICAgIGNoYXJzZXRTZW50aW5lbDogZmFsc2UsXG4gICAgY29tbWE6IGZhbHNlLFxuICAgIGRlY29kZURvdEluS2V5czogZmFsc2UsXG4gICAgZGVjb2RlcjogdXRpbHMuZGVjb2RlLFxuICAgIGRlbGltaXRlcjogJyYnLFxuICAgIGRlcHRoOiA1LFxuICAgIGR1cGxpY2F0ZXM6ICdjb21iaW5lJyxcbiAgICBpZ25vcmVRdWVyeVByZWZpeDogZmFsc2UsXG4gICAgaW50ZXJwcmV0TnVtZXJpY0VudGl0aWVzOiBmYWxzZSxcbiAgICBwYXJhbWV0ZXJMaW1pdDogMTAwMCxcbiAgICBwYXJzZUFycmF5czogdHJ1ZSxcbiAgICBwbGFpbk9iamVjdHM6IGZhbHNlLFxuICAgIHN0cmljdERlcHRoOiBmYWxzZSxcbiAgICBzdHJpY3ROdWxsSGFuZGxpbmc6IGZhbHNlXG59O1xuXG52YXIgaW50ZXJwcmV0TnVtZXJpY0VudGl0aWVzID0gZnVuY3Rpb24gKHN0cikge1xuICAgIHJldHVybiBzdHIucmVwbGFjZSgvJiMoXFxkKyk7L2csIGZ1bmN0aW9uICgkMCwgbnVtYmVyU3RyKSB7XG4gICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KG51bWJlclN0ciwgMTApKTtcbiAgICB9KTtcbn07XG5cbnZhciBwYXJzZUFycmF5VmFsdWUgPSBmdW5jdGlvbiAodmFsLCBvcHRpb25zKSB7XG4gICAgaWYgKHZhbCAmJiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJyAmJiBvcHRpb25zLmNvbW1hICYmIHZhbC5pbmRleE9mKCcsJykgPiAtMSkge1xuICAgICAgICByZXR1cm4gdmFsLnNwbGl0KCcsJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbDtcbn07XG5cbi8vIFRoaXMgaXMgd2hhdCBicm93c2VycyB3aWxsIHN1Ym1pdCB3aGVuIHRoZSDinJMgY2hhcmFjdGVyIG9jY3VycyBpbiBhblxuLy8gYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkIGJvZHkgYW5kIHRoZSBlbmNvZGluZyBvZiB0aGUgcGFnZSBjb250YWluaW5nXG4vLyB0aGUgZm9ybSBpcyBpc28tODg1OS0xLCBvciB3aGVuIHRoZSBzdWJtaXR0ZWQgZm9ybSBoYXMgYW4gYWNjZXB0LWNoYXJzZXRcbi8vIGF0dHJpYnV0ZSBvZiBpc28tODg1OS0xLiBQcmVzdW1hYmx5IGFsc28gd2l0aCBvdGhlciBjaGFyc2V0cyB0aGF0IGRvIG5vdCBjb250YWluXG4vLyB0aGUg4pyTIGNoYXJhY3Rlciwgc3VjaCBhcyB1cy1hc2NpaS5cbnZhciBpc29TZW50aW5lbCA9ICd1dGY4PSUyNiUyMzEwMDAzJTNCJzsgLy8gZW5jb2RlVVJJQ29tcG9uZW50KCcmIzEwMDAzOycpXG5cbi8vIFRoZXNlIGFyZSB0aGUgcGVyY2VudC1lbmNvZGVkIHV0Zi04IG9jdGV0cyByZXByZXNlbnRpbmcgYSBjaGVja21hcmssIGluZGljYXRpbmcgdGhhdCB0aGUgcmVxdWVzdCBhY3R1YWxseSBpcyB1dGYtOCBlbmNvZGVkLlxudmFyIGNoYXJzZXRTZW50aW5lbCA9ICd1dGY4PSVFMiU5QyU5Myc7IC8vIGVuY29kZVVSSUNvbXBvbmVudCgn4pyTJylcblxudmFyIHBhcnNlVmFsdWVzID0gZnVuY3Rpb24gcGFyc2VRdWVyeVN0cmluZ1ZhbHVlcyhzdHIsIG9wdGlvbnMpIHtcbiAgICB2YXIgb2JqID0geyBfX3Byb3RvX186IG51bGwgfTtcblxuICAgIHZhciBjbGVhblN0ciA9IG9wdGlvbnMuaWdub3JlUXVlcnlQcmVmaXggPyBzdHIucmVwbGFjZSgvXlxcPy8sICcnKSA6IHN0cjtcbiAgICBjbGVhblN0ciA9IGNsZWFuU3RyLnJlcGxhY2UoLyU1Qi9naSwgJ1snKS5yZXBsYWNlKC8lNUQvZ2ksICddJyk7XG4gICAgdmFyIGxpbWl0ID0gb3B0aW9ucy5wYXJhbWV0ZXJMaW1pdCA9PT0gSW5maW5pdHkgPyB1bmRlZmluZWQgOiBvcHRpb25zLnBhcmFtZXRlckxpbWl0O1xuICAgIHZhciBwYXJ0cyA9IGNsZWFuU3RyLnNwbGl0KG9wdGlvbnMuZGVsaW1pdGVyLCBsaW1pdCk7XG4gICAgdmFyIHNraXBJbmRleCA9IC0xOyAvLyBLZWVwIHRyYWNrIG9mIHdoZXJlIHRoZSB1dGY4IHNlbnRpbmVsIHdhcyBmb3VuZFxuICAgIHZhciBpO1xuXG4gICAgdmFyIGNoYXJzZXQgPSBvcHRpb25zLmNoYXJzZXQ7XG4gICAgaWYgKG9wdGlvbnMuY2hhcnNldFNlbnRpbmVsKSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgaWYgKHBhcnRzW2ldLmluZGV4T2YoJ3V0Zjg9JykgPT09IDApIHtcbiAgICAgICAgICAgICAgICBpZiAocGFydHNbaV0gPT09IGNoYXJzZXRTZW50aW5lbCkge1xuICAgICAgICAgICAgICAgICAgICBjaGFyc2V0ID0gJ3V0Zi04JztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHBhcnRzW2ldID09PSBpc29TZW50aW5lbCkge1xuICAgICAgICAgICAgICAgICAgICBjaGFyc2V0ID0gJ2lzby04ODU5LTEnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBza2lwSW5kZXggPSBpO1xuICAgICAgICAgICAgICAgIGkgPSBwYXJ0cy5sZW5ndGg7IC8vIFRoZSBlc2xpbnQgc2V0dGluZ3MgZG8gbm90IGFsbG93IGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmIChpID09PSBza2lwSW5kZXgpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwYXJ0ID0gcGFydHNbaV07XG5cbiAgICAgICAgdmFyIGJyYWNrZXRFcXVhbHNQb3MgPSBwYXJ0LmluZGV4T2YoJ109Jyk7XG4gICAgICAgIHZhciBwb3MgPSBicmFja2V0RXF1YWxzUG9zID09PSAtMSA/IHBhcnQuaW5kZXhPZignPScpIDogYnJhY2tldEVxdWFsc1BvcyArIDE7XG5cbiAgICAgICAgdmFyIGtleSwgdmFsO1xuICAgICAgICBpZiAocG9zID09PSAtMSkge1xuICAgICAgICAgICAga2V5ID0gb3B0aW9ucy5kZWNvZGVyKHBhcnQsIGRlZmF1bHRzLmRlY29kZXIsIGNoYXJzZXQsICdrZXknKTtcbiAgICAgICAgICAgIHZhbCA9IG9wdGlvbnMuc3RyaWN0TnVsbEhhbmRsaW5nID8gbnVsbCA6ICcnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAga2V5ID0gb3B0aW9ucy5kZWNvZGVyKHBhcnQuc2xpY2UoMCwgcG9zKSwgZGVmYXVsdHMuZGVjb2RlciwgY2hhcnNldCwgJ2tleScpO1xuICAgICAgICAgICAgdmFsID0gdXRpbHMubWF5YmVNYXAoXG4gICAgICAgICAgICAgICAgcGFyc2VBcnJheVZhbHVlKHBhcnQuc2xpY2UocG9zICsgMSksIG9wdGlvbnMpLFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChlbmNvZGVkVmFsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25zLmRlY29kZXIoZW5jb2RlZFZhbCwgZGVmYXVsdHMuZGVjb2RlciwgY2hhcnNldCwgJ3ZhbHVlJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWwgJiYgb3B0aW9ucy5pbnRlcnByZXROdW1lcmljRW50aXRpZXMgJiYgY2hhcnNldCA9PT0gJ2lzby04ODU5LTEnKSB7XG4gICAgICAgICAgICB2YWwgPSBpbnRlcnByZXROdW1lcmljRW50aXRpZXModmFsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYXJ0LmluZGV4T2YoJ1tdPScpID4gLTEpIHtcbiAgICAgICAgICAgIHZhbCA9IGlzQXJyYXkodmFsKSA/IFt2YWxdIDogdmFsO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGV4aXN0aW5nID0gaGFzLmNhbGwob2JqLCBrZXkpO1xuICAgICAgICBpZiAoZXhpc3RpbmcgJiYgb3B0aW9ucy5kdXBsaWNhdGVzID09PSAnY29tYmluZScpIHtcbiAgICAgICAgICAgIG9ialtrZXldID0gdXRpbHMuY29tYmluZShvYmpba2V5XSwgdmFsKTtcbiAgICAgICAgfSBlbHNlIGlmICghZXhpc3RpbmcgfHwgb3B0aW9ucy5kdXBsaWNhdGVzID09PSAnbGFzdCcpIHtcbiAgICAgICAgICAgIG9ialtrZXldID0gdmFsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iajtcbn07XG5cbnZhciBwYXJzZU9iamVjdCA9IGZ1bmN0aW9uIChjaGFpbiwgdmFsLCBvcHRpb25zLCB2YWx1ZXNQYXJzZWQpIHtcbiAgICB2YXIgbGVhZiA9IHZhbHVlc1BhcnNlZCA/IHZhbCA6IHBhcnNlQXJyYXlWYWx1ZSh2YWwsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgaSA9IGNoYWluLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBvYmo7XG4gICAgICAgIHZhciByb290ID0gY2hhaW5baV07XG5cbiAgICAgICAgaWYgKHJvb3QgPT09ICdbXScgJiYgb3B0aW9ucy5wYXJzZUFycmF5cykge1xuICAgICAgICAgICAgb2JqID0gb3B0aW9ucy5hbGxvd0VtcHR5QXJyYXlzICYmIChsZWFmID09PSAnJyB8fCAob3B0aW9ucy5zdHJpY3ROdWxsSGFuZGxpbmcgJiYgbGVhZiA9PT0gbnVsbCkpXG4gICAgICAgICAgICAgICAgPyBbXVxuICAgICAgICAgICAgICAgIDogW10uY29uY2F0KGxlYWYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb2JqID0gb3B0aW9ucy5wbGFpbk9iamVjdHMgPyBPYmplY3QuY3JlYXRlKG51bGwpIDoge307XG4gICAgICAgICAgICB2YXIgY2xlYW5Sb290ID0gcm9vdC5jaGFyQXQoMCkgPT09ICdbJyAmJiByb290LmNoYXJBdChyb290Lmxlbmd0aCAtIDEpID09PSAnXScgPyByb290LnNsaWNlKDEsIC0xKSA6IHJvb3Q7XG4gICAgICAgICAgICB2YXIgZGVjb2RlZFJvb3QgPSBvcHRpb25zLmRlY29kZURvdEluS2V5cyA/IGNsZWFuUm9vdC5yZXBsYWNlKC8lMkUvZywgJy4nKSA6IGNsZWFuUm9vdDtcbiAgICAgICAgICAgIHZhciBpbmRleCA9IHBhcnNlSW50KGRlY29kZWRSb290LCAxMCk7XG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMucGFyc2VBcnJheXMgJiYgZGVjb2RlZFJvb3QgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgb2JqID0geyAwOiBsZWFmIH07XG4gICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgICFpc05hTihpbmRleClcbiAgICAgICAgICAgICAgICAmJiByb290ICE9PSBkZWNvZGVkUm9vdFxuICAgICAgICAgICAgICAgICYmIFN0cmluZyhpbmRleCkgPT09IGRlY29kZWRSb290XG4gICAgICAgICAgICAgICAgJiYgaW5kZXggPj0gMFxuICAgICAgICAgICAgICAgICYmIChvcHRpb25zLnBhcnNlQXJyYXlzICYmIGluZGV4IDw9IG9wdGlvbnMuYXJyYXlMaW1pdClcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIG9iaiA9IFtdO1xuICAgICAgICAgICAgICAgIG9ialtpbmRleF0gPSBsZWFmO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChkZWNvZGVkUm9vdCAhPT0gJ19fcHJvdG9fXycpIHtcbiAgICAgICAgICAgICAgICBvYmpbZGVjb2RlZFJvb3RdID0gbGVhZjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxlYWYgPSBvYmo7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxlYWY7XG59O1xuXG52YXIgcGFyc2VLZXlzID0gZnVuY3Rpb24gcGFyc2VRdWVyeVN0cmluZ0tleXMoZ2l2ZW5LZXksIHZhbCwgb3B0aW9ucywgdmFsdWVzUGFyc2VkKSB7XG4gICAgaWYgKCFnaXZlbktleSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gVHJhbnNmb3JtIGRvdCBub3RhdGlvbiB0byBicmFja2V0IG5vdGF0aW9uXG4gICAgdmFyIGtleSA9IG9wdGlvbnMuYWxsb3dEb3RzID8gZ2l2ZW5LZXkucmVwbGFjZSgvXFwuKFteLltdKykvZywgJ1skMV0nKSA6IGdpdmVuS2V5O1xuXG4gICAgLy8gVGhlIHJlZ2V4IGNodW5rc1xuXG4gICAgdmFyIGJyYWNrZXRzID0gLyhcXFtbXltcXF1dKl0pLztcbiAgICB2YXIgY2hpbGQgPSAvKFxcW1teW1xcXV0qXSkvZztcblxuICAgIC8vIEdldCB0aGUgcGFyZW50XG5cbiAgICB2YXIgc2VnbWVudCA9IG9wdGlvbnMuZGVwdGggPiAwICYmIGJyYWNrZXRzLmV4ZWMoa2V5KTtcbiAgICB2YXIgcGFyZW50ID0gc2VnbWVudCA/IGtleS5zbGljZSgwLCBzZWdtZW50LmluZGV4KSA6IGtleTtcblxuICAgIC8vIFN0YXNoIHRoZSBwYXJlbnQgaWYgaXQgZXhpc3RzXG5cbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgLy8gSWYgd2UgYXJlbid0IHVzaW5nIHBsYWluIG9iamVjdHMsIG9wdGlvbmFsbHkgcHJlZml4IGtleXMgdGhhdCB3b3VsZCBvdmVyd3JpdGUgb2JqZWN0IHByb3RvdHlwZSBwcm9wZXJ0aWVzXG4gICAgICAgIGlmICghb3B0aW9ucy5wbGFpbk9iamVjdHMgJiYgaGFzLmNhbGwoT2JqZWN0LnByb3RvdHlwZSwgcGFyZW50KSkge1xuICAgICAgICAgICAgaWYgKCFvcHRpb25zLmFsbG93UHJvdG90eXBlcykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGtleXMucHVzaChwYXJlbnQpO1xuICAgIH1cblxuICAgIC8vIExvb3AgdGhyb3VnaCBjaGlsZHJlbiBhcHBlbmRpbmcgdG8gdGhlIGFycmF5IHVudGlsIHdlIGhpdCBkZXB0aFxuXG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChvcHRpb25zLmRlcHRoID4gMCAmJiAoc2VnbWVudCA9IGNoaWxkLmV4ZWMoa2V5KSkgIT09IG51bGwgJiYgaSA8IG9wdGlvbnMuZGVwdGgpIHtcbiAgICAgICAgaSArPSAxO1xuICAgICAgICBpZiAoIW9wdGlvbnMucGxhaW5PYmplY3RzICYmIGhhcy5jYWxsKE9iamVjdC5wcm90b3R5cGUsIHNlZ21lbnRbMV0uc2xpY2UoMSwgLTEpKSkge1xuICAgICAgICAgICAgaWYgKCFvcHRpb25zLmFsbG93UHJvdG90eXBlcykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBrZXlzLnB1c2goc2VnbWVudFsxXSk7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlcmUncyBhIHJlbWFpbmRlciwgY2hlY2sgc3RyaWN0RGVwdGggb3B0aW9uIGZvciB0aHJvdywgZWxzZSBqdXN0IGFkZCB3aGF0ZXZlciBpcyBsZWZ0XG5cbiAgICBpZiAoc2VnbWVudCkge1xuICAgICAgICBpZiAob3B0aW9ucy5zdHJpY3REZXB0aCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0lucHV0IGRlcHRoIGV4Y2VlZGVkIGRlcHRoIG9wdGlvbiBvZiAnICsgb3B0aW9ucy5kZXB0aCArICcgYW5kIHN0cmljdERlcHRoIGlzIHRydWUnKTtcbiAgICAgICAgfVxuICAgICAgICBrZXlzLnB1c2goJ1snICsga2V5LnNsaWNlKHNlZ21lbnQuaW5kZXgpICsgJ10nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGFyc2VPYmplY3Qoa2V5cywgdmFsLCBvcHRpb25zLCB2YWx1ZXNQYXJzZWQpO1xufTtcblxudmFyIG5vcm1hbGl6ZVBhcnNlT3B0aW9ucyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZVBhcnNlT3B0aW9ucyhvcHRzKSB7XG4gICAgaWYgKCFvcHRzKSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0cztcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9wdHMuYWxsb3dFbXB0eUFycmF5cyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG9wdHMuYWxsb3dFbXB0eUFycmF5cyAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2BhbGxvd0VtcHR5QXJyYXlzYCBvcHRpb24gY2FuIG9ubHkgYmUgYHRydWVgIG9yIGBmYWxzZWAsIHdoZW4gcHJvdmlkZWQnKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9wdHMuZGVjb2RlRG90SW5LZXlzICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygb3B0cy5kZWNvZGVEb3RJbktleXMgIT09ICdib29sZWFuJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdgZGVjb2RlRG90SW5LZXlzYCBvcHRpb24gY2FuIG9ubHkgYmUgYHRydWVgIG9yIGBmYWxzZWAsIHdoZW4gcHJvdmlkZWQnKTtcbiAgICB9XG5cbiAgICBpZiAob3B0cy5kZWNvZGVyICE9PSBudWxsICYmIHR5cGVvZiBvcHRzLmRlY29kZXIgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBvcHRzLmRlY29kZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRGVjb2RlciBoYXMgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9wdHMuY2hhcnNldCAhPT0gJ3VuZGVmaW5lZCcgJiYgb3B0cy5jaGFyc2V0ICE9PSAndXRmLTgnICYmIG9wdHMuY2hhcnNldCAhPT0gJ2lzby04ODU5LTEnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBjaGFyc2V0IG9wdGlvbiBtdXN0IGJlIGVpdGhlciB1dGYtOCwgaXNvLTg4NTktMSwgb3IgdW5kZWZpbmVkJyk7XG4gICAgfVxuICAgIHZhciBjaGFyc2V0ID0gdHlwZW9mIG9wdHMuY2hhcnNldCA9PT0gJ3VuZGVmaW5lZCcgPyBkZWZhdWx0cy5jaGFyc2V0IDogb3B0cy5jaGFyc2V0O1xuXG4gICAgdmFyIGR1cGxpY2F0ZXMgPSB0eXBlb2Ygb3B0cy5kdXBsaWNhdGVzID09PSAndW5kZWZpbmVkJyA/IGRlZmF1bHRzLmR1cGxpY2F0ZXMgOiBvcHRzLmR1cGxpY2F0ZXM7XG5cbiAgICBpZiAoZHVwbGljYXRlcyAhPT0gJ2NvbWJpbmUnICYmIGR1cGxpY2F0ZXMgIT09ICdmaXJzdCcgJiYgZHVwbGljYXRlcyAhPT0gJ2xhc3QnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBkdXBsaWNhdGVzIG9wdGlvbiBtdXN0IGJlIGVpdGhlciBjb21iaW5lLCBmaXJzdCwgb3IgbGFzdCcpO1xuICAgIH1cblxuICAgIHZhciBhbGxvd0RvdHMgPSB0eXBlb2Ygb3B0cy5hbGxvd0RvdHMgPT09ICd1bmRlZmluZWQnID8gb3B0cy5kZWNvZGVEb3RJbktleXMgPT09IHRydWUgPyB0cnVlIDogZGVmYXVsdHMuYWxsb3dEb3RzIDogISFvcHRzLmFsbG93RG90cztcblxuICAgIHJldHVybiB7XG4gICAgICAgIGFsbG93RG90czogYWxsb3dEb3RzLFxuICAgICAgICBhbGxvd0VtcHR5QXJyYXlzOiB0eXBlb2Ygb3B0cy5hbGxvd0VtcHR5QXJyYXlzID09PSAnYm9vbGVhbicgPyAhIW9wdHMuYWxsb3dFbXB0eUFycmF5cyA6IGRlZmF1bHRzLmFsbG93RW1wdHlBcnJheXMsXG4gICAgICAgIGFsbG93UHJvdG90eXBlczogdHlwZW9mIG9wdHMuYWxsb3dQcm90b3R5cGVzID09PSAnYm9vbGVhbicgPyBvcHRzLmFsbG93UHJvdG90eXBlcyA6IGRlZmF1bHRzLmFsbG93UHJvdG90eXBlcyxcbiAgICAgICAgYWxsb3dTcGFyc2U6IHR5cGVvZiBvcHRzLmFsbG93U3BhcnNlID09PSAnYm9vbGVhbicgPyBvcHRzLmFsbG93U3BhcnNlIDogZGVmYXVsdHMuYWxsb3dTcGFyc2UsXG4gICAgICAgIGFycmF5TGltaXQ6IHR5cGVvZiBvcHRzLmFycmF5TGltaXQgPT09ICdudW1iZXInID8gb3B0cy5hcnJheUxpbWl0IDogZGVmYXVsdHMuYXJyYXlMaW1pdCxcbiAgICAgICAgY2hhcnNldDogY2hhcnNldCxcbiAgICAgICAgY2hhcnNldFNlbnRpbmVsOiB0eXBlb2Ygb3B0cy5jaGFyc2V0U2VudGluZWwgPT09ICdib29sZWFuJyA/IG9wdHMuY2hhcnNldFNlbnRpbmVsIDogZGVmYXVsdHMuY2hhcnNldFNlbnRpbmVsLFxuICAgICAgICBjb21tYTogdHlwZW9mIG9wdHMuY29tbWEgPT09ICdib29sZWFuJyA/IG9wdHMuY29tbWEgOiBkZWZhdWx0cy5jb21tYSxcbiAgICAgICAgZGVjb2RlRG90SW5LZXlzOiB0eXBlb2Ygb3B0cy5kZWNvZGVEb3RJbktleXMgPT09ICdib29sZWFuJyA/IG9wdHMuZGVjb2RlRG90SW5LZXlzIDogZGVmYXVsdHMuZGVjb2RlRG90SW5LZXlzLFxuICAgICAgICBkZWNvZGVyOiB0eXBlb2Ygb3B0cy5kZWNvZGVyID09PSAnZnVuY3Rpb24nID8gb3B0cy5kZWNvZGVyIDogZGVmYXVsdHMuZGVjb2RlcixcbiAgICAgICAgZGVsaW1pdGVyOiB0eXBlb2Ygb3B0cy5kZWxpbWl0ZXIgPT09ICdzdHJpbmcnIHx8IHV0aWxzLmlzUmVnRXhwKG9wdHMuZGVsaW1pdGVyKSA/IG9wdHMuZGVsaW1pdGVyIDogZGVmYXVsdHMuZGVsaW1pdGVyLFxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8taW1wbGljaXQtY29lcmNpb24sIG5vLWV4dHJhLXBhcmVuc1xuICAgICAgICBkZXB0aDogKHR5cGVvZiBvcHRzLmRlcHRoID09PSAnbnVtYmVyJyB8fCBvcHRzLmRlcHRoID09PSBmYWxzZSkgPyArb3B0cy5kZXB0aCA6IGRlZmF1bHRzLmRlcHRoLFxuICAgICAgICBkdXBsaWNhdGVzOiBkdXBsaWNhdGVzLFxuICAgICAgICBpZ25vcmVRdWVyeVByZWZpeDogb3B0cy5pZ25vcmVRdWVyeVByZWZpeCA9PT0gdHJ1ZSxcbiAgICAgICAgaW50ZXJwcmV0TnVtZXJpY0VudGl0aWVzOiB0eXBlb2Ygb3B0cy5pbnRlcnByZXROdW1lcmljRW50aXRpZXMgPT09ICdib29sZWFuJyA/IG9wdHMuaW50ZXJwcmV0TnVtZXJpY0VudGl0aWVzIDogZGVmYXVsdHMuaW50ZXJwcmV0TnVtZXJpY0VudGl0aWVzLFxuICAgICAgICBwYXJhbWV0ZXJMaW1pdDogdHlwZW9mIG9wdHMucGFyYW1ldGVyTGltaXQgPT09ICdudW1iZXInID8gb3B0cy5wYXJhbWV0ZXJMaW1pdCA6IGRlZmF1bHRzLnBhcmFtZXRlckxpbWl0LFxuICAgICAgICBwYXJzZUFycmF5czogb3B0cy5wYXJzZUFycmF5cyAhPT0gZmFsc2UsXG4gICAgICAgIHBsYWluT2JqZWN0czogdHlwZW9mIG9wdHMucGxhaW5PYmplY3RzID09PSAnYm9vbGVhbicgPyBvcHRzLnBsYWluT2JqZWN0cyA6IGRlZmF1bHRzLnBsYWluT2JqZWN0cyxcbiAgICAgICAgc3RyaWN0RGVwdGg6IHR5cGVvZiBvcHRzLnN0cmljdERlcHRoID09PSAnYm9vbGVhbicgPyAhIW9wdHMuc3RyaWN0RGVwdGggOiBkZWZhdWx0cy5zdHJpY3REZXB0aCxcbiAgICAgICAgc3RyaWN0TnVsbEhhbmRsaW5nOiB0eXBlb2Ygb3B0cy5zdHJpY3ROdWxsSGFuZGxpbmcgPT09ICdib29sZWFuJyA/IG9wdHMuc3RyaWN0TnVsbEhhbmRsaW5nIDogZGVmYXVsdHMuc3RyaWN0TnVsbEhhbmRsaW5nXG4gICAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHN0ciwgb3B0cykge1xuICAgIHZhciBvcHRpb25zID0gbm9ybWFsaXplUGFyc2VPcHRpb25zKG9wdHMpO1xuXG4gICAgaWYgKHN0ciA9PT0gJycgfHwgc3RyID09PSBudWxsIHx8IHR5cGVvZiBzdHIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBvcHRpb25zLnBsYWluT2JqZWN0cyA/IE9iamVjdC5jcmVhdGUobnVsbCkgOiB7fTtcbiAgICB9XG5cbiAgICB2YXIgdGVtcE9iaiA9IHR5cGVvZiBzdHIgPT09ICdzdHJpbmcnID8gcGFyc2VWYWx1ZXMoc3RyLCBvcHRpb25zKSA6IHN0cjtcbiAgICB2YXIgb2JqID0gb3B0aW9ucy5wbGFpbk9iamVjdHMgPyBPYmplY3QuY3JlYXRlKG51bGwpIDoge307XG5cbiAgICAvLyBJdGVyYXRlIG92ZXIgdGhlIGtleXMgYW5kIHNldHVwIHRoZSBuZXcgb2JqZWN0XG5cbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHRlbXBPYmopO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgdmFyIG5ld09iaiA9IHBhcnNlS2V5cyhrZXksIHRlbXBPYmpba2V5XSwgb3B0aW9ucywgdHlwZW9mIHN0ciA9PT0gJ3N0cmluZycpO1xuICAgICAgICBvYmogPSB1dGlscy5tZXJnZShvYmosIG5ld09iaiwgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuYWxsb3dTcGFyc2UgPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG5cbiAgICByZXR1cm4gdXRpbHMuY29tcGFjdChvYmopO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGdldFNpZGVDaGFubmVsID0gcmVxdWlyZSgnc2lkZS1jaGFubmVsJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgZm9ybWF0cyA9IHJlcXVpcmUoJy4vZm9ybWF0cycpO1xudmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbnZhciBhcnJheVByZWZpeEdlbmVyYXRvcnMgPSB7XG4gICAgYnJhY2tldHM6IGZ1bmN0aW9uIGJyYWNrZXRzKHByZWZpeCkge1xuICAgICAgICByZXR1cm4gcHJlZml4ICsgJ1tdJztcbiAgICB9LFxuICAgIGNvbW1hOiAnY29tbWEnLFxuICAgIGluZGljZXM6IGZ1bmN0aW9uIGluZGljZXMocHJlZml4LCBrZXkpIHtcbiAgICAgICAgcmV0dXJuIHByZWZpeCArICdbJyArIGtleSArICddJztcbiAgICB9LFxuICAgIHJlcGVhdDogZnVuY3Rpb24gcmVwZWF0KHByZWZpeCkge1xuICAgICAgICByZXR1cm4gcHJlZml4O1xuICAgIH1cbn07XG5cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbnZhciBwdXNoID0gQXJyYXkucHJvdG90eXBlLnB1c2g7XG52YXIgcHVzaFRvQXJyYXkgPSBmdW5jdGlvbiAoYXJyLCB2YWx1ZU9yQXJyYXkpIHtcbiAgICBwdXNoLmFwcGx5KGFyciwgaXNBcnJheSh2YWx1ZU9yQXJyYXkpID8gdmFsdWVPckFycmF5IDogW3ZhbHVlT3JBcnJheV0pO1xufTtcblxudmFyIHRvSVNPID0gRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmc7XG5cbnZhciBkZWZhdWx0Rm9ybWF0ID0gZm9ybWF0c1snZGVmYXVsdCddO1xudmFyIGRlZmF1bHRzID0ge1xuICAgIGFkZFF1ZXJ5UHJlZml4OiBmYWxzZSxcbiAgICBhbGxvd0RvdHM6IGZhbHNlLFxuICAgIGFsbG93RW1wdHlBcnJheXM6IGZhbHNlLFxuICAgIGFycmF5Rm9ybWF0OiAnaW5kaWNlcycsXG4gICAgY2hhcnNldDogJ3V0Zi04JyxcbiAgICBjaGFyc2V0U2VudGluZWw6IGZhbHNlLFxuICAgIGRlbGltaXRlcjogJyYnLFxuICAgIGVuY29kZTogdHJ1ZSxcbiAgICBlbmNvZGVEb3RJbktleXM6IGZhbHNlLFxuICAgIGVuY29kZXI6IHV0aWxzLmVuY29kZSxcbiAgICBlbmNvZGVWYWx1ZXNPbmx5OiBmYWxzZSxcbiAgICBmb3JtYXQ6IGRlZmF1bHRGb3JtYXQsXG4gICAgZm9ybWF0dGVyOiBmb3JtYXRzLmZvcm1hdHRlcnNbZGVmYXVsdEZvcm1hdF0sXG4gICAgLy8gZGVwcmVjYXRlZFxuICAgIGluZGljZXM6IGZhbHNlLFxuICAgIHNlcmlhbGl6ZURhdGU6IGZ1bmN0aW9uIHNlcmlhbGl6ZURhdGUoZGF0ZSkge1xuICAgICAgICByZXR1cm4gdG9JU08uY2FsbChkYXRlKTtcbiAgICB9LFxuICAgIHNraXBOdWxsczogZmFsc2UsXG4gICAgc3RyaWN0TnVsbEhhbmRsaW5nOiBmYWxzZVxufTtcblxudmFyIGlzTm9uTnVsbGlzaFByaW1pdGl2ZSA9IGZ1bmN0aW9uIGlzTm9uTnVsbGlzaFByaW1pdGl2ZSh2KSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2ID09PSAnc3RyaW5nJ1xuICAgICAgICB8fCB0eXBlb2YgdiA9PT0gJ251bWJlcidcbiAgICAgICAgfHwgdHlwZW9mIHYgPT09ICdib29sZWFuJ1xuICAgICAgICB8fCB0eXBlb2YgdiA9PT0gJ3N5bWJvbCdcbiAgICAgICAgfHwgdHlwZW9mIHYgPT09ICdiaWdpbnQnO1xufTtcblxudmFyIHNlbnRpbmVsID0ge307XG5cbnZhciBzdHJpbmdpZnkgPSBmdW5jdGlvbiBzdHJpbmdpZnkoXG4gICAgb2JqZWN0LFxuICAgIHByZWZpeCxcbiAgICBnZW5lcmF0ZUFycmF5UHJlZml4LFxuICAgIGNvbW1hUm91bmRUcmlwLFxuICAgIGFsbG93RW1wdHlBcnJheXMsXG4gICAgc3RyaWN0TnVsbEhhbmRsaW5nLFxuICAgIHNraXBOdWxscyxcbiAgICBlbmNvZGVEb3RJbktleXMsXG4gICAgZW5jb2RlcixcbiAgICBmaWx0ZXIsXG4gICAgc29ydCxcbiAgICBhbGxvd0RvdHMsXG4gICAgc2VyaWFsaXplRGF0ZSxcbiAgICBmb3JtYXQsXG4gICAgZm9ybWF0dGVyLFxuICAgIGVuY29kZVZhbHVlc09ubHksXG4gICAgY2hhcnNldCxcbiAgICBzaWRlQ2hhbm5lbFxuKSB7XG4gICAgdmFyIG9iaiA9IG9iamVjdDtcblxuICAgIHZhciB0bXBTYyA9IHNpZGVDaGFubmVsO1xuICAgIHZhciBzdGVwID0gMDtcbiAgICB2YXIgZmluZEZsYWcgPSBmYWxzZTtcbiAgICB3aGlsZSAoKHRtcFNjID0gdG1wU2MuZ2V0KHNlbnRpbmVsKSkgIT09IHZvaWQgdW5kZWZpbmVkICYmICFmaW5kRmxhZykge1xuICAgICAgICAvLyBXaGVyZSBvYmplY3QgbGFzdCBhcHBlYXJlZCBpbiB0aGUgcmVmIHRyZWVcbiAgICAgICAgdmFyIHBvcyA9IHRtcFNjLmdldChvYmplY3QpO1xuICAgICAgICBzdGVwICs9IDE7XG4gICAgICAgIGlmICh0eXBlb2YgcG9zICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgaWYgKHBvcyA9PT0gc3RlcCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdDeWNsaWMgb2JqZWN0IHZhbHVlJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZpbmRGbGFnID0gdHJ1ZTsgLy8gQnJlYWsgd2hpbGVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHRtcFNjLmdldChzZW50aW5lbCkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBzdGVwID0gMDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgZmlsdGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIG9iaiA9IGZpbHRlcihwcmVmaXgsIG9iaik7XG4gICAgfSBlbHNlIGlmIChvYmogaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgIG9iaiA9IHNlcmlhbGl6ZURhdGUob2JqKTtcbiAgICB9IGVsc2UgaWYgKGdlbmVyYXRlQXJyYXlQcmVmaXggPT09ICdjb21tYScgJiYgaXNBcnJheShvYmopKSB7XG4gICAgICAgIG9iaiA9IHV0aWxzLm1heWJlTWFwKG9iaiwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZURhdGUodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAob2JqID09PSBudWxsKSB7XG4gICAgICAgIGlmIChzdHJpY3ROdWxsSGFuZGxpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBlbmNvZGVyICYmICFlbmNvZGVWYWx1ZXNPbmx5ID8gZW5jb2RlcihwcmVmaXgsIGRlZmF1bHRzLmVuY29kZXIsIGNoYXJzZXQsICdrZXknLCBmb3JtYXQpIDogcHJlZml4O1xuICAgICAgICB9XG5cbiAgICAgICAgb2JqID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKGlzTm9uTnVsbGlzaFByaW1pdGl2ZShvYmopIHx8IHV0aWxzLmlzQnVmZmVyKG9iaikpIHtcbiAgICAgICAgaWYgKGVuY29kZXIpIHtcbiAgICAgICAgICAgIHZhciBrZXlWYWx1ZSA9IGVuY29kZVZhbHVlc09ubHkgPyBwcmVmaXggOiBlbmNvZGVyKHByZWZpeCwgZGVmYXVsdHMuZW5jb2RlciwgY2hhcnNldCwgJ2tleScsIGZvcm1hdCk7XG4gICAgICAgICAgICByZXR1cm4gW2Zvcm1hdHRlcihrZXlWYWx1ZSkgKyAnPScgKyBmb3JtYXR0ZXIoZW5jb2RlcihvYmosIGRlZmF1bHRzLmVuY29kZXIsIGNoYXJzZXQsICd2YWx1ZScsIGZvcm1hdCkpXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW2Zvcm1hdHRlcihwcmVmaXgpICsgJz0nICsgZm9ybWF0dGVyKFN0cmluZyhvYmopKV07XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlcyA9IFtdO1xuXG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgfVxuXG4gICAgdmFyIG9iaktleXM7XG4gICAgaWYgKGdlbmVyYXRlQXJyYXlQcmVmaXggPT09ICdjb21tYScgJiYgaXNBcnJheShvYmopKSB7XG4gICAgICAgIC8vIHdlIG5lZWQgdG8gam9pbiBlbGVtZW50cyBpblxuICAgICAgICBpZiAoZW5jb2RlVmFsdWVzT25seSAmJiBlbmNvZGVyKSB7XG4gICAgICAgICAgICBvYmogPSB1dGlscy5tYXliZU1hcChvYmosIGVuY29kZXIpO1xuICAgICAgICB9XG4gICAgICAgIG9iaktleXMgPSBbeyB2YWx1ZTogb2JqLmxlbmd0aCA+IDAgPyBvYmouam9pbignLCcpIHx8IG51bGwgOiB2b2lkIHVuZGVmaW5lZCB9XTtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkoZmlsdGVyKSkge1xuICAgICAgICBvYmpLZXlzID0gZmlsdGVyO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgICAgICAgb2JqS2V5cyA9IHNvcnQgPyBrZXlzLnNvcnQoc29ydCkgOiBrZXlzO1xuICAgIH1cblxuICAgIHZhciBlbmNvZGVkUHJlZml4ID0gZW5jb2RlRG90SW5LZXlzID8gcHJlZml4LnJlcGxhY2UoL1xcLi9nLCAnJTJFJykgOiBwcmVmaXg7XG5cbiAgICB2YXIgYWRqdXN0ZWRQcmVmaXggPSBjb21tYVJvdW5kVHJpcCAmJiBpc0FycmF5KG9iaikgJiYgb2JqLmxlbmd0aCA9PT0gMSA/IGVuY29kZWRQcmVmaXggKyAnW10nIDogZW5jb2RlZFByZWZpeDtcblxuICAgIGlmIChhbGxvd0VtcHR5QXJyYXlzICYmIGlzQXJyYXkob2JqKSAmJiBvYmoubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBhZGp1c3RlZFByZWZpeCArICdbXSc7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBvYmpLZXlzLmxlbmd0aDsgKytqKSB7XG4gICAgICAgIHZhciBrZXkgPSBvYmpLZXlzW2pdO1xuICAgICAgICB2YXIgdmFsdWUgPSB0eXBlb2Yga2V5ID09PSAnb2JqZWN0JyAmJiB0eXBlb2Yga2V5LnZhbHVlICE9PSAndW5kZWZpbmVkJyA/IGtleS52YWx1ZSA6IG9ialtrZXldO1xuXG4gICAgICAgIGlmIChza2lwTnVsbHMgJiYgdmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGVuY29kZWRLZXkgPSBhbGxvd0RvdHMgJiYgZW5jb2RlRG90SW5LZXlzID8ga2V5LnJlcGxhY2UoL1xcLi9nLCAnJTJFJykgOiBrZXk7XG4gICAgICAgIHZhciBrZXlQcmVmaXggPSBpc0FycmF5KG9iailcbiAgICAgICAgICAgID8gdHlwZW9mIGdlbmVyYXRlQXJyYXlQcmVmaXggPT09ICdmdW5jdGlvbicgPyBnZW5lcmF0ZUFycmF5UHJlZml4KGFkanVzdGVkUHJlZml4LCBlbmNvZGVkS2V5KSA6IGFkanVzdGVkUHJlZml4XG4gICAgICAgICAgICA6IGFkanVzdGVkUHJlZml4ICsgKGFsbG93RG90cyA/ICcuJyArIGVuY29kZWRLZXkgOiAnWycgKyBlbmNvZGVkS2V5ICsgJ10nKTtcblxuICAgICAgICBzaWRlQ2hhbm5lbC5zZXQob2JqZWN0LCBzdGVwKTtcbiAgICAgICAgdmFyIHZhbHVlU2lkZUNoYW5uZWwgPSBnZXRTaWRlQ2hhbm5lbCgpO1xuICAgICAgICB2YWx1ZVNpZGVDaGFubmVsLnNldChzZW50aW5lbCwgc2lkZUNoYW5uZWwpO1xuICAgICAgICBwdXNoVG9BcnJheSh2YWx1ZXMsIHN0cmluZ2lmeShcbiAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAga2V5UHJlZml4LFxuICAgICAgICAgICAgZ2VuZXJhdGVBcnJheVByZWZpeCxcbiAgICAgICAgICAgIGNvbW1hUm91bmRUcmlwLFxuICAgICAgICAgICAgYWxsb3dFbXB0eUFycmF5cyxcbiAgICAgICAgICAgIHN0cmljdE51bGxIYW5kbGluZyxcbiAgICAgICAgICAgIHNraXBOdWxscyxcbiAgICAgICAgICAgIGVuY29kZURvdEluS2V5cyxcbiAgICAgICAgICAgIGdlbmVyYXRlQXJyYXlQcmVmaXggPT09ICdjb21tYScgJiYgZW5jb2RlVmFsdWVzT25seSAmJiBpc0FycmF5KG9iaikgPyBudWxsIDogZW5jb2RlcixcbiAgICAgICAgICAgIGZpbHRlcixcbiAgICAgICAgICAgIHNvcnQsXG4gICAgICAgICAgICBhbGxvd0RvdHMsXG4gICAgICAgICAgICBzZXJpYWxpemVEYXRlLFxuICAgICAgICAgICAgZm9ybWF0LFxuICAgICAgICAgICAgZm9ybWF0dGVyLFxuICAgICAgICAgICAgZW5jb2RlVmFsdWVzT25seSxcbiAgICAgICAgICAgIGNoYXJzZXQsXG4gICAgICAgICAgICB2YWx1ZVNpZGVDaGFubmVsXG4gICAgICAgICkpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZXM7XG59O1xuXG52YXIgbm9ybWFsaXplU3RyaW5naWZ5T3B0aW9ucyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZVN0cmluZ2lmeU9wdGlvbnMob3B0cykge1xuICAgIGlmICghb3B0cykge1xuICAgICAgICByZXR1cm4gZGVmYXVsdHM7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvcHRzLmFsbG93RW1wdHlBcnJheXMgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBvcHRzLmFsbG93RW1wdHlBcnJheXMgIT09ICdib29sZWFuJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdgYWxsb3dFbXB0eUFycmF5c2Agb3B0aW9uIGNhbiBvbmx5IGJlIGB0cnVlYCBvciBgZmFsc2VgLCB3aGVuIHByb3ZpZGVkJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvcHRzLmVuY29kZURvdEluS2V5cyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG9wdHMuZW5jb2RlRG90SW5LZXlzICE9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYGVuY29kZURvdEluS2V5c2Agb3B0aW9uIGNhbiBvbmx5IGJlIGB0cnVlYCBvciBgZmFsc2VgLCB3aGVuIHByb3ZpZGVkJyk7XG4gICAgfVxuXG4gICAgaWYgKG9wdHMuZW5jb2RlciAhPT0gbnVsbCAmJiB0eXBlb2Ygb3B0cy5lbmNvZGVyICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygb3B0cy5lbmNvZGVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0VuY29kZXIgaGFzIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgdmFyIGNoYXJzZXQgPSBvcHRzLmNoYXJzZXQgfHwgZGVmYXVsdHMuY2hhcnNldDtcbiAgICBpZiAodHlwZW9mIG9wdHMuY2hhcnNldCAhPT0gJ3VuZGVmaW5lZCcgJiYgb3B0cy5jaGFyc2V0ICE9PSAndXRmLTgnICYmIG9wdHMuY2hhcnNldCAhPT0gJ2lzby04ODU5LTEnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBjaGFyc2V0IG9wdGlvbiBtdXN0IGJlIGVpdGhlciB1dGYtOCwgaXNvLTg4NTktMSwgb3IgdW5kZWZpbmVkJyk7XG4gICAgfVxuXG4gICAgdmFyIGZvcm1hdCA9IGZvcm1hdHNbJ2RlZmF1bHQnXTtcbiAgICBpZiAodHlwZW9mIG9wdHMuZm9ybWF0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBpZiAoIWhhcy5jYWxsKGZvcm1hdHMuZm9ybWF0dGVycywgb3B0cy5mb3JtYXQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGZvcm1hdCBvcHRpb24gcHJvdmlkZWQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgZm9ybWF0ID0gb3B0cy5mb3JtYXQ7XG4gICAgfVxuICAgIHZhciBmb3JtYXR0ZXIgPSBmb3JtYXRzLmZvcm1hdHRlcnNbZm9ybWF0XTtcblxuICAgIHZhciBmaWx0ZXIgPSBkZWZhdWx0cy5maWx0ZXI7XG4gICAgaWYgKHR5cGVvZiBvcHRzLmZpbHRlciA9PT0gJ2Z1bmN0aW9uJyB8fCBpc0FycmF5KG9wdHMuZmlsdGVyKSkge1xuICAgICAgICBmaWx0ZXIgPSBvcHRzLmZpbHRlcjtcbiAgICB9XG5cbiAgICB2YXIgYXJyYXlGb3JtYXQ7XG4gICAgaWYgKG9wdHMuYXJyYXlGb3JtYXQgaW4gYXJyYXlQcmVmaXhHZW5lcmF0b3JzKSB7XG4gICAgICAgIGFycmF5Rm9ybWF0ID0gb3B0cy5hcnJheUZvcm1hdDtcbiAgICB9IGVsc2UgaWYgKCdpbmRpY2VzJyBpbiBvcHRzKSB7XG4gICAgICAgIGFycmF5Rm9ybWF0ID0gb3B0cy5pbmRpY2VzID8gJ2luZGljZXMnIDogJ3JlcGVhdCc7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgYXJyYXlGb3JtYXQgPSBkZWZhdWx0cy5hcnJheUZvcm1hdDtcbiAgICB9XG5cbiAgICBpZiAoJ2NvbW1hUm91bmRUcmlwJyBpbiBvcHRzICYmIHR5cGVvZiBvcHRzLmNvbW1hUm91bmRUcmlwICE9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYGNvbW1hUm91bmRUcmlwYCBtdXN0IGJlIGEgYm9vbGVhbiwgb3IgYWJzZW50Jyk7XG4gICAgfVxuXG4gICAgdmFyIGFsbG93RG90cyA9IHR5cGVvZiBvcHRzLmFsbG93RG90cyA9PT0gJ3VuZGVmaW5lZCcgPyBvcHRzLmVuY29kZURvdEluS2V5cyA9PT0gdHJ1ZSA/IHRydWUgOiBkZWZhdWx0cy5hbGxvd0RvdHMgOiAhIW9wdHMuYWxsb3dEb3RzO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgYWRkUXVlcnlQcmVmaXg6IHR5cGVvZiBvcHRzLmFkZFF1ZXJ5UHJlZml4ID09PSAnYm9vbGVhbicgPyBvcHRzLmFkZFF1ZXJ5UHJlZml4IDogZGVmYXVsdHMuYWRkUXVlcnlQcmVmaXgsXG4gICAgICAgIGFsbG93RG90czogYWxsb3dEb3RzLFxuICAgICAgICBhbGxvd0VtcHR5QXJyYXlzOiB0eXBlb2Ygb3B0cy5hbGxvd0VtcHR5QXJyYXlzID09PSAnYm9vbGVhbicgPyAhIW9wdHMuYWxsb3dFbXB0eUFycmF5cyA6IGRlZmF1bHRzLmFsbG93RW1wdHlBcnJheXMsXG4gICAgICAgIGFycmF5Rm9ybWF0OiBhcnJheUZvcm1hdCxcbiAgICAgICAgY2hhcnNldDogY2hhcnNldCxcbiAgICAgICAgY2hhcnNldFNlbnRpbmVsOiB0eXBlb2Ygb3B0cy5jaGFyc2V0U2VudGluZWwgPT09ICdib29sZWFuJyA/IG9wdHMuY2hhcnNldFNlbnRpbmVsIDogZGVmYXVsdHMuY2hhcnNldFNlbnRpbmVsLFxuICAgICAgICBjb21tYVJvdW5kVHJpcDogb3B0cy5jb21tYVJvdW5kVHJpcCxcbiAgICAgICAgZGVsaW1pdGVyOiB0eXBlb2Ygb3B0cy5kZWxpbWl0ZXIgPT09ICd1bmRlZmluZWQnID8gZGVmYXVsdHMuZGVsaW1pdGVyIDogb3B0cy5kZWxpbWl0ZXIsXG4gICAgICAgIGVuY29kZTogdHlwZW9mIG9wdHMuZW5jb2RlID09PSAnYm9vbGVhbicgPyBvcHRzLmVuY29kZSA6IGRlZmF1bHRzLmVuY29kZSxcbiAgICAgICAgZW5jb2RlRG90SW5LZXlzOiB0eXBlb2Ygb3B0cy5lbmNvZGVEb3RJbktleXMgPT09ICdib29sZWFuJyA/IG9wdHMuZW5jb2RlRG90SW5LZXlzIDogZGVmYXVsdHMuZW5jb2RlRG90SW5LZXlzLFxuICAgICAgICBlbmNvZGVyOiB0eXBlb2Ygb3B0cy5lbmNvZGVyID09PSAnZnVuY3Rpb24nID8gb3B0cy5lbmNvZGVyIDogZGVmYXVsdHMuZW5jb2RlcixcbiAgICAgICAgZW5jb2RlVmFsdWVzT25seTogdHlwZW9mIG9wdHMuZW5jb2RlVmFsdWVzT25seSA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5lbmNvZGVWYWx1ZXNPbmx5IDogZGVmYXVsdHMuZW5jb2RlVmFsdWVzT25seSxcbiAgICAgICAgZmlsdGVyOiBmaWx0ZXIsXG4gICAgICAgIGZvcm1hdDogZm9ybWF0LFxuICAgICAgICBmb3JtYXR0ZXI6IGZvcm1hdHRlcixcbiAgICAgICAgc2VyaWFsaXplRGF0ZTogdHlwZW9mIG9wdHMuc2VyaWFsaXplRGF0ZSA9PT0gJ2Z1bmN0aW9uJyA/IG9wdHMuc2VyaWFsaXplRGF0ZSA6IGRlZmF1bHRzLnNlcmlhbGl6ZURhdGUsXG4gICAgICAgIHNraXBOdWxsczogdHlwZW9mIG9wdHMuc2tpcE51bGxzID09PSAnYm9vbGVhbicgPyBvcHRzLnNraXBOdWxscyA6IGRlZmF1bHRzLnNraXBOdWxscyxcbiAgICAgICAgc29ydDogdHlwZW9mIG9wdHMuc29ydCA9PT0gJ2Z1bmN0aW9uJyA/IG9wdHMuc29ydCA6IG51bGwsXG4gICAgICAgIHN0cmljdE51bGxIYW5kbGluZzogdHlwZW9mIG9wdHMuc3RyaWN0TnVsbEhhbmRsaW5nID09PSAnYm9vbGVhbicgPyBvcHRzLnN0cmljdE51bGxIYW5kbGluZyA6IGRlZmF1bHRzLnN0cmljdE51bGxIYW5kbGluZ1xuICAgIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG9wdHMpIHtcbiAgICB2YXIgb2JqID0gb2JqZWN0O1xuICAgIHZhciBvcHRpb25zID0gbm9ybWFsaXplU3RyaW5naWZ5T3B0aW9ucyhvcHRzKTtcblxuICAgIHZhciBvYmpLZXlzO1xuICAgIHZhciBmaWx0ZXI7XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZmlsdGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGZpbHRlciA9IG9wdGlvbnMuZmlsdGVyO1xuICAgICAgICBvYmogPSBmaWx0ZXIoJycsIG9iaik7XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KG9wdGlvbnMuZmlsdGVyKSkge1xuICAgICAgICBmaWx0ZXIgPSBvcHRpb25zLmZpbHRlcjtcbiAgICAgICAgb2JqS2V5cyA9IGZpbHRlcjtcbiAgICB9XG5cbiAgICB2YXIga2V5cyA9IFtdO1xuXG4gICAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnIHx8IG9iaiA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgdmFyIGdlbmVyYXRlQXJyYXlQcmVmaXggPSBhcnJheVByZWZpeEdlbmVyYXRvcnNbb3B0aW9ucy5hcnJheUZvcm1hdF07XG4gICAgdmFyIGNvbW1hUm91bmRUcmlwID0gZ2VuZXJhdGVBcnJheVByZWZpeCA9PT0gJ2NvbW1hJyAmJiBvcHRpb25zLmNvbW1hUm91bmRUcmlwO1xuXG4gICAgaWYgKCFvYmpLZXlzKSB7XG4gICAgICAgIG9iaktleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnNvcnQpIHtcbiAgICAgICAgb2JqS2V5cy5zb3J0KG9wdGlvbnMuc29ydCk7XG4gICAgfVxuXG4gICAgdmFyIHNpZGVDaGFubmVsID0gZ2V0U2lkZUNoYW5uZWwoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iaktleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIGtleSA9IG9iaktleXNbaV07XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuc2tpcE51bGxzICYmIG9ialtrZXldID09PSBudWxsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBwdXNoVG9BcnJheShrZXlzLCBzdHJpbmdpZnkoXG4gICAgICAgICAgICBvYmpba2V5XSxcbiAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgIGdlbmVyYXRlQXJyYXlQcmVmaXgsXG4gICAgICAgICAgICBjb21tYVJvdW5kVHJpcCxcbiAgICAgICAgICAgIG9wdGlvbnMuYWxsb3dFbXB0eUFycmF5cyxcbiAgICAgICAgICAgIG9wdGlvbnMuc3RyaWN0TnVsbEhhbmRsaW5nLFxuICAgICAgICAgICAgb3B0aW9ucy5za2lwTnVsbHMsXG4gICAgICAgICAgICBvcHRpb25zLmVuY29kZURvdEluS2V5cyxcbiAgICAgICAgICAgIG9wdGlvbnMuZW5jb2RlID8gb3B0aW9ucy5lbmNvZGVyIDogbnVsbCxcbiAgICAgICAgICAgIG9wdGlvbnMuZmlsdGVyLFxuICAgICAgICAgICAgb3B0aW9ucy5zb3J0LFxuICAgICAgICAgICAgb3B0aW9ucy5hbGxvd0RvdHMsXG4gICAgICAgICAgICBvcHRpb25zLnNlcmlhbGl6ZURhdGUsXG4gICAgICAgICAgICBvcHRpb25zLmZvcm1hdCxcbiAgICAgICAgICAgIG9wdGlvbnMuZm9ybWF0dGVyLFxuICAgICAgICAgICAgb3B0aW9ucy5lbmNvZGVWYWx1ZXNPbmx5LFxuICAgICAgICAgICAgb3B0aW9ucy5jaGFyc2V0LFxuICAgICAgICAgICAgc2lkZUNoYW5uZWxcbiAgICAgICAgKSk7XG4gICAgfVxuXG4gICAgdmFyIGpvaW5lZCA9IGtleXMuam9pbihvcHRpb25zLmRlbGltaXRlcik7XG4gICAgdmFyIHByZWZpeCA9IG9wdGlvbnMuYWRkUXVlcnlQcmVmaXggPT09IHRydWUgPyAnPycgOiAnJztcblxuICAgIGlmIChvcHRpb25zLmNoYXJzZXRTZW50aW5lbCkge1xuICAgICAgICBpZiAob3B0aW9ucy5jaGFyc2V0ID09PSAnaXNvLTg4NTktMScpIHtcbiAgICAgICAgICAgIC8vIGVuY29kZVVSSUNvbXBvbmVudCgnJiMxMDAwMzsnKSwgdGhlIFwibnVtZXJpYyBlbnRpdHlcIiByZXByZXNlbnRhdGlvbiBvZiBhIGNoZWNrbWFya1xuICAgICAgICAgICAgcHJlZml4ICs9ICd1dGY4PSUyNiUyMzEwMDAzJTNCJic7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBlbmNvZGVVUklDb21wb25lbnQoJ+KckycpXG4gICAgICAgICAgICBwcmVmaXggKz0gJ3V0Zjg9JUUyJTlDJTkzJic7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gam9pbmVkLmxlbmd0aCA+IDAgPyBwcmVmaXggKyBqb2luZWQgOiAnJztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBmb3JtYXRzID0gcmVxdWlyZSgnLi9mb3JtYXRzJyk7XG5cbnZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG52YXIgaGV4VGFibGUgPSAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBhcnJheSA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyArK2kpIHtcbiAgICAgICAgYXJyYXkucHVzaCgnJScgKyAoKGkgPCAxNiA/ICcwJyA6ICcnKSArIGkudG9TdHJpbmcoMTYpKS50b1VwcGVyQ2FzZSgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJyYXk7XG59KCkpO1xuXG52YXIgY29tcGFjdFF1ZXVlID0gZnVuY3Rpb24gY29tcGFjdFF1ZXVlKHF1ZXVlKSB7XG4gICAgd2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgdmFyIGl0ZW0gPSBxdWV1ZS5wb3AoKTtcbiAgICAgICAgdmFyIG9iaiA9IGl0ZW0ub2JqW2l0ZW0ucHJvcF07XG5cbiAgICAgICAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgICAgICAgICAgdmFyIGNvbXBhY3RlZCA9IFtdO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG9iai5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb2JqW2pdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgICBjb21wYWN0ZWQucHVzaChvYmpbal0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaXRlbS5vYmpbaXRlbS5wcm9wXSA9IGNvbXBhY3RlZDtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbnZhciBhcnJheVRvT2JqZWN0ID0gZnVuY3Rpb24gYXJyYXlUb09iamVjdChzb3VyY2UsIG9wdGlvbnMpIHtcbiAgICB2YXIgb2JqID0gb3B0aW9ucyAmJiBvcHRpb25zLnBsYWluT2JqZWN0cyA/IE9iamVjdC5jcmVhdGUobnVsbCkgOiB7fTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNvdXJjZS5sZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAodHlwZW9mIHNvdXJjZVtpXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIG9ialtpXSA9IHNvdXJjZVtpXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvYmo7XG59O1xuXG52YXIgbWVyZ2UgPSBmdW5jdGlvbiBtZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuICAgIC8qIGVzbGludCBuby1wYXJhbS1yZWFzc2lnbjogMCAqL1xuICAgIGlmICghc291cmNlKSB7XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBzb3VyY2UgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIGlmIChpc0FycmF5KHRhcmdldCkpIHtcbiAgICAgICAgICAgIHRhcmdldC5wdXNoKHNvdXJjZSk7XG4gICAgICAgIH0gZWxzZSBpZiAodGFyZ2V0ICYmIHR5cGVvZiB0YXJnZXQgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBpZiAoKG9wdGlvbnMgJiYgKG9wdGlvbnMucGxhaW5PYmplY3RzIHx8IG9wdGlvbnMuYWxsb3dQcm90b3R5cGVzKSkgfHwgIWhhcy5jYWxsKE9iamVjdC5wcm90b3R5cGUsIHNvdXJjZSkpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRbc291cmNlXSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gW3RhcmdldCwgc291cmNlXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuXG4gICAgaWYgKCF0YXJnZXQgfHwgdHlwZW9mIHRhcmdldCAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIFt0YXJnZXRdLmNvbmNhdChzb3VyY2UpO1xuICAgIH1cblxuICAgIHZhciBtZXJnZVRhcmdldCA9IHRhcmdldDtcbiAgICBpZiAoaXNBcnJheSh0YXJnZXQpICYmICFpc0FycmF5KHNvdXJjZSkpIHtcbiAgICAgICAgbWVyZ2VUYXJnZXQgPSBhcnJheVRvT2JqZWN0KHRhcmdldCwgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgaWYgKGlzQXJyYXkodGFyZ2V0KSAmJiBpc0FycmF5KHNvdXJjZSkpIHtcbiAgICAgICAgc291cmNlLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGkpIHtcbiAgICAgICAgICAgIGlmIChoYXMuY2FsbCh0YXJnZXQsIGkpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldEl0ZW0gPSB0YXJnZXRbaV07XG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldEl0ZW0gJiYgdHlwZW9mIHRhcmdldEl0ZW0gPT09ICdvYmplY3QnICYmIGl0ZW0gJiYgdHlwZW9mIGl0ZW0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFtpXSA9IG1lcmdlKHRhcmdldEl0ZW0sIGl0ZW0sIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldC5wdXNoKGl0ZW0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0W2ldID0gaXRlbTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHNvdXJjZSkucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGtleSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBzb3VyY2Vba2V5XTtcblxuICAgICAgICBpZiAoaGFzLmNhbGwoYWNjLCBrZXkpKSB7XG4gICAgICAgICAgICBhY2Nba2V5XSA9IG1lcmdlKGFjY1trZXldLCB2YWx1ZSwgb3B0aW9ucyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhY2Nba2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgfSwgbWVyZ2VUYXJnZXQpO1xufTtcblxudmFyIGFzc2lnbiA9IGZ1bmN0aW9uIGFzc2lnblNpbmdsZVNvdXJjZSh0YXJnZXQsIHNvdXJjZSkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhzb3VyY2UpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBrZXkpIHtcbiAgICAgICAgYWNjW2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB0YXJnZXQpO1xufTtcblxudmFyIGRlY29kZSA9IGZ1bmN0aW9uIChzdHIsIGRlY29kZXIsIGNoYXJzZXQpIHtcbiAgICB2YXIgc3RyV2l0aG91dFBsdXMgPSBzdHIucmVwbGFjZSgvXFwrL2csICcgJyk7XG4gICAgaWYgKGNoYXJzZXQgPT09ICdpc28tODg1OS0xJykge1xuICAgICAgICAvLyB1bmVzY2FwZSBuZXZlciB0aHJvd3MsIG5vIHRyeS4uLmNhdGNoIG5lZWRlZDpcbiAgICAgICAgcmV0dXJuIHN0cldpdGhvdXRQbHVzLnJlcGxhY2UoLyVbMC05YS1mXXsyfS9naSwgdW5lc2NhcGUpO1xuICAgIH1cbiAgICAvLyB1dGYtOFxuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoc3RyV2l0aG91dFBsdXMpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIHN0cldpdGhvdXRQbHVzO1xuICAgIH1cbn07XG5cbnZhciBsaW1pdCA9IDEwMjQ7XG5cbi8qIGVzbGludCBvcGVyYXRvci1saW5lYnJlYWs6IFsyLCBcImJlZm9yZVwiXSAqL1xuXG52YXIgZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKHN0ciwgZGVmYXVsdEVuY29kZXIsIGNoYXJzZXQsIGtpbmQsIGZvcm1hdCkge1xuICAgIC8vIFRoaXMgY29kZSB3YXMgb3JpZ2luYWxseSB3cml0dGVuIGJ5IEJyaWFuIFdoaXRlIChtc2NkZXgpIGZvciB0aGUgaW8uanMgY29yZSBxdWVyeXN0cmluZyBsaWJyYXJ5LlxuICAgIC8vIEl0IGhhcyBiZWVuIGFkYXB0ZWQgaGVyZSBmb3Igc3RyaWN0ZXIgYWRoZXJlbmNlIHRvIFJGQyAzOTg2XG4gICAgaWYgKHN0ci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG5cbiAgICB2YXIgc3RyaW5nID0gc3RyO1xuICAgIGlmICh0eXBlb2Ygc3RyID09PSAnc3ltYm9sJykge1xuICAgICAgICBzdHJpbmcgPSBTeW1ib2wucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoc3RyKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHN0cmluZyA9IFN0cmluZyhzdHIpO1xuICAgIH1cblxuICAgIGlmIChjaGFyc2V0ID09PSAnaXNvLTg4NTktMScpIHtcbiAgICAgICAgcmV0dXJuIGVzY2FwZShzdHJpbmcpLnJlcGxhY2UoLyV1WzAtOWEtZl17NH0vZ2ksIGZ1bmN0aW9uICgkMCkge1xuICAgICAgICAgICAgcmV0dXJuICclMjYlMjMnICsgcGFyc2VJbnQoJDAuc2xpY2UoMiksIDE2KSArICclM0InO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgb3V0ID0gJyc7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBzdHJpbmcubGVuZ3RoOyBqICs9IGxpbWl0KSB7XG4gICAgICAgIHZhciBzZWdtZW50ID0gc3RyaW5nLmxlbmd0aCA+PSBsaW1pdCA/IHN0cmluZy5zbGljZShqLCBqICsgbGltaXQpIDogc3RyaW5nO1xuICAgICAgICB2YXIgYXJyID0gW107XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWdtZW50Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB2YXIgYyA9IHNlZ21lbnQuY2hhckNvZGVBdChpKTtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBjID09PSAweDJEIC8vIC1cbiAgICAgICAgICAgICAgICB8fCBjID09PSAweDJFIC8vIC5cbiAgICAgICAgICAgICAgICB8fCBjID09PSAweDVGIC8vIF9cbiAgICAgICAgICAgICAgICB8fCBjID09PSAweDdFIC8vIH5cbiAgICAgICAgICAgICAgICB8fCAoYyA+PSAweDMwICYmIGMgPD0gMHgzOSkgLy8gMC05XG4gICAgICAgICAgICAgICAgfHwgKGMgPj0gMHg0MSAmJiBjIDw9IDB4NUEpIC8vIGEtelxuICAgICAgICAgICAgICAgIHx8IChjID49IDB4NjEgJiYgYyA8PSAweDdBKSAvLyBBLVpcbiAgICAgICAgICAgICAgICB8fCAoZm9ybWF0ID09PSBmb3JtYXRzLlJGQzE3MzggJiYgKGMgPT09IDB4MjggfHwgYyA9PT0gMHgyOSkpIC8vICggKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgYXJyW2Fyci5sZW5ndGhdID0gc2VnbWVudC5jaGFyQXQoaSk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjIDwgMHg4MCkge1xuICAgICAgICAgICAgICAgIGFyclthcnIubGVuZ3RoXSA9IGhleFRhYmxlW2NdO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoYyA8IDB4ODAwKSB7XG4gICAgICAgICAgICAgICAgYXJyW2Fyci5sZW5ndGhdID0gaGV4VGFibGVbMHhDMCB8IChjID4+IDYpXVxuICAgICAgICAgICAgICAgICAgICArIGhleFRhYmxlWzB4ODAgfCAoYyAmIDB4M0YpXTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGMgPCAweEQ4MDAgfHwgYyA+PSAweEUwMDApIHtcbiAgICAgICAgICAgICAgICBhcnJbYXJyLmxlbmd0aF0gPSBoZXhUYWJsZVsweEUwIHwgKGMgPj4gMTIpXVxuICAgICAgICAgICAgICAgICAgICArIGhleFRhYmxlWzB4ODAgfCAoKGMgPj4gNikgJiAweDNGKV1cbiAgICAgICAgICAgICAgICAgICAgKyBoZXhUYWJsZVsweDgwIHwgKGMgJiAweDNGKV07XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgICAgIGMgPSAweDEwMDAwICsgKCgoYyAmIDB4M0ZGKSA8PCAxMCkgfCAoc2VnbWVudC5jaGFyQ29kZUF0KGkpICYgMHgzRkYpKTtcblxuICAgICAgICAgICAgYXJyW2Fyci5sZW5ndGhdID0gaGV4VGFibGVbMHhGMCB8IChjID4+IDE4KV1cbiAgICAgICAgICAgICAgICArIGhleFRhYmxlWzB4ODAgfCAoKGMgPj4gMTIpICYgMHgzRildXG4gICAgICAgICAgICAgICAgKyBoZXhUYWJsZVsweDgwIHwgKChjID4+IDYpICYgMHgzRildXG4gICAgICAgICAgICAgICAgKyBoZXhUYWJsZVsweDgwIHwgKGMgJiAweDNGKV07XG4gICAgICAgIH1cblxuICAgICAgICBvdXQgKz0gYXJyLmpvaW4oJycpO1xuICAgIH1cblxuICAgIHJldHVybiBvdXQ7XG59O1xuXG52YXIgY29tcGFjdCA9IGZ1bmN0aW9uIGNvbXBhY3QodmFsdWUpIHtcbiAgICB2YXIgcXVldWUgPSBbeyBvYmo6IHsgbzogdmFsdWUgfSwgcHJvcDogJ28nIH1dO1xuICAgIHZhciByZWZzID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBpdGVtID0gcXVldWVbaV07XG4gICAgICAgIHZhciBvYmogPSBpdGVtLm9ialtpdGVtLnByb3BdO1xuXG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBrZXlzLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICB2YXIga2V5ID0ga2V5c1tqXTtcbiAgICAgICAgICAgIHZhciB2YWwgPSBvYmpba2V5XTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsID09PSAnb2JqZWN0JyAmJiB2YWwgIT09IG51bGwgJiYgcmVmcy5pbmRleE9mKHZhbCkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcXVldWUucHVzaCh7IG9iajogb2JqLCBwcm9wOiBrZXkgfSk7XG4gICAgICAgICAgICAgICAgcmVmcy5wdXNoKHZhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb21wYWN0UXVldWUocXVldWUpO1xuXG4gICAgcmV0dXJuIHZhbHVlO1xufTtcblxudmFyIGlzUmVnRXhwID0gZnVuY3Rpb24gaXNSZWdFeHAob2JqKSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBSZWdFeHBdJztcbn07XG5cbnZhciBpc0J1ZmZlciA9IGZ1bmN0aW9uIGlzQnVmZmVyKG9iaikge1xuICAgIGlmICghb2JqIHx8IHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gISEob2JqLmNvbnN0cnVjdG9yICYmIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlciAmJiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIob2JqKSk7XG59O1xuXG52YXIgY29tYmluZSA9IGZ1bmN0aW9uIGNvbWJpbmUoYSwgYikge1xuICAgIHJldHVybiBbXS5jb25jYXQoYSwgYik7XG59O1xuXG52YXIgbWF5YmVNYXAgPSBmdW5jdGlvbiBtYXliZU1hcCh2YWwsIGZuKSB7XG4gICAgaWYgKGlzQXJyYXkodmFsKSkge1xuICAgICAgICB2YXIgbWFwcGVkID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBtYXBwZWQucHVzaChmbih2YWxbaV0pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWFwcGVkO1xuICAgIH1cbiAgICByZXR1cm4gZm4odmFsKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGFycmF5VG9PYmplY3Q6IGFycmF5VG9PYmplY3QsXG4gICAgYXNzaWduOiBhc3NpZ24sXG4gICAgY29tYmluZTogY29tYmluZSxcbiAgICBjb21wYWN0OiBjb21wYWN0LFxuICAgIGRlY29kZTogZGVjb2RlLFxuICAgIGVuY29kZTogZW5jb2RlLFxuICAgIGlzQnVmZmVyOiBpc0J1ZmZlcixcbiAgICBpc1JlZ0V4cDogaXNSZWdFeHAsXG4gICAgbWF5YmVNYXA6IG1heWJlTWFwLFxuICAgIG1lcmdlOiBtZXJnZVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJ2dldC1pbnRyaW5zaWMnKTtcbnZhciBkZWZpbmUgPSByZXF1aXJlKCdkZWZpbmUtZGF0YS1wcm9wZXJ0eScpO1xudmFyIGhhc0Rlc2NyaXB0b3JzID0gcmVxdWlyZSgnaGFzLXByb3BlcnR5LWRlc2NyaXB0b3JzJykoKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnZ29wZCcpO1xuXG52YXIgJFR5cGVFcnJvciA9IHJlcXVpcmUoJ2VzLWVycm9ycy90eXBlJyk7XG52YXIgJGZsb29yID0gR2V0SW50cmluc2ljKCclTWF0aC5mbG9vciUnKTtcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4nKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2V0RnVuY3Rpb25MZW5ndGgoZm4sIGxlbmd0aCkge1xuXHRpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2BmbmAgaXMgbm90IGEgZnVuY3Rpb24nKTtcblx0fVxuXHRpZiAodHlwZW9mIGxlbmd0aCAhPT0gJ251bWJlcicgfHwgbGVuZ3RoIDwgMCB8fCBsZW5ndGggPiAweEZGRkZGRkZGIHx8ICRmbG9vcihsZW5ndGgpICE9PSBsZW5ndGgpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignYGxlbmd0aGAgbXVzdCBiZSBhIHBvc2l0aXZlIDMyLWJpdCBpbnRlZ2VyJyk7XG5cdH1cblxuXHR2YXIgbG9vc2UgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiAhIWFyZ3VtZW50c1syXTtcblxuXHR2YXIgZnVuY3Rpb25MZW5ndGhJc0NvbmZpZ3VyYWJsZSA9IHRydWU7XG5cdHZhciBmdW5jdGlvbkxlbmd0aElzV3JpdGFibGUgPSB0cnVlO1xuXHRpZiAoJ2xlbmd0aCcgaW4gZm4gJiYgZ09QRCkge1xuXHRcdHZhciBkZXNjID0gZ09QRChmbiwgJ2xlbmd0aCcpO1xuXHRcdGlmIChkZXNjICYmICFkZXNjLmNvbmZpZ3VyYWJsZSkge1xuXHRcdFx0ZnVuY3Rpb25MZW5ndGhJc0NvbmZpZ3VyYWJsZSA9IGZhbHNlO1xuXHRcdH1cblx0XHRpZiAoZGVzYyAmJiAhZGVzYy53cml0YWJsZSkge1xuXHRcdFx0ZnVuY3Rpb25MZW5ndGhJc1dyaXRhYmxlID0gZmFsc2U7XG5cdFx0fVxuXHR9XG5cblx0aWYgKGZ1bmN0aW9uTGVuZ3RoSXNDb25maWd1cmFibGUgfHwgZnVuY3Rpb25MZW5ndGhJc1dyaXRhYmxlIHx8ICFsb29zZSkge1xuXHRcdGlmIChoYXNEZXNjcmlwdG9ycykge1xuXHRcdFx0ZGVmaW5lKC8qKiBAdHlwZSB7UGFyYW1ldGVyczxkZWZpbmU+WzBdfSAqLyAoZm4pLCAnbGVuZ3RoJywgbGVuZ3RoLCB0cnVlLCB0cnVlKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGVmaW5lKC8qKiBAdHlwZSB7UGFyYW1ldGVyczxkZWZpbmU+WzBdfSAqLyAoZm4pLCAnbGVuZ3RoJywgbGVuZ3RoKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGZuO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJ2dldC1pbnRyaW5zaWMnKTtcbnZhciBjYWxsQm91bmQgPSByZXF1aXJlKCdjYWxsLWJpbmQvY2FsbEJvdW5kJyk7XG52YXIgaW5zcGVjdCA9IHJlcXVpcmUoJ29iamVjdC1pbnNwZWN0Jyk7XG5cbnZhciAkVHlwZUVycm9yID0gcmVxdWlyZSgnZXMtZXJyb3JzL3R5cGUnKTtcbnZhciAkV2Vha01hcCA9IEdldEludHJpbnNpYygnJVdlYWtNYXAlJywgdHJ1ZSk7XG52YXIgJE1hcCA9IEdldEludHJpbnNpYygnJU1hcCUnLCB0cnVlKTtcblxudmFyICR3ZWFrTWFwR2V0ID0gY2FsbEJvdW5kKCdXZWFrTWFwLnByb3RvdHlwZS5nZXQnLCB0cnVlKTtcbnZhciAkd2Vha01hcFNldCA9IGNhbGxCb3VuZCgnV2Vha01hcC5wcm90b3R5cGUuc2V0JywgdHJ1ZSk7XG52YXIgJHdlYWtNYXBIYXMgPSBjYWxsQm91bmQoJ1dlYWtNYXAucHJvdG90eXBlLmhhcycsIHRydWUpO1xudmFyICRtYXBHZXQgPSBjYWxsQm91bmQoJ01hcC5wcm90b3R5cGUuZ2V0JywgdHJ1ZSk7XG52YXIgJG1hcFNldCA9IGNhbGxCb3VuZCgnTWFwLnByb3RvdHlwZS5zZXQnLCB0cnVlKTtcbnZhciAkbWFwSGFzID0gY2FsbEJvdW5kKCdNYXAucHJvdG90eXBlLmhhcycsIHRydWUpO1xuXG4vKlxuKiBUaGlzIGZ1bmN0aW9uIHRyYXZlcnNlcyB0aGUgbGlzdCByZXR1cm5pbmcgdGhlIG5vZGUgY29ycmVzcG9uZGluZyB0byB0aGUgZ2l2ZW4ga2V5LlxuKlxuKiBUaGF0IG5vZGUgaXMgYWxzbyBtb3ZlZCB0byB0aGUgaGVhZCBvZiB0aGUgbGlzdCwgc28gdGhhdCBpZiBpdCdzIGFjY2Vzc2VkIGFnYWluIHdlIGRvbid0IG5lZWQgdG8gdHJhdmVyc2UgdGhlIHdob2xlIGxpc3QuIEJ5IGRvaW5nIHNvLCBhbGwgdGhlIHJlY2VudGx5IHVzZWQgbm9kZXMgY2FuIGJlIGFjY2Vzc2VkIHJlbGF0aXZlbHkgcXVpY2tseS5cbiovXG4vKiogQHR5cGUge2ltcG9ydCgnLicpLmxpc3RHZXROb2RlfSAqL1xudmFyIGxpc3RHZXROb2RlID0gZnVuY3Rpb24gKGxpc3QsIGtleSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG5cdC8qKiBAdHlwZSB7dHlwZW9mIGxpc3QgfCBOb25OdWxsYWJsZTwodHlwZW9mIGxpc3QpWyduZXh0J10+fSAqL1xuXHR2YXIgcHJldiA9IGxpc3Q7XG5cdC8qKiBAdHlwZSB7KHR5cGVvZiBsaXN0KVsnbmV4dCddfSAqL1xuXHR2YXIgY3Vycjtcblx0Zm9yICg7IChjdXJyID0gcHJldi5uZXh0KSAhPT0gbnVsbDsgcHJldiA9IGN1cnIpIHtcblx0XHRpZiAoY3Vyci5rZXkgPT09IGtleSkge1xuXHRcdFx0cHJldi5uZXh0ID0gY3Vyci5uZXh0O1xuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWV4dHJhLXBhcmVuc1xuXHRcdFx0Y3Vyci5uZXh0ID0gLyoqIEB0eXBlIHtOb25OdWxsYWJsZTx0eXBlb2YgbGlzdC5uZXh0Pn0gKi8gKGxpc3QubmV4dCk7XG5cdFx0XHRsaXN0Lm5leHQgPSBjdXJyOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG5cdFx0XHRyZXR1cm4gY3Vycjtcblx0XHR9XG5cdH1cbn07XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuJykubGlzdEdldH0gKi9cbnZhciBsaXN0R2V0ID0gZnVuY3Rpb24gKG9iamVjdHMsIGtleSkge1xuXHR2YXIgbm9kZSA9IGxpc3RHZXROb2RlKG9iamVjdHMsIGtleSk7XG5cdHJldHVybiBub2RlICYmIG5vZGUudmFsdWU7XG59O1xuLyoqIEB0eXBlIHtpbXBvcnQoJy4nKS5saXN0U2V0fSAqL1xudmFyIGxpc3RTZXQgPSBmdW5jdGlvbiAob2JqZWN0cywga2V5LCB2YWx1ZSkge1xuXHR2YXIgbm9kZSA9IGxpc3RHZXROb2RlKG9iamVjdHMsIGtleSk7XG5cdGlmIChub2RlKSB7XG5cdFx0bm9kZS52YWx1ZSA9IHZhbHVlO1xuXHR9IGVsc2Uge1xuXHRcdC8vIFByZXBlbmQgdGhlIG5ldyBub2RlIHRvIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGxpc3Rcblx0XHRvYmplY3RzLm5leHQgPSAvKiogQHR5cGUge2ltcG9ydCgnLicpLkxpc3ROb2RlPHR5cGVvZiB2YWx1ZT59ICovICh7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGFyYW0tcmVhc3NpZ24sIG5vLWV4dHJhLXBhcmVuc1xuXHRcdFx0a2V5OiBrZXksXG5cdFx0XHRuZXh0OiBvYmplY3RzLm5leHQsXG5cdFx0XHR2YWx1ZTogdmFsdWVcblx0XHR9KTtcblx0fVxufTtcbi8qKiBAdHlwZSB7aW1wb3J0KCcuJykubGlzdEhhc30gKi9cbnZhciBsaXN0SGFzID0gZnVuY3Rpb24gKG9iamVjdHMsIGtleSkge1xuXHRyZXR1cm4gISFsaXN0R2V0Tm9kZShvYmplY3RzLCBrZXkpO1xufTtcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4nKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0U2lkZUNoYW5uZWwoKSB7XG5cdC8qKiBAdHlwZSB7V2Vha01hcDxvYmplY3QsIHVua25vd24+fSAqLyB2YXIgJHdtO1xuXHQvKiogQHR5cGUge01hcDxvYmplY3QsIHVua25vd24+fSAqLyB2YXIgJG07XG5cdC8qKiBAdHlwZSB7aW1wb3J0KCcuJykuUm9vdE5vZGU8dW5rbm93bj59ICovIHZhciAkbztcblxuXHQvKiogQHR5cGUge2ltcG9ydCgnLicpLkNoYW5uZWx9ICovXG5cdHZhciBjaGFubmVsID0ge1xuXHRcdGFzc2VydDogZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0aWYgKCFjaGFubmVsLmhhcyhrZXkpKSB7XG5cdFx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdTaWRlIGNoYW5uZWwgZG9lcyBub3QgY29udGFpbiAnICsgaW5zcGVjdChrZXkpKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdGdldDogZnVuY3Rpb24gKGtleSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG5cdFx0XHRpZiAoJFdlYWtNYXAgJiYga2V5ICYmICh0eXBlb2Yga2V5ID09PSAnb2JqZWN0JyB8fCB0eXBlb2Yga2V5ID09PSAnZnVuY3Rpb24nKSkge1xuXHRcdFx0XHRpZiAoJHdtKSB7XG5cdFx0XHRcdFx0cmV0dXJuICR3ZWFrTWFwR2V0KCR3bSwga2V5KTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmICgkTWFwKSB7XG5cdFx0XHRcdGlmICgkbSkge1xuXHRcdFx0XHRcdHJldHVybiAkbWFwR2V0KCRtLCBrZXkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZiAoJG8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1sb25lbHktaWZcblx0XHRcdFx0XHRyZXR1cm4gbGlzdEdldCgkbywga2V5KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0aGFzOiBmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRpZiAoJFdlYWtNYXAgJiYga2V5ICYmICh0eXBlb2Yga2V5ID09PSAnb2JqZWN0JyB8fCB0eXBlb2Yga2V5ID09PSAnZnVuY3Rpb24nKSkge1xuXHRcdFx0XHRpZiAoJHdtKSB7XG5cdFx0XHRcdFx0cmV0dXJuICR3ZWFrTWFwSGFzKCR3bSwga2V5KTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmICgkTWFwKSB7XG5cdFx0XHRcdGlmICgkbSkge1xuXHRcdFx0XHRcdHJldHVybiAkbWFwSGFzKCRtLCBrZXkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZiAoJG8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1sb25lbHktaWZcblx0XHRcdFx0XHRyZXR1cm4gbGlzdEhhcygkbywga2V5KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuXHRcdFx0aWYgKCRXZWFrTWFwICYmIGtleSAmJiAodHlwZW9mIGtleSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIGtleSA9PT0gJ2Z1bmN0aW9uJykpIHtcblx0XHRcdFx0aWYgKCEkd20pIHtcblx0XHRcdFx0XHQkd20gPSBuZXcgJFdlYWtNYXAoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHQkd2Vha01hcFNldCgkd20sIGtleSwgdmFsdWUpO1xuXHRcdFx0fSBlbHNlIGlmICgkTWFwKSB7XG5cdFx0XHRcdGlmICghJG0pIHtcblx0XHRcdFx0XHQkbSA9IG5ldyAkTWFwKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0JG1hcFNldCgkbSwga2V5LCB2YWx1ZSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZiAoISRvKSB7XG5cdFx0XHRcdFx0Ly8gSW5pdGlhbGl6ZSB0aGUgbGlua2VkIGxpc3QgYXMgYW4gZW1wdHkgbm9kZSwgc28gdGhhdCB3ZSBkb24ndCBoYXZlIHRvIHNwZWNpYWwtY2FzZSBoYW5kbGluZyBvZiB0aGUgZmlyc3Qgbm9kZTogd2UgY2FuIGFsd2F5cyByZWZlciB0byBpdCBhcyAocHJldmlvdXMgbm9kZSkubmV4dCwgaW5zdGVhZCBvZiBzb21ldGhpbmcgbGlrZSAobGlzdCkuaGVhZFxuXHRcdFx0XHRcdCRvID0geyBrZXk6IHt9LCBuZXh0OiBudWxsIH07XG5cdFx0XHRcdH1cblx0XHRcdFx0bGlzdFNldCgkbywga2V5LCB2YWx1ZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRyZXR1cm4gY2hhbm5lbDtcbn07XG4iLCIvKlxuICAgICBfIF8gICAgICBfICAgICAgIF9cbiBfX198IChfKSBfX198IHwgX18gIChfKV9fX1xuLyBfX3wgfCB8LyBfX3wgfC8gLyAgfCAvIF9ffFxuXFxfXyBcXCB8IHwgKF9ffCAgIDwgXyB8IFxcX18gXFxcbnxfX18vX3xffFxcX19ffF98XFxfKF8pLyB8X19fL1xuICAgICAgICAgICAgICAgICAgIHxfXy9cblxuIFZlcnNpb246IDEuNi4wXG4gIEF1dGhvcjogS2VuIFdoZWVsZXJcbiBXZWJzaXRlOiBodHRwOi8va2Vud2hlZWxlci5naXRodWIuaW9cbiAgICBEb2NzOiBodHRwOi8va2Vud2hlZWxlci5naXRodWIuaW8vc2xpY2tcbiAgICBSZXBvOiBodHRwOi8vZ2l0aHViLmNvbS9rZW53aGVlbGVyL3NsaWNrXG4gIElzc3VlczogaHR0cDovL2dpdGh1Yi5jb20va2Vud2hlZWxlci9zbGljay9pc3N1ZXNcblxuICovXG4hZnVuY3Rpb24oYSl7XCJ1c2Ugc3RyaWN0XCI7XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShbXCJqcXVlcnlcIl0sYSk6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGV4cG9ydHM/bW9kdWxlLmV4cG9ydHM9YShyZXF1aXJlKFwianF1ZXJ5XCIpKTphKGpRdWVyeSl9KGZ1bmN0aW9uKGEpe1widXNlIHN0cmljdFwiO3ZhciBiPXdpbmRvdy5TbGlja3x8e307Yj1mdW5jdGlvbigpe2Z1bmN0aW9uIGMoYyxkKXt2YXIgZixlPXRoaXM7ZS5kZWZhdWx0cz17YWNjZXNzaWJpbGl0eTohMCxhZGFwdGl2ZUhlaWdodDohMSxhcHBlbmRBcnJvd3M6YShjKSxhcHBlbmREb3RzOmEoYyksYXJyb3dzOiEwLGFzTmF2Rm9yOm51bGwscHJldkFycm93Oic8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLXJvbGU9XCJub25lXCIgY2xhc3M9XCJzbGljay1wcmV2XCIgYXJpYS1sYWJlbD1cIlByZXZpb3VzXCIgdGFiaW5kZXg9XCIwXCIgcm9sZT1cImJ1dHRvblwiPlByZXZpb3VzPC9idXR0b24+JyxuZXh0QXJyb3c6JzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtcm9sZT1cIm5vbmVcIiBjbGFzcz1cInNsaWNrLW5leHRcIiBhcmlhLWxhYmVsPVwiTmV4dFwiIHRhYmluZGV4PVwiMFwiIHJvbGU9XCJidXR0b25cIj5OZXh0PC9idXR0b24+JyxhdXRvcGxheTohMSxhdXRvcGxheVNwZWVkOjNlMyxjZW50ZXJNb2RlOiExLGNlbnRlclBhZGRpbmc6XCI1MHB4XCIsY3NzRWFzZTpcImVhc2VcIixjdXN0b21QYWdpbmc6ZnVuY3Rpb24oYixjKXtyZXR1cm4gYSgnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1yb2xlPVwibm9uZVwiIHJvbGU9XCJidXR0b25cIiB0YWJpbmRleD1cIjBcIiAvPicpLnRleHQoYysxKX0sZG90czohMSxkb3RzQ2xhc3M6XCJzbGljay1kb3RzXCIsZHJhZ2dhYmxlOiEwLGVhc2luZzpcImxpbmVhclwiLGVkZ2VGcmljdGlvbjouMzUsZmFkZTohMSxmb2N1c09uU2VsZWN0OiExLGluZmluaXRlOiEwLGluaXRpYWxTbGlkZTowLGxhenlMb2FkOlwib25kZW1hbmRcIixtb2JpbGVGaXJzdDohMSxwYXVzZU9uSG92ZXI6ITAscGF1c2VPbkZvY3VzOiEwLHBhdXNlT25Eb3RzSG92ZXI6ITEscmVzcG9uZFRvOlwid2luZG93XCIscmVzcG9uc2l2ZTpudWxsLHJvd3M6MSxydGw6ITEsc2xpZGU6XCJcIixzbGlkZXNQZXJSb3c6MSxzbGlkZXNUb1Nob3c6MSxzbGlkZXNUb1Njcm9sbDoxLHNwZWVkOjUwMCxzd2lwZTohMCxzd2lwZVRvU2xpZGU6ITEsdG91Y2hNb3ZlOiEwLHRvdWNoVGhyZXNob2xkOjUsdXNlQ1NTOiEwLHVzZVRyYW5zZm9ybTohMCx2YXJpYWJsZVdpZHRoOiExLHZlcnRpY2FsOiExLHZlcnRpY2FsU3dpcGluZzohMSx3YWl0Rm9yQW5pbWF0ZTohMCx6SW5kZXg6MWUzfSxlLmluaXRpYWxzPXthbmltYXRpbmc6ITEsZHJhZ2dpbmc6ITEsYXV0b1BsYXlUaW1lcjpudWxsLGN1cnJlbnREaXJlY3Rpb246MCxjdXJyZW50TGVmdDpudWxsLGN1cnJlbnRTbGlkZTowLGRpcmVjdGlvbjoxLCRkb3RzOm51bGwsbGlzdFdpZHRoOm51bGwsbGlzdEhlaWdodDpudWxsLGxvYWRJbmRleDowLCRuZXh0QXJyb3c6bnVsbCwkcHJldkFycm93Om51bGwsc2xpZGVDb3VudDpudWxsLHNsaWRlV2lkdGg6bnVsbCwkc2xpZGVUcmFjazpudWxsLCRzbGlkZXM6bnVsbCxzbGlkaW5nOiExLHNsaWRlT2Zmc2V0OjAsc3dpcGVMZWZ0Om51bGwsJGxpc3Q6bnVsbCx0b3VjaE9iamVjdDp7fSx0cmFuc2Zvcm1zRW5hYmxlZDohMSx1bnNsaWNrZWQ6ITF9LGEuZXh0ZW5kKGUsZS5pbml0aWFscyksZS5hY3RpdmVCcmVha3BvaW50PW51bGwsZS5hbmltVHlwZT1udWxsLGUuYW5pbVByb3A9bnVsbCxlLmJyZWFrcG9pbnRzPVtdLGUuYnJlYWtwb2ludFNldHRpbmdzPVtdLGUuY3NzVHJhbnNpdGlvbnM9ITEsZS5mb2N1c3NlZD0hMSxlLmludGVycnVwdGVkPSExLGUuaGlkZGVuPVwiaGlkZGVuXCIsZS5wYXVzZWQ9ITAsZS5wb3NpdGlvblByb3A9bnVsbCxlLnJlc3BvbmRUbz1udWxsLGUucm93Q291bnQ9MSxlLnNob3VsZENsaWNrPSEwLGUuJHNsaWRlcj1hKGMpLGUuJHNsaWRlc0NhY2hlPW51bGwsZS50cmFuc2Zvcm1UeXBlPW51bGwsZS50cmFuc2l0aW9uVHlwZT1udWxsLGUudmlzaWJpbGl0eUNoYW5nZT1cInZpc2liaWxpdHljaGFuZ2VcIixlLndpbmRvd1dpZHRoPTAsZS53aW5kb3dUaW1lcj1udWxsLGY9YShjKS5kYXRhKFwic2xpY2tcIil8fHt9LGUub3B0aW9ucz1hLmV4dGVuZCh7fSxlLmRlZmF1bHRzLGQsZiksZS5jdXJyZW50U2xpZGU9ZS5vcHRpb25zLmluaXRpYWxTbGlkZSxlLm9yaWdpbmFsU2V0dGluZ3M9ZS5vcHRpb25zLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBkb2N1bWVudC5tb3pIaWRkZW4/KGUuaGlkZGVuPVwibW96SGlkZGVuXCIsZS52aXNpYmlsaXR5Q2hhbmdlPVwibW96dmlzaWJpbGl0eWNoYW5nZVwiKTpcInVuZGVmaW5lZFwiIT10eXBlb2YgZG9jdW1lbnQud2Via2l0SGlkZGVuJiYoZS5oaWRkZW49XCJ3ZWJraXRIaWRkZW5cIixlLnZpc2liaWxpdHlDaGFuZ2U9XCJ3ZWJraXR2aXNpYmlsaXR5Y2hhbmdlXCIpLGUuYXV0b1BsYXk9YS5wcm94eShlLmF1dG9QbGF5LGUpLGUuYXV0b1BsYXlDbGVhcj1hLnByb3h5KGUuYXV0b1BsYXlDbGVhcixlKSxlLmF1dG9QbGF5SXRlcmF0b3I9YS5wcm94eShlLmF1dG9QbGF5SXRlcmF0b3IsZSksZS5jaGFuZ2VTbGlkZT1hLnByb3h5KGUuY2hhbmdlU2xpZGUsZSksZS5jbGlja0hhbmRsZXI9YS5wcm94eShlLmNsaWNrSGFuZGxlcixlKSxlLnNlbGVjdEhhbmRsZXI9YS5wcm94eShlLnNlbGVjdEhhbmRsZXIsZSksZS5zZXRQb3NpdGlvbj1hLnByb3h5KGUuc2V0UG9zaXRpb24sZSksZS5zd2lwZUhhbmRsZXI9YS5wcm94eShlLnN3aXBlSGFuZGxlcixlKSxlLmRyYWdIYW5kbGVyPWEucHJveHkoZS5kcmFnSGFuZGxlcixlKSxlLmtleUhhbmRsZXI9YS5wcm94eShlLmtleUhhbmRsZXIsZSksZS5pbnN0YW5jZVVpZD1iKyssZS5odG1sRXhwcj0vXig/OlxccyooPFtcXHdcXFddKz4pW14+XSopJC8sZS5yZWdpc3RlckJyZWFrcG9pbnRzKCksZS5pbml0KCEwKX12YXIgYj0wO3JldHVybiBjfSgpLGIucHJvdG90eXBlLmFjdGl2YXRlQURBPWZ1bmN0aW9uKCl7dmFyIGE9dGhpczthLiRzbGlkZVRyYWNrLmZpbmQoXCIuc2xpY2stYWN0aXZlXCIpLmF0dHIoe1wiYXJpYS1oaWRkZW5cIjpcImZhbHNlXCJ9KS5maW5kKFwiYSwgaW5wdXQsIGJ1dHRvbiwgc2VsZWN0XCIpLmF0dHIoe3RhYmluZGV4OlwiMFwifSl9LGIucHJvdG90eXBlLmFkZFNsaWRlPWIucHJvdG90eXBlLnNsaWNrQWRkPWZ1bmN0aW9uKGIsYyxkKXt2YXIgZT10aGlzO2lmKFwiYm9vbGVhblwiPT10eXBlb2YgYylkPWMsYz1udWxsO2Vsc2UgaWYoMD5jfHxjPj1lLnNsaWRlQ291bnQpcmV0dXJuITE7ZS51bmxvYWQoKSxcIm51bWJlclwiPT10eXBlb2YgYz8wPT09YyYmMD09PWUuJHNsaWRlcy5sZW5ndGg/YShiKS5hcHBlbmRUbyhlLiRzbGlkZVRyYWNrKTpkP2EoYikuaW5zZXJ0QmVmb3JlKGUuJHNsaWRlcy5lcShjKSk6YShiKS5pbnNlcnRBZnRlcihlLiRzbGlkZXMuZXEoYykpOmQ9PT0hMD9hKGIpLnByZXBlbmRUbyhlLiRzbGlkZVRyYWNrKTphKGIpLmFwcGVuZFRvKGUuJHNsaWRlVHJhY2spLGUuJHNsaWRlcz1lLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSksZS4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLmRldGFjaCgpLGUuJHNsaWRlVHJhY2suYXBwZW5kKGUuJHNsaWRlcyksZS4kc2xpZGVzLmVhY2goZnVuY3Rpb24oYixjKXthKGMpLmF0dHIoXCJkYXRhLXNsaWNrLWluZGV4XCIsYil9KSxlLiRzbGlkZXNDYWNoZT1lLiRzbGlkZXMsZS5yZWluaXQoKX0sYi5wcm90b3R5cGUuYW5pbWF0ZUhlaWdodD1mdW5jdGlvbigpe3ZhciBhPXRoaXM7aWYoMT09PWEub3B0aW9ucy5zbGlkZXNUb1Nob3cmJmEub3B0aW9ucy5hZGFwdGl2ZUhlaWdodD09PSEwJiZhLm9wdGlvbnMudmVydGljYWw9PT0hMSl7dmFyIGI9YS4kc2xpZGVzLmVxKGEuY3VycmVudFNsaWRlKS5vdXRlckhlaWdodCghMCk7YS4kbGlzdC5hbmltYXRlKHtoZWlnaHQ6Yn0sYS5vcHRpb25zLnNwZWVkKX19LGIucHJvdG90eXBlLmFuaW1hdGVTbGlkZT1mdW5jdGlvbihiLGMpe3ZhciBkPXt9LGU9dGhpcztlLmFuaW1hdGVIZWlnaHQoKSxlLm9wdGlvbnMucnRsPT09ITAmJmUub3B0aW9ucy52ZXJ0aWNhbD09PSExJiYoYj0tYiksZS50cmFuc2Zvcm1zRW5hYmxlZD09PSExP2Uub3B0aW9ucy52ZXJ0aWNhbD09PSExP2UuJHNsaWRlVHJhY2suYW5pbWF0ZSh7bGVmdDpifSxlLm9wdGlvbnMuc3BlZWQsZS5vcHRpb25zLmVhc2luZyxjKTplLiRzbGlkZVRyYWNrLmFuaW1hdGUoe3RvcDpifSxlLm9wdGlvbnMuc3BlZWQsZS5vcHRpb25zLmVhc2luZyxjKTplLmNzc1RyYW5zaXRpb25zPT09ITE/KGUub3B0aW9ucy5ydGw9PT0hMCYmKGUuY3VycmVudExlZnQ9LWUuY3VycmVudExlZnQpLGEoe2FuaW1TdGFydDplLmN1cnJlbnRMZWZ0fSkuYW5pbWF0ZSh7YW5pbVN0YXJ0OmJ9LHtkdXJhdGlvbjplLm9wdGlvbnMuc3BlZWQsZWFzaW5nOmUub3B0aW9ucy5lYXNpbmcsc3RlcDpmdW5jdGlvbihhKXthPU1hdGguY2VpbChhKSxlLm9wdGlvbnMudmVydGljYWw9PT0hMT8oZFtlLmFuaW1UeXBlXT1cInRyYW5zbGF0ZShcIithK1wicHgsIDBweClcIixlLiRzbGlkZVRyYWNrLmNzcyhkKSk6KGRbZS5hbmltVHlwZV09XCJ0cmFuc2xhdGUoMHB4LFwiK2ErXCJweClcIixlLiRzbGlkZVRyYWNrLmNzcyhkKSl9LGNvbXBsZXRlOmZ1bmN0aW9uKCl7YyYmYy5jYWxsKCl9fSkpOihlLmFwcGx5VHJhbnNpdGlvbigpLGI9TWF0aC5jZWlsKGIpLGUub3B0aW9ucy52ZXJ0aWNhbD09PSExP2RbZS5hbmltVHlwZV09XCJ0cmFuc2xhdGUzZChcIitiK1wicHgsIDBweCwgMHB4KVwiOmRbZS5hbmltVHlwZV09XCJ0cmFuc2xhdGUzZCgwcHgsXCIrYitcInB4LCAwcHgpXCIsZS4kc2xpZGVUcmFjay5jc3MoZCksYyYmc2V0VGltZW91dChmdW5jdGlvbigpe2UuZGlzYWJsZVRyYW5zaXRpb24oKSxjLmNhbGwoKX0sZS5vcHRpb25zLnNwZWVkKSl9LGIucHJvdG90eXBlLmdldE5hdlRhcmdldD1mdW5jdGlvbigpe3ZhciBiPXRoaXMsYz1iLm9wdGlvbnMuYXNOYXZGb3I7cmV0dXJuIGMmJm51bGwhPT1jJiYoYz1hKGMpLm5vdChiLiRzbGlkZXIpKSxjfSxiLnByb3RvdHlwZS5hc05hdkZvcj1mdW5jdGlvbihiKXt2YXIgYz10aGlzLGQ9Yy5nZXROYXZUYXJnZXQoKTtudWxsIT09ZCYmXCJvYmplY3RcIj09dHlwZW9mIGQmJmQuZWFjaChmdW5jdGlvbigpe3ZhciBjPWEodGhpcykuc2xpY2soXCJnZXRTbGlja1wiKTtjLnVuc2xpY2tlZHx8Yy5zbGlkZUhhbmRsZXIoYiwhMCl9KX0sYi5wcm90b3R5cGUuYXBwbHlUcmFuc2l0aW9uPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMsYz17fTtiLm9wdGlvbnMuZmFkZT09PSExP2NbYi50cmFuc2l0aW9uVHlwZV09Yi50cmFuc2Zvcm1UeXBlK1wiIFwiK2Iub3B0aW9ucy5zcGVlZCtcIm1zIFwiK2Iub3B0aW9ucy5jc3NFYXNlOmNbYi50cmFuc2l0aW9uVHlwZV09XCJvcGFjaXR5IFwiK2Iub3B0aW9ucy5zcGVlZCtcIm1zIFwiK2Iub3B0aW9ucy5jc3NFYXNlLGIub3B0aW9ucy5mYWRlPT09ITE/Yi4kc2xpZGVUcmFjay5jc3MoYyk6Yi4kc2xpZGVzLmVxKGEpLmNzcyhjKX0sYi5wcm90b3R5cGUuYXV0b1BsYXk9ZnVuY3Rpb24oKXt2YXIgYT10aGlzO2EuYXV0b1BsYXlDbGVhcigpLGEuc2xpZGVDb3VudD5hLm9wdGlvbnMuc2xpZGVzVG9TaG93JiYoYS5hdXRvUGxheVRpbWVyPXNldEludGVydmFsKGEuYXV0b1BsYXlJdGVyYXRvcixhLm9wdGlvbnMuYXV0b3BsYXlTcGVlZCkpfSxiLnByb3RvdHlwZS5hdXRvUGxheUNsZWFyPWZ1bmN0aW9uKCl7dmFyIGE9dGhpczthLmF1dG9QbGF5VGltZXImJmNsZWFySW50ZXJ2YWwoYS5hdXRvUGxheVRpbWVyKX0sYi5wcm90b3R5cGUuYXV0b1BsYXlJdGVyYXRvcj1mdW5jdGlvbigpe3ZhciBhPXRoaXMsYj1hLmN1cnJlbnRTbGlkZSthLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7YS5wYXVzZWR8fGEuaW50ZXJydXB0ZWR8fGEuZm9jdXNzZWR8fChhLm9wdGlvbnMuaW5maW5pdGU9PT0hMSYmKDE9PT1hLmRpcmVjdGlvbiYmYS5jdXJyZW50U2xpZGUrMT09PWEuc2xpZGVDb3VudC0xP2EuZGlyZWN0aW9uPTA6MD09PWEuZGlyZWN0aW9uJiYoYj1hLmN1cnJlbnRTbGlkZS1hLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwsYS5jdXJyZW50U2xpZGUtMT09PTAmJihhLmRpcmVjdGlvbj0xKSkpLGEuc2xpZGVIYW5kbGVyKGIpKX0sYi5wcm90b3R5cGUuYnVpbGRBcnJvd3M9ZnVuY3Rpb24oKXt2YXIgYj10aGlzO2Iub3B0aW9ucy5hcnJvd3M9PT0hMCYmKGIuJHByZXZBcnJvdz1hKGIub3B0aW9ucy5wcmV2QXJyb3cpLmFkZENsYXNzKFwic2xpY2stYXJyb3dcIiksYi4kbmV4dEFycm93PWEoYi5vcHRpb25zLm5leHRBcnJvdykuYWRkQ2xhc3MoXCJzbGljay1hcnJvd1wiKSxiLnNsaWRlQ291bnQ+Yi5vcHRpb25zLnNsaWRlc1RvU2hvdz8oYi4kcHJldkFycm93LnJlbW92ZUNsYXNzKFwic2xpY2staGlkZGVuXCIpLnJlbW92ZUF0dHIoXCJhcmlhLWhpZGRlbiB0YWJpbmRleFwiKSxiLiRuZXh0QXJyb3cucmVtb3ZlQ2xhc3MoXCJzbGljay1oaWRkZW5cIikucmVtb3ZlQXR0cihcImFyaWEtaGlkZGVuIHRhYmluZGV4XCIpLGIuaHRtbEV4cHIudGVzdChiLm9wdGlvbnMucHJldkFycm93KSYmYi4kcHJldkFycm93LnByZXBlbmRUbyhiLm9wdGlvbnMuYXBwZW5kQXJyb3dzKSxiLmh0bWxFeHByLnRlc3QoYi5vcHRpb25zLm5leHRBcnJvdykmJmIuJG5leHRBcnJvdy5hcHBlbmRUbyhiLm9wdGlvbnMuYXBwZW5kQXJyb3dzKSxiLm9wdGlvbnMuaW5maW5pdGUhPT0hMCYmYi4kcHJldkFycm93LmFkZENsYXNzKFwic2xpY2stZGlzYWJsZWRcIikuYXR0cihcImFyaWEtZGlzYWJsZWRcIixcInRydWVcIikpOmIuJHByZXZBcnJvdy5hZGQoYi4kbmV4dEFycm93KS5hZGRDbGFzcyhcInNsaWNrLWhpZGRlblwiKS5hdHRyKHtcImFyaWEtZGlzYWJsZWRcIjpcInRydWVcIix0YWJpbmRleDpcIi0xXCJ9KSl9LGIucHJvdG90eXBlLmJ1aWxkRG90cz1mdW5jdGlvbigpe3ZhciBjLGQsYj10aGlzO2lmKGIub3B0aW9ucy5kb3RzPT09ITAmJmIuc2xpZGVDb3VudD5iLm9wdGlvbnMuc2xpZGVzVG9TaG93KXtmb3IoYi4kc2xpZGVyLmFkZENsYXNzKFwic2xpY2stZG90dGVkXCIpLGQ9YShcIjx1bCAvPlwiKS5hZGRDbGFzcyhiLm9wdGlvbnMuZG90c0NsYXNzKSxjPTA7Yzw9Yi5nZXREb3RDb3VudCgpO2MrPTEpZC5hcHBlbmQoYShcIjxsaSAvPlwiKS5hcHBlbmQoYi5vcHRpb25zLmN1c3RvbVBhZ2luZy5jYWxsKHRoaXMsYixjKSkpO2IuJGRvdHM9ZC5hcHBlbmRUbyhiLm9wdGlvbnMuYXBwZW5kRG90cyksYi4kZG90cy5maW5kKFwibGlcIikuZmlyc3QoKS5hZGRDbGFzcyhcInNsaWNrLWFjdGl2ZVwiKS5hdHRyKFwiYXJpYS1oaWRkZW5cIixcImZhbHNlXCIpfX0sYi5wcm90b3R5cGUuYnVpbGRPdXQ9ZnVuY3Rpb24oKXt2YXIgYj10aGlzO2IuJHNsaWRlcz1iLiRzbGlkZXIuY2hpbGRyZW4oYi5vcHRpb25zLnNsaWRlK1wiOm5vdCguc2xpY2stY2xvbmVkKVwiKS5hZGRDbGFzcyhcInNsaWNrLXNsaWRlXCIpLGIuc2xpZGVDb3VudD1iLiRzbGlkZXMubGVuZ3RoLGIuJHNsaWRlcy5lYWNoKGZ1bmN0aW9uKGIsYyl7YShjKS5hdHRyKFwiZGF0YS1zbGljay1pbmRleFwiLGIpLmRhdGEoXCJvcmlnaW5hbFN0eWxpbmdcIixhKGMpLmF0dHIoXCJzdHlsZVwiKXx8XCJcIil9KSxiLiRzbGlkZXIuYWRkQ2xhc3MoXCJzbGljay1zbGlkZXJcIiksYi4kc2xpZGVUcmFjaz0wPT09Yi5zbGlkZUNvdW50P2EoJzxkaXYgY2xhc3M9XCJzbGljay10cmFja1wiLz4nKS5hcHBlbmRUbyhiLiRzbGlkZXIpOmIuJHNsaWRlcy53cmFwQWxsKCc8ZGl2IGNsYXNzPVwic2xpY2stdHJhY2tcIi8+JykucGFyZW50KCksYi4kbGlzdD1iLiRzbGlkZVRyYWNrLndyYXAoJzxkaXYgYXJpYS1saXZlPVwicG9saXRlXCIgY2xhc3M9XCJzbGljay1saXN0XCIvPicpLnBhcmVudCgpLGIuJHNsaWRlVHJhY2suY3NzKFwib3BhY2l0eVwiLDApLChiLm9wdGlvbnMuY2VudGVyTW9kZT09PSEwfHxiLm9wdGlvbnMuc3dpcGVUb1NsaWRlPT09ITApJiYoYi5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsPTEpLGEoXCJpbWdbZGF0YS1sYXp5XVwiLGIuJHNsaWRlcikubm90KFwiW3NyY11cIikuYWRkQ2xhc3MoXCJzbGljay1sb2FkaW5nXCIpLGIuc2V0dXBJbmZpbml0ZSgpLGIuYnVpbGRBcnJvd3MoKSxiLmJ1aWxkRG90cygpLGIudXBkYXRlRG90cygpLGIuc2V0U2xpZGVDbGFzc2VzKFwibnVtYmVyXCI9PXR5cGVvZiBiLmN1cnJlbnRTbGlkZT9iLmN1cnJlbnRTbGlkZTowKSxiLm9wdGlvbnMuZHJhZ2dhYmxlPT09ITAmJmIuJGxpc3QuYWRkQ2xhc3MoXCJkcmFnZ2FibGVcIil9LGIucHJvdG90eXBlLmJ1aWxkUm93cz1mdW5jdGlvbigpe3ZhciBiLGMsZCxlLGYsZyxoLGE9dGhpcztpZihlPWRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxnPWEuJHNsaWRlci5jaGlsZHJlbigpLGEub3B0aW9ucy5yb3dzPjEpe2ZvcihoPWEub3B0aW9ucy5zbGlkZXNQZXJSb3cqYS5vcHRpb25zLnJvd3MsZj1NYXRoLmNlaWwoZy5sZW5ndGgvaCksYj0wO2Y+YjtiKyspe3ZhciBpPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7Zm9yKGM9MDtjPGEub3B0aW9ucy5yb3dzO2MrKyl7dmFyIGo9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtmb3IoZD0wO2Q8YS5vcHRpb25zLnNsaWRlc1BlclJvdztkKyspe3ZhciBrPWIqaCsoYyphLm9wdGlvbnMuc2xpZGVzUGVyUm93K2QpO2cuZ2V0KGspJiZqLmFwcGVuZENoaWxkKGcuZ2V0KGspKX1pLmFwcGVuZENoaWxkKGopfWUuYXBwZW5kQ2hpbGQoaSl9YS4kc2xpZGVyLmVtcHR5KCkuYXBwZW5kKGUpLGEuJHNsaWRlci5jaGlsZHJlbigpLmNoaWxkcmVuKCkuY2hpbGRyZW4oKS5jc3Moe3dpZHRoOjEwMC9hLm9wdGlvbnMuc2xpZGVzUGVyUm93K1wiJVwiLGRpc3BsYXk6XCJpbmxpbmUtYmxvY2tcIn0pfX0sYi5wcm90b3R5cGUuY2hlY2tSZXNwb25zaXZlPWZ1bmN0aW9uKGIsYyl7dmFyIGUsZixnLGQ9dGhpcyxoPSExLGk9ZC4kc2xpZGVyLndpZHRoKCksaj13aW5kb3cuaW5uZXJXaWR0aHx8YSh3aW5kb3cpLndpZHRoKCk7aWYoXCJ3aW5kb3dcIj09PWQucmVzcG9uZFRvP2c9ajpcInNsaWRlclwiPT09ZC5yZXNwb25kVG8/Zz1pOlwibWluXCI9PT1kLnJlc3BvbmRUbyYmKGc9TWF0aC5taW4oaixpKSksZC5vcHRpb25zLnJlc3BvbnNpdmUmJmQub3B0aW9ucy5yZXNwb25zaXZlLmxlbmd0aCYmbnVsbCE9PWQub3B0aW9ucy5yZXNwb25zaXZlKXtmPW51bGw7Zm9yKGUgaW4gZC5icmVha3BvaW50cylkLmJyZWFrcG9pbnRzLmhhc093blByb3BlcnR5KGUpJiYoZC5vcmlnaW5hbFNldHRpbmdzLm1vYmlsZUZpcnN0PT09ITE/ZzxkLmJyZWFrcG9pbnRzW2VdJiYoZj1kLmJyZWFrcG9pbnRzW2VdKTpnPmQuYnJlYWtwb2ludHNbZV0mJihmPWQuYnJlYWtwb2ludHNbZV0pKTtudWxsIT09Zj9udWxsIT09ZC5hY3RpdmVCcmVha3BvaW50PyhmIT09ZC5hY3RpdmVCcmVha3BvaW50fHxjKSYmKGQuYWN0aXZlQnJlYWtwb2ludD1mLFwidW5zbGlja1wiPT09ZC5icmVha3BvaW50U2V0dGluZ3NbZl0/ZC51bnNsaWNrKGYpOihkLm9wdGlvbnM9YS5leHRlbmQoe30sZC5vcmlnaW5hbFNldHRpbmdzLGQuYnJlYWtwb2ludFNldHRpbmdzW2ZdKSxiPT09ITAmJihkLmN1cnJlbnRTbGlkZT1kLm9wdGlvbnMuaW5pdGlhbFNsaWRlKSxkLnJlZnJlc2goYikpLGg9Zik6KGQuYWN0aXZlQnJlYWtwb2ludD1mLFwidW5zbGlja1wiPT09ZC5icmVha3BvaW50U2V0dGluZ3NbZl0/ZC51bnNsaWNrKGYpOihkLm9wdGlvbnM9YS5leHRlbmQoe30sZC5vcmlnaW5hbFNldHRpbmdzLGQuYnJlYWtwb2ludFNldHRpbmdzW2ZdKSxiPT09ITAmJihkLmN1cnJlbnRTbGlkZT1kLm9wdGlvbnMuaW5pdGlhbFNsaWRlKSxkLnJlZnJlc2goYikpLGg9Zik6bnVsbCE9PWQuYWN0aXZlQnJlYWtwb2ludCYmKGQuYWN0aXZlQnJlYWtwb2ludD1udWxsLGQub3B0aW9ucz1kLm9yaWdpbmFsU2V0dGluZ3MsYj09PSEwJiYoZC5jdXJyZW50U2xpZGU9ZC5vcHRpb25zLmluaXRpYWxTbGlkZSksZC5yZWZyZXNoKGIpLGg9ZiksYnx8aD09PSExfHxkLiRzbGlkZXIudHJpZ2dlcihcImJyZWFrcG9pbnRcIixbZCxoXSl9fSxiLnByb3RvdHlwZS5jaGFuZ2VTbGlkZT1mdW5jdGlvbihiLGMpe3ZhciBmLGcsaCxkPXRoaXMsZT1hKGIuY3VycmVudFRhcmdldCk7c3dpdGNoKGUuaXMoXCJhXCIpJiZiLnByZXZlbnREZWZhdWx0KCksZS5pcyhcImxpXCIpfHwoZT1lLmNsb3Nlc3QoXCJsaVwiKSksaD1kLnNsaWRlQ291bnQlZC5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIT09MCxmPWg/MDooZC5zbGlkZUNvdW50LWQuY3VycmVudFNsaWRlKSVkLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwsYi5kYXRhLm1lc3NhZ2Upe2Nhc2VcInByZXZpb3VzXCI6Zz0wPT09Zj9kLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw6ZC5vcHRpb25zLnNsaWRlc1RvU2hvdy1mLGQuc2xpZGVDb3VudD5kLm9wdGlvbnMuc2xpZGVzVG9TaG93JiZkLnNsaWRlSGFuZGxlcihkLmN1cnJlbnRTbGlkZS1nLCExLGMpO2JyZWFrO2Nhc2VcIm5leHRcIjpnPTA9PT1mP2Qub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDpmLGQuc2xpZGVDb3VudD5kLm9wdGlvbnMuc2xpZGVzVG9TaG93JiZkLnNsaWRlSGFuZGxlcihkLmN1cnJlbnRTbGlkZStnLCExLGMpO2JyZWFrO2Nhc2VcImluZGV4XCI6dmFyIGk9MD09PWIuZGF0YS5pbmRleD8wOmIuZGF0YS5pbmRleHx8ZS5pbmRleCgpKmQub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtkLnNsaWRlSGFuZGxlcihkLmNoZWNrTmF2aWdhYmxlKGkpLCExLGMpLGUuY2hpbGRyZW4oKS50cmlnZ2VyKFwiZm9jdXNcIik7YnJlYWs7ZGVmYXVsdDpyZXR1cm59fSxiLnByb3RvdHlwZS5jaGVja05hdmlnYWJsZT1mdW5jdGlvbihhKXt2YXIgYyxkLGI9dGhpcztpZihjPWIuZ2V0TmF2aWdhYmxlSW5kZXhlcygpLGQ9MCxhPmNbYy5sZW5ndGgtMV0pYT1jW2MubGVuZ3RoLTFdO2Vsc2UgZm9yKHZhciBlIGluIGMpe2lmKGE8Y1tlXSl7YT1kO2JyZWFrfWQ9Y1tlXX1yZXR1cm4gYX0sYi5wcm90b3R5cGUuY2xlYW5VcEV2ZW50cz1mdW5jdGlvbigpe3ZhciBiPXRoaXM7Yi5vcHRpb25zLmRvdHMmJm51bGwhPT1iLiRkb3RzJiZhKFwibGlcIixiLiRkb3RzKS5vZmYoXCJjbGljay5zbGlja1wiLGIuY2hhbmdlU2xpZGUpLm9mZihcIm1vdXNlZW50ZXIuc2xpY2tcIixhLnByb3h5KGIuaW50ZXJydXB0LGIsITApKS5vZmYoXCJtb3VzZWxlYXZlLnNsaWNrXCIsYS5wcm94eShiLmludGVycnVwdCxiLCExKSksYi4kc2xpZGVyLm9mZihcImZvY3VzLnNsaWNrIGJsdXIuc2xpY2tcIiksYi5vcHRpb25zLmFycm93cz09PSEwJiZiLnNsaWRlQ291bnQ+Yi5vcHRpb25zLnNsaWRlc1RvU2hvdyYmKGIuJHByZXZBcnJvdyYmYi4kcHJldkFycm93Lm9mZihcImNsaWNrLnNsaWNrXCIsYi5jaGFuZ2VTbGlkZSksYi4kbmV4dEFycm93JiZiLiRuZXh0QXJyb3cub2ZmKFwiY2xpY2suc2xpY2tcIixiLmNoYW5nZVNsaWRlKSksYi4kbGlzdC5vZmYoXCJ0b3VjaHN0YXJ0LnNsaWNrIG1vdXNlZG93bi5zbGlja1wiLGIuc3dpcGVIYW5kbGVyKSxiLiRsaXN0Lm9mZihcInRvdWNobW92ZS5zbGljayBtb3VzZW1vdmUuc2xpY2tcIixiLnN3aXBlSGFuZGxlciksYi4kbGlzdC5vZmYoXCJ0b3VjaGVuZC5zbGljayBtb3VzZXVwLnNsaWNrXCIsYi5zd2lwZUhhbmRsZXIpLGIuJGxpc3Qub2ZmKFwidG91Y2hjYW5jZWwuc2xpY2sgbW91c2VsZWF2ZS5zbGlja1wiLGIuc3dpcGVIYW5kbGVyKSxiLiRsaXN0Lm9mZihcImNsaWNrLnNsaWNrXCIsYi5jbGlja0hhbmRsZXIpLGEoZG9jdW1lbnQpLm9mZihiLnZpc2liaWxpdHlDaGFuZ2UsYi52aXNpYmlsaXR5KSxiLmNsZWFuVXBTbGlkZUV2ZW50cygpLGIub3B0aW9ucy5hY2Nlc3NpYmlsaXR5PT09ITAmJmIuJGxpc3Qub2ZmKFwia2V5ZG93bi5zbGlja1wiLGIua2V5SGFuZGxlciksYi5vcHRpb25zLmZvY3VzT25TZWxlY3Q9PT0hMCYmYShiLiRzbGlkZVRyYWNrKS5jaGlsZHJlbigpLm9mZihcImNsaWNrLnNsaWNrXCIsYi5zZWxlY3RIYW5kbGVyKSxhKHdpbmRvdykub2ZmKFwib3JpZW50YXRpb25jaGFuZ2Uuc2xpY2suc2xpY2stXCIrYi5pbnN0YW5jZVVpZCxiLm9yaWVudGF0aW9uQ2hhbmdlKSxhKHdpbmRvdykub2ZmKFwicmVzaXplLnNsaWNrLnNsaWNrLVwiK2IuaW5zdGFuY2VVaWQsYi5yZXNpemUpLGEoXCJbZHJhZ2dhYmxlIT10cnVlXVwiLGIuJHNsaWRlVHJhY2spLm9mZihcImRyYWdzdGFydFwiLGIucHJldmVudERlZmF1bHQpLGEod2luZG93KS5vZmYoXCJsb2FkLnNsaWNrLnNsaWNrLVwiK2IuaW5zdGFuY2VVaWQsYi5zZXRQb3NpdGlvbiksYShkb2N1bWVudCkub2ZmKFwicmVhZHkuc2xpY2suc2xpY2stXCIrYi5pbnN0YW5jZVVpZCxiLnNldFBvc2l0aW9uKX0sYi5wcm90b3R5cGUuY2xlYW5VcFNsaWRlRXZlbnRzPWZ1bmN0aW9uKCl7dmFyIGI9dGhpcztiLiRsaXN0Lm9mZihcIm1vdXNlZW50ZXIuc2xpY2tcIixhLnByb3h5KGIuaW50ZXJydXB0LGIsITApKSxiLiRsaXN0Lm9mZihcIm1vdXNlbGVhdmUuc2xpY2tcIixhLnByb3h5KGIuaW50ZXJydXB0LGIsITEpKX0sYi5wcm90b3R5cGUuY2xlYW5VcFJvd3M9ZnVuY3Rpb24oKXt2YXIgYixhPXRoaXM7YS5vcHRpb25zLnJvd3M+MSYmKGI9YS4kc2xpZGVzLmNoaWxkcmVuKCkuY2hpbGRyZW4oKSxiLnJlbW92ZUF0dHIoXCJzdHlsZVwiKSxhLiRzbGlkZXIuZW1wdHkoKS5hcHBlbmQoYikpfSxiLnByb3RvdHlwZS5jbGlja0hhbmRsZXI9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcztiLnNob3VsZENsaWNrPT09ITEmJihhLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpLGEuc3RvcFByb3BhZ2F0aW9uKCksYS5wcmV2ZW50RGVmYXVsdCgpKX0sYi5wcm90b3R5cGUuZGVzdHJveT1mdW5jdGlvbihiKXt2YXIgYz10aGlzO2MuYXV0b1BsYXlDbGVhcigpLGMudG91Y2hPYmplY3Q9e30sYy5jbGVhblVwRXZlbnRzKCksYShcIi5zbGljay1jbG9uZWRcIixjLiRzbGlkZXIpLmRldGFjaCgpLGMuJGRvdHMmJmMuJGRvdHMucmVtb3ZlKCksYy4kcHJldkFycm93JiZjLiRwcmV2QXJyb3cubGVuZ3RoJiYoYy4kcHJldkFycm93LnJlbW92ZUNsYXNzKFwic2xpY2stZGlzYWJsZWQgc2xpY2stYXJyb3cgc2xpY2staGlkZGVuXCIpLnJlbW92ZUF0dHIoXCJhcmlhLWhpZGRlbiBhcmlhLWRpc2FibGVkIHRhYmluZGV4XCIpLmNzcyhcImRpc3BsYXlcIixcIlwiKSxjLmh0bWxFeHByLnRlc3QoYy5vcHRpb25zLnByZXZBcnJvdykmJmMuJHByZXZBcnJvdy5yZW1vdmUoKSksYy4kbmV4dEFycm93JiZjLiRuZXh0QXJyb3cubGVuZ3RoJiYoYy4kbmV4dEFycm93LnJlbW92ZUNsYXNzKFwic2xpY2stZGlzYWJsZWQgc2xpY2stYXJyb3cgc2xpY2staGlkZGVuXCIpLnJlbW92ZUF0dHIoXCJhcmlhLWhpZGRlbiBhcmlhLWRpc2FibGVkIHRhYmluZGV4XCIpLmNzcyhcImRpc3BsYXlcIixcIlwiKSxjLmh0bWxFeHByLnRlc3QoYy5vcHRpb25zLm5leHRBcnJvdykmJmMuJG5leHRBcnJvdy5yZW1vdmUoKSksYy4kc2xpZGVzJiYoYy4kc2xpZGVzLnJlbW92ZUNsYXNzKFwic2xpY2stc2xpZGUgc2xpY2stYWN0aXZlIHNsaWNrLWNlbnRlciBzbGljay12aXNpYmxlIHNsaWNrLWN1cnJlbnRcIikucmVtb3ZlQXR0cihcImFyaWEtaGlkZGVuXCIpLnJlbW92ZUF0dHIoXCJkYXRhLXNsaWNrLWluZGV4XCIpLmVhY2goZnVuY3Rpb24oKXthKHRoaXMpLmF0dHIoXCJzdHlsZVwiLGEodGhpcykuZGF0YShcIm9yaWdpbmFsU3R5bGluZ1wiKSl9KSxjLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSkuZGV0YWNoKCksYy4kc2xpZGVUcmFjay5kZXRhY2goKSxjLiRsaXN0LmRldGFjaCgpLGMuJHNsaWRlci5hcHBlbmQoYy4kc2xpZGVzKSksYy5jbGVhblVwUm93cygpLGMuJHNsaWRlci5yZW1vdmVDbGFzcyhcInNsaWNrLXNsaWRlclwiKSxjLiRzbGlkZXIucmVtb3ZlQ2xhc3MoXCJzbGljay1pbml0aWFsaXplZFwiKSxjLiRzbGlkZXIucmVtb3ZlQ2xhc3MoXCJzbGljay1kb3R0ZWRcIiksYy51bnNsaWNrZWQ9ITAsYnx8Yy4kc2xpZGVyLnRyaWdnZXIoXCJkZXN0cm95XCIsW2NdKX0sYi5wcm90b3R5cGUuZGlzYWJsZVRyYW5zaXRpb249ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcyxjPXt9O2NbYi50cmFuc2l0aW9uVHlwZV09XCJcIixiLm9wdGlvbnMuZmFkZT09PSExP2IuJHNsaWRlVHJhY2suY3NzKGMpOmIuJHNsaWRlcy5lcShhKS5jc3MoYyl9LGIucHJvdG90eXBlLmZhZGVTbGlkZT1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXM7Yy5jc3NUcmFuc2l0aW9ucz09PSExPyhjLiRzbGlkZXMuZXEoYSkuY3NzKHt6SW5kZXg6Yy5vcHRpb25zLnpJbmRleH0pLGMuJHNsaWRlcy5lcShhKS5hbmltYXRlKHtvcGFjaXR5OjF9LGMub3B0aW9ucy5zcGVlZCxjLm9wdGlvbnMuZWFzaW5nLGIpKTooYy5hcHBseVRyYW5zaXRpb24oYSksYy4kc2xpZGVzLmVxKGEpLmNzcyh7b3BhY2l0eToxLHpJbmRleDpjLm9wdGlvbnMuekluZGV4fSksYiYmc2V0VGltZW91dChmdW5jdGlvbigpe2MuZGlzYWJsZVRyYW5zaXRpb24oYSksYi5jYWxsKCl9LGMub3B0aW9ucy5zcGVlZCkpfSxiLnByb3RvdHlwZS5mYWRlU2xpZGVPdXQ9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcztiLmNzc1RyYW5zaXRpb25zPT09ITE/Yi4kc2xpZGVzLmVxKGEpLmFuaW1hdGUoe29wYWNpdHk6MCx6SW5kZXg6Yi5vcHRpb25zLnpJbmRleC0yfSxiLm9wdGlvbnMuc3BlZWQsYi5vcHRpb25zLmVhc2luZyk6KGIuYXBwbHlUcmFuc2l0aW9uKGEpLGIuJHNsaWRlcy5lcShhKS5jc3Moe29wYWNpdHk6MCx6SW5kZXg6Yi5vcHRpb25zLnpJbmRleC0yfSkpfSxiLnByb3RvdHlwZS5maWx0ZXJTbGlkZXM9Yi5wcm90b3R5cGUuc2xpY2tGaWx0ZXI9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcztudWxsIT09YSYmKGIuJHNsaWRlc0NhY2hlPWIuJHNsaWRlcyxiLnVubG9hZCgpLGIuJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5kZXRhY2goKSxiLiRzbGlkZXNDYWNoZS5maWx0ZXIoYSkuYXBwZW5kVG8oYi4kc2xpZGVUcmFjayksYi5yZWluaXQoKSl9LGIucHJvdG90eXBlLmZvY3VzSGFuZGxlcj1mdW5jdGlvbigpe3ZhciBiPXRoaXM7Yi4kc2xpZGVyLm9mZihcImZvY3VzLnNsaWNrIGJsdXIuc2xpY2tcIikub24oXCJmb2N1cy5zbGljayBibHVyLnNsaWNrXCIsXCIqOm5vdCguc2xpY2stYXJyb3cpXCIsZnVuY3Rpb24oYyl7Yy5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTt2YXIgZD1hKHRoaXMpO3NldFRpbWVvdXQoZnVuY3Rpb24oKXtiLm9wdGlvbnMucGF1c2VPbkZvY3VzJiYoYi5mb2N1c3NlZD1kLmlzKFwiOmZvY3VzXCIpLGIuYXV0b1BsYXkoKSl9LDApfSl9LGIucHJvdG90eXBlLmdldEN1cnJlbnQ9Yi5wcm90b3R5cGUuc2xpY2tDdXJyZW50U2xpZGU9ZnVuY3Rpb24oKXt2YXIgYT10aGlzO3JldHVybiBhLmN1cnJlbnRTbGlkZX0sYi5wcm90b3R5cGUuZ2V0RG90Q291bnQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLGI9MCxjPTAsZD0wO2lmKGEub3B0aW9ucy5pbmZpbml0ZT09PSEwKWZvcig7YjxhLnNsaWRlQ291bnQ7KSsrZCxiPWMrYS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsLGMrPWEub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDw9YS5vcHRpb25zLnNsaWRlc1RvU2hvdz9hLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw6YS5vcHRpb25zLnNsaWRlc1RvU2hvdztlbHNlIGlmKGEub3B0aW9ucy5jZW50ZXJNb2RlPT09ITApZD1hLnNsaWRlQ291bnQ7ZWxzZSBpZihhLm9wdGlvbnMuYXNOYXZGb3IpZm9yKDtiPGEuc2xpZGVDb3VudDspKytkLGI9YythLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwsYys9YS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsPD1hLm9wdGlvbnMuc2xpZGVzVG9TaG93P2Eub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDphLm9wdGlvbnMuc2xpZGVzVG9TaG93O2Vsc2UgZD0xK01hdGguY2VpbCgoYS5zbGlkZUNvdW50LWEub3B0aW9ucy5zbGlkZXNUb1Nob3cpL2Eub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCk7cmV0dXJuIGQtMX0sYi5wcm90b3R5cGUuZ2V0TGVmdD1mdW5jdGlvbihhKXt2YXIgYyxkLGYsYj10aGlzLGU9MDtyZXR1cm4gYi5zbGlkZU9mZnNldD0wLGQ9Yi4kc2xpZGVzLmZpcnN0KCkub3V0ZXJIZWlnaHQoITApLGIub3B0aW9ucy5pbmZpbml0ZT09PSEwPyhiLnNsaWRlQ291bnQ+Yi5vcHRpb25zLnNsaWRlc1RvU2hvdyYmKGIuc2xpZGVPZmZzZXQ9Yi5zbGlkZVdpZHRoKmIub3B0aW9ucy5zbGlkZXNUb1Nob3cqLTEsZT1kKmIub3B0aW9ucy5zbGlkZXNUb1Nob3cqLTEpLGIuc2xpZGVDb3VudCViLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwhPT0wJiZhK2Iub3B0aW9ucy5zbGlkZXNUb1Njcm9sbD5iLnNsaWRlQ291bnQmJmIuc2xpZGVDb3VudD5iLm9wdGlvbnMuc2xpZGVzVG9TaG93JiYoYT5iLnNsaWRlQ291bnQ/KGIuc2xpZGVPZmZzZXQ9KGIub3B0aW9ucy5zbGlkZXNUb1Nob3ctKGEtYi5zbGlkZUNvdW50KSkqYi5zbGlkZVdpZHRoKi0xLGU9KGIub3B0aW9ucy5zbGlkZXNUb1Nob3ctKGEtYi5zbGlkZUNvdW50KSkqZCotMSk6KGIuc2xpZGVPZmZzZXQ9Yi5zbGlkZUNvdW50JWIub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCpiLnNsaWRlV2lkdGgqLTEsZT1iLnNsaWRlQ291bnQlYi5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKmQqLTEpKSk6YStiLm9wdGlvbnMuc2xpZGVzVG9TaG93PmIuc2xpZGVDb3VudCYmKGIuc2xpZGVPZmZzZXQ9KGErYi5vcHRpb25zLnNsaWRlc1RvU2hvdy1iLnNsaWRlQ291bnQpKmIuc2xpZGVXaWR0aCxlPShhK2Iub3B0aW9ucy5zbGlkZXNUb1Nob3ctYi5zbGlkZUNvdW50KSpkKSxiLnNsaWRlQ291bnQ8PWIub3B0aW9ucy5zbGlkZXNUb1Nob3cmJihiLnNsaWRlT2Zmc2V0PTAsZT0wKSxiLm9wdGlvbnMuY2VudGVyTW9kZT09PSEwJiZiLm9wdGlvbnMuaW5maW5pdGU9PT0hMD9iLnNsaWRlT2Zmc2V0Kz1iLnNsaWRlV2lkdGgqTWF0aC5mbG9vcihiLm9wdGlvbnMuc2xpZGVzVG9TaG93LzIpLWIuc2xpZGVXaWR0aDpiLm9wdGlvbnMuY2VudGVyTW9kZT09PSEwJiYoYi5zbGlkZU9mZnNldD0wLGIuc2xpZGVPZmZzZXQrPWIuc2xpZGVXaWR0aCpNYXRoLmZsb29yKGIub3B0aW9ucy5zbGlkZXNUb1Nob3cvMikpLGM9Yi5vcHRpb25zLnZlcnRpY2FsPT09ITE/YSpiLnNsaWRlV2lkdGgqLTErYi5zbGlkZU9mZnNldDphKmQqLTErZSxiLm9wdGlvbnMudmFyaWFibGVXaWR0aD09PSEwJiYoZj1iLnNsaWRlQ291bnQ8PWIub3B0aW9ucy5zbGlkZXNUb1Nob3d8fGIub3B0aW9ucy5pbmZpbml0ZT09PSExP2IuJHNsaWRlVHJhY2suY2hpbGRyZW4oXCIuc2xpY2stc2xpZGVcIikuZXEoYSk6Yi4kc2xpZGVUcmFjay5jaGlsZHJlbihcIi5zbGljay1zbGlkZVwiKS5lcShhK2Iub3B0aW9ucy5zbGlkZXNUb1Nob3cpLGM9Yi5vcHRpb25zLnJ0bD09PSEwP2ZbMF0/LTEqKGIuJHNsaWRlVHJhY2sud2lkdGgoKS1mWzBdLm9mZnNldExlZnQtZi53aWR0aCgpKTowOmZbMF0/LTEqZlswXS5vZmZzZXRMZWZ0OjAsYi5vcHRpb25zLmNlbnRlck1vZGU9PT0hMCYmKGY9Yi5zbGlkZUNvdW50PD1iLm9wdGlvbnMuc2xpZGVzVG9TaG93fHxiLm9wdGlvbnMuaW5maW5pdGU9PT0hMT9iLiRzbGlkZVRyYWNrLmNoaWxkcmVuKFwiLnNsaWNrLXNsaWRlXCIpLmVxKGEpOmIuJHNsaWRlVHJhY2suY2hpbGRyZW4oXCIuc2xpY2stc2xpZGVcIikuZXEoYStiLm9wdGlvbnMuc2xpZGVzVG9TaG93KzEpLGM9Yi5vcHRpb25zLnJ0bD09PSEwP2ZbMF0/LTEqKGIuJHNsaWRlVHJhY2sud2lkdGgoKS1mWzBdLm9mZnNldExlZnQtZi53aWR0aCgpKTowOmZbMF0/LTEqZlswXS5vZmZzZXRMZWZ0OjAsYys9KGIuJGxpc3Qud2lkdGgoKS1mLm91dGVyV2lkdGgoKSkvMikpLGN9LGIucHJvdG90eXBlLmdldE9wdGlvbj1iLnByb3RvdHlwZS5zbGlja0dldE9wdGlvbj1mdW5jdGlvbihhKXt2YXIgYj10aGlzO3JldHVybiBiLm9wdGlvbnNbYV19LGIucHJvdG90eXBlLmdldE5hdmlnYWJsZUluZGV4ZXM9ZnVuY3Rpb24oKXt2YXIgZSxhPXRoaXMsYj0wLGM9MCxkPVtdO2ZvcihhLm9wdGlvbnMuaW5maW5pdGU9PT0hMT9lPWEuc2xpZGVDb3VudDooYj0tMSphLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwsYz0tMSphLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwsZT0yKmEuc2xpZGVDb3VudCk7ZT5iOylkLnB1c2goYiksYj1jK2Eub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCxjKz1hLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw8PWEub3B0aW9ucy5zbGlkZXNUb1Nob3c/YS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsOmEub3B0aW9ucy5zbGlkZXNUb1Nob3c7cmV0dXJuIGR9LGIucHJvdG90eXBlLmdldFNsaWNrPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9LGIucHJvdG90eXBlLmdldFNsaWRlQ291bnQ9ZnVuY3Rpb24oKXt2YXIgYyxkLGUsYj10aGlzO3JldHVybiBlPWIub3B0aW9ucy5jZW50ZXJNb2RlPT09ITA/Yi5zbGlkZVdpZHRoKk1hdGguZmxvb3IoYi5vcHRpb25zLnNsaWRlc1RvU2hvdy8yKTowLGIub3B0aW9ucy5zd2lwZVRvU2xpZGU9PT0hMD8oYi4kc2xpZGVUcmFjay5maW5kKFwiLnNsaWNrLXNsaWRlXCIpLmVhY2goZnVuY3Rpb24oYyxmKXtyZXR1cm4gZi5vZmZzZXRMZWZ0LWUrYShmKS5vdXRlcldpZHRoKCkvMj4tMSpiLnN3aXBlTGVmdD8oZD1mLCExKTp2b2lkIDB9KSxjPU1hdGguYWJzKGEoZCkuYXR0cihcImRhdGEtc2xpY2staW5kZXhcIiktYi5jdXJyZW50U2xpZGUpfHwxKTpiLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGx9LGIucHJvdG90eXBlLmdvVG89Yi5wcm90b3R5cGUuc2xpY2tHb1RvPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcztjLmNoYW5nZVNsaWRlKHtkYXRhOnttZXNzYWdlOlwiaW5kZXhcIixpbmRleDpwYXJzZUludChhKX19LGIpfSxiLnByb3RvdHlwZS5pbml0PWZ1bmN0aW9uKGIpe3ZhciBjPXRoaXM7YShjLiRzbGlkZXIpLmhhc0NsYXNzKFwic2xpY2staW5pdGlhbGl6ZWRcIil8fChhKGMuJHNsaWRlcikuYWRkQ2xhc3MoXCJzbGljay1pbml0aWFsaXplZFwiKSxjLmJ1aWxkUm93cygpLGMuYnVpbGRPdXQoKSxjLnNldFByb3BzKCksYy5zdGFydExvYWQoKSxjLmxvYWRTbGlkZXIoKSxjLmluaXRpYWxpemVFdmVudHMoKSxjLnVwZGF0ZUFycm93cygpLGMudXBkYXRlRG90cygpLGMuY2hlY2tSZXNwb25zaXZlKCEwKSxjLmZvY3VzSGFuZGxlcigpKSxiJiZjLiRzbGlkZXIudHJpZ2dlcihcImluaXRcIixbY10pLGMub3B0aW9ucy5hY2Nlc3NpYmlsaXR5PT09ITAmJmMuaW5pdEFEQSgpLGMub3B0aW9ucy5hdXRvcGxheSYmKGMucGF1c2VkPSExLGMuYXV0b1BsYXkoKSl9LGIucHJvdG90eXBlLmluaXRBREE9ZnVuY3Rpb24oKXt2YXIgYj10aGlzO2IuJHNsaWRlcy5hZGQoYi4kc2xpZGVUcmFjay5maW5kKFwiLnNsaWNrLWNsb25lZFwiKSkuYXR0cih7XCJhcmlhLWhpZGRlblwiOlwidHJ1ZVwiLHRhYmluZGV4OlwiLTFcIn0pLmZpbmQoXCJhLCBpbnB1dCwgYnV0dG9uLCBzZWxlY3RcIikuYXR0cih7dGFiaW5kZXg6XCItMVwifSksYi4kc2xpZGVUcmFjay5hdHRyKFwicm9sZVwiLFwibGlzdGJveFwiKSxiLiRzbGlkZXMubm90KGIuJHNsaWRlVHJhY2suZmluZChcIi5zbGljay1jbG9uZWRcIikpLmVhY2goZnVuY3Rpb24oYyl7YSh0aGlzKS5hdHRyKHtyb2xlOlwib3B0aW9uXCIsXCJhcmlhLWRlc2NyaWJlZGJ5XCI6XCJzbGljay1zbGlkZVwiK2IuaW5zdGFuY2VVaWQrY30pfSksbnVsbCE9PWIuJGRvdHMmJmIuJGRvdHMuYXR0cihcInJvbGVcIixcInRhYmxpc3RcIikuZmluZChcImxpXCIpLmVhY2goZnVuY3Rpb24oYyl7YSh0aGlzKS5hdHRyKHtyb2xlOlwicHJlc2VudGF0aW9uXCIsXCJhcmlhLXNlbGVjdGVkXCI6XCJmYWxzZVwiLFwiYXJpYS1jb250cm9sc1wiOlwibmF2aWdhdGlvblwiK2IuaW5zdGFuY2VVaWQrYyxpZDpcInNsaWNrLXNsaWRlXCIrYi5pbnN0YW5jZVVpZCtjfSl9KS5maXJzdCgpLmF0dHIoXCJhcmlhLXNlbGVjdGVkXCIsXCJ0cnVlXCIpLmVuZCgpLmZpbmQoXCJidXR0b25cIikuYXR0cihcInJvbGVcIixcImJ1dHRvblwiKS5lbmQoKS5jbG9zZXN0KFwiZGl2XCIpLmF0dHIoXCJyb2xlXCIsXCJ0b29sYmFyXCIpLGIuYWN0aXZhdGVBREEoKX0sYi5wcm90b3R5cGUuaW5pdEFycm93RXZlbnRzPWZ1bmN0aW9uKCl7dmFyIGE9dGhpczthLm9wdGlvbnMuYXJyb3dzPT09ITAmJmEuc2xpZGVDb3VudD5hLm9wdGlvbnMuc2xpZGVzVG9TaG93JiYoYS4kcHJldkFycm93Lm9mZihcImNsaWNrLnNsaWNrXCIpLm9uKFwiY2xpY2suc2xpY2tcIix7bWVzc2FnZTpcInByZXZpb3VzXCJ9LGEuY2hhbmdlU2xpZGUpLGEuJG5leHRBcnJvdy5vZmYoXCJjbGljay5zbGlja1wiKS5vbihcImNsaWNrLnNsaWNrXCIse21lc3NhZ2U6XCJuZXh0XCJ9LGEuY2hhbmdlU2xpZGUpKX0sYi5wcm90b3R5cGUuaW5pdERvdEV2ZW50cz1mdW5jdGlvbigpe3ZhciBiPXRoaXM7Yi5vcHRpb25zLmRvdHM9PT0hMCYmYi5zbGlkZUNvdW50PmIub3B0aW9ucy5zbGlkZXNUb1Nob3cmJmEoXCJsaVwiLGIuJGRvdHMpLm9uKFwiY2xpY2suc2xpY2tcIix7bWVzc2FnZTpcImluZGV4XCJ9LGIuY2hhbmdlU2xpZGUpLGIub3B0aW9ucy5kb3RzPT09ITAmJmIub3B0aW9ucy5wYXVzZU9uRG90c0hvdmVyPT09ITAmJmEoXCJsaVwiLGIuJGRvdHMpLm9uKFwibW91c2VlbnRlci5zbGlja1wiLGEucHJveHkoYi5pbnRlcnJ1cHQsYiwhMCkpLm9uKFwibW91c2VsZWF2ZS5zbGlja1wiLGEucHJveHkoYi5pbnRlcnJ1cHQsYiwhMSkpfSxiLnByb3RvdHlwZS5pbml0U2xpZGVFdmVudHM9ZnVuY3Rpb24oKXt2YXIgYj10aGlzO2Iub3B0aW9ucy5wYXVzZU9uSG92ZXImJihiLiRsaXN0Lm9uKFwibW91c2VlbnRlci5zbGlja1wiLGEucHJveHkoYi5pbnRlcnJ1cHQsYiwhMCkpLGIuJGxpc3Qub24oXCJtb3VzZWxlYXZlLnNsaWNrXCIsYS5wcm94eShiLmludGVycnVwdCxiLCExKSkpfSxiLnByb3RvdHlwZS5pbml0aWFsaXplRXZlbnRzPWZ1bmN0aW9uKCl7dmFyIGI9dGhpcztiLmluaXRBcnJvd0V2ZW50cygpLGIuaW5pdERvdEV2ZW50cygpLGIuaW5pdFNsaWRlRXZlbnRzKCksYi4kbGlzdC5vbihcInRvdWNoc3RhcnQuc2xpY2sgbW91c2Vkb3duLnNsaWNrXCIse2FjdGlvbjpcInN0YXJ0XCJ9LGIuc3dpcGVIYW5kbGVyKSxiLiRsaXN0Lm9uKFwidG91Y2htb3ZlLnNsaWNrIG1vdXNlbW92ZS5zbGlja1wiLHthY3Rpb246XCJtb3ZlXCJ9LGIuc3dpcGVIYW5kbGVyKSxiLiRsaXN0Lm9uKFwidG91Y2hlbmQuc2xpY2sgbW91c2V1cC5zbGlja1wiLHthY3Rpb246XCJlbmRcIn0sYi5zd2lwZUhhbmRsZXIpLGIuJGxpc3Qub24oXCJ0b3VjaGNhbmNlbC5zbGljayBtb3VzZWxlYXZlLnNsaWNrXCIse2FjdGlvbjpcImVuZFwifSxiLnN3aXBlSGFuZGxlciksYi4kbGlzdC5vbihcImNsaWNrLnNsaWNrXCIsYi5jbGlja0hhbmRsZXIpLGEoZG9jdW1lbnQpLm9uKGIudmlzaWJpbGl0eUNoYW5nZSxhLnByb3h5KGIudmlzaWJpbGl0eSxiKSksYi5vcHRpb25zLmFjY2Vzc2liaWxpdHk9PT0hMCYmYi4kbGlzdC5vbihcImtleWRvd24uc2xpY2tcIixiLmtleUhhbmRsZXIpLGIub3B0aW9ucy5mb2N1c09uU2VsZWN0PT09ITAmJmEoYi4kc2xpZGVUcmFjaykuY2hpbGRyZW4oKS5vbihcImNsaWNrLnNsaWNrXCIsYi5zZWxlY3RIYW5kbGVyKSxhKHdpbmRvdykub24oXCJvcmllbnRhdGlvbmNoYW5nZS5zbGljay5zbGljay1cIitiLmluc3RhbmNlVWlkLGEucHJveHkoYi5vcmllbnRhdGlvbkNoYW5nZSxiKSksYSh3aW5kb3cpLm9uKFwicmVzaXplLnNsaWNrLnNsaWNrLVwiK2IuaW5zdGFuY2VVaWQsYS5wcm94eShiLnJlc2l6ZSxiKSksYShcIltkcmFnZ2FibGUhPXRydWVdXCIsYi4kc2xpZGVUcmFjaykub24oXCJkcmFnc3RhcnRcIixiLnByZXZlbnREZWZhdWx0KSxhKHdpbmRvdykub24oXCJsb2FkLnNsaWNrLnNsaWNrLVwiK2IuaW5zdGFuY2VVaWQsYi5zZXRQb3NpdGlvbiksYShkb2N1bWVudCkub24oXCJyZWFkeS5zbGljay5zbGljay1cIitiLmluc3RhbmNlVWlkLGIuc2V0UG9zaXRpb24pfSxiLnByb3RvdHlwZS5pbml0VUk9ZnVuY3Rpb24oKXt2YXIgYT10aGlzO2Eub3B0aW9ucy5hcnJvd3M9PT0hMCYmYS5zbGlkZUNvdW50PmEub3B0aW9ucy5zbGlkZXNUb1Nob3cmJihhLiRwcmV2QXJyb3cuc2hvdygpLGEuJG5leHRBcnJvdy5zaG93KCkpLGEub3B0aW9ucy5kb3RzPT09ITAmJmEuc2xpZGVDb3VudD5hLm9wdGlvbnMuc2xpZGVzVG9TaG93JiZhLiRkb3RzLnNob3coKX0sYi5wcm90b3R5cGUua2V5SGFuZGxlcj1mdW5jdGlvbihhKXt2YXIgYj10aGlzO2EudGFyZ2V0LnRhZ05hbWUubWF0Y2goXCJURVhUQVJFQXxJTlBVVHxTRUxFQ1RcIil8fCgzNz09PWEua2V5Q29kZSYmYi5vcHRpb25zLmFjY2Vzc2liaWxpdHk9PT0hMD9iLmNoYW5nZVNsaWRlKHtkYXRhOnttZXNzYWdlOmIub3B0aW9ucy5ydGw9PT0hMD9cIm5leHRcIjpcInByZXZpb3VzXCJ9fSk6Mzk9PT1hLmtleUNvZGUmJmIub3B0aW9ucy5hY2Nlc3NpYmlsaXR5PT09ITAmJmIuY2hhbmdlU2xpZGUoe2RhdGE6e21lc3NhZ2U6Yi5vcHRpb25zLnJ0bD09PSEwP1wicHJldmlvdXNcIjpcIm5leHRcIn19KSl9LGIucHJvdG90eXBlLmxhenlMb2FkPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZyhjKXthKFwiaW1nW2RhdGEtbGF6eV1cIixjKS5lYWNoKGZ1bmN0aW9uKCl7dmFyIGM9YSh0aGlzKSxkPWEodGhpcykuYXR0cihcImRhdGEtbGF6eVwiKSxlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7ZS5vbmxvYWQ9ZnVuY3Rpb24oKXtjLmFuaW1hdGUoe29wYWNpdHk6MH0sMTAwLGZ1bmN0aW9uKCl7Yy5hdHRyKFwic3JjXCIsZCkuYW5pbWF0ZSh7b3BhY2l0eToxfSwyMDAsZnVuY3Rpb24oKXtjLnJlbW92ZUF0dHIoXCJkYXRhLWxhenlcIikucmVtb3ZlQ2xhc3MoXCJzbGljay1sb2FkaW5nXCIpfSksYi4kc2xpZGVyLnRyaWdnZXIoXCJsYXp5TG9hZGVkXCIsW2IsYyxkXSl9KX0sZS5vbmVycm9yPWZ1bmN0aW9uKCl7Yy5yZW1vdmVBdHRyKFwiZGF0YS1sYXp5XCIpLnJlbW92ZUNsYXNzKFwic2xpY2stbG9hZGluZ1wiKS5hZGRDbGFzcyhcInNsaWNrLWxhenlsb2FkLWVycm9yXCIpLGIuJHNsaWRlci50cmlnZ2VyKFwibGF6eUxvYWRFcnJvclwiLFtiLGMsZF0pfSxlLnNyYz1kfSl9dmFyIGMsZCxlLGYsYj10aGlzO2Iub3B0aW9ucy5jZW50ZXJNb2RlPT09ITA/Yi5vcHRpb25zLmluZmluaXRlPT09ITA/KGU9Yi5jdXJyZW50U2xpZGUrKGIub3B0aW9ucy5zbGlkZXNUb1Nob3cvMisxKSxmPWUrYi5vcHRpb25zLnNsaWRlc1RvU2hvdysyKTooZT1NYXRoLm1heCgwLGIuY3VycmVudFNsaWRlLShiLm9wdGlvbnMuc2xpZGVzVG9TaG93LzIrMSkpLGY9MisoYi5vcHRpb25zLnNsaWRlc1RvU2hvdy8yKzEpK2IuY3VycmVudFNsaWRlKTooZT1iLm9wdGlvbnMuaW5maW5pdGU/Yi5vcHRpb25zLnNsaWRlc1RvU2hvdytiLmN1cnJlbnRTbGlkZTpiLmN1cnJlbnRTbGlkZSxmPU1hdGguY2VpbChlK2Iub3B0aW9ucy5zbGlkZXNUb1Nob3cpLGIub3B0aW9ucy5mYWRlPT09ITAmJihlPjAmJmUtLSxmPD1iLnNsaWRlQ291bnQmJmYrKykpLGM9Yi4kc2xpZGVyLmZpbmQoXCIuc2xpY2stc2xpZGVcIikuc2xpY2UoZSxmKSxnKGMpLGIuc2xpZGVDb3VudDw9Yi5vcHRpb25zLnNsaWRlc1RvU2hvdz8oZD1iLiRzbGlkZXIuZmluZChcIi5zbGljay1zbGlkZVwiKSxnKGQpKTpiLmN1cnJlbnRTbGlkZT49Yi5zbGlkZUNvdW50LWIub3B0aW9ucy5zbGlkZXNUb1Nob3c/KGQ9Yi4kc2xpZGVyLmZpbmQoXCIuc2xpY2stY2xvbmVkXCIpLnNsaWNlKDAsYi5vcHRpb25zLnNsaWRlc1RvU2hvdyksZyhkKSk6MD09PWIuY3VycmVudFNsaWRlJiYoZD1iLiRzbGlkZXIuZmluZChcIi5zbGljay1jbG9uZWRcIikuc2xpY2UoLTEqYi5vcHRpb25zLnNsaWRlc1RvU2hvdyksZyhkKSl9LGIucHJvdG90eXBlLmxvYWRTbGlkZXI9ZnVuY3Rpb24oKXt2YXIgYT10aGlzO2Euc2V0UG9zaXRpb24oKSxhLiRzbGlkZVRyYWNrLmNzcyh7b3BhY2l0eToxfSksYS4kc2xpZGVyLnJlbW92ZUNsYXNzKFwic2xpY2stbG9hZGluZ1wiKSxhLmluaXRVSSgpLFwicHJvZ3Jlc3NpdmVcIj09PWEub3B0aW9ucy5sYXp5TG9hZCYmYS5wcm9ncmVzc2l2ZUxhenlMb2FkKCl9LGIucHJvdG90eXBlLm5leHQ9Yi5wcm90b3R5cGUuc2xpY2tOZXh0PWZ1bmN0aW9uKCl7dmFyIGE9dGhpczthLmNoYW5nZVNsaWRlKHtkYXRhOnttZXNzYWdlOlwibmV4dFwifX0pfSxiLnByb3RvdHlwZS5vcmllbnRhdGlvbkNoYW5nZT1mdW5jdGlvbigpe3ZhciBhPXRoaXM7YS5jaGVja1Jlc3BvbnNpdmUoKSxhLnNldFBvc2l0aW9uKCl9LGIucHJvdG90eXBlLnBhdXNlPWIucHJvdG90eXBlLnNsaWNrUGF1c2U9ZnVuY3Rpb24oKXt2YXIgYT10aGlzO2EuYXV0b1BsYXlDbGVhcigpLGEucGF1c2VkPSEwfSxiLnByb3RvdHlwZS5wbGF5PWIucHJvdG90eXBlLnNsaWNrUGxheT1mdW5jdGlvbigpe3ZhciBhPXRoaXM7YS5hdXRvUGxheSgpLGEub3B0aW9ucy5hdXRvcGxheT0hMCxhLnBhdXNlZD0hMSxhLmZvY3Vzc2VkPSExLGEuaW50ZXJydXB0ZWQ9ITF9LGIucHJvdG90eXBlLnBvc3RTbGlkZT1mdW5jdGlvbihhKXt2YXIgYj10aGlzO2IudW5zbGlja2VkfHwoYi4kc2xpZGVyLnRyaWdnZXIoXCJhZnRlckNoYW5nZVwiLFtiLGFdKSxiLmFuaW1hdGluZz0hMSxiLnNldFBvc2l0aW9uKCksYi5zd2lwZUxlZnQ9bnVsbCxiLm9wdGlvbnMuYXV0b3BsYXkmJmIuYXV0b1BsYXkoKSxiLm9wdGlvbnMuYWNjZXNzaWJpbGl0eT09PSEwJiZiLmluaXRBREEoKSl9LGIucHJvdG90eXBlLnByZXY9Yi5wcm90b3R5cGUuc2xpY2tQcmV2PWZ1bmN0aW9uKCl7dmFyIGE9dGhpczthLmNoYW5nZVNsaWRlKHtkYXRhOnttZXNzYWdlOlwicHJldmlvdXNcIn19KX0sYi5wcm90b3R5cGUucHJldmVudERlZmF1bHQ9ZnVuY3Rpb24oYSl7YS5wcmV2ZW50RGVmYXVsdCgpfSxiLnByb3RvdHlwZS5wcm9ncmVzc2l2ZUxhenlMb2FkPWZ1bmN0aW9uKGIpe2I9Ynx8MTt2YXIgZSxmLGcsYz10aGlzLGQ9YShcImltZ1tkYXRhLWxhenldXCIsYy4kc2xpZGVyKTtkLmxlbmd0aD8oZT1kLmZpcnN0KCksZj1lLmF0dHIoXCJkYXRhLWxhenlcIiksZz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpLGcub25sb2FkPWZ1bmN0aW9uKCl7ZS5hdHRyKFwic3JjXCIsZikucmVtb3ZlQXR0cihcImRhdGEtbGF6eVwiKS5yZW1vdmVDbGFzcyhcInNsaWNrLWxvYWRpbmdcIiksYy5vcHRpb25zLmFkYXB0aXZlSGVpZ2h0PT09ITAmJmMuc2V0UG9zaXRpb24oKSxjLiRzbGlkZXIudHJpZ2dlcihcImxhenlMb2FkZWRcIixbYyxlLGZdKSxjLnByb2dyZXNzaXZlTGF6eUxvYWQoKX0sZy5vbmVycm9yPWZ1bmN0aW9uKCl7Mz5iP3NldFRpbWVvdXQoZnVuY3Rpb24oKXtjLnByb2dyZXNzaXZlTGF6eUxvYWQoYisxKX0sNTAwKTooZS5yZW1vdmVBdHRyKFwiZGF0YS1sYXp5XCIpLnJlbW92ZUNsYXNzKFwic2xpY2stbG9hZGluZ1wiKS5hZGRDbGFzcyhcInNsaWNrLWxhenlsb2FkLWVycm9yXCIpLGMuJHNsaWRlci50cmlnZ2VyKFwibGF6eUxvYWRFcnJvclwiLFtjLGUsZl0pLGMucHJvZ3Jlc3NpdmVMYXp5TG9hZCgpKX0sZy5zcmM9Zik6Yy4kc2xpZGVyLnRyaWdnZXIoXCJhbGxJbWFnZXNMb2FkZWRcIixbY10pfSxiLnByb3RvdHlwZS5yZWZyZXNoPWZ1bmN0aW9uKGIpe3ZhciBkLGUsYz10aGlzO2U9Yy5zbGlkZUNvdW50LWMub3B0aW9ucy5zbGlkZXNUb1Nob3csIWMub3B0aW9ucy5pbmZpbml0ZSYmYy5jdXJyZW50U2xpZGU+ZSYmKGMuY3VycmVudFNsaWRlPWUpLGMuc2xpZGVDb3VudDw9Yy5vcHRpb25zLnNsaWRlc1RvU2hvdyYmKGMuY3VycmVudFNsaWRlPTApLGQ9Yy5jdXJyZW50U2xpZGUsYy5kZXN0cm95KCEwKSxhLmV4dGVuZChjLGMuaW5pdGlhbHMse2N1cnJlbnRTbGlkZTpkfSksYy5pbml0KCksYnx8Yy5jaGFuZ2VTbGlkZSh7ZGF0YTp7bWVzc2FnZTpcImluZGV4XCIsaW5kZXg6ZH19LCExKX0sYi5wcm90b3R5cGUucmVnaXN0ZXJCcmVha3BvaW50cz1mdW5jdGlvbigpe3ZhciBjLGQsZSxiPXRoaXMsZj1iLm9wdGlvbnMucmVzcG9uc2l2ZXx8bnVsbDtpZihcImFycmF5XCI9PT1hLnR5cGUoZikmJmYubGVuZ3RoKXtiLnJlc3BvbmRUbz1iLm9wdGlvbnMucmVzcG9uZFRvfHxcIndpbmRvd1wiO2ZvcihjIGluIGYpaWYoZT1iLmJyZWFrcG9pbnRzLmxlbmd0aC0xLGQ9ZltjXS5icmVha3BvaW50LGYuaGFzT3duUHJvcGVydHkoYykpe2Zvcig7ZT49MDspYi5icmVha3BvaW50c1tlXSYmYi5icmVha3BvaW50c1tlXT09PWQmJmIuYnJlYWtwb2ludHMuc3BsaWNlKGUsMSksZS0tO2IuYnJlYWtwb2ludHMucHVzaChkKSxiLmJyZWFrcG9pbnRTZXR0aW5nc1tkXT1mW2NdLnNldHRpbmdzfWIuYnJlYWtwb2ludHMuc29ydChmdW5jdGlvbihhLGMpe3JldHVybiBiLm9wdGlvbnMubW9iaWxlRmlyc3Q/YS1jOmMtYX0pfX0sYi5wcm90b3R5cGUucmVpbml0PWZ1bmN0aW9uKCl7dmFyIGI9dGhpcztiLiRzbGlkZXM9Yi4kc2xpZGVUcmFjay5jaGlsZHJlbihiLm9wdGlvbnMuc2xpZGUpLmFkZENsYXNzKFwic2xpY2stc2xpZGVcIiksYi5zbGlkZUNvdW50PWIuJHNsaWRlcy5sZW5ndGgsYi5jdXJyZW50U2xpZGU+PWIuc2xpZGVDb3VudCYmMCE9PWIuY3VycmVudFNsaWRlJiYoYi5jdXJyZW50U2xpZGU9Yi5jdXJyZW50U2xpZGUtYi5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKSxiLnNsaWRlQ291bnQ8PWIub3B0aW9ucy5zbGlkZXNUb1Nob3cmJihiLmN1cnJlbnRTbGlkZT0wKSxiLnJlZ2lzdGVyQnJlYWtwb2ludHMoKSxiLnNldFByb3BzKCksYi5zZXR1cEluZmluaXRlKCksYi5idWlsZEFycm93cygpLGIudXBkYXRlQXJyb3dzKCksYi5pbml0QXJyb3dFdmVudHMoKSxiLmJ1aWxkRG90cygpLGIudXBkYXRlRG90cygpLGIuaW5pdERvdEV2ZW50cygpLGIuY2xlYW5VcFNsaWRlRXZlbnRzKCksYi5pbml0U2xpZGVFdmVudHMoKSxiLmNoZWNrUmVzcG9uc2l2ZSghMSwhMCksYi5vcHRpb25zLmZvY3VzT25TZWxlY3Q9PT0hMCYmYShiLiRzbGlkZVRyYWNrKS5jaGlsZHJlbigpLm9uKFwiY2xpY2suc2xpY2tcIixiLnNlbGVjdEhhbmRsZXIpLGIuc2V0U2xpZGVDbGFzc2VzKFwibnVtYmVyXCI9PXR5cGVvZiBiLmN1cnJlbnRTbGlkZT9iLmN1cnJlbnRTbGlkZTowKSxiLnNldFBvc2l0aW9uKCksYi5mb2N1c0hhbmRsZXIoKSxiLnBhdXNlZD0hYi5vcHRpb25zLmF1dG9wbGF5LGIuYXV0b1BsYXkoKSxiLiRzbGlkZXIudHJpZ2dlcihcInJlSW5pdFwiLFtiXSl9LGIucHJvdG90eXBlLnJlc2l6ZT1mdW5jdGlvbigpe3ZhciBiPXRoaXM7YSh3aW5kb3cpLndpZHRoKCkhPT1iLndpbmRvd1dpZHRoJiYoY2xlYXJUaW1lb3V0KGIud2luZG93RGVsYXkpLGIud2luZG93RGVsYXk9d2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKXtiLndpbmRvd1dpZHRoPWEod2luZG93KS53aWR0aCgpLGIuY2hlY2tSZXNwb25zaXZlKCksYi51bnNsaWNrZWR8fGIuc2V0UG9zaXRpb24oKX0sNTApKX0sYi5wcm90b3R5cGUucmVtb3ZlU2xpZGU9Yi5wcm90b3R5cGUuc2xpY2tSZW1vdmU9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXRoaXM7cmV0dXJuXCJib29sZWFuXCI9PXR5cGVvZiBhPyhiPWEsYT1iPT09ITA/MDpkLnNsaWRlQ291bnQtMSk6YT1iPT09ITA/LS1hOmEsZC5zbGlkZUNvdW50PDF8fDA+YXx8YT5kLnNsaWRlQ291bnQtMT8hMTooZC51bmxvYWQoKSxjPT09ITA/ZC4kc2xpZGVUcmFjay5jaGlsZHJlbigpLnJlbW92ZSgpOmQuJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5lcShhKS5yZW1vdmUoKSxkLiRzbGlkZXM9ZC4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLGQuJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5kZXRhY2goKSxkLiRzbGlkZVRyYWNrLmFwcGVuZChkLiRzbGlkZXMpLGQuJHNsaWRlc0NhY2hlPWQuJHNsaWRlcyx2b2lkIGQucmVpbml0KCkpfSxiLnByb3RvdHlwZS5zZXRDU1M9ZnVuY3Rpb24oYSl7dmFyIGQsZSxiPXRoaXMsYz17fTtiLm9wdGlvbnMucnRsPT09ITAmJihhPS1hKSxkPVwibGVmdFwiPT1iLnBvc2l0aW9uUHJvcD9NYXRoLmNlaWwoYSkrXCJweFwiOlwiMHB4XCIsZT1cInRvcFwiPT1iLnBvc2l0aW9uUHJvcD9NYXRoLmNlaWwoYSkrXCJweFwiOlwiMHB4XCIsY1tiLnBvc2l0aW9uUHJvcF09YSxiLnRyYW5zZm9ybXNFbmFibGVkPT09ITE/Yi4kc2xpZGVUcmFjay5jc3MoYyk6KGM9e30sYi5jc3NUcmFuc2l0aW9ucz09PSExPyhjW2IuYW5pbVR5cGVdPVwidHJhbnNsYXRlKFwiK2QrXCIsIFwiK2UrXCIpXCIsYi4kc2xpZGVUcmFjay5jc3MoYykpOihjW2IuYW5pbVR5cGVdPVwidHJhbnNsYXRlM2QoXCIrZCtcIiwgXCIrZStcIiwgMHB4KVwiLGIuJHNsaWRlVHJhY2suY3NzKGMpKSl9LGIucHJvdG90eXBlLnNldERpbWVuc2lvbnM9ZnVuY3Rpb24oKXt2YXIgYT10aGlzO2Eub3B0aW9ucy52ZXJ0aWNhbD09PSExP2Eub3B0aW9ucy5jZW50ZXJNb2RlPT09ITAmJmEuJGxpc3QuY3NzKHtwYWRkaW5nOlwiMHB4IFwiK2Eub3B0aW9ucy5jZW50ZXJQYWRkaW5nfSk6KGEuJGxpc3QuaGVpZ2h0KGEuJHNsaWRlcy5maXJzdCgpLm91dGVySGVpZ2h0KCEwKSphLm9wdGlvbnMuc2xpZGVzVG9TaG93KSxhLm9wdGlvbnMuY2VudGVyTW9kZT09PSEwJiZhLiRsaXN0LmNzcyh7cGFkZGluZzphLm9wdGlvbnMuY2VudGVyUGFkZGluZytcIiAwcHhcIn0pKSxhLmxpc3RXaWR0aD1hLiRsaXN0LndpZHRoKCksYS5saXN0SGVpZ2h0PWEuJGxpc3QuaGVpZ2h0KCksYS5vcHRpb25zLnZlcnRpY2FsPT09ITEmJmEub3B0aW9ucy52YXJpYWJsZVdpZHRoPT09ITE/KGEuc2xpZGVXaWR0aD1NYXRoLmNlaWwoYS5saXN0V2lkdGgvYS5vcHRpb25zLnNsaWRlc1RvU2hvdyksYS4kc2xpZGVUcmFjay53aWR0aChNYXRoLmNlaWwoYS5zbGlkZVdpZHRoKmEuJHNsaWRlVHJhY2suY2hpbGRyZW4oXCIuc2xpY2stc2xpZGVcIikubGVuZ3RoKSkpOmEub3B0aW9ucy52YXJpYWJsZVdpZHRoPT09ITA/YS4kc2xpZGVUcmFjay53aWR0aCg1ZTMqYS5zbGlkZUNvdW50KTooYS5zbGlkZVdpZHRoPU1hdGguY2VpbChhLmxpc3RXaWR0aCksYS4kc2xpZGVUcmFjay5oZWlnaHQoTWF0aC5jZWlsKGEuJHNsaWRlcy5maXJzdCgpLm91dGVySGVpZ2h0KCEwKSphLiRzbGlkZVRyYWNrLmNoaWxkcmVuKFwiLnNsaWNrLXNsaWRlXCIpLmxlbmd0aCkpKTt2YXIgYj1hLiRzbGlkZXMuZmlyc3QoKS5vdXRlcldpZHRoKCEwKS1hLiRzbGlkZXMuZmlyc3QoKS53aWR0aCgpO2Eub3B0aW9ucy52YXJpYWJsZVdpZHRoPT09ITEmJmEuJHNsaWRlVHJhY2suY2hpbGRyZW4oXCIuc2xpY2stc2xpZGVcIikud2lkdGgoYS5zbGlkZVdpZHRoLWIpfSxiLnByb3RvdHlwZS5zZXRGYWRlPWZ1bmN0aW9uKCl7dmFyIGMsYj10aGlzO2IuJHNsaWRlcy5lYWNoKGZ1bmN0aW9uKGQsZSl7Yz1iLnNsaWRlV2lkdGgqZCotMSxiLm9wdGlvbnMucnRsPT09ITA/YShlKS5jc3Moe3Bvc2l0aW9uOlwicmVsYXRpdmVcIixyaWdodDpjLHRvcDowLHpJbmRleDpiLm9wdGlvbnMuekluZGV4LTIsb3BhY2l0eTowfSk6YShlKS5jc3Moe3Bvc2l0aW9uOlwicmVsYXRpdmVcIixsZWZ0OmMsdG9wOjAsekluZGV4OmIub3B0aW9ucy56SW5kZXgtMixvcGFjaXR5OjB9KX0pLGIuJHNsaWRlcy5lcShiLmN1cnJlbnRTbGlkZSkuY3NzKHt6SW5kZXg6Yi5vcHRpb25zLnpJbmRleC0xLG9wYWNpdHk6MX0pfSxiLnByb3RvdHlwZS5zZXRIZWlnaHQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzO2lmKDE9PT1hLm9wdGlvbnMuc2xpZGVzVG9TaG93JiZhLm9wdGlvbnMuYWRhcHRpdmVIZWlnaHQ9PT0hMCYmYS5vcHRpb25zLnZlcnRpY2FsPT09ITEpe3ZhciBiPWEuJHNsaWRlcy5lcShhLmN1cnJlbnRTbGlkZSkub3V0ZXJIZWlnaHQoITApO2EuJGxpc3QuY3NzKFwiaGVpZ2h0XCIsYil9fSxiLnByb3RvdHlwZS5zZXRPcHRpb249Yi5wcm90b3R5cGUuc2xpY2tTZXRPcHRpb249ZnVuY3Rpb24oKXt2YXIgYyxkLGUsZixoLGI9dGhpcyxnPSExO2lmKFwib2JqZWN0XCI9PT1hLnR5cGUoYXJndW1lbnRzWzBdKT8oZT1hcmd1bWVudHNbMF0sZz1hcmd1bWVudHNbMV0saD1cIm11bHRpcGxlXCIpOlwic3RyaW5nXCI9PT1hLnR5cGUoYXJndW1lbnRzWzBdKSYmKGU9YXJndW1lbnRzWzBdLGY9YXJndW1lbnRzWzFdLGc9YXJndW1lbnRzWzJdLFwicmVzcG9uc2l2ZVwiPT09YXJndW1lbnRzWzBdJiZcImFycmF5XCI9PT1hLnR5cGUoYXJndW1lbnRzWzFdKT9oPVwicmVzcG9uc2l2ZVwiOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBhcmd1bWVudHNbMV0mJihoPVwic2luZ2xlXCIpKSxcInNpbmdsZVwiPT09aCliLm9wdGlvbnNbZV09ZjtlbHNlIGlmKFwibXVsdGlwbGVcIj09PWgpYS5lYWNoKGUsZnVuY3Rpb24oYSxjKXtiLm9wdGlvbnNbYV09Y30pO2Vsc2UgaWYoXCJyZXNwb25zaXZlXCI9PT1oKWZvcihkIGluIGYpaWYoXCJhcnJheVwiIT09YS50eXBlKGIub3B0aW9ucy5yZXNwb25zaXZlKSliLm9wdGlvbnMucmVzcG9uc2l2ZT1bZltkXV07ZWxzZXtmb3IoYz1iLm9wdGlvbnMucmVzcG9uc2l2ZS5sZW5ndGgtMTtjPj0wOyliLm9wdGlvbnMucmVzcG9uc2l2ZVtjXS5icmVha3BvaW50PT09ZltkXS5icmVha3BvaW50JiZiLm9wdGlvbnMucmVzcG9uc2l2ZS5zcGxpY2UoYywxKSxjLS07Yi5vcHRpb25zLnJlc3BvbnNpdmUucHVzaChmW2RdKX1nJiYoYi51bmxvYWQoKSxiLnJlaW5pdCgpKX0sYi5wcm90b3R5cGUuc2V0UG9zaXRpb249ZnVuY3Rpb24oKXt2YXIgYT10aGlzO2Euc2V0RGltZW5zaW9ucygpLGEuc2V0SGVpZ2h0KCksYS5vcHRpb25zLmZhZGU9PT0hMT9hLnNldENTUyhhLmdldExlZnQoYS5jdXJyZW50U2xpZGUpKTphLnNldEZhZGUoKSxhLiRzbGlkZXIudHJpZ2dlcihcInNldFBvc2l0aW9uXCIsW2FdKX0sYi5wcm90b3R5cGUuc2V0UHJvcHM9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLGI9ZG9jdW1lbnQuYm9keS5zdHlsZTthLnBvc2l0aW9uUHJvcD1hLm9wdGlvbnMudmVydGljYWw9PT0hMD9cInRvcFwiOlwibGVmdFwiLFwidG9wXCI9PT1hLnBvc2l0aW9uUHJvcD9hLiRzbGlkZXIuYWRkQ2xhc3MoXCJzbGljay12ZXJ0aWNhbFwiKTphLiRzbGlkZXIucmVtb3ZlQ2xhc3MoXCJzbGljay12ZXJ0aWNhbFwiKSwodm9pZCAwIT09Yi5XZWJraXRUcmFuc2l0aW9ufHx2b2lkIDAhPT1iLk1velRyYW5zaXRpb258fHZvaWQgMCE9PWIubXNUcmFuc2l0aW9uKSYmYS5vcHRpb25zLnVzZUNTUz09PSEwJiYoYS5jc3NUcmFuc2l0aW9ucz0hMCksYS5vcHRpb25zLmZhZGUmJihcIm51bWJlclwiPT10eXBlb2YgYS5vcHRpb25zLnpJbmRleD9hLm9wdGlvbnMuekluZGV4PDMmJihhLm9wdGlvbnMuekluZGV4PTMpOmEub3B0aW9ucy56SW5kZXg9YS5kZWZhdWx0cy56SW5kZXgpLHZvaWQgMCE9PWIuT1RyYW5zZm9ybSYmKGEuYW5pbVR5cGU9XCJPVHJhbnNmb3JtXCIsYS50cmFuc2Zvcm1UeXBlPVwiLW8tdHJhbnNmb3JtXCIsYS50cmFuc2l0aW9uVHlwZT1cIk9UcmFuc2l0aW9uXCIsdm9pZCAwPT09Yi5wZXJzcGVjdGl2ZVByb3BlcnR5JiZ2b2lkIDA9PT1iLndlYmtpdFBlcnNwZWN0aXZlJiYoYS5hbmltVHlwZT0hMSkpLHZvaWQgMCE9PWIuTW96VHJhbnNmb3JtJiYoYS5hbmltVHlwZT1cIk1velRyYW5zZm9ybVwiLGEudHJhbnNmb3JtVHlwZT1cIi1tb3otdHJhbnNmb3JtXCIsYS50cmFuc2l0aW9uVHlwZT1cIk1velRyYW5zaXRpb25cIix2b2lkIDA9PT1iLnBlcnNwZWN0aXZlUHJvcGVydHkmJnZvaWQgMD09PWIuTW96UGVyc3BlY3RpdmUmJihhLmFuaW1UeXBlPSExKSksdm9pZCAwIT09Yi53ZWJraXRUcmFuc2Zvcm0mJihhLmFuaW1UeXBlPVwid2Via2l0VHJhbnNmb3JtXCIsYS50cmFuc2Zvcm1UeXBlPVwiLXdlYmtpdC10cmFuc2Zvcm1cIixhLnRyYW5zaXRpb25UeXBlPVwid2Via2l0VHJhbnNpdGlvblwiLHZvaWQgMD09PWIucGVyc3BlY3RpdmVQcm9wZXJ0eSYmdm9pZCAwPT09Yi53ZWJraXRQZXJzcGVjdGl2ZSYmKGEuYW5pbVR5cGU9ITEpKSx2b2lkIDAhPT1iLm1zVHJhbnNmb3JtJiYoYS5hbmltVHlwZT1cIm1zVHJhbnNmb3JtXCIsYS50cmFuc2Zvcm1UeXBlPVwiLW1zLXRyYW5zZm9ybVwiLGEudHJhbnNpdGlvblR5cGU9XCJtc1RyYW5zaXRpb25cIix2b2lkIDA9PT1iLm1zVHJhbnNmb3JtJiYoYS5hbmltVHlwZT0hMSkpLHZvaWQgMCE9PWIudHJhbnNmb3JtJiZhLmFuaW1UeXBlIT09ITEmJihhLmFuaW1UeXBlPVwidHJhbnNmb3JtXCIsYS50cmFuc2Zvcm1UeXBlPVwidHJhbnNmb3JtXCIsYS50cmFuc2l0aW9uVHlwZT1cInRyYW5zaXRpb25cIiksYS50cmFuc2Zvcm1zRW5hYmxlZD1hLm9wdGlvbnMudXNlVHJhbnNmb3JtJiZudWxsIT09YS5hbmltVHlwZSYmYS5hbmltVHlwZSE9PSExfSxiLnByb3RvdHlwZS5zZXRTbGlkZUNsYXNzZXM9ZnVuY3Rpb24oYSl7dmFyIGMsZCxlLGYsYj10aGlzO2Q9Yi4kc2xpZGVyLmZpbmQoXCIuc2xpY2stc2xpZGVcIikucmVtb3ZlQ2xhc3MoXCJzbGljay1hY3RpdmUgc2xpY2stY2VudGVyIHNsaWNrLWN1cnJlbnRcIikuYXR0cihcImFyaWEtaGlkZGVuXCIsXCJ0cnVlXCIpLGIuJHNsaWRlcy5lcShhKS5hZGRDbGFzcyhcInNsaWNrLWN1cnJlbnRcIiksYi5vcHRpb25zLmNlbnRlck1vZGU9PT0hMD8oYz1NYXRoLmZsb29yKGIub3B0aW9ucy5zbGlkZXNUb1Nob3cvMiksYi5vcHRpb25zLmluZmluaXRlPT09ITAmJihhPj1jJiZhPD1iLnNsaWRlQ291bnQtMS1jP2IuJHNsaWRlcy5zbGljZShhLWMsYStjKzEpLmFkZENsYXNzKFwic2xpY2stYWN0aXZlXCIpLmF0dHIoXCJhcmlhLWhpZGRlblwiLFwiZmFsc2VcIik6KGU9Yi5vcHRpb25zLnNsaWRlc1RvU2hvdythLFxuZC5zbGljZShlLWMrMSxlK2MrMikuYWRkQ2xhc3MoXCJzbGljay1hY3RpdmVcIikuYXR0cihcImFyaWEtaGlkZGVuXCIsXCJmYWxzZVwiKSksMD09PWE/ZC5lcShkLmxlbmd0aC0xLWIub3B0aW9ucy5zbGlkZXNUb1Nob3cpLmFkZENsYXNzKFwic2xpY2stY2VudGVyXCIpOmE9PT1iLnNsaWRlQ291bnQtMSYmZC5lcShiLm9wdGlvbnMuc2xpZGVzVG9TaG93KS5hZGRDbGFzcyhcInNsaWNrLWNlbnRlclwiKSksYi4kc2xpZGVzLmVxKGEpLmFkZENsYXNzKFwic2xpY2stY2VudGVyXCIpKTphPj0wJiZhPD1iLnNsaWRlQ291bnQtYi5vcHRpb25zLnNsaWRlc1RvU2hvdz9iLiRzbGlkZXMuc2xpY2UoYSxhK2Iub3B0aW9ucy5zbGlkZXNUb1Nob3cpLmFkZENsYXNzKFwic2xpY2stYWN0aXZlXCIpLmF0dHIoXCJhcmlhLWhpZGRlblwiLFwiZmFsc2VcIik6ZC5sZW5ndGg8PWIub3B0aW9ucy5zbGlkZXNUb1Nob3c/ZC5hZGRDbGFzcyhcInNsaWNrLWFjdGl2ZVwiKS5hdHRyKFwiYXJpYS1oaWRkZW5cIixcImZhbHNlXCIpOihmPWIuc2xpZGVDb3VudCViLm9wdGlvbnMuc2xpZGVzVG9TaG93LGU9Yi5vcHRpb25zLmluZmluaXRlPT09ITA/Yi5vcHRpb25zLnNsaWRlc1RvU2hvdythOmEsYi5vcHRpb25zLnNsaWRlc1RvU2hvdz09Yi5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsJiZiLnNsaWRlQ291bnQtYTxiLm9wdGlvbnMuc2xpZGVzVG9TaG93P2Quc2xpY2UoZS0oYi5vcHRpb25zLnNsaWRlc1RvU2hvdy1mKSxlK2YpLmFkZENsYXNzKFwic2xpY2stYWN0aXZlXCIpLmF0dHIoXCJhcmlhLWhpZGRlblwiLFwiZmFsc2VcIik6ZC5zbGljZShlLGUrYi5vcHRpb25zLnNsaWRlc1RvU2hvdykuYWRkQ2xhc3MoXCJzbGljay1hY3RpdmVcIikuYXR0cihcImFyaWEtaGlkZGVuXCIsXCJmYWxzZVwiKSksXCJvbmRlbWFuZFwiPT09Yi5vcHRpb25zLmxhenlMb2FkJiZiLmxhenlMb2FkKCl9LGIucHJvdG90eXBlLnNldHVwSW5maW5pdGU9ZnVuY3Rpb24oKXt2YXIgYyxkLGUsYj10aGlzO2lmKGIub3B0aW9ucy5mYWRlPT09ITAmJihiLm9wdGlvbnMuY2VudGVyTW9kZT0hMSksYi5vcHRpb25zLmluZmluaXRlPT09ITAmJmIub3B0aW9ucy5mYWRlPT09ITEmJihkPW51bGwsYi5zbGlkZUNvdW50PmIub3B0aW9ucy5zbGlkZXNUb1Nob3cpKXtmb3IoZT1iLm9wdGlvbnMuY2VudGVyTW9kZT09PSEwP2Iub3B0aW9ucy5zbGlkZXNUb1Nob3crMTpiLm9wdGlvbnMuc2xpZGVzVG9TaG93LGM9Yi5zbGlkZUNvdW50O2M+Yi5zbGlkZUNvdW50LWU7Yy09MSlkPWMtMSxhKGIuJHNsaWRlc1tkXSkuY2xvbmUoITApLmF0dHIoXCJpZFwiLFwiXCIpLmF0dHIoXCJkYXRhLXNsaWNrLWluZGV4XCIsZC1iLnNsaWRlQ291bnQpLnByZXBlbmRUbyhiLiRzbGlkZVRyYWNrKS5hZGRDbGFzcyhcInNsaWNrLWNsb25lZFwiKTtmb3IoYz0wO2U+YztjKz0xKWQ9YyxhKGIuJHNsaWRlc1tkXSkuY2xvbmUoITApLmF0dHIoXCJpZFwiLFwiXCIpLmF0dHIoXCJkYXRhLXNsaWNrLWluZGV4XCIsZCtiLnNsaWRlQ291bnQpLmFwcGVuZFRvKGIuJHNsaWRlVHJhY2spLmFkZENsYXNzKFwic2xpY2stY2xvbmVkXCIpO2IuJHNsaWRlVHJhY2suZmluZChcIi5zbGljay1jbG9uZWRcIikuZmluZChcIltpZF1cIikuZWFjaChmdW5jdGlvbigpe2EodGhpcykuYXR0cihcImlkXCIsXCJcIil9KX19LGIucHJvdG90eXBlLmludGVycnVwdD1mdW5jdGlvbihhKXt2YXIgYj10aGlzO2F8fGIuYXV0b1BsYXkoKSxiLmludGVycnVwdGVkPWF9LGIucHJvdG90eXBlLnNlbGVjdEhhbmRsZXI9ZnVuY3Rpb24oYil7dmFyIGM9dGhpcyxkPWEoYi50YXJnZXQpLmlzKFwiLnNsaWNrLXNsaWRlXCIpP2EoYi50YXJnZXQpOmEoYi50YXJnZXQpLnBhcmVudHMoXCIuc2xpY2stc2xpZGVcIiksZT1wYXJzZUludChkLmF0dHIoXCJkYXRhLXNsaWNrLWluZGV4XCIpKTtyZXR1cm4gZXx8KGU9MCksYy5zbGlkZUNvdW50PD1jLm9wdGlvbnMuc2xpZGVzVG9TaG93PyhjLnNldFNsaWRlQ2xhc3NlcyhlKSx2b2lkIGMuYXNOYXZGb3IoZSkpOnZvaWQgYy5zbGlkZUhhbmRsZXIoZSl9LGIucHJvdG90eXBlLnNsaWRlSGFuZGxlcj1mdW5jdGlvbihhLGIsYyl7dmFyIGQsZSxmLGcsaixoPW51bGwsaT10aGlzO3JldHVybiBiPWJ8fCExLGkuYW5pbWF0aW5nPT09ITAmJmkub3B0aW9ucy53YWl0Rm9yQW5pbWF0ZT09PSEwfHxpLm9wdGlvbnMuZmFkZT09PSEwJiZpLmN1cnJlbnRTbGlkZT09PWF8fGkuc2xpZGVDb3VudDw9aS5vcHRpb25zLnNsaWRlc1RvU2hvdz92b2lkIDA6KGI9PT0hMSYmaS5hc05hdkZvcihhKSxkPWEsaD1pLmdldExlZnQoZCksZz1pLmdldExlZnQoaS5jdXJyZW50U2xpZGUpLGkuY3VycmVudExlZnQ9bnVsbD09PWkuc3dpcGVMZWZ0P2c6aS5zd2lwZUxlZnQsaS5vcHRpb25zLmluZmluaXRlPT09ITEmJmkub3B0aW9ucy5jZW50ZXJNb2RlPT09ITEmJigwPmF8fGE+aS5nZXREb3RDb3VudCgpKmkub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCk/dm9pZChpLm9wdGlvbnMuZmFkZT09PSExJiYoZD1pLmN1cnJlbnRTbGlkZSxjIT09ITA/aS5hbmltYXRlU2xpZGUoZyxmdW5jdGlvbigpe2kucG9zdFNsaWRlKGQpfSk6aS5wb3N0U2xpZGUoZCkpKTppLm9wdGlvbnMuaW5maW5pdGU9PT0hMSYmaS5vcHRpb25zLmNlbnRlck1vZGU9PT0hMCYmKDA+YXx8YT5pLnNsaWRlQ291bnQtaS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKT92b2lkKGkub3B0aW9ucy5mYWRlPT09ITEmJihkPWkuY3VycmVudFNsaWRlLGMhPT0hMD9pLmFuaW1hdGVTbGlkZShnLGZ1bmN0aW9uKCl7aS5wb3N0U2xpZGUoZCl9KTppLnBvc3RTbGlkZShkKSkpOihpLm9wdGlvbnMuYXV0b3BsYXkmJmNsZWFySW50ZXJ2YWwoaS5hdXRvUGxheVRpbWVyKSxlPTA+ZD9pLnNsaWRlQ291bnQlaS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIT09MD9pLnNsaWRlQ291bnQtaS5zbGlkZUNvdW50JWkub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDppLnNsaWRlQ291bnQrZDpkPj1pLnNsaWRlQ291bnQ/aS5zbGlkZUNvdW50JWkub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCE9PTA/MDpkLWkuc2xpZGVDb3VudDpkLGkuYW5pbWF0aW5nPSEwLGkuJHNsaWRlci50cmlnZ2VyKFwiYmVmb3JlQ2hhbmdlXCIsW2ksaS5jdXJyZW50U2xpZGUsZV0pLGY9aS5jdXJyZW50U2xpZGUsaS5jdXJyZW50U2xpZGU9ZSxpLnNldFNsaWRlQ2xhc3NlcyhpLmN1cnJlbnRTbGlkZSksaS5vcHRpb25zLmFzTmF2Rm9yJiYoaj1pLmdldE5hdlRhcmdldCgpLGo9ai5zbGljayhcImdldFNsaWNrXCIpLGouc2xpZGVDb3VudDw9ai5vcHRpb25zLnNsaWRlc1RvU2hvdyYmai5zZXRTbGlkZUNsYXNzZXMoaS5jdXJyZW50U2xpZGUpKSxpLnVwZGF0ZURvdHMoKSxpLnVwZGF0ZUFycm93cygpLGkub3B0aW9ucy5mYWRlPT09ITA/KGMhPT0hMD8oaS5mYWRlU2xpZGVPdXQoZiksaS5mYWRlU2xpZGUoZSxmdW5jdGlvbigpe2kucG9zdFNsaWRlKGUpfSkpOmkucG9zdFNsaWRlKGUpLHZvaWQgaS5hbmltYXRlSGVpZ2h0KCkpOnZvaWQoYyE9PSEwP2kuYW5pbWF0ZVNsaWRlKGgsZnVuY3Rpb24oKXtpLnBvc3RTbGlkZShlKX0pOmkucG9zdFNsaWRlKGUpKSkpfSxiLnByb3RvdHlwZS5zdGFydExvYWQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzO2Eub3B0aW9ucy5hcnJvd3M9PT0hMCYmYS5zbGlkZUNvdW50PmEub3B0aW9ucy5zbGlkZXNUb1Nob3cmJihhLiRwcmV2QXJyb3cuaGlkZSgpLGEuJG5leHRBcnJvdy5oaWRlKCkpLGEub3B0aW9ucy5kb3RzPT09ITAmJmEuc2xpZGVDb3VudD5hLm9wdGlvbnMuc2xpZGVzVG9TaG93JiZhLiRkb3RzLmhpZGUoKSxhLiRzbGlkZXIuYWRkQ2xhc3MoXCJzbGljay1sb2FkaW5nXCIpfSxiLnByb3RvdHlwZS5zd2lwZURpcmVjdGlvbj1mdW5jdGlvbigpe3ZhciBhLGIsYyxkLGU9dGhpcztyZXR1cm4gYT1lLnRvdWNoT2JqZWN0LnN0YXJ0WC1lLnRvdWNoT2JqZWN0LmN1clgsYj1lLnRvdWNoT2JqZWN0LnN0YXJ0WS1lLnRvdWNoT2JqZWN0LmN1clksYz1NYXRoLmF0YW4yKGIsYSksZD1NYXRoLnJvdW5kKDE4MCpjL01hdGguUEkpLDA+ZCYmKGQ9MzYwLU1hdGguYWJzKGQpKSw0NT49ZCYmZD49MD9lLm9wdGlvbnMucnRsPT09ITE/XCJsZWZ0XCI6XCJyaWdodFwiOjM2MD49ZCYmZD49MzE1P2Uub3B0aW9ucy5ydGw9PT0hMT9cImxlZnRcIjpcInJpZ2h0XCI6ZD49MTM1JiYyMjU+PWQ/ZS5vcHRpb25zLnJ0bD09PSExP1wicmlnaHRcIjpcImxlZnRcIjplLm9wdGlvbnMudmVydGljYWxTd2lwaW5nPT09ITA/ZD49MzUmJjEzNT49ZD9cImRvd25cIjpcInVwXCI6XCJ2ZXJ0aWNhbFwifSxiLnByb3RvdHlwZS5zd2lwZUVuZD1mdW5jdGlvbihhKXt2YXIgYyxkLGI9dGhpcztpZihiLmRyYWdnaW5nPSExLGIuaW50ZXJydXB0ZWQ9ITEsYi5zaG91bGRDbGljaz1iLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoPjEwPyExOiEwLHZvaWQgMD09PWIudG91Y2hPYmplY3QuY3VyWClyZXR1cm4hMTtpZihiLnRvdWNoT2JqZWN0LmVkZ2VIaXQ9PT0hMCYmYi4kc2xpZGVyLnRyaWdnZXIoXCJlZGdlXCIsW2IsYi5zd2lwZURpcmVjdGlvbigpXSksYi50b3VjaE9iamVjdC5zd2lwZUxlbmd0aD49Yi50b3VjaE9iamVjdC5taW5Td2lwZSl7c3dpdGNoKGQ9Yi5zd2lwZURpcmVjdGlvbigpKXtjYXNlXCJsZWZ0XCI6Y2FzZVwiZG93blwiOmM9Yi5vcHRpb25zLnN3aXBlVG9TbGlkZT9iLmNoZWNrTmF2aWdhYmxlKGIuY3VycmVudFNsaWRlK2IuZ2V0U2xpZGVDb3VudCgpKTpiLmN1cnJlbnRTbGlkZStiLmdldFNsaWRlQ291bnQoKSxiLmN1cnJlbnREaXJlY3Rpb249MDticmVhaztjYXNlXCJyaWdodFwiOmNhc2VcInVwXCI6Yz1iLm9wdGlvbnMuc3dpcGVUb1NsaWRlP2IuY2hlY2tOYXZpZ2FibGUoYi5jdXJyZW50U2xpZGUtYi5nZXRTbGlkZUNvdW50KCkpOmIuY3VycmVudFNsaWRlLWIuZ2V0U2xpZGVDb3VudCgpLGIuY3VycmVudERpcmVjdGlvbj0xfVwidmVydGljYWxcIiE9ZCYmKGIuc2xpZGVIYW5kbGVyKGMpLGIudG91Y2hPYmplY3Q9e30sYi4kc2xpZGVyLnRyaWdnZXIoXCJzd2lwZVwiLFtiLGRdKSl9ZWxzZSBiLnRvdWNoT2JqZWN0LnN0YXJ0WCE9PWIudG91Y2hPYmplY3QuY3VyWCYmKGIuc2xpZGVIYW5kbGVyKGIuY3VycmVudFNsaWRlKSxiLnRvdWNoT2JqZWN0PXt9KX0sYi5wcm90b3R5cGUuc3dpcGVIYW5kbGVyPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7aWYoIShiLm9wdGlvbnMuc3dpcGU9PT0hMXx8XCJvbnRvdWNoZW5kXCJpbiBkb2N1bWVudCYmYi5vcHRpb25zLnN3aXBlPT09ITF8fGIub3B0aW9ucy5kcmFnZ2FibGU9PT0hMSYmLTEhPT1hLnR5cGUuaW5kZXhPZihcIm1vdXNlXCIpKSlzd2l0Y2goYi50b3VjaE9iamVjdC5maW5nZXJDb3VudD1hLm9yaWdpbmFsRXZlbnQmJnZvaWQgMCE9PWEub3JpZ2luYWxFdmVudC50b3VjaGVzP2Eub3JpZ2luYWxFdmVudC50b3VjaGVzLmxlbmd0aDoxLGIudG91Y2hPYmplY3QubWluU3dpcGU9Yi5saXN0V2lkdGgvYi5vcHRpb25zLnRvdWNoVGhyZXNob2xkLGIub3B0aW9ucy52ZXJ0aWNhbFN3aXBpbmc9PT0hMCYmKGIudG91Y2hPYmplY3QubWluU3dpcGU9Yi5saXN0SGVpZ2h0L2Iub3B0aW9ucy50b3VjaFRocmVzaG9sZCksYS5kYXRhLmFjdGlvbil7Y2FzZVwic3RhcnRcIjpiLnN3aXBlU3RhcnQoYSk7YnJlYWs7Y2FzZVwibW92ZVwiOmIuc3dpcGVNb3ZlKGEpO2JyZWFrO2Nhc2VcImVuZFwiOmIuc3dpcGVFbmQoYSl9fSxiLnByb3RvdHlwZS5zd2lwZU1vdmU9ZnVuY3Rpb24oYSl7dmFyIGQsZSxmLGcsaCxiPXRoaXM7cmV0dXJuIGg9dm9pZCAwIT09YS5vcmlnaW5hbEV2ZW50P2Eub3JpZ2luYWxFdmVudC50b3VjaGVzOm51bGwsIWIuZHJhZ2dpbmd8fGgmJjEhPT1oLmxlbmd0aD8hMTooZD1iLmdldExlZnQoYi5jdXJyZW50U2xpZGUpLGIudG91Y2hPYmplY3QuY3VyWD12b2lkIDAhPT1oP2hbMF0ucGFnZVg6YS5jbGllbnRYLGIudG91Y2hPYmplY3QuY3VyWT12b2lkIDAhPT1oP2hbMF0ucGFnZVk6YS5jbGllbnRZLGIudG91Y2hPYmplY3Quc3dpcGVMZW5ndGg9TWF0aC5yb3VuZChNYXRoLnNxcnQoTWF0aC5wb3coYi50b3VjaE9iamVjdC5jdXJYLWIudG91Y2hPYmplY3Quc3RhcnRYLDIpKSksYi5vcHRpb25zLnZlcnRpY2FsU3dpcGluZz09PSEwJiYoYi50b3VjaE9iamVjdC5zd2lwZUxlbmd0aD1NYXRoLnJvdW5kKE1hdGguc3FydChNYXRoLnBvdyhiLnRvdWNoT2JqZWN0LmN1clktYi50b3VjaE9iamVjdC5zdGFydFksMikpKSksZT1iLnN3aXBlRGlyZWN0aW9uKCksXCJ2ZXJ0aWNhbFwiIT09ZT8odm9pZCAwIT09YS5vcmlnaW5hbEV2ZW50JiZiLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoPjQmJmEucHJldmVudERlZmF1bHQoKSxnPShiLm9wdGlvbnMucnRsPT09ITE/MTotMSkqKGIudG91Y2hPYmplY3QuY3VyWD5iLnRvdWNoT2JqZWN0LnN0YXJ0WD8xOi0xKSxiLm9wdGlvbnMudmVydGljYWxTd2lwaW5nPT09ITAmJihnPWIudG91Y2hPYmplY3QuY3VyWT5iLnRvdWNoT2JqZWN0LnN0YXJ0WT8xOi0xKSxmPWIudG91Y2hPYmplY3Quc3dpcGVMZW5ndGgsYi50b3VjaE9iamVjdC5lZGdlSGl0PSExLGIub3B0aW9ucy5pbmZpbml0ZT09PSExJiYoMD09PWIuY3VycmVudFNsaWRlJiZcInJpZ2h0XCI9PT1lfHxiLmN1cnJlbnRTbGlkZT49Yi5nZXREb3RDb3VudCgpJiZcImxlZnRcIj09PWUpJiYoZj1iLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoKmIub3B0aW9ucy5lZGdlRnJpY3Rpb24sYi50b3VjaE9iamVjdC5lZGdlSGl0PSEwKSxiLm9wdGlvbnMudmVydGljYWw9PT0hMT9iLnN3aXBlTGVmdD1kK2YqZzpiLnN3aXBlTGVmdD1kK2YqKGIuJGxpc3QuaGVpZ2h0KCkvYi5saXN0V2lkdGgpKmcsYi5vcHRpb25zLnZlcnRpY2FsU3dpcGluZz09PSEwJiYoYi5zd2lwZUxlZnQ9ZCtmKmcpLGIub3B0aW9ucy5mYWRlPT09ITB8fGIub3B0aW9ucy50b3VjaE1vdmU9PT0hMT8hMTpiLmFuaW1hdGluZz09PSEwPyhiLnN3aXBlTGVmdD1udWxsLCExKTp2b2lkIGIuc2V0Q1NTKGIuc3dpcGVMZWZ0KSk6dm9pZCAwKX0sYi5wcm90b3R5cGUuc3dpcGVTdGFydD1mdW5jdGlvbihhKXt2YXIgYyxiPXRoaXM7cmV0dXJuIGIuaW50ZXJydXB0ZWQ9ITAsMSE9PWIudG91Y2hPYmplY3QuZmluZ2VyQ291bnR8fGIuc2xpZGVDb3VudDw9Yi5vcHRpb25zLnNsaWRlc1RvU2hvdz8oYi50b3VjaE9iamVjdD17fSwhMSk6KHZvaWQgMCE9PWEub3JpZ2luYWxFdmVudCYmdm9pZCAwIT09YS5vcmlnaW5hbEV2ZW50LnRvdWNoZXMmJihjPWEub3JpZ2luYWxFdmVudC50b3VjaGVzWzBdKSxiLnRvdWNoT2JqZWN0LnN0YXJ0WD1iLnRvdWNoT2JqZWN0LmN1clg9dm9pZCAwIT09Yz9jLnBhZ2VYOmEuY2xpZW50WCxiLnRvdWNoT2JqZWN0LnN0YXJ0WT1iLnRvdWNoT2JqZWN0LmN1clk9dm9pZCAwIT09Yz9jLnBhZ2VZOmEuY2xpZW50WSx2b2lkKGIuZHJhZ2dpbmc9ITApKX0sYi5wcm90b3R5cGUudW5maWx0ZXJTbGlkZXM9Yi5wcm90b3R5cGUuc2xpY2tVbmZpbHRlcj1mdW5jdGlvbigpe3ZhciBhPXRoaXM7bnVsbCE9PWEuJHNsaWRlc0NhY2hlJiYoYS51bmxvYWQoKSxhLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSkuZGV0YWNoKCksYS4kc2xpZGVzQ2FjaGUuYXBwZW5kVG8oYS4kc2xpZGVUcmFjayksYS5yZWluaXQoKSl9LGIucHJvdG90eXBlLnVubG9hZD1mdW5jdGlvbigpe3ZhciBiPXRoaXM7YShcIi5zbGljay1jbG9uZWRcIixiLiRzbGlkZXIpLnJlbW92ZSgpLGIuJGRvdHMmJmIuJGRvdHMucmVtb3ZlKCksYi4kcHJldkFycm93JiZiLmh0bWxFeHByLnRlc3QoYi5vcHRpb25zLnByZXZBcnJvdykmJmIuJHByZXZBcnJvdy5yZW1vdmUoKSxiLiRuZXh0QXJyb3cmJmIuaHRtbEV4cHIudGVzdChiLm9wdGlvbnMubmV4dEFycm93KSYmYi4kbmV4dEFycm93LnJlbW92ZSgpLGIuJHNsaWRlcy5yZW1vdmVDbGFzcyhcInNsaWNrLXNsaWRlIHNsaWNrLWFjdGl2ZSBzbGljay12aXNpYmxlIHNsaWNrLWN1cnJlbnRcIikuYXR0cihcImFyaWEtaGlkZGVuXCIsXCJ0cnVlXCIpLmNzcyhcIndpZHRoXCIsXCJcIil9LGIucHJvdG90eXBlLnVuc2xpY2s9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcztiLiRzbGlkZXIudHJpZ2dlcihcInVuc2xpY2tcIixbYixhXSksYi5kZXN0cm95KCl9LGIucHJvdG90eXBlLnVwZGF0ZUFycm93cz1mdW5jdGlvbigpe3ZhciBiLGE9dGhpcztiPU1hdGguZmxvb3IoYS5vcHRpb25zLnNsaWRlc1RvU2hvdy8yKSxhLm9wdGlvbnMuYXJyb3dzPT09ITAmJmEuc2xpZGVDb3VudD5hLm9wdGlvbnMuc2xpZGVzVG9TaG93JiYhYS5vcHRpb25zLmluZmluaXRlJiYoYS4kcHJldkFycm93LnJlbW92ZUNsYXNzKFwic2xpY2stZGlzYWJsZWRcIikuYXR0cihcImFyaWEtZGlzYWJsZWRcIixcImZhbHNlXCIpLGEuJG5leHRBcnJvdy5yZW1vdmVDbGFzcyhcInNsaWNrLWRpc2FibGVkXCIpLmF0dHIoXCJhcmlhLWRpc2FibGVkXCIsXCJmYWxzZVwiKSwwPT09YS5jdXJyZW50U2xpZGU/KGEuJHByZXZBcnJvdy5hZGRDbGFzcyhcInNsaWNrLWRpc2FibGVkXCIpLmF0dHIoXCJhcmlhLWRpc2FibGVkXCIsXCJ0cnVlXCIpLGEuJG5leHRBcnJvdy5yZW1vdmVDbGFzcyhcInNsaWNrLWRpc2FibGVkXCIpLmF0dHIoXCJhcmlhLWRpc2FibGVkXCIsXCJmYWxzZVwiKSk6YS5jdXJyZW50U2xpZGU+PWEuc2xpZGVDb3VudC1hLm9wdGlvbnMuc2xpZGVzVG9TaG93JiZhLm9wdGlvbnMuY2VudGVyTW9kZT09PSExPyhhLiRuZXh0QXJyb3cuYWRkQ2xhc3MoXCJzbGljay1kaXNhYmxlZFwiKS5hdHRyKFwiYXJpYS1kaXNhYmxlZFwiLFwidHJ1ZVwiKSxhLiRwcmV2QXJyb3cucmVtb3ZlQ2xhc3MoXCJzbGljay1kaXNhYmxlZFwiKS5hdHRyKFwiYXJpYS1kaXNhYmxlZFwiLFwiZmFsc2VcIikpOmEuY3VycmVudFNsaWRlPj1hLnNsaWRlQ291bnQtMSYmYS5vcHRpb25zLmNlbnRlck1vZGU9PT0hMCYmKGEuJG5leHRBcnJvdy5hZGRDbGFzcyhcInNsaWNrLWRpc2FibGVkXCIpLmF0dHIoXCJhcmlhLWRpc2FibGVkXCIsXCJ0cnVlXCIpLGEuJHByZXZBcnJvdy5yZW1vdmVDbGFzcyhcInNsaWNrLWRpc2FibGVkXCIpLmF0dHIoXCJhcmlhLWRpc2FibGVkXCIsXCJmYWxzZVwiKSkpfSxiLnByb3RvdHlwZS51cGRhdGVEb3RzPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcztudWxsIT09YS4kZG90cyYmKGEuJGRvdHMuZmluZChcImxpXCIpLnJlbW92ZUNsYXNzKFwic2xpY2stYWN0aXZlXCIpLmF0dHIoXCJhcmlhLWhpZGRlblwiLFwidHJ1ZVwiKSxhLiRkb3RzLmZpbmQoXCJsaVwiKS5lcShNYXRoLmZsb29yKGEuY3VycmVudFNsaWRlL2Eub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCkpLmFkZENsYXNzKFwic2xpY2stYWN0aXZlXCIpLmF0dHIoXCJhcmlhLWhpZGRlblwiLFwiZmFsc2VcIikpfSxiLnByb3RvdHlwZS52aXNpYmlsaXR5PWZ1bmN0aW9uKCl7dmFyIGE9dGhpczthLm9wdGlvbnMuYXV0b3BsYXkmJihkb2N1bWVudFthLmhpZGRlbl0/YS5pbnRlcnJ1cHRlZD0hMDphLmludGVycnVwdGVkPSExKX0sYS5mbi5zbGljaz1mdW5jdGlvbigpe3ZhciBmLGcsYT10aGlzLGM9YXJndW1lbnRzWzBdLGQ9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpLGU9YS5sZW5ndGg7Zm9yKGY9MDtlPmY7ZisrKWlmKFwib2JqZWN0XCI9PXR5cGVvZiBjfHxcInVuZGVmaW5lZFwiPT10eXBlb2YgYz9hW2ZdLnNsaWNrPW5ldyBiKGFbZl0sYyk6Zz1hW2ZdLnNsaWNrW2NdLmFwcGx5KGFbZl0uc2xpY2ssZCksXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGcpcmV0dXJuIGc7cmV0dXJuIGF9fSk7IiwiLyoqXG4gKiBTVkdJbmplY3RvciB2MS4xLjMgLSBGYXN0LCBjYWNoaW5nLCBkeW5hbWljIGlubGluZSBTVkcgRE9NIGluamVjdGlvbiBsaWJyYXJ5XG4gKiBodHRwczovL2dpdGh1Yi5jb20vaWNvbmljL1NWR0luamVjdG9yXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LTIwMTUgV2F5YnVyeSA8aGVsbG9Ad2F5YnVyeS5jb20+XG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuIWZ1bmN0aW9uKHQsZSl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcih0KXt0PXQuc3BsaXQoXCIgXCIpO2Zvcih2YXIgZT17fSxyPXQubGVuZ3RoLG49W107ci0tOyllLmhhc093blByb3BlcnR5KHRbcl0pfHwoZVt0W3JdXT0xLG4udW5zaGlmdCh0W3JdKSk7cmV0dXJuIG4uam9pbihcIiBcIil9dmFyIG49XCJmaWxlOlwiPT09dC5sb2NhdGlvbi5wcm90b2NvbCxpPWUuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZShcImh0dHA6Ly93d3cudzMub3JnL1RSL1NWRzExL2ZlYXR1cmUjQmFzaWNTdHJ1Y3R1cmVcIixcIjEuMVwiKSxvPUFycmF5LnByb3RvdHlwZS5mb3JFYWNofHxmdW5jdGlvbih0LGUpe2lmKHZvaWQgMD09PXRoaXN8fG51bGw9PT10aGlzfHxcImZ1bmN0aW9uXCIhPXR5cGVvZiB0KXRocm93IG5ldyBUeXBlRXJyb3I7dmFyIHIsbj10aGlzLmxlbmd0aD4+PjA7Zm9yKHI9MDtuPnI7KytyKXIgaW4gdGhpcyYmdC5jYWxsKGUsdGhpc1tyXSxyLHRoaXMpfSxhPXt9LGw9MCxzPVtdLHU9W10sYz17fSxmPWZ1bmN0aW9uKHQpe3JldHVybiB0LmNsb25lTm9kZSghMCl9LHA9ZnVuY3Rpb24odCxlKXt1W3RdPXVbdF18fFtdLHVbdF0ucHVzaChlKX0sZD1mdW5jdGlvbih0KXtmb3IodmFyIGU9MCxyPXVbdF0ubGVuZ3RoO3I+ZTtlKyspIWZ1bmN0aW9uKGUpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt1W3RdW2VdKGYoYVt0XSkpfSwwKX0oZSl9LHY9ZnVuY3Rpb24oZSxyKXtpZih2b2lkIDAhPT1hW2VdKWFbZV1pbnN0YW5jZW9mIFNWR1NWR0VsZW1lbnQ/cihmKGFbZV0pKTpwKGUscik7ZWxzZXtpZighdC5YTUxIdHRwUmVxdWVzdClyZXR1cm4gcihcIkJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBYTUxIdHRwUmVxdWVzdFwiKSwhMTthW2VdPXt9LHAoZSxyKTt2YXIgaT1uZXcgWE1MSHR0cFJlcXVlc3Q7aS5vbnJlYWR5c3RhdGVjaGFuZ2U9ZnVuY3Rpb24oKXtpZig0PT09aS5yZWFkeVN0YXRlKXtpZig0MDQ9PT1pLnN0YXR1c3x8bnVsbD09PWkucmVzcG9uc2VYTUwpcmV0dXJuIHIoXCJVbmFibGUgdG8gbG9hZCBTVkcgZmlsZTogXCIrZSksbiYmcihcIk5vdGU6IFNWRyBpbmplY3Rpb24gYWpheCBjYWxscyBkbyBub3Qgd29yayBsb2NhbGx5IHdpdGhvdXQgYWRqdXN0aW5nIHNlY3VyaXR5IHNldHRpbmcgaW4geW91ciBicm93c2VyLiBPciBjb25zaWRlciB1c2luZyBhIGxvY2FsIHdlYnNlcnZlci5cIikscigpLCExO2lmKCEoMjAwPT09aS5zdGF0dXN8fG4mJjA9PT1pLnN0YXR1cykpcmV0dXJuIHIoXCJUaGVyZSB3YXMgYSBwcm9ibGVtIGluamVjdGluZyB0aGUgU1ZHOiBcIitpLnN0YXR1cytcIiBcIitpLnN0YXR1c1RleHQpLCExO2lmKGkucmVzcG9uc2VYTUwgaW5zdGFuY2VvZiBEb2N1bWVudClhW2VdPWkucmVzcG9uc2VYTUwuZG9jdW1lbnRFbGVtZW50O2Vsc2UgaWYoRE9NUGFyc2VyJiZET01QYXJzZXIgaW5zdGFuY2VvZiBGdW5jdGlvbil7dmFyIHQ7dHJ5e3ZhciBvPW5ldyBET01QYXJzZXI7dD1vLnBhcnNlRnJvbVN0cmluZyhpLnJlc3BvbnNlVGV4dCxcInRleHQveG1sXCIpfWNhdGNoKGwpe3Q9dm9pZCAwfWlmKCF0fHx0LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwicGFyc2VyZXJyb3JcIikubGVuZ3RoKXJldHVybiByKFwiVW5hYmxlIHRvIHBhcnNlIFNWRyBmaWxlOiBcIitlKSwhMTthW2VdPXQuZG9jdW1lbnRFbGVtZW50fWQoZSl9fSxpLm9wZW4oXCJHRVRcIixlKSxpLm92ZXJyaWRlTWltZVR5cGUmJmkub3ZlcnJpZGVNaW1lVHlwZShcInRleHQveG1sXCIpLGkuc2VuZCgpfX0saD1mdW5jdGlvbihlLG4sYSx1KXt2YXIgZj1lLmdldEF0dHJpYnV0ZShcImRhdGEtc3JjXCIpfHxlLmdldEF0dHJpYnV0ZShcInNyY1wiKTtpZighL1xcLnN2Zy9pLnRlc3QoZikpcmV0dXJuIHZvaWQgdShcIkF0dGVtcHRlZCB0byBpbmplY3QgYSBmaWxlIHdpdGggYSBub24tc3ZnIGV4dGVuc2lvbjogXCIrZik7aWYoIWkpe3ZhciBwPWUuZ2V0QXR0cmlidXRlKFwiZGF0YS1mYWxsYmFja1wiKXx8ZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXBuZ1wiKTtyZXR1cm4gdm9pZChwPyhlLnNldEF0dHJpYnV0ZShcInNyY1wiLHApLHUobnVsbCkpOmE/KGUuc2V0QXR0cmlidXRlKFwic3JjXCIsYStcIi9cIitmLnNwbGl0KFwiL1wiKS5wb3AoKS5yZXBsYWNlKFwiLnN2Z1wiLFwiLnBuZ1wiKSksdShudWxsKSk6dShcIlRoaXMgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IFNWRyBhbmQgbm8gUE5HIGZhbGxiYWNrIHdhcyBkZWZpbmVkLlwiKSl9LTE9PT1zLmluZGV4T2YoZSkmJihzLnB1c2goZSksZS5zZXRBdHRyaWJ1dGUoXCJzcmNcIixcIlwiKSx2KGYsZnVuY3Rpb24oaSl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIGl8fFwic3RyaW5nXCI9PXR5cGVvZiBpKXJldHVybiB1KGkpLCExO3ZhciBhPWUuZ2V0QXR0cmlidXRlKFwiaWRcIik7YSYmaS5zZXRBdHRyaWJ1dGUoXCJpZFwiLGEpO3ZhciBwPWUuZ2V0QXR0cmlidXRlKFwidGl0bGVcIik7cCYmaS5zZXRBdHRyaWJ1dGUoXCJ0aXRsZVwiLHApO3ZhciBkPVtdLmNvbmNhdChpLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpfHxbXSxcImluamVjdGVkLXN2Z1wiLGUuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIil8fFtdKS5qb2luKFwiIFwiKTtpLnNldEF0dHJpYnV0ZShcImNsYXNzXCIscihkKSk7dmFyIHY9ZS5nZXRBdHRyaWJ1dGUoXCJzdHlsZVwiKTt2JiZpLnNldEF0dHJpYnV0ZShcInN0eWxlXCIsdik7dmFyIGg9W10uZmlsdGVyLmNhbGwoZS5hdHRyaWJ1dGVzLGZ1bmN0aW9uKHQpe3JldHVybi9eZGF0YS1cXHdbXFx3XFwtXSokLy50ZXN0KHQubmFtZSl9KTtvLmNhbGwoaCxmdW5jdGlvbih0KXt0Lm5hbWUmJnQudmFsdWUmJmkuc2V0QXR0cmlidXRlKHQubmFtZSx0LnZhbHVlKX0pO3ZhciBnLG0sYix5LEEsdz17Y2xpcFBhdGg6W1wiY2xpcC1wYXRoXCJdLFwiY29sb3ItcHJvZmlsZVwiOltcImNvbG9yLXByb2ZpbGVcIl0sY3Vyc29yOltcImN1cnNvclwiXSxmaWx0ZXI6W1wiZmlsdGVyXCJdLGxpbmVhckdyYWRpZW50OltcImZpbGxcIixcInN0cm9rZVwiXSxtYXJrZXI6W1wibWFya2VyXCIsXCJtYXJrZXItc3RhcnRcIixcIm1hcmtlci1taWRcIixcIm1hcmtlci1lbmRcIl0sbWFzazpbXCJtYXNrXCJdLHBhdHRlcm46W1wiZmlsbFwiLFwic3Ryb2tlXCJdLHJhZGlhbEdyYWRpZW50OltcImZpbGxcIixcInN0cm9rZVwiXX07T2JqZWN0LmtleXModykuZm9yRWFjaChmdW5jdGlvbih0KXtnPXQsYj13W3RdLG09aS5xdWVyeVNlbGVjdG9yQWxsKFwiZGVmcyBcIitnK1wiW2lkXVwiKTtmb3IodmFyIGU9MCxyPW0ubGVuZ3RoO3I+ZTtlKyspe3k9bVtlXS5pZCxBPXkrXCItXCIrbDt2YXIgbjtvLmNhbGwoYixmdW5jdGlvbih0KXtuPWkucXVlcnlTZWxlY3RvckFsbChcIltcIit0KycqPVwiJyt5KydcIl0nKTtmb3IodmFyIGU9MCxyPW4ubGVuZ3RoO3I+ZTtlKyspbltlXS5zZXRBdHRyaWJ1dGUodCxcInVybCgjXCIrQStcIilcIil9KSxtW2VdLmlkPUF9fSksaS5yZW1vdmVBdHRyaWJ1dGUoXCJ4bWxuczphXCIpO2Zvcih2YXIgeCxTLGs9aS5xdWVyeVNlbGVjdG9yQWxsKFwic2NyaXB0XCIpLGo9W10sRz0wLFQ9ay5sZW5ndGg7VD5HO0crKylTPWtbR10uZ2V0QXR0cmlidXRlKFwidHlwZVwiKSxTJiZcImFwcGxpY2F0aW9uL2VjbWFzY3JpcHRcIiE9PVMmJlwiYXBwbGljYXRpb24vamF2YXNjcmlwdFwiIT09U3x8KHg9a1tHXS5pbm5lclRleHR8fGtbR10udGV4dENvbnRlbnQsai5wdXNoKHgpLGkucmVtb3ZlQ2hpbGQoa1tHXSkpO2lmKGoubGVuZ3RoPjAmJihcImFsd2F5c1wiPT09bnx8XCJvbmNlXCI9PT1uJiYhY1tmXSkpe2Zvcih2YXIgTT0wLFY9ai5sZW5ndGg7Vj5NO00rKyluZXcgRnVuY3Rpb24oaltNXSkodCk7Y1tmXT0hMH12YXIgRT1pLnF1ZXJ5U2VsZWN0b3JBbGwoXCJzdHlsZVwiKTtvLmNhbGwoRSxmdW5jdGlvbih0KXt0LnRleHRDb250ZW50Kz1cIlwifSksZS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChpLGUpLGRlbGV0ZSBzW3MuaW5kZXhPZihlKV0sZT1udWxsLGwrKyx1KGkpfSkpfSxnPWZ1bmN0aW9uKHQsZSxyKXtlPWV8fHt9O3ZhciBuPWUuZXZhbFNjcmlwdHN8fFwiYWx3YXlzXCIsaT1lLnBuZ0ZhbGxiYWNrfHwhMSxhPWUuZWFjaDtpZih2b2lkIDAhPT10Lmxlbmd0aCl7dmFyIGw9MDtvLmNhbGwodCxmdW5jdGlvbihlKXtoKGUsbixpLGZ1bmN0aW9uKGUpe2EmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGEmJmEoZSksciYmdC5sZW5ndGg9PT0rK2wmJnIobCl9KX0pfWVsc2UgdD9oKHQsbixpLGZ1bmN0aW9uKGUpe2EmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGEmJmEoZSksciYmcigxKSx0PW51bGx9KTpyJiZyKDApfTtcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlJiZcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlLmV4cG9ydHM/bW9kdWxlLmV4cG9ydHM9ZXhwb3J0cz1nOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoZnVuY3Rpb24oKXtyZXR1cm4gZ30pOlwib2JqZWN0XCI9PXR5cGVvZiB0JiYodC5TVkdJbmplY3Rvcj1nKX0od2luZG93LGRvY3VtZW50KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN2Zy1pbmplY3Rvci5tYXAuanMiLCIhZnVuY3Rpb24odCxlKXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz1lKCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShlKToodD10fHxzZWxmKS5Td2VldGFsZXJ0Mj1lKCl9KHRoaXMsZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKHQpe3JldHVybihyPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbih0KXtyZXR1cm4gdHlwZW9mIHR9OmZ1bmN0aW9uKHQpe3JldHVybiB0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJnQuY29uc3RydWN0b3I9PT1TeW1ib2wmJnQhPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIHR9KSh0KX1mdW5jdGlvbiBhKHQsZSl7aWYoISh0IGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX1mdW5jdGlvbiBvKHQsZSl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciBvPWVbbl07by5lbnVtZXJhYmxlPW8uZW51bWVyYWJsZXx8ITEsby5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gbyYmKG8ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LG8ua2V5LG8pfX1mdW5jdGlvbiBjKHQsZSxuKXtyZXR1cm4gZSYmbyh0LnByb3RvdHlwZSxlKSxuJiZvKHQsbiksdH1mdW5jdGlvbiBzKCl7cmV0dXJuKHM9T2JqZWN0LmFzc2lnbnx8ZnVuY3Rpb24odCl7Zm9yKHZhciBlPTE7ZTxhcmd1bWVudHMubGVuZ3RoO2UrKyl7dmFyIG49YXJndW1lbnRzW2VdO2Zvcih2YXIgbyBpbiBuKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChuLG8pJiYodFtvXT1uW29dKX1yZXR1cm4gdH0pLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1mdW5jdGlvbiB1KHQpe3JldHVybih1PU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3QuZ2V0UHJvdG90eXBlT2Y6ZnVuY3Rpb24odCl7cmV0dXJuIHQuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YodCl9KSh0KX1mdW5jdGlvbiBsKHQsZSl7cmV0dXJuKGw9T2JqZWN0LnNldFByb3RvdHlwZU9mfHxmdW5jdGlvbih0LGUpe3JldHVybiB0Ll9fcHJvdG9fXz1lLHR9KSh0LGUpfWZ1bmN0aW9uIGQoKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsW10sZnVuY3Rpb24oKXt9KSksITB9Y2F0Y2godCl7cmV0dXJuITF9fWZ1bmN0aW9uIGkodCxlLG4pe3JldHVybihpPWQoKT9SZWZsZWN0LmNvbnN0cnVjdDpmdW5jdGlvbih0LGUsbil7dmFyIG89W251bGxdO28ucHVzaC5hcHBseShvLGUpO3ZhciBpPW5ldyhGdW5jdGlvbi5iaW5kLmFwcGx5KHQsbykpO3JldHVybiBuJiZsKGksbi5wcm90b3R5cGUpLGl9KS5hcHBseShudWxsLGFyZ3VtZW50cyl9ZnVuY3Rpb24gcCh0LGUpe3JldHVybiFlfHxcIm9iamVjdFwiIT10eXBlb2YgZSYmXCJmdW5jdGlvblwiIT10eXBlb2YgZT9mdW5jdGlvbih0KXtpZih2b2lkIDA9PT10KXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4gdH0odCk6ZX1mdW5jdGlvbiBmKHQsZSxuKXtyZXR1cm4oZj1cInVuZGVmaW5lZFwiIT10eXBlb2YgUmVmbGVjdCYmUmVmbGVjdC5nZXQ/UmVmbGVjdC5nZXQ6ZnVuY3Rpb24odCxlLG4pe3ZhciBvPWZ1bmN0aW9uKHQsZSl7Zm9yKDshT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsZSkmJm51bGwhPT0odD11KHQpKTspO3JldHVybiB0fSh0LGUpO2lmKG8pe3ZhciBpPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobyxlKTtyZXR1cm4gaS5nZXQ/aS5nZXQuY2FsbChuKTppLnZhbHVlfX0pKHQsZSxufHx0KX1mdW5jdGlvbiBtKGUpe3JldHVybiBPYmplY3Qua2V5cyhlKS5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIGVbdF19KX1mdW5jdGlvbiBoKHQpe3JldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0KX1mdW5jdGlvbiBnKHQsZSl7dmFyIG47bj0nXCInLmNvbmNhdCh0LCdcIiBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgcmVsZWFzZS4gUGxlYXNlIHVzZSBcIicpLmNvbmNhdChlLCdcIiBpbnN0ZWFkLicpLC0xPT09ei5pbmRleE9mKG4pJiYoei5wdXNoKG4pLF8obikpfWZ1bmN0aW9uIHYodCl7cmV0dXJuIHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIHQudG9Qcm9taXNlfWZ1bmN0aW9uIGIodCl7cmV0dXJuIHYodCk/dC50b1Byb21pc2UoKTpQcm9taXNlLnJlc29sdmUodCl9ZnVuY3Rpb24geSh0KXtyZXR1cm4gdCYmUHJvbWlzZS5yZXNvbHZlKHQpPT09dH1mdW5jdGlvbiB3KHQpe3JldHVybiB0IGluc3RhbmNlb2YgRWxlbWVudHx8XCJvYmplY3RcIj09PXIoZT10KSYmZS5qcXVlcnk7dmFyIGV9ZnVuY3Rpb24gdCh0KXt2YXIgZT17fTtmb3IodmFyIG4gaW4gdCllW3Rbbl1dPVwic3dhbDItXCIrdFtuXTtyZXR1cm4gZX1mdW5jdGlvbiBDKHQpe3ZhciBlPVEoKTtyZXR1cm4gZT9lLnF1ZXJ5U2VsZWN0b3IodCk6bnVsbH1mdW5jdGlvbiBlKHQpe3JldHVybiBDKFwiLlwiLmNvbmNhdCh0KSl9ZnVuY3Rpb24gbigpe3ZhciB0PSQoKTtyZXR1cm4gaCh0LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuXCIuY29uY2F0KFkuaWNvbikpKX1mdW5jdGlvbiBrKCl7dmFyIHQ9bigpLmZpbHRlcihmdW5jdGlvbih0KXtyZXR1cm4gdnQodCl9KTtyZXR1cm4gdC5sZW5ndGg/dFswXTpudWxsfWZ1bmN0aW9uIHgoKXtyZXR1cm4gZShZLnRpdGxlKX1mdW5jdGlvbiBQKCl7cmV0dXJuIGUoWS5jb250ZW50KX1mdW5jdGlvbiBBKCl7cmV0dXJuIGUoWS5pbWFnZSl9ZnVuY3Rpb24gQigpe3JldHVybiBlKFlbXCJwcm9ncmVzcy1zdGVwc1wiXSl9ZnVuY3Rpb24gUygpe3JldHVybiBlKFlbXCJ2YWxpZGF0aW9uLW1lc3NhZ2VcIl0pfWZ1bmN0aW9uIEUoKXtyZXR1cm4gQyhcIi5cIi5jb25jYXQoWS5hY3Rpb25zLFwiIC5cIikuY29uY2F0KFkuY29uZmlybSkpfWZ1bmN0aW9uIE8oKXtyZXR1cm4gQyhcIi5cIi5jb25jYXQoWS5hY3Rpb25zLFwiIC5cIikuY29uY2F0KFkuY2FuY2VsKSl9ZnVuY3Rpb24gVCgpe3JldHVybiBlKFkuYWN0aW9ucyl9ZnVuY3Rpb24gTCgpe3JldHVybiBlKFkuaGVhZGVyKX1mdW5jdGlvbiBJKCl7cmV0dXJuIGUoWS5mb290ZXIpfWZ1bmN0aW9uIGooKXtyZXR1cm4gZShZW1widGltZXItcHJvZ3Jlc3MtYmFyXCJdKX1mdW5jdGlvbiBxKCl7cmV0dXJuIGUoWS5jbG9zZSl9ZnVuY3Rpb24gVigpe3ZhciB0PWgoJCgpLnF1ZXJ5U2VsZWN0b3JBbGwoJ1t0YWJpbmRleF06bm90KFt0YWJpbmRleD1cIi0xXCJdKTpub3QoW3RhYmluZGV4PVwiMFwiXSknKSkuc29ydChmdW5jdGlvbih0LGUpe3JldHVybiB0PXBhcnNlSW50KHQuZ2V0QXR0cmlidXRlKFwidGFiaW5kZXhcIikpLChlPXBhcnNlSW50KGUuZ2V0QXR0cmlidXRlKFwidGFiaW5kZXhcIikpKTx0PzE6dDxlPy0xOjB9KSxlPWgoJCgpLnF1ZXJ5U2VsZWN0b3JBbGwoJ1xcbiAgYVtocmVmXSxcXG4gIGFyZWFbaHJlZl0sXFxuICBpbnB1dDpub3QoW2Rpc2FibGVkXSksXFxuICBzZWxlY3Q6bm90KFtkaXNhYmxlZF0pLFxcbiAgdGV4dGFyZWE6bm90KFtkaXNhYmxlZF0pLFxcbiAgYnV0dG9uOm5vdChbZGlzYWJsZWRdKSxcXG4gIGlmcmFtZSxcXG4gIG9iamVjdCxcXG4gIGVtYmVkLFxcbiAgW3RhYmluZGV4PVwiMFwiXSxcXG4gIFtjb250ZW50ZWRpdGFibGVdLFxcbiAgYXVkaW9bY29udHJvbHNdLFxcbiAgdmlkZW9bY29udHJvbHNdLFxcbiAgc3VtbWFyeVxcbicpKS5maWx0ZXIoZnVuY3Rpb24odCl7cmV0dXJuXCItMVwiIT09dC5nZXRBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiKX0pO3JldHVybiBmdW5jdGlvbih0KXtmb3IodmFyIGU9W10sbj0wO248dC5sZW5ndGg7bisrKS0xPT09ZS5pbmRleE9mKHRbbl0pJiZlLnB1c2godFtuXSk7cmV0dXJuIGV9KHQuY29uY2F0KGUpKS5maWx0ZXIoZnVuY3Rpb24odCl7cmV0dXJuIHZ0KHQpfSl9ZnVuY3Rpb24gTSgpe3JldHVybiFKKCkmJiFkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5jb250YWlucyhZW1wibm8tYmFja2Ryb3BcIl0pfWZ1bmN0aW9uIFIoKXtyZXR1cm4gJCgpLmhhc0F0dHJpYnV0ZShcImRhdGEtbG9hZGluZ1wiKX1mdW5jdGlvbiBIKGUsdCl7dmFyIG47ZS50ZXh0Q29udGVudD1cIlwiLHQmJihuPShuZXcgRE9NUGFyc2VyKS5wYXJzZUZyb21TdHJpbmcodCxcInRleHQvaHRtbFwiKSxoKG4ucXVlcnlTZWxlY3RvcihcImhlYWRcIikuY2hpbGROb2RlcykuZm9yRWFjaChmdW5jdGlvbih0KXtlLmFwcGVuZENoaWxkKHQpfSksaChuLnF1ZXJ5U2VsZWN0b3IoXCJib2R5XCIpLmNoaWxkTm9kZXMpLmZvckVhY2goZnVuY3Rpb24odCl7ZS5hcHBlbmRDaGlsZCh0KX0pKX1mdW5jdGlvbiBEKHQsZSl7aWYoZSl7Zm9yKHZhciBuPWUuc3BsaXQoL1xccysvKSxvPTA7bzxuLmxlbmd0aDtvKyspaWYoIXQuY2xhc3NMaXN0LmNvbnRhaW5zKG5bb10pKXJldHVybjtyZXR1cm4gMX19ZnVuY3Rpb24gTih0LGUsbil7dmFyIG8saTtpZihpPWUsaCgobz10KS5jbGFzc0xpc3QpLmZvckVhY2goZnVuY3Rpb24odCl7LTE9PT1tKFkpLmluZGV4T2YodCkmJi0xPT09bShaKS5pbmRleE9mKHQpJiYtMT09PW0oaS5zaG93Q2xhc3MpLmluZGV4T2YodCkmJm8uY2xhc3NMaXN0LnJlbW92ZSh0KX0pLGUuY3VzdG9tQ2xhc3MmJmUuY3VzdG9tQ2xhc3Nbbl0pe2lmKFwic3RyaW5nXCIhPXR5cGVvZiBlLmN1c3RvbUNsYXNzW25dJiYhZS5jdXN0b21DbGFzc1tuXS5mb3JFYWNoKXJldHVybiBfKFwiSW52YWxpZCB0eXBlIG9mIGN1c3RvbUNsYXNzLlwiLmNvbmNhdChuLCchIEV4cGVjdGVkIHN0cmluZyBvciBpdGVyYWJsZSBvYmplY3QsIGdvdCBcIicpLmNvbmNhdChyKGUuY3VzdG9tQ2xhc3Nbbl0pLCdcIicpKTttdCh0LGUuY3VzdG9tQ2xhc3Nbbl0pfX12YXIgVT1cIlN3ZWV0QWxlcnQyOlwiLF89ZnVuY3Rpb24odCl7Y29uc29sZS53YXJuKFwiXCIuY29uY2F0KFUsXCIgXCIpLmNvbmNhdCh0KSl9LEY9ZnVuY3Rpb24odCl7Y29uc29sZS5lcnJvcihcIlwiLmNvbmNhdChVLFwiIFwiKS5jb25jYXQodCkpfSx6PVtdLFc9ZnVuY3Rpb24odCl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgdD90KCk6dH0sSz1PYmplY3QuZnJlZXplKHtjYW5jZWw6XCJjYW5jZWxcIixiYWNrZHJvcDpcImJhY2tkcm9wXCIsY2xvc2U6XCJjbG9zZVwiLGVzYzpcImVzY1wiLHRpbWVyOlwidGltZXJcIn0pLFk9dChbXCJjb250YWluZXJcIixcInNob3duXCIsXCJoZWlnaHQtYXV0b1wiLFwiaW9zZml4XCIsXCJwb3B1cFwiLFwibW9kYWxcIixcIm5vLWJhY2tkcm9wXCIsXCJuby10cmFuc2l0aW9uXCIsXCJ0b2FzdFwiLFwidG9hc3Qtc2hvd25cIixcInRvYXN0LWNvbHVtblwiLFwic2hvd1wiLFwiaGlkZVwiLFwiY2xvc2VcIixcInRpdGxlXCIsXCJoZWFkZXJcIixcImNvbnRlbnRcIixcImh0bWwtY29udGFpbmVyXCIsXCJhY3Rpb25zXCIsXCJjb25maXJtXCIsXCJjYW5jZWxcIixcImZvb3RlclwiLFwiaWNvblwiLFwiaWNvbi1jb250ZW50XCIsXCJpbWFnZVwiLFwiaW5wdXRcIixcImZpbGVcIixcInJhbmdlXCIsXCJzZWxlY3RcIixcInJhZGlvXCIsXCJjaGVja2JveFwiLFwibGFiZWxcIixcInRleHRhcmVhXCIsXCJpbnB1dGVycm9yXCIsXCJ2YWxpZGF0aW9uLW1lc3NhZ2VcIixcInByb2dyZXNzLXN0ZXBzXCIsXCJhY3RpdmUtcHJvZ3Jlc3Mtc3RlcFwiLFwicHJvZ3Jlc3Mtc3RlcFwiLFwicHJvZ3Jlc3Mtc3RlcC1saW5lXCIsXCJsb2FkaW5nXCIsXCJzdHlsZWRcIixcInRvcFwiLFwidG9wLXN0YXJ0XCIsXCJ0b3AtZW5kXCIsXCJ0b3AtbGVmdFwiLFwidG9wLXJpZ2h0XCIsXCJjZW50ZXJcIixcImNlbnRlci1zdGFydFwiLFwiY2VudGVyLWVuZFwiLFwiY2VudGVyLWxlZnRcIixcImNlbnRlci1yaWdodFwiLFwiYm90dG9tXCIsXCJib3R0b20tc3RhcnRcIixcImJvdHRvbS1lbmRcIixcImJvdHRvbS1sZWZ0XCIsXCJib3R0b20tcmlnaHRcIixcImdyb3ctcm93XCIsXCJncm93LWNvbHVtblwiLFwiZ3Jvdy1mdWxsc2NyZWVuXCIsXCJydGxcIixcInRpbWVyLXByb2dyZXNzLWJhclwiLFwidGltZXItcHJvZ3Jlc3MtYmFyLWNvbnRhaW5lclwiLFwic2Nyb2xsYmFyLW1lYXN1cmVcIixcImljb24tc3VjY2Vzc1wiLFwiaWNvbi13YXJuaW5nXCIsXCJpY29uLWluZm9cIixcImljb24tcXVlc3Rpb25cIixcImljb24tZXJyb3JcIl0pLFo9dChbXCJzdWNjZXNzXCIsXCJ3YXJuaW5nXCIsXCJpbmZvXCIsXCJxdWVzdGlvblwiLFwiZXJyb3JcIl0pLFE9ZnVuY3Rpb24oKXtyZXR1cm4gZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yKFwiLlwiLmNvbmNhdChZLmNvbnRhaW5lcikpfSwkPWZ1bmN0aW9uKCl7cmV0dXJuIGUoWS5wb3B1cCl9LEo9ZnVuY3Rpb24oKXtyZXR1cm4gZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuY29udGFpbnMoWVtcInRvYXN0LXNob3duXCJdKX0sWD17cHJldmlvdXNCb2R5UGFkZGluZzpudWxsfTtmdW5jdGlvbiBHKHQsZSl7aWYoIWUpcmV0dXJuIG51bGw7c3dpdGNoKGUpe2Nhc2VcInNlbGVjdFwiOmNhc2VcInRleHRhcmVhXCI6Y2FzZVwiZmlsZVwiOnJldHVybiBndCh0LFlbZV0pO2Nhc2VcImNoZWNrYm94XCI6cmV0dXJuIHQucXVlcnlTZWxlY3RvcihcIi5cIi5jb25jYXQoWS5jaGVja2JveCxcIiBpbnB1dFwiKSk7Y2FzZVwicmFkaW9cIjpyZXR1cm4gdC5xdWVyeVNlbGVjdG9yKFwiLlwiLmNvbmNhdChZLnJhZGlvLFwiIGlucHV0OmNoZWNrZWRcIikpfHx0LnF1ZXJ5U2VsZWN0b3IoXCIuXCIuY29uY2F0KFkucmFkaW8sXCIgaW5wdXQ6Zmlyc3QtY2hpbGRcIikpO2Nhc2VcInJhbmdlXCI6cmV0dXJuIHQucXVlcnlTZWxlY3RvcihcIi5cIi5jb25jYXQoWS5yYW5nZSxcIiBpbnB1dFwiKSk7ZGVmYXVsdDpyZXR1cm4gZ3QodCxZLmlucHV0KX19ZnVuY3Rpb24gdHQodCl7dmFyIGU7dC5mb2N1cygpLFwiZmlsZVwiIT09dC50eXBlJiYoZT10LnZhbHVlLHQudmFsdWU9XCJcIix0LnZhbHVlPWUpfWZ1bmN0aW9uIGV0KHQsZSxuKXt0JiZlJiYoXCJzdHJpbmdcIj09dHlwZW9mIGUmJihlPWUuc3BsaXQoL1xccysvKS5maWx0ZXIoQm9vbGVhbikpLGUuZm9yRWFjaChmdW5jdGlvbihlKXt0LmZvckVhY2g/dC5mb3JFYWNoKGZ1bmN0aW9uKHQpe24/dC5jbGFzc0xpc3QuYWRkKGUpOnQuY2xhc3NMaXN0LnJlbW92ZShlKX0pOm4/dC5jbGFzc0xpc3QuYWRkKGUpOnQuY2xhc3NMaXN0LnJlbW92ZShlKX0pKX1mdW5jdGlvbiBudCh0LGUsbil7bnx8MD09PXBhcnNlSW50KG4pP3Quc3R5bGVbZV09XCJudW1iZXJcIj09dHlwZW9mIG4/XCJcIi5jb25jYXQobixcInB4XCIpOm46dC5zdHlsZS5yZW1vdmVQcm9wZXJ0eShlKX1mdW5jdGlvbiBvdCh0LGUpe3ZhciBuPTE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09ZT9lOlwiZmxleFwiO3Quc3R5bGUub3BhY2l0eT1cIlwiLHQuc3R5bGUuZGlzcGxheT1ufWZ1bmN0aW9uIGl0KHQpe3Quc3R5bGUub3BhY2l0eT1cIlwiLHQuc3R5bGUuZGlzcGxheT1cIm5vbmVcIn1mdW5jdGlvbiBydCh0LGUsbil7ZT9vdCh0LG4pOml0KHQpfWZ1bmN0aW9uIGF0KHQpe3JldHVybiEhKHQuc2Nyb2xsSGVpZ2h0PnQuY2xpZW50SGVpZ2h0KX1mdW5jdGlvbiBjdCh0KXt2YXIgZT13aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0KSxuPXBhcnNlRmxvYXQoZS5nZXRQcm9wZXJ0eVZhbHVlKFwiYW5pbWF0aW9uLWR1cmF0aW9uXCIpfHxcIjBcIiksbz1wYXJzZUZsb2F0KGUuZ2V0UHJvcGVydHlWYWx1ZShcInRyYW5zaXRpb24tZHVyYXRpb25cIil8fFwiMFwiKTtyZXR1cm4gMDxufHwwPG99ZnVuY3Rpb24gc3QodCxlKXt2YXIgbj0xPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWUmJmUsbz1qKCk7dnQobykmJihuJiYoby5zdHlsZS50cmFuc2l0aW9uPVwibm9uZVwiLG8uc3R5bGUud2lkdGg9XCIxMDAlXCIpLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtvLnN0eWxlLnRyYW5zaXRpb249XCJ3aWR0aCBcIi5jb25jYXQodC8xZTMsXCJzIGxpbmVhclwiKSxvLnN0eWxlLndpZHRoPVwiMCVcIn0sMTApKX1mdW5jdGlvbiB1dCgpe3JldHVyblwidW5kZWZpbmVkXCI9PXR5cGVvZiB3aW5kb3d8fFwidW5kZWZpbmVkXCI9PXR5cGVvZiBkb2N1bWVudH1mdW5jdGlvbiBsdCh0KXtsbi5pc1Zpc2libGUoKSYmZnQhPT10LnRhcmdldC52YWx1ZSYmbG4ucmVzZXRWYWxpZGF0aW9uTWVzc2FnZSgpLGZ0PXQudGFyZ2V0LnZhbHVlfWZ1bmN0aW9uIGR0KHQsZSl7dCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50P2UuYXBwZW5kQ2hpbGQodCk6XCJvYmplY3RcIj09PXIodCk/d3QodCxlKTp0JiZIKGUsdCl9ZnVuY3Rpb24gcHQodCxlKXt2YXIgbj1UKCksbz1FKCksaT1PKCk7ZS5zaG93Q29uZmlybUJ1dHRvbnx8ZS5zaG93Q2FuY2VsQnV0dG9ufHxpdChuKSxOKG4sZSxcImFjdGlvbnNcIikseHQobyxcImNvbmZpcm1cIixlKSx4dChpLFwiY2FuY2VsXCIsZSksZS5idXR0b25zU3R5bGluZz9mdW5jdGlvbih0LGUsbil7bXQoW3QsZV0sWS5zdHlsZWQpLG4uY29uZmlybUJ1dHRvbkNvbG9yJiYodC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3I9bi5jb25maXJtQnV0dG9uQ29sb3IpO24uY2FuY2VsQnV0dG9uQ29sb3ImJihlLnN0eWxlLmJhY2tncm91bmRDb2xvcj1uLmNhbmNlbEJ1dHRvbkNvbG9yKTt7dmFyIG87UigpfHwobz13aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0KS5nZXRQcm9wZXJ0eVZhbHVlKFwiYmFja2dyb3VuZC1jb2xvclwiKSx0LnN0eWxlLmJvcmRlckxlZnRDb2xvcj1vLHQuc3R5bGUuYm9yZGVyUmlnaHRDb2xvcj1vKX19KG8saSxlKTooaHQoW28saV0sWS5zdHlsZWQpLG8uc3R5bGUuYmFja2dyb3VuZENvbG9yPW8uc3R5bGUuYm9yZGVyTGVmdENvbG9yPW8uc3R5bGUuYm9yZGVyUmlnaHRDb2xvcj1cIlwiLGkuc3R5bGUuYmFja2dyb3VuZENvbG9yPWkuc3R5bGUuYm9yZGVyTGVmdENvbG9yPWkuc3R5bGUuYm9yZGVyUmlnaHRDb2xvcj1cIlwiKSxlLnJldmVyc2VCdXR0b25zJiZvLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGksbyl9dmFyIGZ0LG10PWZ1bmN0aW9uKHQsZSl7ZXQodCxlLCEwKX0saHQ9ZnVuY3Rpb24odCxlKXtldCh0LGUsITEpfSxndD1mdW5jdGlvbih0LGUpe2Zvcih2YXIgbj0wO248dC5jaGlsZE5vZGVzLmxlbmd0aDtuKyspaWYoRCh0LmNoaWxkTm9kZXNbbl0sZSkpcmV0dXJuIHQuY2hpbGROb2Rlc1tuXX0sdnQ9ZnVuY3Rpb24odCl7cmV0dXJuISghdHx8ISh0Lm9mZnNldFdpZHRofHx0Lm9mZnNldEhlaWdodHx8dC5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCkpfSxidD0nXFxuIDxkaXYgYXJpYS1sYWJlbGxlZGJ5PVwiJy5jb25jYXQoWS50aXRsZSwnXCIgYXJpYS1kZXNjcmliZWRieT1cIicpLmNvbmNhdChZLmNvbnRlbnQsJ1wiIGNsYXNzPVwiJykuY29uY2F0KFkucG9wdXAsJ1wiIHRhYmluZGV4PVwiLTFcIj5cXG4gICA8ZGl2IGNsYXNzPVwiJykuY29uY2F0KFkuaGVhZGVyLCdcIj5cXG4gICAgIDx1bCBjbGFzcz1cIicpLmNvbmNhdChZW1wicHJvZ3Jlc3Mtc3RlcHNcIl0sJ1wiPjwvdWw+XFxuICAgICA8ZGl2IGNsYXNzPVwiJykuY29uY2F0KFkuaWNvbixcIiBcIikuY29uY2F0KFouZXJyb3IsJ1wiPjwvZGl2PlxcbiAgICAgPGRpdiBjbGFzcz1cIicpLmNvbmNhdChZLmljb24sXCIgXCIpLmNvbmNhdChaLnF1ZXN0aW9uLCdcIj48L2Rpdj5cXG4gICAgIDxkaXYgY2xhc3M9XCInKS5jb25jYXQoWS5pY29uLFwiIFwiKS5jb25jYXQoWi53YXJuaW5nLCdcIj48L2Rpdj5cXG4gICAgIDxkaXYgY2xhc3M9XCInKS5jb25jYXQoWS5pY29uLFwiIFwiKS5jb25jYXQoWi5pbmZvLCdcIj48L2Rpdj5cXG4gICAgIDxkaXYgY2xhc3M9XCInKS5jb25jYXQoWS5pY29uLFwiIFwiKS5jb25jYXQoWi5zdWNjZXNzLCdcIj48L2Rpdj5cXG4gICAgIDxpbWcgY2xhc3M9XCInKS5jb25jYXQoWS5pbWFnZSwnXCIgLz5cXG4gICAgIDxoMiBjbGFzcz1cIicpLmNvbmNhdChZLnRpdGxlLCdcIiBpZD1cIicpLmNvbmNhdChZLnRpdGxlLCdcIj48L2gyPlxcbiAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCInKS5jb25jYXQoWS5jbG9zZSwnXCI+PC9idXR0b24+XFxuICAgPC9kaXY+XFxuICAgPGRpdiBjbGFzcz1cIicpLmNvbmNhdChZLmNvbnRlbnQsJ1wiPlxcbiAgICAgPGRpdiBpZD1cIicpLmNvbmNhdChZLmNvbnRlbnQsJ1wiIGNsYXNzPVwiJykuY29uY2F0KFlbXCJodG1sLWNvbnRhaW5lclwiXSwnXCI+PC9kaXY+XFxuICAgICA8aW5wdXQgY2xhc3M9XCInKS5jb25jYXQoWS5pbnB1dCwnXCIgLz5cXG4gICAgIDxpbnB1dCB0eXBlPVwiZmlsZVwiIGNsYXNzPVwiJykuY29uY2F0KFkuZmlsZSwnXCIgLz5cXG4gICAgIDxkaXYgY2xhc3M9XCInKS5jb25jYXQoWS5yYW5nZSwnXCI+XFxuICAgICAgIDxpbnB1dCB0eXBlPVwicmFuZ2VcIiAvPlxcbiAgICAgICA8b3V0cHV0Pjwvb3V0cHV0PlxcbiAgICAgPC9kaXY+XFxuICAgICA8c2VsZWN0IGNsYXNzPVwiJykuY29uY2F0KFkuc2VsZWN0LCdcIj48L3NlbGVjdD5cXG4gICAgIDxkaXYgY2xhc3M9XCInKS5jb25jYXQoWS5yYWRpbywnXCI+PC9kaXY+XFxuICAgICA8bGFiZWwgZm9yPVwiJykuY29uY2F0KFkuY2hlY2tib3gsJ1wiIGNsYXNzPVwiJykuY29uY2F0KFkuY2hlY2tib3gsJ1wiPlxcbiAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgLz5cXG4gICAgICAgPHNwYW4gY2xhc3M9XCInKS5jb25jYXQoWS5sYWJlbCwnXCI+PC9zcGFuPlxcbiAgICAgPC9sYWJlbD5cXG4gICAgIDx0ZXh0YXJlYSBjbGFzcz1cIicpLmNvbmNhdChZLnRleHRhcmVhLCdcIj48L3RleHRhcmVhPlxcbiAgICAgPGRpdiBjbGFzcz1cIicpLmNvbmNhdChZW1widmFsaWRhdGlvbi1tZXNzYWdlXCJdLCdcIiBpZD1cIicpLmNvbmNhdChZW1widmFsaWRhdGlvbi1tZXNzYWdlXCJdLCdcIj48L2Rpdj5cXG4gICA8L2Rpdj5cXG4gICA8ZGl2IGNsYXNzPVwiJykuY29uY2F0KFkuYWN0aW9ucywnXCI+XFxuICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cIicpLmNvbmNhdChZLmNvbmZpcm0sJ1wiPk9LPC9idXR0b24+XFxuICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cIicpLmNvbmNhdChZLmNhbmNlbCwnXCI+Q2FuY2VsPC9idXR0b24+XFxuICAgPC9kaXY+XFxuICAgPGRpdiBjbGFzcz1cIicpLmNvbmNhdChZLmZvb3RlciwnXCI+PC9kaXY+XFxuICAgPGRpdiBjbGFzcz1cIicpLmNvbmNhdChZW1widGltZXItcHJvZ3Jlc3MtYmFyLWNvbnRhaW5lclwiXSwnXCI+XFxuICAgICA8ZGl2IGNsYXNzPVwiJykuY29uY2F0KFlbXCJ0aW1lci1wcm9ncmVzcy1iYXJcIl0sJ1wiPjwvZGl2PlxcbiAgIDwvZGl2PlxcbiA8L2Rpdj5cXG4nKS5yZXBsYWNlKC8oXnxcXG4pXFxzKi9nLFwiXCIpLHl0PWZ1bmN0aW9uKHQpe3ZhciBlLG4sbyxpLHIsYSxjLHMsdSxsLGQscCxmLG0saCxnPSEhKGU9USgpKSYmKGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlKSxodChbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LGRvY3VtZW50LmJvZHldLFtZW1wibm8tYmFja2Ryb3BcIl0sWVtcInRvYXN0LXNob3duXCJdLFlbXCJoYXMtY29sdW1uXCJdXSksITApO3V0KCk/RihcIlN3ZWV0QWxlcnQyIHJlcXVpcmVzIGRvY3VtZW50IHRvIGluaXRpYWxpemVcIik6KChuPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikpLmNsYXNzTmFtZT1ZLmNvbnRhaW5lcixnJiZtdChuLFlbXCJuby10cmFuc2l0aW9uXCJdKSxIKG4sYnQpLChvPVwic3RyaW5nXCI9PXR5cGVvZihpPXQudGFyZ2V0KT9kb2N1bWVudC5xdWVyeVNlbGVjdG9yKGkpOmkpLmFwcGVuZENoaWxkKG4pLHI9dCwoYT0kKCkpLnNldEF0dHJpYnV0ZShcInJvbGVcIixyLnRvYXN0P1wiYWxlcnRcIjpcImRpYWxvZ1wiKSxhLnNldEF0dHJpYnV0ZShcImFyaWEtbGl2ZVwiLHIudG9hc3Q/XCJwb2xpdGVcIjpcImFzc2VydGl2ZVwiKSxyLnRvYXN0fHxhLnNldEF0dHJpYnV0ZShcImFyaWEtbW9kYWxcIixcInRydWVcIiksYz1vLFwicnRsXCI9PT13aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShjKS5kaXJlY3Rpb24mJm10KFEoKSxZLnJ0bCkscz1QKCksdT1ndChzLFkuaW5wdXQpLGw9Z3QocyxZLmZpbGUpLGQ9cy5xdWVyeVNlbGVjdG9yKFwiLlwiLmNvbmNhdChZLnJhbmdlLFwiIGlucHV0XCIpKSxwPXMucXVlcnlTZWxlY3RvcihcIi5cIi5jb25jYXQoWS5yYW5nZSxcIiBvdXRwdXRcIikpLGY9Z3QocyxZLnNlbGVjdCksbT1zLnF1ZXJ5U2VsZWN0b3IoXCIuXCIuY29uY2F0KFkuY2hlY2tib3gsXCIgaW5wdXRcIikpLGg9Z3QocyxZLnRleHRhcmVhKSx1Lm9uaW5wdXQ9bHQsbC5vbmNoYW5nZT1sdCxmLm9uY2hhbmdlPWx0LG0ub25jaGFuZ2U9bHQsaC5vbmlucHV0PWx0LGQub25pbnB1dD1mdW5jdGlvbih0KXtsdCh0KSxwLnZhbHVlPWQudmFsdWV9LGQub25jaGFuZ2U9ZnVuY3Rpb24odCl7bHQodCksZC5uZXh0U2libGluZy52YWx1ZT1kLnZhbHVlfSl9LHd0PWZ1bmN0aW9uKHQsZSl7dC5qcXVlcnk/Q3QoZSx0KTpIKGUsdC50b1N0cmluZygpKX0sQ3Q9ZnVuY3Rpb24odCxlKXtpZih0LnRleHRDb250ZW50PVwiXCIsMCBpbiBlKWZvcih2YXIgbj0wO24gaW4gZTtuKyspdC5hcHBlbmRDaGlsZChlW25dLmNsb25lTm9kZSghMCkpO2Vsc2UgdC5hcHBlbmRDaGlsZChlLmNsb25lTm9kZSghMCkpfSxrdD1mdW5jdGlvbigpe2lmKHV0KCkpcmV0dXJuITE7dmFyIHQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxlPXtXZWJraXRBbmltYXRpb246XCJ3ZWJraXRBbmltYXRpb25FbmRcIixPQW5pbWF0aW9uOlwib0FuaW1hdGlvbkVuZCBvYW5pbWF0aW9uZW5kXCIsYW5pbWF0aW9uOlwiYW5pbWF0aW9uZW5kXCJ9O2Zvcih2YXIgbiBpbiBlKWlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLG4pJiZ2b2lkIDAhPT10LnN0eWxlW25dKXJldHVybiBlW25dO3JldHVybiExfSgpO2Z1bmN0aW9uIHh0KHQsZSxuKXt2YXIgbztydCh0LG5bXCJzaG93XCIuY29uY2F0KChvPWUpLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK28uc2xpY2UoMSksXCJCdXR0b25cIildLFwiaW5saW5lLWJsb2NrXCIpLEgodCxuW1wiXCIuY29uY2F0KGUsXCJCdXR0b25UZXh0XCIpXSksdC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsXCIsbltcIlwiLmNvbmNhdChlLFwiQnV0dG9uQXJpYUxhYmVsXCIpXSksdC5jbGFzc05hbWU9WVtlXSxOKHQsbixcIlwiLmNvbmNhdChlLFwiQnV0dG9uXCIpKSxtdCh0LG5bXCJcIi5jb25jYXQoZSxcIkJ1dHRvbkNsYXNzXCIpXSl9ZnVuY3Rpb24gUHQodCxlKXt2YXIgbixvLGkscixhLGMscyx1LGw9USgpO2wmJihuPWwsXCJzdHJpbmdcIj09dHlwZW9mKG89ZS5iYWNrZHJvcCk/bi5zdHlsZS5iYWNrZ3JvdW5kPW86b3x8bXQoW2RvY3VtZW50LmRvY3VtZW50RWxlbWVudCxkb2N1bWVudC5ib2R5XSxZW1wibm8tYmFja2Ryb3BcIl0pLCFlLmJhY2tkcm9wJiZlLmFsbG93T3V0c2lkZUNsaWNrJiZfKCdcImFsbG93T3V0c2lkZUNsaWNrXCIgcGFyYW1ldGVyIHJlcXVpcmVzIGBiYWNrZHJvcGAgcGFyYW1ldGVyIHRvIGJlIHNldCB0byBgdHJ1ZWAnKSxpPWwsKHI9ZS5wb3NpdGlvbilpbiBZP210KGksWVtyXSk6KF8oJ1RoZSBcInBvc2l0aW9uXCIgcGFyYW1ldGVyIGlzIG5vdCB2YWxpZCwgZGVmYXVsdGluZyB0byBcImNlbnRlclwiJyksbXQoaSxZLmNlbnRlcikpLGE9bCwhKGM9ZS5ncm93KXx8XCJzdHJpbmdcIiE9dHlwZW9mIGN8fChzPVwiZ3Jvdy1cIi5jb25jYXQoYykpaW4gWSYmbXQoYSxZW3NdKSxOKGwsZSxcImNvbnRhaW5lclwiKSwodT1kb2N1bWVudC5ib2R5LmdldEF0dHJpYnV0ZShcImRhdGEtc3dhbDItcXVldWUtc3RlcFwiKSkmJihsLnNldEF0dHJpYnV0ZShcImRhdGEtcXVldWUtc3RlcFwiLHUpLGRvY3VtZW50LmJvZHkucmVtb3ZlQXR0cmlidXRlKFwiZGF0YS1zd2FsMi1xdWV1ZS1zdGVwXCIpKSl9ZnVuY3Rpb24gQXQodCxlKXt0LnBsYWNlaG9sZGVyJiYhZS5pbnB1dFBsYWNlaG9sZGVyfHwodC5wbGFjZWhvbGRlcj1lLmlucHV0UGxhY2Vob2xkZXIpfXZhciBCdD17cHJvbWlzZTpuZXcgV2Vha01hcCxpbm5lclBhcmFtczpuZXcgV2Vha01hcCxkb21DYWNoZTpuZXcgV2Vha01hcH0sU3Q9W1wiaW5wdXRcIixcImZpbGVcIixcInJhbmdlXCIsXCJzZWxlY3RcIixcInJhZGlvXCIsXCJjaGVja2JveFwiLFwidGV4dGFyZWFcIl0sRXQ9ZnVuY3Rpb24odCl7aWYoIUl0W3QuaW5wdXRdKXJldHVybiBGKCdVbmV4cGVjdGVkIHR5cGUgb2YgaW5wdXQhIEV4cGVjdGVkIFwidGV4dFwiLCBcImVtYWlsXCIsIFwicGFzc3dvcmRcIiwgXCJudW1iZXJcIiwgXCJ0ZWxcIiwgXCJzZWxlY3RcIiwgXCJyYWRpb1wiLCBcImNoZWNrYm94XCIsIFwidGV4dGFyZWFcIiwgXCJmaWxlXCIgb3IgXCJ1cmxcIiwgZ290IFwiJy5jb25jYXQodC5pbnB1dCwnXCInKSk7dmFyIGU9THQodC5pbnB1dCksbj1JdFt0LmlucHV0XShlLHQpO290KG4pLHNldFRpbWVvdXQoZnVuY3Rpb24oKXt0dChuKX0pfSxPdD1mdW5jdGlvbih0LGUpe3ZhciBuPUcoUCgpLHQpO2lmKG4pZm9yKHZhciBvIGluIWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT0wO2U8dC5hdHRyaWJ1dGVzLmxlbmd0aDtlKyspe3ZhciBuPXQuYXR0cmlidXRlc1tlXS5uYW1lOy0xPT09W1widHlwZVwiLFwidmFsdWVcIixcInN0eWxlXCJdLmluZGV4T2YobikmJnQucmVtb3ZlQXR0cmlidXRlKG4pfX0obiksZSlcInJhbmdlXCI9PT10JiZcInBsYWNlaG9sZGVyXCI9PT1vfHxuLnNldEF0dHJpYnV0ZShvLGVbb10pfSxUdD1mdW5jdGlvbih0KXt2YXIgZT1MdCh0LmlucHV0KTt0LmN1c3RvbUNsYXNzJiZtdChlLHQuY3VzdG9tQ2xhc3MuaW5wdXQpfSxMdD1mdW5jdGlvbih0KXt2YXIgZT1ZW3RdP1lbdF06WS5pbnB1dDtyZXR1cm4gZ3QoUCgpLGUpfSxJdD17fTtJdC50ZXh0PUl0LmVtYWlsPUl0LnBhc3N3b3JkPUl0Lm51bWJlcj1JdC50ZWw9SXQudXJsPWZ1bmN0aW9uKHQsZSl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGUuaW5wdXRWYWx1ZXx8XCJudW1iZXJcIj09dHlwZW9mIGUuaW5wdXRWYWx1ZT90LnZhbHVlPWUuaW5wdXRWYWx1ZTp5KGUuaW5wdXRWYWx1ZSl8fF8oJ1VuZXhwZWN0ZWQgdHlwZSBvZiBpbnB1dFZhbHVlISBFeHBlY3RlZCBcInN0cmluZ1wiLCBcIm51bWJlclwiIG9yIFwiUHJvbWlzZVwiLCBnb3QgXCInLmNvbmNhdChyKGUuaW5wdXRWYWx1ZSksJ1wiJykpLEF0KHQsZSksdC50eXBlPWUuaW5wdXQsdH0sSXQuZmlsZT1mdW5jdGlvbih0LGUpe3JldHVybiBBdCh0LGUpLHR9LEl0LnJhbmdlPWZ1bmN0aW9uKHQsZSl7dmFyIG49dC5xdWVyeVNlbGVjdG9yKFwiaW5wdXRcIiksbz10LnF1ZXJ5U2VsZWN0b3IoXCJvdXRwdXRcIik7cmV0dXJuIG4udmFsdWU9ZS5pbnB1dFZhbHVlLG4udHlwZT1lLmlucHV0LG8udmFsdWU9ZS5pbnB1dFZhbHVlLHR9LEl0LnNlbGVjdD1mdW5jdGlvbih0LGUpe3ZhciBuO3JldHVybiB0LnRleHRDb250ZW50PVwiXCIsZS5pbnB1dFBsYWNlaG9sZGVyJiYobj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpLEgobixlLmlucHV0UGxhY2Vob2xkZXIpLG4udmFsdWU9XCJcIixuLmRpc2FibGVkPSEwLG4uc2VsZWN0ZWQ9ITAsdC5hcHBlbmRDaGlsZChuKSksdH0sSXQucmFkaW89ZnVuY3Rpb24odCl7cmV0dXJuIHQudGV4dENvbnRlbnQ9XCJcIix0fSxJdC5jaGVja2JveD1mdW5jdGlvbih0LGUpe3ZhciBuPUcoUCgpLFwiY2hlY2tib3hcIik7bi52YWx1ZT0xLG4uaWQ9WS5jaGVja2JveCxuLmNoZWNrZWQ9Qm9vbGVhbihlLmlucHV0VmFsdWUpO3ZhciBvPXQucXVlcnlTZWxlY3RvcihcInNwYW5cIik7cmV0dXJuIEgobyxlLmlucHV0UGxhY2Vob2xkZXIpLHR9LEl0LnRleHRhcmVhPWZ1bmN0aW9uKGUsdCl7dmFyIG4sbztyZXR1cm4gZS52YWx1ZT10LmlucHV0VmFsdWUsQXQoZSx0KSxcIk11dGF0aW9uT2JzZXJ2ZXJcImluIHdpbmRvdyYmKG49cGFyc2VJbnQod2luZG93LmdldENvbXB1dGVkU3R5bGUoJCgpKS53aWR0aCksbz1wYXJzZUludCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSgkKCkpLnBhZGRpbmdMZWZ0KStwYXJzZUludCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSgkKCkpLnBhZGRpbmdSaWdodCksbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZnVuY3Rpb24oKXt2YXIgdD1lLm9mZnNldFdpZHRoK287JCgpLnN0eWxlLndpZHRoPW48dD9cIlwiLmNvbmNhdCh0LFwicHhcIik6bnVsbH0pLm9ic2VydmUoZSx7YXR0cmlidXRlczohMCxhdHRyaWJ1dGVGaWx0ZXI6W1wic3R5bGVcIl19KSksZX07ZnVuY3Rpb24ganQodCxlKXt2YXIgbixvLGkscixhLGM9UCgpLnF1ZXJ5U2VsZWN0b3IoXCIjXCIuY29uY2F0KFkuY29udGVudCkpO2UuaHRtbD8oZHQoZS5odG1sLGMpLG90KGMsXCJibG9ja1wiKSk6ZS50ZXh0PyhjLnRleHRDb250ZW50PWUudGV4dCxvdChjLFwiYmxvY2tcIikpOml0KGMpLG49dCxvPWUsaT1QKCkscj1CdC5pbm5lclBhcmFtcy5nZXQobiksYT0hcnx8by5pbnB1dCE9PXIuaW5wdXQsU3QuZm9yRWFjaChmdW5jdGlvbih0KXt2YXIgZT1ZW3RdLG49Z3QoaSxlKTtPdCh0LG8uaW5wdXRBdHRyaWJ1dGVzKSxuLmNsYXNzTmFtZT1lLGEmJml0KG4pfSksby5pbnB1dCYmKGEmJkV0KG8pLFR0KG8pKSxOKFAoKSxlLFwiY29udGVudFwiKX1mdW5jdGlvbiBxdCgpe3JldHVybiBRKCkmJlEoKS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXF1ZXVlLXN0ZXBcIil9ZnVuY3Rpb24gVnQodCxzKXt2YXIgdT1CKCk7aWYoIXMucHJvZ3Jlc3NTdGVwc3x8MD09PXMucHJvZ3Jlc3NTdGVwcy5sZW5ndGgpcmV0dXJuIGl0KHUpLDA7b3QodSksdS50ZXh0Q29udGVudD1cIlwiO3ZhciBsPXBhcnNlSW50KHZvaWQgMD09PXMuY3VycmVudFByb2dyZXNzU3RlcD9xdCgpOnMuY3VycmVudFByb2dyZXNzU3RlcCk7bD49cy5wcm9ncmVzc1N0ZXBzLmxlbmd0aCYmXyhcIkludmFsaWQgY3VycmVudFByb2dyZXNzU3RlcCBwYXJhbWV0ZXIsIGl0IHNob3VsZCBiZSBsZXNzIHRoYW4gcHJvZ3Jlc3NTdGVwcy5sZW5ndGggKGN1cnJlbnRQcm9ncmVzc1N0ZXAgbGlrZSBKUyBhcnJheXMgc3RhcnRzIGZyb20gMClcIikscy5wcm9ncmVzc1N0ZXBzLmZvckVhY2goZnVuY3Rpb24odCxlKXt2YXIgbixvLGkscixhLGM9KG49dCxvPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaVwiKSxtdChvLFlbXCJwcm9ncmVzcy1zdGVwXCJdKSxIKG8sbiksbyk7dS5hcHBlbmRDaGlsZChjKSxlPT09bCYmbXQoYyxZW1wiYWN0aXZlLXByb2dyZXNzLXN0ZXBcIl0pLGUhPT1zLnByb2dyZXNzU3RlcHMubGVuZ3RoLTEmJihyPXMsYT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIiksbXQoYSxZW1wicHJvZ3Jlc3Mtc3RlcC1saW5lXCJdKSxyLnByb2dyZXNzU3RlcHNEaXN0YW5jZSYmKGEuc3R5bGUud2lkdGg9ci5wcm9ncmVzc1N0ZXBzRGlzdGFuY2UpLGk9YSx1LmFwcGVuZENoaWxkKGkpKX0pfWZ1bmN0aW9uIE10KHQsZSl7dmFyIG4sbyxpLHIsYSxjLHMsdSxsPUwoKTtOKGwsZSxcImhlYWRlclwiKSxWdCgwLGUpLG49dCxvPWUsKHI9QnQuaW5uZXJQYXJhbXMuZ2V0KG4pKSYmby5pY29uPT09ci5pY29uJiZrKCk/TihrKCksbyxcImljb25cIik6KER0KCksby5pY29uJiYoLTEhPT1PYmplY3Qua2V5cyhaKS5pbmRleE9mKG8uaWNvbik/KGk9QyhcIi5cIi5jb25jYXQoWS5pY29uLFwiLlwiKS5jb25jYXQoWltvLmljb25dKSksb3QoaSksVXQoaSxvKSxOdCgpLE4oaSxvLFwiaWNvblwiKSxtdChpLG8uc2hvd0NsYXNzLmljb24pKTpGKCdVbmtub3duIGljb24hIEV4cGVjdGVkIFwic3VjY2Vzc1wiLCBcImVycm9yXCIsIFwid2FybmluZ1wiLCBcImluZm9cIiBvciBcInF1ZXN0aW9uXCIsIGdvdCBcIicuY29uY2F0KG8uaWNvbiwnXCInKSkpKSxmdW5jdGlvbih0KXt2YXIgZT1BKCk7aWYoIXQuaW1hZ2VVcmwpcmV0dXJuIGl0KGUpO290KGUsXCJcIiksZS5zZXRBdHRyaWJ1dGUoXCJzcmNcIix0LmltYWdlVXJsKSxlLnNldEF0dHJpYnV0ZShcImFsdFwiLHQuaW1hZ2VBbHQpLG50KGUsXCJ3aWR0aFwiLHQuaW1hZ2VXaWR0aCksbnQoZSxcImhlaWdodFwiLHQuaW1hZ2VIZWlnaHQpLGUuY2xhc3NOYW1lPVkuaW1hZ2UsTihlLHQsXCJpbWFnZVwiKX0oZSksYT1lLGM9eCgpLHJ0KGMsYS50aXRsZXx8YS50aXRsZVRleHQpLGEudGl0bGUmJmR0KGEudGl0bGUsYyksYS50aXRsZVRleHQmJihjLmlubmVyVGV4dD1hLnRpdGxlVGV4dCksTihjLGEsXCJ0aXRsZVwiKSxzPWUsdT1xKCksSCh1LHMuY2xvc2VCdXR0b25IdG1sKSxOKHUscyxcImNsb3NlQnV0dG9uXCIpLHJ0KHUscy5zaG93Q2xvc2VCdXR0b24pLHUuc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiLHMuY2xvc2VCdXR0b25BcmlhTGFiZWwpfWZ1bmN0aW9uIFJ0KHQsZSl7dmFyIG4sbyxpLHI7bj1lLG89JCgpLG50KG8sXCJ3aWR0aFwiLG4ud2lkdGgpLG50KG8sXCJwYWRkaW5nXCIsbi5wYWRkaW5nKSxuLmJhY2tncm91bmQmJihvLnN0eWxlLmJhY2tncm91bmQ9bi5iYWNrZ3JvdW5kKSx6dChvLG4pLFB0KDAsZSksTXQodCxlKSxqdCh0LGUpLHB0KDAsZSksaT1lLHI9SSgpLHJ0KHIsaS5mb290ZXIpLGkuZm9vdGVyJiZkdChpLmZvb3RlcixyKSxOKHIsaSxcImZvb3RlclwiKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLm9uUmVuZGVyJiZlLm9uUmVuZGVyKCQoKSl9ZnVuY3Rpb24gSHQoKXtyZXR1cm4gRSgpJiZFKCkuY2xpY2soKX12YXIgRHQ9ZnVuY3Rpb24oKXtmb3IodmFyIHQ9bigpLGU9MDtlPHQubGVuZ3RoO2UrKylpdCh0W2VdKX0sTnQ9ZnVuY3Rpb24oKXtmb3IodmFyIHQ9JCgpLGU9d2luZG93LmdldENvbXB1dGVkU3R5bGUodCkuZ2V0UHJvcGVydHlWYWx1ZShcImJhY2tncm91bmQtY29sb3JcIiksbj10LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbY2xhc3NePXN3YWwyLXN1Y2Nlc3MtY2lyY3VsYXItbGluZV0sIC5zd2FsMi1zdWNjZXNzLWZpeFwiKSxvPTA7bzxuLmxlbmd0aDtvKyspbltvXS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3I9ZX0sVXQ9ZnVuY3Rpb24odCxlKXt0LnRleHRDb250ZW50PVwiXCIsZS5pY29uSHRtbD9IKHQsX3QoZS5pY29uSHRtbCkpOlwic3VjY2Vzc1wiPT09ZS5pY29uP0godCwnXFxuICAgICAgPGRpdiBjbGFzcz1cInN3YWwyLXN1Y2Nlc3MtY2lyY3VsYXItbGluZS1sZWZ0XCI+PC9kaXY+XFxuICAgICAgPHNwYW4gY2xhc3M9XCJzd2FsMi1zdWNjZXNzLWxpbmUtdGlwXCI+PC9zcGFuPiA8c3BhbiBjbGFzcz1cInN3YWwyLXN1Y2Nlc3MtbGluZS1sb25nXCI+PC9zcGFuPlxcbiAgICAgIDxkaXYgY2xhc3M9XCJzd2FsMi1zdWNjZXNzLXJpbmdcIj48L2Rpdj4gPGRpdiBjbGFzcz1cInN3YWwyLXN1Y2Nlc3MtZml4XCI+PC9kaXY+XFxuICAgICAgPGRpdiBjbGFzcz1cInN3YWwyLXN1Y2Nlc3MtY2lyY3VsYXItbGluZS1yaWdodFwiPjwvZGl2PlxcbiAgICAnKTpcImVycm9yXCI9PT1lLmljb24/SCh0LCdcXG4gICAgICA8c3BhbiBjbGFzcz1cInN3YWwyLXgtbWFya1wiPlxcbiAgICAgICAgPHNwYW4gY2xhc3M9XCJzd2FsMi14LW1hcmstbGluZS1sZWZ0XCI+PC9zcGFuPlxcbiAgICAgICAgPHNwYW4gY2xhc3M9XCJzd2FsMi14LW1hcmstbGluZS1yaWdodFwiPjwvc3Bhbj5cXG4gICAgICA8L3NwYW4+XFxuICAgICcpOkgodCxfdCh7cXVlc3Rpb246XCI/XCIsd2FybmluZzpcIiFcIixpbmZvOlwiaVwifVtlLmljb25dKSl9LF90PWZ1bmN0aW9uKHQpe3JldHVybic8ZGl2IGNsYXNzPVwiJy5jb25jYXQoWVtcImljb24tY29udGVudFwiXSwnXCI+JykuY29uY2F0KHQsXCI8L2Rpdj5cIil9LEZ0PVtdLHp0PWZ1bmN0aW9uKHQsZSl7dC5jbGFzc05hbWU9XCJcIi5jb25jYXQoWS5wb3B1cCxcIiBcIikuY29uY2F0KHZ0KHQpP2Uuc2hvd0NsYXNzLnBvcHVwOlwiXCIpLGUudG9hc3Q/KG10KFtkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsZG9jdW1lbnQuYm9keV0sWVtcInRvYXN0LXNob3duXCJdKSxtdCh0LFkudG9hc3QpKTptdCh0LFkubW9kYWwpLE4odCxlLFwicG9wdXBcIiksXCJzdHJpbmdcIj09dHlwZW9mIGUuY3VzdG9tQ2xhc3MmJm10KHQsZS5jdXN0b21DbGFzcyksZS5pY29uJiZtdCh0LFlbXCJpY29uLVwiLmNvbmNhdChlLmljb24pXSl9O2Z1bmN0aW9uIFd0KCl7dmFyIHQ9JCgpO3R8fGxuLmZpcmUoKSx0PSQoKTt2YXIgZT1UKCksbj1FKCk7b3QoZSksb3QobixcImlubGluZS1ibG9ja1wiKSxtdChbdCxlXSxZLmxvYWRpbmcpLG4uZGlzYWJsZWQ9ITAsdC5zZXRBdHRyaWJ1dGUoXCJkYXRhLWxvYWRpbmdcIiwhMCksdC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWJ1c3lcIiwhMCksdC5mb2N1cygpfWZ1bmN0aW9uIEt0KCl7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHQpe3ZhciBlPXdpbmRvdy5zY3JvbGxYLG49d2luZG93LnNjcm9sbFk7WHQucmVzdG9yZUZvY3VzVGltZW91dD1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7WHQucHJldmlvdXNBY3RpdmVFbGVtZW50JiZYdC5wcmV2aW91c0FjdGl2ZUVsZW1lbnQuZm9jdXM/KFh0LnByZXZpb3VzQWN0aXZlRWxlbWVudC5mb2N1cygpLFh0LnByZXZpb3VzQWN0aXZlRWxlbWVudD1udWxsKTpkb2N1bWVudC5ib2R5JiZkb2N1bWVudC5ib2R5LmZvY3VzKCksdCgpfSwxMDApLHZvaWQgMCE9PWUmJnZvaWQgMCE9PW4mJndpbmRvdy5zY3JvbGxUbyhlLG4pfSl9ZnVuY3Rpb24gWXQoKXtpZihYdC50aW1lb3V0KXJldHVybiBmdW5jdGlvbigpe3ZhciB0PWooKSxlPXBhcnNlSW50KHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHQpLndpZHRoKTt0LnN0eWxlLnJlbW92ZVByb3BlcnR5KFwidHJhbnNpdGlvblwiKSx0LnN0eWxlLndpZHRoPVwiMTAwJVwiO3ZhciBuPXBhcnNlSW50KHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHQpLndpZHRoKSxvPXBhcnNlSW50KGUvbioxMDApO3Quc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJ0cmFuc2l0aW9uXCIpLHQuc3R5bGUud2lkdGg9XCJcIi5jb25jYXQobyxcIiVcIil9KCksWHQudGltZW91dC5zdG9wKCl9ZnVuY3Rpb24gWnQoKXtpZihYdC50aW1lb3V0KXt2YXIgdD1YdC50aW1lb3V0LnN0YXJ0KCk7cmV0dXJuIHN0KHQpLHR9fWZ1bmN0aW9uIFF0KHQpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoR3QsdCl9ZnVuY3Rpb24gJHQodCl7cmV0dXJuIGVlW3RdfWZ1bmN0aW9uIEp0KHQpe2Zvcih2YXIgZSBpbiB0KVF0KGk9ZSl8fF8oJ1Vua25vd24gcGFyYW1ldGVyIFwiJy5jb25jYXQoaSwnXCInKSksdC50b2FzdCYmKG89ZSwtMSE9PW5lLmluZGV4T2YobykmJl8oJ1RoZSBwYXJhbWV0ZXIgXCInLmNvbmNhdChvLCdcIiBpcyBpbmNvbXBhdGlibGUgd2l0aCB0b2FzdHMnKSkpLCR0KG49ZSkmJmcobiwkdChuKSk7dmFyIG4sbyxpfXZhciBYdD17fSxHdD17dGl0bGU6XCJcIix0aXRsZVRleHQ6XCJcIix0ZXh0OlwiXCIsaHRtbDpcIlwiLGZvb3RlcjpcIlwiLGljb246dm9pZCAwLGljb25IdG1sOnZvaWQgMCx0b2FzdDohMSxhbmltYXRpb246ITAsc2hvd0NsYXNzOntwb3B1cDpcInN3YWwyLXNob3dcIixiYWNrZHJvcDpcInN3YWwyLWJhY2tkcm9wLXNob3dcIixpY29uOlwic3dhbDItaWNvbi1zaG93XCJ9LGhpZGVDbGFzczp7cG9wdXA6XCJzd2FsMi1oaWRlXCIsYmFja2Ryb3A6XCJzd2FsMi1iYWNrZHJvcC1oaWRlXCIsaWNvbjpcInN3YWwyLWljb24taGlkZVwifSxjdXN0b21DbGFzczp2b2lkIDAsdGFyZ2V0OlwiYm9keVwiLGJhY2tkcm9wOiEwLGhlaWdodEF1dG86ITAsYWxsb3dPdXRzaWRlQ2xpY2s6ITAsYWxsb3dFc2NhcGVLZXk6ITAsYWxsb3dFbnRlcktleTohMCxzdG9wS2V5ZG93blByb3BhZ2F0aW9uOiEwLGtleWRvd25MaXN0ZW5lckNhcHR1cmU6ITEsc2hvd0NvbmZpcm1CdXR0b246ITAsc2hvd0NhbmNlbEJ1dHRvbjohMSxwcmVDb25maXJtOnZvaWQgMCxjb25maXJtQnV0dG9uVGV4dDpcIk9LXCIsY29uZmlybUJ1dHRvbkFyaWFMYWJlbDpcIlwiLGNvbmZpcm1CdXR0b25Db2xvcjp2b2lkIDAsY2FuY2VsQnV0dG9uVGV4dDpcIkNhbmNlbFwiLGNhbmNlbEJ1dHRvbkFyaWFMYWJlbDpcIlwiLGNhbmNlbEJ1dHRvbkNvbG9yOnZvaWQgMCxidXR0b25zU3R5bGluZzohMCxyZXZlcnNlQnV0dG9uczohMSxmb2N1c0NvbmZpcm06ITAsZm9jdXNDYW5jZWw6ITEsc2hvd0Nsb3NlQnV0dG9uOiExLGNsb3NlQnV0dG9uSHRtbDpcIiZ0aW1lcztcIixjbG9zZUJ1dHRvbkFyaWFMYWJlbDpcIkNsb3NlIHRoaXMgZGlhbG9nXCIsc2hvd0xvYWRlck9uQ29uZmlybTohMSxpbWFnZVVybDp2b2lkIDAsaW1hZ2VXaWR0aDp2b2lkIDAsaW1hZ2VIZWlnaHQ6dm9pZCAwLGltYWdlQWx0OlwiXCIsdGltZXI6dm9pZCAwLHRpbWVyUHJvZ3Jlc3NCYXI6ITEsd2lkdGg6dm9pZCAwLHBhZGRpbmc6dm9pZCAwLGJhY2tncm91bmQ6dm9pZCAwLGlucHV0OnZvaWQgMCxpbnB1dFBsYWNlaG9sZGVyOlwiXCIsaW5wdXRWYWx1ZTpcIlwiLGlucHV0T3B0aW9uczp7fSxpbnB1dEF1dG9UcmltOiEwLGlucHV0QXR0cmlidXRlczp7fSxpbnB1dFZhbGlkYXRvcjp2b2lkIDAsdmFsaWRhdGlvbk1lc3NhZ2U6dm9pZCAwLGdyb3c6ITEscG9zaXRpb246XCJjZW50ZXJcIixwcm9ncmVzc1N0ZXBzOltdLGN1cnJlbnRQcm9ncmVzc1N0ZXA6dm9pZCAwLHByb2dyZXNzU3RlcHNEaXN0YW5jZTp2b2lkIDAsb25CZWZvcmVPcGVuOnZvaWQgMCxvbk9wZW46dm9pZCAwLG9uUmVuZGVyOnZvaWQgMCxvbkNsb3NlOnZvaWQgMCxvbkFmdGVyQ2xvc2U6dm9pZCAwLG9uRGVzdHJveTp2b2lkIDAsc2Nyb2xsYmFyUGFkZGluZzohMH0sdGU9W1wiYWxsb3dFc2NhcGVLZXlcIixcImFsbG93T3V0c2lkZUNsaWNrXCIsXCJidXR0b25zU3R5bGluZ1wiLFwiY2FuY2VsQnV0dG9uQXJpYUxhYmVsXCIsXCJjYW5jZWxCdXR0b25Db2xvclwiLFwiY2FuY2VsQnV0dG9uVGV4dFwiLFwiY2xvc2VCdXR0b25BcmlhTGFiZWxcIixcImNsb3NlQnV0dG9uSHRtbFwiLFwiY29uZmlybUJ1dHRvbkFyaWFMYWJlbFwiLFwiY29uZmlybUJ1dHRvbkNvbG9yXCIsXCJjb25maXJtQnV0dG9uVGV4dFwiLFwiY3VycmVudFByb2dyZXNzU3RlcFwiLFwiY3VzdG9tQ2xhc3NcIixcImZvb3RlclwiLFwiaGlkZUNsYXNzXCIsXCJodG1sXCIsXCJpY29uXCIsXCJpbWFnZUFsdFwiLFwiaW1hZ2VIZWlnaHRcIixcImltYWdlVXJsXCIsXCJpbWFnZVdpZHRoXCIsXCJvbkFmdGVyQ2xvc2VcIixcIm9uQ2xvc2VcIixcIm9uRGVzdHJveVwiLFwicHJvZ3Jlc3NTdGVwc1wiLFwicmV2ZXJzZUJ1dHRvbnNcIixcInNob3dDYW5jZWxCdXR0b25cIixcInNob3dDbG9zZUJ1dHRvblwiLFwic2hvd0NvbmZpcm1CdXR0b25cIixcInRleHRcIixcInRpdGxlXCIsXCJ0aXRsZVRleHRcIl0sZWU9e2FuaW1hdGlvbjonc2hvd0NsYXNzXCIgYW5kIFwiaGlkZUNsYXNzJ30sbmU9W1wiYWxsb3dPdXRzaWRlQ2xpY2tcIixcImFsbG93RW50ZXJLZXlcIixcImJhY2tkcm9wXCIsXCJmb2N1c0NvbmZpcm1cIixcImZvY3VzQ2FuY2VsXCIsXCJoZWlnaHRBdXRvXCIsXCJrZXlkb3duTGlzdGVuZXJDYXB0dXJlXCJdLG9lPU9iamVjdC5mcmVlemUoe2lzVmFsaWRQYXJhbWV0ZXI6UXQsaXNVcGRhdGFibGVQYXJhbWV0ZXI6ZnVuY3Rpb24odCl7cmV0dXJuLTEhPT10ZS5pbmRleE9mKHQpfSxpc0RlcHJlY2F0ZWRQYXJhbWV0ZXI6JHQsYXJnc1RvUGFyYW1zOmZ1bmN0aW9uKG8pe3ZhciBpPXt9O3JldHVyblwib2JqZWN0XCIhPT1yKG9bMF0pfHx3KG9bMF0pP1tcInRpdGxlXCIsXCJodG1sXCIsXCJpY29uXCJdLmZvckVhY2goZnVuY3Rpb24odCxlKXt2YXIgbj1vW2VdO1wic3RyaW5nXCI9PXR5cGVvZiBufHx3KG4pP2lbdF09bjp2b2lkIDAhPT1uJiZGKFwiVW5leHBlY3RlZCB0eXBlIG9mIFwiLmNvbmNhdCh0LCchIEV4cGVjdGVkIFwic3RyaW5nXCIgb3IgXCJFbGVtZW50XCIsIGdvdCAnKS5jb25jYXQocihuKSkpfSk6cyhpLG9bMF0pLGl9LGlzVmlzaWJsZTpmdW5jdGlvbigpe3JldHVybiB2dCgkKCkpfSxjbGlja0NvbmZpcm06SHQsY2xpY2tDYW5jZWw6ZnVuY3Rpb24oKXtyZXR1cm4gTygpJiZPKCkuY2xpY2soKX0sZ2V0Q29udGFpbmVyOlEsZ2V0UG9wdXA6JCxnZXRUaXRsZTp4LGdldENvbnRlbnQ6UCxnZXRIdG1sQ29udGFpbmVyOmZ1bmN0aW9uKCl7cmV0dXJuIGUoWVtcImh0bWwtY29udGFpbmVyXCJdKX0sZ2V0SW1hZ2U6QSxnZXRJY29uOmssZ2V0SWNvbnM6bixnZXRDbG9zZUJ1dHRvbjpxLGdldEFjdGlvbnM6VCxnZXRDb25maXJtQnV0dG9uOkUsZ2V0Q2FuY2VsQnV0dG9uOk8sZ2V0SGVhZGVyOkwsZ2V0Rm9vdGVyOkksZ2V0VGltZXJQcm9ncmVzc0JhcjpqLGdldEZvY3VzYWJsZUVsZW1lbnRzOlYsZ2V0VmFsaWRhdGlvbk1lc3NhZ2U6Uyxpc0xvYWRpbmc6UixmaXJlOmZ1bmN0aW9uKCl7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgsZT1uZXcgQXJyYXkodCksbj0wO248dDtuKyspZVtuXT1hcmd1bWVudHNbbl07cmV0dXJuIGkodGhpcyxlKX0sbWl4aW46ZnVuY3Rpb24ocil7cmV0dXJuIGZ1bmN0aW9uKHQpeyFmdW5jdGlvbih0LGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUmJm51bGwhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTt0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUmJmUucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6dCx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksZSYmbCh0LGUpfShpLHQpO3ZhciBuLG8sZT0obj1pLG89ZCgpLGZ1bmN0aW9uKCl7dmFyIHQsZT11KG4pO3JldHVybiBwKHRoaXMsbz8odD11KHRoaXMpLmNvbnN0cnVjdG9yLFJlZmxlY3QuY29uc3RydWN0KGUsYXJndW1lbnRzLHQpKTplLmFwcGx5KHRoaXMsYXJndW1lbnRzKSl9KTtmdW5jdGlvbiBpKCl7cmV0dXJuIGEodGhpcyxpKSxlLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1yZXR1cm4gYyhpLFt7a2V5OlwiX21haW5cIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gZih1KGkucHJvdG90eXBlKSxcIl9tYWluXCIsdGhpcykuY2FsbCh0aGlzLHMoe30scix0KSl9fV0pLGl9KHRoaXMpfSxxdWV1ZTpmdW5jdGlvbih0KXt2YXIgcj10aGlzO0Z0PXQ7ZnVuY3Rpb24gYSh0LGUpe0Z0PVtdLHQoZSl9dmFyIGM9W107cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKGkpeyFmdW5jdGlvbiBlKG4sbyl7bjxGdC5sZW5ndGg/KGRvY3VtZW50LmJvZHkuc2V0QXR0cmlidXRlKFwiZGF0YS1zd2FsMi1xdWV1ZS1zdGVwXCIsbiksci5maXJlKEZ0W25dKS50aGVuKGZ1bmN0aW9uKHQpe3ZvaWQgMCE9PXQudmFsdWU/KGMucHVzaCh0LnZhbHVlKSxlKG4rMSxvKSk6YShpLHtkaXNtaXNzOnQuZGlzbWlzc30pfSkpOmEoaSx7dmFsdWU6Y30pfSgwKX0pfSxnZXRRdWV1ZVN0ZXA6cXQsaW5zZXJ0UXVldWVTdGVwOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIGUmJmU8RnQubGVuZ3RoP0Z0LnNwbGljZShlLDAsdCk6RnQucHVzaCh0KX0sZGVsZXRlUXVldWVTdGVwOmZ1bmN0aW9uKHQpe3ZvaWQgMCE9PUZ0W3RdJiZGdC5zcGxpY2UodCwxKX0sc2hvd0xvYWRpbmc6V3QsZW5hYmxlTG9hZGluZzpXdCxnZXRUaW1lckxlZnQ6ZnVuY3Rpb24oKXtyZXR1cm4gWHQudGltZW91dCYmWHQudGltZW91dC5nZXRUaW1lckxlZnQoKX0sc3RvcFRpbWVyOll0LHJlc3VtZVRpbWVyOlp0LHRvZ2dsZVRpbWVyOmZ1bmN0aW9uKCl7dmFyIHQ9WHQudGltZW91dDtyZXR1cm4gdCYmKHQucnVubmluZz9ZdDpadCkoKX0saW5jcmVhc2VUaW1lcjpmdW5jdGlvbih0KXtpZihYdC50aW1lb3V0KXt2YXIgZT1YdC50aW1lb3V0LmluY3JlYXNlKHQpO3JldHVybiBzdChlLCEwKSxlfX0saXNUaW1lclJ1bm5pbmc6ZnVuY3Rpb24oKXtyZXR1cm4gWHQudGltZW91dCYmWHQudGltZW91dC5pc1J1bm5pbmcoKX19KTtmdW5jdGlvbiBpZSgpe3ZhciB0LGU9QnQuaW5uZXJQYXJhbXMuZ2V0KHRoaXMpO2UmJih0PUJ0LmRvbUNhY2hlLmdldCh0aGlzKSxlLnNob3dDb25maXJtQnV0dG9ufHwoaXQodC5jb25maXJtQnV0dG9uKSxlLnNob3dDYW5jZWxCdXR0b258fGl0KHQuYWN0aW9ucykpLGh0KFt0LnBvcHVwLHQuYWN0aW9uc10sWS5sb2FkaW5nKSx0LnBvcHVwLnJlbW92ZUF0dHJpYnV0ZShcImFyaWEtYnVzeVwiKSx0LnBvcHVwLnJlbW92ZUF0dHJpYnV0ZShcImRhdGEtbG9hZGluZ1wiKSx0LmNvbmZpcm1CdXR0b24uZGlzYWJsZWQ9ITEsdC5jYW5jZWxCdXR0b24uZGlzYWJsZWQ9ITEpfWZ1bmN0aW9uIHJlKCl7bnVsbD09PVgucHJldmlvdXNCb2R5UGFkZGluZyYmZG9jdW1lbnQuYm9keS5zY3JvbGxIZWlnaHQ+d2luZG93LmlubmVySGVpZ2h0JiYoWC5wcmV2aW91c0JvZHlQYWRkaW5nPXBhcnNlSW50KHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGRvY3VtZW50LmJvZHkpLmdldFByb3BlcnR5VmFsdWUoXCJwYWRkaW5nLXJpZ2h0XCIpKSxkb2N1bWVudC5ib2R5LnN0eWxlLnBhZGRpbmdSaWdodD1cIlwiLmNvbmNhdChYLnByZXZpb3VzQm9keVBhZGRpbmcrZnVuY3Rpb24oKXt2YXIgdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3QuY2xhc3NOYW1lPVlbXCJzY3JvbGxiYXItbWVhc3VyZVwiXSxkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHQpO3ZhciBlPXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGgtdC5jbGllbnRXaWR0aDtyZXR1cm4gZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCh0KSxlfSgpLFwicHhcIikpfWZ1bmN0aW9uIGFlKCl7cmV0dXJuISF3aW5kb3cuTVNJbnB1dE1ldGhvZENvbnRleHQmJiEhZG9jdW1lbnQuZG9jdW1lbnRNb2RlfWZ1bmN0aW9uIGNlKCl7dmFyIHQ9USgpLGU9JCgpO3Quc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJhbGlnbi1pdGVtc1wiKSxlLm9mZnNldFRvcDwwJiYodC5zdHlsZS5hbGlnbkl0ZW1zPVwiZmxleC1zdGFydFwiKX12YXIgc2U9ZnVuY3Rpb24oKXtuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC8oQ3JpT1N8RnhpT1N8RWRnaU9TfFlhQnJvd3NlcnxVQ0Jyb3dzZXIpL2kpfHwkKCkuc2Nyb2xsSGVpZ2h0PndpbmRvdy5pbm5lckhlaWdodC00NCYmKFEoKS5zdHlsZS5wYWRkaW5nQm90dG9tPVwiXCIuY29uY2F0KDQ0LFwicHhcIikpfSx1ZT1mdW5jdGlvbigpe3ZhciBlLHQ9USgpO3Qub250b3VjaHN0YXJ0PWZ1bmN0aW9uKHQpe2U9bGUodC50YXJnZXQpfSx0Lm9udG91Y2htb3ZlPWZ1bmN0aW9uKHQpe2UmJih0LnByZXZlbnREZWZhdWx0KCksdC5zdG9wUHJvcGFnYXRpb24oKSl9fSxsZT1mdW5jdGlvbih0KXt2YXIgZT1RKCk7cmV0dXJuIHQ9PT1lfHwhKGF0KGUpfHxcIklOUFVUXCI9PT10LnRhZ05hbWV8fGF0KFAoKSkmJlAoKS5jb250YWlucyh0KSl9LGRlPXtzd2FsUHJvbWlzZVJlc29sdmU6bmV3IFdlYWtNYXB9O2Z1bmN0aW9uIHBlKHQsZSxuLG8pe3ZhciBpO24/aGUodCxvKTooS3QoKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGhlKHQsbyl9KSxYdC5rZXlkb3duVGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsWHQua2V5ZG93bkhhbmRsZXIse2NhcHR1cmU6WHQua2V5ZG93bkxpc3RlbmVyQ2FwdHVyZX0pLFh0LmtleWRvd25IYW5kbGVyQWRkZWQ9ITEpLGUucGFyZW50Tm9kZSYmIWRvY3VtZW50LmJvZHkuZ2V0QXR0cmlidXRlKFwiZGF0YS1zd2FsMi1xdWV1ZS1zdGVwXCIpJiZlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZSksTSgpJiYobnVsbCE9PVgucHJldmlvdXNCb2R5UGFkZGluZyYmKGRvY3VtZW50LmJvZHkuc3R5bGUucGFkZGluZ1JpZ2h0PVwiXCIuY29uY2F0KFgucHJldmlvdXNCb2R5UGFkZGluZyxcInB4XCIpLFgucHJldmlvdXNCb2R5UGFkZGluZz1udWxsKSxEKGRvY3VtZW50LmJvZHksWS5pb3NmaXgpJiYoaT1wYXJzZUludChkb2N1bWVudC5ib2R5LnN0eWxlLnRvcCwxMCksaHQoZG9jdW1lbnQuYm9keSxZLmlvc2ZpeCksZG9jdW1lbnQuYm9keS5zdHlsZS50b3A9XCJcIixkb2N1bWVudC5ib2R5LnNjcm9sbFRvcD0tMSppKSxcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiZhZSgpJiZ3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLGNlKSxoKGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pLmZvckVhY2goZnVuY3Rpb24odCl7dC5oYXNBdHRyaWJ1dGUoXCJkYXRhLXByZXZpb3VzLWFyaWEtaGlkZGVuXCIpPyh0LnNldEF0dHJpYnV0ZShcImFyaWEtaGlkZGVuXCIsdC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXByZXZpb3VzLWFyaWEtaGlkZGVuXCIpKSx0LnJlbW92ZUF0dHJpYnV0ZShcImRhdGEtcHJldmlvdXMtYXJpYS1oaWRkZW5cIikpOnQucmVtb3ZlQXR0cmlidXRlKFwiYXJpYS1oaWRkZW5cIil9KSksaHQoW2RvY3VtZW50LmRvY3VtZW50RWxlbWVudCxkb2N1bWVudC5ib2R5XSxbWS5zaG93bixZW1wiaGVpZ2h0LWF1dG9cIl0sWVtcIm5vLWJhY2tkcm9wXCJdLFlbXCJ0b2FzdC1zaG93blwiXSxZW1widG9hc3QtY29sdW1uXCJdXSl9ZnVuY3Rpb24gZmUodCl7dmFyIGUsbixvLGk9JCgpO2kmJihlPUJ0LmlubmVyUGFyYW1zLmdldCh0aGlzKSkmJiFEKGksZS5oaWRlQ2xhc3MucG9wdXApJiYobj1kZS5zd2FsUHJvbWlzZVJlc29sdmUuZ2V0KHRoaXMpLGh0KGksZS5zaG93Q2xhc3MucG9wdXApLG10KGksZS5oaWRlQ2xhc3MucG9wdXApLG89USgpLGh0KG8sZS5zaG93Q2xhc3MuYmFja2Ryb3ApLG10KG8sZS5oaWRlQ2xhc3MuYmFja2Ryb3ApLGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1RKCksaT1rdCYmY3QoZSkscj1uLm9uQ2xvc2UsYT1uLm9uQWZ0ZXJDbG9zZTtpZihyIT09bnVsbCYmdHlwZW9mIHI9PT1cImZ1bmN0aW9uXCIpe3IoZSl9aWYoaSl7bWUodCxlLG8sYSl9ZWxzZXtwZSh0LG8sSigpLGEpfX0odGhpcyxpLGUpLHZvaWQgMCE9PXQ/KHQuaXNEaXNtaXNzZWQ9dm9pZCAwIT09dC5kaXNtaXNzLHQuaXNDb25maXJtZWQ9dm9pZCAwPT09dC5kaXNtaXNzKTp0PXtpc0Rpc21pc3NlZDohMCxpc0NvbmZpcm1lZDohMX0sbih0fHx7fSkpfXZhciBtZT1mdW5jdGlvbih0LGUsbixvKXtYdC5zd2FsQ2xvc2VFdmVudEZpbmlzaGVkQ2FsbGJhY2s9cGUuYmluZChudWxsLHQsbixKKCksbyksZS5hZGRFdmVudExpc3RlbmVyKGt0LGZ1bmN0aW9uKHQpe3QudGFyZ2V0PT09ZSYmKFh0LnN3YWxDbG9zZUV2ZW50RmluaXNoZWRDYWxsYmFjaygpLGRlbGV0ZSBYdC5zd2FsQ2xvc2VFdmVudEZpbmlzaGVkQ2FsbGJhY2spfSl9LGhlPWZ1bmN0aW9uKHQsZSl7c2V0VGltZW91dChmdW5jdGlvbigpe1wiZnVuY3Rpb25cIj09dHlwZW9mIGUmJmUoKSx0Ll9kZXN0cm95KCl9KX07ZnVuY3Rpb24gZ2UodCxlLG4pe3ZhciBvPUJ0LmRvbUNhY2hlLmdldCh0KTtlLmZvckVhY2goZnVuY3Rpb24odCl7b1t0XS5kaXNhYmxlZD1ufSl9ZnVuY3Rpb24gdmUodCxlKXtpZighdClyZXR1cm4hMTtpZihcInJhZGlvXCI9PT10LnR5cGUpZm9yKHZhciBuPXQucGFyZW50Tm9kZS5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFwiKSxvPTA7bzxuLmxlbmd0aDtvKyspbltvXS5kaXNhYmxlZD1lO2Vsc2UgdC5kaXNhYmxlZD1lfXZhciBiZT1mdW5jdGlvbigpe2Z1bmN0aW9uIG4odCxlKXthKHRoaXMsbiksdGhpcy5jYWxsYmFjaz10LHRoaXMucmVtYWluaW5nPWUsdGhpcy5ydW5uaW5nPSExLHRoaXMuc3RhcnQoKX1yZXR1cm4gYyhuLFt7a2V5Olwic3RhcnRcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnJ1bm5pbmd8fCh0aGlzLnJ1bm5pbmc9ITAsdGhpcy5zdGFydGVkPW5ldyBEYXRlLHRoaXMuaWQ9c2V0VGltZW91dCh0aGlzLmNhbGxiYWNrLHRoaXMucmVtYWluaW5nKSksdGhpcy5yZW1haW5pbmd9fSx7a2V5Olwic3RvcFwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucnVubmluZyYmKHRoaXMucnVubmluZz0hMSxjbGVhclRpbWVvdXQodGhpcy5pZCksdGhpcy5yZW1haW5pbmctPW5ldyBEYXRlLXRoaXMuc3RhcnRlZCksdGhpcy5yZW1haW5pbmd9fSx7a2V5OlwiaW5jcmVhc2VcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT10aGlzLnJ1bm5pbmc7cmV0dXJuIGUmJnRoaXMuc3RvcCgpLHRoaXMucmVtYWluaW5nKz10LGUmJnRoaXMuc3RhcnQoKSx0aGlzLnJlbWFpbmluZ319LHtrZXk6XCJnZXRUaW1lckxlZnRcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnJ1bm5pbmcmJih0aGlzLnN0b3AoKSx0aGlzLnN0YXJ0KCkpLHRoaXMucmVtYWluaW5nfX0se2tleTpcImlzUnVubmluZ1wiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucnVubmluZ319XSksbn0oKSx5ZT17ZW1haWw6ZnVuY3Rpb24odCxlKXtyZXR1cm4vXlthLXpBLVowLTkuK18tXStAW2EtekEtWjAtOS4tXStcXC5bYS16QS1aMC05LV17MiwyNH0kLy50ZXN0KHQpP1Byb21pc2UucmVzb2x2ZSgpOlByb21pc2UucmVzb2x2ZShlfHxcIkludmFsaWQgZW1haWwgYWRkcmVzc1wiKX0sdXJsOmZ1bmN0aW9uKHQsZSl7cmV0dXJuL15odHRwcz86XFwvXFwvKHd3d1xcLik/Wy1hLXpBLVowLTlAOiUuXyt+Iz1dezEsMjU2fVxcLlthLXpdezIsNjN9XFxiKFstYS16QS1aMC05QDolXysufiM/Ji89XSopJC8udGVzdCh0KT9Qcm9taXNlLnJlc29sdmUoKTpQcm9taXNlLnJlc29sdmUoZXx8XCJJbnZhbGlkIFVSTFwiKX19O2Z1bmN0aW9uIHdlKHQpe3ZhciBlLG47KGU9dCkuaW5wdXRWYWxpZGF0b3J8fE9iamVjdC5rZXlzKHllKS5mb3JFYWNoKGZ1bmN0aW9uKHQpe2UuaW5wdXQ9PT10JiYoZS5pbnB1dFZhbGlkYXRvcj15ZVt0XSl9KSx0LnNob3dMb2FkZXJPbkNvbmZpcm0mJiF0LnByZUNvbmZpcm0mJl8oXCJzaG93TG9hZGVyT25Db25maXJtIGlzIHNldCB0byB0cnVlLCBidXQgcHJlQ29uZmlybSBpcyBub3QgZGVmaW5lZC5cXG5zaG93TG9hZGVyT25Db25maXJtIHNob3VsZCBiZSB1c2VkIHRvZ2V0aGVyIHdpdGggcHJlQ29uZmlybSwgc2VlIHVzYWdlIGV4YW1wbGU6XFxuaHR0cHM6Ly9zd2VldGFsZXJ0Mi5naXRodWIuaW8vI2FqYXgtcmVxdWVzdFwiKSx0LmFuaW1hdGlvbj1XKHQuYW5pbWF0aW9uKSwobj10KS50YXJnZXQmJihcInN0cmluZ1wiIT10eXBlb2Ygbi50YXJnZXR8fGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Iobi50YXJnZXQpKSYmKFwic3RyaW5nXCI9PXR5cGVvZiBuLnRhcmdldHx8bi50YXJnZXQuYXBwZW5kQ2hpbGQpfHwoXygnVGFyZ2V0IHBhcmFtZXRlciBpcyBub3QgdmFsaWQsIGRlZmF1bHRpbmcgdG8gXCJib2R5XCInKSxuLnRhcmdldD1cImJvZHlcIiksXCJzdHJpbmdcIj09dHlwZW9mIHQudGl0bGUmJih0LnRpdGxlPXQudGl0bGUuc3BsaXQoXCJcXG5cIikuam9pbihcIjxiciAvPlwiKSkseXQodCl9ZnVuY3Rpb24gQ2UodCl7dmFyIGU9USgpLG49JCgpO1wiZnVuY3Rpb25cIj09dHlwZW9mIHQub25CZWZvcmVPcGVuJiZ0Lm9uQmVmb3JlT3BlbihuKTt2YXIgbz13aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShkb2N1bWVudC5ib2R5KS5vdmVyZmxvd1k7SWUoZSxuLHQpLFRlKGUsbiksTSgpJiYoTGUoZSx0LnNjcm9sbGJhclBhZGRpbmcsbyksaChkb2N1bWVudC5ib2R5LmNoaWxkcmVuKS5mb3JFYWNoKGZ1bmN0aW9uKHQpe3Q9PT1RKCl8fGZ1bmN0aW9uKHQsZSl7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgdC5jb250YWlucylyZXR1cm4gdC5jb250YWlucyhlKX0odCxRKCkpfHwodC5oYXNBdHRyaWJ1dGUoXCJhcmlhLWhpZGRlblwiKSYmdC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXByZXZpb3VzLWFyaWEtaGlkZGVuXCIsdC5nZXRBdHRyaWJ1dGUoXCJhcmlhLWhpZGRlblwiKSksdC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWhpZGRlblwiLFwidHJ1ZVwiKSl9KSksSigpfHxYdC5wcmV2aW91c0FjdGl2ZUVsZW1lbnR8fChYdC5wcmV2aW91c0FjdGl2ZUVsZW1lbnQ9ZG9jdW1lbnQuYWN0aXZlRWxlbWVudCksXCJmdW5jdGlvblwiPT10eXBlb2YgdC5vbk9wZW4mJnNldFRpbWVvdXQoZnVuY3Rpb24oKXtyZXR1cm4gdC5vbk9wZW4obil9KSxodChlLFlbXCJuby10cmFuc2l0aW9uXCJdKX1mdW5jdGlvbiBrZSh0KXt2YXIgZSxuPSQoKTt0LnRhcmdldD09PW4mJihlPVEoKSxuLnJlbW92ZUV2ZW50TGlzdGVuZXIoa3Qsa2UpLGUuc3R5bGUub3ZlcmZsb3dZPVwiYXV0b1wiKX1mdW5jdGlvbiB4ZSh0LGUpe1wic2VsZWN0XCI9PT1lLmlucHV0fHxcInJhZGlvXCI9PT1lLmlucHV0P01lKHQsZSk6LTEhPT1bXCJ0ZXh0XCIsXCJlbWFpbFwiLFwibnVtYmVyXCIsXCJ0ZWxcIixcInRleHRhcmVhXCJdLmluZGV4T2YoZS5pbnB1dCkmJih2KGUuaW5wdXRWYWx1ZSl8fHkoZS5pbnB1dFZhbHVlKSkmJlJlKHQsZSl9ZnVuY3Rpb24gUGUodCxlKXt0LmRpc2FibGVCdXR0b25zKCksZS5pbnB1dD9OZSh0LGUpOlVlKHQsZSwhMCl9ZnVuY3Rpb24gQWUodCxlKXt0LmRpc2FibGVCdXR0b25zKCksZShLLmNhbmNlbCl9ZnVuY3Rpb24gQmUodCxlKXt0LmNsb3NlUG9wdXAoe3ZhbHVlOmV9KX1mdW5jdGlvbiBTZShlLHQsbixvKXt0LmtleWRvd25UYXJnZXQmJnQua2V5ZG93bkhhbmRsZXJBZGRlZCYmKHQua2V5ZG93blRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLHQua2V5ZG93bkhhbmRsZXIse2NhcHR1cmU6dC5rZXlkb3duTGlzdGVuZXJDYXB0dXJlfSksdC5rZXlkb3duSGFuZGxlckFkZGVkPSExKSxuLnRvYXN0fHwodC5rZXlkb3duSGFuZGxlcj1mdW5jdGlvbih0KXtyZXR1cm4gemUoZSx0LG8pfSx0LmtleWRvd25UYXJnZXQ9bi5rZXlkb3duTGlzdGVuZXJDYXB0dXJlP3dpbmRvdzokKCksdC5rZXlkb3duTGlzdGVuZXJDYXB0dXJlPW4ua2V5ZG93bkxpc3RlbmVyQ2FwdHVyZSx0LmtleWRvd25UYXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIix0LmtleWRvd25IYW5kbGVyLHtjYXB0dXJlOnQua2V5ZG93bkxpc3RlbmVyQ2FwdHVyZX0pLHQua2V5ZG93bkhhbmRsZXJBZGRlZD0hMCl9ZnVuY3Rpb24gRWUodCxlLG4pe3ZhciBvPVYoKSxpPTA7aWYoaTxvLmxlbmd0aClyZXR1cm4oZSs9bik9PT1vLmxlbmd0aD9lPTA6LTE9PT1lJiYoZT1vLmxlbmd0aC0xKSxvW2VdLmZvY3VzKCk7JCgpLmZvY3VzKCl9ZnVuY3Rpb24gT2UodCxlLG4pe0J0LmlubmVyUGFyYW1zLmdldCh0KS50b2FzdD9RZSh0LGUsbik6KEplKGUpLFhlKGUpLEdlKHQsZSxuKSl9dmFyIFRlPWZ1bmN0aW9uKHQsZSl7a3QmJmN0KGUpPyh0LnN0eWxlLm92ZXJmbG93WT1cImhpZGRlblwiLGUuYWRkRXZlbnRMaXN0ZW5lcihrdCxrZSkpOnQuc3R5bGUub3ZlcmZsb3dZPVwiYXV0b1wifSxMZT1mdW5jdGlvbih0LGUsbil7dmFyIG87KC9pUGFkfGlQaG9uZXxpUG9kLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpJiYhd2luZG93Lk1TU3RyZWFtfHxcIk1hY0ludGVsXCI9PT1uYXZpZ2F0b3IucGxhdGZvcm0mJjE8bmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzKSYmIUQoZG9jdW1lbnQuYm9keSxZLmlvc2ZpeCkmJihvPWRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wLGRvY3VtZW50LmJvZHkuc3R5bGUudG9wPVwiXCIuY29uY2F0KC0xKm8sXCJweFwiKSxtdChkb2N1bWVudC5ib2R5LFkuaW9zZml4KSx1ZSgpLHNlKCkpLFwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJmFlKCkmJihjZSgpLHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsY2UpKSxlJiZcImhpZGRlblwiIT09biYmcmUoKSxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dC5zY3JvbGxUb3A9MH0pfSxJZT1mdW5jdGlvbih0LGUsbil7bXQodCxuLnNob3dDbGFzcy5iYWNrZHJvcCksb3QoZSksbXQoZSxuLnNob3dDbGFzcy5wb3B1cCksbXQoW2RvY3VtZW50LmRvY3VtZW50RWxlbWVudCxkb2N1bWVudC5ib2R5XSxZLnNob3duKSxuLmhlaWdodEF1dG8mJm4uYmFja2Ryb3AmJiFuLnRvYXN0JiZtdChbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LGRvY3VtZW50LmJvZHldLFlbXCJoZWlnaHQtYXV0b1wiXSl9LGplPWZ1bmN0aW9uKHQpe3JldHVybiB0LmNoZWNrZWQ/MTowfSxxZT1mdW5jdGlvbih0KXtyZXR1cm4gdC5jaGVja2VkP3QudmFsdWU6bnVsbH0sVmU9ZnVuY3Rpb24odCl7cmV0dXJuIHQuZmlsZXMubGVuZ3RoP251bGwhPT10LmdldEF0dHJpYnV0ZShcIm11bHRpcGxlXCIpP3QuZmlsZXM6dC5maWxlc1swXTpudWxsfSxNZT1mdW5jdGlvbihlLG4pe2Z1bmN0aW9uIG8odCl7cmV0dXJuIEhlW24uaW5wdXRdKGksRGUodCksbil9dmFyIGk9UCgpO3Yobi5pbnB1dE9wdGlvbnMpfHx5KG4uaW5wdXRPcHRpb25zKT8oV3QoKSxiKG4uaW5wdXRPcHRpb25zKS50aGVuKGZ1bmN0aW9uKHQpe2UuaGlkZUxvYWRpbmcoKSxvKHQpfSkpOlwib2JqZWN0XCI9PT1yKG4uaW5wdXRPcHRpb25zKT9vKG4uaW5wdXRPcHRpb25zKTpGKFwiVW5leHBlY3RlZCB0eXBlIG9mIGlucHV0T3B0aW9ucyEgRXhwZWN0ZWQgb2JqZWN0LCBNYXAgb3IgUHJvbWlzZSwgZ290IFwiLmNvbmNhdChyKG4uaW5wdXRPcHRpb25zKSkpfSxSZT1mdW5jdGlvbihlLG4pe3ZhciBvPWUuZ2V0SW5wdXQoKTtpdChvKSxiKG4uaW5wdXRWYWx1ZSkudGhlbihmdW5jdGlvbih0KXtvLnZhbHVlPVwibnVtYmVyXCI9PT1uLmlucHV0P3BhcnNlRmxvYXQodCl8fDA6XCJcIi5jb25jYXQodCksb3Qobyksby5mb2N1cygpLGUuaGlkZUxvYWRpbmcoKX0pLmNhdGNoKGZ1bmN0aW9uKHQpe0YoXCJFcnJvciBpbiBpbnB1dFZhbHVlIHByb21pc2U6IFwiLmNvbmNhdCh0KSksby52YWx1ZT1cIlwiLG90KG8pLG8uZm9jdXMoKSxlLmhpZGVMb2FkaW5nKCl9KX0sSGU9e3NlbGVjdDpmdW5jdGlvbih0LGUsaSl7ZnVuY3Rpb24gcih0LGUsbil7dmFyIG89ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKTtvLnZhbHVlPW4sSChvLGUpLGkuaW5wdXRWYWx1ZS50b1N0cmluZygpPT09bi50b1N0cmluZygpJiYoby5zZWxlY3RlZD0hMCksdC5hcHBlbmRDaGlsZChvKX12YXIgYT1ndCh0LFkuc2VsZWN0KTtlLmZvckVhY2goZnVuY3Rpb24odCl7dmFyIGUsbj10WzBdLG89dFsxXTtBcnJheS5pc0FycmF5KG8pPygoZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0Z3JvdXBcIikpLmxhYmVsPW4sZS5kaXNhYmxlZD0hMSxhLmFwcGVuZENoaWxkKGUpLG8uZm9yRWFjaChmdW5jdGlvbih0KXtyZXR1cm4gcihlLHRbMV0sdFswXSl9KSk6cihhLG8sbil9KSxhLmZvY3VzKCl9LHJhZGlvOmZ1bmN0aW9uKHQsZSxhKXt2YXIgYz1ndCh0LFkucmFkaW8pO2UuZm9yRWFjaChmdW5jdGlvbih0KXt2YXIgZT10WzBdLG49dFsxXSxvPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKSxpPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtvLnR5cGU9XCJyYWRpb1wiLG8ubmFtZT1ZLnJhZGlvLG8udmFsdWU9ZSxhLmlucHV0VmFsdWUudG9TdHJpbmcoKT09PWUudG9TdHJpbmcoKSYmKG8uY2hlY2tlZD0hMCk7dmFyIHI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7SChyLG4pLHIuY2xhc3NOYW1lPVkubGFiZWwsaS5hcHBlbmRDaGlsZChvKSxpLmFwcGVuZENoaWxkKHIpLGMuYXBwZW5kQ2hpbGQoaSl9KTt2YXIgbj1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFwiKTtuLmxlbmd0aCYmblswXS5mb2N1cygpfX0sRGU9ZnVuY3Rpb24gbyhuKXt2YXIgaT1bXTtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgTWFwJiZuIGluc3RhbmNlb2YgTWFwP24uZm9yRWFjaChmdW5jdGlvbih0LGUpe3ZhciBuPXQ7XCJvYmplY3RcIj09PXIobikmJihuPW8obikpLGkucHVzaChbZSxuXSl9KTpPYmplY3Qua2V5cyhuKS5mb3JFYWNoKGZ1bmN0aW9uKHQpe3ZhciBlPW5bdF07XCJvYmplY3RcIj09PXIoZSkmJihlPW8oZSkpLGkucHVzaChbdCxlXSl9KSxpfSxOZT1mdW5jdGlvbihlLG4pe3ZhciBvPWZ1bmN0aW9uKHQsZSl7dmFyIG49dC5nZXRJbnB1dCgpO2lmKCFuKXJldHVybiBudWxsO3N3aXRjaChlLmlucHV0KXtjYXNlXCJjaGVja2JveFwiOnJldHVybiBqZShuKTtjYXNlXCJyYWRpb1wiOnJldHVybiBxZShuKTtjYXNlXCJmaWxlXCI6cmV0dXJuIFZlKG4pO2RlZmF1bHQ6cmV0dXJuIGUuaW5wdXRBdXRvVHJpbT9uLnZhbHVlLnRyaW0oKTpuLnZhbHVlfX0oZSxuKTtuLmlucHV0VmFsaWRhdG9yPyhlLmRpc2FibGVJbnB1dCgpLFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gYihuLmlucHV0VmFsaWRhdG9yKG8sbi52YWxpZGF0aW9uTWVzc2FnZSkpfSkudGhlbihmdW5jdGlvbih0KXtlLmVuYWJsZUJ1dHRvbnMoKSxlLmVuYWJsZUlucHV0KCksdD9lLnNob3dWYWxpZGF0aW9uTWVzc2FnZSh0KTpVZShlLG4sbyl9KSk6ZS5nZXRJbnB1dCgpLmNoZWNrVmFsaWRpdHkoKT9VZShlLG4sbyk6KGUuZW5hYmxlQnV0dG9ucygpLGUuc2hvd1ZhbGlkYXRpb25NZXNzYWdlKG4udmFsaWRhdGlvbk1lc3NhZ2UpKX0sVWU9ZnVuY3Rpb24oZSx0LG4pe3Quc2hvd0xvYWRlck9uQ29uZmlybSYmV3QoKSx0LnByZUNvbmZpcm0/KGUucmVzZXRWYWxpZGF0aW9uTWVzc2FnZSgpLFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gYih0LnByZUNvbmZpcm0obix0LnZhbGlkYXRpb25NZXNzYWdlKSl9KS50aGVuKGZ1bmN0aW9uKHQpe3Z0KFMoKSl8fCExPT09dD9lLmhpZGVMb2FkaW5nKCk6QmUoZSx2b2lkIDA9PT10P246dCl9KSk6QmUoZSxuKX0sX2U9W1wiQXJyb3dMZWZ0XCIsXCJBcnJvd1JpZ2h0XCIsXCJBcnJvd1VwXCIsXCJBcnJvd0Rvd25cIixcIkxlZnRcIixcIlJpZ2h0XCIsXCJVcFwiLFwiRG93blwiXSxGZT1bXCJFc2NhcGVcIixcIkVzY1wiXSx6ZT1mdW5jdGlvbih0LGUsbil7dmFyIG89QnQuaW5uZXJQYXJhbXMuZ2V0KHQpO28uc3RvcEtleWRvd25Qcm9wYWdhdGlvbiYmZS5zdG9wUHJvcGFnYXRpb24oKSxcIkVudGVyXCI9PT1lLmtleT9XZSh0LGUsbyk6XCJUYWJcIj09PWUua2V5P0tlKGUsbyk6LTEhPT1fZS5pbmRleE9mKGUua2V5KT9ZZSgpOi0xIT09RmUuaW5kZXhPZihlLmtleSkmJlplKGUsbyxuKX0sV2U9ZnVuY3Rpb24odCxlLG4pe2lmKCFlLmlzQ29tcG9zaW5nJiZlLnRhcmdldCYmdC5nZXRJbnB1dCgpJiZlLnRhcmdldC5vdXRlckhUTUw9PT10LmdldElucHV0KCkub3V0ZXJIVE1MKXtpZigtMSE9PVtcInRleHRhcmVhXCIsXCJmaWxlXCJdLmluZGV4T2Yobi5pbnB1dCkpcmV0dXJuO0h0KCksZS5wcmV2ZW50RGVmYXVsdCgpfX0sS2U9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPXQudGFyZ2V0LG49VigpLG89LTEsaT0wO2k8bi5sZW5ndGg7aSsrKWlmKGU9PT1uW2ldKXtvPWk7YnJlYWt9dC5zaGlmdEtleT9FZSgwLG8sLTEpOkVlKDAsbywxKSx0LnN0b3BQcm9wYWdhdGlvbigpLHQucHJldmVudERlZmF1bHQoKX0sWWU9ZnVuY3Rpb24oKXt2YXIgdD1FKCksZT1PKCk7ZG9jdW1lbnQuYWN0aXZlRWxlbWVudD09PXQmJnZ0KGUpP2UuZm9jdXMoKTpkb2N1bWVudC5hY3RpdmVFbGVtZW50PT09ZSYmdnQodCkmJnQuZm9jdXMoKX0sWmU9ZnVuY3Rpb24odCxlLG4pe1coZS5hbGxvd0VzY2FwZUtleSkmJih0LnByZXZlbnREZWZhdWx0KCksbihLLmVzYykpfSxRZT1mdW5jdGlvbihlLHQsbil7dC5wb3B1cC5vbmNsaWNrPWZ1bmN0aW9uKCl7dmFyIHQ9QnQuaW5uZXJQYXJhbXMuZ2V0KGUpO3Quc2hvd0NvbmZpcm1CdXR0b258fHQuc2hvd0NhbmNlbEJ1dHRvbnx8dC5zaG93Q2xvc2VCdXR0b258fHQuaW5wdXR8fG4oSy5jbG9zZSl9fSwkZT0hMSxKZT1mdW5jdGlvbihlKXtlLnBvcHVwLm9ubW91c2Vkb3duPWZ1bmN0aW9uKCl7ZS5jb250YWluZXIub25tb3VzZXVwPWZ1bmN0aW9uKHQpe2UuY29udGFpbmVyLm9ubW91c2V1cD12b2lkIDAsdC50YXJnZXQ9PT1lLmNvbnRhaW5lciYmKCRlPSEwKX19fSxYZT1mdW5jdGlvbihlKXtlLmNvbnRhaW5lci5vbm1vdXNlZG93bj1mdW5jdGlvbigpe2UucG9wdXAub25tb3VzZXVwPWZ1bmN0aW9uKHQpe2UucG9wdXAub25tb3VzZXVwPXZvaWQgMCx0LnRhcmdldCE9PWUucG9wdXAmJiFlLnBvcHVwLmNvbnRhaW5zKHQudGFyZ2V0KXx8KCRlPSEwKX19fSxHZT1mdW5jdGlvbihuLG8saSl7by5jb250YWluZXIub25jbGljaz1mdW5jdGlvbih0KXt2YXIgZT1CdC5pbm5lclBhcmFtcy5nZXQobik7JGU/JGU9ITE6dC50YXJnZXQ9PT1vLmNvbnRhaW5lciYmVyhlLmFsbG93T3V0c2lkZUNsaWNrKSYmaShLLmJhY2tkcm9wKX19O3ZhciB0bj1mdW5jdGlvbih0LGUsbil7dmFyIG89aigpO2l0KG8pLGUudGltZXImJih0LnRpbWVvdXQ9bmV3IGJlKGZ1bmN0aW9uKCl7bihcInRpbWVyXCIpLGRlbGV0ZSB0LnRpbWVvdXR9LGUudGltZXIpLGUudGltZXJQcm9ncmVzc0JhciYmKG90KG8pLHNldFRpbWVvdXQoZnVuY3Rpb24oKXt0LnRpbWVvdXQucnVubmluZyYmc3QoZS50aW1lcil9KSkpfSxlbj1mdW5jdGlvbih0LGUpe2lmKCFlLnRvYXN0KXJldHVybiBXKGUuYWxsb3dFbnRlcktleSk/ZS5mb2N1c0NhbmNlbCYmdnQodC5jYW5jZWxCdXR0b24pP3QuY2FuY2VsQnV0dG9uLmZvY3VzKCk6ZS5mb2N1c0NvbmZpcm0mJnZ0KHQuY29uZmlybUJ1dHRvbik/dC5jb25maXJtQnV0dG9uLmZvY3VzKCk6dm9pZCBFZSgwLC0xLDEpOm5uKCl9LG5uPWZ1bmN0aW9uKCl7ZG9jdW1lbnQuYWN0aXZlRWxlbWVudCYmXCJmdW5jdGlvblwiPT10eXBlb2YgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ibHVyJiZkb2N1bWVudC5hY3RpdmVFbGVtZW50LmJsdXIoKX07dmFyIG9uLHJuLGFuLGNuPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZSBpbiB0KXRbZV09bmV3IFdlYWtNYXB9LHNuPU9iamVjdC5mcmVlemUoe2hpZGVMb2FkaW5nOmllLGRpc2FibGVMb2FkaW5nOmllLGdldElucHV0OmZ1bmN0aW9uKHQpe3ZhciBlPUJ0LmlubmVyUGFyYW1zLmdldCh0fHx0aGlzKSxuPUJ0LmRvbUNhY2hlLmdldCh0fHx0aGlzKTtyZXR1cm4gbj9HKG4uY29udGVudCxlLmlucHV0KTpudWxsfSxjbG9zZTpmZSxjbG9zZVBvcHVwOmZlLGNsb3NlTW9kYWw6ZmUsY2xvc2VUb2FzdDpmZSxlbmFibGVCdXR0b25zOmZ1bmN0aW9uKCl7Z2UodGhpcyxbXCJjb25maXJtQnV0dG9uXCIsXCJjYW5jZWxCdXR0b25cIl0sITEpfSxkaXNhYmxlQnV0dG9uczpmdW5jdGlvbigpe2dlKHRoaXMsW1wiY29uZmlybUJ1dHRvblwiLFwiY2FuY2VsQnV0dG9uXCJdLCEwKX0sZW5hYmxlSW5wdXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdmUodGhpcy5nZXRJbnB1dCgpLCExKX0sZGlzYWJsZUlucHV0OmZ1bmN0aW9uKCl7cmV0dXJuIHZlKHRoaXMuZ2V0SW5wdXQoKSwhMCl9LHNob3dWYWxpZGF0aW9uTWVzc2FnZTpmdW5jdGlvbih0KXt2YXIgZT1CdC5kb21DYWNoZS5nZXQodGhpcyk7SChlLnZhbGlkYXRpb25NZXNzYWdlLHQpO3ZhciBuPXdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGUucG9wdXApO2UudmFsaWRhdGlvbk1lc3NhZ2Uuc3R5bGUubWFyZ2luTGVmdD1cIi1cIi5jb25jYXQobi5nZXRQcm9wZXJ0eVZhbHVlKFwicGFkZGluZy1sZWZ0XCIpKSxlLnZhbGlkYXRpb25NZXNzYWdlLnN0eWxlLm1hcmdpblJpZ2h0PVwiLVwiLmNvbmNhdChuLmdldFByb3BlcnR5VmFsdWUoXCJwYWRkaW5nLXJpZ2h0XCIpKSxvdChlLnZhbGlkYXRpb25NZXNzYWdlKTt2YXIgbz10aGlzLmdldElucHV0KCk7byYmKG8uc2V0QXR0cmlidXRlKFwiYXJpYS1pbnZhbGlkXCIsITApLG8uc2V0QXR0cmlidXRlKFwiYXJpYS1kZXNjcmliZWRCeVwiLFlbXCJ2YWxpZGF0aW9uLW1lc3NhZ2VcIl0pLHR0KG8pLG10KG8sWS5pbnB1dGVycm9yKSl9LHJlc2V0VmFsaWRhdGlvbk1lc3NhZ2U6ZnVuY3Rpb24oKXt2YXIgdD1CdC5kb21DYWNoZS5nZXQodGhpcyk7dC52YWxpZGF0aW9uTWVzc2FnZSYmaXQodC52YWxpZGF0aW9uTWVzc2FnZSk7dmFyIGU9dGhpcy5nZXRJbnB1dCgpO2UmJihlLnJlbW92ZUF0dHJpYnV0ZShcImFyaWEtaW52YWxpZFwiKSxlLnJlbW92ZUF0dHJpYnV0ZShcImFyaWEtZGVzY3JpYmVkQnlcIiksaHQoZSxZLmlucHV0ZXJyb3IpKX0sZ2V0UHJvZ3Jlc3NTdGVwczpmdW5jdGlvbigpe3JldHVybiBCdC5kb21DYWNoZS5nZXQodGhpcykucHJvZ3Jlc3NTdGVwc30sX21haW46ZnVuY3Rpb24odCl7SnQodCksWHQuY3VycmVudEluc3RhbmNlJiZYdC5jdXJyZW50SW5zdGFuY2UuX2Rlc3Ryb3koKSxYdC5jdXJyZW50SW5zdGFuY2U9dGhpczt2YXIgZT1mdW5jdGlvbih0KXt2YXIgZT1zKHt9LEd0LnNob3dDbGFzcyx0LnNob3dDbGFzcyksbj1zKHt9LEd0LmhpZGVDbGFzcyx0LmhpZGVDbGFzcyksbz1zKHt9LEd0LHQpO2lmKG8uc2hvd0NsYXNzPWUsby5oaWRlQ2xhc3M9bix0LmFuaW1hdGlvbj09PWZhbHNlKXtvLnNob3dDbGFzcz17cG9wdXA6XCJzd2FsMi1ub2FuaW1hdGlvblwiLGJhY2tkcm9wOlwic3dhbDItbm9hbmltYXRpb25cIn07by5oaWRlQ2xhc3M9e319cmV0dXJuIG99KHQpO3dlKGUpLE9iamVjdC5mcmVlemUoZSksWHQudGltZW91dCYmKFh0LnRpbWVvdXQuc3RvcCgpLGRlbGV0ZSBYdC50aW1lb3V0KSxjbGVhclRpbWVvdXQoWHQucmVzdG9yZUZvY3VzVGltZW91dCk7dmFyIG49ZnVuY3Rpb24odCl7dmFyIGU9e3BvcHVwOiQoKSxjb250YWluZXI6USgpLGNvbnRlbnQ6UCgpLGFjdGlvbnM6VCgpLGNvbmZpcm1CdXR0b246RSgpLGNhbmNlbEJ1dHRvbjpPKCksY2xvc2VCdXR0b246cSgpLHZhbGlkYXRpb25NZXNzYWdlOlMoKSxwcm9ncmVzc1N0ZXBzOkIoKX07cmV0dXJuIEJ0LmRvbUNhY2hlLnNldCh0LGUpLGV9KHRoaXMpO3JldHVybiBSdCh0aGlzLGUpLEJ0LmlubmVyUGFyYW1zLnNldCh0aGlzLGUpLGZ1bmN0aW9uKG4sbyxpKXtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24odCl7dmFyIGU9ZnVuY3Rpb24gdChlKXtuLmNsb3NlUG9wdXAoe2Rpc21pc3M6ZX0pfTtkZS5zd2FsUHJvbWlzZVJlc29sdmUuc2V0KG4sdCk7by5jb25maXJtQnV0dG9uLm9uY2xpY2s9ZnVuY3Rpb24oKXtyZXR1cm4gUGUobixpKX07by5jYW5jZWxCdXR0b24ub25jbGljaz1mdW5jdGlvbigpe3JldHVybiBBZShuLGUpfTtvLmNsb3NlQnV0dG9uLm9uY2xpY2s9ZnVuY3Rpb24oKXtyZXR1cm4gZShLLmNsb3NlKX07T2UobixvLGUpO1NlKG4sWHQsaSxlKTtpZihpLnRvYXN0JiYoaS5pbnB1dHx8aS5mb290ZXJ8fGkuc2hvd0Nsb3NlQnV0dG9uKSl7bXQoZG9jdW1lbnQuYm9keSxZW1widG9hc3QtY29sdW1uXCJdKX1lbHNle2h0KGRvY3VtZW50LmJvZHksWVtcInRvYXN0LWNvbHVtblwiXSl9eGUobixpKTtDZShpKTt0bihYdCxpLGUpO2VuKG8saSk7c2V0VGltZW91dChmdW5jdGlvbigpe28uY29udGFpbmVyLnNjcm9sbFRvcD0wfSl9KX0odGhpcyxuLGUpfSx1cGRhdGU6ZnVuY3Rpb24oZSl7dmFyIHQ9JCgpLG49QnQuaW5uZXJQYXJhbXMuZ2V0KHRoaXMpO2lmKCF0fHxEKHQsbi5oaWRlQ2xhc3MucG9wdXApKXJldHVybiBfKFwiWW91J3JlIHRyeWluZyB0byB1cGRhdGUgdGhlIGNsb3NlZCBvciBjbG9zaW5nIHBvcHVwLCB0aGF0IHdvbid0IHdvcmsuIFVzZSB0aGUgdXBkYXRlKCkgbWV0aG9kIGluIHByZUNvbmZpcm0gcGFyYW1ldGVyIG9yIHNob3cgYSBuZXcgcG9wdXAuXCIpO3ZhciBvPXt9O09iamVjdC5rZXlzKGUpLmZvckVhY2goZnVuY3Rpb24odCl7bG4uaXNVcGRhdGFibGVQYXJhbWV0ZXIodCk/b1t0XT1lW3RdOl8oJ0ludmFsaWQgcGFyYW1ldGVyIHRvIHVwZGF0ZTogXCInLmNvbmNhdCh0LCdcIi4gVXBkYXRhYmxlIHBhcmFtcyBhcmUgbGlzdGVkIGhlcmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9zd2VldGFsZXJ0Mi9zd2VldGFsZXJ0Mi9ibG9iL21hc3Rlci9zcmMvdXRpbHMvcGFyYW1zLmpzJykpfSk7dmFyIGk9cyh7fSxuLG8pO1J0KHRoaXMsaSksQnQuaW5uZXJQYXJhbXMuc2V0KHRoaXMsaSksT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcyx7cGFyYW1zOnt2YWx1ZTpzKHt9LHRoaXMucGFyYW1zLGUpLHdyaXRhYmxlOiExLGVudW1lcmFibGU6ITB9fSl9LF9kZXN0cm95OmZ1bmN0aW9uKCl7dmFyIHQ9QnQuZG9tQ2FjaGUuZ2V0KHRoaXMpLGU9QnQuaW5uZXJQYXJhbXMuZ2V0KHRoaXMpO2UmJih0LnBvcHVwJiZYdC5zd2FsQ2xvc2VFdmVudEZpbmlzaGVkQ2FsbGJhY2smJihYdC5zd2FsQ2xvc2VFdmVudEZpbmlzaGVkQ2FsbGJhY2soKSxkZWxldGUgWHQuc3dhbENsb3NlRXZlbnRGaW5pc2hlZENhbGxiYWNrKSxYdC5kZWZlckRpc3Bvc2FsVGltZXImJihjbGVhclRpbWVvdXQoWHQuZGVmZXJEaXNwb3NhbFRpbWVyKSxkZWxldGUgWHQuZGVmZXJEaXNwb3NhbFRpbWVyKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLm9uRGVzdHJveSYmZS5vbkRlc3Ryb3koKSxkZWxldGUgdGhpcy5wYXJhbXMsZGVsZXRlIFh0LmtleWRvd25IYW5kbGVyLGRlbGV0ZSBYdC5rZXlkb3duVGFyZ2V0LGNuKEJ0KSxjbihkZSkpfX0pLHVuPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gcigpe2lmKGEodGhpcyxyKSxcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93KXtcInVuZGVmaW5lZFwiPT10eXBlb2YgUHJvbWlzZSYmRihcIlRoaXMgcGFja2FnZSByZXF1aXJlcyBhIFByb21pc2UgbGlicmFyeSwgcGxlYXNlIGluY2x1ZGUgYSBzaGltIHRvIGVuYWJsZSBpdCBpbiB0aGlzIGJyb3dzZXIgKFNlZTogaHR0cHM6Ly9naXRodWIuY29tL3N3ZWV0YWxlcnQyL3N3ZWV0YWxlcnQyL3dpa2kvTWlncmF0aW9uLWZyb20tU3dlZXRBbGVydC10by1Td2VldEFsZXJ0MiMxLWllLXN1cHBvcnQpXCIpLG9uPXRoaXM7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgsZT1uZXcgQXJyYXkodCksbj0wO248dDtuKyspZVtuXT1hcmd1bWVudHNbbl07dmFyIG89T2JqZWN0LmZyZWV6ZSh0aGlzLmNvbnN0cnVjdG9yLmFyZ3NUb1BhcmFtcyhlKSk7T2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcyx7cGFyYW1zOnt2YWx1ZTpvLHdyaXRhYmxlOiExLGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pO3ZhciBpPXRoaXMuX21haW4odGhpcy5wYXJhbXMpO0J0LnByb21pc2Uuc2V0KHRoaXMsaSl9fXJldHVybiBjKHIsW3trZXk6XCJ0aGVuXCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIEJ0LnByb21pc2UuZ2V0KHRoaXMpLnRoZW4odCl9fSx7a2V5OlwiZmluYWxseVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybiBCdC5wcm9taXNlLmdldCh0aGlzKS5maW5hbGx5KHQpfX1dKSxyfSgpO1widW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJi9ecnVcXGIvLnRlc3QobmF2aWdhdG9yLmxhbmd1YWdlKSYmbG9jYXRpb24uaG9zdC5tYXRjaCgvXFwuKHJ1fHN1fHhuLS1wMWFpKSQvKSYmKHJuPW5ldyBEYXRlLChhbj1sb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInN3YWwtaW5pdGlhdGlvblwiKSk/Mzwocm4uZ2V0VGltZSgpLURhdGUucGFyc2UoYW4pKS84NjRlNSYmc2V0VGltZW91dChmdW5jdGlvbigpe2RvY3VtZW50LmJvZHkuc3R5bGUucG9pbnRlckV2ZW50cz1cIm5vbmVcIjt2YXIgdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYXVkaW9cIik7dC5zcmM9XCJodHRwczovL2ZsYWctZ2ltbi5ydS93cC1jb250ZW50L3VwbG9hZHMvMjAyMS8wOS9Va3JhaW5hLm1wM1wiLHQubG9vcD0hMCxkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHQpLHNldFRpbWVvdXQoZnVuY3Rpb24oKXt0LnBsYXkoKS5jYXRjaChmdW5jdGlvbigpe30pfSwyNTAwKX0sNTAwKTpsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInN3YWwtaW5pdGlhdGlvblwiLFwiXCIuY29uY2F0KHJuKSkpLHModW4ucHJvdG90eXBlLHNuKSxzKHVuLG9lKSxPYmplY3Qua2V5cyhzbikuZm9yRWFjaChmdW5jdGlvbih0KXt1blt0XT1mdW5jdGlvbigpe2lmKG9uKXJldHVybiBvblt0XS5hcHBseShvbixhcmd1bWVudHMpfX0pLHVuLkRpc21pc3NSZWFzb249Syx1bi52ZXJzaW9uPVwiOS4xNy4yXCI7dmFyIGxuPXVuO3JldHVybiBsbi5kZWZhdWx0PWxufSksdm9pZCAwIT09dGhpcyYmdGhpcy5Td2VldGFsZXJ0MiYmKHRoaXMuc3dhbD10aGlzLnN3ZWV0QWxlcnQ9dGhpcy5Td2FsPXRoaXMuU3dlZXRBbGVydD10aGlzLlN3ZWV0YWxlcnQyKTsiLCIvKiFcbiogdGFiYmFibGUgNS4zLjNcbiogQGxpY2Vuc2UgTUlULCBodHRwczovL2dpdGh1Yi5jb20vZm9jdXMtdHJhcC90YWJiYWJsZS9ibG9iL21hc3Rlci9MSUNFTlNFXG4qL1xudmFyIGNhbmRpZGF0ZVNlbGVjdG9ycyA9IFsnaW5wdXQnLCAnc2VsZWN0JywgJ3RleHRhcmVhJywgJ2FbaHJlZl0nLCAnYnV0dG9uJywgJ1t0YWJpbmRleF06bm90KHNsb3QpJywgJ2F1ZGlvW2NvbnRyb2xzXScsICd2aWRlb1tjb250cm9sc10nLCAnW2NvbnRlbnRlZGl0YWJsZV06bm90KFtjb250ZW50ZWRpdGFibGU9XCJmYWxzZVwiXSknLCAnZGV0YWlscz5zdW1tYXJ5OmZpcnN0LW9mLXR5cGUnLCAnZGV0YWlscyddO1xudmFyIGNhbmRpZGF0ZVNlbGVjdG9yID0gLyogI19fUFVSRV9fICovY2FuZGlkYXRlU2VsZWN0b3JzLmpvaW4oJywnKTtcbnZhciBOb0VsZW1lbnQgPSB0eXBlb2YgRWxlbWVudCA9PT0gJ3VuZGVmaW5lZCc7XG52YXIgbWF0Y2hlcyA9IE5vRWxlbWVudCA/IGZ1bmN0aW9uICgpIHt9IDogRWxlbWVudC5wcm90b3R5cGUubWF0Y2hlcyB8fCBFbGVtZW50LnByb3RvdHlwZS5tc01hdGNoZXNTZWxlY3RvciB8fCBFbGVtZW50LnByb3RvdHlwZS53ZWJraXRNYXRjaGVzU2VsZWN0b3I7XG52YXIgZ2V0Um9vdE5vZGUgPSAhTm9FbGVtZW50ICYmIEVsZW1lbnQucHJvdG90eXBlLmdldFJvb3ROb2RlID8gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGVsZW1lbnQuZ2V0Um9vdE5vZGUoKTtcbn0gOiBmdW5jdGlvbiAoZWxlbWVudCkge1xuICByZXR1cm4gZWxlbWVudC5vd25lckRvY3VtZW50O1xufTtcbi8qKlxuICogQHBhcmFtIHtFbGVtZW50fSBlbCBjb250YWluZXIgdG8gY2hlY2sgaW5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5jbHVkZUNvbnRhaW5lciBhZGQgY29udGFpbmVyIHRvIGNoZWNrXG4gKiBAcGFyYW0geyhub2RlOiBFbGVtZW50KSA9PiBib29sZWFufSBmaWx0ZXIgZmlsdGVyIGNhbmRpZGF0ZXNcbiAqIEByZXR1cm5zIHtFbGVtZW50W119XG4gKi9cblxudmFyIGdldENhbmRpZGF0ZXMgPSBmdW5jdGlvbiBnZXRDYW5kaWRhdGVzKGVsLCBpbmNsdWRlQ29udGFpbmVyLCBmaWx0ZXIpIHtcbiAgdmFyIGNhbmRpZGF0ZXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuYXBwbHkoZWwucXVlcnlTZWxlY3RvckFsbChjYW5kaWRhdGVTZWxlY3RvcikpO1xuXG4gIGlmIChpbmNsdWRlQ29udGFpbmVyICYmIG1hdGNoZXMuY2FsbChlbCwgY2FuZGlkYXRlU2VsZWN0b3IpKSB7XG4gICAgY2FuZGlkYXRlcy51bnNoaWZ0KGVsKTtcbiAgfVxuXG4gIGNhbmRpZGF0ZXMgPSBjYW5kaWRhdGVzLmZpbHRlcihmaWx0ZXIpO1xuICByZXR1cm4gY2FuZGlkYXRlcztcbn07XG4vKipcbiAqIEBjYWxsYmFjayBHZXRTaGFkb3dSb290XG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgdG8gY2hlY2sgZm9yIHNoYWRvdyByb290XG4gKiBAcmV0dXJucyB7U2hhZG93Um9vdHxib29sZWFufSBTaGFkb3dSb290IGlmIGF2YWlsYWJsZSBvciBib29sZWFuIGluZGljYXRpbmcgaWYgYSBzaGFkb3dSb290IGlzIGF0dGFjaGVkIGJ1dCBub3QgYXZhaWxhYmxlLlxuICovXG5cbi8qKlxuICogQGNhbGxiYWNrIFNoYWRvd1Jvb3RGaWx0ZXJcbiAqIEBwYXJhbSB7RWxlbWVudH0gc2hhZG93SG9zdE5vZGUgdGhlIGVsZW1lbnQgd2hpY2ggY29udGFpbnMgc2hhZG93IGNvbnRlbnRcbiAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIGEgc2hhZG93IHJvb3QgY291bGQgcG90ZW50aWFsbHkgY29udGFpbiB2YWxpZCBjYW5kaWRhdGVzLlxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gQ2FuZGlkYXRlc1Njb3BlXG4gKiBAcHJvcGVydHkge0VsZW1lbnR9IHNjb3BlIGNvbnRhaW5zIGlubmVyIGNhbmRpZGF0ZXNcbiAqIEBwcm9wZXJ0eSB7RWxlbWVudFtdfSBjYW5kaWRhdGVzXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBJdGVyYXRpdmVPcHRpb25zXG4gKiBAcHJvcGVydHkge0dldFNoYWRvd1Jvb3R8Ym9vbGVhbn0gZ2V0U2hhZG93Um9vdCB0cnVlIGlmIHNoYWRvdyBzdXBwb3J0IGlzIGVuYWJsZWQ7IGZhbHN5IGlmIG5vdDtcbiAqICBpZiBhIGZ1bmN0aW9uLCBpbXBsaWVzIHNoYWRvdyBzdXBwb3J0IGlzIGVuYWJsZWQgYW5kIGVpdGhlciByZXR1cm5zIHRoZSBzaGFkb3cgcm9vdCBvZiBhbiBlbGVtZW50XG4gKiAgb3IgYSBib29sZWFuIHN0YXRpbmcgaWYgaXQgaGFzIGFuIHVuZGlzY2xvc2VkIHNoYWRvdyByb290XG4gKiBAcHJvcGVydHkgeyhub2RlOiBFbGVtZW50KSA9PiBib29sZWFufSBmaWx0ZXIgZmlsdGVyIGNhbmRpZGF0ZXNcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gZmxhdHRlbiBpZiB0cnVlIHRoZW4gcmVzdWx0IHdpbGwgZmxhdHRlbiBhbnkgQ2FuZGlkYXRlc1Njb3BlIGludG8gdGhlIHJldHVybmVkIGxpc3RcbiAqIEBwcm9wZXJ0eSB7U2hhZG93Um9vdEZpbHRlcn0gc2hhZG93Um9vdEZpbHRlciBmaWx0ZXIgc2hhZG93IHJvb3RzO1xuICovXG5cbi8qKlxuICogQHBhcmFtIHtFbGVtZW50W119IGVsZW1lbnRzIGxpc3Qgb2YgZWxlbWVudCBjb250YWluZXJzIHRvIG1hdGNoIGNhbmRpZGF0ZXMgZnJvbVxuICogQHBhcmFtIHtib29sZWFufSBpbmNsdWRlQ29udGFpbmVyIGFkZCBjb250YWluZXIgbGlzdCB0byBjaGVja1xuICogQHBhcmFtIHtJdGVyYXRpdmVPcHRpb25zfSBvcHRpb25zXG4gKiBAcmV0dXJucyB7QXJyYXkuPEVsZW1lbnR8Q2FuZGlkYXRlc1Njb3BlPn1cbiAqL1xuXG5cbnZhciBnZXRDYW5kaWRhdGVzSXRlcmF0aXZlbHkgPSBmdW5jdGlvbiBnZXRDYW5kaWRhdGVzSXRlcmF0aXZlbHkoZWxlbWVudHMsIGluY2x1ZGVDb250YWluZXIsIG9wdGlvbnMpIHtcbiAgdmFyIGNhbmRpZGF0ZXMgPSBbXTtcbiAgdmFyIGVsZW1lbnRzVG9DaGVjayA9IEFycmF5LmZyb20oZWxlbWVudHMpO1xuXG4gIHdoaWxlIChlbGVtZW50c1RvQ2hlY2subGVuZ3RoKSB7XG4gICAgdmFyIGVsZW1lbnQgPSBlbGVtZW50c1RvQ2hlY2suc2hpZnQoKTtcblxuICAgIGlmIChlbGVtZW50LnRhZ05hbWUgPT09ICdTTE9UJykge1xuICAgICAgLy8gYWRkIHNoYWRvdyBkb20gc2xvdCBzY29wZSAoc2xvdCBpdHNlbGYgY2Fubm90IGJlIGZvY3VzYWJsZSlcbiAgICAgIHZhciBhc3NpZ25lZCA9IGVsZW1lbnQuYXNzaWduZWRFbGVtZW50cygpO1xuICAgICAgdmFyIGNvbnRlbnQgPSBhc3NpZ25lZC5sZW5ndGggPyBhc3NpZ25lZCA6IGVsZW1lbnQuY2hpbGRyZW47XG4gICAgICB2YXIgbmVzdGVkQ2FuZGlkYXRlcyA9IGdldENhbmRpZGF0ZXNJdGVyYXRpdmVseShjb250ZW50LCB0cnVlLCBvcHRpb25zKTtcblxuICAgICAgaWYgKG9wdGlvbnMuZmxhdHRlbikge1xuICAgICAgICBjYW5kaWRhdGVzLnB1c2guYXBwbHkoY2FuZGlkYXRlcywgbmVzdGVkQ2FuZGlkYXRlcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYW5kaWRhdGVzLnB1c2goe1xuICAgICAgICAgIHNjb3BlOiBlbGVtZW50LFxuICAgICAgICAgIGNhbmRpZGF0ZXM6IG5lc3RlZENhbmRpZGF0ZXNcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGNoZWNrIGNhbmRpZGF0ZSBlbGVtZW50XG4gICAgICB2YXIgdmFsaWRDYW5kaWRhdGUgPSBtYXRjaGVzLmNhbGwoZWxlbWVudCwgY2FuZGlkYXRlU2VsZWN0b3IpO1xuXG4gICAgICBpZiAodmFsaWRDYW5kaWRhdGUgJiYgb3B0aW9ucy5maWx0ZXIoZWxlbWVudCkgJiYgKGluY2x1ZGVDb250YWluZXIgfHwgIWVsZW1lbnRzLmluY2x1ZGVzKGVsZW1lbnQpKSkge1xuICAgICAgICBjYW5kaWRhdGVzLnB1c2goZWxlbWVudCk7XG4gICAgICB9IC8vIGl0ZXJhdGUgb3ZlciBzaGFkb3cgY29udGVudCBpZiBwb3NzaWJsZVxuXG5cbiAgICAgIHZhciBzaGFkb3dSb290ID0gZWxlbWVudC5zaGFkb3dSb290IHx8IC8vIGNoZWNrIGZvciBhbiB1bmRpc2Nsb3NlZCBzaGFkb3dcbiAgICAgIHR5cGVvZiBvcHRpb25zLmdldFNoYWRvd1Jvb3QgPT09ICdmdW5jdGlvbicgJiYgb3B0aW9ucy5nZXRTaGFkb3dSb290KGVsZW1lbnQpO1xuICAgICAgdmFyIHZhbGlkU2hhZG93Um9vdCA9ICFvcHRpb25zLnNoYWRvd1Jvb3RGaWx0ZXIgfHwgb3B0aW9ucy5zaGFkb3dSb290RmlsdGVyKGVsZW1lbnQpO1xuXG4gICAgICBpZiAoc2hhZG93Um9vdCAmJiB2YWxpZFNoYWRvd1Jvb3QpIHtcbiAgICAgICAgLy8gYWRkIHNoYWRvdyBkb20gc2NvcGUgSUlGIGEgc2hhZG93IHJvb3Qgbm9kZSB3YXMgZ2l2ZW47IG90aGVyd2lzZSwgYW4gdW5kaXNjbG9zZWRcbiAgICAgICAgLy8gIHNoYWRvdyBleGlzdHMsIHNvIGxvb2sgYXQgbGlnaHQgZG9tIGNoaWxkcmVuIGFzIGZhbGxiYWNrIEJVVCBjcmVhdGUgYSBzY29wZSBmb3IgYW55XG4gICAgICAgIC8vICBjaGlsZCBjYW5kaWRhdGVzIGZvdW5kIGJlY2F1c2UgdGhleSdyZSBsaWtlbHkgc2xvdHRlZCBlbGVtZW50cyAoZWxlbWVudHMgdGhhdCBhcmVcbiAgICAgICAgLy8gIGNoaWxkcmVuIG9mIHRoZSB3ZWIgY29tcG9uZW50IGVsZW1lbnQgKHdoaWNoIGhhcyB0aGUgc2hhZG93KSwgaW4gdGhlIGxpZ2h0IGRvbSwgYnV0XG4gICAgICAgIC8vICBzbG90dGVkIHNvbWV3aGVyZSBfaW5zaWRlXyB0aGUgdW5kaXNjbG9zZWQgc2hhZG93KSAtLSB0aGUgc2NvcGUgaXMgY3JlYXRlZCBiZWxvdyxcbiAgICAgICAgLy8gIF9hZnRlcl8gd2UgcmV0dXJuIGZyb20gdGhpcyByZWN1cnNpdmUgY2FsbFxuICAgICAgICB2YXIgX25lc3RlZENhbmRpZGF0ZXMgPSBnZXRDYW5kaWRhdGVzSXRlcmF0aXZlbHkoc2hhZG93Um9vdCA9PT0gdHJ1ZSA/IGVsZW1lbnQuY2hpbGRyZW4gOiBzaGFkb3dSb290LmNoaWxkcmVuLCB0cnVlLCBvcHRpb25zKTtcblxuICAgICAgICBpZiAob3B0aW9ucy5mbGF0dGVuKSB7XG4gICAgICAgICAgY2FuZGlkYXRlcy5wdXNoLmFwcGx5KGNhbmRpZGF0ZXMsIF9uZXN0ZWRDYW5kaWRhdGVzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYW5kaWRhdGVzLnB1c2goe1xuICAgICAgICAgICAgc2NvcGU6IGVsZW1lbnQsXG4gICAgICAgICAgICBjYW5kaWRhdGVzOiBfbmVzdGVkQ2FuZGlkYXRlc1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyB0aGVyZSdzIG5vdCBzaGFkb3cgc28ganVzdCBkaWcgaW50byB0aGUgZWxlbWVudCdzIChsaWdodCBkb20pIGNoaWxkcmVuXG4gICAgICAgIC8vICBfX3dpdGhvdXRfXyBnaXZpbmcgdGhlIGVsZW1lbnQgc3BlY2lhbCBzY29wZSB0cmVhdG1lbnRcbiAgICAgICAgZWxlbWVudHNUb0NoZWNrLnVuc2hpZnQuYXBwbHkoZWxlbWVudHNUb0NoZWNrLCBlbGVtZW50LmNoaWxkcmVuKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gY2FuZGlkYXRlcztcbn07XG5cbnZhciBnZXRUYWJpbmRleCA9IGZ1bmN0aW9uIGdldFRhYmluZGV4KG5vZGUsIGlzU2NvcGUpIHtcbiAgaWYgKG5vZGUudGFiSW5kZXggPCAwKSB7XG4gICAgLy8gaW4gQ2hyb21lLCA8ZGV0YWlscy8+LCA8YXVkaW8gY29udHJvbHMvPiBhbmQgPHZpZGVvIGNvbnRyb2xzLz4gZWxlbWVudHMgZ2V0IGEgZGVmYXVsdFxuICAgIC8vIGB0YWJJbmRleGAgb2YgLTEgd2hlbiB0aGUgJ3RhYmluZGV4JyBhdHRyaWJ1dGUgaXNuJ3Qgc3BlY2lmaWVkIGluIHRoZSBET00sXG4gICAgLy8geWV0IHRoZXkgYXJlIHN0aWxsIHBhcnQgb2YgdGhlIHJlZ3VsYXIgdGFiIG9yZGVyOyBpbiBGRiwgdGhleSBnZXQgYSBkZWZhdWx0XG4gICAgLy8gYHRhYkluZGV4YCBvZiAwOyBzaW5jZSBDaHJvbWUgc3RpbGwgcHV0cyB0aG9zZSBlbGVtZW50cyBpbiB0aGUgcmVndWxhciB0YWJcbiAgICAvLyBvcmRlciwgY29uc2lkZXIgdGhlaXIgdGFiIGluZGV4IHRvIGJlIDAuXG4gICAgLy8gQWxzbyBicm93c2VycyBkbyBub3QgcmV0dXJuIGB0YWJJbmRleGAgY29ycmVjdGx5IGZvciBjb250ZW50RWRpdGFibGUgbm9kZXM7XG4gICAgLy8gc28gaWYgdGhleSBkb24ndCBoYXZlIGEgdGFiaW5kZXggYXR0cmlidXRlIHNwZWNpZmljYWxseSBzZXQsIGFzc3VtZSBpdCdzIDAuXG4gICAgLy9cbiAgICAvLyBpc1Njb3BlIGlzIHBvc2l0aXZlIGZvciBjdXN0b20gZWxlbWVudCB3aXRoIHNoYWRvdyByb290IG9yIHNsb3QgdGhhdCBieSBkZWZhdWx0XG4gICAgLy8gaGF2ZSB0YWJJbmRleCAtMSwgYnV0IG5lZWQgdG8gYmUgc29ydGVkIGJ5IGRvY3VtZW50IG9yZGVyIGluIG9yZGVyIGZvciB0aGVpclxuICAgIC8vIGNvbnRlbnQgdG8gYmUgaW5zZXJ0ZWQgaW4gdGhlIGNvcnJlY3QgcG9zaXRpb25cbiAgICBpZiAoKGlzU2NvcGUgfHwgL14oQVVESU98VklERU98REVUQUlMUykkLy50ZXN0KG5vZGUudGFnTmFtZSkgfHwgbm9kZS5pc0NvbnRlbnRFZGl0YWJsZSkgJiYgaXNOYU4ocGFyc2VJbnQobm9kZS5nZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JyksIDEwKSkpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBub2RlLnRhYkluZGV4O1xufTtcblxudmFyIHNvcnRPcmRlcmVkVGFiYmFibGVzID0gZnVuY3Rpb24gc29ydE9yZGVyZWRUYWJiYWJsZXMoYSwgYikge1xuICByZXR1cm4gYS50YWJJbmRleCA9PT0gYi50YWJJbmRleCA/IGEuZG9jdW1lbnRPcmRlciAtIGIuZG9jdW1lbnRPcmRlciA6IGEudGFiSW5kZXggLSBiLnRhYkluZGV4O1xufTtcblxudmFyIGlzSW5wdXQgPSBmdW5jdGlvbiBpc0lucHV0KG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUudGFnTmFtZSA9PT0gJ0lOUFVUJztcbn07XG5cbnZhciBpc0hpZGRlbklucHV0ID0gZnVuY3Rpb24gaXNIaWRkZW5JbnB1dChub2RlKSB7XG4gIHJldHVybiBpc0lucHV0KG5vZGUpICYmIG5vZGUudHlwZSA9PT0gJ2hpZGRlbic7XG59O1xuXG52YXIgaXNEZXRhaWxzV2l0aFN1bW1hcnkgPSBmdW5jdGlvbiBpc0RldGFpbHNXaXRoU3VtbWFyeShub2RlKSB7XG4gIHZhciByID0gbm9kZS50YWdOYW1lID09PSAnREVUQUlMUycgJiYgQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KG5vZGUuY2hpbGRyZW4pLnNvbWUoZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgcmV0dXJuIGNoaWxkLnRhZ05hbWUgPT09ICdTVU1NQVJZJztcbiAgfSk7XG4gIHJldHVybiByO1xufTtcblxudmFyIGdldENoZWNrZWRSYWRpbyA9IGZ1bmN0aW9uIGdldENoZWNrZWRSYWRpbyhub2RlcywgZm9ybSkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKG5vZGVzW2ldLmNoZWNrZWQgJiYgbm9kZXNbaV0uZm9ybSA9PT0gZm9ybSkge1xuICAgICAgcmV0dXJuIG5vZGVzW2ldO1xuICAgIH1cbiAgfVxufTtcblxudmFyIGlzVGFiYmFibGVSYWRpbyA9IGZ1bmN0aW9uIGlzVGFiYmFibGVSYWRpbyhub2RlKSB7XG4gIGlmICghbm9kZS5uYW1lKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICB2YXIgcmFkaW9TY29wZSA9IG5vZGUuZm9ybSB8fCBnZXRSb290Tm9kZShub2RlKTtcblxuICB2YXIgcXVlcnlSYWRpb3MgPSBmdW5jdGlvbiBxdWVyeVJhZGlvcyhuYW1lKSB7XG4gICAgcmV0dXJuIHJhZGlvU2NvcGUucXVlcnlTZWxlY3RvckFsbCgnaW5wdXRbdHlwZT1cInJhZGlvXCJdW25hbWU9XCInICsgbmFtZSArICdcIl0nKTtcbiAgfTtcblxuICB2YXIgcmFkaW9TZXQ7XG5cbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuQ1NTICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LkNTUy5lc2NhcGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICByYWRpb1NldCA9IHF1ZXJ5UmFkaW9zKHdpbmRvdy5DU1MuZXNjYXBlKG5vZGUubmFtZSkpO1xuICB9IGVsc2Uge1xuICAgIHRyeSB7XG4gICAgICByYWRpb1NldCA9IHF1ZXJ5UmFkaW9zKG5vZGUubmFtZSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS5lcnJvcignTG9va3MgbGlrZSB5b3UgaGF2ZSBhIHJhZGlvIGJ1dHRvbiB3aXRoIGEgbmFtZSBhdHRyaWJ1dGUgY29udGFpbmluZyBpbnZhbGlkIENTUyBzZWxlY3RvciBjaGFyYWN0ZXJzIGFuZCBuZWVkIHRoZSBDU1MuZXNjYXBlIHBvbHlmaWxsOiAlcycsIGVyci5tZXNzYWdlKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICB2YXIgY2hlY2tlZCA9IGdldENoZWNrZWRSYWRpbyhyYWRpb1NldCwgbm9kZS5mb3JtKTtcbiAgcmV0dXJuICFjaGVja2VkIHx8IGNoZWNrZWQgPT09IG5vZGU7XG59O1xuXG52YXIgaXNSYWRpbyA9IGZ1bmN0aW9uIGlzUmFkaW8obm9kZSkge1xuICByZXR1cm4gaXNJbnB1dChub2RlKSAmJiBub2RlLnR5cGUgPT09ICdyYWRpbyc7XG59O1xuXG52YXIgaXNOb25UYWJiYWJsZVJhZGlvID0gZnVuY3Rpb24gaXNOb25UYWJiYWJsZVJhZGlvKG5vZGUpIHtcbiAgcmV0dXJuIGlzUmFkaW8obm9kZSkgJiYgIWlzVGFiYmFibGVSYWRpbyhub2RlKTtcbn07XG5cbnZhciBpc1plcm9BcmVhID0gZnVuY3Rpb24gaXNaZXJvQXJlYShub2RlKSB7XG4gIHZhciBfbm9kZSRnZXRCb3VuZGluZ0NsaWUgPSBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgd2lkdGggPSBfbm9kZSRnZXRCb3VuZGluZ0NsaWUud2lkdGgsXG4gICAgICBoZWlnaHQgPSBfbm9kZSRnZXRCb3VuZGluZ0NsaWUuaGVpZ2h0O1xuXG4gIHJldHVybiB3aWR0aCA9PT0gMCAmJiBoZWlnaHQgPT09IDA7XG59O1xuXG52YXIgaXNIaWRkZW4gPSBmdW5jdGlvbiBpc0hpZGRlbihub2RlLCBfcmVmKSB7XG4gIHZhciBkaXNwbGF5Q2hlY2sgPSBfcmVmLmRpc3BsYXlDaGVjayxcbiAgICAgIGdldFNoYWRvd1Jvb3QgPSBfcmVmLmdldFNoYWRvd1Jvb3Q7XG5cbiAgLy8gTk9URTogdmlzaWJpbGl0eSB3aWxsIGJlIGB1bmRlZmluZWRgIGlmIG5vZGUgaXMgZGV0YWNoZWQgZnJvbSB0aGUgZG9jdW1lbnRcbiAgLy8gIChzZWUgbm90ZXMgYWJvdXQgdGhpcyBmdXJ0aGVyIGRvd24pLCB3aGljaCBtZWFucyB3ZSB3aWxsIGNvbnNpZGVyIGl0IHZpc2libGVcbiAgLy8gICh0aGlzIGlzIGxlZ2FjeSBiZWhhdmlvciBmcm9tIGEgdmVyeSBsb25nIHdheSBiYWNrKVxuICAvLyBOT1RFOiB3ZSBjaGVjayB0aGlzIHJlZ2FyZGxlc3Mgb2YgYGRpc3BsYXlDaGVjaz1cIm5vbmVcImAgYmVjYXVzZSB0aGlzIGlzIGFcbiAgLy8gIF92aXNpYmlsaXR5XyBjaGVjaywgbm90IGEgX2Rpc3BsYXlfIGNoZWNrXG4gIGlmIChnZXRDb21wdXRlZFN0eWxlKG5vZGUpLnZpc2liaWxpdHkgPT09ICdoaWRkZW4nKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICB2YXIgaXNEaXJlY3RTdW1tYXJ5ID0gbWF0Y2hlcy5jYWxsKG5vZGUsICdkZXRhaWxzPnN1bW1hcnk6Zmlyc3Qtb2YtdHlwZScpO1xuICB2YXIgbm9kZVVuZGVyRGV0YWlscyA9IGlzRGlyZWN0U3VtbWFyeSA/IG5vZGUucGFyZW50RWxlbWVudCA6IG5vZGU7XG5cbiAgaWYgKG1hdGNoZXMuY2FsbChub2RlVW5kZXJEZXRhaWxzLCAnZGV0YWlsczpub3QoW29wZW5dKSAqJykpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSAvLyBUaGUgcm9vdCBub2RlIGlzIHRoZSBzaGFkb3cgcm9vdCBpZiB0aGUgbm9kZSBpcyBpbiBhIHNoYWRvdyBET007IHNvbWUgZG9jdW1lbnQgb3RoZXJ3aXNlXG4gIC8vICAoYnV0IE5PVCBfdGhlXyBkb2N1bWVudDsgc2VlIHNlY29uZCAnSWYnIGNvbW1lbnQgYmVsb3cgZm9yIG1vcmUpLlxuICAvLyBJZiByb290Tm9kZSBpcyBzaGFkb3cgcm9vdCwgaXQnbGwgaGF2ZSBhIGhvc3QsIHdoaWNoIGlzIHRoZSBlbGVtZW50IHRvIHdoaWNoIHRoZSBzaGFkb3dcbiAgLy8gIGlzIGF0dGFjaGVkLCBhbmQgdGhlIG9uZSB3ZSBuZWVkIHRvIGNoZWNrIGlmIGl0J3MgaW4gdGhlIGRvY3VtZW50IG9yIG5vdCAoYmVjYXVzZSB0aGVcbiAgLy8gIHNoYWRvdywgYW5kIGFsbCBub2RlcyBpdCBjb250YWlucywgaXMgbmV2ZXIgY29uc2lkZXJlZCBpbiB0aGUgZG9jdW1lbnQgc2luY2Ugc2hhZG93c1xuICAvLyAgYmVoYXZlIGxpa2Ugc2VsZi1jb250YWluZWQgRE9NczsgYnV0IGlmIHRoZSBzaGFkb3cncyBIT1NULCB3aGljaCBpcyBwYXJ0IG9mIHRoZSBkb2N1bWVudCxcbiAgLy8gIGlzIGhpZGRlbiwgb3IgaXMgbm90IGluIHRoZSBkb2N1bWVudCBpdHNlbGYgYnV0IGlzIGRldGFjaGVkLCBpdCB3aWxsIGFmZmVjdCB0aGUgc2hhZG93J3NcbiAgLy8gIHZpc2liaWxpdHksIGluY2x1ZGluZyBhbGwgdGhlIG5vZGVzIGl0IGNvbnRhaW5zKS4gVGhlIGhvc3QgY291bGQgYmUgYW55IG5vcm1hbCBub2RlLFxuICAvLyAgb3IgYSBjdXN0b20gZWxlbWVudCAoaS5lLiB3ZWIgY29tcG9uZW50KS4gRWl0aGVyIHdheSwgdGhhdCdzIHRoZSBvbmUgdGhhdCBpcyBjb25zaWRlcmVkXG4gIC8vICBwYXJ0IG9mIHRoZSBkb2N1bWVudCwgbm90IHRoZSBzaGFkb3cgcm9vdCwgbm9yIGFueSBvZiBpdHMgY2hpbGRyZW4gKGkuZS4gdGhlIG5vZGUgYmVpbmdcbiAgLy8gIHRlc3RlZCkuXG4gIC8vIElmIHJvb3ROb2RlIGlzIG5vdCBhIHNoYWRvdyByb290LCBpdCB3b24ndCBoYXZlIGEgaG9zdCwgYW5kIHNvIHJvb3ROb2RlIHNob3VsZCBiZSB0aGVcbiAgLy8gIGRvY3VtZW50IChwZXIgdGhlIGRvY3MpIGFuZCB3aGlsZSBpdCdzIGEgRG9jdW1lbnQtdHlwZSBvYmplY3QsIHRoYXQgZG9jdW1lbnQgZG9lcyBub3RcbiAgLy8gIGFwcGVhciB0byBiZSB0aGUgc2FtZSBhcyB0aGUgbm9kZSdzIGBvd25lckRvY3VtZW50YCBmb3Igc29tZSByZWFzb24sIHNvIGl0J3Mgc2FmZXJcbiAgLy8gIHRvIGlnbm9yZSB0aGUgcm9vdE5vZGUgYXQgdGhpcyBwb2ludCwgYW5kIHVzZSBgbm9kZS5vd25lckRvY3VtZW50YC4gT3RoZXJ3aXNlLFxuICAvLyAgdXNpbmcgYHJvb3ROb2RlLmNvbnRhaW5zKG5vZGUpYCB3aWxsIF9hbHdheXNfIGJlIHRydWUgd2UnbGwgZ2V0IGZhbHNlLXBvc2l0aXZlcyB3aGVuXG4gIC8vICBub2RlIGlzIGFjdHVhbGx5IGRldGFjaGVkLlxuXG5cbiAgdmFyIG5vZGVSb290SG9zdCA9IGdldFJvb3ROb2RlKG5vZGUpLmhvc3Q7XG4gIHZhciBub2RlSXNBdHRhY2hlZCA9IChub2RlUm9vdEhvc3QgPT09IG51bGwgfHwgbm9kZVJvb3RIb3N0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBub2RlUm9vdEhvc3Qub3duZXJEb2N1bWVudC5jb250YWlucyhub2RlUm9vdEhvc3QpKSB8fCBub2RlLm93bmVyRG9jdW1lbnQuY29udGFpbnMobm9kZSk7XG5cbiAgaWYgKCFkaXNwbGF5Q2hlY2sgfHwgZGlzcGxheUNoZWNrID09PSAnZnVsbCcpIHtcbiAgICBpZiAodHlwZW9mIGdldFNoYWRvd1Jvb3QgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIC8vIGZpZ3VyZSBvdXQgaWYgd2Ugc2hvdWxkIGNvbnNpZGVyIHRoZSBub2RlIHRvIGJlIGluIGFuIHVuZGlzY2xvc2VkIHNoYWRvdyBhbmQgdXNlIHRoZVxuICAgICAgLy8gICdub24temVyby1hcmVhJyBmYWxsYmFja1xuICAgICAgdmFyIG9yaWdpbmFsTm9kZSA9IG5vZGU7XG5cbiAgICAgIHdoaWxlIChub2RlKSB7XG4gICAgICAgIHZhciBwYXJlbnRFbGVtZW50ID0gbm9kZS5wYXJlbnRFbGVtZW50O1xuICAgICAgICB2YXIgcm9vdE5vZGUgPSBnZXRSb290Tm9kZShub2RlKTtcblxuICAgICAgICBpZiAocGFyZW50RWxlbWVudCAmJiAhcGFyZW50RWxlbWVudC5zaGFkb3dSb290ICYmIGdldFNoYWRvd1Jvb3QocGFyZW50RWxlbWVudCkgPT09IHRydWUgLy8gY2hlY2sgaWYgdGhlcmUncyBhbiB1bmRpc2Nsb3NlZCBzaGFkb3dcbiAgICAgICAgKSB7XG4gICAgICAgICAgLy8gbm9kZSBoYXMgYW4gdW5kaXNjbG9zZWQgc2hhZG93IHdoaWNoIG1lYW5zIHdlIGNhbiBvbmx5IHRyZWF0IGl0IGFzIGEgYmxhY2sgYm94LCBzbyB3ZVxuICAgICAgICAgIC8vICBmYWxsIGJhY2sgdG8gYSBub24temVyby1hcmVhIHRlc3RcbiAgICAgICAgICByZXR1cm4gaXNaZXJvQXJlYShub2RlKTtcbiAgICAgICAgfSBlbHNlIGlmIChub2RlLmFzc2lnbmVkU2xvdCkge1xuICAgICAgICAgIC8vIGl0ZXJhdGUgdXAgc2xvdFxuICAgICAgICAgIG5vZGUgPSBub2RlLmFzc2lnbmVkU2xvdDtcbiAgICAgICAgfSBlbHNlIGlmICghcGFyZW50RWxlbWVudCAmJiByb290Tm9kZSAhPT0gbm9kZS5vd25lckRvY3VtZW50KSB7XG4gICAgICAgICAgLy8gY3Jvc3Mgc2hhZG93IGJvdW5kYXJ5XG4gICAgICAgICAgbm9kZSA9IHJvb3ROb2RlLmhvc3Q7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gaXRlcmF0ZSB1cCBub3JtYWwgZG9tXG4gICAgICAgICAgbm9kZSA9IHBhcmVudEVsZW1lbnQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbm9kZSA9IG9yaWdpbmFsTm9kZTtcbiAgICB9IC8vIGVsc2UsIGBnZXRTaGFkb3dSb290YCBtaWdodCBiZSB0cnVlLCBidXQgYWxsIHRoYXQgZG9lcyBpcyBlbmFibGUgc2hhZG93IERPTSBzdXBwb3J0XG4gICAgLy8gIChpLmUuIGl0IGRvZXMgbm90IGFsc28gcHJlc3VtZSB0aGF0IGFsbCBub2RlcyBtaWdodCBoYXZlIHVuZGlzY2xvc2VkIHNoYWRvd3MpOyBvclxuICAgIC8vICBpdCBtaWdodCBiZSBhIGZhbHN5IHZhbHVlLCB3aGljaCBtZWFucyBzaGFkb3cgRE9NIHN1cHBvcnQgaXMgZGlzYWJsZWRcbiAgICAvLyBTaW5jZSB3ZSBkaWRuJ3QgZmluZCBpdCBzaXR0aW5nIGluIGFuIHVuZGlzY2xvc2VkIHNoYWRvdyAob3Igc2hhZG93cyBhcmUgZGlzYWJsZWQpXG4gICAgLy8gIG5vdyB3ZSBjYW4ganVzdCB0ZXN0IHRvIHNlZSBpZiBpdCB3b3VsZCBub3JtYWxseSBiZSB2aXNpYmxlIG9yIG5vdCwgcHJvdmlkZWQgaXQnc1xuICAgIC8vICBhdHRhY2hlZCB0byB0aGUgbWFpbiBkb2N1bWVudC5cbiAgICAvLyBOT1RFOiBXZSBtdXN0IGNvbnNpZGVyIGNhc2Ugd2hlcmUgbm9kZSBpcyBpbnNpZGUgYSBzaGFkb3cgRE9NIGFuZCBnaXZlbiBkaXJlY3RseSB0b1xuICAgIC8vICBgaXNUYWJiYWJsZSgpYCBvciBgaXNGb2N1c2FibGUoKWAgLS0gcmVnYXJkbGVzcyBvZiBgZ2V0U2hhZG93Um9vdGAgb3B0aW9uIHNldHRpbmcuXG5cblxuICAgIGlmIChub2RlSXNBdHRhY2hlZCkge1xuICAgICAgLy8gdGhpcyB3b3JrcyB3aGVyZXZlciB0aGUgbm9kZSBpczogaWYgdGhlcmUncyBhdCBsZWFzdCBvbmUgY2xpZW50IHJlY3QsIGl0J3NcbiAgICAgIC8vICBzb21laG93IGRpc3BsYXllZDsgaXQgYWxzbyBjb3ZlcnMgdGhlIENTUyAnZGlzcGxheTogY29udGVudHMnIGNhc2Ugd2hlcmUgdGhlXG4gICAgICAvLyAgbm9kZSBpdHNlbGYgaXMgaGlkZGVuIGluIHBsYWNlIG9mIGl0cyBjb250ZW50czsgYW5kIHRoZXJlJ3Mgbm8gbmVlZCB0byBzZWFyY2hcbiAgICAgIC8vICB1cCB0aGUgaGllcmFyY2h5IGVpdGhlclxuICAgICAgcmV0dXJuICFub2RlLmdldENsaWVudFJlY3RzKCkubGVuZ3RoO1xuICAgIH0gLy8gRWxzZSwgdGhlIG5vZGUgaXNuJ3QgYXR0YWNoZWQgdG8gdGhlIGRvY3VtZW50LCB3aGljaCBtZWFucyB0aGUgYGdldENsaWVudFJlY3RzKClgXG4gICAgLy8gIEFQSSB3aWxsIF9fYWx3YXlzX18gcmV0dXJuIHplcm8gcmVjdHMgKHRoaXMgY2FuIGhhcHBlbiwgZm9yIGV4YW1wbGUsIGlmIFJlYWN0XG4gICAgLy8gIGlzIHVzZWQgdG8gcmVuZGVyIG5vZGVzIG9udG8gYSBkZXRhY2hlZCB0cmVlLCBhcyBjb25maXJtZWQgaW4gdGhpcyB0aHJlYWQ6XG4gICAgLy8gIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvOTExNyNpc3N1ZWNvbW1lbnQtMjg0MjI4ODcwKVxuICAgIC8vXG4gICAgLy8gSXQgYWxzbyBtZWFucyB0aGF0IGV2ZW4gd2luZG93LmdldENvbXB1dGVkU3R5bGUobm9kZSkuZGlzcGxheSB3aWxsIHJldHVybiBgdW5kZWZpbmVkYFxuICAgIC8vICBiZWNhdXNlIHN0eWxlcyBhcmUgb25seSBjb21wdXRlZCBmb3Igbm9kZXMgdGhhdCBhcmUgaW4gdGhlIGRvY3VtZW50LlxuICAgIC8vXG4gICAgLy8gTk9URTogVEhJUyBIQVMgQkVFTiBUSEUgQ0FTRSBGT1IgWUVBUlMuIEl0IGlzIG5vdCBuZXcsIG5vciBpcyBpdCBjYXVzZWQgYnkgdGFiYmFibGVcbiAgICAvLyAgc29tZWhvdy4gVGhvdWdoIGl0IHdhcyBuZXZlciBzdGF0ZWQgb2ZmaWNpYWxseSwgYW55b25lIHdobyBoYXMgZXZlciB1c2VkIHRhYmJhYmxlXG4gICAgLy8gIEFQSXMgb24gbm9kZXMgaW4gZGV0YWNoZWQgY29udGFpbmVycyBoYXMgYWN0dWFsbHkgaW1wbGljaXRseSB1c2VkIHRhYmJhYmxlIGluIHdoYXRcbiAgICAvLyAgd2FzIGxhdGVyIChhcyBvZiB2NS4yLjAgb24gQXByIDksIDIwMjEpIGNhbGxlZCBgZGlzcGxheUNoZWNrPVwibm9uZVwiYCBtb2RlIC0tIGVzc2VudGlhbGx5XG4gICAgLy8gIGNvbnNpZGVyaW5nIF9fZXZlcnl0aGluZ19fIHRvIGJlIHZpc2libGUgYmVjYXVzZSBvZiB0aGUgaW5uYWJpbGl0eSB0byBkZXRlcm1pbmUgc3R5bGVzLlxuXG4gIH0gZWxzZSBpZiAoZGlzcGxheUNoZWNrID09PSAnbm9uLXplcm8tYXJlYScpIHtcbiAgICAvLyBOT1RFOiBFdmVuIHRob3VnaCB0aGlzIHRlc3RzIHRoYXQgdGhlIG5vZGUncyBjbGllbnQgcmVjdCBpcyBub24temVybyB0byBkZXRlcm1pbmVcbiAgICAvLyAgd2hldGhlciBpdCdzIGRpc3BsYXllZCwgYW5kIHRoYXQgYSBkZXRhY2hlZCBub2RlIHdpbGwgX19hbHdheXNfXyBoYXZlIGEgemVyby1hcmVhXG4gICAgLy8gIGNsaWVudCByZWN0LCB3ZSBkb24ndCBzcGVjaWFsLWNhc2UgZm9yIHdoZXRoZXIgdGhlIG5vZGUgaXMgYXR0YWNoZWQgb3Igbm90LiBJblxuICAgIC8vICB0aGlzIG1vZGUsIHdlIGRvIHdhbnQgdG8gY29uc2lkZXIgbm9kZXMgdGhhdCBoYXZlIGEgemVybyBhcmVhIHRvIGJlIGhpZGRlbiBhdCBhbGxcbiAgICAvLyAgdGltZXMsIGFuZCB0aGF0IGluY2x1ZGVzIGF0dGFjaGVkIG9yIG5vdC5cbiAgICByZXR1cm4gaXNaZXJvQXJlYShub2RlKTtcbiAgfSAvLyB2aXNpYmxlLCBhcyBmYXIgYXMgd2UgY2FuIHRlbGwsIG9yIHBlciBjdXJyZW50IGBkaXNwbGF5Q2hlY2tgIG1vZGVcblxuXG4gIHJldHVybiBmYWxzZTtcbn07IC8vIGZvcm0gZmllbGRzIChuZXN0ZWQpIGluc2lkZSBhIGRpc2FibGVkIGZpZWxkc2V0IGFyZSBub3QgZm9jdXNhYmxlL3RhYmJhYmxlXG4vLyAgdW5sZXNzIHRoZXkgYXJlIGluIHRoZSBfZmlyc3RfIDxsZWdlbmQ+IGVsZW1lbnQgb2YgdGhlIHRvcC1tb3N0IGRpc2FibGVkXG4vLyAgZmllbGRzZXRcblxuXG52YXIgaXNEaXNhYmxlZEZyb21GaWVsZHNldCA9IGZ1bmN0aW9uIGlzRGlzYWJsZWRGcm9tRmllbGRzZXQobm9kZSkge1xuICBpZiAoL14oSU5QVVR8QlVUVE9OfFNFTEVDVHxURVhUQVJFQSkkLy50ZXN0KG5vZGUudGFnTmFtZSkpIHtcbiAgICB2YXIgcGFyZW50Tm9kZSA9IG5vZGUucGFyZW50RWxlbWVudDsgLy8gY2hlY2sgaWYgYG5vZGVgIGlzIGNvbnRhaW5lZCBpbiBhIGRpc2FibGVkIDxmaWVsZHNldD5cblxuICAgIHdoaWxlIChwYXJlbnROb2RlKSB7XG4gICAgICBpZiAocGFyZW50Tm9kZS50YWdOYW1lID09PSAnRklFTERTRVQnICYmIHBhcmVudE5vZGUuZGlzYWJsZWQpIHtcbiAgICAgICAgLy8gbG9vayBmb3IgdGhlIGZpcnN0IDxsZWdlbmQ+IGFtb25nIHRoZSBjaGlsZHJlbiBvZiB0aGUgZGlzYWJsZWQgPGZpZWxkc2V0PlxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcmVudE5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YXIgY2hpbGQgPSBwYXJlbnROb2RlLmNoaWxkcmVuLml0ZW0oaSk7IC8vIHdoZW4gdGhlIGZpcnN0IDxsZWdlbmQ+IChpbiBkb2N1bWVudCBvcmRlcikgaXMgZm91bmRcblxuICAgICAgICAgIGlmIChjaGlsZC50YWdOYW1lID09PSAnTEVHRU5EJykge1xuICAgICAgICAgICAgLy8gaWYgaXRzIHBhcmVudCA8ZmllbGRzZXQ+IGlzIG5vdCBuZXN0ZWQgaW4gYW5vdGhlciBkaXNhYmxlZCA8ZmllbGRzZXQ+LFxuICAgICAgICAgICAgLy8gcmV0dXJuIHdoZXRoZXIgYG5vZGVgIGlzIGEgZGVzY2VuZGFudCBvZiBpdHMgZmlyc3QgPGxlZ2VuZD5cbiAgICAgICAgICAgIHJldHVybiBtYXRjaGVzLmNhbGwocGFyZW50Tm9kZSwgJ2ZpZWxkc2V0W2Rpc2FibGVkXSAqJykgPyB0cnVlIDogIWNoaWxkLmNvbnRhaW5zKG5vZGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSAvLyB0aGUgZGlzYWJsZWQgPGZpZWxkc2V0PiBjb250YWluaW5nIGBub2RlYCBoYXMgbm8gPGxlZ2VuZD5cblxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICBwYXJlbnROb2RlID0gcGFyZW50Tm9kZS5wYXJlbnRFbGVtZW50O1xuICAgIH1cbiAgfSAvLyBlbHNlLCBub2RlJ3MgdGFiYmFibGUvZm9jdXNhYmxlIHN0YXRlIHNob3VsZCBub3QgYmUgYWZmZWN0ZWQgYnkgYSBmaWVsZHNldCdzXG4gIC8vICBlbmFibGVkL2Rpc2FibGVkIHN0YXRlXG5cblxuICByZXR1cm4gZmFsc2U7XG59O1xuXG52YXIgaXNOb2RlTWF0Y2hpbmdTZWxlY3RvckZvY3VzYWJsZSA9IGZ1bmN0aW9uIGlzTm9kZU1hdGNoaW5nU2VsZWN0b3JGb2N1c2FibGUob3B0aW9ucywgbm9kZSkge1xuICBpZiAobm9kZS5kaXNhYmxlZCB8fCBpc0hpZGRlbklucHV0KG5vZGUpIHx8IGlzSGlkZGVuKG5vZGUsIG9wdGlvbnMpIHx8IC8vIEZvciBhIGRldGFpbHMgZWxlbWVudCB3aXRoIGEgc3VtbWFyeSwgdGhlIHN1bW1hcnkgZWxlbWVudCBnZXRzIHRoZSBmb2N1c1xuICBpc0RldGFpbHNXaXRoU3VtbWFyeShub2RlKSB8fCBpc0Rpc2FibGVkRnJvbUZpZWxkc2V0KG5vZGUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG52YXIgaXNOb2RlTWF0Y2hpbmdTZWxlY3RvclRhYmJhYmxlID0gZnVuY3Rpb24gaXNOb2RlTWF0Y2hpbmdTZWxlY3RvclRhYmJhYmxlKG9wdGlvbnMsIG5vZGUpIHtcbiAgaWYgKGlzTm9uVGFiYmFibGVSYWRpbyhub2RlKSB8fCBnZXRUYWJpbmRleChub2RlKSA8IDAgfHwgIWlzTm9kZU1hdGNoaW5nU2VsZWN0b3JGb2N1c2FibGUob3B0aW9ucywgbm9kZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbnZhciBpc1ZhbGlkU2hhZG93Um9vdFRhYmJhYmxlID0gZnVuY3Rpb24gaXNWYWxpZFNoYWRvd1Jvb3RUYWJiYWJsZShzaGFkb3dIb3N0Tm9kZSkge1xuICB2YXIgdGFiSW5kZXggPSBwYXJzZUludChzaGFkb3dIb3N0Tm9kZS5nZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JyksIDEwKTtcblxuICBpZiAoaXNOYU4odGFiSW5kZXgpIHx8IHRhYkluZGV4ID49IDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSAvLyBJZiBhIGN1c3RvbSBlbGVtZW50IGhhcyBhbiBleHBsaWNpdCBuZWdhdGl2ZSB0YWJpbmRleCxcbiAgLy8gYnJvd3NlcnMgd2lsbCBub3QgYWxsb3cgdGFiIHRhcmdldGluZyBzYWlkIGVsZW1lbnQncyBjaGlsZHJlbi5cblxuXG4gIHJldHVybiBmYWxzZTtcbn07XG4vKipcbiAqIEBwYXJhbSB7QXJyYXkuPEVsZW1lbnR8Q2FuZGlkYXRlc1Njb3BlPn0gY2FuZGlkYXRlc1xuICogQHJldHVybnMgRWxlbWVudFtdXG4gKi9cblxuXG52YXIgc29ydEJ5T3JkZXIgPSBmdW5jdGlvbiBzb3J0QnlPcmRlcihjYW5kaWRhdGVzKSB7XG4gIHZhciByZWd1bGFyVGFiYmFibGVzID0gW107XG4gIHZhciBvcmRlcmVkVGFiYmFibGVzID0gW107XG4gIGNhbmRpZGF0ZXMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSwgaSkge1xuICAgIHZhciBpc1Njb3BlID0gISFpdGVtLnNjb3BlO1xuICAgIHZhciBlbGVtZW50ID0gaXNTY29wZSA/IGl0ZW0uc2NvcGUgOiBpdGVtO1xuICAgIHZhciBjYW5kaWRhdGVUYWJpbmRleCA9IGdldFRhYmluZGV4KGVsZW1lbnQsIGlzU2NvcGUpO1xuICAgIHZhciBlbGVtZW50cyA9IGlzU2NvcGUgPyBzb3J0QnlPcmRlcihpdGVtLmNhbmRpZGF0ZXMpIDogZWxlbWVudDtcblxuICAgIGlmIChjYW5kaWRhdGVUYWJpbmRleCA9PT0gMCkge1xuICAgICAgaXNTY29wZSA/IHJlZ3VsYXJUYWJiYWJsZXMucHVzaC5hcHBseShyZWd1bGFyVGFiYmFibGVzLCBlbGVtZW50cykgOiByZWd1bGFyVGFiYmFibGVzLnB1c2goZWxlbWVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9yZGVyZWRUYWJiYWJsZXMucHVzaCh7XG4gICAgICAgIGRvY3VtZW50T3JkZXI6IGksXG4gICAgICAgIHRhYkluZGV4OiBjYW5kaWRhdGVUYWJpbmRleCxcbiAgICAgICAgaXRlbTogaXRlbSxcbiAgICAgICAgaXNTY29wZTogaXNTY29wZSxcbiAgICAgICAgY29udGVudDogZWxlbWVudHNcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvcmRlcmVkVGFiYmFibGVzLnNvcnQoc29ydE9yZGVyZWRUYWJiYWJsZXMpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBzb3J0YWJsZSkge1xuICAgIHNvcnRhYmxlLmlzU2NvcGUgPyBhY2MucHVzaC5hcHBseShhY2MsIHNvcnRhYmxlLmNvbnRlbnQpIDogYWNjLnB1c2goc29ydGFibGUuY29udGVudCk7XG4gICAgcmV0dXJuIGFjYztcbiAgfSwgW10pLmNvbmNhdChyZWd1bGFyVGFiYmFibGVzKTtcbn07XG5cbnZhciB0YWJiYWJsZSA9IGZ1bmN0aW9uIHRhYmJhYmxlKGVsLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgY2FuZGlkYXRlcztcblxuICBpZiAob3B0aW9ucy5nZXRTaGFkb3dSb290KSB7XG4gICAgY2FuZGlkYXRlcyA9IGdldENhbmRpZGF0ZXNJdGVyYXRpdmVseShbZWxdLCBvcHRpb25zLmluY2x1ZGVDb250YWluZXIsIHtcbiAgICAgIGZpbHRlcjogaXNOb2RlTWF0Y2hpbmdTZWxlY3RvclRhYmJhYmxlLmJpbmQobnVsbCwgb3B0aW9ucyksXG4gICAgICBmbGF0dGVuOiBmYWxzZSxcbiAgICAgIGdldFNoYWRvd1Jvb3Q6IG9wdGlvbnMuZ2V0U2hhZG93Um9vdCxcbiAgICAgIHNoYWRvd1Jvb3RGaWx0ZXI6IGlzVmFsaWRTaGFkb3dSb290VGFiYmFibGVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBjYW5kaWRhdGVzID0gZ2V0Q2FuZGlkYXRlcyhlbCwgb3B0aW9ucy5pbmNsdWRlQ29udGFpbmVyLCBpc05vZGVNYXRjaGluZ1NlbGVjdG9yVGFiYmFibGUuYmluZChudWxsLCBvcHRpb25zKSk7XG4gIH1cblxuICByZXR1cm4gc29ydEJ5T3JkZXIoY2FuZGlkYXRlcyk7XG59O1xuXG52YXIgZm9jdXNhYmxlID0gZnVuY3Rpb24gZm9jdXNhYmxlKGVsLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgY2FuZGlkYXRlcztcblxuICBpZiAob3B0aW9ucy5nZXRTaGFkb3dSb290KSB7XG4gICAgY2FuZGlkYXRlcyA9IGdldENhbmRpZGF0ZXNJdGVyYXRpdmVseShbZWxdLCBvcHRpb25zLmluY2x1ZGVDb250YWluZXIsIHtcbiAgICAgIGZpbHRlcjogaXNOb2RlTWF0Y2hpbmdTZWxlY3RvckZvY3VzYWJsZS5iaW5kKG51bGwsIG9wdGlvbnMpLFxuICAgICAgZmxhdHRlbjogdHJ1ZSxcbiAgICAgIGdldFNoYWRvd1Jvb3Q6IG9wdGlvbnMuZ2V0U2hhZG93Um9vdFxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGNhbmRpZGF0ZXMgPSBnZXRDYW5kaWRhdGVzKGVsLCBvcHRpb25zLmluY2x1ZGVDb250YWluZXIsIGlzTm9kZU1hdGNoaW5nU2VsZWN0b3JGb2N1c2FibGUuYmluZChudWxsLCBvcHRpb25zKSk7XG4gIH1cblxuICByZXR1cm4gY2FuZGlkYXRlcztcbn07XG5cbnZhciBpc1RhYmJhYmxlID0gZnVuY3Rpb24gaXNUYWJiYWJsZShub2RlLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIGlmICghbm9kZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignTm8gbm9kZSBwcm92aWRlZCcpO1xuICB9XG5cbiAgaWYgKG1hdGNoZXMuY2FsbChub2RlLCBjYW5kaWRhdGVTZWxlY3RvcikgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGlzTm9kZU1hdGNoaW5nU2VsZWN0b3JUYWJiYWJsZShvcHRpb25zLCBub2RlKTtcbn07XG5cbnZhciBmb2N1c2FibGVDYW5kaWRhdGVTZWxlY3RvciA9IC8qICNfX1BVUkVfXyAqL2NhbmRpZGF0ZVNlbGVjdG9ycy5jb25jYXQoJ2lmcmFtZScpLmpvaW4oJywnKTtcblxudmFyIGlzRm9jdXNhYmxlID0gZnVuY3Rpb24gaXNGb2N1c2FibGUobm9kZSwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICBpZiAoIW5vZGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIG5vZGUgcHJvdmlkZWQnKTtcbiAgfVxuXG4gIGlmIChtYXRjaGVzLmNhbGwobm9kZSwgZm9jdXNhYmxlQ2FuZGlkYXRlU2VsZWN0b3IpID09PSBmYWxzZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBpc05vZGVNYXRjaGluZ1NlbGVjdG9yRm9jdXNhYmxlKG9wdGlvbnMsIG5vZGUpO1xufTtcblxuZXhwb3J0IHsgZm9jdXNhYmxlLCBpc0ZvY3VzYWJsZSwgaXNUYWJiYWJsZSwgdGFiYmFibGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmVzbS5qcy5tYXBcbiIsIi8qISBodHRwczovL210aHMuYmUvcHVueWNvZGUgdjEuNC4xIGJ5IEBtYXRoaWFzICovXG47KGZ1bmN0aW9uKHJvb3QpIHtcblxuXHQvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGVzICovXG5cdHZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiZcblx0XHQhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXHR2YXIgZnJlZU1vZHVsZSA9IHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmXG5cdFx0IW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cdHZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWw7XG5cdGlmIChcblx0XHRmcmVlR2xvYmFsLmdsb2JhbCA9PT0gZnJlZUdsb2JhbCB8fFxuXHRcdGZyZWVHbG9iYWwud2luZG93ID09PSBmcmVlR2xvYmFsIHx8XG5cdFx0ZnJlZUdsb2JhbC5zZWxmID09PSBmcmVlR2xvYmFsXG5cdCkge1xuXHRcdHJvb3QgPSBmcmVlR2xvYmFsO1xuXHR9XG5cblx0LyoqXG5cdCAqIFRoZSBgcHVueWNvZGVgIG9iamVjdC5cblx0ICogQG5hbWUgcHVueWNvZGVcblx0ICogQHR5cGUgT2JqZWN0XG5cdCAqL1xuXHR2YXIgcHVueWNvZGUsXG5cblx0LyoqIEhpZ2hlc3QgcG9zaXRpdmUgc2lnbmVkIDMyLWJpdCBmbG9hdCB2YWx1ZSAqL1xuXHRtYXhJbnQgPSAyMTQ3NDgzNjQ3LCAvLyBha2EuIDB4N0ZGRkZGRkYgb3IgMl4zMS0xXG5cblx0LyoqIEJvb3RzdHJpbmcgcGFyYW1ldGVycyAqL1xuXHRiYXNlID0gMzYsXG5cdHRNaW4gPSAxLFxuXHR0TWF4ID0gMjYsXG5cdHNrZXcgPSAzOCxcblx0ZGFtcCA9IDcwMCxcblx0aW5pdGlhbEJpYXMgPSA3Mixcblx0aW5pdGlhbE4gPSAxMjgsIC8vIDB4ODBcblx0ZGVsaW1pdGVyID0gJy0nLCAvLyAnXFx4MkQnXG5cblx0LyoqIFJlZ3VsYXIgZXhwcmVzc2lvbnMgKi9cblx0cmVnZXhQdW55Y29kZSA9IC9eeG4tLS8sXG5cdHJlZ2V4Tm9uQVNDSUkgPSAvW15cXHgyMC1cXHg3RV0vLCAvLyB1bnByaW50YWJsZSBBU0NJSSBjaGFycyArIG5vbi1BU0NJSSBjaGFyc1xuXHRyZWdleFNlcGFyYXRvcnMgPSAvW1xceDJFXFx1MzAwMlxcdUZGMEVcXHVGRjYxXS9nLCAvLyBSRkMgMzQ5MCBzZXBhcmF0b3JzXG5cblx0LyoqIEVycm9yIG1lc3NhZ2VzICovXG5cdGVycm9ycyA9IHtcblx0XHQnb3ZlcmZsb3cnOiAnT3ZlcmZsb3c6IGlucHV0IG5lZWRzIHdpZGVyIGludGVnZXJzIHRvIHByb2Nlc3MnLFxuXHRcdCdub3QtYmFzaWMnOiAnSWxsZWdhbCBpbnB1dCA+PSAweDgwIChub3QgYSBiYXNpYyBjb2RlIHBvaW50KScsXG5cdFx0J2ludmFsaWQtaW5wdXQnOiAnSW52YWxpZCBpbnB1dCdcblx0fSxcblxuXHQvKiogQ29udmVuaWVuY2Ugc2hvcnRjdXRzICovXG5cdGJhc2VNaW51c1RNaW4gPSBiYXNlIC0gdE1pbixcblx0Zmxvb3IgPSBNYXRoLmZsb29yLFxuXHRzdHJpbmdGcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlLFxuXG5cdC8qKiBUZW1wb3JhcnkgdmFyaWFibGUgKi9cblx0a2V5O1xuXG5cdC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5cdC8qKlxuXHQgKiBBIGdlbmVyaWMgZXJyb3IgdXRpbGl0eSBmdW5jdGlvbi5cblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgVGhlIGVycm9yIHR5cGUuXG5cdCAqIEByZXR1cm5zIHtFcnJvcn0gVGhyb3dzIGEgYFJhbmdlRXJyb3JgIHdpdGggdGhlIGFwcGxpY2FibGUgZXJyb3IgbWVzc2FnZS5cblx0ICovXG5cdGZ1bmN0aW9uIGVycm9yKHR5cGUpIHtcblx0XHR0aHJvdyBuZXcgUmFuZ2VFcnJvcihlcnJvcnNbdHlwZV0pO1xuXHR9XG5cblx0LyoqXG5cdCAqIEEgZ2VuZXJpYyBgQXJyYXkjbWFwYCB1dGlsaXR5IGZ1bmN0aW9uLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdGhhdCBnZXRzIGNhbGxlZCBmb3IgZXZlcnkgYXJyYXlcblx0ICogaXRlbS5cblx0ICogQHJldHVybnMge0FycmF5fSBBIG5ldyBhcnJheSBvZiB2YWx1ZXMgcmV0dXJuZWQgYnkgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uLlxuXHQgKi9cblx0ZnVuY3Rpb24gbWFwKGFycmF5LCBmbikge1xuXHRcdHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cdFx0dmFyIHJlc3VsdCA9IFtdO1xuXHRcdHdoaWxlIChsZW5ndGgtLSkge1xuXHRcdFx0cmVzdWx0W2xlbmd0aF0gPSBmbihhcnJheVtsZW5ndGhdKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxuXG5cdC8qKlxuXHQgKiBBIHNpbXBsZSBgQXJyYXkjbWFwYC1saWtlIHdyYXBwZXIgdG8gd29yayB3aXRoIGRvbWFpbiBuYW1lIHN0cmluZ3Mgb3IgZW1haWxcblx0ICogYWRkcmVzc2VzLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gZG9tYWluIFRoZSBkb21haW4gbmFtZSBvciBlbWFpbCBhZGRyZXNzLlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdGhhdCBnZXRzIGNhbGxlZCBmb3IgZXZlcnlcblx0ICogY2hhcmFjdGVyLlxuXHQgKiBAcmV0dXJucyB7QXJyYXl9IEEgbmV3IHN0cmluZyBvZiBjaGFyYWN0ZXJzIHJldHVybmVkIGJ5IHRoZSBjYWxsYmFja1xuXHQgKiBmdW5jdGlvbi5cblx0ICovXG5cdGZ1bmN0aW9uIG1hcERvbWFpbihzdHJpbmcsIGZuKSB7XG5cdFx0dmFyIHBhcnRzID0gc3RyaW5nLnNwbGl0KCdAJyk7XG5cdFx0dmFyIHJlc3VsdCA9ICcnO1xuXHRcdGlmIChwYXJ0cy5sZW5ndGggPiAxKSB7XG5cdFx0XHQvLyBJbiBlbWFpbCBhZGRyZXNzZXMsIG9ubHkgdGhlIGRvbWFpbiBuYW1lIHNob3VsZCBiZSBwdW55Y29kZWQuIExlYXZlXG5cdFx0XHQvLyB0aGUgbG9jYWwgcGFydCAoaS5lLiBldmVyeXRoaW5nIHVwIHRvIGBAYCkgaW50YWN0LlxuXHRcdFx0cmVzdWx0ID0gcGFydHNbMF0gKyAnQCc7XG5cdFx0XHRzdHJpbmcgPSBwYXJ0c1sxXTtcblx0XHR9XG5cdFx0Ly8gQXZvaWQgYHNwbGl0KHJlZ2V4KWAgZm9yIElFOCBjb21wYXRpYmlsaXR5LiBTZWUgIzE3LlxuXHRcdHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKHJlZ2V4U2VwYXJhdG9ycywgJ1xceDJFJyk7XG5cdFx0dmFyIGxhYmVscyA9IHN0cmluZy5zcGxpdCgnLicpO1xuXHRcdHZhciBlbmNvZGVkID0gbWFwKGxhYmVscywgZm4pLmpvaW4oJy4nKTtcblx0XHRyZXR1cm4gcmVzdWx0ICsgZW5jb2RlZDtcblx0fVxuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIG51bWVyaWMgY29kZSBwb2ludHMgb2YgZWFjaCBVbmljb2RlXG5cdCAqIGNoYXJhY3RlciBpbiB0aGUgc3RyaW5nLiBXaGlsZSBKYXZhU2NyaXB0IHVzZXMgVUNTLTIgaW50ZXJuYWxseSxcblx0ICogdGhpcyBmdW5jdGlvbiB3aWxsIGNvbnZlcnQgYSBwYWlyIG9mIHN1cnJvZ2F0ZSBoYWx2ZXMgKGVhY2ggb2Ygd2hpY2hcblx0ICogVUNTLTIgZXhwb3NlcyBhcyBzZXBhcmF0ZSBjaGFyYWN0ZXJzKSBpbnRvIGEgc2luZ2xlIGNvZGUgcG9pbnQsXG5cdCAqIG1hdGNoaW5nIFVURi0xNi5cblx0ICogQHNlZSBgcHVueWNvZGUudWNzMi5lbmNvZGVgXG5cdCAqIEBzZWUgPGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LWVuY29kaW5nPlxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGUudWNzMlxuXHQgKiBAbmFtZSBkZWNvZGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IHN0cmluZyBUaGUgVW5pY29kZSBpbnB1dCBzdHJpbmcgKFVDUy0yKS5cblx0ICogQHJldHVybnMge0FycmF5fSBUaGUgbmV3IGFycmF5IG9mIGNvZGUgcG9pbnRzLlxuXHQgKi9cblx0ZnVuY3Rpb24gdWNzMmRlY29kZShzdHJpbmcpIHtcblx0XHR2YXIgb3V0cHV0ID0gW10sXG5cdFx0ICAgIGNvdW50ZXIgPSAwLFxuXHRcdCAgICBsZW5ndGggPSBzdHJpbmcubGVuZ3RoLFxuXHRcdCAgICB2YWx1ZSxcblx0XHQgICAgZXh0cmE7XG5cdFx0d2hpbGUgKGNvdW50ZXIgPCBsZW5ndGgpIHtcblx0XHRcdHZhbHVlID0gc3RyaW5nLmNoYXJDb2RlQXQoY291bnRlcisrKTtcblx0XHRcdGlmICh2YWx1ZSA+PSAweEQ4MDAgJiYgdmFsdWUgPD0gMHhEQkZGICYmIGNvdW50ZXIgPCBsZW5ndGgpIHtcblx0XHRcdFx0Ly8gaGlnaCBzdXJyb2dhdGUsIGFuZCB0aGVyZSBpcyBhIG5leHQgY2hhcmFjdGVyXG5cdFx0XHRcdGV4dHJhID0gc3RyaW5nLmNoYXJDb2RlQXQoY291bnRlcisrKTtcblx0XHRcdFx0aWYgKChleHRyYSAmIDB4RkMwMCkgPT0gMHhEQzAwKSB7IC8vIGxvdyBzdXJyb2dhdGVcblx0XHRcdFx0XHRvdXRwdXQucHVzaCgoKHZhbHVlICYgMHgzRkYpIDw8IDEwKSArIChleHRyYSAmIDB4M0ZGKSArIDB4MTAwMDApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC8vIHVubWF0Y2hlZCBzdXJyb2dhdGU7IG9ubHkgYXBwZW5kIHRoaXMgY29kZSB1bml0LCBpbiBjYXNlIHRoZSBuZXh0XG5cdFx0XHRcdFx0Ly8gY29kZSB1bml0IGlzIHRoZSBoaWdoIHN1cnJvZ2F0ZSBvZiBhIHN1cnJvZ2F0ZSBwYWlyXG5cdFx0XHRcdFx0b3V0cHV0LnB1c2godmFsdWUpO1xuXHRcdFx0XHRcdGNvdW50ZXItLTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b3V0cHV0LnB1c2godmFsdWUpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gb3V0cHV0O1xuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSBzdHJpbmcgYmFzZWQgb24gYW4gYXJyYXkgb2YgbnVtZXJpYyBjb2RlIHBvaW50cy5cblx0ICogQHNlZSBgcHVueWNvZGUudWNzMi5kZWNvZGVgXG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZS51Y3MyXG5cdCAqIEBuYW1lIGVuY29kZVxuXHQgKiBAcGFyYW0ge0FycmF5fSBjb2RlUG9pbnRzIFRoZSBhcnJheSBvZiBudW1lcmljIGNvZGUgcG9pbnRzLlxuXHQgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgbmV3IFVuaWNvZGUgc3RyaW5nIChVQ1MtMikuXG5cdCAqL1xuXHRmdW5jdGlvbiB1Y3MyZW5jb2RlKGFycmF5KSB7XG5cdFx0cmV0dXJuIG1hcChhcnJheSwgZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdHZhciBvdXRwdXQgPSAnJztcblx0XHRcdGlmICh2YWx1ZSA+IDB4RkZGRikge1xuXHRcdFx0XHR2YWx1ZSAtPSAweDEwMDAwO1xuXHRcdFx0XHRvdXRwdXQgKz0gc3RyaW5nRnJvbUNoYXJDb2RlKHZhbHVlID4+PiAxMCAmIDB4M0ZGIHwgMHhEODAwKTtcblx0XHRcdFx0dmFsdWUgPSAweERDMDAgfCB2YWx1ZSAmIDB4M0ZGO1xuXHRcdFx0fVxuXHRcdFx0b3V0cHV0ICs9IHN0cmluZ0Zyb21DaGFyQ29kZSh2YWx1ZSk7XG5cdFx0XHRyZXR1cm4gb3V0cHV0O1xuXHRcdH0pLmpvaW4oJycpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgYmFzaWMgY29kZSBwb2ludCBpbnRvIGEgZGlnaXQvaW50ZWdlci5cblx0ICogQHNlZSBgZGlnaXRUb0Jhc2ljKClgXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBjb2RlUG9pbnQgVGhlIGJhc2ljIG51bWVyaWMgY29kZSBwb2ludCB2YWx1ZS5cblx0ICogQHJldHVybnMge051bWJlcn0gVGhlIG51bWVyaWMgdmFsdWUgb2YgYSBiYXNpYyBjb2RlIHBvaW50IChmb3IgdXNlIGluXG5cdCAqIHJlcHJlc2VudGluZyBpbnRlZ2VycykgaW4gdGhlIHJhbmdlIGAwYCB0byBgYmFzZSAtIDFgLCBvciBgYmFzZWAgaWZcblx0ICogdGhlIGNvZGUgcG9pbnQgZG9lcyBub3QgcmVwcmVzZW50IGEgdmFsdWUuXG5cdCAqL1xuXHRmdW5jdGlvbiBiYXNpY1RvRGlnaXQoY29kZVBvaW50KSB7XG5cdFx0aWYgKGNvZGVQb2ludCAtIDQ4IDwgMTApIHtcblx0XHRcdHJldHVybiBjb2RlUG9pbnQgLSAyMjtcblx0XHR9XG5cdFx0aWYgKGNvZGVQb2ludCAtIDY1IDwgMjYpIHtcblx0XHRcdHJldHVybiBjb2RlUG9pbnQgLSA2NTtcblx0XHR9XG5cdFx0aWYgKGNvZGVQb2ludCAtIDk3IDwgMjYpIHtcblx0XHRcdHJldHVybiBjb2RlUG9pbnQgLSA5Nztcblx0XHR9XG5cdFx0cmV0dXJuIGJhc2U7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBkaWdpdC9pbnRlZ2VyIGludG8gYSBiYXNpYyBjb2RlIHBvaW50LlxuXHQgKiBAc2VlIGBiYXNpY1RvRGlnaXQoKWBcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtOdW1iZXJ9IGRpZ2l0IFRoZSBudW1lcmljIHZhbHVlIG9mIGEgYmFzaWMgY29kZSBwb2ludC5cblx0ICogQHJldHVybnMge051bWJlcn0gVGhlIGJhc2ljIGNvZGUgcG9pbnQgd2hvc2UgdmFsdWUgKHdoZW4gdXNlZCBmb3Jcblx0ICogcmVwcmVzZW50aW5nIGludGVnZXJzKSBpcyBgZGlnaXRgLCB3aGljaCBuZWVkcyB0byBiZSBpbiB0aGUgcmFuZ2Vcblx0ICogYDBgIHRvIGBiYXNlIC0gMWAuIElmIGBmbGFnYCBpcyBub24temVybywgdGhlIHVwcGVyY2FzZSBmb3JtIGlzXG5cdCAqIHVzZWQ7IGVsc2UsIHRoZSBsb3dlcmNhc2UgZm9ybSBpcyB1c2VkLiBUaGUgYmVoYXZpb3IgaXMgdW5kZWZpbmVkXG5cdCAqIGlmIGBmbGFnYCBpcyBub24temVybyBhbmQgYGRpZ2l0YCBoYXMgbm8gdXBwZXJjYXNlIGZvcm0uXG5cdCAqL1xuXHRmdW5jdGlvbiBkaWdpdFRvQmFzaWMoZGlnaXQsIGZsYWcpIHtcblx0XHQvLyAgMC4uMjUgbWFwIHRvIEFTQ0lJIGEuLnogb3IgQS4uWlxuXHRcdC8vIDI2Li4zNSBtYXAgdG8gQVNDSUkgMC4uOVxuXHRcdHJldHVybiBkaWdpdCArIDIyICsgNzUgKiAoZGlnaXQgPCAyNikgLSAoKGZsYWcgIT0gMCkgPDwgNSk7XG5cdH1cblxuXHQvKipcblx0ICogQmlhcyBhZGFwdGF0aW9uIGZ1bmN0aW9uIGFzIHBlciBzZWN0aW9uIDMuNCBvZiBSRkMgMzQ5Mi5cblx0ICogaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM0OTIjc2VjdGlvbi0zLjRcblx0ICogQHByaXZhdGVcblx0ICovXG5cdGZ1bmN0aW9uIGFkYXB0KGRlbHRhLCBudW1Qb2ludHMsIGZpcnN0VGltZSkge1xuXHRcdHZhciBrID0gMDtcblx0XHRkZWx0YSA9IGZpcnN0VGltZSA/IGZsb29yKGRlbHRhIC8gZGFtcCkgOiBkZWx0YSA+PiAxO1xuXHRcdGRlbHRhICs9IGZsb29yKGRlbHRhIC8gbnVtUG9pbnRzKTtcblx0XHRmb3IgKC8qIG5vIGluaXRpYWxpemF0aW9uICovOyBkZWx0YSA+IGJhc2VNaW51c1RNaW4gKiB0TWF4ID4+IDE7IGsgKz0gYmFzZSkge1xuXHRcdFx0ZGVsdGEgPSBmbG9vcihkZWx0YSAvIGJhc2VNaW51c1RNaW4pO1xuXHRcdH1cblx0XHRyZXR1cm4gZmxvb3IoayArIChiYXNlTWludXNUTWluICsgMSkgKiBkZWx0YSAvIChkZWx0YSArIHNrZXcpKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIFB1bnljb2RlIHN0cmluZyBvZiBBU0NJSS1vbmx5IHN5bWJvbHMgdG8gYSBzdHJpbmcgb2YgVW5pY29kZVxuXHQgKiBzeW1ib2xzLlxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzLlxuXHQgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgcmVzdWx0aW5nIHN0cmluZyBvZiBVbmljb2RlIHN5bWJvbHMuXG5cdCAqL1xuXHRmdW5jdGlvbiBkZWNvZGUoaW5wdXQpIHtcblx0XHQvLyBEb24ndCB1c2UgVUNTLTJcblx0XHR2YXIgb3V0cHV0ID0gW10sXG5cdFx0ICAgIGlucHV0TGVuZ3RoID0gaW5wdXQubGVuZ3RoLFxuXHRcdCAgICBvdXQsXG5cdFx0ICAgIGkgPSAwLFxuXHRcdCAgICBuID0gaW5pdGlhbE4sXG5cdFx0ICAgIGJpYXMgPSBpbml0aWFsQmlhcyxcblx0XHQgICAgYmFzaWMsXG5cdFx0ICAgIGosXG5cdFx0ICAgIGluZGV4LFxuXHRcdCAgICBvbGRpLFxuXHRcdCAgICB3LFxuXHRcdCAgICBrLFxuXHRcdCAgICBkaWdpdCxcblx0XHQgICAgdCxcblx0XHQgICAgLyoqIENhY2hlZCBjYWxjdWxhdGlvbiByZXN1bHRzICovXG5cdFx0ICAgIGJhc2VNaW51c1Q7XG5cblx0XHQvLyBIYW5kbGUgdGhlIGJhc2ljIGNvZGUgcG9pbnRzOiBsZXQgYGJhc2ljYCBiZSB0aGUgbnVtYmVyIG9mIGlucHV0IGNvZGVcblx0XHQvLyBwb2ludHMgYmVmb3JlIHRoZSBsYXN0IGRlbGltaXRlciwgb3IgYDBgIGlmIHRoZXJlIGlzIG5vbmUsIHRoZW4gY29weVxuXHRcdC8vIHRoZSBmaXJzdCBiYXNpYyBjb2RlIHBvaW50cyB0byB0aGUgb3V0cHV0LlxuXG5cdFx0YmFzaWMgPSBpbnB1dC5sYXN0SW5kZXhPZihkZWxpbWl0ZXIpO1xuXHRcdGlmIChiYXNpYyA8IDApIHtcblx0XHRcdGJhc2ljID0gMDtcblx0XHR9XG5cblx0XHRmb3IgKGogPSAwOyBqIDwgYmFzaWM7ICsraikge1xuXHRcdFx0Ly8gaWYgaXQncyBub3QgYSBiYXNpYyBjb2RlIHBvaW50XG5cdFx0XHRpZiAoaW5wdXQuY2hhckNvZGVBdChqKSA+PSAweDgwKSB7XG5cdFx0XHRcdGVycm9yKCdub3QtYmFzaWMnKTtcblx0XHRcdH1cblx0XHRcdG91dHB1dC5wdXNoKGlucHV0LmNoYXJDb2RlQXQoaikpO1xuXHRcdH1cblxuXHRcdC8vIE1haW4gZGVjb2RpbmcgbG9vcDogc3RhcnQganVzdCBhZnRlciB0aGUgbGFzdCBkZWxpbWl0ZXIgaWYgYW55IGJhc2ljIGNvZGVcblx0XHQvLyBwb2ludHMgd2VyZSBjb3BpZWQ7IHN0YXJ0IGF0IHRoZSBiZWdpbm5pbmcgb3RoZXJ3aXNlLlxuXG5cdFx0Zm9yIChpbmRleCA9IGJhc2ljID4gMCA/IGJhc2ljICsgMSA6IDA7IGluZGV4IDwgaW5wdXRMZW5ndGg7IC8qIG5vIGZpbmFsIGV4cHJlc3Npb24gKi8pIHtcblxuXHRcdFx0Ly8gYGluZGV4YCBpcyB0aGUgaW5kZXggb2YgdGhlIG5leHQgY2hhcmFjdGVyIHRvIGJlIGNvbnN1bWVkLlxuXHRcdFx0Ly8gRGVjb2RlIGEgZ2VuZXJhbGl6ZWQgdmFyaWFibGUtbGVuZ3RoIGludGVnZXIgaW50byBgZGVsdGFgLFxuXHRcdFx0Ly8gd2hpY2ggZ2V0cyBhZGRlZCB0byBgaWAuIFRoZSBvdmVyZmxvdyBjaGVja2luZyBpcyBlYXNpZXJcblx0XHRcdC8vIGlmIHdlIGluY3JlYXNlIGBpYCBhcyB3ZSBnbywgdGhlbiBzdWJ0cmFjdCBvZmYgaXRzIHN0YXJ0aW5nXG5cdFx0XHQvLyB2YWx1ZSBhdCB0aGUgZW5kIHRvIG9idGFpbiBgZGVsdGFgLlxuXHRcdFx0Zm9yIChvbGRpID0gaSwgdyA9IDEsIGsgPSBiYXNlOyAvKiBubyBjb25kaXRpb24gKi87IGsgKz0gYmFzZSkge1xuXG5cdFx0XHRcdGlmIChpbmRleCA+PSBpbnB1dExlbmd0aCkge1xuXHRcdFx0XHRcdGVycm9yKCdpbnZhbGlkLWlucHV0Jyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRkaWdpdCA9IGJhc2ljVG9EaWdpdChpbnB1dC5jaGFyQ29kZUF0KGluZGV4KyspKTtcblxuXHRcdFx0XHRpZiAoZGlnaXQgPj0gYmFzZSB8fCBkaWdpdCA+IGZsb29yKChtYXhJbnQgLSBpKSAvIHcpKSB7XG5cdFx0XHRcdFx0ZXJyb3IoJ292ZXJmbG93Jyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpICs9IGRpZ2l0ICogdztcblx0XHRcdFx0dCA9IGsgPD0gYmlhcyA/IHRNaW4gOiAoayA+PSBiaWFzICsgdE1heCA/IHRNYXggOiBrIC0gYmlhcyk7XG5cblx0XHRcdFx0aWYgKGRpZ2l0IDwgdCkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0YmFzZU1pbnVzVCA9IGJhc2UgLSB0O1xuXHRcdFx0XHRpZiAodyA+IGZsb29yKG1heEludCAvIGJhc2VNaW51c1QpKSB7XG5cdFx0XHRcdFx0ZXJyb3IoJ292ZXJmbG93Jyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR3ICo9IGJhc2VNaW51c1Q7XG5cblx0XHRcdH1cblxuXHRcdFx0b3V0ID0gb3V0cHV0Lmxlbmd0aCArIDE7XG5cdFx0XHRiaWFzID0gYWRhcHQoaSAtIG9sZGksIG91dCwgb2xkaSA9PSAwKTtcblxuXHRcdFx0Ly8gYGlgIHdhcyBzdXBwb3NlZCB0byB3cmFwIGFyb3VuZCBmcm9tIGBvdXRgIHRvIGAwYCxcblx0XHRcdC8vIGluY3JlbWVudGluZyBgbmAgZWFjaCB0aW1lLCBzbyB3ZSdsbCBmaXggdGhhdCBub3c6XG5cdFx0XHRpZiAoZmxvb3IoaSAvIG91dCkgPiBtYXhJbnQgLSBuKSB7XG5cdFx0XHRcdGVycm9yKCdvdmVyZmxvdycpO1xuXHRcdFx0fVxuXG5cdFx0XHRuICs9IGZsb29yKGkgLyBvdXQpO1xuXHRcdFx0aSAlPSBvdXQ7XG5cblx0XHRcdC8vIEluc2VydCBgbmAgYXQgcG9zaXRpb24gYGlgIG9mIHRoZSBvdXRwdXRcblx0XHRcdG91dHB1dC5zcGxpY2UoaSsrLCAwLCBuKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB1Y3MyZW5jb2RlKG91dHB1dCk7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBzdHJpbmcgb2YgVW5pY29kZSBzeW1ib2xzIChlLmcuIGEgZG9tYWluIG5hbWUgbGFiZWwpIHRvIGFcblx0ICogUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scy5cblx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgc3RyaW5nIG9mIFVuaWNvZGUgc3ltYm9scy5cblx0ICogQHJldHVybnMge1N0cmluZ30gVGhlIHJlc3VsdGluZyBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzLlxuXHQgKi9cblx0ZnVuY3Rpb24gZW5jb2RlKGlucHV0KSB7XG5cdFx0dmFyIG4sXG5cdFx0ICAgIGRlbHRhLFxuXHRcdCAgICBoYW5kbGVkQ1BDb3VudCxcblx0XHQgICAgYmFzaWNMZW5ndGgsXG5cdFx0ICAgIGJpYXMsXG5cdFx0ICAgIGosXG5cdFx0ICAgIG0sXG5cdFx0ICAgIHEsXG5cdFx0ICAgIGssXG5cdFx0ICAgIHQsXG5cdFx0ICAgIGN1cnJlbnRWYWx1ZSxcblx0XHQgICAgb3V0cHV0ID0gW10sXG5cdFx0ICAgIC8qKiBgaW5wdXRMZW5ndGhgIHdpbGwgaG9sZCB0aGUgbnVtYmVyIG9mIGNvZGUgcG9pbnRzIGluIGBpbnB1dGAuICovXG5cdFx0ICAgIGlucHV0TGVuZ3RoLFxuXHRcdCAgICAvKiogQ2FjaGVkIGNhbGN1bGF0aW9uIHJlc3VsdHMgKi9cblx0XHQgICAgaGFuZGxlZENQQ291bnRQbHVzT25lLFxuXHRcdCAgICBiYXNlTWludXNULFxuXHRcdCAgICBxTWludXNUO1xuXG5cdFx0Ly8gQ29udmVydCB0aGUgaW5wdXQgaW4gVUNTLTIgdG8gVW5pY29kZVxuXHRcdGlucHV0ID0gdWNzMmRlY29kZShpbnB1dCk7XG5cblx0XHQvLyBDYWNoZSB0aGUgbGVuZ3RoXG5cdFx0aW5wdXRMZW5ndGggPSBpbnB1dC5sZW5ndGg7XG5cblx0XHQvLyBJbml0aWFsaXplIHRoZSBzdGF0ZVxuXHRcdG4gPSBpbml0aWFsTjtcblx0XHRkZWx0YSA9IDA7XG5cdFx0YmlhcyA9IGluaXRpYWxCaWFzO1xuXG5cdFx0Ly8gSGFuZGxlIHRoZSBiYXNpYyBjb2RlIHBvaW50c1xuXHRcdGZvciAoaiA9IDA7IGogPCBpbnB1dExlbmd0aDsgKytqKSB7XG5cdFx0XHRjdXJyZW50VmFsdWUgPSBpbnB1dFtqXTtcblx0XHRcdGlmIChjdXJyZW50VmFsdWUgPCAweDgwKSB7XG5cdFx0XHRcdG91dHB1dC5wdXNoKHN0cmluZ0Zyb21DaGFyQ29kZShjdXJyZW50VmFsdWUpKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRoYW5kbGVkQ1BDb3VudCA9IGJhc2ljTGVuZ3RoID0gb3V0cHV0Lmxlbmd0aDtcblxuXHRcdC8vIGBoYW5kbGVkQ1BDb3VudGAgaXMgdGhlIG51bWJlciBvZiBjb2RlIHBvaW50cyB0aGF0IGhhdmUgYmVlbiBoYW5kbGVkO1xuXHRcdC8vIGBiYXNpY0xlbmd0aGAgaXMgdGhlIG51bWJlciBvZiBiYXNpYyBjb2RlIHBvaW50cy5cblxuXHRcdC8vIEZpbmlzaCB0aGUgYmFzaWMgc3RyaW5nIC0gaWYgaXQgaXMgbm90IGVtcHR5IC0gd2l0aCBhIGRlbGltaXRlclxuXHRcdGlmIChiYXNpY0xlbmd0aCkge1xuXHRcdFx0b3V0cHV0LnB1c2goZGVsaW1pdGVyKTtcblx0XHR9XG5cblx0XHQvLyBNYWluIGVuY29kaW5nIGxvb3A6XG5cdFx0d2hpbGUgKGhhbmRsZWRDUENvdW50IDwgaW5wdXRMZW5ndGgpIHtcblxuXHRcdFx0Ly8gQWxsIG5vbi1iYXNpYyBjb2RlIHBvaW50cyA8IG4gaGF2ZSBiZWVuIGhhbmRsZWQgYWxyZWFkeS4gRmluZCB0aGUgbmV4dFxuXHRcdFx0Ly8gbGFyZ2VyIG9uZTpcblx0XHRcdGZvciAobSA9IG1heEludCwgaiA9IDA7IGogPCBpbnB1dExlbmd0aDsgKytqKSB7XG5cdFx0XHRcdGN1cnJlbnRWYWx1ZSA9IGlucHV0W2pdO1xuXHRcdFx0XHRpZiAoY3VycmVudFZhbHVlID49IG4gJiYgY3VycmVudFZhbHVlIDwgbSkge1xuXHRcdFx0XHRcdG0gPSBjdXJyZW50VmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gSW5jcmVhc2UgYGRlbHRhYCBlbm91Z2ggdG8gYWR2YW5jZSB0aGUgZGVjb2RlcidzIDxuLGk+IHN0YXRlIHRvIDxtLDA+LFxuXHRcdFx0Ly8gYnV0IGd1YXJkIGFnYWluc3Qgb3ZlcmZsb3dcblx0XHRcdGhhbmRsZWRDUENvdW50UGx1c09uZSA9IGhhbmRsZWRDUENvdW50ICsgMTtcblx0XHRcdGlmIChtIC0gbiA+IGZsb29yKChtYXhJbnQgLSBkZWx0YSkgLyBoYW5kbGVkQ1BDb3VudFBsdXNPbmUpKSB7XG5cdFx0XHRcdGVycm9yKCdvdmVyZmxvdycpO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWx0YSArPSAobSAtIG4pICogaGFuZGxlZENQQ291bnRQbHVzT25lO1xuXHRcdFx0biA9IG07XG5cblx0XHRcdGZvciAoaiA9IDA7IGogPCBpbnB1dExlbmd0aDsgKytqKSB7XG5cdFx0XHRcdGN1cnJlbnRWYWx1ZSA9IGlucHV0W2pdO1xuXG5cdFx0XHRcdGlmIChjdXJyZW50VmFsdWUgPCBuICYmICsrZGVsdGEgPiBtYXhJbnQpIHtcblx0XHRcdFx0XHRlcnJvcignb3ZlcmZsb3cnKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChjdXJyZW50VmFsdWUgPT0gbikge1xuXHRcdFx0XHRcdC8vIFJlcHJlc2VudCBkZWx0YSBhcyBhIGdlbmVyYWxpemVkIHZhcmlhYmxlLWxlbmd0aCBpbnRlZ2VyXG5cdFx0XHRcdFx0Zm9yIChxID0gZGVsdGEsIGsgPSBiYXNlOyAvKiBubyBjb25kaXRpb24gKi87IGsgKz0gYmFzZSkge1xuXHRcdFx0XHRcdFx0dCA9IGsgPD0gYmlhcyA/IHRNaW4gOiAoayA+PSBiaWFzICsgdE1heCA/IHRNYXggOiBrIC0gYmlhcyk7XG5cdFx0XHRcdFx0XHRpZiAocSA8IHQpIHtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRxTWludXNUID0gcSAtIHQ7XG5cdFx0XHRcdFx0XHRiYXNlTWludXNUID0gYmFzZSAtIHQ7XG5cdFx0XHRcdFx0XHRvdXRwdXQucHVzaChcblx0XHRcdFx0XHRcdFx0c3RyaW5nRnJvbUNoYXJDb2RlKGRpZ2l0VG9CYXNpYyh0ICsgcU1pbnVzVCAlIGJhc2VNaW51c1QsIDApKVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdHEgPSBmbG9vcihxTWludXNUIC8gYmFzZU1pbnVzVCk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0b3V0cHV0LnB1c2goc3RyaW5nRnJvbUNoYXJDb2RlKGRpZ2l0VG9CYXNpYyhxLCAwKSkpO1xuXHRcdFx0XHRcdGJpYXMgPSBhZGFwdChkZWx0YSwgaGFuZGxlZENQQ291bnRQbHVzT25lLCBoYW5kbGVkQ1BDb3VudCA9PSBiYXNpY0xlbmd0aCk7XG5cdFx0XHRcdFx0ZGVsdGEgPSAwO1xuXHRcdFx0XHRcdCsraGFuZGxlZENQQ291bnQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0KytkZWx0YTtcblx0XHRcdCsrbjtcblxuXHRcdH1cblx0XHRyZXR1cm4gb3V0cHV0LmpvaW4oJycpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgUHVueWNvZGUgc3RyaW5nIHJlcHJlc2VudGluZyBhIGRvbWFpbiBuYW1lIG9yIGFuIGVtYWlsIGFkZHJlc3Ncblx0ICogdG8gVW5pY29kZS4gT25seSB0aGUgUHVueWNvZGVkIHBhcnRzIG9mIHRoZSBpbnB1dCB3aWxsIGJlIGNvbnZlcnRlZCwgaS5lLlxuXHQgKiBpdCBkb2Vzbid0IG1hdHRlciBpZiB5b3UgY2FsbCBpdCBvbiBhIHN0cmluZyB0aGF0IGhhcyBhbHJlYWR5IGJlZW5cblx0ICogY29udmVydGVkIHRvIFVuaWNvZGUuXG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIFB1bnljb2RlZCBkb21haW4gbmFtZSBvciBlbWFpbCBhZGRyZXNzIHRvXG5cdCAqIGNvbnZlcnQgdG8gVW5pY29kZS5cblx0ICogQHJldHVybnMge1N0cmluZ30gVGhlIFVuaWNvZGUgcmVwcmVzZW50YXRpb24gb2YgdGhlIGdpdmVuIFB1bnljb2RlXG5cdCAqIHN0cmluZy5cblx0ICovXG5cdGZ1bmN0aW9uIHRvVW5pY29kZShpbnB1dCkge1xuXHRcdHJldHVybiBtYXBEb21haW4oaW5wdXQsIGZ1bmN0aW9uKHN0cmluZykge1xuXHRcdFx0cmV0dXJuIHJlZ2V4UHVueWNvZGUudGVzdChzdHJpbmcpXG5cdFx0XHRcdD8gZGVjb2RlKHN0cmluZy5zbGljZSg0KS50b0xvd2VyQ2FzZSgpKVxuXHRcdFx0XHQ6IHN0cmluZztcblx0XHR9KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIFVuaWNvZGUgc3RyaW5nIHJlcHJlc2VudGluZyBhIGRvbWFpbiBuYW1lIG9yIGFuIGVtYWlsIGFkZHJlc3MgdG9cblx0ICogUHVueWNvZGUuIE9ubHkgdGhlIG5vbi1BU0NJSSBwYXJ0cyBvZiB0aGUgZG9tYWluIG5hbWUgd2lsbCBiZSBjb252ZXJ0ZWQsXG5cdCAqIGkuZS4gaXQgZG9lc24ndCBtYXR0ZXIgaWYgeW91IGNhbGwgaXQgd2l0aCBhIGRvbWFpbiB0aGF0J3MgYWxyZWFkeSBpblxuXHQgKiBBU0NJSS5cblx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgZG9tYWluIG5hbWUgb3IgZW1haWwgYWRkcmVzcyB0byBjb252ZXJ0LCBhcyBhXG5cdCAqIFVuaWNvZGUgc3RyaW5nLlxuXHQgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgUHVueWNvZGUgcmVwcmVzZW50YXRpb24gb2YgdGhlIGdpdmVuIGRvbWFpbiBuYW1lIG9yXG5cdCAqIGVtYWlsIGFkZHJlc3MuXG5cdCAqL1xuXHRmdW5jdGlvbiB0b0FTQ0lJKGlucHV0KSB7XG5cdFx0cmV0dXJuIG1hcERvbWFpbihpbnB1dCwgZnVuY3Rpb24oc3RyaW5nKSB7XG5cdFx0XHRyZXR1cm4gcmVnZXhOb25BU0NJSS50ZXN0KHN0cmluZylcblx0XHRcdFx0PyAneG4tLScgKyBlbmNvZGUoc3RyaW5nKVxuXHRcdFx0XHQ6IHN0cmluZztcblx0XHR9KTtcblx0fVxuXG5cdC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5cdC8qKiBEZWZpbmUgdGhlIHB1YmxpYyBBUEkgKi9cblx0cHVueWNvZGUgPSB7XG5cdFx0LyoqXG5cdFx0ICogQSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBjdXJyZW50IFB1bnljb2RlLmpzIHZlcnNpb24gbnVtYmVyLlxuXHRcdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHRcdCAqIEB0eXBlIFN0cmluZ1xuXHRcdCAqL1xuXHRcdCd2ZXJzaW9uJzogJzEuNC4xJyxcblx0XHQvKipcblx0XHQgKiBBbiBvYmplY3Qgb2YgbWV0aG9kcyB0byBjb252ZXJ0IGZyb20gSmF2YVNjcmlwdCdzIGludGVybmFsIGNoYXJhY3RlclxuXHRcdCAqIHJlcHJlc2VudGF0aW9uIChVQ1MtMikgdG8gVW5pY29kZSBjb2RlIHBvaW50cywgYW5kIGJhY2suXG5cdFx0ICogQHNlZSA8aHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtZW5jb2Rpbmc+XG5cdFx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdFx0ICogQHR5cGUgT2JqZWN0XG5cdFx0ICovXG5cdFx0J3VjczInOiB7XG5cdFx0XHQnZGVjb2RlJzogdWNzMmRlY29kZSxcblx0XHRcdCdlbmNvZGUnOiB1Y3MyZW5jb2RlXG5cdFx0fSxcblx0XHQnZGVjb2RlJzogZGVjb2RlLFxuXHRcdCdlbmNvZGUnOiBlbmNvZGUsXG5cdFx0J3RvQVNDSUknOiB0b0FTQ0lJLFxuXHRcdCd0b1VuaWNvZGUnOiB0b1VuaWNvZGVcblx0fTtcblxuXHQvKiogRXhwb3NlIGBwdW55Y29kZWAgKi9cblx0Ly8gU29tZSBBTUQgYnVpbGQgb3B0aW1pemVycywgbGlrZSByLmpzLCBjaGVjayBmb3Igc3BlY2lmaWMgY29uZGl0aW9uIHBhdHRlcm5zXG5cdC8vIGxpa2UgdGhlIGZvbGxvd2luZzpcblx0aWYgKFxuXHRcdHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJlxuXHRcdHR5cGVvZiBkZWZpbmUuYW1kID09ICdvYmplY3QnICYmXG5cdFx0ZGVmaW5lLmFtZFxuXHQpIHtcblx0XHRkZWZpbmUoJ3B1bnljb2RlJywgZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gcHVueWNvZGU7XG5cdFx0fSk7XG5cdH0gZWxzZSBpZiAoZnJlZUV4cG9ydHMgJiYgZnJlZU1vZHVsZSkge1xuXHRcdGlmIChtb2R1bGUuZXhwb3J0cyA9PSBmcmVlRXhwb3J0cykge1xuXHRcdFx0Ly8gaW4gTm9kZS5qcywgaW8uanMsIG9yIFJpbmdvSlMgdjAuOC4wK1xuXHRcdFx0ZnJlZU1vZHVsZS5leHBvcnRzID0gcHVueWNvZGU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIGluIE5hcndoYWwgb3IgUmluZ29KUyB2MC43LjAtXG5cdFx0XHRmb3IgKGtleSBpbiBwdW55Y29kZSkge1xuXHRcdFx0XHRwdW55Y29kZS5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIChmcmVlRXhwb3J0c1trZXldID0gcHVueWNvZGVba2V5XSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdC8vIGluIFJoaW5vIG9yIGEgd2ViIGJyb3dzZXJcblx0XHRyb290LnB1bnljb2RlID0gcHVueWNvZGU7XG5cdH1cblxufSh0aGlzKSk7XG4iLCIvKlxuICogQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbiAqIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbiAqIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuICogd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuICogZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuICogcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4gKiBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuICogaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuICogT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuICogTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuICogTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4gKiBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1JcbiAqIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbiAqIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgcHVueWNvZGUgPSByZXF1aXJlKCdwdW55Y29kZS8nKTtcblxuZnVuY3Rpb24gVXJsKCkge1xuICB0aGlzLnByb3RvY29sID0gbnVsbDtcbiAgdGhpcy5zbGFzaGVzID0gbnVsbDtcbiAgdGhpcy5hdXRoID0gbnVsbDtcbiAgdGhpcy5ob3N0ID0gbnVsbDtcbiAgdGhpcy5wb3J0ID0gbnVsbDtcbiAgdGhpcy5ob3N0bmFtZSA9IG51bGw7XG4gIHRoaXMuaGFzaCA9IG51bGw7XG4gIHRoaXMuc2VhcmNoID0gbnVsbDtcbiAgdGhpcy5xdWVyeSA9IG51bGw7XG4gIHRoaXMucGF0aG5hbWUgPSBudWxsO1xuICB0aGlzLnBhdGggPSBudWxsO1xuICB0aGlzLmhyZWYgPSBudWxsO1xufVxuXG4vLyBSZWZlcmVuY2U6IFJGQyAzOTg2LCBSRkMgMTgwOCwgUkZDIDIzOTZcblxuLypcbiAqIGRlZmluZSB0aGVzZSBoZXJlIHNvIGF0IGxlYXN0IHRoZXkgb25seSBoYXZlIHRvIGJlXG4gKiBjb21waWxlZCBvbmNlIG9uIHRoZSBmaXJzdCBtb2R1bGUgbG9hZC5cbiAqL1xudmFyIHByb3RvY29sUGF0dGVybiA9IC9eKFthLXowLTkuKy1dKzopL2ksXG4gIHBvcnRQYXR0ZXJuID0gLzpbMC05XSokLyxcblxuICAvLyBTcGVjaWFsIGNhc2UgZm9yIGEgc2ltcGxlIHBhdGggVVJMXG4gIHNpbXBsZVBhdGhQYXR0ZXJuID0gL14oXFwvXFwvPyg/IVxcLylbXj9cXHNdKikoXFw/W15cXHNdKik/JC8sXG5cbiAgLypcbiAgICogUkZDIDIzOTY6IGNoYXJhY3RlcnMgcmVzZXJ2ZWQgZm9yIGRlbGltaXRpbmcgVVJMcy5cbiAgICogV2UgYWN0dWFsbHkganVzdCBhdXRvLWVzY2FwZSB0aGVzZS5cbiAgICovXG4gIGRlbGltcyA9IFtcbiAgICAnPCcsICc+JywgJ1wiJywgJ2AnLCAnICcsICdcXHInLCAnXFxuJywgJ1xcdCdcbiAgXSxcblxuICAvLyBSRkMgMjM5NjogY2hhcmFjdGVycyBub3QgYWxsb3dlZCBmb3IgdmFyaW91cyByZWFzb25zLlxuICB1bndpc2UgPSBbXG4gICAgJ3snLCAnfScsICd8JywgJ1xcXFwnLCAnXicsICdgJ1xuICBdLmNvbmNhdChkZWxpbXMpLFxuXG4gIC8vIEFsbG93ZWQgYnkgUkZDcywgYnV0IGNhdXNlIG9mIFhTUyBhdHRhY2tzLiAgQWx3YXlzIGVzY2FwZSB0aGVzZS5cbiAgYXV0b0VzY2FwZSA9IFsnXFwnJ10uY29uY2F0KHVud2lzZSksXG4gIC8qXG4gICAqIENoYXJhY3RlcnMgdGhhdCBhcmUgbmV2ZXIgZXZlciBhbGxvd2VkIGluIGEgaG9zdG5hbWUuXG4gICAqIE5vdGUgdGhhdCBhbnkgaW52YWxpZCBjaGFycyBhcmUgYWxzbyBoYW5kbGVkLCBidXQgdGhlc2VcbiAgICogYXJlIHRoZSBvbmVzIHRoYXQgYXJlICpleHBlY3RlZCogdG8gYmUgc2Vlbiwgc28gd2UgZmFzdC1wYXRoXG4gICAqIHRoZW0uXG4gICAqL1xuICBub25Ib3N0Q2hhcnMgPSBbXG4gICAgJyUnLCAnLycsICc/JywgJzsnLCAnIydcbiAgXS5jb25jYXQoYXV0b0VzY2FwZSksXG4gIGhvc3RFbmRpbmdDaGFycyA9IFtcbiAgICAnLycsICc/JywgJyMnXG4gIF0sXG4gIGhvc3RuYW1lTWF4TGVuID0gMjU1LFxuICBob3N0bmFtZVBhcnRQYXR0ZXJuID0gL15bK2EtejAtOUEtWl8tXXswLDYzfSQvLFxuICBob3N0bmFtZVBhcnRTdGFydCA9IC9eKFsrYS16MC05QS1aXy1dezAsNjN9KSguKikkLyxcbiAgLy8gcHJvdG9jb2xzIHRoYXQgY2FuIGFsbG93IFwidW5zYWZlXCIgYW5kIFwidW53aXNlXCIgY2hhcnMuXG4gIHVuc2FmZVByb3RvY29sID0ge1xuICAgIGphdmFzY3JpcHQ6IHRydWUsXG4gICAgJ2phdmFzY3JpcHQ6JzogdHJ1ZVxuICB9LFxuICAvLyBwcm90b2NvbHMgdGhhdCBuZXZlciBoYXZlIGEgaG9zdG5hbWUuXG4gIGhvc3RsZXNzUHJvdG9jb2wgPSB7XG4gICAgamF2YXNjcmlwdDogdHJ1ZSxcbiAgICAnamF2YXNjcmlwdDonOiB0cnVlXG4gIH0sXG4gIC8vIHByb3RvY29scyB0aGF0IGFsd2F5cyBjb250YWluIGEgLy8gYml0LlxuICBzbGFzaGVkUHJvdG9jb2wgPSB7XG4gICAgaHR0cDogdHJ1ZSxcbiAgICBodHRwczogdHJ1ZSxcbiAgICBmdHA6IHRydWUsXG4gICAgZ29waGVyOiB0cnVlLFxuICAgIGZpbGU6IHRydWUsXG4gICAgJ2h0dHA6JzogdHJ1ZSxcbiAgICAnaHR0cHM6JzogdHJ1ZSxcbiAgICAnZnRwOic6IHRydWUsXG4gICAgJ2dvcGhlcjonOiB0cnVlLFxuICAgICdmaWxlOic6IHRydWVcbiAgfSxcbiAgcXVlcnlzdHJpbmcgPSByZXF1aXJlKCdxcycpO1xuXG5mdW5jdGlvbiB1cmxQYXJzZSh1cmwsIHBhcnNlUXVlcnlTdHJpbmcsIHNsYXNoZXNEZW5vdGVIb3N0KSB7XG4gIGlmICh1cmwgJiYgdHlwZW9mIHVybCA9PT0gJ29iamVjdCcgJiYgdXJsIGluc3RhbmNlb2YgVXJsKSB7IHJldHVybiB1cmw7IH1cblxuICB2YXIgdSA9IG5ldyBVcmwoKTtcbiAgdS5wYXJzZSh1cmwsIHBhcnNlUXVlcnlTdHJpbmcsIHNsYXNoZXNEZW5vdGVIb3N0KTtcbiAgcmV0dXJuIHU7XG59XG5cblVybC5wcm90b3R5cGUucGFyc2UgPSBmdW5jdGlvbiAodXJsLCBwYXJzZVF1ZXJ5U3RyaW5nLCBzbGFzaGVzRGVub3RlSG9zdCkge1xuICBpZiAodHlwZW9mIHVybCAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUGFyYW1ldGVyICd1cmwnIG11c3QgYmUgYSBzdHJpbmcsIG5vdCBcIiArIHR5cGVvZiB1cmwpO1xuICB9XG5cbiAgLypcbiAgICogQ29weSBjaHJvbWUsIElFLCBvcGVyYSBiYWNrc2xhc2gtaGFuZGxpbmcgYmVoYXZpb3IuXG4gICAqIEJhY2sgc2xhc2hlcyBiZWZvcmUgdGhlIHF1ZXJ5IHN0cmluZyBnZXQgY29udmVydGVkIHRvIGZvcndhcmQgc2xhc2hlc1xuICAgKiBTZWU6IGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0yNTkxNlxuICAgKi9cbiAgdmFyIHF1ZXJ5SW5kZXggPSB1cmwuaW5kZXhPZignPycpLFxuICAgIHNwbGl0dGVyID0gcXVlcnlJbmRleCAhPT0gLTEgJiYgcXVlcnlJbmRleCA8IHVybC5pbmRleE9mKCcjJykgPyAnPycgOiAnIycsXG4gICAgdVNwbGl0ID0gdXJsLnNwbGl0KHNwbGl0dGVyKSxcbiAgICBzbGFzaFJlZ2V4ID0gL1xcXFwvZztcbiAgdVNwbGl0WzBdID0gdVNwbGl0WzBdLnJlcGxhY2Uoc2xhc2hSZWdleCwgJy8nKTtcbiAgdXJsID0gdVNwbGl0LmpvaW4oc3BsaXR0ZXIpO1xuXG4gIHZhciByZXN0ID0gdXJsO1xuXG4gIC8qXG4gICAqIHRyaW0gYmVmb3JlIHByb2NlZWRpbmcuXG4gICAqIFRoaXMgaXMgdG8gc3VwcG9ydCBwYXJzZSBzdHVmZiBsaWtlIFwiICBodHRwOi8vZm9vLmNvbSAgXFxuXCJcbiAgICovXG4gIHJlc3QgPSByZXN0LnRyaW0oKTtcblxuICBpZiAoIXNsYXNoZXNEZW5vdGVIb3N0ICYmIHVybC5zcGxpdCgnIycpLmxlbmd0aCA9PT0gMSkge1xuICAgIC8vIFRyeSBmYXN0IHBhdGggcmVnZXhwXG4gICAgdmFyIHNpbXBsZVBhdGggPSBzaW1wbGVQYXRoUGF0dGVybi5leGVjKHJlc3QpO1xuICAgIGlmIChzaW1wbGVQYXRoKSB7XG4gICAgICB0aGlzLnBhdGggPSByZXN0O1xuICAgICAgdGhpcy5ocmVmID0gcmVzdDtcbiAgICAgIHRoaXMucGF0aG5hbWUgPSBzaW1wbGVQYXRoWzFdO1xuICAgICAgaWYgKHNpbXBsZVBhdGhbMl0pIHtcbiAgICAgICAgdGhpcy5zZWFyY2ggPSBzaW1wbGVQYXRoWzJdO1xuICAgICAgICBpZiAocGFyc2VRdWVyeVN0cmluZykge1xuICAgICAgICAgIHRoaXMucXVlcnkgPSBxdWVyeXN0cmluZy5wYXJzZSh0aGlzLnNlYXJjaC5zdWJzdHIoMSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMucXVlcnkgPSB0aGlzLnNlYXJjaC5zdWJzdHIoMSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocGFyc2VRdWVyeVN0cmluZykge1xuICAgICAgICB0aGlzLnNlYXJjaCA9ICcnO1xuICAgICAgICB0aGlzLnF1ZXJ5ID0ge307XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH1cblxuICB2YXIgcHJvdG8gPSBwcm90b2NvbFBhdHRlcm4uZXhlYyhyZXN0KTtcbiAgaWYgKHByb3RvKSB7XG4gICAgcHJvdG8gPSBwcm90b1swXTtcbiAgICB2YXIgbG93ZXJQcm90byA9IHByb3RvLnRvTG93ZXJDYXNlKCk7XG4gICAgdGhpcy5wcm90b2NvbCA9IGxvd2VyUHJvdG87XG4gICAgcmVzdCA9IHJlc3Quc3Vic3RyKHByb3RvLmxlbmd0aCk7XG4gIH1cblxuICAvKlxuICAgKiBmaWd1cmUgb3V0IGlmIGl0J3MgZ290IGEgaG9zdFxuICAgKiB1c2VyQHNlcnZlciBpcyAqYWx3YXlzKiBpbnRlcnByZXRlZCBhcyBhIGhvc3RuYW1lLCBhbmQgdXJsXG4gICAqIHJlc29sdXRpb24gd2lsbCB0cmVhdCAvL2Zvby9iYXIgYXMgaG9zdD1mb28scGF0aD1iYXIgYmVjYXVzZSB0aGF0J3NcbiAgICogaG93IHRoZSBicm93c2VyIHJlc29sdmVzIHJlbGF0aXZlIFVSTHMuXG4gICAqL1xuICBpZiAoc2xhc2hlc0Rlbm90ZUhvc3QgfHwgcHJvdG8gfHwgcmVzdC5tYXRjaCgvXlxcL1xcL1teQC9dK0BbXkAvXSsvKSkge1xuICAgIHZhciBzbGFzaGVzID0gcmVzdC5zdWJzdHIoMCwgMikgPT09ICcvLyc7XG4gICAgaWYgKHNsYXNoZXMgJiYgIShwcm90byAmJiBob3N0bGVzc1Byb3RvY29sW3Byb3RvXSkpIHtcbiAgICAgIHJlc3QgPSByZXN0LnN1YnN0cigyKTtcbiAgICAgIHRoaXMuc2xhc2hlcyA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFob3N0bGVzc1Byb3RvY29sW3Byb3RvXSAmJiAoc2xhc2hlcyB8fCAocHJvdG8gJiYgIXNsYXNoZWRQcm90b2NvbFtwcm90b10pKSkge1xuXG4gICAgLypcbiAgICAgKiB0aGVyZSdzIGEgaG9zdG5hbWUuXG4gICAgICogdGhlIGZpcnN0IGluc3RhbmNlIG9mIC8sID8sIDssIG9yICMgZW5kcyB0aGUgaG9zdC5cbiAgICAgKlxuICAgICAqIElmIHRoZXJlIGlzIGFuIEAgaW4gdGhlIGhvc3RuYW1lLCB0aGVuIG5vbi1ob3N0IGNoYXJzICphcmUqIGFsbG93ZWRcbiAgICAgKiB0byB0aGUgbGVmdCBvZiB0aGUgbGFzdCBAIHNpZ24sIHVubGVzcyBzb21lIGhvc3QtZW5kaW5nIGNoYXJhY3RlclxuICAgICAqIGNvbWVzICpiZWZvcmUqIHRoZSBALXNpZ24uXG4gICAgICogVVJMcyBhcmUgb2Jub3hpb3VzLlxuICAgICAqXG4gICAgICogZXg6XG4gICAgICogaHR0cDovL2FAYkBjLyA9PiB1c2VyOmFAYiBob3N0OmNcbiAgICAgKiBodHRwOi8vYUBiP0BjID0+IHVzZXI6YSBob3N0OmMgcGF0aDovP0BjXG4gICAgICovXG5cbiAgICAvKlxuICAgICAqIHYwLjEyIFRPRE8oaXNhYWNzKTogVGhpcyBpcyBub3QgcXVpdGUgaG93IENocm9tZSBkb2VzIHRoaW5ncy5cbiAgICAgKiBSZXZpZXcgb3VyIHRlc3QgY2FzZSBhZ2FpbnN0IGJyb3dzZXJzIG1vcmUgY29tcHJlaGVuc2l2ZWx5LlxuICAgICAqL1xuXG4gICAgLy8gZmluZCB0aGUgZmlyc3QgaW5zdGFuY2Ugb2YgYW55IGhvc3RFbmRpbmdDaGFyc1xuICAgIHZhciBob3N0RW5kID0gLTE7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBob3N0RW5kaW5nQ2hhcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBoZWMgPSByZXN0LmluZGV4T2YoaG9zdEVuZGluZ0NoYXJzW2ldKTtcbiAgICAgIGlmIChoZWMgIT09IC0xICYmIChob3N0RW5kID09PSAtMSB8fCBoZWMgPCBob3N0RW5kKSkgeyBob3N0RW5kID0gaGVjOyB9XG4gICAgfVxuXG4gICAgLypcbiAgICAgKiBhdCB0aGlzIHBvaW50LCBlaXRoZXIgd2UgaGF2ZSBhbiBleHBsaWNpdCBwb2ludCB3aGVyZSB0aGVcbiAgICAgKiBhdXRoIHBvcnRpb24gY2Fubm90IGdvIHBhc3QsIG9yIHRoZSBsYXN0IEAgY2hhciBpcyB0aGUgZGVjaWRlci5cbiAgICAgKi9cbiAgICB2YXIgYXV0aCwgYXRTaWduO1xuICAgIGlmIChob3N0RW5kID09PSAtMSkge1xuICAgICAgLy8gYXRTaWduIGNhbiBiZSBhbnl3aGVyZS5cbiAgICAgIGF0U2lnbiA9IHJlc3QubGFzdEluZGV4T2YoJ0AnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLypcbiAgICAgICAqIGF0U2lnbiBtdXN0IGJlIGluIGF1dGggcG9ydGlvbi5cbiAgICAgICAqIGh0dHA6Ly9hQGIvY0BkID0+IGhvc3Q6YiBhdXRoOmEgcGF0aDovY0BkXG4gICAgICAgKi9cbiAgICAgIGF0U2lnbiA9IHJlc3QubGFzdEluZGV4T2YoJ0AnLCBob3N0RW5kKTtcbiAgICB9XG5cbiAgICAvKlxuICAgICAqIE5vdyB3ZSBoYXZlIGEgcG9ydGlvbiB3aGljaCBpcyBkZWZpbml0ZWx5IHRoZSBhdXRoLlxuICAgICAqIFB1bGwgdGhhdCBvZmYuXG4gICAgICovXG4gICAgaWYgKGF0U2lnbiAhPT0gLTEpIHtcbiAgICAgIGF1dGggPSByZXN0LnNsaWNlKDAsIGF0U2lnbik7XG4gICAgICByZXN0ID0gcmVzdC5zbGljZShhdFNpZ24gKyAxKTtcbiAgICAgIHRoaXMuYXV0aCA9IGRlY29kZVVSSUNvbXBvbmVudChhdXRoKTtcbiAgICB9XG5cbiAgICAvLyB0aGUgaG9zdCBpcyB0aGUgcmVtYWluaW5nIHRvIHRoZSBsZWZ0IG9mIHRoZSBmaXJzdCBub24taG9zdCBjaGFyXG4gICAgaG9zdEVuZCA9IC0xO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9uSG9zdENoYXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaGVjID0gcmVzdC5pbmRleE9mKG5vbkhvc3RDaGFyc1tpXSk7XG4gICAgICBpZiAoaGVjICE9PSAtMSAmJiAoaG9zdEVuZCA9PT0gLTEgfHwgaGVjIDwgaG9zdEVuZCkpIHsgaG9zdEVuZCA9IGhlYzsgfVxuICAgIH1cbiAgICAvLyBpZiB3ZSBzdGlsbCBoYXZlIG5vdCBoaXQgaXQsIHRoZW4gdGhlIGVudGlyZSB0aGluZyBpcyBhIGhvc3QuXG4gICAgaWYgKGhvc3RFbmQgPT09IC0xKSB7IGhvc3RFbmQgPSByZXN0Lmxlbmd0aDsgfVxuXG4gICAgdGhpcy5ob3N0ID0gcmVzdC5zbGljZSgwLCBob3N0RW5kKTtcbiAgICByZXN0ID0gcmVzdC5zbGljZShob3N0RW5kKTtcblxuICAgIC8vIHB1bGwgb3V0IHBvcnQuXG4gICAgdGhpcy5wYXJzZUhvc3QoKTtcblxuICAgIC8qXG4gICAgICogd2UndmUgaW5kaWNhdGVkIHRoYXQgdGhlcmUgaXMgYSBob3N0bmFtZSxcbiAgICAgKiBzbyBldmVuIGlmIGl0J3MgZW1wdHksIGl0IGhhcyB0byBiZSBwcmVzZW50LlxuICAgICAqL1xuICAgIHRoaXMuaG9zdG5hbWUgPSB0aGlzLmhvc3RuYW1lIHx8ICcnO1xuXG4gICAgLypcbiAgICAgKiBpZiBob3N0bmFtZSBiZWdpbnMgd2l0aCBbIGFuZCBlbmRzIHdpdGggXVxuICAgICAqIGFzc3VtZSB0aGF0IGl0J3MgYW4gSVB2NiBhZGRyZXNzLlxuICAgICAqL1xuICAgIHZhciBpcHY2SG9zdG5hbWUgPSB0aGlzLmhvc3RuYW1lWzBdID09PSAnWycgJiYgdGhpcy5ob3N0bmFtZVt0aGlzLmhvc3RuYW1lLmxlbmd0aCAtIDFdID09PSAnXSc7XG5cbiAgICAvLyB2YWxpZGF0ZSBhIGxpdHRsZS5cbiAgICBpZiAoIWlwdjZIb3N0bmFtZSkge1xuICAgICAgdmFyIGhvc3RwYXJ0cyA9IHRoaXMuaG9zdG5hbWUuc3BsaXQoL1xcLi8pO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBob3N0cGFydHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHZhciBwYXJ0ID0gaG9zdHBhcnRzW2ldO1xuICAgICAgICBpZiAoIXBhcnQpIHsgY29udGludWU7IH1cbiAgICAgICAgaWYgKCFwYXJ0Lm1hdGNoKGhvc3RuYW1lUGFydFBhdHRlcm4pKSB7XG4gICAgICAgICAgdmFyIG5ld3BhcnQgPSAnJztcbiAgICAgICAgICBmb3IgKHZhciBqID0gMCwgayA9IHBhcnQubGVuZ3RoOyBqIDwgazsgaisrKSB7XG4gICAgICAgICAgICBpZiAocGFydC5jaGFyQ29kZUF0KGopID4gMTI3KSB7XG4gICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAqIHdlIHJlcGxhY2Ugbm9uLUFTQ0lJIGNoYXIgd2l0aCBhIHRlbXBvcmFyeSBwbGFjZWhvbGRlclxuICAgICAgICAgICAgICAgKiB3ZSBuZWVkIHRoaXMgdG8gbWFrZSBzdXJlIHNpemUgb2YgaG9zdG5hbWUgaXMgbm90XG4gICAgICAgICAgICAgICAqIGJyb2tlbiBieSByZXBsYWNpbmcgbm9uLUFTQ0lJIGJ5IG5vdGhpbmdcbiAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgIG5ld3BhcnQgKz0gJ3gnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbmV3cGFydCArPSBwYXJ0W2pdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyB3ZSB0ZXN0IGFnYWluIHdpdGggQVNDSUkgY2hhciBvbmx5XG4gICAgICAgICAgaWYgKCFuZXdwYXJ0Lm1hdGNoKGhvc3RuYW1lUGFydFBhdHRlcm4pKSB7XG4gICAgICAgICAgICB2YXIgdmFsaWRQYXJ0cyA9IGhvc3RwYXJ0cy5zbGljZSgwLCBpKTtcbiAgICAgICAgICAgIHZhciBub3RIb3N0ID0gaG9zdHBhcnRzLnNsaWNlKGkgKyAxKTtcbiAgICAgICAgICAgIHZhciBiaXQgPSBwYXJ0Lm1hdGNoKGhvc3RuYW1lUGFydFN0YXJ0KTtcbiAgICAgICAgICAgIGlmIChiaXQpIHtcbiAgICAgICAgICAgICAgdmFsaWRQYXJ0cy5wdXNoKGJpdFsxXSk7XG4gICAgICAgICAgICAgIG5vdEhvc3QudW5zaGlmdChiaXRbMl0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5vdEhvc3QubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIHJlc3QgPSAnLycgKyBub3RIb3N0LmpvaW4oJy4nKSArIHJlc3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmhvc3RuYW1lID0gdmFsaWRQYXJ0cy5qb2luKCcuJyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5ob3N0bmFtZS5sZW5ndGggPiBob3N0bmFtZU1heExlbikge1xuICAgICAgdGhpcy5ob3N0bmFtZSA9ICcnO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBob3N0bmFtZXMgYXJlIGFsd2F5cyBsb3dlciBjYXNlLlxuICAgICAgdGhpcy5ob3N0bmFtZSA9IHRoaXMuaG9zdG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICB9XG5cbiAgICBpZiAoIWlwdjZIb3N0bmFtZSkge1xuICAgICAgLypcbiAgICAgICAqIElETkEgU3VwcG9ydDogUmV0dXJucyBhIHB1bnljb2RlZCByZXByZXNlbnRhdGlvbiBvZiBcImRvbWFpblwiLlxuICAgICAgICogSXQgb25seSBjb252ZXJ0cyBwYXJ0cyBvZiB0aGUgZG9tYWluIG5hbWUgdGhhdFxuICAgICAgICogaGF2ZSBub24tQVNDSUkgY2hhcmFjdGVycywgaS5lLiBpdCBkb2Vzbid0IG1hdHRlciBpZlxuICAgICAgICogeW91IGNhbGwgaXQgd2l0aCBhIGRvbWFpbiB0aGF0IGFscmVhZHkgaXMgQVNDSUktb25seS5cbiAgICAgICAqL1xuICAgICAgdGhpcy5ob3N0bmFtZSA9IHB1bnljb2RlLnRvQVNDSUkodGhpcy5ob3N0bmFtZSk7XG4gICAgfVxuXG4gICAgdmFyIHAgPSB0aGlzLnBvcnQgPyAnOicgKyB0aGlzLnBvcnQgOiAnJztcbiAgICB2YXIgaCA9IHRoaXMuaG9zdG5hbWUgfHwgJyc7XG4gICAgdGhpcy5ob3N0ID0gaCArIHA7XG4gICAgdGhpcy5ocmVmICs9IHRoaXMuaG9zdDtcblxuICAgIC8qXG4gICAgICogc3RyaXAgWyBhbmQgXSBmcm9tIHRoZSBob3N0bmFtZVxuICAgICAqIHRoZSBob3N0IGZpZWxkIHN0aWxsIHJldGFpbnMgdGhlbSwgdGhvdWdoXG4gICAgICovXG4gICAgaWYgKGlwdjZIb3N0bmFtZSkge1xuICAgICAgdGhpcy5ob3N0bmFtZSA9IHRoaXMuaG9zdG5hbWUuc3Vic3RyKDEsIHRoaXMuaG9zdG5hbWUubGVuZ3RoIC0gMik7XG4gICAgICBpZiAocmVzdFswXSAhPT0gJy8nKSB7XG4gICAgICAgIHJlc3QgPSAnLycgKyByZXN0O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qXG4gICAqIG5vdyByZXN0IGlzIHNldCB0byB0aGUgcG9zdC1ob3N0IHN0dWZmLlxuICAgKiBjaG9wIG9mZiBhbnkgZGVsaW0gY2hhcnMuXG4gICAqL1xuICBpZiAoIXVuc2FmZVByb3RvY29sW2xvd2VyUHJvdG9dKSB7XG5cbiAgICAvKlxuICAgICAqIEZpcnN0LCBtYWtlIDEwMCUgc3VyZSB0aGF0IGFueSBcImF1dG9Fc2NhcGVcIiBjaGFycyBnZXRcbiAgICAgKiBlc2NhcGVkLCBldmVuIGlmIGVuY29kZVVSSUNvbXBvbmVudCBkb2Vzbid0IHRoaW5rIHRoZXlcbiAgICAgKiBuZWVkIHRvIGJlLlxuICAgICAqL1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gYXV0b0VzY2FwZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBhZSA9IGF1dG9Fc2NhcGVbaV07XG4gICAgICBpZiAocmVzdC5pbmRleE9mKGFlKSA9PT0gLTEpIHsgY29udGludWU7IH1cbiAgICAgIHZhciBlc2MgPSBlbmNvZGVVUklDb21wb25lbnQoYWUpO1xuICAgICAgaWYgKGVzYyA9PT0gYWUpIHtcbiAgICAgICAgZXNjID0gZXNjYXBlKGFlKTtcbiAgICAgIH1cbiAgICAgIHJlc3QgPSByZXN0LnNwbGl0KGFlKS5qb2luKGVzYyk7XG4gICAgfVxuICB9XG5cbiAgLy8gY2hvcCBvZmYgZnJvbSB0aGUgdGFpbCBmaXJzdC5cbiAgdmFyIGhhc2ggPSByZXN0LmluZGV4T2YoJyMnKTtcbiAgaWYgKGhhc2ggIT09IC0xKSB7XG4gICAgLy8gZ290IGEgZnJhZ21lbnQgc3RyaW5nLlxuICAgIHRoaXMuaGFzaCA9IHJlc3Quc3Vic3RyKGhhc2gpO1xuICAgIHJlc3QgPSByZXN0LnNsaWNlKDAsIGhhc2gpO1xuICB9XG4gIHZhciBxbSA9IHJlc3QuaW5kZXhPZignPycpO1xuICBpZiAocW0gIT09IC0xKSB7XG4gICAgdGhpcy5zZWFyY2ggPSByZXN0LnN1YnN0cihxbSk7XG4gICAgdGhpcy5xdWVyeSA9IHJlc3Quc3Vic3RyKHFtICsgMSk7XG4gICAgaWYgKHBhcnNlUXVlcnlTdHJpbmcpIHtcbiAgICAgIHRoaXMucXVlcnkgPSBxdWVyeXN0cmluZy5wYXJzZSh0aGlzLnF1ZXJ5KTtcbiAgICB9XG4gICAgcmVzdCA9IHJlc3Quc2xpY2UoMCwgcW0pO1xuICB9IGVsc2UgaWYgKHBhcnNlUXVlcnlTdHJpbmcpIHtcbiAgICAvLyBubyBxdWVyeSBzdHJpbmcsIGJ1dCBwYXJzZVF1ZXJ5U3RyaW5nIHN0aWxsIHJlcXVlc3RlZFxuICAgIHRoaXMuc2VhcmNoID0gJyc7XG4gICAgdGhpcy5xdWVyeSA9IHt9O1xuICB9XG4gIGlmIChyZXN0KSB7IHRoaXMucGF0aG5hbWUgPSByZXN0OyB9XG4gIGlmIChzbGFzaGVkUHJvdG9jb2xbbG93ZXJQcm90b10gJiYgdGhpcy5ob3N0bmFtZSAmJiAhdGhpcy5wYXRobmFtZSkge1xuICAgIHRoaXMucGF0aG5hbWUgPSAnLyc7XG4gIH1cblxuICAvLyB0byBzdXBwb3J0IGh0dHAucmVxdWVzdFxuICBpZiAodGhpcy5wYXRobmFtZSB8fCB0aGlzLnNlYXJjaCkge1xuICAgIHZhciBwID0gdGhpcy5wYXRobmFtZSB8fCAnJztcbiAgICB2YXIgcyA9IHRoaXMuc2VhcmNoIHx8ICcnO1xuICAgIHRoaXMucGF0aCA9IHAgKyBzO1xuICB9XG5cbiAgLy8gZmluYWxseSwgcmVjb25zdHJ1Y3QgdGhlIGhyZWYgYmFzZWQgb24gd2hhdCBoYXMgYmVlbiB2YWxpZGF0ZWQuXG4gIHRoaXMuaHJlZiA9IHRoaXMuZm9ybWF0KCk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLy8gZm9ybWF0IGEgcGFyc2VkIG9iamVjdCBpbnRvIGEgdXJsIHN0cmluZ1xuZnVuY3Rpb24gdXJsRm9ybWF0KG9iaikge1xuICAvKlxuICAgKiBlbnN1cmUgaXQncyBhbiBvYmplY3QsIGFuZCBub3QgYSBzdHJpbmcgdXJsLlxuICAgKiBJZiBpdCdzIGFuIG9iaiwgdGhpcyBpcyBhIG5vLW9wLlxuICAgKiB0aGlzIHdheSwgeW91IGNhbiBjYWxsIHVybF9mb3JtYXQoKSBvbiBzdHJpbmdzXG4gICAqIHRvIGNsZWFuIHVwIHBvdGVudGlhbGx5IHdvbmt5IHVybHMuXG4gICAqL1xuICBpZiAodHlwZW9mIG9iaiA9PT0gJ3N0cmluZycpIHsgb2JqID0gdXJsUGFyc2Uob2JqKTsgfVxuICBpZiAoIShvYmogaW5zdGFuY2VvZiBVcmwpKSB7IHJldHVybiBVcmwucHJvdG90eXBlLmZvcm1hdC5jYWxsKG9iaik7IH1cbiAgcmV0dXJuIG9iai5mb3JtYXQoKTtcbn1cblxuVXJsLnByb3RvdHlwZS5mb3JtYXQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBhdXRoID0gdGhpcy5hdXRoIHx8ICcnO1xuICBpZiAoYXV0aCkge1xuICAgIGF1dGggPSBlbmNvZGVVUklDb21wb25lbnQoYXV0aCk7XG4gICAgYXV0aCA9IGF1dGgucmVwbGFjZSgvJTNBL2ksICc6Jyk7XG4gICAgYXV0aCArPSAnQCc7XG4gIH1cblxuICB2YXIgcHJvdG9jb2wgPSB0aGlzLnByb3RvY29sIHx8ICcnLFxuICAgIHBhdGhuYW1lID0gdGhpcy5wYXRobmFtZSB8fCAnJyxcbiAgICBoYXNoID0gdGhpcy5oYXNoIHx8ICcnLFxuICAgIGhvc3QgPSBmYWxzZSxcbiAgICBxdWVyeSA9ICcnO1xuXG4gIGlmICh0aGlzLmhvc3QpIHtcbiAgICBob3N0ID0gYXV0aCArIHRoaXMuaG9zdDtcbiAgfSBlbHNlIGlmICh0aGlzLmhvc3RuYW1lKSB7XG4gICAgaG9zdCA9IGF1dGggKyAodGhpcy5ob3N0bmFtZS5pbmRleE9mKCc6JykgPT09IC0xID8gdGhpcy5ob3N0bmFtZSA6ICdbJyArIHRoaXMuaG9zdG5hbWUgKyAnXScpO1xuICAgIGlmICh0aGlzLnBvcnQpIHtcbiAgICAgIGhvc3QgKz0gJzonICsgdGhpcy5wb3J0O1xuICAgIH1cbiAgfVxuXG4gIGlmICh0aGlzLnF1ZXJ5ICYmIHR5cGVvZiB0aGlzLnF1ZXJ5ID09PSAnb2JqZWN0JyAmJiBPYmplY3Qua2V5cyh0aGlzLnF1ZXJ5KS5sZW5ndGgpIHtcbiAgICBxdWVyeSA9IHF1ZXJ5c3RyaW5nLnN0cmluZ2lmeSh0aGlzLnF1ZXJ5LCB7XG4gICAgICBhcnJheUZvcm1hdDogJ3JlcGVhdCcsXG4gICAgICBhZGRRdWVyeVByZWZpeDogZmFsc2VcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBzZWFyY2ggPSB0aGlzLnNlYXJjaCB8fCAocXVlcnkgJiYgKCc/JyArIHF1ZXJ5KSkgfHwgJyc7XG5cbiAgaWYgKHByb3RvY29sICYmIHByb3RvY29sLnN1YnN0cigtMSkgIT09ICc6JykgeyBwcm90b2NvbCArPSAnOic7IH1cblxuICAvKlxuICAgKiBvbmx5IHRoZSBzbGFzaGVkUHJvdG9jb2xzIGdldCB0aGUgLy8uICBOb3QgbWFpbHRvOiwgeG1wcDosIGV0Yy5cbiAgICogdW5sZXNzIHRoZXkgaGFkIHRoZW0gdG8gYmVnaW4gd2l0aC5cbiAgICovXG4gIGlmICh0aGlzLnNsYXNoZXMgfHwgKCFwcm90b2NvbCB8fCBzbGFzaGVkUHJvdG9jb2xbcHJvdG9jb2xdKSAmJiBob3N0ICE9PSBmYWxzZSkge1xuICAgIGhvc3QgPSAnLy8nICsgKGhvc3QgfHwgJycpO1xuICAgIGlmIChwYXRobmFtZSAmJiBwYXRobmFtZS5jaGFyQXQoMCkgIT09ICcvJykgeyBwYXRobmFtZSA9ICcvJyArIHBhdGhuYW1lOyB9XG4gIH0gZWxzZSBpZiAoIWhvc3QpIHtcbiAgICBob3N0ID0gJyc7XG4gIH1cblxuICBpZiAoaGFzaCAmJiBoYXNoLmNoYXJBdCgwKSAhPT0gJyMnKSB7IGhhc2ggPSAnIycgKyBoYXNoOyB9XG4gIGlmIChzZWFyY2ggJiYgc2VhcmNoLmNoYXJBdCgwKSAhPT0gJz8nKSB7IHNlYXJjaCA9ICc/JyArIHNlYXJjaDsgfVxuXG4gIHBhdGhuYW1lID0gcGF0aG5hbWUucmVwbGFjZSgvWz8jXS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KG1hdGNoKTtcbiAgfSk7XG4gIHNlYXJjaCA9IHNlYXJjaC5yZXBsYWNlKCcjJywgJyUyMycpO1xuXG4gIHJldHVybiBwcm90b2NvbCArIGhvc3QgKyBwYXRobmFtZSArIHNlYXJjaCArIGhhc2g7XG59O1xuXG5mdW5jdGlvbiB1cmxSZXNvbHZlKHNvdXJjZSwgcmVsYXRpdmUpIHtcbiAgcmV0dXJuIHVybFBhcnNlKHNvdXJjZSwgZmFsc2UsIHRydWUpLnJlc29sdmUocmVsYXRpdmUpO1xufVxuXG5VcmwucHJvdG90eXBlLnJlc29sdmUgPSBmdW5jdGlvbiAocmVsYXRpdmUpIHtcbiAgcmV0dXJuIHRoaXMucmVzb2x2ZU9iamVjdCh1cmxQYXJzZShyZWxhdGl2ZSwgZmFsc2UsIHRydWUpKS5mb3JtYXQoKTtcbn07XG5cbmZ1bmN0aW9uIHVybFJlc29sdmVPYmplY3Qoc291cmNlLCByZWxhdGl2ZSkge1xuICBpZiAoIXNvdXJjZSkgeyByZXR1cm4gcmVsYXRpdmU7IH1cbiAgcmV0dXJuIHVybFBhcnNlKHNvdXJjZSwgZmFsc2UsIHRydWUpLnJlc29sdmVPYmplY3QocmVsYXRpdmUpO1xufVxuXG5VcmwucHJvdG90eXBlLnJlc29sdmVPYmplY3QgPSBmdW5jdGlvbiAocmVsYXRpdmUpIHtcbiAgaWYgKHR5cGVvZiByZWxhdGl2ZSA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgcmVsID0gbmV3IFVybCgpO1xuICAgIHJlbC5wYXJzZShyZWxhdGl2ZSwgZmFsc2UsIHRydWUpO1xuICAgIHJlbGF0aXZlID0gcmVsO1xuICB9XG5cbiAgdmFyIHJlc3VsdCA9IG5ldyBVcmwoKTtcbiAgdmFyIHRrZXlzID0gT2JqZWN0LmtleXModGhpcyk7XG4gIGZvciAodmFyIHRrID0gMDsgdGsgPCB0a2V5cy5sZW5ndGg7IHRrKyspIHtcbiAgICB2YXIgdGtleSA9IHRrZXlzW3RrXTtcbiAgICByZXN1bHRbdGtleV0gPSB0aGlzW3RrZXldO1xuICB9XG5cbiAgLypcbiAgICogaGFzaCBpcyBhbHdheXMgb3ZlcnJpZGRlbiwgbm8gbWF0dGVyIHdoYXQuXG4gICAqIGV2ZW4gaHJlZj1cIlwiIHdpbGwgcmVtb3ZlIGl0LlxuICAgKi9cbiAgcmVzdWx0Lmhhc2ggPSByZWxhdGl2ZS5oYXNoO1xuXG4gIC8vIGlmIHRoZSByZWxhdGl2ZSB1cmwgaXMgZW1wdHksIHRoZW4gdGhlcmUncyBub3RoaW5nIGxlZnQgdG8gZG8gaGVyZS5cbiAgaWYgKHJlbGF0aXZlLmhyZWYgPT09ICcnKSB7XG4gICAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8vIGhyZWZzIGxpa2UgLy9mb28vYmFyIGFsd2F5cyBjdXQgdG8gdGhlIHByb3RvY29sLlxuICBpZiAocmVsYXRpdmUuc2xhc2hlcyAmJiAhcmVsYXRpdmUucHJvdG9jb2wpIHtcbiAgICAvLyB0YWtlIGV2ZXJ5dGhpbmcgZXhjZXB0IHRoZSBwcm90b2NvbCBmcm9tIHJlbGF0aXZlXG4gICAgdmFyIHJrZXlzID0gT2JqZWN0LmtleXMocmVsYXRpdmUpO1xuICAgIGZvciAodmFyIHJrID0gMDsgcmsgPCBya2V5cy5sZW5ndGg7IHJrKyspIHtcbiAgICAgIHZhciBya2V5ID0gcmtleXNbcmtdO1xuICAgICAgaWYgKHJrZXkgIT09ICdwcm90b2NvbCcpIHsgcmVzdWx0W3JrZXldID0gcmVsYXRpdmVbcmtleV07IH1cbiAgICB9XG5cbiAgICAvLyB1cmxQYXJzZSBhcHBlbmRzIHRyYWlsaW5nIC8gdG8gdXJscyBsaWtlIGh0dHA6Ly93d3cuZXhhbXBsZS5jb21cbiAgICBpZiAoc2xhc2hlZFByb3RvY29sW3Jlc3VsdC5wcm90b2NvbF0gJiYgcmVzdWx0Lmhvc3RuYW1lICYmICFyZXN1bHQucGF0aG5hbWUpIHtcbiAgICAgIHJlc3VsdC5wYXRobmFtZSA9ICcvJztcbiAgICAgIHJlc3VsdC5wYXRoID0gcmVzdWx0LnBhdGhuYW1lO1xuICAgIH1cblxuICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBpZiAocmVsYXRpdmUucHJvdG9jb2wgJiYgcmVsYXRpdmUucHJvdG9jb2wgIT09IHJlc3VsdC5wcm90b2NvbCkge1xuICAgIC8qXG4gICAgICogaWYgaXQncyBhIGtub3duIHVybCBwcm90b2NvbCwgdGhlbiBjaGFuZ2luZ1xuICAgICAqIHRoZSBwcm90b2NvbCBkb2VzIHdlaXJkIHRoaW5nc1xuICAgICAqIGZpcnN0LCBpZiBpdCdzIG5vdCBmaWxlOiwgdGhlbiB3ZSBNVVNUIGhhdmUgYSBob3N0LFxuICAgICAqIGFuZCBpZiB0aGVyZSB3YXMgYSBwYXRoXG4gICAgICogdG8gYmVnaW4gd2l0aCwgdGhlbiB3ZSBNVVNUIGhhdmUgYSBwYXRoLlxuICAgICAqIGlmIGl0IGlzIGZpbGU6LCB0aGVuIHRoZSBob3N0IGlzIGRyb3BwZWQsXG4gICAgICogYmVjYXVzZSB0aGF0J3Mga25vd24gdG8gYmUgaG9zdGxlc3MuXG4gICAgICogYW55dGhpbmcgZWxzZSBpcyBhc3N1bWVkIHRvIGJlIGFic29sdXRlLlxuICAgICAqL1xuICAgIGlmICghc2xhc2hlZFByb3RvY29sW3JlbGF0aXZlLnByb3RvY29sXSkge1xuICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhyZWxhdGl2ZSk7XG4gICAgICBmb3IgKHZhciB2ID0gMDsgdiA8IGtleXMubGVuZ3RoOyB2KyspIHtcbiAgICAgICAgdmFyIGsgPSBrZXlzW3ZdO1xuICAgICAgICByZXN1bHRba10gPSByZWxhdGl2ZVtrXTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICByZXN1bHQucHJvdG9jb2wgPSByZWxhdGl2ZS5wcm90b2NvbDtcbiAgICBpZiAoIXJlbGF0aXZlLmhvc3QgJiYgIWhvc3RsZXNzUHJvdG9jb2xbcmVsYXRpdmUucHJvdG9jb2xdKSB7XG4gICAgICB2YXIgcmVsUGF0aCA9IChyZWxhdGl2ZS5wYXRobmFtZSB8fCAnJykuc3BsaXQoJy8nKTtcbiAgICAgIHdoaWxlIChyZWxQYXRoLmxlbmd0aCAmJiAhKHJlbGF0aXZlLmhvc3QgPSByZWxQYXRoLnNoaWZ0KCkpKSB7IH1cbiAgICAgIGlmICghcmVsYXRpdmUuaG9zdCkgeyByZWxhdGl2ZS5ob3N0ID0gJyc7IH1cbiAgICAgIGlmICghcmVsYXRpdmUuaG9zdG5hbWUpIHsgcmVsYXRpdmUuaG9zdG5hbWUgPSAnJzsgfVxuICAgICAgaWYgKHJlbFBhdGhbMF0gIT09ICcnKSB7IHJlbFBhdGgudW5zaGlmdCgnJyk7IH1cbiAgICAgIGlmIChyZWxQYXRoLmxlbmd0aCA8IDIpIHsgcmVsUGF0aC51bnNoaWZ0KCcnKTsgfVxuICAgICAgcmVzdWx0LnBhdGhuYW1lID0gcmVsUGF0aC5qb2luKCcvJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdC5wYXRobmFtZSA9IHJlbGF0aXZlLnBhdGhuYW1lO1xuICAgIH1cbiAgICByZXN1bHQuc2VhcmNoID0gcmVsYXRpdmUuc2VhcmNoO1xuICAgIHJlc3VsdC5xdWVyeSA9IHJlbGF0aXZlLnF1ZXJ5O1xuICAgIHJlc3VsdC5ob3N0ID0gcmVsYXRpdmUuaG9zdCB8fCAnJztcbiAgICByZXN1bHQuYXV0aCA9IHJlbGF0aXZlLmF1dGg7XG4gICAgcmVzdWx0Lmhvc3RuYW1lID0gcmVsYXRpdmUuaG9zdG5hbWUgfHwgcmVsYXRpdmUuaG9zdDtcbiAgICByZXN1bHQucG9ydCA9IHJlbGF0aXZlLnBvcnQ7XG4gICAgLy8gdG8gc3VwcG9ydCBodHRwLnJlcXVlc3RcbiAgICBpZiAocmVzdWx0LnBhdGhuYW1lIHx8IHJlc3VsdC5zZWFyY2gpIHtcbiAgICAgIHZhciBwID0gcmVzdWx0LnBhdGhuYW1lIHx8ICcnO1xuICAgICAgdmFyIHMgPSByZXN1bHQuc2VhcmNoIHx8ICcnO1xuICAgICAgcmVzdWx0LnBhdGggPSBwICsgcztcbiAgICB9XG4gICAgcmVzdWx0LnNsYXNoZXMgPSByZXN1bHQuc2xhc2hlcyB8fCByZWxhdGl2ZS5zbGFzaGVzO1xuICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICB2YXIgaXNTb3VyY2VBYnMgPSByZXN1bHQucGF0aG5hbWUgJiYgcmVzdWx0LnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nLFxuICAgIGlzUmVsQWJzID0gcmVsYXRpdmUuaG9zdCB8fCByZWxhdGl2ZS5wYXRobmFtZSAmJiByZWxhdGl2ZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJyxcbiAgICBtdXN0RW5kQWJzID0gaXNSZWxBYnMgfHwgaXNTb3VyY2VBYnMgfHwgKHJlc3VsdC5ob3N0ICYmIHJlbGF0aXZlLnBhdGhuYW1lKSxcbiAgICByZW1vdmVBbGxEb3RzID0gbXVzdEVuZEFicyxcbiAgICBzcmNQYXRoID0gcmVzdWx0LnBhdGhuYW1lICYmIHJlc3VsdC5wYXRobmFtZS5zcGxpdCgnLycpIHx8IFtdLFxuICAgIHJlbFBhdGggPSByZWxhdGl2ZS5wYXRobmFtZSAmJiByZWxhdGl2ZS5wYXRobmFtZS5zcGxpdCgnLycpIHx8IFtdLFxuICAgIHBzeWNob3RpYyA9IHJlc3VsdC5wcm90b2NvbCAmJiAhc2xhc2hlZFByb3RvY29sW3Jlc3VsdC5wcm90b2NvbF07XG5cbiAgLypcbiAgICogaWYgdGhlIHVybCBpcyBhIG5vbi1zbGFzaGVkIHVybCwgdGhlbiByZWxhdGl2ZVxuICAgKiBsaW5rcyBsaWtlIC4uLy4uIHNob3VsZCBiZSBhYmxlXG4gICAqIHRvIGNyYXdsIHVwIHRvIHRoZSBob3N0bmFtZSwgYXMgd2VsbC4gIFRoaXMgaXMgc3RyYW5nZS5cbiAgICogcmVzdWx0LnByb3RvY29sIGhhcyBhbHJlYWR5IGJlZW4gc2V0IGJ5IG5vdy5cbiAgICogTGF0ZXIgb24sIHB1dCB0aGUgZmlyc3QgcGF0aCBwYXJ0IGludG8gdGhlIGhvc3QgZmllbGQuXG4gICAqL1xuICBpZiAocHN5Y2hvdGljKSB7XG4gICAgcmVzdWx0Lmhvc3RuYW1lID0gJyc7XG4gICAgcmVzdWx0LnBvcnQgPSBudWxsO1xuICAgIGlmIChyZXN1bHQuaG9zdCkge1xuICAgICAgaWYgKHNyY1BhdGhbMF0gPT09ICcnKSB7IHNyY1BhdGhbMF0gPSByZXN1bHQuaG9zdDsgfSBlbHNlIHsgc3JjUGF0aC51bnNoaWZ0KHJlc3VsdC5ob3N0KTsgfVxuICAgIH1cbiAgICByZXN1bHQuaG9zdCA9ICcnO1xuICAgIGlmIChyZWxhdGl2ZS5wcm90b2NvbCkge1xuICAgICAgcmVsYXRpdmUuaG9zdG5hbWUgPSBudWxsO1xuICAgICAgcmVsYXRpdmUucG9ydCA9IG51bGw7XG4gICAgICBpZiAocmVsYXRpdmUuaG9zdCkge1xuICAgICAgICBpZiAocmVsUGF0aFswXSA9PT0gJycpIHsgcmVsUGF0aFswXSA9IHJlbGF0aXZlLmhvc3Q7IH0gZWxzZSB7IHJlbFBhdGgudW5zaGlmdChyZWxhdGl2ZS5ob3N0KTsgfVxuICAgICAgfVxuICAgICAgcmVsYXRpdmUuaG9zdCA9IG51bGw7XG4gICAgfVxuICAgIG11c3RFbmRBYnMgPSBtdXN0RW5kQWJzICYmIChyZWxQYXRoWzBdID09PSAnJyB8fCBzcmNQYXRoWzBdID09PSAnJyk7XG4gIH1cblxuICBpZiAoaXNSZWxBYnMpIHtcbiAgICAvLyBpdCdzIGFic29sdXRlLlxuICAgIHJlc3VsdC5ob3N0ID0gcmVsYXRpdmUuaG9zdCB8fCByZWxhdGl2ZS5ob3N0ID09PSAnJyA/IHJlbGF0aXZlLmhvc3QgOiByZXN1bHQuaG9zdDtcbiAgICByZXN1bHQuaG9zdG5hbWUgPSByZWxhdGl2ZS5ob3N0bmFtZSB8fCByZWxhdGl2ZS5ob3N0bmFtZSA9PT0gJycgPyByZWxhdGl2ZS5ob3N0bmFtZSA6IHJlc3VsdC5ob3N0bmFtZTtcbiAgICByZXN1bHQuc2VhcmNoID0gcmVsYXRpdmUuc2VhcmNoO1xuICAgIHJlc3VsdC5xdWVyeSA9IHJlbGF0aXZlLnF1ZXJ5O1xuICAgIHNyY1BhdGggPSByZWxQYXRoO1xuICAgIC8vIGZhbGwgdGhyb3VnaCB0byB0aGUgZG90LWhhbmRsaW5nIGJlbG93LlxuICB9IGVsc2UgaWYgKHJlbFBhdGgubGVuZ3RoKSB7XG4gICAgLypcbiAgICAgKiBpdCdzIHJlbGF0aXZlXG4gICAgICogdGhyb3cgYXdheSB0aGUgZXhpc3RpbmcgZmlsZSwgYW5kIHRha2UgdGhlIG5ldyBwYXRoIGluc3RlYWQuXG4gICAgICovXG4gICAgaWYgKCFzcmNQYXRoKSB7IHNyY1BhdGggPSBbXTsgfVxuICAgIHNyY1BhdGgucG9wKCk7XG4gICAgc3JjUGF0aCA9IHNyY1BhdGguY29uY2F0KHJlbFBhdGgpO1xuICAgIHJlc3VsdC5zZWFyY2ggPSByZWxhdGl2ZS5zZWFyY2g7XG4gICAgcmVzdWx0LnF1ZXJ5ID0gcmVsYXRpdmUucXVlcnk7XG4gIH0gZWxzZSBpZiAocmVsYXRpdmUuc2VhcmNoICE9IG51bGwpIHtcbiAgICAvKlxuICAgICAqIGp1c3QgcHVsbCBvdXQgdGhlIHNlYXJjaC5cbiAgICAgKiBsaWtlIGhyZWY9Jz9mb28nLlxuICAgICAqIFB1dCB0aGlzIGFmdGVyIHRoZSBvdGhlciB0d28gY2FzZXMgYmVjYXVzZSBpdCBzaW1wbGlmaWVzIHRoZSBib29sZWFuc1xuICAgICAqL1xuICAgIGlmIChwc3ljaG90aWMpIHtcbiAgICAgIHJlc3VsdC5ob3N0ID0gc3JjUGF0aC5zaGlmdCgpO1xuICAgICAgcmVzdWx0Lmhvc3RuYW1lID0gcmVzdWx0Lmhvc3Q7XG4gICAgICAvKlxuICAgICAgICogb2NjYXRpb25hbHkgdGhlIGF1dGggY2FuIGdldCBzdHVjayBvbmx5IGluIGhvc3RcbiAgICAgICAqIHRoaXMgZXNwZWNpYWxseSBoYXBwZW5zIGluIGNhc2VzIGxpa2VcbiAgICAgICAqIHVybC5yZXNvbHZlT2JqZWN0KCdtYWlsdG86bG9jYWwxQGRvbWFpbjEnLCAnbG9jYWwyQGRvbWFpbjInKVxuICAgICAgICovXG4gICAgICB2YXIgYXV0aEluSG9zdCA9IHJlc3VsdC5ob3N0ICYmIHJlc3VsdC5ob3N0LmluZGV4T2YoJ0AnKSA+IDAgPyByZXN1bHQuaG9zdC5zcGxpdCgnQCcpIDogZmFsc2U7XG4gICAgICBpZiAoYXV0aEluSG9zdCkge1xuICAgICAgICByZXN1bHQuYXV0aCA9IGF1dGhJbkhvc3Quc2hpZnQoKTtcbiAgICAgICAgcmVzdWx0Lmhvc3RuYW1lID0gYXV0aEluSG9zdC5zaGlmdCgpO1xuICAgICAgICByZXN1bHQuaG9zdCA9IHJlc3VsdC5ob3N0bmFtZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzdWx0LnNlYXJjaCA9IHJlbGF0aXZlLnNlYXJjaDtcbiAgICByZXN1bHQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeTtcbiAgICAvLyB0byBzdXBwb3J0IGh0dHAucmVxdWVzdFxuICAgIGlmIChyZXN1bHQucGF0aG5hbWUgIT09IG51bGwgfHwgcmVzdWx0LnNlYXJjaCAhPT0gbnVsbCkge1xuICAgICAgcmVzdWx0LnBhdGggPSAocmVzdWx0LnBhdGhuYW1lID8gcmVzdWx0LnBhdGhuYW1lIDogJycpICsgKHJlc3VsdC5zZWFyY2ggPyByZXN1bHQuc2VhcmNoIDogJycpO1xuICAgIH1cbiAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgaWYgKCFzcmNQYXRoLmxlbmd0aCkge1xuICAgIC8qXG4gICAgICogbm8gcGF0aCBhdCBhbGwuICBlYXN5LlxuICAgICAqIHdlJ3ZlIGFscmVhZHkgaGFuZGxlZCB0aGUgb3RoZXIgc3R1ZmYgYWJvdmUuXG4gICAgICovXG4gICAgcmVzdWx0LnBhdGhuYW1lID0gbnVsbDtcbiAgICAvLyB0byBzdXBwb3J0IGh0dHAucmVxdWVzdFxuICAgIGlmIChyZXN1bHQuc2VhcmNoKSB7XG4gICAgICByZXN1bHQucGF0aCA9ICcvJyArIHJlc3VsdC5zZWFyY2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdC5wYXRoID0gbnVsbDtcbiAgICB9XG4gICAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qXG4gICAqIGlmIGEgdXJsIEVORHMgaW4gLiBvciAuLiwgdGhlbiBpdCBtdXN0IGdldCBhIHRyYWlsaW5nIHNsYXNoLlxuICAgKiBob3dldmVyLCBpZiBpdCBlbmRzIGluIGFueXRoaW5nIGVsc2Ugbm9uLXNsYXNoeSxcbiAgICogdGhlbiBpdCBtdXN0IE5PVCBnZXQgYSB0cmFpbGluZyBzbGFzaC5cbiAgICovXG4gIHZhciBsYXN0ID0gc3JjUGF0aC5zbGljZSgtMSlbMF07XG4gIHZhciBoYXNUcmFpbGluZ1NsYXNoID0gKHJlc3VsdC5ob3N0IHx8IHJlbGF0aXZlLmhvc3QgfHwgc3JjUGF0aC5sZW5ndGggPiAxKSAmJiAobGFzdCA9PT0gJy4nIHx8IGxhc3QgPT09ICcuLicpIHx8IGxhc3QgPT09ICcnO1xuXG4gIC8qXG4gICAqIHN0cmlwIHNpbmdsZSBkb3RzLCByZXNvbHZlIGRvdWJsZSBkb3RzIHRvIHBhcmVudCBkaXJcbiAgICogaWYgdGhlIHBhdGggdHJpZXMgdG8gZ28gYWJvdmUgdGhlIHJvb3QsIGB1cGAgZW5kcyB1cCA+IDBcbiAgICovXG4gIHZhciB1cCA9IDA7XG4gIGZvciAodmFyIGkgPSBzcmNQYXRoLmxlbmd0aDsgaSA+PSAwOyBpLS0pIHtcbiAgICBsYXN0ID0gc3JjUGF0aFtpXTtcbiAgICBpZiAobGFzdCA9PT0gJy4nKSB7XG4gICAgICBzcmNQYXRoLnNwbGljZShpLCAxKTtcbiAgICB9IGVsc2UgaWYgKGxhc3QgPT09ICcuLicpIHtcbiAgICAgIHNyY1BhdGguc3BsaWNlKGksIDEpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBzcmNQYXRoLnNwbGljZShpLCAxKTtcbiAgICAgIHVwLS07XG4gICAgfVxuICB9XG5cbiAgLy8gaWYgdGhlIHBhdGggaXMgYWxsb3dlZCB0byBnbyBhYm92ZSB0aGUgcm9vdCwgcmVzdG9yZSBsZWFkaW5nIC4uc1xuICBpZiAoIW11c3RFbmRBYnMgJiYgIXJlbW92ZUFsbERvdHMpIHtcbiAgICBmb3IgKDsgdXAtLTsgdXApIHtcbiAgICAgIHNyY1BhdGgudW5zaGlmdCgnLi4nKTtcbiAgICB9XG4gIH1cblxuICBpZiAobXVzdEVuZEFicyAmJiBzcmNQYXRoWzBdICE9PSAnJyAmJiAoIXNyY1BhdGhbMF0gfHwgc3JjUGF0aFswXS5jaGFyQXQoMCkgIT09ICcvJykpIHtcbiAgICBzcmNQYXRoLnVuc2hpZnQoJycpO1xuICB9XG5cbiAgaWYgKGhhc1RyYWlsaW5nU2xhc2ggJiYgKHNyY1BhdGguam9pbignLycpLnN1YnN0cigtMSkgIT09ICcvJykpIHtcbiAgICBzcmNQYXRoLnB1c2goJycpO1xuICB9XG5cbiAgdmFyIGlzQWJzb2x1dGUgPSBzcmNQYXRoWzBdID09PSAnJyB8fCAoc3JjUGF0aFswXSAmJiBzcmNQYXRoWzBdLmNoYXJBdCgwKSA9PT0gJy8nKTtcblxuICAvLyBwdXQgdGhlIGhvc3QgYmFja1xuICBpZiAocHN5Y2hvdGljKSB7XG4gICAgcmVzdWx0Lmhvc3RuYW1lID0gaXNBYnNvbHV0ZSA/ICcnIDogc3JjUGF0aC5sZW5ndGggPyBzcmNQYXRoLnNoaWZ0KCkgOiAnJztcbiAgICByZXN1bHQuaG9zdCA9IHJlc3VsdC5ob3N0bmFtZTtcbiAgICAvKlxuICAgICAqIG9jY2F0aW9uYWx5IHRoZSBhdXRoIGNhbiBnZXQgc3R1Y2sgb25seSBpbiBob3N0XG4gICAgICogdGhpcyBlc3BlY2lhbGx5IGhhcHBlbnMgaW4gY2FzZXMgbGlrZVxuICAgICAqIHVybC5yZXNvbHZlT2JqZWN0KCdtYWlsdG86bG9jYWwxQGRvbWFpbjEnLCAnbG9jYWwyQGRvbWFpbjInKVxuICAgICAqL1xuICAgIHZhciBhdXRoSW5Ib3N0ID0gcmVzdWx0Lmhvc3QgJiYgcmVzdWx0Lmhvc3QuaW5kZXhPZignQCcpID4gMCA/IHJlc3VsdC5ob3N0LnNwbGl0KCdAJykgOiBmYWxzZTtcbiAgICBpZiAoYXV0aEluSG9zdCkge1xuICAgICAgcmVzdWx0LmF1dGggPSBhdXRoSW5Ib3N0LnNoaWZ0KCk7XG4gICAgICByZXN1bHQuaG9zdG5hbWUgPSBhdXRoSW5Ib3N0LnNoaWZ0KCk7XG4gICAgICByZXN1bHQuaG9zdCA9IHJlc3VsdC5ob3N0bmFtZTtcbiAgICB9XG4gIH1cblxuICBtdXN0RW5kQWJzID0gbXVzdEVuZEFicyB8fCAocmVzdWx0Lmhvc3QgJiYgc3JjUGF0aC5sZW5ndGgpO1xuXG4gIGlmIChtdXN0RW5kQWJzICYmICFpc0Fic29sdXRlKSB7XG4gICAgc3JjUGF0aC51bnNoaWZ0KCcnKTtcbiAgfVxuXG4gIGlmIChzcmNQYXRoLmxlbmd0aCA+IDApIHtcbiAgICByZXN1bHQucGF0aG5hbWUgPSBzcmNQYXRoLmpvaW4oJy8nKTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQucGF0aG5hbWUgPSBudWxsO1xuICAgIHJlc3VsdC5wYXRoID0gbnVsbDtcbiAgfVxuXG4gIC8vIHRvIHN1cHBvcnQgcmVxdWVzdC5odHRwXG4gIGlmIChyZXN1bHQucGF0aG5hbWUgIT09IG51bGwgfHwgcmVzdWx0LnNlYXJjaCAhPT0gbnVsbCkge1xuICAgIHJlc3VsdC5wYXRoID0gKHJlc3VsdC5wYXRobmFtZSA/IHJlc3VsdC5wYXRobmFtZSA6ICcnKSArIChyZXN1bHQuc2VhcmNoID8gcmVzdWx0LnNlYXJjaCA6ICcnKTtcbiAgfVxuICByZXN1bHQuYXV0aCA9IHJlbGF0aXZlLmF1dGggfHwgcmVzdWx0LmF1dGg7XG4gIHJlc3VsdC5zbGFzaGVzID0gcmVzdWx0LnNsYXNoZXMgfHwgcmVsYXRpdmUuc2xhc2hlcztcbiAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5VcmwucHJvdG90eXBlLnBhcnNlSG9zdCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhvc3QgPSB0aGlzLmhvc3Q7XG4gIHZhciBwb3J0ID0gcG9ydFBhdHRlcm4uZXhlYyhob3N0KTtcbiAgaWYgKHBvcnQpIHtcbiAgICBwb3J0ID0gcG9ydFswXTtcbiAgICBpZiAocG9ydCAhPT0gJzonKSB7XG4gICAgICB0aGlzLnBvcnQgPSBwb3J0LnN1YnN0cigxKTtcbiAgICB9XG4gICAgaG9zdCA9IGhvc3Quc3Vic3RyKDAsIGhvc3QubGVuZ3RoIC0gcG9ydC5sZW5ndGgpO1xuICB9XG4gIGlmIChob3N0KSB7IHRoaXMuaG9zdG5hbWUgPSBob3N0OyB9XG59O1xuXG5leHBvcnRzLnBhcnNlID0gdXJsUGFyc2U7XG5leHBvcnRzLnJlc29sdmUgPSB1cmxSZXNvbHZlO1xuZXhwb3J0cy5yZXNvbHZlT2JqZWN0ID0gdXJsUmVzb2x2ZU9iamVjdDtcbmV4cG9ydHMuZm9ybWF0ID0gdXJsRm9ybWF0O1xuXG5leHBvcnRzLlVybCA9IFVybDtcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvdHlwZS1idWlsdGlucyAqL1xudmFyIGcgPVxuICAodHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnICYmIGdsb2JhbFRoaXMpIHx8XG4gICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgJiYgc2VsZikgfHxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyAmJiBnbG9iYWwpIHx8XG4gIHt9XG5cbnZhciBzdXBwb3J0ID0ge1xuICBzZWFyY2hQYXJhbXM6ICdVUkxTZWFyY2hQYXJhbXMnIGluIGcsXG4gIGl0ZXJhYmxlOiAnU3ltYm9sJyBpbiBnICYmICdpdGVyYXRvcicgaW4gU3ltYm9sLFxuICBibG9iOlxuICAgICdGaWxlUmVhZGVyJyBpbiBnICYmXG4gICAgJ0Jsb2InIGluIGcgJiZcbiAgICAoZnVuY3Rpb24oKSB7XG4gICAgICB0cnkge1xuICAgICAgICBuZXcgQmxvYigpXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH0pKCksXG4gIGZvcm1EYXRhOiAnRm9ybURhdGEnIGluIGcsXG4gIGFycmF5QnVmZmVyOiAnQXJyYXlCdWZmZXInIGluIGdcbn1cblxuZnVuY3Rpb24gaXNEYXRhVmlldyhvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBEYXRhVmlldy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihvYmopXG59XG5cbmlmIChzdXBwb3J0LmFycmF5QnVmZmVyKSB7XG4gIHZhciB2aWV3Q2xhc3NlcyA9IFtcbiAgICAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgJ1tvYmplY3QgVWludDMyQXJyYXldJyxcbiAgICAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICAnW29iamVjdCBGbG9hdDY0QXJyYXldJ1xuICBdXG5cbiAgdmFyIGlzQXJyYXlCdWZmZXJWaWV3ID1cbiAgICBBcnJheUJ1ZmZlci5pc1ZpZXcgfHxcbiAgICBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgdmlld0NsYXNzZXMuaW5kZXhPZihPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSkgPiAtMVxuICAgIH1cbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplTmFtZShuYW1lKSB7XG4gIGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICBuYW1lID0gU3RyaW5nKG5hbWUpXG4gIH1cbiAgaWYgKC9bXmEtejAtOVxcLSMkJSYnKisuXl9gfH4hXS9pLnRlc3QobmFtZSkgfHwgbmFtZSA9PT0gJycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGNoYXJhY3RlciBpbiBoZWFkZXIgZmllbGQgbmFtZTogXCInICsgbmFtZSArICdcIicpXG4gIH1cbiAgcmV0dXJuIG5hbWUudG9Mb3dlckNhc2UoKVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVWYWx1ZSh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgIHZhbHVlID0gU3RyaW5nKHZhbHVlKVxuICB9XG4gIHJldHVybiB2YWx1ZVxufVxuXG4vLyBCdWlsZCBhIGRlc3RydWN0aXZlIGl0ZXJhdG9yIGZvciB0aGUgdmFsdWUgbGlzdFxuZnVuY3Rpb24gaXRlcmF0b3JGb3IoaXRlbXMpIHtcbiAgdmFyIGl0ZXJhdG9yID0ge1xuICAgIG5leHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHZhbHVlID0gaXRlbXMuc2hpZnQoKVxuICAgICAgcmV0dXJuIHtkb25lOiB2YWx1ZSA9PT0gdW5kZWZpbmVkLCB2YWx1ZTogdmFsdWV9XG4gICAgfVxuICB9XG5cbiAgaWYgKHN1cHBvcnQuaXRlcmFibGUpIHtcbiAgICBpdGVyYXRvcltTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gaXRlcmF0b3JcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaXRlcmF0b3Jcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEhlYWRlcnMoaGVhZGVycykge1xuICB0aGlzLm1hcCA9IHt9XG5cbiAgaWYgKGhlYWRlcnMgaW5zdGFuY2VvZiBIZWFkZXJzKSB7XG4gICAgaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICB0aGlzLmFwcGVuZChuYW1lLCB2YWx1ZSlcbiAgICB9LCB0aGlzKVxuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaGVhZGVycykpIHtcbiAgICBoZWFkZXJzLmZvckVhY2goZnVuY3Rpb24oaGVhZGVyKSB7XG4gICAgICBpZiAoaGVhZGVyLmxlbmd0aCAhPSAyKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0hlYWRlcnMgY29uc3RydWN0b3I6IGV4cGVjdGVkIG5hbWUvdmFsdWUgcGFpciB0byBiZSBsZW5ndGggMiwgZm91bmQnICsgaGVhZGVyLmxlbmd0aClcbiAgICAgIH1cbiAgICAgIHRoaXMuYXBwZW5kKGhlYWRlclswXSwgaGVhZGVyWzFdKVxuICAgIH0sIHRoaXMpXG4gIH0gZWxzZSBpZiAoaGVhZGVycykge1xuICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGhlYWRlcnMpLmZvckVhY2goZnVuY3Rpb24obmFtZSkge1xuICAgICAgdGhpcy5hcHBlbmQobmFtZSwgaGVhZGVyc1tuYW1lXSlcbiAgICB9LCB0aGlzKVxuICB9XG59XG5cbkhlYWRlcnMucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIG5hbWUgPSBub3JtYWxpemVOYW1lKG5hbWUpXG4gIHZhbHVlID0gbm9ybWFsaXplVmFsdWUodmFsdWUpXG4gIHZhciBvbGRWYWx1ZSA9IHRoaXMubWFwW25hbWVdXG4gIHRoaXMubWFwW25hbWVdID0gb2xkVmFsdWUgPyBvbGRWYWx1ZSArICcsICcgKyB2YWx1ZSA6IHZhbHVlXG59XG5cbkhlYWRlcnMucHJvdG90eXBlWydkZWxldGUnXSA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgZGVsZXRlIHRoaXMubWFwW25vcm1hbGl6ZU5hbWUobmFtZSldXG59XG5cbkhlYWRlcnMucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgbmFtZSA9IG5vcm1hbGl6ZU5hbWUobmFtZSlcbiAgcmV0dXJuIHRoaXMuaGFzKG5hbWUpID8gdGhpcy5tYXBbbmFtZV0gOiBudWxsXG59XG5cbkhlYWRlcnMucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgcmV0dXJuIHRoaXMubWFwLmhhc093blByb3BlcnR5KG5vcm1hbGl6ZU5hbWUobmFtZSkpXG59XG5cbkhlYWRlcnMucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHRoaXMubWFwW25vcm1hbGl6ZU5hbWUobmFtZSldID0gbm9ybWFsaXplVmFsdWUodmFsdWUpXG59XG5cbkhlYWRlcnMucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbihjYWxsYmFjaywgdGhpc0FyZykge1xuICBmb3IgKHZhciBuYW1lIGluIHRoaXMubWFwKSB7XG4gICAgaWYgKHRoaXMubWFwLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICBjYWxsYmFjay5jYWxsKHRoaXNBcmcsIHRoaXMubWFwW25hbWVdLCBuYW1lLCB0aGlzKVxuICAgIH1cbiAgfVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5rZXlzID0gZnVuY3Rpb24oKSB7XG4gIHZhciBpdGVtcyA9IFtdXG4gIHRoaXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgIGl0ZW1zLnB1c2gobmFtZSlcbiAgfSlcbiAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS52YWx1ZXMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGl0ZW1zID0gW11cbiAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaXRlbXMucHVzaCh2YWx1ZSlcbiAgfSlcbiAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5lbnRyaWVzID0gZnVuY3Rpb24oKSB7XG4gIHZhciBpdGVtcyA9IFtdXG4gIHRoaXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgIGl0ZW1zLnB1c2goW25hbWUsIHZhbHVlXSlcbiAgfSlcbiAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKVxufVxuXG5pZiAoc3VwcG9ydC5pdGVyYWJsZSkge1xuICBIZWFkZXJzLnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdID0gSGVhZGVycy5wcm90b3R5cGUuZW50cmllc1xufVxuXG5mdW5jdGlvbiBjb25zdW1lZChib2R5KSB7XG4gIGlmIChib2R5Ll9ub0JvZHkpIHJldHVyblxuICBpZiAoYm9keS5ib2R5VXNlZCkge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgVHlwZUVycm9yKCdBbHJlYWR5IHJlYWQnKSlcbiAgfVxuICBib2R5LmJvZHlVc2VkID0gdHJ1ZVxufVxuXG5mdW5jdGlvbiBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXNvbHZlKHJlYWRlci5yZXN1bHQpXG4gICAgfVxuICAgIHJlYWRlci5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICByZWplY3QocmVhZGVyLmVycm9yKVxuICAgIH1cbiAgfSlcbn1cblxuZnVuY3Rpb24gcmVhZEJsb2JBc0FycmF5QnVmZmVyKGJsb2IpIHtcbiAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKClcbiAgdmFyIHByb21pc2UgPSBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKVxuICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoYmxvYilcbiAgcmV0dXJuIHByb21pc2Vcbn1cblxuZnVuY3Rpb24gcmVhZEJsb2JBc1RleHQoYmxvYikge1xuICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKVxuICB2YXIgcHJvbWlzZSA9IGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpXG4gIHZhciBtYXRjaCA9IC9jaGFyc2V0PShbQS1aYS16MC05Xy1dKykvLmV4ZWMoYmxvYi50eXBlKVxuICB2YXIgZW5jb2RpbmcgPSBtYXRjaCA/IG1hdGNoWzFdIDogJ3V0Zi04J1xuICByZWFkZXIucmVhZEFzVGV4dChibG9iLCBlbmNvZGluZylcbiAgcmV0dXJuIHByb21pc2Vcbn1cblxuZnVuY3Rpb24gcmVhZEFycmF5QnVmZmVyQXNUZXh0KGJ1Zikge1xuICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGJ1ZilcbiAgdmFyIGNoYXJzID0gbmV3IEFycmF5KHZpZXcubGVuZ3RoKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmlldy5sZW5ndGg7IGkrKykge1xuICAgIGNoYXJzW2ldID0gU3RyaW5nLmZyb21DaGFyQ29kZSh2aWV3W2ldKVxuICB9XG4gIHJldHVybiBjaGFycy5qb2luKCcnKVxufVxuXG5mdW5jdGlvbiBidWZmZXJDbG9uZShidWYpIHtcbiAgaWYgKGJ1Zi5zbGljZSkge1xuICAgIHJldHVybiBidWYuc2xpY2UoMClcbiAgfSBlbHNlIHtcbiAgICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGJ1Zi5ieXRlTGVuZ3RoKVxuICAgIHZpZXcuc2V0KG5ldyBVaW50OEFycmF5KGJ1ZikpXG4gICAgcmV0dXJuIHZpZXcuYnVmZmVyXG4gIH1cbn1cblxuZnVuY3Rpb24gQm9keSgpIHtcbiAgdGhpcy5ib2R5VXNlZCA9IGZhbHNlXG5cbiAgdGhpcy5faW5pdEJvZHkgPSBmdW5jdGlvbihib2R5KSB7XG4gICAgLypcbiAgICAgIGZldGNoLW1vY2sgd3JhcHMgdGhlIFJlc3BvbnNlIG9iamVjdCBpbiBhbiBFUzYgUHJveHkgdG9cbiAgICAgIHByb3ZpZGUgdXNlZnVsIHRlc3QgaGFybmVzcyBmZWF0dXJlcyBzdWNoIGFzIGZsdXNoLiBIb3dldmVyLCBvblxuICAgICAgRVM1IGJyb3dzZXJzIHdpdGhvdXQgZmV0Y2ggb3IgUHJveHkgc3VwcG9ydCBwb2xseWZpbGxzIG11c3QgYmUgdXNlZDtcbiAgICAgIHRoZSBwcm94eS1wb2xseWZpbGwgaXMgdW5hYmxlIHRvIHByb3h5IGFuIGF0dHJpYnV0ZSB1bmxlc3MgaXQgZXhpc3RzXG4gICAgICBvbiB0aGUgb2JqZWN0IGJlZm9yZSB0aGUgUHJveHkgaXMgY3JlYXRlZC4gVGhpcyBjaGFuZ2UgZW5zdXJlc1xuICAgICAgUmVzcG9uc2UuYm9keVVzZWQgZXhpc3RzIG9uIHRoZSBpbnN0YW5jZSwgd2hpbGUgbWFpbnRhaW5pbmcgdGhlXG4gICAgICBzZW1hbnRpYyBvZiBzZXR0aW5nIFJlcXVlc3QuYm9keVVzZWQgaW4gdGhlIGNvbnN0cnVjdG9yIGJlZm9yZVxuICAgICAgX2luaXRCb2R5IGlzIGNhbGxlZC5cbiAgICAqL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWFzc2lnblxuICAgIHRoaXMuYm9keVVzZWQgPSB0aGlzLmJvZHlVc2VkXG4gICAgdGhpcy5fYm9keUluaXQgPSBib2R5XG4gICAgaWYgKCFib2R5KSB7XG4gICAgICB0aGlzLl9ub0JvZHkgPSB0cnVlO1xuICAgICAgdGhpcy5fYm9keVRleHQgPSAnJ1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLl9ib2R5VGV4dCA9IGJvZHlcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYmxvYiAmJiBCbG9iLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICB0aGlzLl9ib2R5QmxvYiA9IGJvZHlcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuZm9ybURhdGEgJiYgRm9ybURhdGEucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgIHRoaXMuX2JvZHlGb3JtRGF0YSA9IGJvZHlcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuc2VhcmNoUGFyYW1zICYmIFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgdGhpcy5fYm9keVRleHQgPSBib2R5LnRvU3RyaW5nKClcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIgJiYgc3VwcG9ydC5ibG9iICYmIGlzRGF0YVZpZXcoYm9keSkpIHtcbiAgICAgIHRoaXMuX2JvZHlBcnJheUJ1ZmZlciA9IGJ1ZmZlckNsb25lKGJvZHkuYnVmZmVyKVxuICAgICAgLy8gSUUgMTAtMTEgY2FuJ3QgaGFuZGxlIGEgRGF0YVZpZXcgYm9keS5cbiAgICAgIHRoaXMuX2JvZHlJbml0ID0gbmV3IEJsb2IoW3RoaXMuX2JvZHlBcnJheUJ1ZmZlcl0pXG4gICAgfSBlbHNlIGlmIChzdXBwb3J0LmFycmF5QnVmZmVyICYmIChBcnJheUJ1ZmZlci5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSB8fCBpc0FycmF5QnVmZmVyVmlldyhib2R5KSkpIHtcbiAgICAgIHRoaXMuX2JvZHlBcnJheUJ1ZmZlciA9IGJ1ZmZlckNsb25lKGJvZHkpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2JvZHlUZXh0ID0gYm9keSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChib2R5KVxuICAgIH1cblxuICAgIGlmICghdGhpcy5oZWFkZXJzLmdldCgnY29udGVudC10eXBlJykpIHtcbiAgICAgIGlmICh0eXBlb2YgYm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgJ3RleHQvcGxhaW47Y2hhcnNldD1VVEYtOCcpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlCbG9iICYmIHRoaXMuX2JvZHlCbG9iLnR5cGUpIHtcbiAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgdGhpcy5fYm9keUJsb2IudHlwZSlcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5zZWFyY2hQYXJhbXMgJiYgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD1VVEYtOCcpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKHN1cHBvcnQuYmxvYikge1xuICAgIHRoaXMuYmxvYiA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHJlamVjdGVkID0gY29uc3VtZWQodGhpcylcbiAgICAgIGlmIChyZWplY3RlZCkge1xuICAgICAgICByZXR1cm4gcmVqZWN0ZWRcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2JvZHlCbG9iKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keUJsb2IpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyBCbG9iKFt0aGlzLl9ib2R5QXJyYXlCdWZmZXJdKSlcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUZvcm1EYXRhKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IHJlYWQgRm9ybURhdGEgYm9keSBhcyBibG9iJylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IEJsb2IoW3RoaXMuX2JvZHlUZXh0XSkpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdGhpcy5hcnJheUJ1ZmZlciA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgIHZhciBpc0NvbnN1bWVkID0gY29uc3VtZWQodGhpcylcbiAgICAgIGlmIChpc0NvbnN1bWVkKSB7XG4gICAgICAgIHJldHVybiBpc0NvbnN1bWVkXG4gICAgICB9IGVsc2UgaWYgKEFycmF5QnVmZmVyLmlzVmlldyh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoXG4gICAgICAgICAgdGhpcy5fYm9keUFycmF5QnVmZmVyLmJ1ZmZlci5zbGljZShcbiAgICAgICAgICAgIHRoaXMuX2JvZHlBcnJheUJ1ZmZlci5ieXRlT2Zmc2V0LFxuICAgICAgICAgICAgdGhpcy5fYm9keUFycmF5QnVmZmVyLmJ5dGVPZmZzZXQgKyB0aGlzLl9ib2R5QXJyYXlCdWZmZXIuYnl0ZUxlbmd0aFxuICAgICAgICAgIClcbiAgICAgICAgKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpXG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzdXBwb3J0LmJsb2IpIHtcbiAgICAgIHJldHVybiB0aGlzLmJsb2IoKS50aGVuKHJlYWRCbG9iQXNBcnJheUJ1ZmZlcilcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZCBub3QgcmVhZCBhcyBBcnJheUJ1ZmZlcicpXG4gICAgfVxuICB9XG5cbiAgdGhpcy50ZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJlamVjdGVkID0gY29uc3VtZWQodGhpcylcbiAgICBpZiAocmVqZWN0ZWQpIHtcbiAgICAgIHJldHVybiByZWplY3RlZFxuICAgIH1cblxuICAgIGlmICh0aGlzLl9ib2R5QmxvYikge1xuICAgICAgcmV0dXJuIHJlYWRCbG9iQXNUZXh0KHRoaXMuX2JvZHlCbG9iKVxuICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUFycmF5QnVmZmVyKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlYWRBcnJheUJ1ZmZlckFzVGV4dCh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpKVxuICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUZvcm1EYXRhKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCByZWFkIEZvcm1EYXRhIGJvZHkgYXMgdGV4dCcpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keVRleHQpXG4gICAgfVxuICB9XG5cbiAgaWYgKHN1cHBvcnQuZm9ybURhdGEpIHtcbiAgICB0aGlzLmZvcm1EYXRhID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy50ZXh0KCkudGhlbihkZWNvZGUpXG4gICAgfVxuICB9XG5cbiAgdGhpcy5qc29uID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMudGV4dCgpLnRoZW4oSlNPTi5wYXJzZSlcbiAgfVxuXG4gIHJldHVybiB0aGlzXG59XG5cbi8vIEhUVFAgbWV0aG9kcyB3aG9zZSBjYXBpdGFsaXphdGlvbiBzaG91bGQgYmUgbm9ybWFsaXplZFxudmFyIG1ldGhvZHMgPSBbJ0NPTk5FQ1QnLCAnREVMRVRFJywgJ0dFVCcsICdIRUFEJywgJ09QVElPTlMnLCAnUEFUQ0gnLCAnUE9TVCcsICdQVVQnLCAnVFJBQ0UnXVxuXG5mdW5jdGlvbiBub3JtYWxpemVNZXRob2QobWV0aG9kKSB7XG4gIHZhciB1cGNhc2VkID0gbWV0aG9kLnRvVXBwZXJDYXNlKClcbiAgcmV0dXJuIG1ldGhvZHMuaW5kZXhPZih1cGNhc2VkKSA+IC0xID8gdXBjYXNlZCA6IG1ldGhvZFxufVxuXG5leHBvcnQgZnVuY3Rpb24gUmVxdWVzdChpbnB1dCwgb3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUmVxdWVzdCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQbGVhc2UgdXNlIHRoZSBcIm5ld1wiIG9wZXJhdG9yLCB0aGlzIERPTSBvYmplY3QgY29uc3RydWN0b3IgY2Fubm90IGJlIGNhbGxlZCBhcyBhIGZ1bmN0aW9uLicpXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuICB2YXIgYm9keSA9IG9wdGlvbnMuYm9keVxuXG4gIGlmIChpbnB1dCBpbnN0YW5jZW9mIFJlcXVlc3QpIHtcbiAgICBpZiAoaW5wdXQuYm9keVVzZWQpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FscmVhZHkgcmVhZCcpXG4gICAgfVxuICAgIHRoaXMudXJsID0gaW5wdXQudXJsXG4gICAgdGhpcy5jcmVkZW50aWFscyA9IGlucHV0LmNyZWRlbnRpYWxzXG4gICAgaWYgKCFvcHRpb25zLmhlYWRlcnMpIHtcbiAgICAgIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKGlucHV0LmhlYWRlcnMpXG4gICAgfVxuICAgIHRoaXMubWV0aG9kID0gaW5wdXQubWV0aG9kXG4gICAgdGhpcy5tb2RlID0gaW5wdXQubW9kZVxuICAgIHRoaXMuc2lnbmFsID0gaW5wdXQuc2lnbmFsXG4gICAgaWYgKCFib2R5ICYmIGlucHV0Ll9ib2R5SW5pdCAhPSBudWxsKSB7XG4gICAgICBib2R5ID0gaW5wdXQuX2JvZHlJbml0XG4gICAgICBpbnB1dC5ib2R5VXNlZCA9IHRydWVcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhpcy51cmwgPSBTdHJpbmcoaW5wdXQpXG4gIH1cblxuICB0aGlzLmNyZWRlbnRpYWxzID0gb3B0aW9ucy5jcmVkZW50aWFscyB8fCB0aGlzLmNyZWRlbnRpYWxzIHx8ICdzYW1lLW9yaWdpbidcbiAgaWYgKG9wdGlvbnMuaGVhZGVycyB8fCAhdGhpcy5oZWFkZXJzKSB7XG4gICAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMob3B0aW9ucy5oZWFkZXJzKVxuICB9XG4gIHRoaXMubWV0aG9kID0gbm9ybWFsaXplTWV0aG9kKG9wdGlvbnMubWV0aG9kIHx8IHRoaXMubWV0aG9kIHx8ICdHRVQnKVxuICB0aGlzLm1vZGUgPSBvcHRpb25zLm1vZGUgfHwgdGhpcy5tb2RlIHx8IG51bGxcbiAgdGhpcy5zaWduYWwgPSBvcHRpb25zLnNpZ25hbCB8fCB0aGlzLnNpZ25hbCB8fCAoZnVuY3Rpb24gKCkge1xuICAgIGlmICgnQWJvcnRDb250cm9sbGVyJyBpbiBnKSB7XG4gICAgICB2YXIgY3RybCA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICAgIHJldHVybiBjdHJsLnNpZ25hbDtcbiAgICB9XG4gIH0oKSk7XG4gIHRoaXMucmVmZXJyZXIgPSBudWxsXG5cbiAgaWYgKCh0aGlzLm1ldGhvZCA9PT0gJ0dFVCcgfHwgdGhpcy5tZXRob2QgPT09ICdIRUFEJykgJiYgYm9keSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JvZHkgbm90IGFsbG93ZWQgZm9yIEdFVCBvciBIRUFEIHJlcXVlc3RzJylcbiAgfVxuICB0aGlzLl9pbml0Qm9keShib2R5KVxuXG4gIGlmICh0aGlzLm1ldGhvZCA9PT0gJ0dFVCcgfHwgdGhpcy5tZXRob2QgPT09ICdIRUFEJykge1xuICAgIGlmIChvcHRpb25zLmNhY2hlID09PSAnbm8tc3RvcmUnIHx8IG9wdGlvbnMuY2FjaGUgPT09ICduby1jYWNoZScpIHtcbiAgICAgIC8vIFNlYXJjaCBmb3IgYSAnXycgcGFyYW1ldGVyIGluIHRoZSBxdWVyeSBzdHJpbmdcbiAgICAgIHZhciByZVBhcmFtU2VhcmNoID0gLyhbPyZdKV89W14mXSovXG4gICAgICBpZiAocmVQYXJhbVNlYXJjaC50ZXN0KHRoaXMudXJsKSkge1xuICAgICAgICAvLyBJZiBpdCBhbHJlYWR5IGV4aXN0cyB0aGVuIHNldCB0aGUgdmFsdWUgd2l0aCB0aGUgY3VycmVudCB0aW1lXG4gICAgICAgIHRoaXMudXJsID0gdGhpcy51cmwucmVwbGFjZShyZVBhcmFtU2VhcmNoLCAnJDFfPScgKyBuZXcgRGF0ZSgpLmdldFRpbWUoKSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE90aGVyd2lzZSBhZGQgYSBuZXcgJ18nIHBhcmFtZXRlciB0byB0aGUgZW5kIHdpdGggdGhlIGN1cnJlbnQgdGltZVxuICAgICAgICB2YXIgcmVRdWVyeVN0cmluZyA9IC9cXD8vXG4gICAgICAgIHRoaXMudXJsICs9IChyZVF1ZXJ5U3RyaW5nLnRlc3QodGhpcy51cmwpID8gJyYnIDogJz8nKSArICdfPScgKyBuZXcgRGF0ZSgpLmdldFRpbWUoKVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5SZXF1ZXN0LnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFJlcXVlc3QodGhpcywge2JvZHk6IHRoaXMuX2JvZHlJbml0fSlcbn1cblxuZnVuY3Rpb24gZGVjb2RlKGJvZHkpIHtcbiAgdmFyIGZvcm0gPSBuZXcgRm9ybURhdGEoKVxuICBib2R5XG4gICAgLnRyaW0oKVxuICAgIC5zcGxpdCgnJicpXG4gICAgLmZvckVhY2goZnVuY3Rpb24oYnl0ZXMpIHtcbiAgICAgIGlmIChieXRlcykge1xuICAgICAgICB2YXIgc3BsaXQgPSBieXRlcy5zcGxpdCgnPScpXG4gICAgICAgIHZhciBuYW1lID0gc3BsaXQuc2hpZnQoKS5yZXBsYWNlKC9cXCsvZywgJyAnKVxuICAgICAgICB2YXIgdmFsdWUgPSBzcGxpdC5qb2luKCc9JykucmVwbGFjZSgvXFwrL2csICcgJylcbiAgICAgICAgZm9ybS5hcHBlbmQoZGVjb2RlVVJJQ29tcG9uZW50KG5hbWUpLCBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpKVxuICAgICAgfVxuICAgIH0pXG4gIHJldHVybiBmb3JtXG59XG5cbmZ1bmN0aW9uIHBhcnNlSGVhZGVycyhyYXdIZWFkZXJzKSB7XG4gIHZhciBoZWFkZXJzID0gbmV3IEhlYWRlcnMoKVxuICAvLyBSZXBsYWNlIGluc3RhbmNlcyBvZiBcXHJcXG4gYW5kIFxcbiBmb2xsb3dlZCBieSBhdCBsZWFzdCBvbmUgc3BhY2Ugb3IgaG9yaXpvbnRhbCB0YWIgd2l0aCBhIHNwYWNlXG4gIC8vIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM3MjMwI3NlY3Rpb24tMy4yXG4gIHZhciBwcmVQcm9jZXNzZWRIZWFkZXJzID0gcmF3SGVhZGVycy5yZXBsYWNlKC9cXHI/XFxuW1xcdCBdKy9nLCAnICcpXG4gIC8vIEF2b2lkaW5nIHNwbGl0IHZpYSByZWdleCB0byB3b3JrIGFyb3VuZCBhIGNvbW1vbiBJRTExIGJ1ZyB3aXRoIHRoZSBjb3JlLWpzIDMuNi4wIHJlZ2V4IHBvbHlmaWxsXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9naXRodWIvZmV0Y2gvaXNzdWVzLzc0OFxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNzUxXG4gIHByZVByb2Nlc3NlZEhlYWRlcnNcbiAgICAuc3BsaXQoJ1xccicpXG4gICAgLm1hcChmdW5jdGlvbihoZWFkZXIpIHtcbiAgICAgIHJldHVybiBoZWFkZXIuaW5kZXhPZignXFxuJykgPT09IDAgPyBoZWFkZXIuc3Vic3RyKDEsIGhlYWRlci5sZW5ndGgpIDogaGVhZGVyXG4gICAgfSlcbiAgICAuZm9yRWFjaChmdW5jdGlvbihsaW5lKSB7XG4gICAgICB2YXIgcGFydHMgPSBsaW5lLnNwbGl0KCc6JylcbiAgICAgIHZhciBrZXkgPSBwYXJ0cy5zaGlmdCgpLnRyaW0oKVxuICAgICAgaWYgKGtleSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBwYXJ0cy5qb2luKCc6JykudHJpbSgpXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaGVhZGVycy5hcHBlbmQoa2V5LCB2YWx1ZSlcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ1Jlc3BvbnNlICcgKyBlcnJvci5tZXNzYWdlKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgcmV0dXJuIGhlYWRlcnNcbn1cblxuQm9keS5jYWxsKFJlcXVlc3QucHJvdG90eXBlKVxuXG5leHBvcnQgZnVuY3Rpb24gUmVzcG9uc2UoYm9keUluaXQsIG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFJlc3BvbnNlKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1BsZWFzZSB1c2UgdGhlIFwibmV3XCIgb3BlcmF0b3IsIHRoaXMgRE9NIG9iamVjdCBjb25zdHJ1Y3RvciBjYW5ub3QgYmUgY2FsbGVkIGFzIGEgZnVuY3Rpb24uJylcbiAgfVxuICBpZiAoIW9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0ge31cbiAgfVxuXG4gIHRoaXMudHlwZSA9ICdkZWZhdWx0J1xuICB0aGlzLnN0YXR1cyA9IG9wdGlvbnMuc3RhdHVzID09PSB1bmRlZmluZWQgPyAyMDAgOiBvcHRpb25zLnN0YXR1c1xuICBpZiAodGhpcy5zdGF0dXMgPCAyMDAgfHwgdGhpcy5zdGF0dXMgPiA1OTkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkZhaWxlZCB0byBjb25zdHJ1Y3QgJ1Jlc3BvbnNlJzogVGhlIHN0YXR1cyBwcm92aWRlZCAoMCkgaXMgb3V0c2lkZSB0aGUgcmFuZ2UgWzIwMCwgNTk5XS5cIilcbiAgfVxuICB0aGlzLm9rID0gdGhpcy5zdGF0dXMgPj0gMjAwICYmIHRoaXMuc3RhdHVzIDwgMzAwXG4gIHRoaXMuc3RhdHVzVGV4dCA9IG9wdGlvbnMuc3RhdHVzVGV4dCA9PT0gdW5kZWZpbmVkID8gJycgOiAnJyArIG9wdGlvbnMuc3RhdHVzVGV4dFxuICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhvcHRpb25zLmhlYWRlcnMpXG4gIHRoaXMudXJsID0gb3B0aW9ucy51cmwgfHwgJydcbiAgdGhpcy5faW5pdEJvZHkoYm9keUluaXQpXG59XG5cbkJvZHkuY2FsbChSZXNwb25zZS5wcm90b3R5cGUpXG5cblJlc3BvbnNlLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFJlc3BvbnNlKHRoaXMuX2JvZHlJbml0LCB7XG4gICAgc3RhdHVzOiB0aGlzLnN0YXR1cyxcbiAgICBzdGF0dXNUZXh0OiB0aGlzLnN0YXR1c1RleHQsXG4gICAgaGVhZGVyczogbmV3IEhlYWRlcnModGhpcy5oZWFkZXJzKSxcbiAgICB1cmw6IHRoaXMudXJsXG4gIH0pXG59XG5cblJlc3BvbnNlLmVycm9yID0gZnVuY3Rpb24oKSB7XG4gIHZhciByZXNwb25zZSA9IG5ldyBSZXNwb25zZShudWxsLCB7c3RhdHVzOiAyMDAsIHN0YXR1c1RleHQ6ICcnfSlcbiAgcmVzcG9uc2Uub2sgPSBmYWxzZVxuICByZXNwb25zZS5zdGF0dXMgPSAwXG4gIHJlc3BvbnNlLnR5cGUgPSAnZXJyb3InXG4gIHJldHVybiByZXNwb25zZVxufVxuXG52YXIgcmVkaXJlY3RTdGF0dXNlcyA9IFszMDEsIDMwMiwgMzAzLCAzMDcsIDMwOF1cblxuUmVzcG9uc2UucmVkaXJlY3QgPSBmdW5jdGlvbih1cmwsIHN0YXR1cykge1xuICBpZiAocmVkaXJlY3RTdGF0dXNlcy5pbmRleE9mKHN0YXR1cykgPT09IC0xKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgc3RhdHVzIGNvZGUnKVxuICB9XG5cbiAgcmV0dXJuIG5ldyBSZXNwb25zZShudWxsLCB7c3RhdHVzOiBzdGF0dXMsIGhlYWRlcnM6IHtsb2NhdGlvbjogdXJsfX0pXG59XG5cbmV4cG9ydCB2YXIgRE9NRXhjZXB0aW9uID0gZy5ET01FeGNlcHRpb25cbnRyeSB7XG4gIG5ldyBET01FeGNlcHRpb24oKVxufSBjYXRjaCAoZXJyKSB7XG4gIERPTUV4Y2VwdGlvbiA9IGZ1bmN0aW9uKG1lc3NhZ2UsIG5hbWUpIHtcbiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlXG4gICAgdGhpcy5uYW1lID0gbmFtZVxuICAgIHZhciBlcnJvciA9IEVycm9yKG1lc3NhZ2UpXG4gICAgdGhpcy5zdGFjayA9IGVycm9yLnN0YWNrXG4gIH1cbiAgRE9NRXhjZXB0aW9uLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKVxuICBET01FeGNlcHRpb24ucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRE9NRXhjZXB0aW9uXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmZXRjaChpbnB1dCwgaW5pdCkge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHJlcXVlc3QgPSBuZXcgUmVxdWVzdChpbnB1dCwgaW5pdClcblxuICAgIGlmIChyZXF1ZXN0LnNpZ25hbCAmJiByZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICByZXR1cm4gcmVqZWN0KG5ldyBET01FeGNlcHRpb24oJ0Fib3J0ZWQnLCAnQWJvcnRFcnJvcicpKVxuICAgIH1cblxuICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKVxuXG4gICAgZnVuY3Rpb24gYWJvcnRYaHIoKSB7XG4gICAgICB4aHIuYWJvcnQoKVxuICAgIH1cblxuICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICBzdGF0dXNUZXh0OiB4aHIuc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcGFyc2VIZWFkZXJzKHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSB8fCAnJylcbiAgICAgIH1cbiAgICAgIC8vIFRoaXMgY2hlY2sgaWYgc3BlY2lmaWNhbGx5IGZvciB3aGVuIGEgdXNlciBmZXRjaGVzIGEgZmlsZSBsb2NhbGx5IGZyb20gdGhlIGZpbGUgc3lzdGVtXG4gICAgICAvLyBPbmx5IGlmIHRoZSBzdGF0dXMgaXMgb3V0IG9mIGEgbm9ybWFsIHJhbmdlXG4gICAgICBpZiAocmVxdWVzdC51cmwuaW5kZXhPZignZmlsZTovLycpID09PSAwICYmICh4aHIuc3RhdHVzIDwgMjAwIHx8IHhoci5zdGF0dXMgPiA1OTkpKSB7XG4gICAgICAgIG9wdGlvbnMuc3RhdHVzID0gMjAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3B0aW9ucy5zdGF0dXMgPSB4aHIuc3RhdHVzO1xuICAgICAgfVxuICAgICAgb3B0aW9ucy51cmwgPSAncmVzcG9uc2VVUkwnIGluIHhociA/IHhoci5yZXNwb25zZVVSTCA6IG9wdGlvbnMuaGVhZGVycy5nZXQoJ1gtUmVxdWVzdC1VUkwnKVxuICAgICAgdmFyIGJvZHkgPSAncmVzcG9uc2UnIGluIHhociA/IHhoci5yZXNwb25zZSA6IHhoci5yZXNwb25zZVRleHRcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlc29sdmUobmV3IFJlc3BvbnNlKGJvZHksIG9wdGlvbnMpKVxuICAgICAgfSwgMClcbiAgICB9XG5cbiAgICB4aHIub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ05ldHdvcmsgcmVxdWVzdCBmYWlsZWQnKSlcbiAgICAgIH0sIDApXG4gICAgfVxuXG4gICAgeGhyLm9udGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ05ldHdvcmsgcmVxdWVzdCB0aW1lZCBvdXQnKSlcbiAgICAgIH0sIDApXG4gICAgfVxuXG4gICAgeGhyLm9uYWJvcnQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdChuZXcgRE9NRXhjZXB0aW9uKCdBYm9ydGVkJywgJ0Fib3J0RXJyb3InKSlcbiAgICAgIH0sIDApXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZml4VXJsKHVybCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHVybCA9PT0gJycgJiYgZy5sb2NhdGlvbi5ocmVmID8gZy5sb2NhdGlvbi5ocmVmIDogdXJsXG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiB1cmxcbiAgICAgIH1cbiAgICB9XG5cbiAgICB4aHIub3BlbihyZXF1ZXN0Lm1ldGhvZCwgZml4VXJsKHJlcXVlc3QudXJsKSwgdHJ1ZSlcblxuICAgIGlmIChyZXF1ZXN0LmNyZWRlbnRpYWxzID09PSAnaW5jbHVkZScpIHtcbiAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0cnVlXG4gICAgfSBlbHNlIGlmIChyZXF1ZXN0LmNyZWRlbnRpYWxzID09PSAnb21pdCcpIHtcbiAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSBmYWxzZVxuICAgIH1cblxuICAgIGlmICgncmVzcG9uc2VUeXBlJyBpbiB4aHIpIHtcbiAgICAgIGlmIChzdXBwb3J0LmJsb2IpIHtcbiAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdibG9iJ1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgc3VwcG9ydC5hcnJheUJ1ZmZlclxuICAgICAgKSB7XG4gICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAnYXJyYXlidWZmZXInXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGluaXQgJiYgdHlwZW9mIGluaXQuaGVhZGVycyA9PT0gJ29iamVjdCcgJiYgIShpbml0LmhlYWRlcnMgaW5zdGFuY2VvZiBIZWFkZXJzIHx8IChnLkhlYWRlcnMgJiYgaW5pdC5oZWFkZXJzIGluc3RhbmNlb2YgZy5IZWFkZXJzKSkpIHtcbiAgICAgIHZhciBuYW1lcyA9IFtdO1xuICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoaW5pdC5oZWFkZXJzKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgbmFtZXMucHVzaChub3JtYWxpemVOYW1lKG5hbWUpKVxuICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihuYW1lLCBub3JtYWxpemVWYWx1ZShpbml0LmhlYWRlcnNbbmFtZV0pKVxuICAgICAgfSlcbiAgICAgIHJlcXVlc3QuaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICAgIGlmIChuYW1lcy5pbmRleE9mKG5hbWUpID09PSAtMSkge1xuICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKG5hbWUsIHZhbHVlKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICByZXF1ZXN0LmhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihuYW1lLCB2YWx1ZSlcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgaWYgKHJlcXVlc3Quc2lnbmFsKSB7XG4gICAgICByZXF1ZXN0LnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIGFib3J0WGhyKVxuXG4gICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIERPTkUgKHN1Y2Nlc3Mgb3IgZmFpbHVyZSlcbiAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0KSB7XG4gICAgICAgICAgcmVxdWVzdC5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBhYm9ydFhocilcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHhoci5zZW5kKHR5cGVvZiByZXF1ZXN0Ll9ib2R5SW5pdCA9PT0gJ3VuZGVmaW5lZCcgPyBudWxsIDogcmVxdWVzdC5fYm9keUluaXQpXG4gIH0pXG59XG5cbmZldGNoLnBvbHlmaWxsID0gdHJ1ZVxuXG5pZiAoIWcuZmV0Y2gpIHtcbiAgZy5mZXRjaCA9IGZldGNoXG4gIGcuSGVhZGVycyA9IEhlYWRlcnNcbiAgZy5SZXF1ZXN0ID0gUmVxdWVzdFxuICBnLlJlc3BvbnNlID0gUmVzcG9uc2Vcbn1cbiIsIi8qIChpZ25vcmVkKSAqLyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdGxvYWRlZDogZmFsc2UsXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuXHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBfX3dlYnBhY2tfbW9kdWxlc19fO1xuXG4iLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmFtZE8gPSB7fTsiLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZiA9IHt9O1xuLy8gVGhpcyBmaWxlIGNvbnRhaW5zIG9ubHkgdGhlIGVudHJ5IGNodW5rLlxuLy8gVGhlIGNodW5rIGxvYWRpbmcgZnVuY3Rpb24gZm9yIGFkZGl0aW9uYWwgY2h1bmtzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmUgPSAoY2h1bmtJZCkgPT4ge1xuXHRyZXR1cm4gUHJvbWlzZS5hbGwoT2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5mKS5yZWR1Y2UoKHByb21pc2VzLCBrZXkpID0+IHtcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmZba2V5XShjaHVua0lkLCBwcm9taXNlcyk7XG5cdFx0cmV0dXJuIHByb21pc2VzO1xuXHR9LCBbXSkpO1xufTsiLCIvLyBUaGlzIGZ1bmN0aW9uIGFsbG93IHRvIHJlZmVyZW5jZSBhc3luYyBjaHVua3Ncbl9fd2VicGFja19yZXF1aXJlX18udSA9IChjaHVua0lkKSA9PiB7XG5cdC8vIHJldHVybiB1cmwgZm9yIGZpbGVuYW1lcyBiYXNlZCBvbiB0ZW1wbGF0ZVxuXHRyZXR1cm4gXCJ0aGVtZS1idW5kbGUuY2h1bmsuXCIgKyBjaHVua0lkICsgXCIuanNcIjtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmhtZCA9IChtb2R1bGUpID0+IHtcblx0bW9kdWxlID0gT2JqZWN0LmNyZWF0ZShtb2R1bGUpO1xuXHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsICdleHBvcnRzJywge1xuXHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0c2V0OiAoKSA9PiB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0VTIE1vZHVsZXMgbWF5IG5vdCBhc3NpZ24gbW9kdWxlLmV4cG9ydHMgb3IgZXhwb3J0cy4qLCBVc2UgRVNNIGV4cG9ydCBzeW50YXgsIGluc3RlYWQ6ICcgKyBtb2R1bGUuaWQpO1xuXHRcdH1cblx0fSk7XG5cdHJldHVybiBtb2R1bGU7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJ2YXIgaW5Qcm9ncmVzcyA9IHt9O1xudmFyIGRhdGFXZWJwYWNrUHJlZml4ID0gXCJiaWdjb21tZXJjZS1oZXJhOlwiO1xuLy8gbG9hZFNjcmlwdCBmdW5jdGlvbiB0byBsb2FkIGEgc2NyaXB0IHZpYSBzY3JpcHQgdGFnXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmwgPSAodXJsLCBkb25lLCBrZXksIGNodW5rSWQpID0+IHtcblx0aWYoaW5Qcm9ncmVzc1t1cmxdKSB7IGluUHJvZ3Jlc3NbdXJsXS5wdXNoKGRvbmUpOyByZXR1cm47IH1cblx0dmFyIHNjcmlwdCwgbmVlZEF0dGFjaDtcblx0aWYoa2V5ICE9PSB1bmRlZmluZWQpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBzY3JpcHRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgcyA9IHNjcmlwdHNbaV07XG5cdFx0XHRpZihzLmdldEF0dHJpYnV0ZShcInNyY1wiKSA9PSB1cmwgfHwgcy5nZXRBdHRyaWJ1dGUoXCJkYXRhLXdlYnBhY2tcIikgPT0gZGF0YVdlYnBhY2tQcmVmaXggKyBrZXkpIHsgc2NyaXB0ID0gczsgYnJlYWs7IH1cblx0XHR9XG5cdH1cblx0aWYoIXNjcmlwdCkge1xuXHRcdG5lZWRBdHRhY2ggPSB0cnVlO1xuXHRcdHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuXG5cdFx0c2NyaXB0LmNoYXJzZXQgPSAndXRmLTgnO1xuXHRcdHNjcmlwdC50aW1lb3V0ID0gMTIwO1xuXHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm5jKSB7XG5cdFx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgX193ZWJwYWNrX3JlcXVpcmVfXy5uYyk7XG5cdFx0fVxuXHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXdlYnBhY2tcIiwgZGF0YVdlYnBhY2tQcmVmaXggKyBrZXkpO1xuXG5cdFx0c2NyaXB0LnNyYyA9IHVybDtcblx0fVxuXHRpblByb2dyZXNzW3VybF0gPSBbZG9uZV07XG5cdHZhciBvblNjcmlwdENvbXBsZXRlID0gKHByZXYsIGV2ZW50KSA9PiB7XG5cdFx0Ly8gYXZvaWQgbWVtIGxlYWtzIGluIElFLlxuXHRcdHNjcmlwdC5vbmVycm9yID0gc2NyaXB0Lm9ubG9hZCA9IG51bGw7XG5cdFx0Y2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuXHRcdHZhciBkb25lRm5zID0gaW5Qcm9ncmVzc1t1cmxdO1xuXHRcdGRlbGV0ZSBpblByb2dyZXNzW3VybF07XG5cdFx0c2NyaXB0LnBhcmVudE5vZGUgJiYgc2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcblx0XHRkb25lRm5zICYmIGRvbmVGbnMuZm9yRWFjaCgoZm4pID0+IChmbihldmVudCkpKTtcblx0XHRpZihwcmV2KSByZXR1cm4gcHJldihldmVudCk7XG5cdH1cblx0dmFyIHRpbWVvdXQgPSBzZXRUaW1lb3V0KG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCB1bmRlZmluZWQsIHsgdHlwZTogJ3RpbWVvdXQnLCB0YXJnZXQ6IHNjcmlwdCB9KSwgMTIwMDAwKTtcblx0c2NyaXB0Lm9uZXJyb3IgPSBvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgc2NyaXB0Lm9uZXJyb3IpO1xuXHRzY3JpcHQub25sb2FkID0gb25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHNjcmlwdC5vbmxvYWQpO1xuXHRuZWVkQXR0YWNoICYmIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbn07IiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5ubWQgPSAobW9kdWxlKSA9PiB7XG5cdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdHJldHVybiBtb2R1bGU7XG59OyIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdCAmJiBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnRhZ05hbWUudG9VcHBlckNhc2UoKSA9PT0gJ1NDUklQVCcpXG5cdFx0c2NyaXB0VXJsID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmM7XG5cdGlmICghc2NyaXB0VXJsKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRpZihzY3JpcHRzLmxlbmd0aCkge1xuXHRcdFx0dmFyIGkgPSBzY3JpcHRzLmxlbmd0aCAtIDE7XG5cdFx0XHR3aGlsZSAoaSA+IC0xICYmICghc2NyaXB0VXJsIHx8ICEvXmh0dHAocz8pOi8udGVzdChzY3JpcHRVcmwpKSkgc2NyaXB0VXJsID0gc2NyaXB0c1tpLS1dLnNyYztcblx0XHR9XG5cdH1cbn1cbi8vIFdoZW4gc3VwcG9ydGluZyBicm93c2VycyB3aGVyZSBhbiBhdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIHlvdSBtdXN0IHNwZWNpZnkgYW4gb3V0cHV0LnB1YmxpY1BhdGggbWFudWFsbHkgdmlhIGNvbmZpZ3VyYXRpb25cbi8vIG9yIHBhc3MgYW4gZW1wdHkgc3RyaW5nIChcIlwiKSBhbmQgc2V0IHRoZSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyB2YXJpYWJsZSBmcm9tIHlvdXIgY29kZSB0byB1c2UgeW91ciBvd24gbG9naWMuXG5pZiAoIXNjcmlwdFVybCkgdGhyb3cgbmV3IEVycm9yKFwiQXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXJcIik7XG5zY3JpcHRVcmwgPSBzY3JpcHRVcmwucmVwbGFjZSgvIy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcPy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcL1teXFwvXSskLywgXCIvXCIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gc2NyaXB0VXJsOyIsIi8vIG5vIGJhc2VVUklcblxuLy8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3Ncbi8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuLy8gW3Jlc29sdmUsIHJlamVjdCwgUHJvbWlzZV0gPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG52YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuXHRcIm1haW5cIjogMFxufTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5mLmogPSAoY2h1bmtJZCwgcHJvbWlzZXMpID0+IHtcblx0XHQvLyBKU09OUCBjaHVuayBsb2FkaW5nIGZvciBqYXZhc2NyaXB0XG5cdFx0dmFyIGluc3RhbGxlZENodW5rRGF0YSA9IF9fd2VicGFja19yZXF1aXJlX18ubyhpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpID8gaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdIDogdW5kZWZpbmVkO1xuXHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSAhPT0gMCkgeyAvLyAwIG1lYW5zIFwiYWxyZWFkeSBpbnN0YWxsZWRcIi5cblxuXHRcdFx0Ly8gYSBQcm9taXNlIG1lYW5zIFwiY3VycmVudGx5IGxvYWRpbmdcIi5cblx0XHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSkge1xuXHRcdFx0XHRwcm9taXNlcy5wdXNoKGluc3RhbGxlZENodW5rRGF0YVsyXSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZih0cnVlKSB7IC8vIGFsbCBjaHVua3MgaGF2ZSBKU1xuXHRcdFx0XHRcdC8vIHNldHVwIFByb21pc2UgaW4gY2h1bmsgY2FjaGVcblx0XHRcdFx0XHR2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IChpbnN0YWxsZWRDaHVua0RhdGEgPSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSBbcmVzb2x2ZSwgcmVqZWN0XSkpO1xuXHRcdFx0XHRcdHByb21pc2VzLnB1c2goaW5zdGFsbGVkQ2h1bmtEYXRhWzJdID0gcHJvbWlzZSk7XG5cblx0XHRcdFx0XHQvLyBzdGFydCBjaHVuayBsb2FkaW5nXG5cdFx0XHRcdFx0dmFyIHVybCA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIF9fd2VicGFja19yZXF1aXJlX18udShjaHVua0lkKTtcblx0XHRcdFx0XHQvLyBjcmVhdGUgZXJyb3IgYmVmb3JlIHN0YWNrIHVud291bmQgdG8gZ2V0IHVzZWZ1bCBzdGFja3RyYWNlIGxhdGVyXG5cdFx0XHRcdFx0dmFyIGVycm9yID0gbmV3IEVycm9yKCk7XG5cdFx0XHRcdFx0dmFyIGxvYWRpbmdFbmRlZCA9IChldmVudCkgPT4ge1xuXHRcdFx0XHRcdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkpIHtcblx0XHRcdFx0XHRcdFx0aW5zdGFsbGVkQ2h1bmtEYXRhID0gaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdO1xuXHRcdFx0XHRcdFx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEgIT09IDApIGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtEYXRhKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIGVycm9yVHlwZSA9IGV2ZW50ICYmIChldmVudC50eXBlID09PSAnbG9hZCcgPyAnbWlzc2luZycgOiBldmVudC50eXBlKTtcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmVhbFNyYyA9IGV2ZW50ICYmIGV2ZW50LnRhcmdldCAmJiBldmVudC50YXJnZXQuc3JjO1xuXHRcdFx0XHRcdFx0XHRcdGVycm9yLm1lc3NhZ2UgPSAnTG9hZGluZyBjaHVuayAnICsgY2h1bmtJZCArICcgZmFpbGVkLlxcbignICsgZXJyb3JUeXBlICsgJzogJyArIHJlYWxTcmMgKyAnKSc7XG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3IubmFtZSA9ICdDaHVua0xvYWRFcnJvcic7XG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3IudHlwZSA9IGVycm9yVHlwZTtcblx0XHRcdFx0XHRcdFx0XHRlcnJvci5yZXF1ZXN0ID0gcmVhbFNyYztcblx0XHRcdFx0XHRcdFx0XHRpbnN0YWxsZWRDaHVua0RhdGFbMV0oZXJyb3IpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmwodXJsLCBsb2FkaW5nRW5kZWQsIFwiY2h1bmstXCIgKyBjaHVua0lkLCBjaHVua0lkKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cbn07XG5cbi8vIG5vIHByZWZldGNoaW5nXG5cbi8vIG5vIHByZWxvYWRlZFxuXG4vLyBubyBITVJcblxuLy8gbm8gSE1SIG1hbmlmZXN0XG5cbi8vIG5vIG9uIGNodW5rcyBsb2FkZWRcblxuLy8gaW5zdGFsbCBhIEpTT05QIGNhbGxiYWNrIGZvciBjaHVuayBsb2FkaW5nXG52YXIgd2VicGFja0pzb25wQ2FsbGJhY2sgPSAocGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24sIGRhdGEpID0+IHtcblx0dmFyIFtjaHVua0lkcywgbW9yZU1vZHVsZXMsIHJ1bnRpbWVdID0gZGF0YTtcblx0Ly8gYWRkIFwibW9yZU1vZHVsZXNcIiB0byB0aGUgbW9kdWxlcyBvYmplY3QsXG5cdC8vIHRoZW4gZmxhZyBhbGwgXCJjaHVua0lkc1wiIGFzIGxvYWRlZCBhbmQgZmlyZSBjYWxsYmFja1xuXHR2YXIgbW9kdWxlSWQsIGNodW5rSWQsIGkgPSAwO1xuXHRpZihjaHVua0lkcy5zb21lKChpZCkgPT4gKGluc3RhbGxlZENodW5rc1tpZF0gIT09IDApKSkge1xuXHRcdGZvcihtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuXHRcdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcblx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYocnVudGltZSkgdmFyIHJlc3VsdCA9IHJ1bnRpbWUoX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cdH1cblx0aWYocGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24pIHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uKGRhdGEpO1xuXHRmb3IoO2kgPCBjaHVua0lkcy5sZW5ndGg7IGkrKykge1xuXHRcdGNodW5rSWQgPSBjaHVua0lkc1tpXTtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSAmJiBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0pIHtcblx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXVswXSgpO1xuXHRcdH1cblx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSAwO1xuXHR9XG5cbn1cblxudmFyIGNodW5rTG9hZGluZ0dsb2JhbCA9IHNlbGZbXCJ3ZWJwYWNrQ2h1bmtiaWdjb21tZXJjZV9oZXJhXCJdID0gc2VsZltcIndlYnBhY2tDaHVua2JpZ2NvbW1lcmNlX2hlcmFcIl0gfHwgW107XG5jaHVua0xvYWRpbmdHbG9iYWwuZm9yRWFjaCh3ZWJwYWNrSnNvbnBDYWxsYmFjay5iaW5kKG51bGwsIDApKTtcbmNodW5rTG9hZGluZ0dsb2JhbC5wdXNoID0gd2VicGFja0pzb25wQ2FsbGJhY2suYmluZChudWxsLCBjaHVua0xvYWRpbmdHbG9iYWwucHVzaC5iaW5kKGNodW5rTG9hZGluZ0dsb2JhbCkpOyIsIl9fd2VicGFja19wdWJsaWNfcGF0aF9fID0gd2luZG93Ll9fd2VicGFja19wdWJsaWNfcGF0aF9fOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXHJcblxyXG5pbXBvcnQgR2xvYmFsIGZyb20gJy4vdGhlbWUvZ2xvYmFsJztcclxuXHJcbndpbmRvdy4kID0gJDtcclxud2luZG93LmpxdWVyeSA9ICQ7XHJcblxyXG5pbXBvcnQgJy4vY3VzdG9tJztcclxuXHJcblxyXG5jb25zdCBnZXRBY2NvdW50ID0gKCkgPT4gaW1wb3J0KCcuL3RoZW1lL2FjY291bnQnKTtcclxuY29uc3QgZ2V0TG9naW4gPSAoKSA9PiBpbXBvcnQoJy4vdGhlbWUvYXV0aCcpO1xyXG5jb25zdCBub29wID0gbnVsbDtcclxuXHJcbmNvbnN0IHBhZ2VDbGFzc2VzID0ge1xyXG4gICAgYWNjb3VudF9vcmRlcnN0YXR1czogZ2V0QWNjb3VudCxcclxuICAgIGFjY291bnRfb3JkZXI6IGdldEFjY291bnQsXHJcbiAgICBhY2NvdW50X2FkZHJlc3Nib29rOiBnZXRBY2NvdW50LFxyXG4gICAgc2hpcHBpbmdhZGRyZXNzZm9ybTogZ2V0QWNjb3VudCxcclxuICAgIGFjY291bnRfbmV3X3JldHVybjogZ2V0QWNjb3VudCxcclxuICAgICdhZGQtd2lzaGxpc3QnOiAoKSA9PiBpbXBvcnQoJy4vdGhlbWUvd2lzaGxpc3QnKSxcclxuICAgIGFjY291bnRfcmVjZW50aXRlbXM6IGdldEFjY291bnQsXHJcbiAgICBhY2NvdW50X2Rvd25sb2FkaXRlbTogZ2V0QWNjb3VudCxcclxuICAgIGVkaXRhY2NvdW50OiBnZXRBY2NvdW50LFxyXG4gICAgYWNjb3VudF9pbmJveDogZ2V0QWNjb3VudCxcclxuICAgIGFjY291bnRfc2F2ZWRfcmV0dXJuOiBnZXRBY2NvdW50LFxyXG4gICAgYWNjb3VudF9yZXR1cm5zOiBnZXRBY2NvdW50LFxyXG4gICAgYWNjb3VudF9wYXltZW50bWV0aG9kczogZ2V0QWNjb3VudCxcclxuICAgIGFjY291bnRfYWRkcGF5bWVudG1ldGhvZDogZ2V0QWNjb3VudCxcclxuICAgIGFjY291bnRfZWRpdHBheW1lbnRtZXRob2Q6IGdldEFjY291bnQsXHJcbiAgICBsb2dpbjogZ2V0TG9naW4sXHJcbiAgICBjcmVhdGVhY2NvdW50X3RoYW5rczogZ2V0TG9naW4sXHJcbiAgICBjcmVhdGVhY2NvdW50OiBnZXRMb2dpbixcclxuICAgIGdldG5ld3Bhc3N3b3JkOiBnZXRMb2dpbixcclxuICAgIGZvcmdvdHBhc3N3b3JkOiBnZXRMb2dpbixcclxuICAgIGJsb2c6ICgpID0+IGltcG9ydCgnLi90aGVtZS9ibG9nJyksXHJcbiAgICBibG9nX3Bvc3Q6ICgpID0+IGltcG9ydCgnLi90aGVtZS9ibG9nJyksXHJcbiAgICBicmFuZDogKCkgPT4gaW1wb3J0KCcuL3RoZW1lL2JyYW5kJyksXHJcbiAgICBicmFuZHM6IG5vb3AsXHJcbiAgICBjYXJ0OiAoKSA9PiBpbXBvcnQoJy4vdGhlbWUvY2FydCcpLFxyXG4gICAgY2F0ZWdvcnk6ICgpID0+IGltcG9ydCgnLi90aGVtZS9jYXRlZ29yeScpLFxyXG4gICAgY29tcGFyZTogKCkgPT4gaW1wb3J0KCcuL3RoZW1lL2NvbXBhcmUnKSxcclxuICAgIHBhZ2VfY29udGFjdF9mb3JtOiAoKSA9PiBpbXBvcnQoJy4vdGhlbWUvY29udGFjdC11cycpLFxyXG4gICAgZXJyb3I6IG5vb3AsXHJcbiAgICA0MDQ6IG5vb3AsXHJcbiAgICBnaWZ0Y2VydGlmaWNhdGVzOiAoKSA9PiBpbXBvcnQoJy4vdGhlbWUvZ2lmdC1jZXJ0aWZpY2F0ZScpLFxyXG4gICAgZ2lmdGNlcnRpZmljYXRlc19iYWxhbmNlOiAoKSA9PiBpbXBvcnQoJy4vdGhlbWUvZ2lmdC1jZXJ0aWZpY2F0ZScpLFxyXG4gICAgZ2lmdGNlcnRpZmljYXRlc19yZWRlZW06ICgpID0+IGltcG9ydCgnLi90aGVtZS9naWZ0LWNlcnRpZmljYXRlJyksXHJcbiAgICBkZWZhdWx0OiAoKSA9PiBpbXBvcnQoJy4vdGhlbWUvaG9tZScpLFxyXG4gICAgcGFnZTogKCkgPT4gaW1wb3J0KCcuL3RoZW1lL3BhZ2UnKSxcclxuICAgIHByb2R1Y3Q6ICgpID0+IGltcG9ydCgnLi90aGVtZS9wcm9kdWN0JyksXHJcbiAgICBzZWFyY2g6ICgpID0+IGltcG9ydCgnLi90aGVtZS9zZWFyY2gnKSxcclxuICAgIHJzczogbm9vcCxcclxuICAgIHNpdGVtYXA6IG5vb3AsXHJcbiAgICBuZXdzbGV0dGVyX3N1YnNjcmliZTogbm9vcCxcclxuICAgIHdpc2hsaXN0OiAoKSA9PiBpbXBvcnQoJy4vdGhlbWUvd2lzaGxpc3QnKSxcclxuICAgIHdpc2hsaXN0czogKCkgPT4gaW1wb3J0KCcuL3RoZW1lL3dpc2hsaXN0JyksXHJcbn07XHJcblxyXG5jb25zdCBjdXN0b21DbGFzc2VzID0ge307XHJcblxyXG4vKipcclxuICogVGhpcyBmdW5jdGlvbiBnZXRzIGFkZGVkIHRvIHRoZSBnbG9iYWwgd2luZG93IGFuZCB0aGVuIGNhbGxlZFxyXG4gKiBvbiBwYWdlIGxvYWQgd2l0aCB0aGUgY3VycmVudCB0ZW1wbGF0ZSBsb2FkZWQgYW5kIEpTIENvbnRleHQgcGFzc2VkIGluXHJcbiAqIEBwYXJhbSBwYWdlVHlwZSBTdHJpbmdcclxuICogQHBhcmFtIGNvbnRleHRKU09OXHJcbiAqIEByZXR1cm5zIHsqfVxyXG4gKi9cclxud2luZG93LnN0ZW5jaWxCb290c3RyYXAgPSBmdW5jdGlvbiBzdGVuY2lsQm9vdHN0cmFwKHBhZ2VUeXBlLCBjb250ZXh0SlNPTiA9IG51bGwsIGxvYWRHbG9iYWwgPSB0cnVlKSB7XHJcbiAgICBjb25zdCBjb250ZXh0ID0gSlNPTi5wYXJzZShjb250ZXh0SlNPTiB8fCAne30nKTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGxvYWQoKSB7XHJcbiAgICAgICAgICAgICQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy8gTG9hZCBnbG9iYWxzXHJcbiAgICAgICAgICAgICAgICBpZiAobG9hZEdsb2JhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIEdsb2JhbC5sb2FkKGNvbnRleHQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGltcG9ydFByb21pc2VzID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gRmluZCB0aGUgYXBwcm9wcmlhdGUgcGFnZSBsb2FkZXIgYmFzZWQgb24gcGFnZVR5cGVcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBhZ2VDbGFzc0ltcG9ydGVyID0gcGFnZUNsYXNzZXNbcGFnZVR5cGVdO1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBwYWdlQ2xhc3NJbXBvcnRlciA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGltcG9ydFByb21pc2VzLnB1c2gocGFnZUNsYXNzSW1wb3J0ZXIoKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gU2VlIGlmIHRoZXJlIGlzIGEgcGFnZSBjbGFzcyBkZWZhdWx0IGZvciBhIGN1c3RvbSB0ZW1wbGF0ZVxyXG4gICAgICAgICAgICAgICAgY29uc3QgY3VzdG9tVGVtcGxhdGVJbXBvcnRlciA9IGN1c3RvbUNsYXNzZXNbY29udGV4dC50ZW1wbGF0ZV07XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGN1c3RvbVRlbXBsYXRlSW1wb3J0ZXIgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICBpbXBvcnRQcm9taXNlcy5wdXNoKGN1c3RvbVRlbXBsYXRlSW1wb3J0ZXIoKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gV2FpdCBmb3IgaW1wb3J0cyB0byByZXNvbHZlLCB0aGVuIGNhbGwgbG9hZCgpIG9uIHRoZW1cclxuICAgICAgICAgICAgICAgIFByb21pc2UuYWxsKGltcG9ydFByb21pc2VzKS50aGVuKGltcG9ydHMgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGltcG9ydHMuZm9yRWFjaChpbXBvcnRlZCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGltcG9ydGVkLmRlZmF1bHQubG9hZChjb250ZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufTtcclxuXHJcblxyXG5jb25zb2xlLmxvZyhcIkJlYXJlciB7eyBzZXR0aW5ncy5zdG9yZWZyb250X2FwaS50b2tlbiB9fVwiKTtcclxuIl0sIm5hbWVzIjpbIiQiLCJkb2N1bWVudCIsIm9uIiwiZSIsImNvbnNvbGUiLCJsb2ciLCJjbG9zZXN0IiwiZmluZCIsInJlbW92ZUNsYXNzIiwiYWRkQ2xhc3MiLCJnaWQiLCJhdHRyIiwiaGlkZSIsImZhZGVJbiIsIndpbmRvdyIsIndpZHRoIiwiY2xpY2siLCJub3QiLCJmYWRlVG9nZ2xlIiwiZXZlbnQiLCJzdG9wUHJvcGFnYXRpb24iLCJtb3VzZWVudGVyIiwibW91c2VsZWF2ZSIsInNldFRpbWVvdXQiLCJzd2lwZXIiLCJTd2lwZXIiLCJzbGlkZXNQZXJWaWV3Iiwic3BhY2VCZXR3ZWVuIiwiYXV0b3BsYXkiLCJkZWxheSIsImJyZWFrcG9pbnRzIiwialF1ZXJ5IiwiaXMiLCJzbGlkZVVwIiwidGV4dCIsIm5leHQiLCJjaGlsZHJlbiIsInNsaWRlRG93biIsImdldF9jb2xsIiwiaWQiLCJ4eCIsInF1ZXJ5IiwiZmV0Y2giLCJtZXRob2QiLCJjcmVkZW50aWFscyIsImhlYWRlcnMiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsInRoZW4iLCJyZXMiLCJqc29uIiwiZGF0YSIsInNpdGUiLCJwcm9kdWN0IiwibWV0YWZpZWxkcyIsImVkZ2VzIiwibm9kZSIsInZhbHVlIiwiZWRnIiwidHQiLCJwYXJzZUpTT04iLCJ0aXRsZSIsImJ1YnQiLCJ0Y29sb3IiLCJidWJmYyIsImJjb2xvciIsImJ1YmJnIiwiZXJyb3IiLCJzdGF0ZUNvdW50cnkiLCJub2QiLCJ1dGlscyIsIlZhbGlkYXRvcnMiLCJhbm5vdW5jZUlucHV0RXJyb3JNZXNzYWdlIiwiY29sbGFwc2libGVGYWN0b3J5Iiwic2hvd0FsZXJ0TW9kYWwiLCJTaGlwcGluZ0VzdGltYXRvciIsIiRlbGVtZW50Iiwic2hpcHBpbmdFcnJvck1lc3NhZ2VzIiwiJHN0YXRlIiwiaXNFc3RpbWF0b3JGb3JtT3BlbmVkIiwiaW5pdEZvcm1WYWxpZGF0aW9uIiwiYmluZFN0YXRlQ291bnRyeUNoYW5nZSIsImJpbmRFc3RpbWF0b3JFdmVudHMiLCJfcHJvdG8iLCJwcm90b3R5cGUiLCJfdGhpcyIsInNoaXBwaW5nRXN0aW1hdG9yQWxlcnQiLCJzaGlwcGluZ0VzdGltYXRvciIsInNoaXBwaW5nVmFsaWRhdG9yIiwic3VibWl0IiwidGFwIiwicmVtb3ZlQXR0ciIsInZhbCIsInBlcmZvcm1DaGVjayIsImFyZUFsbCIsInByZXZlbnREZWZhdWx0IiwiYmluZFZhbGlkYXRpb24iLCJiaW5kU3RhdGVWYWxpZGF0aW9uIiwiYmluZFVQU1JhdGVzIiwiYWRkIiwic2VsZWN0b3IiLCJ2YWxpZGF0ZSIsImNiIiwiY291bnRyeUlkIiwiTnVtYmVyIiwicmVzdWx0IiwiaXNOYU4iLCJlcnJvck1lc3NhZ2UiLCJjb3VudHJ5IiwiX3RoaXMyIiwiJGVsZSIsImxlbmd0aCIsImVsZVZhbCIsInByb3ZpbmNlIiwiVVBTUmF0ZVRvZ2dsZSIsIiRlc3RpbWF0b3JGb3JtVXBzIiwiJGVzdGltYXRvckZvcm1EZWZhdWx0IiwidG9nZ2xlQ2xhc3MiLCJfdGhpczMiLCIkbGFzdCIsImNvbnRleHQiLCJ1c2VJZEZvclN0YXRlcyIsImVyciIsImZpZWxkIiwiRXJyb3IiLCIkZmllbGQiLCJnZXRTdGF0dXMiLCJyZW1vdmUiLCJjbGVhblVwU3RhdGVWYWxpZGF0aW9uIiwidG9nZ2xlRXN0aW1hdG9yRm9ybVN0YXRlIiwidG9nZ2xlQnV0dG9uIiwiYnV0dG9uU2VsZWN0b3IiLCIkdG9nZ2xlQ29udGFpbmVyIiwiY2hhbmdlQXR0cmlidXRlc09uVG9nZ2xlIiwic2VsZWN0b3JUb0FjdGl2YXRlIiwiX3RoaXM0IiwiJGVzdGltYXRvckNvbnRhaW5lciIsIiRlc3RpbWF0b3JGb3JtIiwicGFyYW1zIiwiY291bnRyeV9pZCIsInN0YXRlX2lkIiwiY2l0eSIsInppcF9jb2RlIiwiYXBpIiwiY2FydCIsImdldFNoaXBwaW5nUXVvdGVzIiwicmVzcG9uc2UiLCJodG1sIiwiY29udGVudCIsImNsaWNrRXZlbnQiLCJxdW90ZUlkIiwic3VibWl0U2hpcHBpbmdRdW90ZSIsImxvY2F0aW9uIiwicmVsb2FkIiwiY3VycmVudFRhcmdldCIsImRlZmF1bHQiLCJhcmlhS2V5Q29kZXMiLCJSRVRVUk4iLCJTUEFDRSIsIkxFRlQiLCJVUCIsIlJJR0hUIiwiRE9XTiIsImluaXRSYWRpb09wdGlvbnMiLCJzZXRDaGVja2VkUmFkaW9JdGVtIiwiaXRlbUNvbGxlY3Rpb24iLCJpdGVtSWR4IiwiZWFjaCIsImlkeCIsIml0ZW0iLCIkaXRlbSIsInByb3AiLCJmb2N1cyIsInRyaWdnZXIiLCJjYWxjdWxhdGVUYXJnZXRJdGVtUG9zaXRpb24iLCJsYXN0SXRlbUlkeCIsImN1cnJlbnRJZHgiLCJoYW5kbGVJdGVtS2V5RG93biIsImtleUNvZGUiLCJpbmRleCIsImxhc3RDb2xsZWN0aW9uSXRlbUlkeCIsIk9iamVjdCIsInZhbHVlcyIsImluY2x1ZGVzIiwicHJldkl0ZW1JZHgiLCJnZXQiLCJuZXh0SXRlbUlkeCIsIiRjb250YWluZXIiLCJpdGVtU2VsZWN0b3IiLCIkaXRlbUNvbGxlY3Rpb24iLCJGT0NVU0FCTEVfRUxFTUVOVFNfU0VMRUNUT1IiLCJhY3RpdmF0ZVBsYXlQYXVzZUJ1dHRvbiIsImFuYWxpemVTbGlkZXMiLCJhcnJvd0FyaWFMYWJsaW5nIiwiZG90c1NldHVwIiwiZ2V0QWN0aXZlU2xpZGVJZHhBbmRTbGlkZXNRdWFudGl0eSIsImhhbmRsZUltYWdlQXNwZWN0UmF0aW8iLCJoYW5kbGVJbWFnZUxvYWQiLCJyZWZyZXNoRm9jdXMiLCJ1cGRhdGVUZXh0V2l0aExpdmVEYXRhIiwic2V0Q2Fyb3VzZWxTdGF0ZSIsIl9yZWYiLCJjYXJvdXNlbE9iaiIsImRlbGVnYXRlVGFyZ2V0IiwiY2Fyb3VzZWxPYmpDdXJyZW50Iiwic2xpY2siLCIkc2xpZGVyIiwib25Vc2VyQ2Fyb3VzZWxDaGFuZ2UiLCJfcmVmMiIsIiRhY3RpdmVTbGlkZXIiLCIkcGFyZW50Q29udGFpbmVyIiwiaGFzQ2xhc3MiLCJwYXJlbnQiLCJfJGFjdGl2ZVNsaWRlciRkYXRhIiwiYWN0aXZlU2xpZGVJZHgiLCJzbGlkZXNRdWFudGl0eSIsIiRjYXJvdXNlbENvbnRlbnRFbGVtZW50IiwiY2Fyb3VzZWxDb250ZW50QW5ub3VuY2VNZXNzYWdlIiwib25TbGlja0Nhcm91c2VsQ2hhbmdlIiwiJGRvdHMiLCIkcHJldkFycm93IiwiJG5leHRBcnJvdyIsImluZmluaXRlIiwib3B0aW9ucyIsIl9yZWYzIiwiY2Fyb3VzZWxBcnJvd0FuZERvdEFyaWFMYWJlbCIsImNhcm91c2VsIiwiJGNhcm91c2VsIiwiZG9jdW1lbnRFbGVtZW50Iiwic3R5bGUiLCJvYmplY3RGaXQiLCJzbGlkZSIsImlzTXVsdGlwbGVTbGlkZXMiLCJjdXN0b21QYWdpbmciLCJzbGlkZUNvdW50IiwiYWNjZXNzaWJpbGl0eSIsImFycm93cyIsImRvdHMiLCJQTEFZX0FDVElPTiIsIlBBVVNFX0FDVElPTiIsInVwZGF0ZUJ1dHRvbkxhYmVscyIsImNhcm91c2VsUGxheVBhdXNlQnV0dG9uUGxheSIsImNhcm91c2VsUGxheVBhdXNlQnV0dG9uUGF1c2UiLCJjYXJvdXNlbFBsYXlQYXVzZUJ1dHRvbkFyaWFQbGF5IiwiY2Fyb3VzZWxQbGF5UGF1c2VCdXR0b25BcmlhUGF1c2UiLCIkYnV0dG9uIiwiYWN0aW9uIiwidXBkYXRlQnV0dG9uTGFiZWxzV2l0aENvbnRleHQiLCJzcGVlZCIsIiRwbGF5UGF1c2VCdXR0b24iLCJpbnNlcnRCZWZvcmUiLCJhcHBlbmQiLCJfJHNsaWRlciRkYXRhIiwiY3NzIiwidHlwZSIsIm9uUGxheVBhdXNlQ2xpY2siLCJwYXVzZWQiLCJfdGhyb3R0bGUiLCJ0cmFpbGluZyIsIiRzbGlkZXMiLCIkc2xpZGUiLCJ0YWJJbmRleCIsImNoaWxkIiwidG9vbHRpcFNldHVwIiwiaXNJbmZpbml0ZSIsImFyaWFMYWJlbCIsImFjdGl2ZVNsaWRlTnVtYmVyIiwicHJldlNsaWRlTnVtYmVyIiwiYXJyb3dMZWZ0VGV4dCIsInRhYmluZGV4IiwibmV4dFNsaWRlTnVtYmVyIiwiYXJyb3dSaWdodFRleHQiLCJjYXJvdXNlbEFjdGl2ZURvdEFyaWFMYWJlbCIsImRvdCIsImRvdExhYmVsVGV4dCIsImRvdFNsaWRlU3RhdHVzVGV4dCIsImRvdEFyaWFMYWJlbCIsIiRkb3RCdXR0b24iLCJfcmVmJG9wdGlvbnMiLCJzbGlkZXNUb1Nob3ciLCJzbGlkZXNUb1Njcm9sbCIsImxhc3RWaXNpYmxlSWR4IiwicmVkdWNlIiwiYWNjIiwiY3VyciIsIk1hdGgiLCJjZWlsIiwiaXNBbmFseXplZERhdGFBdHRyIiwiJGFjdGl2ZVNsaWRlIiwiaXNBbmFseXplZFNsaWRlIiwiJGFjdGl2ZVNsaWRlSW1nIiwiYWN0aXZlU2xpZGVJbWdOb2RlIiwiZ2V0QWN0aXZlU2xpZGVJbmZvIiwiSU1BR0VfQ0xBU1NFUyIsInZlcnRpY2FsIiwic3F1YXJlIiwiSVNfQU5BTFlaRURfREFUQV9BVFRSIiwiZGVmaW5lQXNwZWN0UmF0aW9DbGFzcyIsImltYWdlQXNwZWN0UmF0aW8iLCJzZXRBc3BlY3RSYXRpb0NsYXNzIiwiaW1hZ2VOb2RlIiwibmF0dXJhbEhlaWdodCIsIm5hdHVyYWxXaWR0aCIsIl9nZXRBY3RpdmVTbGlkZUluZm8iLCIkYWN0aXZlU2xpZGVBbmRDbG9uZXMiLCJjb21wbGV0ZSIsImlzQnJvd3NlcklFIiwiSU1BR0VfRVJST1JfQ0xBU1MiLCJnZW5lcmF0ZUltYWdlIiwiJGltYWdlIiwiZmlyc3QiLCIkZmlyc3RBY3RpdmVTbGlkZSIsIlRPT0xUSVBfREFUQV9TRUxFQ1RPUiIsIlRPT0xUSVBfQ0xBU1MiLCJUT09MVElQX05PREUiLCIkbm9kZSIsIiRleGlzdGVkVG9vbHRpcCIsIiR0b29sdGlwIiwiU0xJREVfTlVNQkVSIiwiU0xJREVTX1FVQU5USVRZIiwidGV4dEZvckNoYW5nZSIsInNsaWRlTnVtYmVyIiwicmVwbGFjZSIsIkNvbGxhcHNpYmxlRXZlbnRzIiwiUExVR0lOX0tFWSIsIkNvbGxhcHNpYmxlR3JvdXAiLCIkY29tcG9uZW50Iiwib3BlbkNvbGxhcHNpYmxlIiwib25Db2xsYXBzaWJsZU9wZW4iLCJiaW5kIiwib25Db2xsYXBzaWJsZUNsb3NlIiwiYmluZEV2ZW50cyIsImNsb3NlIiwiZGlzYWJsZWQiLCJvcGVuIiwidW5iaW5kRXZlbnRzIiwib2ZmIiwiY29sbGFwc2libGVJbnN0YW5jZSIsImhhc0NvbGxhcHNpYmxlIiwiY29sbGFwc2libGVHcm91cEZhY3RvcnkiLCIkZ3JvdXBzIiwiJGNvbnRleHQiLCJpbnN0YW5jZUtleSIsIm1hcCIsImVsZW1lbnQiLCIkZ3JvdXAiLCJjYWNoZWRHcm91cCIsImdyb3VwIiwidG9BcnJheSIsIm1lZGlhUXVlcnlMaXN0RmFjdG9yeSIsInRvZ2dsZSIsIkNvbGxhcHNpYmxlU3RhdGUiLCJjbG9zZWQiLCJwcmVwZW5kSGFzaCIsImluZGV4T2YiLCJvcHRpb25zRnJvbURhdGEiLCJkaXNhYmxlZEJyZWFrcG9pbnQiLCJkaXNhYmxlZFN0YXRlIiwiZW5hYmxlZFN0YXRlIiwib3BlbkNsYXNzTmFtZSIsIkNvbGxhcHNpYmxlIiwiJHRvZ2dsZSIsIiR0YXJnZXQiLCJfdGVtcCIsIl9yZWYkb3BlbkNsYXNzTmFtZSIsInRhcmdldElkIiwiZGlzYWJsZWRNZWRpYVF1ZXJ5TGlzdCIsIm1hdGNoZXMiLCJvbkNsaWNrZWQiLCJvbkRpc2FibGVkTWVkaWFRdWVyeUxpc3RNYXRjaCIsImlzQ29sbGFwc2VkIiwiX2dldFRvZ2dsZUFyaWFMYWJlbFRleHQiLCJpc09wZW4iLCIkdGV4dFRvZ2dsZUNoaWxkcmVuIiwiZmlsdGVyIiwiX18iLCJ0cmltIiwiJGFyaWFMYWJlbFRhcmdldCIsIl90ZW1wMiIsIl9yZWYyJG5vdGlmeSIsIm5vdGlmeSIsIl90ZW1wMyIsIl9yZWYzJG5vdGlmeSIsInRvZ2dsZUJ5U3RhdGUiLCJzdGF0ZSIsIl9sZW4iLCJhcmd1bWVudHMiLCJhcmdzIiwiQXJyYXkiLCJfa2V5IiwiYXBwbHkiLCJ1bmRlZmluZWQiLCJjb250YWlucyIsImFkZExpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXIiLCJtZWRpYSIsIl9jcmVhdGVDbGFzcyIsImtleSIsIl9kaXNhYmxlZCIsInNldCIsIm92ZXJyaWRlT3B0aW9ucyIsIiRjb2xsYXBzaWJsZXMiLCJjYWNoZWRDb2xsYXBzaWJsZSIsIl9leHRlbmQiLCJjb2xsYXBzaWJsZSIsImNlcnQiLCJicmVha3BvaW50U2l6ZXMiLCJsYXJnZSIsIm1lZGl1bSIsInNtYWxsIiwiYnJlYWtwb2ludE5hbWUiLCJtYXRjaE1lZGlhIiwiYnJlYWtwb2ludCIsIm1lZGlhUXVlcnkiLCJtZWRpYVF1ZXJ5TGlzdCIsImZvcm1zIiwiZW1haWwiLCJyZSIsInRlc3QiLCJwYXNzd29yZCIsIm5vdEVtcHR5IiwibnVtYmVyc09ubHkiLCJ2YWxpZGF0ZUluY3JlYXNlQWdhaW5zdE1heEJvdW5kYXJ5IiwibWF4IiwicmFpc2UiLCJ2YWxpZGF0ZURlY3JlYXNlQWdhaW5zdE1pbkJvdW5kYXJ5IiwibWluIiwiZGVjbGluZSIsIm1pbk1heFZhbGlkYXRlIiwibWluSW5wdXRTZWxlY3RvciIsIm1heElucHV0U2VsZWN0b3IiLCJtaW5WYWx1ZSIsInBhcnNlRmxvYXQiLCJtYXhWYWx1ZSIsIl9pc05hTiIsImNsYXNzZXMiLCJlcnJvckNsYXNzIiwic3VjY2Vzc0NsYXNzIiwiZXJyb3JNZXNzYWdlQ2xhc3MiLCJjaGVja0Z1bmN0aW9ucyIsIldpc2hsaXN0Iiwib3B0aW9uc1R5cGVzTWFwIiwiSU5QVVRfRklMRSIsIklOUFVUX1RFWFQiLCJJTlBVVF9OVU1CRVIiLCJJTlBVVF9DSEVDS0JPWCIsIlRFWFRBUkVBIiwiREFURSIsIlNFVF9TRUxFQ1QiLCJTRVRfUkVDVEFOR0xFIiwiU0VUX1JBRElPIiwiU1dBVENIIiwiUFJPRFVDVF9MSVNUIiwib3B0aW9uQ2hhbmdlRGVjb3JhdG9yIiwiYXJlRGVmYXVsdE90aW9uc1NldCIsImF0dHJpYnV0ZXNEYXRhIiwiYXR0cmlidXRlc0NvbnRlbnQiLCJ1cGRhdGVQcm9kdWN0QXR0cmlidXRlcyIsInVwZGF0ZVZpZXciLCJ1cGRhdGVEZWZhdWx0QXR0cmlidXRlc0Zvck9PUyIsIlByb2R1Y3REZXRhaWxzQmFzZSIsIiRzY29wZSIsImluaXRSYWRpb0F0dHJpYnV0ZXMiLCJsb2FkIiwiZ2V0VGFiUmVxdWVzdHMiLCJnZXRBdHRyaWJ1dGUiLCJfbWFrZVByb2R1Y3RWYXJpYW50QWNjZXNzaWJsZSIsInZhcmlhbnREb21Ob2RlIiwidmFyaWFudFR5cGUiLCJpIiwicmFkaW8iLCIkcmFkaW8iLCJiZWhhdmlvciIsIm91dF9vZl9zdG9ja19iZWhhdmlvciIsImluU3RvY2tJZHMiLCJpbl9zdG9ja19hdHRyaWJ1dGVzIiwib3V0T2ZTdG9ja01lc3NhZ2UiLCJvdXRfb2Zfc3RvY2tfbWVzc2FnZSIsImF0dHJpYnV0ZSIsIiRhdHRyaWJ1dGUiLCJhdHRySWQiLCJwYXJzZUludCIsImVuYWJsZUF0dHJpYnV0ZSIsImRpc2FibGVBdHRyaWJ1dGUiLCJoYXNoIiwiJGFjdGl2ZVRhYiIsImhhcyIsIiR0YWJDb250ZW50Iiwic2libGluZ3MiLCJnZXRWaWV3TW9kZWwiLCIkcHJpY2VXaXRoVGF4IiwiJHByaWNlV2l0aG91dFRheCIsInJycFdpdGhUYXgiLCIkZGl2IiwiJHNwYW4iLCJycnBXaXRob3V0VGF4Iiwibm9uU2FsZVdpdGhUYXgiLCJub25TYWxlV2l0aG91dFRheCIsInByaWNlU2F2ZWQiLCJwcmljZU5vd0xhYmVsIiwicHJpY2VMYWJlbCIsIiR3ZWlnaHQiLCIkaW5jcmVtZW50cyIsIiRhZGRUb0NhcnQiLCIkYWRkVG9DYXJ0MiIsIiRidXlJdE5vdyIsIiRzdG9ja0xlZnQiLCIkc3RvY2tMZWZ0V3JhcHBlciIsIiR3aXNobGlzdFZhcmlhdGlvbiIsInN0b2NrIiwiJGlucHV0Iiwic2t1IiwiJGxhYmVsIiwiJHZhbHVlIiwidXBjIiwicXVhbnRpdHkiLCIkdGV4dCIsIiRidWxrUHJpY2luZyIsIiR3YWxsZXRCdXR0b25zIiwiY2xlYXJQcmljaW5nTm90Rm91bmQiLCJ2aWV3TW9kZWwiLCJfaXNOdW1iZXIiLCJ0aGVtZVNldHRpbmdzIiwiaGFsb19zdG9ja19sZXZlbF9saW1pdCIsInNob3dNZXNzYWdlQm94Iiwic3RvY2tfbWVzc2FnZSIsInB1cmNoYXNpbmdfbWVzc2FnZSIsIl9pc09iamVjdCIsInByaWNlIiwidXBkYXRlUHJpY2VWaWV3Iiwid2VpZ2h0IiwiZm9ybWF0dGVkIiwidmFyaWFudElkIiwic2hvdyIsInVwZGF0ZVdhbGxldEJ1dHRvbnNWaWV3IiwiYnVsa19kaXNjb3VudF9yYXRlcyIsImFkZFRvQ2FydFdyYXBwZXIiLCJwdXJjaGFzYWJsZSIsImZvcm1XaXNobGlzdCIsIndpdGhfdGF4IiwidXBkYXRlZFByaWNlIiwicHJpY2VfcmFuZ2UiLCJ3aXRob3V0X3RheCIsInJycF93aXRoX3RheCIsInJycF93aXRob3V0X3RheCIsInNhdmVkIiwibm9uX3NhbGVfcHJpY2Vfd2l0aF90YXgiLCJub25fc2FsZV9wcmljZV93aXRob3V0X3RheCIsIm1lc3NhZ2UiLCIkbWVzc2FnZUJveCIsImluc3RvY2siLCJ0b2dnbGVXYWxsZXRCdXR0b25zVmlzaWJpbGl0eSIsInNob3VsZFNob3ciLCJnZXRBdHRyaWJ1dGVUeXBlIiwiZW5hYmxlU2VsZWN0T3B0aW9uQXR0cmlidXRlIiwiZGlzYWJsZVNlbGVjdE9wdGlvbkF0dHJpYnV0ZSIsIiRwYXJlbnQiLCIkc2VsZWN0IiwidG9nZ2xlT3B0aW9uIiwic2VsZWN0ZWRJbmRleCIsIkltYWdlR2FsbGVyeSIsIm1vZGFsRmFjdG9yeSIsImFsZXJ0TW9kYWwiLCJub3JtYWxpemVGb3JtRGF0YSIsImNvbnZlcnRJbnRvQXJyYXkiLCJiYW5uZXJVdGlscyIsImhhbG9DYWxjdWxhdGVGcmVlU2hpcHBpbmciLCJQcm9kdWN0RGV0YWlscyIsIl9Qcm9kdWN0RGV0YWlsc0Jhc2UiLCJwcm9kdWN0QXR0cmlidXRlc0RhdGEiLCJjYWxsIiwiJG92ZXJsYXkiLCJpbWFnZUdhbGxlcnkiLCJpbml0IiwibGlzdGVuUXVhbnRpdHlDaGFuZ2UiLCJsaXN0ZW5RdWFudGl0eUNoYW5nZVN0aWNreUFUQyIsIiRzd2F0Y2hPcHRpb25NZXNzYWdlIiwic3dhdGNoSW5pdE1lc3NhZ2VTdG9yYWdlIiwic3dhdGNoR3JvdXBJZExpc3QiLCJfIiwic3RvcmVJbml0TWVzc2FnZXNGb3JTd2F0Y2hlcyIsIiRmb3JtIiwiYWRkVG9DYXJ0VmFsaWRhdG9yIiwiJHByb2R1Y3RPcHRpb25zRWxlbWVudCIsImhhc09wdGlvbnMiLCJoYXNEZWZhdWx0T3B0aW9ucyIsIiRwcm9kdWN0U3dhdGNoR3JvdXAiLCIkcHJvZHVjdFN3YXRjaExhYmVscyIsInBsYWNlU3dhdGNoTGFiZWxJbWFnZSIsImxhYmVsIiwiJG9wdGlvbkltYWdlIiwib3B0aW9uSW1hZ2VXaWR0aCIsIm91dGVyV2lkdGgiLCJleHRlbmRlZE9wdGlvbkltYWdlT2Zmc2V0TGVmdCIsIl9sYWJlbCRnZXRCb3VuZGluZ0NsaSIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInJpZ2h0IiwiZW1wdHlTcGFjZVRvU2NyZWVuUmlnaHRCb3JkZXIiLCJzY3JlZW4iLCJzaGlmdFZhbHVlIiwicmVnaXN0ZXJBZGRUb0NhcnRWYWxpZGF0aW9uIiwic2hvd1N3YXRjaE5hbWVzIiwidGFyZ2V0Iiwic3dhdGNoR3JvdXBFbGVtZW50IiwicGFyZW50Tm9kZSIsInNob3dTd2F0Y2hOYW1lT25PcHRpb24iLCJwcm9kdWN0T3B0aW9uc0NoYW5nZWQiLCJzZXRQcm9kdWN0VmFyaWFudCIsInNldFByb2R1Y3RWYXJpYW50MiIsImFkZFByb2R1Y3RUb0NhcnQiLCJoYWxvX2J1eV9pdF9ub3ciLCJmb2N1c2FibGVFbGVtZW50cyIsIiRmb3JtMiIsIiRwcm9kdWN0T3B0aW9uc0VsZW1lbnQyIiwicHJvZHVjdE9wdGlvbnNDaGFuZ2VkMiIsIl9pc0VtcHR5IiwiJHByb2R1Y3RJZCIsIm9wdGlvbkNoYW5nZUNhbGxiYWNrIiwicHJvZHVjdEF0dHJpYnV0ZXMiLCJvcHRpb25DaGFuZ2UiLCJzZXJpYWxpemUiLCJkaXNwYXRjaFByb2R1Y3RCYW5uZXJFdmVudCIsInByZXZpZXdNb2RhbCIsIl9pbmhlcml0c0xvb3NlIiwicHJvZHVjdFF1YW50aXR5RXJyb3JNZXNzYWdlIiwic3dhdGNoR3JvdXBJZCIsImZvcm0iLCJsaXN0IiwicHVzaCIsImhlaWdodCIsInNjcm9sbFRvcCIsImZvcm1IZWlnaHQiLCJvZmZzZXQiLCJ0b3AiLCJhbmltYXRlIiwidW5zYXRpc2ZpZWRSZXF1aXJlZEZpZWxkcyIsIm9wdGlvbkxhYmVsIiwiaW5uZXJUZXh0Iiwib3B0aW9uVGl0bGUiLCJzcGxpdCIsInJlcXVpcmVkIiwidG9Mb3dlckNhc2UiLCJxdWVyeVNlbGVjdG9yIiwiaXNTYXRpc2ZpZWQiLCJmcm9tIiwicXVlcnlTZWxlY3RvckFsbCIsImV2ZXJ5Iiwic2VsZWN0IiwiZGF0ZVN0cmluZyIsIngiLCJqb2luIiwiY2hlY2tlZCIsImdldFNlbGVjdGVkT3B0aW9uTGFiZWwiLCJwcm9kdWN0VmFyaWFudHNsaXN0IiwibWF0Y2hMYWJlbEZvckNoZWNrZWRJbnB1dCIsImlucHQiLCJkYXRhc2V0IiwicHJvZHVjdEF0dHJpYnV0ZVZhbHVlIiwibGFiZWxzIiwicHJvZHVjdFZhcmlhbnQiLCJzb3J0IiwidmlldyIsInByb2R1Y3ROYW1lIiwiY2FyZCIsInByb2R1Y3RWYXJpYW50MiIsImxpc3RWYXJpYW50IiwidG9TdHJpbmciLCJwb3AiLCJpc1J1bm5pbmdJbklmcmFtZSIsInNlbGYiLCIkY2hhbmdlZE9wdGlvbiIsInBhcmVudHMiLCJwcm9kdWN0SWQiLCJGb3JtRGF0YSIsInByb2R1Y3RBdHRyaWJ1dGVzQ29udGVudCIsImNoZWNrSXNRdWlja1ZpZXdDaGlsZCIsImRpc3BhdGNoRXZlbnQiLCJDdXN0b21FdmVudCIsImJ1YmJsZXMiLCJkZXRhaWwiLCJzZWxlY3RlZF9hdHRyaWJ1dGVzIiwiZWwiLCJvcCIsIm9wVGl0bGUiLCJjb2xvciIsIiRzd2F0Y2giLCIkc3dhdGNoR3JvdXAiLCJzd2F0Y2hOYW1lIiwiYWN0aXZlU3dhdGNoR3JvdXBJZCIsInNldExpdmVSZWdpb25BdHRyaWJ1dGVzIiwicm9sZVR5cGUiLCJhcmlhTGl2ZVN0YXR1cyIsInJvbGUiLCJzaG93UHJvZHVjdEltYWdlIiwiaW1hZ2UiLCJfaXNQbGFpbk9iamVjdCIsInpvb21JbWFnZVVybCIsInRvb2xzIiwiaW1hZ2VTcmNzZXQiLCJnZXRTcmNzZXQiLCJ6b29tU2l6ZSIsIm1haW5JbWFnZVVybCIsInByb2R1Y3RTaXplIiwibWFpbkltYWdlU3Jjc2V0Iiwic2V0QWx0ZXJuYXRlSW1hZ2UiLCJyZXN0b3JlSW1hZ2UiLCJfdGhpczUiLCJxdWFudGl0eU1pbiIsInF1YW50aXR5TWF4IiwicXR5Iiwid2hpY2giLCJfdGhpczYiLCJfdGhpczciLCIkYWRkVG9DYXJ0QnRuIiwib3JpZ2luYWxCdG5WYWwiLCJ3YWl0TWVzc2FnZSIsIml0ZW1BZGQiLCJ0bXAiLCJjcmVhdGVFbGVtZW50IiwiaW5uZXJIVE1MIiwidGV4dENvbnRlbnQiLCJyZWRpcmVjdFRvIiwidXJscyIsImNoZWNrb3V0Iiwic2luZ2xlX2FkZHJlc3MiLCJoYWxvQWRkVG9DYXJ0QWN0aW9uIiwidGVtcGxhdGUiLCJsb2FkaW5nQ2xhc3MiLCIkYm9keSIsIiRjYXJ0RHJvcGRvd24iLCIkY2FydExvYWRpbmciLCJnZXRDb250ZW50IiwiY2FydF9pdGVtIiwiY2FydF91cmwiLCJnZXRDYXJ0Q29udGVudCIsImNhcnRJdGVtSWQiLCJvbkNvbXBsZXRlIiwic3VnZ2VzdCIsImNvbmZpZyIsInN1Z2dlc3Rpb25zIiwibGltaXQiLCJ1cmwiLCJpZnJhbWVTZGsiLCJ1cGRhdGVDYXJ0Q29udGVudCIsIm1vZGFsIiwidXBkYXRlQ29udGVudCIsIiRjYXJ0UXVhbnRpdHkiLCIkY29udGVudCIsIiRjYXJ0Q291bnRlciIsIiRwcm9tb3Rpb25CYW5uZXIiLCIkYmFja1RvU2hvcHBwaW5nQnRuIiwiJG1vZGFsQ2xvc2VCdG4iLCJiYW5uZXJVcGRhdGVIYW5kbGVyIiwiJHByb2R1Y3RDb250YWluZXIiLCJjdXJyZW50U2VsZWN0RWxlbWVudCIsImRpc2FibGVkU2VsZWN0RWxlbWVudCIsInNlbGVjdEVsZW1lbnQiLCJpbnNlcnRBZnRlciIsInNlbGVjdGVkT3B0aW9uIiwicHJldmlvdXNJbmRleCIsIiRlbGVtZW50Tm93QXRQcmV2aW91c0luZGV4IiwiZXEiLCJhcHBlbmRUbyIsInByZXBlbmRUbyIsImZuIiwiaW5zZXJ0U3RhdGVIaWRkZW5GaWVsZCIsIm1ha2VTdGF0ZVJlcXVpcmVkIiwic3RhdGVFbGVtZW50IiwiYXR0cnMiLCJfdHJhbnNmb3JtIiwicmV0IiwibmFtZSIsInJlcGxhY2VtZW50QXR0cmlidXRlcyIsInJlcGxhY2VXaXRoIiwiJG5ld0VsZW1lbnQiLCIkaGlkZGVuSW5wdXQiLCJwcmV2IiwibWFrZVN0YXRlT3B0aW9uYWwiLCJhZGRPcHRpb25zIiwic3RhdGVzQXJyYXkiLCIkc2VsZWN0RWxlbWVudCIsImNvbnRhaW5lciIsInByZWZpeCIsIl9lYWNoIiwic3RhdGVzIiwic3RhdGVPYmoiLCJjYWxsYmFjayIsImNvdW50cnlOYW1lIiwiZ2V0QnlOYW1lIiwic3RhdGVfZXJyb3IiLCIkY3VycmVudElucHV0IiwibmV3RWxlbWVudCIsImZpbHRlckVtcHR5VmFsdWVzRnJvbUZvcm0iLCJmb3JtRGF0YSIsIl9pdGVyYXRvciIsIl9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyTG9vc2UiLCJfc3RlcCIsImRvbmUiLCJfc3RlcCR2YWx1ZSIsImZpbHRlckVtcHR5RmlsZXNGcm9tRm9ybSIsIl9pdGVyYXRvcjIiLCJfc3RlcDIiLCJfc3RlcDIkdmFsdWUiLCJGaWxlIiwic2l6ZSIsImV2dCIsImFtb3VudCIsImlucHV0VGFnTmFtZXMiLCJjcmVhdGVQYXNzd29yZFZhbGlkYXRpb25FcnJvclRleHRPYmplY3QiLCJlbXB0eSIsImNvbmZpcm0iLCJtaXNtYXRjaCIsImludmFsaWQiLCJvbkVtcHR5UGFzc3dvcmRFcnJvclRleHQiLCJvbkNvbmZpcm1QYXNzd29yZEVycm9yVGV4dCIsIm9uTWlzbWF0Y2hQYXNzd29yZEVycm9yVGV4dCIsIm9uTm90VmFsaWRQYXNzd29yZEVycm9yVGV4dCIsImNsYXNzaWZ5SW5wdXQiLCJpbnB1dCIsImZvcm1GaWVsZENsYXNzIiwiJGZvcm1GaWVsZCIsInRhZ05hbWUiLCJjbGFzc05hbWUiLCJzcGVjaWZpY0NsYXNzTmFtZSIsImlucHV0VHlwZSIsIl9pbmNsdWRlcyIsIl9jYW1lbENhc2UiLCJfY2FwaXRhbGl6ZSIsImNsYXNzaWZ5Rm9ybSIsImZvcm1TZWxlY3RvciIsIiRpbnB1dHMiLCJfb3B0aW9ucyIsIl9vcHRpb25zJGZvcm1GaWVsZENsYSIsImdldEZpZWxkSWQiLCJmaWVsZElkIiwibWF0Y2giLCIkc3RhdGVGaWVsZCIsInN0YXRlRmllbGRBdHRycyIsImFmdGVyIiwiYWN0aXZlSW5wdXRDb250YWluZXIiLCIkZXJyTWVzc2FnZSIsInNldEVtYWlsVmFsaWRhdGlvbiIsInZhbGlkYXRvciIsImVycm9yVGV4dCIsInNldFBhc3N3b3JkVmFsaWRhdGlvbiIsInBhc3N3b3JkU2VsZWN0b3IiLCJwYXNzd29yZDJTZWxlY3RvciIsInJlcXVpcmVtZW50cyIsImlzT3B0aW9uYWwiLCIkcGFzc3dvcmQiLCJwYXNzd29yZFZhbGlkYXRpb25zIiwiUmVnRXhwIiwiYWxwaGEiLCJudW1lcmljIiwibWlubGVuZ3RoIiwic2V0TWluTWF4UHJpY2VWYWxpZGF0aW9uIiwic2VsZWN0b3JzIiwicHJpY2VWYWxpZGF0aW9uRXJyb3JUZXh0cyIsImVycm9yU2VsZWN0b3IiLCJmaWVsZHNldFNlbGVjdG9yIiwibWF4UHJpY2VTZWxlY3RvciIsIm1pblByaWNlU2VsZWN0b3IiLCJfcHJpY2VWYWxpZGF0aW9uRXJyb3IiLCJvbk1pblByaWNlRXJyb3IiLCJvbk1heFByaWNlRXJyb3IiLCJtaW5QcmljZU5vdEVudGVyZWQiLCJtYXhQcmljZU5vdEVudGVyZWQiLCJvbkludmFsaWRQcmljZSIsImNvbmZpZ3VyZSIsInByZXZlbnRTdWJtaXQiLCJzZXRNZXNzYWdlT3B0aW9ucyIsImVycm9yU3BhbiIsInNldFN0YXRlQ291bnRyeVZhbGlkYXRpb24iLCIkZmllbGRDbGFzc0VsZW1lbnQiLCJrZXlzIiwiZm9yRWFjaCIsImRvY3VtZW50TW9kZSIsImNvbGxlY3Rpb24iLCJzbGljZSIsImNoYW5nZVdpc2hsaXN0UGFnaW5hdGlvbkxpbmtzIiwid2lzaGxpc3RVcmwiLCJwYWdpbmF0aW9uSXRlbXMiLCJwYWdpbmF0aW9uTGluayIsInBhZ2VOdW1iZXIiLCJ3aXNobGlzdFBhZ2luYXRvckhlbHBlciIsIiRwYWdpbmF0aW9uTGlzdCIsIiRuZXh0SXRlbSIsIiRwcmV2SXRlbSIsImN1cnJlbnRIcmVmIiwicGFydGlhbFBhZ2luYXRpb25VcmwiLCJzaGlmdCIsIlRSQU5TTEFUSU9OUyIsImlzVHJhbnNsYXRpb25EaWN0aW9uYXJ5Tm90RW1wdHkiLCJkaWN0aW9uYXJ5IiwiY2hvb3NlQWN0aXZlRGljdGlvbmFyeSIsInBhcnNlIiwiY3JlYXRlVHJhbnNsYXRpb25EaWN0aW9uYXJ5IiwidmFsaWRhdGlvbkRpY3Rpb25hcnlKU09OIiwidmFsaWRhdGlvbkZhbGxiYWNrRGljdGlvbmFyeUpTT04iLCJ2YWxpZGF0aW9uRGVmYXVsdERpY3Rpb25hcnlKU09OIiwiYWN0aXZlRGljdGlvbmFyeSIsImxvY2FsaXphdGlvbnMiLCJ0cmFuc2xhdGlvbktleXMiLCJkZWZhdWx0UGFnZUJ1aWxkZXJWYWx1ZXMiLCJwZHBfc2FsZV9iYWRnZV9sYWJlbCIsInBkcF9zb2xkX291dF9sYWJlbCIsInRyYW5zbGF0ZVBhZ2VCdWlsZGVyVmFsdWVzIiwiaXRlbVRleHQiLCJpdGVtRGVmYXVsdFRyYW5zbGF0aW9uIiwiVXJsIiwidXJsVXRpbHMiLCJnZXRVcmwiLCJwYXRobmFtZSIsInNlYXJjaCIsImdvVG9VcmwiLCJoaXN0b3J5IiwicHVzaFN0YXRlIiwicmVwbGFjZVBhcmFtcyIsInBhcnNlZCIsInBhcmFtIiwiaGFzT3duUHJvcGVydHkiLCJmb3JtYXQiLCJidWlsZFF1ZXJ5U3RyaW5nIiwicXVlcnlEYXRhIiwib3V0IiwiaXNBcnJheSIsIm5keCIsInN1YnN0cmluZyIsInBhcnNlUXVlcnlQYXJhbXMiLCJ0ZW1wIiwiUGFnZU1hbmFnZXIiLCJjdXJyZW5jeVNlbGVjdG9yIiwiZm91bmRhdGlvbiIsImNhcnRQcmV2aWV3IiwiYWRtaW5CYXIiLCJzdmdJbmplY3RvciIsImhhbG9HbG9iYWwiLCJHbG9iYWwiLCJfUGFnZU1hbmFnZXIiLCJvblJlYWR5IiwiX3RoaXMkY29udGV4dCIsImNoYW5uZWxJZCIsImNhcnRJZCIsImNhdGVnb3J5SWQiLCJzZWN1cmVCYXNlVXJsIiwibWFpbnRlbmFuY2VNb2RlU2V0dGluZ3MiLCJhZG1pbkJhckxhbmd1YWdlIiwic2hvd0FkbWluQmFyIiwiaXNQcm9kdWN0Q2FyZFByZXNlbnRlZCIsImlzUHJvZHVjdExpc3RQcmVzZW50ZWQiLCJtYWludGVuYW5jZU1vZGUiLCJsYW5nIiwidHJhbnNsYXRpb25zIiwiaXNNYWludGVuYW5jZU1vZGUiLCJoZWFkZXIiLCJpc0luSWZyYW1lIiwiZ2V0Q29udGV4dHVhbE1hdGNoIiwiZG9lc05vdEhhdmVBZG1pbkNvb2tpZSIsImNvb2tpZSIsIlVSTFNlYXJjaFBhcmFtcyIsIlVSTCIsInNlYXJjaFBhcmFtcyIsImVuY29kZVVSSUNvbXBvbmVudCIsImhyZWYiLCJjb250ZXh0dWFsTWF0Y2giLCJzd2FsIiwiaGFsb1F1aWNrRWRpdENhcnQiLCJDYXJ0UHJldmlld0V2ZW50cyIsIiRjYXJ0IiwiQXBwbGVQYXlTZXNzaW9uIiwic3RvcmFnZSIsImxvY2FsU3RvcmFnZUF2YWlsYWJsZSIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJnZXRJdGVtIiwiY2FydFF0eVByb21pc2UiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImdldENhcnRRdWFudGl0eSIsImJhc2VVcmwiLCJpdGVtSWQiLCJjYXJ0UmVtb3ZlSXRlbSIsInByZVZhbCIsImNhcnRVcGRhdGVRdHlUZXh0Q2hhbmdlIiwiY2FydFVwZGF0ZSIsIiRlbCIsIm9sZFF0eSIsIm1heFF0eSIsIm1pblF0eSIsIm1pbkVycm9yIiwibWF4RXJyb3IiLCJuZXdRdHkiLCJpbnZhbGlkRW50cnkiLCJmaXJlIiwiaWNvbiIsIml0ZW1VcGRhdGUiLCJzdGF0dXMiLCJyZWZyZXNoQ29udGVudCIsImVycm9ycyIsIml0ZW1SZW1vdmUiLCJwcmVwZW5kIiwiJHByaXZhY3lEaWFsb2ciLCJkYXRlIiwiRGF0ZSIsInNldERhdGUiLCJnZXREYXRlIiwidG9HTVRTdHJpbmciLCJob29rcyIsImVtaXQiLCJjaGFuZ2VDdXJyZW5jeSIsImN1cnJlbmN5Q29kZSIsImFqYXgiLCJjb250ZW50VHlwZSIsImZhaWwiLCJyZXNwb25zZVRleHQiLCJzaG93Q2FuY2VsQnV0dG9uIiwiY3VycmVuY3lTZXNzaW9uU3dpdGNoZXIiLCJnZXRDYXJ0Iiwic2hvd1dhcm5pbmciLCJkaXNjb3VudHMiLCJzb21lIiwiZGlzY291bnQiLCJkaXNjb3VudGVkQW1vdW50IiwiY291cG9ucyIsImxpbmVJdGVtcyIsImdpZnRDZXJ0aWZpY2F0ZXMiLCJyZXZlYWxDbG9zZUZhY3RvcnkiLCJkcm9wZG93biIsImFjdGl2ZV9jbGFzcyIsInJldmVhbCIsImJnX2NsYXNzIiwiZGlzbWlzc19tb2RhbF9jbGFzcyIsImNsb3NlX29uX2JhY2tncm91bmRfY2xpY2siLCJ0YWIiLCJ0cmF2ZXJzaW5nIiwiZXZlbnRzIiwib2xkRGF0YSIsImVsZW0iLCJjdXJEYXRhIiwiaGFzRGF0YSIsInNhbWVLZXlzIiwiY2FtZWxDYXNlIiwib2xkTG9hZCIsImhhbmRsZXIiLCJzcGxpY2UiLCJ0cmlnZ2VySGFuZGxlciIsIm9sZEluaXQiLCJub2RlVHlwZSIsIm9sZEZuRmluZCIsIk5hbm9iYXIiLCJuYW5vYmFyIiwidGltZXIiLCJjdXJyZW50IiwiY2xlYXJUaW1lciIsImNsZWFySW50ZXJ2YWwiLCJzZXRUaW1lciIsInNldEludGVydmFsIiwiZ28iLCJhamF4U2VuZCIsImFqYXhDb21wbGV0ZSIsIk1lbnUiLCIkbWVudSIsImhhc01heE1lbnVEaXNwbGF5RGVwdGgiLCJjb2xsYXBzaWJsZXMiLCJjb2xsYXBzaWJsZUdyb3VwcyIsIm9uTWVudUNsaWNrIiwib25Eb2N1bWVudENsaWNrIiwiY29sbGFwc2VBbGwiLCJjb2xsYXBzZU5laWdoYm9ycyIsIiRuZWlnaGJvcnMiLCIkY29sbGFwc2libGUiLCJtZW51RmFjdG9yeSIsImNhY2hlZE1lbnUiLCJtZW51IiwiQ0FNRUwiLCJTTkFLRSIsIm1vYmlsZU1lbnVJZCIsIm1lbnVTZWxlY3RvciIsIk1vYmlsZU1lbnVUb2dnbGUiLCJfcmVmJGhlYWRlclNlbGVjdG9yIiwiaGVhZGVyU2VsZWN0b3IiLCJfcmVmJG1lbnVTZWxlY3RvciIsIl9yZWYkc2Nyb2xsVmlld1NlbGVjdCIsInNjcm9sbFZpZXdTZWxlY3RvciIsIiRoZWFkZXJNZW51IiwiJG5hdkxpc3QiLCIkaGVhZGVyIiwiJHNjcm9sbFZpZXciLCIkc3ViTWVudXMiLCJtZWRpdW1NZWRpYVF1ZXJ5TGlzdCIsIm9uVG9nZ2xlQ2xpY2siLCJvbkNhcnRQcmV2aWV3T3BlbiIsIm9uTWVkaXVtTWVkaWFRdWVyeU1hdGNoIiwib25TdWJNZW51Q2xpY2siLCJldiIsIiRjbG9zZXN0QWN0aW9uUGFyZW50IiwiJHBhcmVudFNpYmxpbmdzIiwiJGNsb3Nlc3RBY3Rpb25MZXZlbCIsIiRiZWZvcmVNZW51SGVpZ2h0IiwiJGN1cnJlbnRtZW51SGVpZ2h0IiwiJGNsb3Nlc3RBY3Rpb24iLCJvdXRlckhlaWdodCIsInJlc2V0U3ViTWVudXMiLCIkY2xvc2VzdEFjdGlvbjIiLCIkY2xvc2VzdEFjdGlvbjMiLCIkcGFyZW50U2libGluZ3MyIiwiJHBhcmVudEFjdGlvbjIiLCJtb2JpbGVNZW51VG9nZ2xlRmFjdG9yeSIsImNhY2hlZE1vYmlsZU1lbnUiLCJtb2JpbGVNZW51IiwiZm9jdXNUcmFwIiwiYm9keUFjdGl2ZUNsYXNzIiwibG9hZGluZ092ZXJsYXlDbGFzcyIsIm1vZGFsQm9keUNsYXNzIiwibW9kYWxDb250ZW50Q2xhc3MiLCJTaXplQ2xhc3NlcyIsIm5vcm1hbCIsIk1vZGFsRXZlbnRzIiwib3BlbmVkIiwibG9hZGVkIiwiZ2V0U2l6ZUZyb21Nb2RhbCIsIiRtb2RhbCIsImdldFZpZXdwb3J0SGVpZ2h0IiwibXVsdGlwbGVyIiwidmlld3BvcnRIZWlnaHQiLCJ3cmFwTW9kYWxCb2R5IiwiJG1vZGFsQm9keSIsInJlc3RyYWluQ29udGVudEhlaWdodCIsImJvZHlIZWlnaHQiLCJjb250ZW50SGVpZ2h0IiwibWF4SGVpZ2h0IiwiY3JlYXRlTW9kYWxDb250ZW50IiwiZXhpc3RpbmdDb250ZW50IiwiY3JlYXRlTG9hZGluZ092ZXJsYXkiLCIkbG9hZGluZ092ZXJsYXkiLCJNb2RhbCIsIl9yZWYkc2l6ZSIsImRlZmF1bHRTaXplIiwicGVuZGluZyIsIiRwcmVNb2RhbEZvY3VzZWRFbCIsIm9uTW9kYWxPcGVuIiwib25Nb2RhbE9wZW5lZCIsIm9uTW9kYWxDbG9zZSIsIm9uTW9kYWxDbG9zZWQiLCJfcmVmMiRwZW5kaW5nIiwiX3JlZjIkY2xlYXJDb250ZW50IiwiY2xlYXJDb250ZW50IiwiX3JlZjMkd3JhcCIsIndyYXAiLCJzZXR1cEZvY3VzVHJhcCIsImFjdGl2ZUVsZW1lbnQiLCJjcmVhdGVGb2N1c1RyYXAiLCJlc2NhcGVEZWFjdGl2YXRlcyIsInJldHVybkZvY3VzT25EZWFjdGl2YXRlIiwiYWxsb3dPdXRzaWRlQ2xpY2siLCJmYWxsYmFja0ZvY3VzIiwiZmFsbGJhY2tOb2RlIiwiZGVhY3RpdmF0ZSIsImFjdGl2YXRlIiwib25lIiwiX3BlbmRpbmciLCJfc2l6ZSIsIiRtb2RhbHMiLCJjYWNoZWRNb2RhbCIsImRlZmF1bHRNb2RhbCIsIiRjYW5jZWxCdG4iLCIkY29uZmlybUJ0biIsIl9vcHRpb25zJGljb24iLCJfb3B0aW9ucyQkcHJlTW9kYWxGb2MiLCJvbkNvbmZpcm0iLCJoYWxvQWRkT3B0aW9uRm9yUHJvZHVjdCIsIlRPUF9TVFlMSU5HIiwiJHF1aWNrU2VhcmNoUmVzdWx0cyIsIiRxdWlja1NlYXJjaFJlc3VsdHNDdXN0b20iLCIkcXVpY2tTZWFyY2hGb3JtcyIsIiRzZWFyY2hRdWVyeSIsIiRzZWFyY2hCdG5CWUwiLCIkc2VhcmNoUXVlcnkyIiwiJHNlYXJjaEJ0bk1vYmlsZSIsIiRzZWFyY2hJbnB1dE1vYmlsZSIsIiRzZWFyY2hDb250ZW50TW9iaWxlIiwiJHNlYXJjaE1vYmlsZUNsb3NlIiwibGlzdElEcyIsInF1aWNrU2VhcmNoUG9wdWxhcklkIiwibGlzdElEIiwicXVpY2tTZWFyY2hSZXN1bHRMaW1pdCIsIiRvcHRpb25zIiwibnVtIiwiJHByb2RJZCIsImdldEJ5SWQiLCJoYXNQcm9kIiwiaGFsb19oZWFkZXJfbGF5b3V0IiwiZGVib3VuY2VXYWl0VGltZSIsImRvU2VhcmNoIiwiX2RlYm91bmNlIiwic2VhcmNoUXVlcnkiLCJtb2JpbGVGaXJzdCIsIiRibG9ja0lkIiwic2VhcmNoVXJsIiwiaGFsb05vdGlmeU1lIiwiaGFsb1lvdXR1YmVDYXJvdXNlbCIsInNvbGRQcm9kdWN0Iiwidmlld2luZ1Byb2R1Y3QiLCJjb3VudERvd25Qcm9kdWN0IiwicHJvZHVjdFZpZXdTaGFyZUxpbmsiLCIkd3JhcHBlciIsIm51bWJlcnNQcm9kdWN0X3RleHQiLCJwcm9kdWN0X3NvbGRQcm9kdWN0X3Byb2R1Y3RzIiwibnVtYmVyc0hvdXJzX3RleHQiLCJwcm9kdWN0X3NvbGRQcm9kdWN0X2hvdXJzIiwic29sZFByb2R1Y3RUZXh0IiwicHJvZHVjdF9zb2xkUHJvZHVjdF90ZXh0Iiwic29sZFByb2R1Y3RUZXh0MiIsInByb2R1Y3Rfc29sZFByb2R1Y3RfaG91cnNfdGV4dCIsIm51bWJlcnNQcm9kdWN0TGlzdCIsIm51bWJlcnNQcm9kdWN0SXRlbSIsImZsb29yIiwicmFuZG9tIiwibnVtYmVyc0hvdXJzTGlzdCIsIm51bWJlcnNIb3Vyc0l0ZW0iLCJjb3VudERvd24iLCJjb3VudERvd25EYXRlIiwiZ2V0VGltZSIsInNlZnQiLCJjb3VudGRvd25mdW5jdGlvbiIsIm5vdyIsImRpc3RhbmNlIiwiZGF5cyIsImhvdXJzIiwibWludXRlcyIsInNlY29uZHMiLCJzdHJDb3VudERvd24iLCJ2aWV3ZXJUZXh0IiwicHJvZHVjdF92aWV3aW5nUHJvZHVjdF90ZXh0IiwibnVtYmVyc1ZpZXdlcl90ZXh0IiwicHJvZHVjdF92aWV3aW5nUHJvZHVjdF92aWV3ZXIiLCJudW1iZXJzVmlld2VyTGlzdCIsInRpbWVWaWV3ZXIiLCJwcm9kdWN0X3ZpZXdpbmdQcm9kdWN0X2NoYW5nZSIsIm51bWJlcnNWaWV3ZXJJdGVtIiwiJHNoYXJlTGlua0J0biIsIiRzaGFyZUxpbmtQb3B1cCIsIiRzaGFyZUxpbmtDbG9zZSIsIiRzaGFyZUxpbmtDb3B5IiwiZXhlY0NvbW1hbmQiLCJyZXZlYWxDbG9zZUF0dHIiLCJyZXZlYWxDbG9zZVNlbGVjdG9yIiwicmV2ZWFsU2VsZWN0b3IiLCJSZXZlYWxDbG9zZSIsIm1vZGFsSWQiLCJvbkNsaWNrIiwiJGJ1dHRvbnMiLCJjYWNoZWRCdXR0b24iLCJidXR0b24iLCJzd2VldEFsZXJ0Iiwid2Vha01hcCIsIldlYWtNYXAiLCJTd2FsIiwibWl4aW4iLCJidXR0b25zU3R5bGluZyIsImN1c3RvbUNsYXNzIiwiY29uZmlybUJ1dHRvbiIsImNhbmNlbEJ1dHRvbiIsImF6V3JhcHBlciIsImF6TmF2aWdhdGlvbiIsInJlcXVlc3RPcHRpb25zIiwiYnJhbmRzIiwiYnJhbmRwYWdlX2JyYW5kc19wZXJfcGFnZSIsImhhbG9fYnJhbmRBWmxheW91dCIsImdldEFsbEJyYW5kIiwiYnJhbmROYXZpZ2F0aW9uRXZlbnQiLCJnZXRQYWdlIiwicGFyc2VMaXN0QnJhbmQiLCJuZXh0VXJsIiwibG9hZE1vcmVCcmFuZHMiLCJpc0xldHRlciIsInN0ciIsImxldHRlciIsInJlcXVpcmUiLCJ3cmFwcGVyIiwiY2FsbFByb2R1Y3RPcHRpb24iLCJwcm9kdWN0X2NsYXNzIiwidW5pcXVlQXJyYXkiLCJnZXRQcm9kdWN0T3B0aW9uIiwicmVuZGVyT3B0aW9uIiwiYXJyIiwidGhpc1Byb2R1Y3QiLCJwcm9kdWN0X3dyYXBwZXIiLCJ0eHQiLCJjb3VudE1vcmVPcHRpb24iLCJwcm9kdWN0TGluayIsImhhbG9faG9tZXBhZ2VfbGF5b3V0XzEiLCJ0b2tlbiIsImFGaWx0ZXIiLCJwcm9kdWN0cyIsImVudGl0eUlkIiwicHJvZHVjdEltYWdlIiwicHJvZHVjdEZpZWxkQ29sb3IiLCJhRmlsdGVyMiIsInZhcmlhbnRzIiwiZGVmYXVsdEltYWdlIiwidXJsT3JpZ2luYWwiLCJ2YXJpYW50SW1hZ2UiLCJhRmlsdGVyMyIsInByb2R1Y3RPcHRpb25zIiwiYUZpbHRlcjQiLCJkaXNwbGF5U3R5bGUiLCJhRmlsdGVyNSIsInRpdGxlVmFyIiwiaWRWYXIiLCJsZW5ndGhDb2xvclZhciIsImhleENvbG9ycyIsImNvbG9yMSIsImNvbG9yMiIsImNvbG9yMyIsImltZyIsImltYWdlVXJsIiwiQm9vbGVhbiIsImluQXJyYXkiLCJoYWxvQWpheEFkZFRvQ2FydCIsImFsZXJ0IiwiY2FydEl0ZW1IYXNoIiwiJGxvZ2luRm9ybSIsInJlZ2lzdGVyTG9naW5WYWxpZGF0aW9uIiwibG9naW5Nb2RlbCIsImxvZ2luVmFsaWRhdG9yIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJ1cmxTdWNjZXNzMSIsInVybFN1Y2Nlc3MyIiwidXJsRXJyb3IiLCJwcm9jZXNzRGF0YSIsInN1Y2Nlc3MiLCJyZXNwb25zZVVSTCIsImpxWEhSIiwiZXhjZXB0aW9uIiwicmVhZHkiLCJoYWxvX2Fza19hbl9leHBlcnRfcGFnZWxpbmsiLCJ0eXBlQ29udGFjdCIsInR5cGVQYWNrYWdlIiwiY3VzdG9tZXJNZXNzYWdlIiwicmVjYXB0Y2hhIiwiJGJlZm9yZUxlYXZlIiwiY3VyQ29kZSIsInNldENvb2tpZSIsImNuYW1lIiwiY3ZhbHVlIiwiZXhkYXlzIiwiZCIsInNldFRpbWUiLCJleHBpcmVzIiwidG9VVENTdHJpbmciLCJnZXRDb29raWUiLCJjYSIsImMiLCJjaGFyQXQiLCJkZWxldGVDb29raWUiLCJCQ19Qcm9kdWN0cyIsImhvd01hbnlUb1Nob3ciLCJob3dNYW55VG9TdG9yZUluTWVtb3J5IiwidCIsIm4iLCJyIiwicyIsImNvbmZpZ3VyYXRpb24iLCJoYWxvX2JlZm9yZV95b3VfbGVhdmVfaGlzdG9yeV9leHBpcmVzX2RhdGUiLCJwYXRoIiwiZG9tYWluIiwiaG9zdG5hbWUiLCJ3cml0ZSIsInJlYWQiLCJkZXN0cm95IiwibyIsInUiLCIkb3B0aW9uIiwiaGFsb19iZWZvcmVfeW91X2xlYXZlX2hpc3RvcnlfY291bnQiLCJ1bmlxdWUiLCJtIiwidiIsImNvdW50IiwiJHRhYiIsImoiLCJyZXNpemVJbWFnZSIsInNob3dIaXN0b3J5IiwiZXh0ZW5kIiwiZ2V0Q29uZmlnIiwiY2xlYXJMaXN0IiwicmVjb3JkSGlzdG9yeSIsInByb2R1Y3RfaWQiLCJ1bnNoaWZ0IiwiZ2V0UHJvZHVjdCIsImZvcm1hdE1vbmV5IiwiYWJzIiwiU3RyaW5nIiwidG9GaXhlZCIsInN1YnN0ciIsIlByb2R1Y3RzQ2Fyb3VzZWwiLCJzbGlkZXNQZXJSb3ciLCJyb3dzIiwicmVzcG9uc2l2ZSIsInNldHRpbmdzIiwiYmVmb3JlWW91TGVhdmUiLCJiZWZvcmVZb3VMZWF2ZV90aW1lIiwicHJvZHVjdExvYWRUaW1lIiwiaWRsZVRpbWUiLCJwcm9kdWN0SURTIiwiaGFsb19iZWZvcmVfeW91X2xlYXZlX3JlY29tbWVuZGVkX2lkIiwicmVuZGVyUHJvZHVjdCIsImN1cnJlbmN5IiwiZGlzcGxheSIsImhpc3RvcnlQcm9kdWN0cyIsInNsaWNrSW50ZXJ2YWwiLCJ0aW1lckluY3JlbWVudCIsIiRiZWZvcmVMZWF2ZVNlYXJjaCIsInJlc2V0VGltZXIiLCJjdXJEaXNwbGF5Iiwic3ltYm9sIiwic3ltYm9sUGxhY2VtZW50IiwiZGVjaW1hbFRva2VuIiwiZGVjaW1hbFBsYWNlcyIsInRob3VzYW5kc1Rva2VuIiwicmVzdHJpY3RfdG9fbG9naW4iLCJwcmljZXMiLCJwcmljZVJhbmdlIiwicHJpY2VfcmFuZ2VzIiwicHJpY2VNaW4iLCJwcmljZU1heCIsInByaWNlRGVmIiwicmV0YWlsUHJpY2UiLCJiYXNlUHJpY2UiLCJwcmljZUJhcyIsInByaWNlUmV0IiwicHJvZHVjdFRpdGxlIiwiaGFsb19jYXJkX3RpdGxlIiwiaHRtbF9jYXJkIiwiaW1nNzBweCIsImFsdFRleHQiLCJ0YWJJZCIsImNvb2tpZVZhbHVlIiwiaGFsb19zaGlwcGluZyIsImxvYWRGcmVlU2hpcHBpbmdNZXNzYWdlIiwic2hvd0ZyZWVTaGlwcGluZ01lc3NhZ2UiLCJoYWxvX3NoaXBwaW5nX3R5cGUiLCJzaG93UHJvZ3Jlc3MiLCJjb3VudHJ5Q29kZSIsImNvdW50cnlMaXN0IiwiZ2V0U2NyaXB0IiwiZ2VvcGx1Z2luX2NvdW50cnlDb2RlIiwic2NvcGUiLCJtYXhfcGVyY2VudCIsImNsYXNzUHJvZ3Jlc3MiLCJjb25kaXRpb25fcmVxdWlyZWQiLCJjb25kaXRpb25fbWF0Y2hlZCIsImNvbmRpdGlvbl9yZW1haW5pbmciLCJudW1fcmVxdWlyZWQiLCJudW1fbWF0Y2hlZCIsIm51bV9yZW1haW5pbmciLCJwZXJjZW50IiwidXBzZWxsTWVzc2FnZSIsInByb2dyZXNzIiwicGFnZUNhcnQiLCJhbmltYXRvciIsImJlZm9yZSIsInByZXZpZXdDYXJ0Iiwic2hvd1RpbWVyIiwiY3VyUGVyY2VudGFnZSIsInRhcmdldFBlcmNlbnRhZ2UiLCJvdXRwdXRTZWxlY3RvciIsImFuaW1hdGlvblNwZWVkIiwicGVyY2VuQW5pbWF0b3IiLCJwZXJjZW50YWdlIiwiaGFsb19zaGlwcGluZ19yZXF1aXJlZCIsImhhbG9fc2hpcHBpbmdfcmVtYWluaW5nIiwiaGFsb19zaGlwcGluZ19tYXRjaGVkIiwiaGFsb05ld3NsZXR0ZXJQb3B1cCIsImhhbG9SZWNlbnRseUJvdWdodFBvcHVwIiwiaGFsb1JlY2VudGx5Vmlld2VkUHJvZHVjdCIsImhhbG9CZWZvcmVZb3VMZWF2ZSIsImhhbG9NZWdhTWVudUVkaXRvciIsImhhbG9NZWdhTWVudUVkaXRvckN1c3RvbSIsImhhbG9BamF4TG9naW5Qb3B1cCIsIkFaQnJhbmRzIiwiaGFsb0hvbWVQcm9kdWN0TG9va2Jvb2siLCJtb2JpbGVNZW51VG9nZ2xlIiwicXVpY2tWaWV3IiwicHJpdmFjeUNvb2tpZU5vdGlmaWNhdGlvbiIsImxvYWRpbmdQcm9ncmVzc0JhciIsInF1aWNrU2VhcmNoIiwiaGFsb0Fza0FuRXhwZXJ0UG9wdXAiLCJ0aGVtZV9zZXR0aW5ncyIsImhlaWdodF9wcm9tb3Rpb24iLCJoZWlnaHRfaGVhZGVyIiwic2Nyb2xsX3Bvc2l0aW9uIiwiY2hlY2tKU19sb2FkIiwiY2hlY2tfbG9hZFByb2R1Y3RDYXJvdXNlbCIsImNoZWNrX2xvYWRQcm9kdWN0R3JpZCIsImNoZWNrX2hvbWVQcm9kdWN0VGFiQnlDYXRlZ29yeSIsImNoZWNrX2hvbWVMUENhcm91c2VsIiwiY2hlY2tfaG9tZUltYWdlQ2Fyb3VzZWwiLCJjaGVja19ob21lSW1hZ2VJbnN0YWdyYW1DYXJvdXNlbCIsImNoZWNrX2hvbWVJbWFnZUluc3RhZ3JhbTJDYXJvdXNlbCIsImNoZWNrX2hvbWVJbWFnZUdhbGxlcnlDYXJvdXNlbCIsImNoZWNrX2hvbWVQb3B1bGFyQ2F0ZWdvcnlDYXJvdXNlbCIsImNoZWNrX2hvbWVMb29rQm9vazFDYXJvdXNlbCIsImNoZWNrX2hvbWVMb29rQm9vazJDYXJvdXNlbCIsImNoZWNrX2hvbWVDdXN0b21lckNhcm91c2VsIiwiY2hlY2tfaG9tZUJsb2dQb3N0c0Nhcm91c2VsIiwiY2hlY2tfaG9tZUltYWdlUG9saWN5Q2Fyb3VzZWwiLCJjaGVja19ob21lQ2F0ZWdvcnlDYXJvdXNlbCIsImxvYWRGdW5jdGlvbiIsImhhbG9fYXNrX2FuX2V4cGVydCIsImhhbG9fbWVudV90YWIiLCJoYWxvX3JlY2VudGx5X3ZpZXdlZF9wcm9kdWN0cyIsImhhbG9fbmV3c2xldHRlcl9wb3B1cCIsImFjdGl2ZU1lbnVNb2JpbGUiLCJ2YXJpYW50SW1hZ2VDb2xvciIsImZvb3Rlck1vYmlsZVRvZ2dsZSIsImNoZWNrQ29va2llc1BvcHVwIiwiYmFja1RvVG9wIiwiYmxvZ1RhZ3MiLCJldmVudExvYWQiLCJ3V2lkdGgiLCJpbm5lcldpZHRoIiwidFNjcm9sbCIsInByb2R1Y3RDYXJvdXNlbCIsInNob3dEb3RiYXJzIiwic2VhcmNoRm9ybU1vYmlsZSIsImxvYWRPcHRpb25Gb3JQcm9kdWN0Q2Fyb3VzZWwiLCJsb2FkUHJvZHVjdEdyaWQiLCJsb2FkUHJvZHVjdFRhYkJ5Q2F0ZWdvcnkiLCJob3Zlck1lbnUiLCJob21lSW1hZ2VDYXJvdXNlbCIsImhvbWVQYXJhbGxheCIsImhhbG9mYWRlSW5VcCIsIiRwcm9kV3JhcElkIiwic2xpY2tEb3RzIiwiaGFsb1N0aWNreUhlYWRlciIsIkV2ZW50IiwiYnRuX2NhcmRPcHRpb24iLCIkdGFyZ2VyIiwidGhpc1RpdGxlIiwiJGJ0bl9jbG9zZSIsIiRidG5fbW9iaWxlTWVudSIsIiRiZWZvcmVZb3VMZWF2ZSIsIiRzaWRlTG9naW4iLCIkc2lkZUNhcnQiLCIkdGhpc193bCIsInVybF9hd2wiLCJwb3N0IiwiJGZvb3RlckhlYWRpbmdUb2dnbGUiLCIkdGhpc0Zvb3RlckluZm8iLCIkdGhpc0Zvb3RlckluZm9fbGlzdCIsIiRtZW51UGMiLCIkbWVudU1vYmlsZSIsIm5ld0ltYWdlVmFyaWFudCIsInByb2R1Y3RJdGVtRWxtIiwidmFyaWFudFRpdGxlIiwic2Nyb2xsIiwiaGFsb19oZWFkZXJTdGlja3kiLCIkbG9hZFByb2R1Y3RDYXJvdXNlbCIsIiRsb2FkUHJvZHVjdENhcm91c2VsVG9wIiwiJGxvYWRQcm9kdWN0R3JpZCIsIiRsb2FkUHJvZHVjdEdyaWRUb3AiLCJjb2wiLCJob21lX3Byb2R1Y3RfYmxvY2tfY29sIiwibGltaXRQcm9kdWN0IiwiYmx1ciIsIiRob21lUHJvZHVjdFRhYkJ5Q2F0ZWdvcnkiLCIkaG9tZVByb2R1Y3RUYWJCeUNhdGVnb3J5VG9wIiwiYmxvY2siLCJjYXRJZCIsImNhdFVybCIsImJsb2NrSWQiLCJsb2FkQ2F0ZWdvcnkiLCJvcHRpb24iLCJzbGlja0Nhcm91c2VsIiwiaG9tZV9wcm9kdWN0X2Jsb2NrX3RhYl9jb2wiLCJ0b3RhbFNsaWRlU3RlcENvdW50IiwiZG90YmFycyIsInBhcmVudEVsZW1lbnQiLCJiYXJUaHVtYiIsImJhclRodW1iV2lkdGgiLCJjbGllbnRXaWR0aCIsImRvdHNCYXJMZWZ0IiwiY3VycmVudFNsaWRlIiwibmV4dFNsaWRlIiwiZG90c0FjdGl2ZSIsImxlZnQiLCJhZGRFdmVudExpc3RlbmVyIiwiY2xpY2tlZEluZGV4IiwicGFnZVgiLCIkaG9tZUxQQ2Fyb3VzZWwiLCIkaG9tZUltYWdlQ2Fyb3VzZWwiLCIkaG9tZUltYWdlSW5zdGFncmFtQ2Fyb3VzZWwiLCIkaG9tZUltYWdlSW5zdGFncmFtMkNhcm91c2VsIiwiJGhvbWVJbWFnZUdhbGxlcnlDYXJvdXNlbCIsIiRob21lUG9wdWxhckNhdGVnb3J5Q2Fyb3VzZWwiLCIkaG9tZUxvb2tCb29rMUNhcm91c2VsIiwiJGhvbWVMb29rQm9vazJDYXJvdXNlbCIsIiRob21lQ3VzdG9tZXJDYXJvdXNlbCIsIiRob21lQmxvZ1Bvc3RzQ2Fyb3VzZWwiLCIkaG9tZUltYWdlUG9saWN5Q2Fyb3VzZWwiLCIkaG9tZUNhdGVnb3J5Q2Fyb3VzZWwiLCIkaG9tZUxQQ2Fyb3VzZWxUb3AiLCJmYWRlIiwibWFpbkNhcm91c2VsQXJyb3ciLCJhdXRvcGxheVNwZWVkIiwibWFpbkNhcm91c2VsU3BlZWQiLCJzbGlkZXIiLCJwYWRTdGFydCIsIiRob21lSW1hZ2VDYXJvdXNlbFRvcCIsIiRob21lSW1hZ2VJbnN0YWdyYW1DYXJvdXNlbFRvcCIsIiRob21lSW1hZ2VJbnN0YWdyYW0yQ2Fyb3VzZWxUb3AiLCIkaG9tZUltYWdlR2FsbGVyeUNhcm91c2VsVG9wIiwiJGhvbWVQb3B1bGFyQ2F0ZWdvcnlDYXJvdXNlbFRvcCIsIiRob21lTG9va0Jvb2sxQ2Fyb3VzZWxUb3AiLCIkaG9tZUxvb2tCb29rMkNhcm91c2VsVG9wIiwiJGhvbWVDdXN0b21lckNhcm91c2VsVG9wIiwiJGhvbWVCbG9nUG9zdHNDYXJvdXNlbFRvcCIsImNvbHVtbiIsImhvbWVCbG9nUG9zdHNDb2x1bW4iLCIkaG9tZUltYWdlUG9saWN5Q2Fyb3VzZWxUb3AiLCIkaG9tZUNhdGVnb3J5Q2Fyb3VzZWxUb3AiLCJsb2FkTWVudVRhYiIsImNhbm9uaWNhbCIsInBhZ2VVcmwiLCJtZW51VGFiSXRlbSIsIm1lbnVUYWIiLCJrZXl3b3JkIiwiYWN0aXZlIiwidXJsX2Jsb2dUYWdzIiwiJGhvbWVQYXJhbGxheCIsIiRob21lUGFyYWxsYXhIYWZ0IiwiJGhvbWVQYXJhbGxheFRvcCIsIiRob21lUGFyYWxsYXhCb3R0b20iLCJ0cmFuc2Zvcm0iLCJ0cmFuc2l0aW9uIiwiJGhhbG9CbG9jayIsIiRoYWxvQmxvY2tUb3AiLCIkaGFsb0Jsb2NrQm90dG9tIiwibGlzdDEiLCJsaXN0MiIsInByb2R1Y3RMb29rQm9vazEiLCJwcm9kdWN0TG9va0Jvb2syIiwibG9va2Jvb2tQb3B1cCIsImxvb2tib29rU2xpZGUiLCJwcm9kdWN0SURzIiwiJHByb2R1Y3RJRCIsIiRwb3B1cCIsImdldFNob3BUaGVMb29rMSIsIiR0aGlzU2xpZGUiLCIkdGhpc1Byb2R1Y3QiLCIkcHJvZHVjdEJsb2NrIiwiZ2V0UHJvZHVjdEdyaWQiLCJwcm9kdWN0SUQiLCJoYWxvTG9va2Jvb2tQb3B1cCIsImNsYXNzTGlzdCIsInNjcm9sbEludG9WaWV3IiwiZ2V0U2hvcFRoZUxvb2syIiwiZ2V0UHJvZHVjdFNsaWRlIiwidG1wXzMiLCJpbWcyNTBweCIsInRtcF8yIiwiaHRtbF9jYXJkXzIiLCJodG1sX2NhcmRfMyIsImhhbG9NZWdhTWVudSIsIm1lbnVJdGVtIiwic2V0TWVnYU1lbnUiLCJkcm9wQWxpZ24iLCJkcm9wV2lkdGgiLCJjYXRlQ29sdW1ucyIsImJvdHRvbUNhdGVzIiwibGFiZWxUeXBlIiwiY29udGVudExlZnQiLCJjb250ZW50UmlnaHQiLCJpbWFnZXMiLCJpbWFnZXNUb3AiLCJpbWFnZXNDdXN0b20iLCJpbWFnZXNMZWZ0IiwiaW1hZ2VzUmlnaHQiLCJzdWJNZWdhTWVudSIsInN1Yk1lbnVMaXN0IiwiaW1hZ2VBcmVhV2lkdGgiLCJjYXRlQXJlYVdpZHRoIiwiJG1lZ2FtZW51QnJhbmRzIiwiJG1lbnVicmFuZEl0ZW0iLCJuYXZQYWdlc0FjdGlvbiIsImhhbG9NZWdhbWVudVR5cGUiLCJTZXRJdGVtTWVnYU1lbnUiLCJudW1iZXJJdGVtIiwiTG9hZE1lZ2FNZW51IiwibXN0eWxlMV9pdGVtIiwibXN0eWxlMV9pdGVtX2ltZ193aWR0aCIsIm1zdHlsZTFfaXRlbV9jb2xfd2lkdGgiLCJtc3R5bGUxX2l0ZW1fY29sIiwibXN0eWxlMV9pdGVtMV9saW5rIiwidXJsSW1nTG9hZCIsInVybFN0b3JlSGFzaCIsIm1zdHlsZTFfaXRlbTFfaW1nIiwibXN0eWxlMV9pdGVtMl9saW5rIiwibXN0eWxlMV9pdGVtMl9pbWciLCJtc3R5bGUxX2l0ZW0zX2xpbmsiLCJtc3R5bGUxX2l0ZW0zX2ltZyIsIm1zdHlsZTFfaXRlbV9jdXN0b21fbGluazEiLCJtc3R5bGUxX2l0ZW1fY3VzdG9tX2xpbmt0ZXh0MSIsIm1zdHlsZTFfaXRlbV9jdXN0b21fbGluazIiLCJtc3R5bGUxX2l0ZW1fY3VzdG9tX2xpbmt0ZXh0MiIsIm1zdHlsZTFfaXRlbV9jdXN0b21fbGluazMiLCJtc3R5bGUxX2l0ZW1fY3VzdG9tX2xpbmt0ZXh0MyIsIm1zdHlsZTFfaXRlbV9jdXN0b21fbGluazQiLCJtc3R5bGUxX2l0ZW1fY3VzdG9tX2xpbmt0ZXh0NCIsIm1zdHlsZTFfaXRlbV9jdXN0b21fbGluazUiLCJtc3R5bGUxX2l0ZW1fY3VzdG9tX2xpbmt0ZXh0NSIsIm1zdHlsZTFfaXRlbV9jdXN0b21fbGluazYiLCJtc3R5bGUxX2l0ZW1fY3VzdG9tX2xpbmt0ZXh0NiIsIm1zdHlsZTJfaXRlbV9zdWJNZW51QmxvY2siLCJtc3R5bGUxX2l0ZW1fY3VzdG9tX2xpbms3IiwibXN0eWxlMV9pdGVtX2N1c3RvbV9pbWcxIiwibXN0eWxlMV9pdGVtX2N1c3RvbV9saW5rdGV4dDciLCJtc3R5bGUxX2l0ZW1fY3VzdG9tX2xpbms4IiwibXN0eWxlMV9pdGVtX2N1c3RvbV9pbWcyIiwibXN0eWxlMV9pdGVtX2N1c3RvbV9saW5rdGV4dDgiLCJtc3R5bGUxX2l0ZW1fY3VzdG9tX2xpbms5IiwibXN0eWxlMV9pdGVtX2N1c3RvbV9pbWczIiwibXN0eWxlMV9pdGVtX2N1c3RvbV9saW5rdGV4dDkiLCJtc3R5bGUxX2l0ZW1fY3VzdG9tX2xpbmsxMCIsIm1zdHlsZTFfaXRlbV9jdXN0b21faW1nNCIsIm1zdHlsZTFfaXRlbV9jdXN0b21fbGlua3RleHQxMCIsIm1zdHlsZTFfaXRlbV9jdXN0b21fbGluazExIiwibXN0eWxlMV9pdGVtX2N1c3RvbV9pbWc1IiwibXN0eWxlMV9pdGVtX2N1c3RvbV9saW5rdGV4dDExIiwibXN0eWxlMl9pdGVtIiwibXN0eWxlMl9pdGVtX2ltZ193aWR0aCIsIm1zdHlsZTJfaXRlbV9jb2xfd2lkdGgiLCJtc3R5bGUyX2l0ZW1fY29sIiwibXN0eWxlMl9pdGVtX2N1c3RvbV9saW5rMSIsIm1zdHlsZTJfaXRlbV9jdXN0b21fbGlua3RleHQxIiwibXN0eWxlMl9pdGVtX2N1c3RvbV9saW5rMiIsIm1zdHlsZTJfaXRlbV9jdXN0b21fbGlua3RleHQyIiwibXN0eWxlMl9pdGVtX2N1c3RvbV9saW5rMyIsIm1zdHlsZTJfaXRlbV9jdXN0b21fbGlua3RleHQzIiwibXN0eWxlMl9pdGVtX2N1c3RvbV9saW5rNCIsIm1zdHlsZTJfaXRlbV9jdXN0b21fbGlua3RleHQ0IiwibXN0eWxlMl9pdGVtX2N1c3RvbV9saW5rNSIsIm1zdHlsZTJfaXRlbV9jdXN0b21fbGlua3RleHQ1IiwibXN0eWxlMl9pdGVtX2N1c3RvbV9saW5rNiIsIm1zdHlsZTJfaXRlbV9jdXN0b21fbGlua3RleHQ2IiwibXN0eWxlMl9pdGVtX2xpbmszIiwibXN0eWxlMl9pdGVtX2ltZzMiLCJtc3R5bGUyX2l0ZW1fcHJvZHVjdEJsb2NrIiwibXN0eWxlMl9pdGVtX3Byb2R1Y3RCbG9ja19idG5BbGwiLCJtc3R5bGUyX2l0ZW1fbGluazEiLCJtc3R5bGUyX2l0ZW1faW1nMSIsIm1zdHlsZTJfaXRlbV9saW5rMiIsIm1zdHlsZTJfaXRlbV9pbWcyIiwibXN0eWxlM19pdGVtIiwibXN0eWxlM19pdGVtX2ltZ193aWR0aCIsIm1zdHlsZTNfaXRlbV9jb2xfd2lkdGgiLCJtc3R5bGUzX2l0ZW1fY29sIiwibXN0eWxlM19pdGVtX2N1c3RvbV9saW5rMSIsIm1zdHlsZTNfaXRlbV9jdXN0b21fbGlua3RleHQxIiwibXN0eWxlM19pdGVtX2N1c3RvbV9saW5rMiIsIm1zdHlsZTNfaXRlbV9jdXN0b21fbGlua3RleHQyIiwibXN0eWxlM19pdGVtX2N1c3RvbV9saW5rMyIsIm1zdHlsZTNfaXRlbV9jdXN0b21fbGlua3RleHQzIiwibXN0eWxlM19pdGVtX2N1c3RvbV9saW5rNCIsIm1zdHlsZTNfaXRlbV9jdXN0b21fbGlua3RleHQ0IiwibXN0eWxlM19pdGVtX2N1c3RvbV9saW5rNSIsIm1zdHlsZTNfaXRlbV9jdXN0b21fbGlua3RleHQ1IiwibXN0eWxlM19pdGVtX2N1c3RvbV9saW5rNiIsIm1zdHlsZTNfaXRlbV9jdXN0b21fbGlua3RleHQ2IiwibXN0eWxlM19pdGVtX2xpbmsxIiwibXN0eWxlM19pdGVtX2ltZzEiLCJtc3R5bGUzX2l0ZW1fbGluazIiLCJtc3R5bGUzX2l0ZW1faW1nMiIsIm1zdHlsZTNfaXRlbV9ib3R0b21DYXRlcyIsIk1lZ2FNZW51TGFiZWwiLCJtZWdhX21lbnVfbmV3X2xhYmVsIiwibWVnYV9tZW51X25ld19sYWJlbF90ZXh0IiwibWVnYV9tZW51X2hvdF9sYWJlbCIsIm1lZ2FfbWVudV9ob3RfbGFiZWxfdGV4dCIsIm1lZ2FfbWVudV9zYWxlX2xhYmVsIiwibWVnYV9tZW51X3NhbGVfbGFiZWxfdGV4dCIsInNldEl0ZW1NZWdhTWVudSIsIm9ubG9hZCIsIm1vdXNlb3ZlciIsIm1jc3R5bGUxX2l0ZW0iLCJtY3N0eWxlMV9pdGVtX2ltZ193aWR0aCIsIm1jc3R5bGUxX2l0ZW1fY29sX3dpZHRoIiwibWNzdHlsZTFfaXRlbV9jb2wiLCJtY3N0eWxlMV9pdGVtMV9saW5rIiwibWNzdHlsZTFfaXRlbTFfaW1nIiwibWNzdHlsZTFfaXRlbTJfbGluayIsIm1jc3R5bGUxX2l0ZW0yX2ltZyIsIm1jc3R5bGUxX2l0ZW0zX2xpbmsiLCJtY3N0eWxlMV9pdGVtM19pbWciLCJtY3N0eWxlMV9pdGVtX2N1c3RvbV9saW5rMSIsIm1jc3R5bGUxX2l0ZW1fY3VzdG9tX2xpbmt0ZXh0MSIsIm1jc3R5bGUxX2l0ZW1fY3VzdG9tX2xpbmsyIiwibWNzdHlsZTFfaXRlbV9jdXN0b21fbGlua3RleHQyIiwibWNzdHlsZTFfaXRlbV9jdXN0b21fbGluazMiLCJtY3N0eWxlMV9pdGVtX2N1c3RvbV9saW5rdGV4dDMiLCJtY3N0eWxlMV9pdGVtX2N1c3RvbV9saW5rNCIsIm1jc3R5bGUxX2l0ZW1fY3VzdG9tX2xpbmt0ZXh0NCIsIm1jc3R5bGUxX2l0ZW1fY3VzdG9tX2xpbms1IiwibWNzdHlsZTFfaXRlbV9jdXN0b21fbGlua3RleHQ1IiwibWNzdHlsZTFfaXRlbV9jdXN0b21fbGluazYiLCJtY3N0eWxlMV9pdGVtX2N1c3RvbV9saW5rdGV4dDYiLCJtY3N0eWxlMl9pdGVtX3N1Yk1lbnVCbG9jayIsIm1jc3R5bGUxX2l0ZW1fY3VzdG9tX2xpbms3IiwibWNzdHlsZTFfaXRlbV9jdXN0b21faW1nMSIsIm1jc3R5bGUxX2l0ZW1fY3VzdG9tX2xpbmt0ZXh0NyIsIm1jc3R5bGUxX2l0ZW1fY3VzdG9tX2xpbms4IiwibWNzdHlsZTFfaXRlbV9jdXN0b21faW1nMiIsIm1jc3R5bGUxX2l0ZW1fY3VzdG9tX2xpbmt0ZXh0OCIsIm1jc3R5bGUxX2l0ZW1fY3VzdG9tX2xpbms5IiwibWNzdHlsZTFfaXRlbV9jdXN0b21faW1nMyIsIm1jc3R5bGUxX2l0ZW1fY3VzdG9tX2xpbmt0ZXh0OSIsIm1jc3R5bGUxX2l0ZW1fY3VzdG9tX2xpbmsxMCIsIm1jc3R5bGUxX2l0ZW1fY3VzdG9tX2ltZzQiLCJtY3N0eWxlMV9pdGVtX2N1c3RvbV9saW5rdGV4dDEwIiwibWNzdHlsZTFfaXRlbV9jdXN0b21fbGluazExIiwibWNzdHlsZTFfaXRlbV9jdXN0b21faW1nNSIsIm1jc3R5bGUxX2l0ZW1fY3VzdG9tX2xpbmt0ZXh0MTEiLCJtY3N0eWxlMl9pdGVtIiwibWNzdHlsZTJfaXRlbV9pbWdfd2lkdGgiLCJtY3N0eWxlMl9pdGVtX2NvbF93aWR0aCIsIm1jc3R5bGUyX2l0ZW1fY29sIiwibWNzdHlsZTJfaXRlbV9jdXN0b21fbGluazEiLCJtY3N0eWxlMl9pdGVtX2N1c3RvbV9saW5rdGV4dDEiLCJtY3N0eWxlMl9pdGVtX2N1c3RvbV9saW5rMiIsIm1jc3R5bGUyX2l0ZW1fY3VzdG9tX2xpbmt0ZXh0MiIsIm1jc3R5bGUyX2l0ZW1fY3VzdG9tX2xpbmszIiwibWNzdHlsZTJfaXRlbV9jdXN0b21fbGlua3RleHQzIiwibWNzdHlsZTJfaXRlbV9jdXN0b21fbGluazQiLCJtY3N0eWxlMl9pdGVtX2N1c3RvbV9saW5rdGV4dDQiLCJtY3N0eWxlMl9pdGVtX2N1c3RvbV9saW5rNSIsIm1jc3R5bGUyX2l0ZW1fY3VzdG9tX2xpbmt0ZXh0NSIsIm1jc3R5bGUyX2l0ZW1fY3VzdG9tX2xpbms2IiwibWNzdHlsZTJfaXRlbV9jdXN0b21fbGlua3RleHQ2IiwibWNzdHlsZTJfaXRlbV9saW5rMyIsIm1jc3R5bGUyX2l0ZW1faW1nMyIsIm1jc3R5bGUyX2l0ZW1faW1nMSIsIm1jc3R5bGUyX2l0ZW1fcHJvZHVjdEJsb2NrIiwibWNzdHlsZTJfaXRlbV9wcm9kdWN0QmxvY2tfYnRuQWxsIiwibWNzdHlsZTJfaXRlbV9saW5rMSIsIm1jc3R5bGUyX2l0ZW1fbGluazIiLCJtY3N0eWxlMl9pdGVtX2ltZzIiLCJtY3N0eWxlM19pdGVtIiwibWNzdHlsZTNfaXRlbV9pbWdfd2lkdGgiLCJtY3N0eWxlM19pdGVtX2NvbF93aWR0aCIsIm1jc3R5bGUzX2l0ZW1fY29sIiwibWNzdHlsZTNfaXRlbV9jdXN0b21fbGluazEiLCJtY3N0eWxlM19pdGVtX2N1c3RvbV9saW5rdGV4dDEiLCJtY3N0eWxlM19pdGVtX2N1c3RvbV9saW5rMiIsIm1jc3R5bGUzX2l0ZW1fY3VzdG9tX2xpbmt0ZXh0MiIsIm1jc3R5bGUzX2l0ZW1fY3VzdG9tX2xpbmszIiwibWNzdHlsZTNfaXRlbV9jdXN0b21fbGlua3RleHQzIiwibWNzdHlsZTNfaXRlbV9jdXN0b21fbGluazQiLCJtY3N0eWxlM19pdGVtX2N1c3RvbV9saW5rdGV4dDQiLCJtY3N0eWxlM19pdGVtX2N1c3RvbV9saW5rNSIsIm1jc3R5bGUzX2l0ZW1fY3VzdG9tX2xpbmt0ZXh0NSIsIm1jc3R5bGUzX2l0ZW1fY3VzdG9tX2xpbms2IiwibWNzdHlsZTNfaXRlbV9jdXN0b21fbGlua3RleHQ2IiwibWNzdHlsZTNfaXRlbV9saW5rMSIsIm1jc3R5bGUzX2l0ZW1faW1nMSIsIm1jc3R5bGUzX2l0ZW1fbGluazIiLCJtY3N0eWxlM19pdGVtX2ltZzIiLCJtY3N0eWxlM19pdGVtX2JvdHRvbUNhdGVzIiwibWVnYV9tZW51X2N1c3RvbV9uZXdfbGFiZWwiLCJtZWdhX21lbnVfY3VzdG9tX25ld19sYWJlbF90ZXh0IiwibWVnYV9tZW51X2N1c3RvbV9ob3RfbGFiZWwiLCJtZWdhX21lbnVfY3VzdG9tX2hvdF9sYWJlbF90ZXh0IiwibWVnYV9tZW51X2N1c3RvbV9zYWxlX2xhYmVsIiwibWVnYV9tZW51X2N1c3RvbV9zYWxlX2xhYmVsX3RleHQiLCJzZXRDbG9zZVBvcHVwIiwiZXhwaXJlc0RhdGUiLCJzZXRPcGVuUG9wdXAiLCJ0aW1lVG9TaG93IiwiaGFsb19uZXdzbGV0dGVyX3BvcHVwX3RpbWUiLCJoYWxvX25ld3NsZXR0ZXJfcG9wdXBfZXhwaXJlc19kYXRlIiwia2V5dXAiLCIkbm90aWZ5IiwiJG5vdGlmeUZvcm0iLCIkbm90aWZ5QnRuIiwiJG5vdGlmeUNoZWNrIiwiJG5vdGlmeVRleHQiLCJyZWdpc3Rlck5vdGlmeU1lVmFsaWRhdGlvbiIsIm5vdGlmeU1vZGVsIiwibm90aWZ5VmFsaWRhdG9yIiwic2VuZE1haWwiLCJsb2dvIiwic3ViamVjdE1haWwiLCJoYWxvX25vdGlmeV9tZV9zdWJqZWN0IiwibWFpbFRvIiwiaGFsb19ub3RpZnlfbWVfbWFpbHRvIiwicHJvZHVjdFVybCIsIm5vdGlmeV9wb3N0X2RhdGEiLCJvdXRwdXQiLCJyZXNldEZvcm0iLCJnaWZ0Q2VydENoZWNrIiwiJGNhcnRDb250ZW50IiwiJGNhcnRNZXNzYWdlcyIsIiRjYXJ0VG90YWxzIiwiaGFsb19RdWlja0VkaXRDYXJ0IiwiYWRkVG9DYXJ0IiwiYXJyUCIsImsiLCJsaXN0ZW5RdWFudGl0eUNoYW5nZVVwZGF0ZSIsImNoZWNrUHJvZHVjdCIsImFyclBybyIsImNoZWNrIiwibGVuIiwiY2hlY2tCZWZvcmVBZGQiLCIkYXR0cmlidXRlcyIsImF0dCIsInVwZGF0ZVByb2R1Y3RDbG9uZWRBdHRyaWJ1dGVzIiwibnVtYmVyIiwiJGZvcm1MYWJlbCIsIiRmb3JtSW5wdXQiLCJuZXdJZCIsIiRmb3JtU2VsZWN0IiwiJHF1YW50aXR5IiwiJGRlYyIsIiRpbmMiLCJwcm9kdWN0dGh1bWJfc2l6ZSIsIiRjYXJ0SXRlbXNSb3dzIiwiJGNhcnRQYWdlVGl0bGUiLCJ0b3RhbHMiLCJwYWdlVGl0bGUiLCJzdGF0dXNNZXNzYWdlcyIsImJpbmRDYXJ0RXZlbnRzIiwiY2hhbmdlIiwic3RyaW5nIiwiYmluZFByb21vQ29kZUV2ZW50cyIsIiRjb3Vwb25Db250YWluZXIiLCIkY291cG9uRm9ybSIsIiRjb2RlSW5wdXQiLCJjb2RlIiwiYXBwbHlDb2RlIiwiYmluZEdpZnRDZXJ0aWZpY2F0ZUV2ZW50cyIsIiRjZXJ0Q29udGFpbmVyIiwiJGNlcnRGb3JtIiwiJGNlcnRJbnB1dCIsImFwcGx5R2lmdENlcnRpZmljYXRlIiwicmVzcCIsImJpbmRHaWZ0V3JhcHBpbmdFdmVudHMiLCJnZXRJdGVtR2lmdFdyYXBwaW5nT3B0aW9ucyIsImJpbmRHaWZ0V3JhcHBpbmdGb3JtIiwiYWxsb3dNZXNzYWdlIiwidG9nZ2xlVmlld3MiLCIkc2luZ2xlRm9ybSIsIiRtdWx0aUZvcm0iLCJzaGlwcGluZ0NvdW50cnlFcnJvck1lc3NhZ2UiLCJzaGlwcGluZ1Byb3ZpbmNlRXJyb3JNZXNzYWdlIiwiJHF0eSIsIm9wdGlvbnMyIiwiY29uZmlndXJlSW5DYXJ0IiwiZXJyMiIsInJlc3BvbnNlMiIsIiRmaXJzdEl0ZW0iLCIkZm9ybVF0eSIsImNsb25lIiwiJHByb2R1Y3QiLCJwcm9UaXRsZSIsImpxdWVyeUNvb2tpZSIsInJlY2VudGx5Qm91Z2h0IiwicmVjZW50bHlfYm91Z2h0X3Byb2R1Y3RJRCIsImhvdXJzSXRlbXMiLCJyZWNlbnRseV9ib3VnaHRfaG91cnMiLCJsaXN0SG91cnMiLCJ0ZXh0X2luZm8iLCJyZWNlbnRseV9ib3VnaHRfdGV4dF9pbmZvIiwidGV4dF9uYW1lIiwicmVjZW50bHlfYm91Z2h0X3RleHRfbmFtZSIsImNoYW5nZVNsaWRlcyIsInJlY2VudGx5X2JvdWdodF9jaGFuZ2VTbGlkZXMiLCJsb2NhdGlvbjEiLCJyZWNlbnRseV9ib3VnaHRfbG9jYXRpb24xIiwibG9jYXRpb24yIiwicmVjZW50bHlfYm91Z2h0X2xvY2F0aW9uMiIsImxvY2F0aW9uMyIsInJlY2VudGx5X2JvdWdodF9sb2NhdGlvbjMiLCJsb2NhdGlvbjQiLCJyZWNlbnRseV9ib3VnaHRfbG9jYXRpb240IiwibG9jYXRpb241IiwicmVjZW50bHlfYm91Z2h0X2xvY2F0aW9uNSIsImxvY2F0aW9uNiIsInJlY2VudGx5X2JvdWdodF9sb2NhdGlvbjYiLCJsb2NhdGlvbjciLCJyZWNlbnRseV9ib3VnaHRfbG9jYXRpb243IiwibG9jYXRpb244IiwicmVjZW50bHlfYm91Z2h0X2xvY2F0aW9uOCIsImFyMSIsImFyMiIsImFyMyIsImFyNCIsImFyNSIsImFyNiIsImFyNyIsImFyOCIsImxpc3RJRHNfbGVuZ3RoIiwiZ2V0UHJvZHVjdEFuZFNpdGVJbmZvIiwibG9jYXRpb25MaXN0IiwibG9jYXRpb25JdGVtIiwiaG91cl9pdGVtIiwiJGNvb2tpZU1hbmFnZXIiLCIkY29va2llVXBkYXRlIiwiY29va2llSGVpZ2h0IiwiaW5mbyIsImN1c3RvbWVyIiwiaW1nMzIwcHgiLCJoYWxvUmVjZW50bHlCb3VnaHQiLCJoYWxvUmVjZW50bHlCb3VnaHRfbW9iaWxlIiwid3JhcHBlcklkIiwiaGFsb19yZWNlbnRseV92aWV3ZWRfcHJvZHVjdHNfZXhwaXJlc19kYXRlIiwic2hvd1JlY2VudGx5Vmlld2VkIiwicmVjb3JkUmVjZW50bHlWaWV3ZWQiLCJidG5BY3QiLCJpbnZlbnRvcnkiLCJpc0luU3RvY2siLCJoYWxvX3JlY2VudGx5X3ZpZXdlZF9wcm9kdWN0c19jb3VudCIsInJlY2VudGx5Vmlld0Jsb2NrIiwicmVjZW50bHlHcmlkIiwicHJvZHVjdEdyaWQiLCJwcm9kdWN0R3JpZF9sZW5ndGgiLCJtYXJnaW5fdG9wIiwiJGN1cnJUYXJnZXQiLCIkdGhpc19hcnJvdyIsIiR0aGlzX2Fycm93TmV4dCIsInNsaWNrQXRpdmVfbGVuZ3RoIiwieW91dHViZUNhcm91c2VsRmFjdG9yeSIsIm9uWW91VHViZUlmcmFtZUFQSVJlYWR5IiwiaW5pdENhcm91c2VsIiwidGFnIiwic3JjIiwiZmlyc3RTY3JpcHRUYWciLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImhhbG9Zb3V0dWJlU2xpY2siLCIkc2xpY2siLCIkdmlkZW9zIiwib25TbGlja0luaXQiLCJvblNsaWNrQmVmb3JlQ2hhbmdlIiwib25TbGlja0FmdGVyQ2hhbmdlIiwib25QbGF5ZXJSZWFkeSIsImdldElmcmFtZSIsInBsYXlWaWRlbyIsIm9uUGxheWVyU3RhdGVDaGFuZ2UiLCJZVCIsIlBsYXllclN0YXRlIiwiUExBWUlORyIsIkVOREVEIiwidmlkIiwiJHZpZCIsIl91bmlxdWVJZCIsInBsYXllciIsIlBsYXllciIsImhvc3QiLCJ2aWRlb0lkIiwid21vZGUiLCJwbGF5ZXJWYXJzIiwiY29udHJvbHMiLCJkaXNhYmxla2IiLCJlbmFibGVqc2FwaSIsImZzIiwicmVsIiwic2hvd2luZm8iLCJpdl9sb2FkX3BvbGljeSIsIm1vZGVzdGJyYW5kaW5nIiwib25TdGF0ZUNoYW5nZSIsInN0b3BWaWRlbyIsImNvbnN0cnVjdG9yIiwicGFnZSIsIkZhbmN5Ym94IiwiJGdhbGxlcnkiLCIkbWFpbkltYWdlIiwiJG1haW5JbWFnZU5lc3RlZCIsIiRzZWxlY3RPcHRpb24iLCIkc2VsZWN0YWJsZUltYWdlcyIsIiRzd2lwVGh1bWJuYWlscyIsIiRzd2lwSW1hZ2UiLCJjdXJyZW50SW1hZ2UiLCJzZXRJbWFnZVpvb20iLCJmYW5jeWJveFpvb20iLCJzZXRNYWluSW1hZ2UiLCJpbWdPYmoiLCJfY2xvbmUiLCJzZXRBY3RpdmVUaHVtYiIsInN3YXBNYWluSW1hZ2UiLCJzYXZlZEltYWdlIiwiJHNlbGVjdGVkVGh1bWIiLCJ6b29tIiwidG91Y2giLCJzZWxlY3ROZXdJbWFnZSIsIm1haW5JbWFnZUFsdCIsInNlbGVjdE5ld0ltYWdlMiIsInNlbGVjdE5ld0ltYWdlMyIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsInNyY3NldCIsImFsdCIsImZhbGxiYWNrU3R5bGVzSUUiLCIkaW1hZ2VQcm9kdWN0Um93IiwiZmFuY3lCb3hJbWFnZSIsIldpc2hMaXN0IiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsIndpc2hsaXN0RGVsZXRlQ29uZmlybSIsImNvbmZpcm1lZCIsIndpc2hsaXN0RGVsZXRlIiwicmVnaXN0ZXJBZGRXaXNoTGlzdFZhbGlkYXRpb24iLCIkYWRkV2lzaGxpc3RGb3JtIiwiYWRkV2lzaGxpc3RWYWxpZGF0b3IiLCIkYWRkV2lzaExpc3RGb3JtIiwicmVxdWVzdCIsIl9kZWZhdWx0IiwidmVyc2lvbiIsInJlbW90ZVZlcnNpb24iLCJyZW1vdGVCYXNlRW5kcG9pbnQiLCJtYWtlUmVxdWVzdCIsInJlbW90ZSIsInJlbW90ZVJlcXVlc3QiLCJlbmRwb2ludCIsInJlbW90ZVVybCIsIkJvZGxFdmVudHNDYXJ0IiwiQmFzZSIsIkhvb2tzIiwiX0Jhc2UiLCJib2RsRXZlbnRzQ2FydCIsImdldEJvZGxFdmVudHNDYXJ0IiwiZ2V0Q2FydHMiLCJpbmNsdWRlT3B0aW9ucyIsImdldENhcnRTdW1tYXJ5IiwidG90YWxfcXVhbnRpdHkiLCJoYW5kbGVJdGVtQWRkIiwiZW1pdEFkZEl0ZW0iLCJlbWl0RGF0YSIsImNhbGxiYWNrQXJnIiwiaXRlbXMiLCJ1cGRhdGUiLCJlbWl0UmVtb3ZlSXRlbSIsImhhbmRsZUl0ZW1SZW1vdmUiLCJvcHRzIiwic3VibWl0SXRlbUdpZnRXcmFwcGluZ09wdGlvbiIsInBheWxvYWQiLCJyZW5kZXJXaXRoIiwicmVuZGVyV2l0aEFyZyIsInNoaXBwaW5nX21ldGhvZCIsIkNvdW50cnlBcGkiLCJQcm9kdWN0QXBpIiwiUHJvZHVjdEF0dHJpYnV0ZXNBcGkiLCJTZWFyY2hBcGkiLCJDYXJ0QXBpIiwiaW50ZXJuYWxzIiwiZ2V0UGFnZUJ5R1FMIiwidGVtcGxhdGVfbmFtZSIsIndpc2hsaXN0IiwiaW5DYXJ0RW5kcG9pbnQiLCJ0ZW1wbGF0ZUFyZyIsInBhcmFtc0FyZyIsIndpc2hsaXN0SWQiLCJjYWxsYmFja0ZuIiwiZ2V0Qk9ETEV2ZW50cyIsImJvZGxFdmVudHMiLCJpc0JPRExFbmFibGVkIiwiQ2FydCIsIkFkZENhcnRJdGVtRXZlbnQiLCJDUkVBVEUiLCJzaG91bGRFbWl0UmVtb3ZlSXRlbSIsIlJlbW92ZUNhcnRJdGVtRXZlbnQiLCJfcmVzcG9uc2UkZGF0YSRsaW5lX2kiLCJsaW5lX2l0ZW1zIiwiZXZlbnROYW1lIiwicHJlcGFyZVBheWxvYWQiLCJjaGFubmVsX2lkIiwicHJvZHVjdF92YWx1ZSIsIkZha2VCT0RMRXZlbnRzIiwiYWRkSXRlbSIsInJlbW92ZUl0ZW0iLCJFdmVudEVtaXR0ZXIiLCJfRXZlbnRFbWl0dGVyIiwic3Vic2NyaWJlIiwiZWxlbWVudFNlbGVjdG9yIiwiQmFzZUhvb2tzIiwiX0Jhc2VIb29rcyIsInNlYXJjaEV2ZW50cyIsIkNhcnRIb29rcyIsIkNvb2tpZUhvb2tzIiwiQ3VycmVuY3lTZWxlY3Rvckhvb2tzIiwiUHJvZHVjdEhvb2tzIiwiU2VhcmNoSG9va3MiLCJGYWNldGVkU2VhcmNoSG9va3MiLCJTb3J0QnlIb29rcyIsImZhY2V0ZWRTZWFyY2giLCJzb3J0QnkiLCJwYXJzZUhvb2tzIiwiaG9va05hbWUiLCJob29rVHlwZSIsImhvb2siLCJvcHRpb25zQ2hhbmdlIiwiRWxlbWVudCIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwic29ydEJ5RXZlbnRzIiwiZGVmYXVsdFByZXZlbnRlZCIsImVuY29kZSIsImNoYXJDb2RlQXQiLCJ0b1VwcGVyQ2FzZSIsInNwbGl0T25GaXJzdCIsInNlcGFyYXRvciIsInNlcGFyYXRvckluZGV4Iiwic29ydEJ5S2V5cyIsImEiLCJiIiwiZ2V0UGFyc2VkVmFsdWUiLCJhY2N1bXVsYXRvciIsImNvbmNhdCIsInJlZHVjZUJ5S2V5IiwiaW5jbHVkZUFycmF5SW5kZXgiLCJrZXlPZlZhbHVlIiwiY3JlYXRlIiwiaW5wdXRQYXJzZWQiLCJfc3BsaXRPbkZpcnN0IiwiZGVjb2RlVVJJQ29tcG9uZW50Iiwib2JqZWN0IiwiZmlsdGVyVmFsdWVzIiwiYXJyYXlJbmRleCIsIm9iamVjdENvcHkiLCJzaG91bGRGaWx0ZXIiLCJpc1ZhbGlkSFRUUE1ldGhvZCIsImlzVXNpbmdTZWN0aW9ucyIsInJlcXVlc3RlZFRlbXBsYXRlIiwiZ2V0VGVtcGxhdGVzIiwidGVtcGxhdGVzIiwicmVsYXRpdmVVcmwiLCJkZWZhdWx0T3B0aW9ucyIsImFzc2lnbiIsIkJDRGF0YSIsImNzcmZfdG9rZW4iLCJ1c2luZ1NlY3Rpb25zIiwidXNpbmdUZW1wbGF0ZXMiLCJyZW5kZXJfd2l0aCIsImRlbGltaXRlciIsImNsZWFuS2V5IiwidGVtcGxhdGVWYXJpYWJsZSIsIlN0ZW5jaWxVdGlscyIsInJvb3QiLCJkZWZpbmUiLCJhbWQiLCJzdGVuY2lsVXRpbHMiLCJtb2R1bGUiLCJleHBvcnRzIiwiZ2V0U3JjIiwiZGltZW5zaW9ucyIsInNpemVSZWdleCIsInNpemVzIiwiZGVzY3JpcHRvclJlZ2V4Iiwic3Jjc2V0cyIsImRlc2NyaXB0b3IiLCJJbWFnZVRvb2wiLCJJbWFnZVNyY3NldFRvb2wiLCJTdG9yYWdlVG9vbHMiLCJzdG9yYWdlQXZhaWxhYmxlIiwiRE9NRXhjZXB0aW9uIiwiX193ZWJwYWNrX3B1YmxpY19wYXRoX18iLCJqcXVlcnkiLCJnZXRBY2NvdW50IiwiZ2V0TG9naW4iLCJub29wIiwicGFnZUNsYXNzZXMiLCJhY2NvdW50X29yZGVyc3RhdHVzIiwiYWNjb3VudF9vcmRlciIsImFjY291bnRfYWRkcmVzc2Jvb2siLCJzaGlwcGluZ2FkZHJlc3Nmb3JtIiwiYWNjb3VudF9uZXdfcmV0dXJuIiwiYWRkV2lzaGxpc3QiLCJhY2NvdW50X3JlY2VudGl0ZW1zIiwiYWNjb3VudF9kb3dubG9hZGl0ZW0iLCJlZGl0YWNjb3VudCIsImFjY291bnRfaW5ib3giLCJhY2NvdW50X3NhdmVkX3JldHVybiIsImFjY291bnRfcmV0dXJucyIsImFjY291bnRfcGF5bWVudG1ldGhvZHMiLCJhY2NvdW50X2FkZHBheW1lbnRtZXRob2QiLCJhY2NvdW50X2VkaXRwYXltZW50bWV0aG9kIiwibG9naW4iLCJjcmVhdGVhY2NvdW50X3RoYW5rcyIsImNyZWF0ZWFjY291bnQiLCJnZXRuZXdwYXNzd29yZCIsImZvcmdvdHBhc3N3b3JkIiwiYmxvZyIsImJsb2dfcG9zdCIsImJyYW5kIiwiY2F0ZWdvcnkiLCJjb21wYXJlIiwicGFnZV9jb250YWN0X2Zvcm0iLCJnaWZ0Y2VydGlmaWNhdGVzIiwiZ2lmdGNlcnRpZmljYXRlc19iYWxhbmNlIiwiZ2lmdGNlcnRpZmljYXRlc19yZWRlZW0iLCJyc3MiLCJzaXRlbWFwIiwibmV3c2xldHRlcl9zdWJzY3JpYmUiLCJ3aXNobGlzdHMiLCJjdXN0b21DbGFzc2VzIiwic3RlbmNpbEJvb3RzdHJhcCIsInBhZ2VUeXBlIiwiY29udGV4dEpTT04iLCJsb2FkR2xvYmFsIiwiaW1wb3J0UHJvbWlzZXMiLCJwYWdlQ2xhc3NJbXBvcnRlciIsImN1c3RvbVRlbXBsYXRlSW1wb3J0ZXIiLCJhbGwiLCJpbXBvcnRzIiwiaW1wb3J0ZWQiXSwic291cmNlUm9vdCI6IiJ9
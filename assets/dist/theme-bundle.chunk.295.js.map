{"version":3,"file":"theme-bundle.chunk.295.js","mappings":"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","sources":["webpack://bigcommerce-hera/./assets/js/theme/gift-certificate.js"],"sourcesContent":["import PageManager from './page-manager';\nimport nod from './common/nod';\nimport checkIsGiftCertValid from './common/gift-certificate-validator';\nimport formModel from './common/models/forms';\nimport { createTranslationDictionary } from './common/utils/translations-utils';\nimport { announceInputErrorMessage } from './common/utils/form-utils';\nimport { api } from '@bigcommerce/stencil-utils';\nimport { defaultModal } from './global/modal';\n\nexport default class GiftCertificate extends PageManager {\n    constructor(context) {\n        super(context);\n        this.validationDictionary = createTranslationDictionary(context);\n\n        const $certBalanceForm = $('#gift-certificate-balance');\n\n        const purchaseModel = {\n            recipientName(val) {\n                return val.length;\n            },\n            recipientEmail(...args) {\n                return formModel.email(...args);\n            },\n            senderName(val) {\n                return val.length;\n            },\n            senderEmail(...args) {\n                return formModel.email(...args);\n            },\n            customAmount(value, min, max) {\n                return value && value >= min && value <= max;\n            },\n            setAmount(value, options) {\n                let found = false;\n\n                options.forEach((option) => {\n                    if (option === value) {\n                        found = true;\n                        return false;\n                    }\n                });\n\n                return found;\n            },\n        };\n\n        const $purchaseForm = $('#gift-certificate-form');\n        const $customAmounts = $purchaseForm.find('input[name=\"certificate_amount\"]');\n        const purchaseValidator = nod({\n            submit: '#gift-certificate-form input[type=\"submit\"]',\n            delay: 300,\n            tap: announceInputErrorMessage,\n        });\n\n        if ($customAmounts.length) {\n            const $element = $purchaseForm.find('input[name=\"certificate_amount\"]');\n            const min = $element.data('min');\n            const minFormatted = $element.data('minFormatted');\n            const max = $element.data('max');\n            const maxFormatted = $element.data('maxFormatted');\n            const insertFormattedAmountsIntoErrorMessage = (message, ...amountRange) => {\n                const amountPlaceholders = ['[MIN]', '[MAX]'];\n                let updatedErrorText = message;\n                amountPlaceholders.forEach((placeholder, i) => {\n                    updatedErrorText = updatedErrorText.includes(placeholder) ?\n                        updatedErrorText.replace(placeholder, amountRange[i]) :\n                        updatedErrorText;\n                });\n                return updatedErrorText;\n            };\n\n            purchaseValidator.add({\n                selector: '#gift-certificate-form input[name=\"certificate_amount\"]',\n                validate: (cb, val) => {\n                    const numberVal = Number(val);\n\n                    if (!numberVal) {\n                        cb(false);\n                    }\n\n                    cb(numberVal >= min && numberVal <= max);\n                },\n                errorMessage: insertFormattedAmountsIntoErrorMessage(this.validationDictionary.certificate_amount_range, minFormatted, maxFormatted),\n            });\n        }\n\n        purchaseValidator.add([\n            {\n                selector: '#gift-certificate-form input[name=\"to_name\"]',\n                validate: (cb, val) => {\n                    const result = purchaseModel.recipientName(val);\n\n                    cb(result);\n                },\n                errorMessage: this.context.toName,\n            },\n            {\n                selector: '#gift-certificate-form input[name=\"to_email\"]',\n                validate: (cb, val) => {\n                    const result = purchaseModel.recipientEmail(val);\n\n                    cb(result);\n                },\n                errorMessage: this.context.toEmail,\n            },\n            {\n                selector: '#gift-certificate-form input[name=\"from_name\"]',\n                validate: (cb, val) => {\n                    const result = purchaseModel.senderName(val);\n\n                    cb(result);\n                },\n                errorMessage: this.context.fromName,\n            },\n            {\n                selector: '#gift-certificate-form input[name=\"from_email\"]',\n                validate: (cb, val) => {\n                    const result = purchaseModel.senderEmail(val);\n\n                    cb(result);\n                },\n                errorMessage: this.context.fromEmail,\n            },\n            {\n                selector: '#gift-certificate-form input[name=\"certificate_theme\"]:first-of-type',\n                triggeredBy: '#gift-certificate-form input[name=\"certificate_theme\"]',\n                validate: (cb) => {\n                    const val = $purchaseForm.find('input[name=\"certificate_theme\"]:checked').val();\n\n                    cb(typeof (val) === 'string');\n                },\n                errorMessage: this.context.certTheme,\n            },\n            {\n                selector: '#gift-certificate-form input[name=\"agree\"]',\n                validate: (cb) => {\n                    const val = $purchaseForm.find('input[name=\"agree\"]').get(0).checked;\n\n                    cb(val);\n                },\n                errorMessage: this.context.agreeToTerms,\n            },\n            {\n                selector: '#gift-certificate-form input[name=\"agree2\"]',\n                validate: (cb) => {\n                    const val = $purchaseForm.find('input[name=\"agree2\"]').get(0).checked;\n\n                    cb(val);\n                },\n                errorMessage: this.context.agreeToTerms,\n            },\n        ]);\n\n        if ($certBalanceForm.length) {\n            const balanceVal = this.checkCertBalanceValidator($certBalanceForm);\n\n            $certBalanceForm.on('submit', () => {\n                balanceVal.performCheck();\n\n                if (!balanceVal.areAll('valid')) {\n                    return false;\n                }\n            });\n        }\n\n        $purchaseForm.on('submit', event => {\n            purchaseValidator.performCheck();\n\n            if (!purchaseValidator.areAll('valid')) {\n                return event.preventDefault();\n            }\n        });\n\n        $('#gift-certificate-preview').click(event => {\n            event.preventDefault();\n\n            purchaseValidator.performCheck();\n\n            if (!purchaseValidator.areAll('valid')) {\n                return;\n            }\n\n            const modal = defaultModal();\n            const previewUrl = `${$(event.currentTarget).data('previewUrl')}&${$purchaseForm.serialize()}`;\n\n            modal.open();\n\n            api.getPage(previewUrl, {}, (err, content) => {\n                if (err) {\n                    return modal.updateContent(this.context.previewError);\n                }\n\n                modal.updateContent(content, { wrap: true });\n            });\n        });\n    }\n\n    checkCertBalanceValidator($balanceForm) {\n        const balanceValidator = nod({\n            submit: $balanceForm.find('input[type=\"submit\"]'),\n            tap: announceInputErrorMessage,\n        });\n\n        balanceValidator.add({\n            selector: $balanceForm.find('input[name=\"giftcertificatecode\"]'),\n            validate(cb, val) {\n                cb(checkIsGiftCertValid(val));\n            },\n            errorMessage: this.validationDictionary.invalid_gift_certificate,\n        });\n\n        return balanceValidator;\n    }\n}\n"],"names":["GiftCertificate","_PageManager","context","_this","call","validationDictionary","createTranslationDictionary","$certBalanceForm","$","$purchaseForm","$customAmounts","find","purchaseValidator","nod","submit","delay","tap","announceInputErrorMessage","length","$element","min","data","minFormatted","max","maxFormatted","add","selector","validate","cb","val","numberVal","Number","errorMessage","message","_len","arguments","amountRange","Array","_key","updatedErrorText","forEach","placeholder","i","includes","replace","insertFormattedAmountsIntoErrorMessage","certificate_amount_range","purchaseModel","toName","formModel","email","apply","toEmail","fromName","fromEmail","triggeredBy","certTheme","get","checked","agreeToTerms","balanceVal","checkCertBalanceValidator","on","performCheck","areAll","event","preventDefault","click","modal","defaultModal","previewUrl","currentTarget","serialize","open","api","getPage","err","content","updateContent","previewError","wrap","prototype","$balanceForm","balanceValidator","checkIsGiftCertValid","this","invalid_gift_certificate","PageManager"],"sourceRoot":""}